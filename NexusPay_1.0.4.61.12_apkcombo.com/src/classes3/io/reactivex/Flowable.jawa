record `io.reactivex.Flowable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.reactivestreams.Publisher` @kind interface {
}
global `int` `@@io.reactivex.Flowable.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/Flowable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L41b10c.  v0:= "rx2.buffer-size" @kind object;
  #L41b110.  v1:= 128I;
  #L41b114.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L41b11a.  v0:= temp @kind object;
  #L41b11c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L41b122.  v0:= temp;
  #L41b124.  v1:= 1I;
  #L41b126.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L41b12c.  v0:= temp;
  #L41b12e.  `@@io.reactivex.Flowable.a` @type ^`int` := v0;
  #L41b132.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41b144.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41b14a.  return @kind void;
}
procedure `io.reactivex.Flowable` `a`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Consumer` v8 @kind object, `io.reactivex.functions.Consumer` v9 @kind object, `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L416178.  v0:= "onNext is null" @kind object;
  #L41617c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416182.  v0:= "onError is null" @kind object;
  #L416186.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41618c.  v0:= "onComplete is null" @kind object;
  #L416190.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416196.  v0:= "onAfterTerminate is null" @kind object;
  #L41619a.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4161a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnEach`;
  #L4161a4.  v1:= v0 @kind object;
  #L4161a6.  v2:= v7 @kind object;
  #L4161a8.  v3:= v8 @kind object;
  #L4161aa.  v4:= v9 @kind object;
  #L4161ac.  v5:= v10 @kind object;
  #L4161ae.  v6:= v11 @kind object;
  #L4161b0.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L4161b6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4161bc.  v8:= temp @kind object;
  #L4161be.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414740.  v0:= "sources is null" @kind object;
  #L414744.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41474a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L41474e.  v1:= 0I;
  #L414750.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L414756.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41475c.  v2:= temp @kind object;
  #L41475e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414770.  v0:= "sources is null" @kind object;
  #L414774.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41477a.  v0:= length @variable v2;
  #L41477c.  if v0 != 0 then goto L41478a;
  #L414780.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L414786.  v2:= temp @kind object;
  #L414788.  return v2 @kind object;
  #L41478a.  v1:= 1I;
  #L41478c.  if v0 != v1 then goto L4147a0;
  #L414790.  v0:= 0I;
  #L414792.  v2:= v2[v0] @kind object;
  #L414796.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41479c.  v2:= temp @kind object;
  #L41479e.  return v2 @kind object;
  #L4147a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAmb`;
  #L4147a4.  v1:= 0I;
  #L4147a6.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;)V` @kind direct;
  #L4147ac.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4147b2.  v2:= temp @kind object;
  #L4147b4.  return v2 @kind object;
}
procedure `int` `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41456c.  v0:= `@@io.reactivex.Flowable.a` @type ^`int`;
  #L414570.  return v0;
}
procedure `io.reactivex.Flowable` `c`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `org.reactivestreams.Publisher` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4193d8.  v0:= "timeUnit is null" @kind object;
  #L4193dc.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4193e2.  v0:= "scheduler is null" @kind object;
  #L4193e6.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4193ec.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed`;
  #L4193f0.  v1:= v0 @kind object;
  #L4193f2.  v2:= v8 @kind object;
  #L4193f4.  v3:= v9 @kind wide;
  #L4193f6.  v5:= v11 @kind object;
  #L4193f8.  v6:= v13 @kind object;
  #L4193fa.  v7:= v12 @kind object;
  #L4193fc.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L419402.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419408.  v9:= temp @kind object;
  #L41940a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L414c50.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L414c56.  v0:= temp;
  #L414c58.  call temp:= `combineLatest`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L414c5e.  v1:= temp @kind object;
  #L414c60.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L414c74.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L414c7a.  v0:= temp;
  #L414c7c.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L414c82.  v1:= temp @kind object;
  #L414c84.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414c98.  v0:= "sources is null" @kind object;
  #L414c9c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414ca2.  v0:= "combiner is null" @kind object;
  #L414ca6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414cac.  v0:= "bufferSize" @kind object;
  #L414cb0.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414cb6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L414cba.  v1:= 0I;
  #L414cbc.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L414cc2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414cc8.  v2:= temp @kind object;
  #L414cca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414cdc.  v0:= "source1 is null" @kind object;
  #L414ce0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414ce6.  v0:= "source2 is null" @kind object;
  #L414cea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414cf0.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L414cf6.  v4:= temp @kind object;
  #L414cf8.  v0:= 2I;
  #L414cfa.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414cfe.  v1:= 0I;
  #L414d00.  v0[v1]:= v2 @kind object;
  #L414d04.  v2:= 1I;
  #L414d06.  v0[v2]:= v3 @kind object;
  #L414d0a.  call temp:= `combineLatest`(v4, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414d10.  v2:= temp @kind object;
  #L414d12.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414d24.  v0:= "source1 is null" @kind object;
  #L414d28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d2e.  v0:= "source2 is null" @kind object;
  #L414d32.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d38.  v0:= "source3 is null" @kind object;
  #L414d3c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d42.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L414d48.  v5:= temp @kind object;
  #L414d4a.  v0:= 3I;
  #L414d4c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414d50.  v1:= 0I;
  #L414d52.  v0[v1]:= v2 @kind object;
  #L414d56.  v2:= 1I;
  #L414d58.  v0[v2]:= v3 @kind object;
  #L414d5c.  v2:= 2I;
  #L414d5e.  v0[v2]:= v4 @kind object;
  #L414d62.  call temp:= `combineLatest`(v5, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414d68.  v2:= temp @kind object;
  #L414d6a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414d7c.  v0:= "source1 is null" @kind object;
  #L414d80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d86.  v0:= "source2 is null" @kind object;
  #L414d8a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d90.  v0:= "source3 is null" @kind object;
  #L414d94.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414d9a.  v0:= "source4 is null" @kind object;
  #L414d9e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414da4.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L414daa.  v6:= temp @kind object;
  #L414dac.  v0:= 4I;
  #L414dae.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414db2.  v1:= 0I;
  #L414db4.  v0[v1]:= v2 @kind object;
  #L414db8.  v2:= 1I;
  #L414dba.  v0[v2]:= v3 @kind object;
  #L414dbe.  v2:= 2I;
  #L414dc0.  v0[v2]:= v4 @kind object;
  #L414dc4.  v2:= 3I;
  #L414dc6.  v0[v2]:= v5 @kind object;
  #L414dca.  call temp:= `combineLatest`(v6, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414dd0.  v2:= temp @kind object;
  #L414dd2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414de4.  v0:= "source1 is null" @kind object;
  #L414de8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414dee.  v0:= "source2 is null" @kind object;
  #L414df2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414df8.  v0:= "source3 is null" @kind object;
  #L414dfc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e02.  v0:= "source4 is null" @kind object;
  #L414e06.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e0c.  v0:= "source5 is null" @kind object;
  #L414e10.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e16.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L414e1c.  v7:= temp @kind object;
  #L414e1e.  v0:= 5I;
  #L414e20.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414e24.  v1:= 0I;
  #L414e26.  v0[v1]:= v2 @kind object;
  #L414e2a.  v2:= 1I;
  #L414e2c.  v0[v2]:= v3 @kind object;
  #L414e30.  v2:= 2I;
  #L414e32.  v0[v2]:= v4 @kind object;
  #L414e36.  v2:= 3I;
  #L414e38.  v0[v2]:= v5 @kind object;
  #L414e3c.  v2:= 4I;
  #L414e3e.  v0[v2]:= v6 @kind object;
  #L414e42.  call temp:= `combineLatest`(v7, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414e48.  v2:= temp @kind object;
  #L414e4a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414e5c.  v0:= "source1 is null" @kind object;
  #L414e60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e66.  v0:= "source2 is null" @kind object;
  #L414e6a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e70.  v0:= "source3 is null" @kind object;
  #L414e74.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e7a.  v0:= "source4 is null" @kind object;
  #L414e7e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e84.  v0:= "source5 is null" @kind object;
  #L414e88.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e8e.  v0:= "source6 is null" @kind object;
  #L414e92.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414e98.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L414e9e.  v8:= temp @kind object;
  #L414ea0.  v0:= 6I;
  #L414ea2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414ea6.  v1:= 0I;
  #L414ea8.  v0[v1]:= v2 @kind object;
  #L414eac.  v2:= 1I;
  #L414eae.  v0[v2]:= v3 @kind object;
  #L414eb2.  v2:= 2I;
  #L414eb4.  v0[v2]:= v4 @kind object;
  #L414eb8.  v2:= 3I;
  #L414eba.  v0[v2]:= v5 @kind object;
  #L414ebe.  v2:= 4I;
  #L414ec0.  v0[v2]:= v6 @kind object;
  #L414ec4.  v2:= 5I;
  #L414ec6.  v0[v2]:= v7 @kind object;
  #L414eca.  call temp:= `combineLatest`(v8, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414ed0.  v2:= temp @kind object;
  #L414ed2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414ee4.  v0:= "source1 is null" @kind object;
  #L414ee8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414eee.  v0:= "source2 is null" @kind object;
  #L414ef2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414ef8.  v0:= "source3 is null" @kind object;
  #L414efc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f02.  v0:= "source4 is null" @kind object;
  #L414f06.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f0c.  v0:= "source5 is null" @kind object;
  #L414f10.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f16.  v0:= "source6 is null" @kind object;
  #L414f1a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f20.  v0:= "source7 is null" @kind object;
  #L414f24.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f2a.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L414f30.  v9:= temp @kind object;
  #L414f32.  v0:= 7I;
  #L414f34.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414f38.  v1:= 0I;
  #L414f3a.  v0[v1]:= v2 @kind object;
  #L414f3e.  v2:= 1I;
  #L414f40.  v0[v2]:= v3 @kind object;
  #L414f44.  v2:= 2I;
  #L414f46.  v0[v2]:= v4 @kind object;
  #L414f4a.  v2:= 3I;
  #L414f4c.  v0[v2]:= v5 @kind object;
  #L414f50.  v2:= 4I;
  #L414f52.  v0[v2]:= v6 @kind object;
  #L414f56.  v2:= 5I;
  #L414f58.  v0[v2]:= v7 @kind object;
  #L414f5c.  v2:= 6I;
  #L414f5e.  v0[v2]:= v8 @kind object;
  #L414f62.  call temp:= `combineLatest`(v9, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L414f68.  v2:= temp @kind object;
  #L414f6a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L414f7c.  v0:= "source1 is null" @kind object;
  #L414f80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f86.  v0:= "source2 is null" @kind object;
  #L414f8a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f90.  v0:= "source3 is null" @kind object;
  #L414f94.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414f9a.  v0:= "source4 is null" @kind object;
  #L414f9e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414fa4.  v0:= "source5 is null" @kind object;
  #L414fa8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414fae.  v0:= "source6 is null" @kind object;
  #L414fb2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414fb8.  v0:= "source7 is null" @kind object;
  #L414fbc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414fc2.  v0:= "source8 is null" @kind object;
  #L414fc6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414fcc.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L414fd2.  v10:= temp @kind object;
  #L414fd4.  v0:= 8I;
  #L414fd8.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L414fdc.  v1:= 0I;
  #L414fde.  v0[v1]:= v2 @kind object;
  #L414fe2.  v2:= 1I;
  #L414fe4.  v0[v2]:= v3 @kind object;
  #L414fe8.  v2:= 2I;
  #L414fea.  v0[v2]:= v4 @kind object;
  #L414fee.  v2:= 3I;
  #L414ff0.  v0[v2]:= v5 @kind object;
  #L414ff4.  v2:= 4I;
  #L414ff6.  v0[v2]:= v6 @kind object;
  #L414ffa.  v2:= 5I;
  #L414ffc.  v0[v2]:= v7 @kind object;
  #L415000.  v2:= 6I;
  #L415002.  v0[v2]:= v8 @kind object;
  #L415006.  v2:= 7I;
  #L415008.  v0[v2]:= v9 @kind object;
  #L41500c.  call temp:= `combineLatest`(v10, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415012.  v2:= temp @kind object;
  #L415014.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415028.  v0:= "source1 is null" @kind object;
  #L41502c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415032.  v0:= "source2 is null" @kind object;
  #L415036.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41503c.  v0:= "source3 is null" @kind object;
  #L415040.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415046.  v0:= "source4 is null" @kind object;
  #L41504a.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415050.  v0:= "source5 is null" @kind object;
  #L415054.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41505a.  v0:= "source6 is null" @kind object;
  #L41505e.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415064.  v0:= "source7 is null" @kind object;
  #L415068.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41506e.  v0:= "source8 is null" @kind object;
  #L415072.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415078.  v0:= "source9 is null" @kind object;
  #L41507c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415082.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L415088.  v11:= temp @kind object;
  #L41508a.  v0:= 9I;
  #L41508e.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L415092.  v1:= 0I;
  #L415094.  v0[v1]:= v2 @kind object;
  #L415098.  v2:= 1I;
  #L41509a.  v0[v2]:= v3 @kind object;
  #L41509e.  v2:= 2I;
  #L4150a0.  v0[v2]:= v4 @kind object;
  #L4150a4.  v2:= 3I;
  #L4150a6.  v0[v2]:= v5 @kind object;
  #L4150aa.  v2:= 4I;
  #L4150ac.  v0[v2]:= v6 @kind object;
  #L4150b0.  v2:= 5I;
  #L4150b2.  v0[v2]:= v7 @kind object;
  #L4150b6.  v2:= 6I;
  #L4150b8.  v0[v2]:= v8 @kind object;
  #L4150bc.  v2:= 7I;
  #L4150be.  v0[v2]:= v9 @kind object;
  #L4150c2.  v2:= 8I;
  #L4150c6.  v0[v2]:= v10 @kind object;
  #L4150ca.  call temp:= `combineLatest`(v11, v0) @signature `Lio/reactivex/Flowable;.combineLatest:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4150d0.  v2:= temp @kind object;
  #L4150d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4150e4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4150ea.  v0:= temp;
  #L4150ec.  call temp:= `combineLatest`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L4150f2.  v1:= temp @kind object;
  #L4150f4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatest`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatest:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415108.  v0:= "sources is null" @kind object;
  #L41510c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415112.  v0:= length @variable v2;
  #L415114.  if v0 != 0 then goto L415122;
  #L415118.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41511e.  v2:= temp @kind object;
  #L415120.  return v2 @kind object;
  #L415122.  v0:= "combiner is null" @kind object;
  #L415126.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41512c.  v0:= "bufferSize" @kind object;
  #L415130.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415136.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L41513a.  v1:= 0I;
  #L41513c.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L415142.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415148.  v2:= temp @kind object;
  #L41514a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v0 @kind object, `int` v1 , `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;I[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41515c.  call temp:= `combineLatestDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L415162.  v0:= temp @kind object;
  #L415164.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`io.reactivex.functions.Function` v1 @kind object, `org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Lio/reactivex/functions/Function;[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L415178.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41517e.  v0:= temp;
  #L415180.  call temp:= `combineLatestDelayError`(v2, v1, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L415186.  v1:= temp @kind object;
  #L415188.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41519c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4151a2.  v0:= temp;
  #L4151a4.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L4151aa.  v1:= temp @kind object;
  #L4151ac.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4151c0.  v0:= "sources is null" @kind object;
  #L4151c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4151ca.  v0:= "combiner is null" @kind object;
  #L4151ce.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4151d4.  v0:= "bufferSize" @kind object;
  #L4151d8.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4151de.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L4151e2.  v1:= 1I;
  #L4151e4.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L4151ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4151f0.  v2:= temp @kind object;
  #L4151f2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L415204.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41520a.  v0:= temp;
  #L41520c.  call temp:= `combineLatestDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind static;
  #L415212.  v1:= temp @kind object;
  #L415214.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `combineLatestDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.combineLatestDelayError:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415228.  v0:= "sources is null" @kind object;
  #L41522c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415232.  v0:= "combiner is null" @kind object;
  #L415236.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41523c.  v0:= "bufferSize" @kind object;
  #L415240.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415246.  v0:= length @variable v2;
  #L415248.  if v0 != 0 then goto L415256;
  #L41524c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L415252.  v2:= temp @kind object;
  #L415254.  return v2 @kind object;
  #L415256.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest`;
  #L41525a.  v1:= 1I;
  #L41525c.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest;.<init>:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L415262.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415268.  v2:= temp @kind object;
  #L41526a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4152b0.  v0:= "sources is null" @kind object;
  #L4152b4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4152ba.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L4152c0.  v3:= temp @kind object;
  #L4152c2.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4152c8.  v0:= temp @kind object;
  #L4152ca.  v1:= 2I;
  #L4152cc.  v2:= 0I;
  #L4152ce.  call temp:= `concatMapDelayError`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L4152d4.  v3:= temp @kind object;
  #L4152d6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4152e8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4152ee.  v0:= temp;
  #L4152f0.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L4152f6.  v1:= temp @kind object;
  #L4152f8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41530c.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415312.  v1:= temp @kind object;
  #L415314.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41531a.  v0:= temp @kind object;
  #L41531c.  call temp:= `concatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L415322.  v1:= temp @kind object;
  #L415324.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415338.  v0:= "source1 is null" @kind object;
  #L41533c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415342.  v0:= "source2 is null" @kind object;
  #L415346.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41534c.  v0:= 2I;
  #L41534e.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L415352.  v1:= 0I;
  #L415354.  v0[v1]:= v2 @kind object;
  #L415358.  v2:= 1I;
  #L41535a.  v0[v2]:= v3 @kind object;
  #L41535e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415364.  v2:= temp @kind object;
  #L415366.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415378.  v0:= "source1 is null" @kind object;
  #L41537c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415382.  v0:= "source2 is null" @kind object;
  #L415386.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41538c.  v0:= "source3 is null" @kind object;
  #L415390.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415396.  v0:= 3I;
  #L415398.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L41539c.  v1:= 0I;
  #L41539e.  v0[v1]:= v2 @kind object;
  #L4153a2.  v2:= 1I;
  #L4153a4.  v0[v2]:= v3 @kind object;
  #L4153a8.  v2:= 2I;
  #L4153aa.  v0[v2]:= v4 @kind object;
  #L4153ae.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4153b4.  v2:= temp @kind object;
  #L4153b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4153c8.  v0:= "source1 is null" @kind object;
  #L4153cc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4153d2.  v0:= "source2 is null" @kind object;
  #L4153d6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4153dc.  v0:= "source3 is null" @kind object;
  #L4153e0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4153e6.  v0:= "source4 is null" @kind object;
  #L4153ea.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4153f0.  v0:= 4I;
  #L4153f2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L4153f6.  v1:= 0I;
  #L4153f8.  v0[v1]:= v2 @kind object;
  #L4153fc.  v2:= 1I;
  #L4153fe.  v0[v2]:= v3 @kind object;
  #L415402.  v2:= 2I;
  #L415404.  v0[v2]:= v4 @kind object;
  #L415408.  v2:= 3I;
  #L41540a.  v0[v2]:= v5 @kind object;
  #L41540e.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415414.  v2:= temp @kind object;
  #L415416.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L415428.  v0:= length @variable v3;
  #L41542a.  if v0 != 0 then goto L415438;
  #L41542e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L415434.  v3:= temp @kind object;
  #L415436.  return v3 @kind object;
  #L415438.  v0:= length @variable v3;
  #L41543a.  v1:= 1I;
  #L41543c.  v2:= 0I;
  #L41543e.  if v0 != v1 then goto L415450;
  #L415442.  v3:= v3[v2] @kind object;
  #L415446.  call temp:= `fromPublisher`(v3) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41544c.  v3:= temp @kind object;
  #L41544e.  return v3 @kind object;
  #L415450.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L415454.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L41545a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415460.  v3:= temp @kind object;
  #L415462.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415474.  v0:= length @variable v2;
  #L415476.  if v0 != 0 then goto L415484;
  #L41547a.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L415480.  v2:= temp @kind object;
  #L415482.  return v2 @kind object;
  #L415484.  v0:= length @variable v2;
  #L415486.  v1:= 1I;
  #L415488.  if v0 != v1 then goto L41549c;
  #L41548c.  v0:= 0I;
  #L41548e.  v2:= v2[v0] @kind object;
  #L415492.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415498.  v2:= temp @kind object;
  #L41549a.  return v2 @kind object;
  #L41549c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatArray`;
  #L4154a0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray;.<init>:([Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L4154a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4154ac.  v2:= temp @kind object;
  #L4154ae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`int` v7 , `int` v8 , `org.reactivestreams.Publisher`[] v9 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4154c0.  v0:= "sources is null" @kind object;
  #L4154c4.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4154ca.  v0:= "maxConcurrency" @kind object;
  #L4154ce.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4154d4.  v0:= "prefetch" @kind object;
  #L4154d8.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4154de.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L4154e2.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L4154e6.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L4154ec.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4154f2.  v3:= temp @kind object;
  #L4154f4.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4154f8.  v1:= v0 @kind object;
  #L4154fa.  v4:= v7;
  #L4154fc.  v5:= v8;
  #L4154fe.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L415504.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41550a.  v7:= temp @kind object;
  #L41550c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEager:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415520.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L415526.  v0:= temp;
  #L415528.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41552e.  v1:= temp;
  #L415530.  call temp:= `concatArrayEager`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatArrayEager:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415536.  v2:= temp @kind object;
  #L415538.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEagerDelayError`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41554c.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L415552.  v4:= temp @kind object;
  #L415554.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41555a.  v0:= temp @kind object;
  #L41555c.  v1:= 1I;
  #L41555e.  call temp:= `concatMapEagerDelayError`(v4, v0, v2, v3, v1) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @kind virtual;
  #L415564.  v2:= temp @kind object;
  #L415566.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEagerDelayError`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415578.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41557e.  v0:= temp;
  #L415580.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L415586.  v1:= temp;
  #L415588.  call temp:= `concatArrayEagerDelayError`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.concatArrayEagerDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41558e.  v2:= temp @kind object;
  #L415590.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4155a4.  v0:= "sources is null" @kind object;
  #L4155a8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4155ae.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L4155b4.  v1:= temp @kind object;
  #L4155b6.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4155bc.  v0:= temp @kind object;
  #L4155be.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L4155c4.  v1:= temp @kind object;
  #L4155c6.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4155d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4155de.  v0:= temp;
  #L4155e0.  v1:= 1I;
  #L4155e2.  call temp:= `concatDelayError`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @kind static;
  #L4155e8.  v2:= temp @kind object;
  #L4155ea.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatDelayError:(Lorg/reactivestreams/Publisher;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4155fc.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415602.  v1:= temp @kind object;
  #L415604.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41560a.  v0:= temp @kind object;
  #L41560c.  call temp:= `concatMapDelayError`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L415612.  v1:= temp @kind object;
  #L415614.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L415628.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41562e.  v0:= temp;
  #L415630.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L415636.  v1:= temp;
  #L415638.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @kind static;
  #L41563e.  v2:= temp @kind object;
  #L415640.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L415654.  v0:= "sources is null" @kind object;
  #L415658.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41565e.  v0:= "maxConcurrency" @kind object;
  #L415662.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415668.  v0:= "prefetch" @kind object;
  #L41566c.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415672.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L415676.  v2:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L41567a.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L415680.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415686.  v3:= temp @kind object;
  #L415688.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41568c.  v1:= v0 @kind object;
  #L41568e.  v4:= v8;
  #L415690.  v5:= v9;
  #L415692.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L415698.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41569e.  v7:= temp @kind object;
  #L4156a0.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4156b4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4156ba.  v0:= temp;
  #L4156bc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4156c2.  v1:= temp;
  #L4156c4.  call temp:= `concatEager`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @kind static;
  #L4156ca.  v2:= temp @kind object;
  #L4156cc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 , `int` v9 ) @signature `Lio/reactivex/Flowable;.concatEager:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4156e0.  v0:= "sources is null" @kind object;
  #L4156e4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4156ea.  v0:= "maxConcurrency" @kind object;
  #L4156ee.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4156f4.  v0:= "prefetch" @kind object;
  #L4156f8.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4156fe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEagerPublisher`;
  #L415702.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415708.  v3:= temp @kind object;
  #L41570a.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41570e.  v1:= v0 @kind object;
  #L415710.  v2:= v7 @kind object;
  #L415712.  v4:= v8;
  #L415714.  v5:= v9;
  #L415716.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEagerPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L41571c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415722.  v7:= temp @kind object;
  #L415724.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `create`(`io.reactivex.FlowableOnSubscribe` v1 @kind object, `io.reactivex.BackpressureStrategy` v2 @kind object) @signature `Lio/reactivex/Flowable;.create:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L415c18.  v0:= "source is null" @kind object;
  #L415c1c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415c22.  v0:= "mode is null" @kind object;
  #L415c26.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415c2c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate`;
  #L415c30.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate;.<init>:(Lio/reactivex/FlowableOnSubscribe;Lio/reactivex/BackpressureStrategy;)V` @kind direct;
  #L415c36.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415c3c.  v1:= temp @kind object;
  #L415c3e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `d`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L41941c.  v0:= "itemTimeoutIndicator is null" @kind object;
  #L419420.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419426.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout`;
  #L41942a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L419430.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419436.  v2:= temp @kind object;
  #L419438.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L415d14.  v0:= "supplier is null" @kind object;
  #L415d18.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415d1e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDefer`;
  #L415d22.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L415d28.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415d2e.  v1:= temp @kind object;
  #L415d30.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416320.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableEmpty.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L416324.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41632a.  v0:= temp @kind object;
  #L41632c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/lang/Throwable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416340.  v0:= "throwable is null" @kind object;
  #L416344.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41634a.  call temp:= `justCallable`(v1) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L416350.  v1:= temp @kind object;
  #L416352.  call temp:= `error`(v1) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind static;
  #L416358.  v1:= temp @kind object;
  #L41635a.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41636c.  v0:= "supplier is null" @kind object;
  #L416370.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416376.  v0:= new `io.reactivex.internal.operators.flowable.FlowableError`;
  #L41637a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableError;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L416380.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416386.  v1:= temp @kind object;
  #L416388.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromArray`(`java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L416824.  v0:= "items is null" @kind object;
  #L416828.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41682e.  v0:= length @variable v2;
  #L416830.  if v0 != 0 then goto L41683e;
  #L416834.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41683a.  v2:= temp @kind object;
  #L41683c.  return v2 @kind object;
  #L41683e.  v0:= length @variable v2;
  #L416840.  v1:= 1I;
  #L416842.  if v0 != v1 then goto L416856;
  #L416846.  v0:= 0I;
  #L416848.  v2:= v2[v0] @kind object;
  #L41684c.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L416852.  v2:= temp @kind object;
  #L416854.  return v2 @kind object;
  #L416856.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromArray`;
  #L41685a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L416860.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416866.  v2:= temp @kind object;
  #L416868.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41687c.  v0:= "supplier is null" @kind object;
  #L416880.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416886.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromCallable`;
  #L41688a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L416890.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416896.  v1:= temp @kind object;
  #L416898.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4168ac.  v0:= "future is null" @kind object;
  #L4168b0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4168b6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L4168ba.  v1:= 0L;
  #L4168be.  v3:= 0I;
  #L4168c0.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4168c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4168cc.  v4:= temp @kind object;
  #L4168ce.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41690c.  v0:= "future is null" @kind object;
  #L416910.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416916.  v0:= "unit is null" @kind object;
  #L41691a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416920.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromFuture`;
  #L416924.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L41692a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416930.  v1:= temp @kind object;
  #L416932.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416944.  v0:= "scheduler is null" @kind object;
  #L416948.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41694e.  call temp:= `fromFuture`(v1, v2, v4) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L416954.  v1:= temp @kind object;
  #L416956.  call temp:= `subscribeOn`(v1, v5) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L41695c.  v1:= temp @kind object;
  #L41695e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4168e0.  v0:= "scheduler is null" @kind object;
  #L4168e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4168ea.  call temp:= `fromFuture`(v1) @signature `Lio/reactivex/Flowable;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Flowable;` @kind static;
  #L4168f0.  v1:= temp @kind object;
  #L4168f2.  call temp:= `subscribeOn`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4168f8.  v1:= temp @kind object;
  #L4168fa.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromIterable`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416970.  v0:= "source is null" @kind object;
  #L416974.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41697a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable`;
  #L41697e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L416984.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41698a.  v1:= temp @kind object;
  #L41698c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `fromPublisher`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4169a0.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L4169a4.  if v0 == 0 then goto L4169b6;
  #L4169a8.  v1:= (`io.reactivex.Flowable`) v1 @kind object;
  #L4169ac.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4169b2.  v1:= temp @kind object;
  #L4169b4.  return v1 @kind object;
  #L4169b6.  v0:= "source is null" @kind object;
  #L4169ba.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4169c0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L4169c4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4169ca.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4169d0.  v1:= temp @kind object;
  #L4169d2.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4169e4.  v0:= "generator is null" @kind object;
  #L4169e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4169ee.  call temp:= `nullSupplier`() @signature `Lio/reactivex/internal/functions/Functions;.nullSupplier:()Ljava/util/concurrent/Callable;` @kind static;
  #L4169f4.  v0:= temp @kind object;
  #L4169f6.  call temp:= `simpleGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleGenerator:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L4169fc.  v2:= temp @kind object;
  #L4169fe.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416a04.  v1:= temp @kind object;
  #L416a06.  call temp:= `generate`(v0, v2, v1) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L416a0c.  v2:= temp @kind object;
  #L416a0e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416a20.  v0:= "generator is null" @kind object;
  #L416a24.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416a2a.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L416a30.  v2:= temp @kind object;
  #L416a32.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416a38.  v0:= temp @kind object;
  #L416a3a.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L416a40.  v1:= temp @kind object;
  #L416a42.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiConsumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416a54.  v0:= "generator is null" @kind object;
  #L416a58.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416a5e.  call temp:= `simpleBiGenerator`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.simpleBiGenerator:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/functions/BiFunction;` @kind static;
  #L416a64.  v2:= temp @kind object;
  #L416a66.  call temp:= `generate`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L416a6c.  v1:= temp @kind object;
  #L416a6e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416a80.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416a86.  v0:= temp @kind object;
  #L416a88.  call temp:= `generate`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind static;
  #L416a8e.  v1:= temp @kind object;
  #L416a90.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `generate`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.generate:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416aa4.  v0:= "initialState is null" @kind object;
  #L416aa8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416aae.  v0:= "generator is null" @kind object;
  #L416ab2.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416ab8.  v0:= "disposeState is null" @kind object;
  #L416abc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416ac2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGenerate`;
  #L416ac6.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L416acc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416ad2.  v1:= temp @kind object;
  #L416ad4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L416cfc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L416d02.  v5:= temp @kind object;
  #L416d04.  v0:= v6 @kind wide;
  #L416d06.  v2:= v8 @kind wide;
  #L416d08.  v4:= v10 @kind object;
  #L416d0a.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L416d10.  v6:= temp @kind object;
  #L416d12.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v8 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L416d24.  v0:= "unit is null" @kind object;
  #L416d28.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416d2e.  v0:= "scheduler is null" @kind object;
  #L416d32.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416d38.  v0:= new `io.reactivex.internal.operators.flowable.FlowableInterval`;
  #L416d3c.  v1:= 0L;
  #L416d40.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L416d46.  v8:= temp @kind wide;
  #L416d48.  call temp:= `max`(v1, v10) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L416d4e.  v4:= temp @kind wide;
  #L416d50.  v1:= v0 @kind object;
  #L416d52.  v2:= v8 @kind wide;
  #L416d54.  v6:= v12 @kind object;
  #L416d56.  v7:= v13 @kind object;
  #L416d58.  call `<init>`(v1, v2, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L416d5e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416d64.  v8:= temp @kind object;
  #L416d66.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L416cb0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L416cb6.  v5:= temp @kind object;
  #L416cb8.  v0:= v6 @kind wide;
  #L416cba.  v2:= v6 @kind wide;
  #L416cbc.  v4:= v8 @kind object;
  #L416cbe.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L416cc4.  v6:= temp @kind object;
  #L416cc6.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `interval`(`long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler` v9 @kind object) @signature `Lio/reactivex/Flowable;.interval:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L416cd8.  v0:= v6 @kind wide;
  #L416cda.  v2:= v6 @kind wide;
  #L416cdc.  v4:= v8 @kind object;
  #L416cde.  v5:= v9 @kind object;
  #L416ce0.  call temp:= `interval`(v0, v2, v4, v5) @signature `Lio/reactivex/Flowable;.interval:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L416ce6.  v6:= temp @kind object;
  #L416ce8.  return v6 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v10 , `long` v12 , `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L416d78.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L416d7e.  v9:= temp @kind object;
  #L416d80.  v0:= v10 @kind wide;
  #L416d82.  v2:= v12 @kind wide;
  #L416d84.  v4:= v14 @kind wide;
  #L416d86.  v6:= v16 @kind wide;
  #L416d8a.  v8:= v18 @kind object;
  #L416d8e.  call temp:= `intervalRange`(v0, v2, v4, v6, v8, v9) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L416d94.  v0:= temp @kind object;
  #L416d96.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `intervalRange`(`long` v16 , `long` v18 , `long` v20 , `long` v22 , `java.util.concurrent.TimeUnit` v24 @kind object, `io.reactivex.Scheduler` v25 @kind object) @signature `Lio/reactivex/Flowable;.intervalRange:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L416da8.  v0:= v18 @kind wide;
  #L416dac.  v2:= v20 @kind wide;
  #L416db0.  v9:= v24 @kind object;
  #L416db4.  v10:= v25 @kind object;
  #L416db8.  v4:= 0L;
  #L416dbc.  v6:= lcmp(v0, v4);
  #L416dc0.  if v6 < 0 then goto L416e56;
  #L416dc4.  if v6 != 0 then goto L416dda;
  #L416dc8.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L416dce.  v0:= temp @kind object;
  #L416dd0.  call temp:= `delay`(v0, v2, v9, v10) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L416dd6.  v0:= temp @kind object;
  #L416dd8.  return v0 @kind object;
  #L416dda.  v6:= 1L;
  #L416dde.  v0:= v0 - v6 @kind long;
  #L416de0.  v6:= v16 + v0 @kind long;
  #L416de4.  v0:= lcmp(v16, v4);
  #L416de8.  if v0 <= 0 then goto L416e06;
  #L416dec.  v0:= lcmp(v6, v4);
  #L416df0.  if v0 < 0 then goto L416df6;
  #L416df4.  goto L416e06;
  #L416df6.  v0:= new `java.lang.IllegalArgumentException`;
  #L416dfa.  v1:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L416dfe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416e04.  throw v0;
  #L416e06.  v0:= "unit is null" @kind object;
  #L416e0a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416e10.  v0:= "scheduler is null" @kind object;
  #L416e14.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416e1a.  v11:= new `io.reactivex.internal.operators.flowable.FlowableIntervalRange`;
  #L416e1e.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L416e24.  v12:= temp @kind wide;
  #L416e26.  v0:= v22 @kind wide;
  #L416e2a.  call temp:= `max`(v4, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L416e30.  v14:= temp @kind wide;
  #L416e32.  v0:= v11 @kind object;
  #L416e34.  v1:= v16 @kind wide;
  #L416e38.  v3:= v6 @kind wide;
  #L416e3a.  v5:= v12 @kind wide;
  #L416e3c.  v7:= v14 @kind wide;
  #L416e3e.  v9:= v24 @kind object;
  #L416e42.  v10:= v25 @kind object;
  #L416e46.  call `<init>`(v0, v1, v3, v5, v7, v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L416e4c.  call temp:= `onAssembly`(v11) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416e52.  v0:= temp @kind object;
  #L416e54.  return v0 @kind object;
  #L416e56.  v2:= new `java.lang.IllegalArgumentException`;
  #L416e5a.  v3:= new `java.lang.StringBuilder`;
  #L416e5e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L416e64.  v4:= "count >= 0 required but it was " @kind object;
  #L416e68.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L416e6e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L416e74.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L416e7a.  v0:= temp @kind object;
  #L416e7c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L416e82.  throw v2;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L416eec.  v0:= "item is null" @kind object;
  #L416ef0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416ef6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJust`;
  #L416efa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L416f00.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416f06.  v1:= temp @kind object;
  #L416f08.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L416f1c.  v0:= "item1 is null" @kind object;
  #L416f20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416f26.  v0:= "item2 is null" @kind object;
  #L416f2a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416f30.  v0:= 2I;
  #L416f32.  v0:= new `java.lang.Object`[v0];
  #L416f36.  v1:= 0I;
  #L416f38.  v0[v1]:= v2 @kind object;
  #L416f3c.  v2:= 1I;
  #L416f3e.  v0[v2]:= v3 @kind object;
  #L416f42.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L416f48.  v2:= temp @kind object;
  #L416f4a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L416f5c.  v0:= "item1 is null" @kind object;
  #L416f60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416f66.  v0:= "item2 is null" @kind object;
  #L416f6a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416f70.  v0:= "item3 is null" @kind object;
  #L416f74.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416f7a.  v0:= 3I;
  #L416f7c.  v0:= new `java.lang.Object`[v0];
  #L416f80.  v1:= 0I;
  #L416f82.  v0[v1]:= v2 @kind object;
  #L416f86.  v2:= 1I;
  #L416f88.  v0[v2]:= v3 @kind object;
  #L416f8c.  v2:= 2I;
  #L416f8e.  v0[v2]:= v4 @kind object;
  #L416f92.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L416f98.  v2:= temp @kind object;
  #L416f9a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L416fac.  v0:= "item1 is null" @kind object;
  #L416fb0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416fb6.  v0:= "item2 is null" @kind object;
  #L416fba.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416fc0.  v0:= "item3 is null" @kind object;
  #L416fc4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416fca.  v0:= "item4 is null" @kind object;
  #L416fce.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416fd4.  v0:= 4I;
  #L416fd6.  v0:= new `java.lang.Object`[v0];
  #L416fda.  v1:= 0I;
  #L416fdc.  v0[v1]:= v2 @kind object;
  #L416fe0.  v2:= 1I;
  #L416fe2.  v0[v2]:= v3 @kind object;
  #L416fe6.  v2:= 2I;
  #L416fe8.  v0[v2]:= v4 @kind object;
  #L416fec.  v2:= 3I;
  #L416fee.  v0[v2]:= v5 @kind object;
  #L416ff2.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L416ff8.  v2:= temp @kind object;
  #L416ffa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41700c.  v0:= "item1 is null" @kind object;
  #L417010.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417016.  v0:= "item2 is null" @kind object;
  #L41701a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417020.  v0:= "item3 is null" @kind object;
  #L417024.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41702a.  v0:= "item4 is null" @kind object;
  #L41702e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417034.  v0:= "item5 is null" @kind object;
  #L417038.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41703e.  v0:= 5I;
  #L417040.  v0:= new `java.lang.Object`[v0];
  #L417044.  v1:= 0I;
  #L417046.  v0[v1]:= v2 @kind object;
  #L41704a.  v2:= 1I;
  #L41704c.  v0[v2]:= v3 @kind object;
  #L417050.  v2:= 2I;
  #L417052.  v0[v2]:= v4 @kind object;
  #L417056.  v2:= 3I;
  #L417058.  v0[v2]:= v5 @kind object;
  #L41705c.  v2:= 4I;
  #L41705e.  v0[v2]:= v6 @kind object;
  #L417062.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417068.  v2:= temp @kind object;
  #L41706a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41707c.  v0:= "item1 is null" @kind object;
  #L417080.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417086.  v0:= "item2 is null" @kind object;
  #L41708a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417090.  v0:= "item3 is null" @kind object;
  #L417094.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41709a.  v0:= "item4 is null" @kind object;
  #L41709e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4170a4.  v0:= "item5 is null" @kind object;
  #L4170a8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4170ae.  v0:= "item6 is null" @kind object;
  #L4170b2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4170b8.  v0:= 6I;
  #L4170ba.  v0:= new `java.lang.Object`[v0];
  #L4170be.  v1:= 0I;
  #L4170c0.  v0[v1]:= v2 @kind object;
  #L4170c4.  v2:= 1I;
  #L4170c6.  v0[v2]:= v3 @kind object;
  #L4170ca.  v2:= 2I;
  #L4170cc.  v0[v2]:= v4 @kind object;
  #L4170d0.  v2:= 3I;
  #L4170d2.  v0[v2]:= v5 @kind object;
  #L4170d6.  v2:= 4I;
  #L4170d8.  v0[v2]:= v6 @kind object;
  #L4170dc.  v2:= 5I;
  #L4170de.  v0[v2]:= v7 @kind object;
  #L4170e2.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L4170e8.  v2:= temp @kind object;
  #L4170ea.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4170fc.  v0:= "item1 is null" @kind object;
  #L417100.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417106.  v0:= "item2 is null" @kind object;
  #L41710a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417110.  v0:= "item3 is null" @kind object;
  #L417114.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41711a.  v0:= "item4 is null" @kind object;
  #L41711e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417124.  v0:= "item5 is null" @kind object;
  #L417128.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41712e.  v0:= "item6 is null" @kind object;
  #L417132.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417138.  v0:= "item7 is null" @kind object;
  #L41713c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417142.  v0:= 7I;
  #L417144.  v0:= new `java.lang.Object`[v0];
  #L417148.  v1:= 0I;
  #L41714a.  v0[v1]:= v2 @kind object;
  #L41714e.  v2:= 1I;
  #L417150.  v0[v2]:= v3 @kind object;
  #L417154.  v2:= 2I;
  #L417156.  v0[v2]:= v4 @kind object;
  #L41715a.  v2:= 3I;
  #L41715c.  v0[v2]:= v5 @kind object;
  #L417160.  v2:= 4I;
  #L417162.  v0[v2]:= v6 @kind object;
  #L417166.  v2:= 5I;
  #L417168.  v0[v2]:= v7 @kind object;
  #L41716c.  v2:= 6I;
  #L41716e.  v0[v2]:= v8 @kind object;
  #L417172.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417178.  v2:= temp @kind object;
  #L41717a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41718c.  v0:= "item1 is null" @kind object;
  #L417190.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417196.  v0:= "item2 is null" @kind object;
  #L41719a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171a0.  v0:= "item3 is null" @kind object;
  #L4171a4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171aa.  v0:= "item4 is null" @kind object;
  #L4171ae.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171b4.  v0:= "item5 is null" @kind object;
  #L4171b8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171be.  v0:= "item6 is null" @kind object;
  #L4171c2.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171c8.  v0:= "item7 is null" @kind object;
  #L4171cc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171d2.  v0:= "item8 is null" @kind object;
  #L4171d6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4171dc.  v0:= 8I;
  #L4171e0.  v0:= new `java.lang.Object`[v0];
  #L4171e4.  v1:= 0I;
  #L4171e6.  v0[v1]:= v2 @kind object;
  #L4171ea.  v2:= 1I;
  #L4171ec.  v0[v2]:= v3 @kind object;
  #L4171f0.  v2:= 2I;
  #L4171f2.  v0[v2]:= v4 @kind object;
  #L4171f6.  v2:= 3I;
  #L4171f8.  v0[v2]:= v5 @kind object;
  #L4171fc.  v2:= 4I;
  #L4171fe.  v0[v2]:= v6 @kind object;
  #L417202.  v2:= 5I;
  #L417204.  v0[v2]:= v7 @kind object;
  #L417208.  v2:= 6I;
  #L41720a.  v0[v2]:= v8 @kind object;
  #L41720e.  v2:= 7I;
  #L417210.  v0[v2]:= v9 @kind object;
  #L417214.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41721a.  v2:= temp @kind object;
  #L41721c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L417230.  v0:= "item1 is null" @kind object;
  #L417234.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41723a.  v0:= "item2 is null" @kind object;
  #L41723e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417244.  v0:= "item3 is null" @kind object;
  #L417248.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41724e.  v0:= "item4 is null" @kind object;
  #L417252.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417258.  v0:= "item5 is null" @kind object;
  #L41725c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417262.  v0:= "item6 is null" @kind object;
  #L417266.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41726c.  v0:= "item7 is null" @kind object;
  #L417270.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417276.  v0:= "item8 is null" @kind object;
  #L41727a.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417280.  v0:= "item9 is null" @kind object;
  #L417284.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41728a.  v0:= 9I;
  #L41728e.  v0:= new `java.lang.Object`[v0];
  #L417292.  v1:= 0I;
  #L417294.  v0[v1]:= v2 @kind object;
  #L417298.  v2:= 1I;
  #L41729a.  v0[v2]:= v3 @kind object;
  #L41729e.  v2:= 2I;
  #L4172a0.  v0[v2]:= v4 @kind object;
  #L4172a4.  v2:= 3I;
  #L4172a6.  v0[v2]:= v5 @kind object;
  #L4172aa.  v2:= 4I;
  #L4172ac.  v0[v2]:= v6 @kind object;
  #L4172b0.  v2:= 5I;
  #L4172b2.  v0[v2]:= v7 @kind object;
  #L4172b6.  v2:= 6I;
  #L4172b8.  v0[v2]:= v8 @kind object;
  #L4172bc.  v2:= 7I;
  #L4172be.  v0[v2]:= v9 @kind object;
  #L4172c2.  v2:= 8I;
  #L4172c6.  v0[v2]:= v10 @kind object;
  #L4172ca.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L4172d0.  v2:= temp @kind object;
  #L4172d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `just`(`java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `java.lang.Object` v7 @kind object, `java.lang.Object` v8 @kind object, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object, `java.lang.Object` v11 @kind object) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4172e4.  v0:= "item1 is null" @kind object;
  #L4172e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4172ee.  v0:= "item2 is null" @kind object;
  #L4172f2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4172f8.  v0:= "item3 is null" @kind object;
  #L4172fc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417302.  v0:= "item4 is null" @kind object;
  #L417306.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41730c.  v0:= "item5 is null" @kind object;
  #L417310.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417316.  v0:= "item6 is null" @kind object;
  #L41731a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417320.  v0:= "item7 is null" @kind object;
  #L417324.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41732a.  v0:= "item8 is null" @kind object;
  #L41732e.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417334.  v0:= "item9 is null" @kind object;
  #L417338.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41733e.  v0:= "item10 is null" @kind object;
  #L417342.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417348.  v0:= 10I;
  #L41734c.  v0:= new `java.lang.Object`[v0];
  #L417350.  v1:= 0I;
  #L417352.  v0[v1]:= v2 @kind object;
  #L417356.  v2:= 1I;
  #L417358.  v0[v2]:= v3 @kind object;
  #L41735c.  v2:= 2I;
  #L41735e.  v0[v2]:= v4 @kind object;
  #L417362.  v2:= 3I;
  #L417364.  v0[v2]:= v5 @kind object;
  #L417368.  v2:= 4I;
  #L41736a.  v0[v2]:= v6 @kind object;
  #L41736e.  v2:= 5I;
  #L417370.  v0[v2]:= v7 @kind object;
  #L417374.  v2:= 6I;
  #L417376.  v0[v2]:= v8 @kind object;
  #L41737a.  v2:= 7I;
  #L41737c.  v0[v2]:= v9 @kind object;
  #L417380.  v2:= 8I;
  #L417384.  v0[v2]:= v10 @kind object;
  #L417388.  v2:= 9I;
  #L41738c.  v0[v2]:= v11 @kind object;
  #L417390.  call temp:= `fromArray`(v0) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417396.  v2:= temp @kind object;
  #L417398.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L417490.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L417496.  v1:= temp @kind object;
  #L417498.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41749e.  v0:= temp @kind object;
  #L4174a0.  call temp:= `flatMap`(v1, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L4174a6.  v1:= temp @kind object;
  #L4174a8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4174bc.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L4174c2.  v1:= temp @kind object;
  #L4174c4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4174ca.  v0:= temp @kind object;
  #L4174cc.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4174d2.  v1:= temp @kind object;
  #L4174d4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.merge:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4174e8.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L4174ee.  v2:= temp @kind object;
  #L4174f0.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4174f6.  v0:= temp @kind object;
  #L4174f8.  v1:= 0I;
  #L4174fa.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L417500.  v2:= temp @kind object;
  #L417502.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L417514.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41751a.  v0:= temp;
  #L41751c.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L417522.  v1:= temp @kind object;
  #L417524.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L417538.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41753e.  v1:= temp @kind object;
  #L417540.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417546.  v0:= temp @kind object;
  #L417548.  call temp:= `flatMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L41754e.  v1:= temp @kind object;
  #L417550.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L417564.  v0:= "source1 is null" @kind object;
  #L417568.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41756e.  v0:= "source2 is null" @kind object;
  #L417572.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417578.  v0:= 2I;
  #L41757a.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L41757e.  v2:= 0I;
  #L417580.  v1[v2]:= v3 @kind object;
  #L417584.  v3:= 1I;
  #L417586.  v1[v3]:= v4 @kind object;
  #L41758a.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417590.  v3:= temp @kind object;
  #L417592.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417598.  v4:= temp @kind object;
  #L41759a.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L4175a0.  v3:= temp @kind object;
  #L4175a2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4175b4.  v0:= "source1 is null" @kind object;
  #L4175b8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4175be.  v0:= "source2 is null" @kind object;
  #L4175c2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4175c8.  v0:= "source3 is null" @kind object;
  #L4175cc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4175d2.  v0:= 3I;
  #L4175d4.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L4175d8.  v2:= 0I;
  #L4175da.  v1[v2]:= v3 @kind object;
  #L4175de.  v3:= 1I;
  #L4175e0.  v1[v3]:= v4 @kind object;
  #L4175e4.  v3:= 2I;
  #L4175e6.  v1[v3]:= v5 @kind object;
  #L4175ea.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L4175f0.  v3:= temp @kind object;
  #L4175f2.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4175f8.  v4:= temp @kind object;
  #L4175fa.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417600.  v3:= temp @kind object;
  #L417602.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L417614.  v0:= "source1 is null" @kind object;
  #L417618.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41761e.  v0:= "source2 is null" @kind object;
  #L417622.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417628.  v0:= "source3 is null" @kind object;
  #L41762c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417632.  v0:= "source4 is null" @kind object;
  #L417636.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41763c.  v0:= 4I;
  #L41763e.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L417642.  v2:= 0I;
  #L417644.  v1[v2]:= v3 @kind object;
  #L417648.  v3:= 1I;
  #L41764a.  v1[v3]:= v4 @kind object;
  #L41764e.  v3:= 2I;
  #L417650.  v1[v3]:= v5 @kind object;
  #L417654.  v3:= 3I;
  #L417656.  v1[v3]:= v6 @kind object;
  #L41765a.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417660.  v3:= temp @kind object;
  #L417662.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417668.  v4:= temp @kind object;
  #L41766a.  call temp:= `flatMap`(v3, v4, v2, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417670.  v3:= temp @kind object;
  #L417672.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L417684.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41768a.  v4:= temp @kind object;
  #L41768c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417692.  v0:= temp @kind object;
  #L417694.  v1:= 0I;
  #L417696.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L41769c.  v2:= temp @kind object;
  #L41769e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`org.reactivestreams.Publisher`[] v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4176b0.  call temp:= `fromArray`(v2) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L4176b6.  v0:= temp @kind object;
  #L4176b8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4176be.  v1:= temp @kind object;
  #L4176c0.  v2:= length @variable v2;
  #L4176c2.  call temp:= `flatMap`(v0, v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4176c8.  v2:= temp @kind object;
  #L4176ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`int` v2 , `int` v3 , `org.reactivestreams.Publisher`[] v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:(II[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4176dc.  call temp:= `fromArray`(v4) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L4176e2.  v4:= temp @kind object;
  #L4176e4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4176ea.  v0:= temp @kind object;
  #L4176ec.  v1:= 1I;
  #L4176ee.  call temp:= `flatMap`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4176f4.  v2:= temp @kind object;
  #L4176f6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`org.reactivestreams.Publisher`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.mergeArrayDelayError:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L417708.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41770e.  v0:= temp @kind object;
  #L417710.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417716.  v1:= temp @kind object;
  #L417718.  v3:= length @variable v3;
  #L41771a.  v2:= 1I;
  #L41771c.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417722.  v3:= temp @kind object;
  #L417724.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L417738.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41773e.  v2:= temp @kind object;
  #L417740.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417746.  v0:= temp @kind object;
  #L417748.  v1:= 1I;
  #L41774a.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L417750.  v2:= temp @kind object;
  #L417752.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L417764.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41776a.  v2:= temp @kind object;
  #L41776c.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417772.  v0:= temp @kind object;
  #L417774.  v1:= 1I;
  #L417776.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L41777c.  v2:= temp @kind object;
  #L41777e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Ljava/lang/Iterable;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L417790.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L417796.  v2:= temp @kind object;
  #L417798.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41779e.  v0:= temp @kind object;
  #L4177a0.  v1:= 1I;
  #L4177a2.  call temp:= `flatMap`(v2, v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4177a8.  v2:= temp @kind object;
  #L4177aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4177bc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4177c2.  v0:= temp;
  #L4177c4.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L4177ca.  v1:= temp @kind object;
  #L4177cc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4177e0.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4177e6.  v2:= temp @kind object;
  #L4177e8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4177ee.  v0:= temp @kind object;
  #L4177f0.  v1:= 1I;
  #L4177f2.  call temp:= `flatMap`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L4177f8.  v2:= temp @kind object;
  #L4177fa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41780c.  v0:= "source1 is null" @kind object;
  #L417810.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417816.  v0:= "source2 is null" @kind object;
  #L41781a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417820.  v0:= 2I;
  #L417822.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L417826.  v2:= 0I;
  #L417828.  v1[v2]:= v3 @kind object;
  #L41782c.  v3:= 1I;
  #L41782e.  v1[v3]:= v4 @kind object;
  #L417832.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417838.  v4:= temp @kind object;
  #L41783a.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417840.  v1:= temp @kind object;
  #L417842.  call temp:= `flatMap`(v4, v1, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417848.  v3:= temp @kind object;
  #L41784a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41785c.  v0:= "source1 is null" @kind object;
  #L417860.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417866.  v0:= "source2 is null" @kind object;
  #L41786a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417870.  v0:= "source3 is null" @kind object;
  #L417874.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41787a.  v0:= 3I;
  #L41787c.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L417880.  v2:= 0I;
  #L417882.  v1[v2]:= v3 @kind object;
  #L417886.  v3:= 1I;
  #L417888.  v1[v3]:= v4 @kind object;
  #L41788c.  v4:= 2I;
  #L41788e.  v1[v4]:= v5 @kind object;
  #L417892.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417898.  v4:= temp @kind object;
  #L41789a.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4178a0.  v5:= temp @kind object;
  #L4178a2.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L4178a8.  v3:= temp @kind object;
  #L4178aa.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object) @signature `Lio/reactivex/Flowable;.mergeDelayError:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4178bc.  v0:= "source1 is null" @kind object;
  #L4178c0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4178c6.  v0:= "source2 is null" @kind object;
  #L4178ca.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4178d0.  v0:= "source3 is null" @kind object;
  #L4178d4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4178da.  v0:= "source4 is null" @kind object;
  #L4178de.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4178e4.  v0:= 4I;
  #L4178e6.  v1:= new `org.reactivestreams.Publisher`[v0];
  #L4178ea.  v2:= 0I;
  #L4178ec.  v1[v2]:= v3 @kind object;
  #L4178f0.  v3:= 1I;
  #L4178f2.  v1[v3]:= v4 @kind object;
  #L4178f6.  v4:= 2I;
  #L4178f8.  v1[v4]:= v5 @kind object;
  #L4178fc.  v4:= 3I;
  #L4178fe.  v1[v4]:= v6 @kind object;
  #L417902.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417908.  v4:= temp @kind object;
  #L41790a.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L417910.  v5:= temp @kind object;
  #L417912.  call temp:= `flatMap`(v4, v5, v3, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417918.  v3:= temp @kind object;
  #L41791a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `never`() @signature `Lio/reactivex/Flowable;.never:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4179e0.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableNever.INSTANCE` @type ^`io.reactivex.Flowable` @kind object;
  #L4179e4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4179ea.  v0:= temp @kind object;
  #L4179ec.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `range`(`int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.range:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L417e04.  if v6 < 0 then goto L417e6a;
  #L417e08.  if v6 != 0 then goto L417e16;
  #L417e0c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L417e12.  v5:= temp @kind object;
  #L417e14.  return v5 @kind object;
  #L417e16.  v0:= 1I;
  #L417e18.  if v6 != v0 then goto L417e2e;
  #L417e1c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L417e22.  v5:= temp @kind object;
  #L417e24.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417e2a.  v5:= temp @kind object;
  #L417e2c.  return v5 @kind object;
  #L417e2e.  v0:= (`long`) v5 @kind i2l;
  #L417e30.  v2:= v6 + -1;
  #L417e34.  v2:= (`long`) v2 @kind i2l;
  #L417e36.  v0:= v0 + v2 @kind long;
  #L417e38.  v2:= 2147483647L;
  #L417e3e.  v4:= lcmp(v0, v2);
  #L417e42.  if v4 > 0 then goto L417e5a;
  #L417e46.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRange`;
  #L417e4a.  call `<init>`(v0, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange;.<init>:(II)V` @kind direct;
  #L417e50.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417e56.  v5:= temp @kind object;
  #L417e58.  return v5 @kind object;
  #L417e5a.  v5:= new `java.lang.IllegalArgumentException`;
  #L417e5e.  v6:= "Integer overflow" @kind object;
  #L417e62.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417e68.  throw v5;
  #L417e6a.  v5:= new `java.lang.IllegalArgumentException`;
  #L417e6e.  v0:= new `java.lang.StringBuilder`;
  #L417e72.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L417e78.  v1:= "count >= 0 required but it was " @kind object;
  #L417e7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L417e82.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L417e88.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L417e8e.  v6:= temp @kind object;
  #L417e90.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417e96.  throw v5;
}
procedure `io.reactivex.Flowable` `rangeLong`(`long` v5 , `long` v7 ) @signature `Lio/reactivex/Flowable;.rangeLong:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L417ea8.  v0:= 0L;
  #L417eac.  v2:= lcmp(v7, v0);
  #L417eb0.  if v2 < 0 then goto L417f1c;
  #L417eb4.  if v2 != 0 then goto L417ec2;
  #L417eb8.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L417ebe.  v5:= temp @kind object;
  #L417ec0.  return v5 @kind object;
  #L417ec2.  v2:= 1L;
  #L417ec6.  v4:= lcmp(v7, v2);
  #L417eca.  if v4 != 0 then goto L417ee0;
  #L417ece.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L417ed4.  v5:= temp @kind object;
  #L417ed6.  call temp:= `just`(v5) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L417edc.  v5:= temp @kind object;
  #L417ede.  return v5 @kind object;
  #L417ee0.  v2:= v7 - v2 @kind long;
  #L417ee4.  v2:= v2 + v5 @kind long;
  #L417ee6.  v4:= lcmp(v5, v0);
  #L417eea.  if v4 <= 0 then goto L417f08;
  #L417eee.  v4:= lcmp(v2, v0);
  #L417ef2.  if v4 < 0 then goto L417ef8;
  #L417ef6.  goto L417f08;
  #L417ef8.  v5:= new `java.lang.IllegalArgumentException`;
  #L417efc.  v6:= "Overflow! start + count is bigger than Long.MAX_VALUE" @kind object;
  #L417f00.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417f06.  throw v5;
  #L417f08.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRangeLong`;
  #L417f0c.  call `<init>`(v0, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong;.<init>:(JJ)V` @kind direct;
  #L417f12.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417f18.  v5:= temp @kind object;
  #L417f1a.  return v5 @kind object;
  #L417f1c.  v5:= new `java.lang.IllegalArgumentException`;
  #L417f20.  v6:= new `java.lang.StringBuilder`;
  #L417f24.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L417f2a.  v0:= "count >= 0 required but it was " @kind object;
  #L417f2e.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L417f34.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L417f3a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L417f40.  v6:= temp @kind object;
  #L417f42.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417f48.  throw v5;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41a6b4.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L41a6ba.  v0:= temp @kind object;
  #L41a6bc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41a6c2.  v1:= temp;
  #L41a6c4.  call temp:= `sequenceEqual`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L41a6ca.  v2:= temp @kind object;
  #L41a6cc.  return v2 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41a6e0.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L41a6e6.  v0:= temp @kind object;
  #L41a6e8.  call temp:= `sequenceEqual`(v1, v2, v0, v3) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L41a6ee.  v1:= temp @kind object;
  #L41a6f0.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41a704.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41a70a.  v0:= temp;
  #L41a70c.  call temp:= `sequenceEqual`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @kind static;
  #L41a712.  v1:= temp @kind object;
  #L41a714.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.sequenceEqual:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41a728.  v0:= "source1 is null" @kind object;
  #L41a72c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a732.  v0:= "source2 is null" @kind object;
  #L41a736.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a73c.  v0:= "isEqual is null" @kind object;
  #L41a740.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a746.  v0:= "bufferSize" @kind object;
  #L41a74a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41a750.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle`;
  #L41a754.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)V` @kind direct;
  #L41a75a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a760.  v1:= temp @kind object;
  #L41a762.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L418bec.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L418bf2.  v1:= temp @kind object;
  #L418bf4.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L418bfa.  v0:= temp @kind object;
  #L418bfc.  call temp:= `switchMap`(v1, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L418c02.  v1:= temp @kind object;
  #L418c04.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNext`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNext:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L418c18.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L418c1e.  v1:= temp @kind object;
  #L418c20.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L418c26.  v0:= temp @kind object;
  #L418c28.  call temp:= `switchMap`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L418c2e.  v1:= temp @kind object;
  #L418c30.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L418c44.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418c4a.  v0:= temp;
  #L418c4c.  call temp:= `switchOnNextDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L418c52.  v1:= temp @kind object;
  #L418c54.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchOnNextDelayError`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/Flowable;.switchOnNextDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L418c68.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L418c6e.  v1:= temp @kind object;
  #L418c70.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L418c76.  v0:= temp @kind object;
  #L418c78.  call temp:= `switchMapDelayError`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L418c7e.  v1:= temp @kind object;
  #L418c80.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41944c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L419452.  v0:= temp @kind object;
  #L419454.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L41945a.  v1:= temp @kind object;
  #L41945c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419470.  v0:= "unit is null" @kind object;
  #L419474.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41947a.  v0:= "scheduler is null" @kind object;
  #L41947e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419484.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimer`;
  #L419488.  v1:= 0L;
  #L41948c.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L419492.  v3:= temp @kind wide;
  #L419494.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41949a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4194a0.  v3:= temp @kind object;
  #L4194a2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `unsafeCreate`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Flowable;.unsafeCreate:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L419558.  v0:= "onSubscribe is null" @kind object;
  #L41955c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419562.  v0:= instanceof @variable v1 @type ^`io.reactivex.Flowable` @kind boolean;
  #L419566.  if v0 != 0 then goto L41957e;
  #L41956a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromPublisher`;
  #L41956e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L419574.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41957a.  v1:= temp @kind object;
  #L41957c.  return v1 @kind object;
  #L41957e.  v1:= new `java.lang.IllegalArgumentException`;
  #L419582.  v0:= "unsafeCreate(Flowable) should be upgraded" @kind object;
  #L419586.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41958c.  throw v1;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4195d0.  v0:= 1I;
  #L4195d2.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @kind static;
  #L4195d8.  v1:= temp @kind object;
  #L4195da.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4195ec.  v0:= "resourceSupplier is null" @kind object;
  #L4195f0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4195f6.  v0:= "sourceSupplier is null" @kind object;
  #L4195fa.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419600.  v0:= "resourceDisposer is null" @kind object;
  #L419604.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41960a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUsing`;
  #L41960e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L419614.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41961a.  v1:= temp @kind object;
  #L41961c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L419bf0.  v0:= "zipper is null" @kind object;
  #L419bf4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419bfa.  v0:= "sources is null" @kind object;
  #L419bfe.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419c04.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L419c08.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419c0e.  v5:= temp;
  #L419c10.  v2:= 0I;
  #L419c12.  v6:= 0I;
  #L419c14.  v1:= v0 @kind object;
  #L419c16.  v3:= v7 @kind object;
  #L419c18.  v4:= v8 @kind object;
  #L419c1a.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L419c20.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419c26.  v7:= temp @kind object;
  #L419c28.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L419c3c.  v0:= "zipper is null" @kind object;
  #L419c40.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419c46.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419c4c.  v1:= temp @kind object;
  #L419c4e.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L419c54.  v1:= temp @kind object;
  #L419c56.  call temp:= `zipIterable`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.zipIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L419c5c.  v2:= temp @kind object;
  #L419c5e.  call temp:= `flatMapPublisher`(v1, v2) @signature `Lio/reactivex/Single;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L419c64.  v1:= temp @kind object;
  #L419c66.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419c78.  v0:= "source1 is null" @kind object;
  #L419c7c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419c82.  v0:= "source2 is null" @kind object;
  #L419c86.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419c8c.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L419c92.  v5:= temp @kind object;
  #L419c94.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419c9a.  v0:= temp;
  #L419c9c.  v1:= 2I;
  #L419c9e.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419ca2.  v2:= 0I;
  #L419ca4.  v1[v2]:= v3 @kind object;
  #L419ca8.  v3:= 1I;
  #L419caa.  v1[v3]:= v4 @kind object;
  #L419cae.  call temp:= `zipArray`(v5, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419cb4.  v3:= temp @kind object;
  #L419cb6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419cc8.  v0:= "source1 is null" @kind object;
  #L419ccc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419cd2.  v0:= "source2 is null" @kind object;
  #L419cd6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419cdc.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L419ce2.  v5:= temp @kind object;
  #L419ce4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419cea.  v0:= temp;
  #L419cec.  v1:= 2I;
  #L419cee.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419cf2.  v2:= 0I;
  #L419cf4.  v1[v2]:= v3 @kind object;
  #L419cf8.  v3:= 1I;
  #L419cfa.  v1[v3]:= v4 @kind object;
  #L419cfe.  call temp:= `zipArray`(v5, v6, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419d04.  v3:= temp @kind object;
  #L419d06.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object, `boolean` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L419d18.  v0:= "source1 is null" @kind object;
  #L419d1c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419d22.  v0:= "source2 is null" @kind object;
  #L419d26.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419d2c.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L419d32.  v4:= temp @kind object;
  #L419d34.  v0:= 2I;
  #L419d36.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L419d3a.  v1:= 0I;
  #L419d3c.  v0[v1]:= v2 @kind object;
  #L419d40.  v2:= 1I;
  #L419d42.  v0[v2]:= v3 @kind object;
  #L419d46.  call temp:= `zipArray`(v4, v5, v6, v0) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419d4c.  v2:= temp @kind object;
  #L419d4e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function3` v6 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419d60.  v0:= "source1 is null" @kind object;
  #L419d64.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419d6a.  v0:= "source2 is null" @kind object;
  #L419d6e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419d74.  v0:= "source3 is null" @kind object;
  #L419d78.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419d7e.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L419d84.  v6:= temp @kind object;
  #L419d86.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419d8c.  v0:= temp;
  #L419d8e.  v1:= 3I;
  #L419d90.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419d94.  v2:= 0I;
  #L419d96.  v1[v2]:= v3 @kind object;
  #L419d9a.  v3:= 1I;
  #L419d9c.  v1[v3]:= v4 @kind object;
  #L419da0.  v3:= 2I;
  #L419da2.  v1[v3]:= v5 @kind object;
  #L419da6.  call temp:= `zipArray`(v6, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419dac.  v3:= temp @kind object;
  #L419dae.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function4` v7 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419dc0.  v0:= "source1 is null" @kind object;
  #L419dc4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419dca.  v0:= "source2 is null" @kind object;
  #L419dce.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419dd4.  v0:= "source3 is null" @kind object;
  #L419dd8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419dde.  v0:= "source4 is null" @kind object;
  #L419de2.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419de8.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L419dee.  v7:= temp @kind object;
  #L419df0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419df6.  v0:= temp;
  #L419df8.  v1:= 4I;
  #L419dfa.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419dfe.  v2:= 0I;
  #L419e00.  v1[v2]:= v3 @kind object;
  #L419e04.  v3:= 1I;
  #L419e06.  v1[v3]:= v4 @kind object;
  #L419e0a.  v3:= 2I;
  #L419e0c.  v1[v3]:= v5 @kind object;
  #L419e10.  v3:= 3I;
  #L419e12.  v1[v3]:= v6 @kind object;
  #L419e16.  call temp:= `zipArray`(v7, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419e1c.  v3:= temp @kind object;
  #L419e1e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `io.reactivex.functions.Function5` v8 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419e30.  v0:= "source1 is null" @kind object;
  #L419e34.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e3a.  v0:= "source2 is null" @kind object;
  #L419e3e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e44.  v0:= "source3 is null" @kind object;
  #L419e48.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e4e.  v0:= "source4 is null" @kind object;
  #L419e52.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e58.  v0:= "source5 is null" @kind object;
  #L419e5c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419e62.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L419e68.  v8:= temp @kind object;
  #L419e6a.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419e70.  v0:= temp;
  #L419e72.  v1:= 5I;
  #L419e74.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419e78.  v2:= 0I;
  #L419e7a.  v1[v2]:= v3 @kind object;
  #L419e7e.  v3:= 1I;
  #L419e80.  v1[v3]:= v4 @kind object;
  #L419e84.  v3:= 2I;
  #L419e86.  v1[v3]:= v5 @kind object;
  #L419e8a.  v3:= 3I;
  #L419e8c.  v1[v3]:= v6 @kind object;
  #L419e90.  v3:= 4I;
  #L419e92.  v1[v3]:= v7 @kind object;
  #L419e96.  call temp:= `zipArray`(v8, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419e9c.  v3:= temp @kind object;
  #L419e9e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function6` v9 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function6;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419eb0.  v0:= "source1 is null" @kind object;
  #L419eb4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419eba.  v0:= "source2 is null" @kind object;
  #L419ebe.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ec4.  v0:= "source3 is null" @kind object;
  #L419ec8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ece.  v0:= "source4 is null" @kind object;
  #L419ed2.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ed8.  v0:= "source5 is null" @kind object;
  #L419edc.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ee2.  v0:= "source6 is null" @kind object;
  #L419ee6.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419eec.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L419ef2.  v9:= temp @kind object;
  #L419ef4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419efa.  v0:= temp;
  #L419efc.  v1:= 6I;
  #L419efe.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419f02.  v2:= 0I;
  #L419f04.  v1[v2]:= v3 @kind object;
  #L419f08.  v3:= 1I;
  #L419f0a.  v1[v3]:= v4 @kind object;
  #L419f0e.  v3:= 2I;
  #L419f10.  v1[v3]:= v5 @kind object;
  #L419f14.  v3:= 3I;
  #L419f16.  v1[v3]:= v6 @kind object;
  #L419f1a.  v3:= 4I;
  #L419f1c.  v1[v3]:= v7 @kind object;
  #L419f20.  v3:= 5I;
  #L419f22.  v1[v3]:= v8 @kind object;
  #L419f26.  call temp:= `zipArray`(v9, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419f2c.  v3:= temp @kind object;
  #L419f2e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `io.reactivex.functions.Function7` v10 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function7;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419f40.  v0:= "source1 is null" @kind object;
  #L419f44.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f4a.  v0:= "source2 is null" @kind object;
  #L419f4e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f54.  v0:= "source3 is null" @kind object;
  #L419f58.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f5e.  v0:= "source4 is null" @kind object;
  #L419f62.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f68.  v0:= "source5 is null" @kind object;
  #L419f6c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f72.  v0:= "source6 is null" @kind object;
  #L419f76.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f7c.  v0:= "source7 is null" @kind object;
  #L419f80.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419f86.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L419f8c.  v10:= temp @kind object;
  #L419f8e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419f94.  v0:= temp;
  #L419f96.  v1:= 7I;
  #L419f98.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L419f9c.  v2:= 0I;
  #L419f9e.  v1[v2]:= v3 @kind object;
  #L419fa2.  v3:= 1I;
  #L419fa4.  v1[v3]:= v4 @kind object;
  #L419fa8.  v3:= 2I;
  #L419faa.  v1[v3]:= v5 @kind object;
  #L419fae.  v3:= 3I;
  #L419fb0.  v1[v3]:= v6 @kind object;
  #L419fb4.  v3:= 4I;
  #L419fb6.  v1[v3]:= v7 @kind object;
  #L419fba.  v3:= 5I;
  #L419fbc.  v1[v3]:= v8 @kind object;
  #L419fc0.  v3:= 6I;
  #L419fc2.  v1[v3]:= v9 @kind object;
  #L419fc6.  call temp:= `zipArray`(v10, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L419fcc.  v3:= temp @kind object;
  #L419fce.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `io.reactivex.functions.Function8` v11 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function8;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L419fe0.  v0:= "source1 is null" @kind object;
  #L419fe4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419fea.  v0:= "source2 is null" @kind object;
  #L419fee.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ff4.  v0:= "source3 is null" @kind object;
  #L419ff8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ffe.  v0:= "source4 is null" @kind object;
  #L41a002.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a008.  v0:= "source5 is null" @kind object;
  #L41a00c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a012.  v0:= "source6 is null" @kind object;
  #L41a016.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a01c.  v0:= "source7 is null" @kind object;
  #L41a020.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a026.  v0:= "source8 is null" @kind object;
  #L41a02a.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a030.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L41a036.  v11:= temp @kind object;
  #L41a038.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41a03e.  v0:= temp;
  #L41a040.  v1:= 8I;
  #L41a044.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L41a048.  v2:= 0I;
  #L41a04a.  v1[v2]:= v3 @kind object;
  #L41a04e.  v3:= 1I;
  #L41a050.  v1[v3]:= v4 @kind object;
  #L41a054.  v3:= 2I;
  #L41a056.  v1[v3]:= v5 @kind object;
  #L41a05a.  v3:= 3I;
  #L41a05c.  v1[v3]:= v6 @kind object;
  #L41a060.  v3:= 4I;
  #L41a062.  v1[v3]:= v7 @kind object;
  #L41a066.  v3:= 5I;
  #L41a068.  v1[v3]:= v8 @kind object;
  #L41a06c.  v3:= 6I;
  #L41a06e.  v1[v3]:= v9 @kind object;
  #L41a072.  v3:= 7I;
  #L41a074.  v1[v3]:= v10 @kind object;
  #L41a078.  call temp:= `zipArray`(v11, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41a07e.  v3:= temp @kind object;
  #L41a080.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zip`(`org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `org.reactivestreams.Publisher` v7 @kind object, `org.reactivestreams.Publisher` v8 @kind object, `org.reactivestreams.Publisher` v9 @kind object, `org.reactivestreams.Publisher` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object, `io.reactivex.functions.Function9` v12 @kind object) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function9;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41a094.  v0:= "source1 is null" @kind object;
  #L41a098.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a09e.  v0:= "source2 is null" @kind object;
  #L41a0a2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0a8.  v0:= "source3 is null" @kind object;
  #L41a0ac.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0b2.  v0:= "source4 is null" @kind object;
  #L41a0b6.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0bc.  v0:= "source5 is null" @kind object;
  #L41a0c0.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0c6.  v0:= "source6 is null" @kind object;
  #L41a0ca.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0d0.  v0:= "source7 is null" @kind object;
  #L41a0d4.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0da.  v0:= "source8 is null" @kind object;
  #L41a0de.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0e4.  v0:= "source9 is null" @kind object;
  #L41a0e8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a0ee.  call temp:= `toFunction`(v12) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L41a0f4.  v12:= temp @kind object;
  #L41a0f6.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41a0fc.  v0:= temp;
  #L41a0fe.  v1:= 9I;
  #L41a102.  v1:= new `org.reactivestreams.Publisher`[v1];
  #L41a106.  v2:= 0I;
  #L41a108.  v1[v2]:= v3 @kind object;
  #L41a10c.  v3:= 1I;
  #L41a10e.  v1[v3]:= v4 @kind object;
  #L41a112.  v3:= 2I;
  #L41a114.  v1[v3]:= v5 @kind object;
  #L41a118.  v3:= 3I;
  #L41a11a.  v1[v3]:= v6 @kind object;
  #L41a11e.  v3:= 4I;
  #L41a120.  v1[v3]:= v7 @kind object;
  #L41a124.  v3:= 5I;
  #L41a126.  v1[v3]:= v8 @kind object;
  #L41a12a.  v3:= 6I;
  #L41a12c.  v1[v3]:= v9 @kind object;
  #L41a130.  v3:= 7I;
  #L41a132.  v1[v3]:= v10 @kind object;
  #L41a136.  v3:= 8I;
  #L41a13a.  v1[v3]:= v11 @kind object;
  #L41a13e.  call temp:= `zipArray`(v12, v2, v0, v1) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41a144.  v3:= temp @kind object;
  #L41a146.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `zipArray`(`io.reactivex.functions.Function` v7 @kind object, `boolean` v8 , `int` v9 , `org.reactivestreams.Publisher`[] v10 @kind object) @signature `Lio/reactivex/Flowable;.zipArray:(Lio/reactivex/functions/Function;ZI[Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41a158.  v0:= length @variable v10;
  #L41a15a.  if v0 != 0 then goto L41a168;
  #L41a15e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41a164.  v7:= temp @kind object;
  #L41a166.  return v7 @kind object;
  #L41a168.  v0:= "zipper is null" @kind object;
  #L41a16c.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a172.  v0:= "bufferSize" @kind object;
  #L41a176.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41a17c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L41a180.  v3:= 0I;
  #L41a182.  v1:= v0 @kind object;
  #L41a184.  v2:= v10 @kind object;
  #L41a186.  v4:= v7 @kind object;
  #L41a188.  v5:= v9;
  #L41a18a.  v6:= v8;
  #L41a18c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L41a192.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41a198.  v7:= temp @kind object;
  #L41a19a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `zipIterable`(`java.lang.Iterable` v7 @kind object, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.zipIterable:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41a1ac.  v0:= "zipper is null" @kind object;
  #L41a1b0.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a1b6.  v0:= "sources is null" @kind object;
  #L41a1ba.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a1c0.  v0:= "bufferSize" @kind object;
  #L41a1c4.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41a1ca.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZip`;
  #L41a1ce.  v2:= 0I;
  #L41a1d0.  v1:= v0 @kind object;
  #L41a1d2.  v3:= v7 @kind object;
  #L41a1d4.  v4:= v8 @kind object;
  #L41a1d6.  v5:= v10;
  #L41a1d8.  v6:= v9;
  #L41a1da.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip;.<init>:([Lorg/reactivestreams/Publisher;Ljava/lang/Iterable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L41a1e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41a1e6.  v7:= temp @kind object;
  #L41a1e8.  return v7 @kind object;
}
procedure `io.reactivex.Single` `all`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a3ac.  v0:= "predicate is null" @kind object;
  #L41a3b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a3b6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAllSingle`;
  #L41a3ba.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L41a3c0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a3c6.  v2:= temp @kind object;
  #L41a3c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ambWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.ambWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4147c8.  v0:= "other is null" @kind object;
  #L4147cc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4147d2.  v0:= 2I;
  #L4147d4.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L4147d8.  v1:= 0I;
  #L4147da.  v0[v1]:= v2 @kind object;
  #L4147de.  v1:= 1I;
  #L4147e0.  v0[v1]:= v3 @kind object;
  #L4147e4.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Flowable;.ambArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4147ea.  v3:= temp @kind object;
  #L4147ec.  return v3 @kind object;
}
procedure `io.reactivex.Single` `any`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a3dc.  v0:= "predicate is null" @kind object;
  #L41a3e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a3e6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAnySingle`;
  #L41a3ea.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L41a3f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a3f6.  v2:= temp @kind object;
  #L41a3f8.  return v2 @kind object;
}
procedure `java.lang.Object` `as`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableConverter` v2 @kind object) @signature `Lio/reactivex/Flowable;.as:(Lio/reactivex/FlowableConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41af38.  v0:= "converter is null" @kind object;
  #L41af3c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41af42.  v2:= temp @kind object;
  #L41af44.  v2:= (`io.reactivex.FlowableConverter`) v2 @kind object;
  #L41af48.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/FlowableConverter;.apply:(Lio/reactivex/Flowable;)Ljava/lang/Object;` @kind interface;
  #L41af4e.  v2:= temp @kind object;
  #L41af50.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `b`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag  {
    temp;
    v0;

  #L418a84.  v0:= "mapper is null" @kind object;
  #L418a88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418a8e.  v0:= "bufferSize" @kind object;
  #L418a92.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L418a98.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L418a9c.  if v0 == 0 then goto L418ac6;
  #L418aa0.  v3:= v1 @kind object;
  #L418aa2.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L418aa6.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L418aac.  v3:= temp @kind object;
  #L418aae.  if v3 != 0 then goto L418abc;
  #L418ab2.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L418ab8.  v2:= temp @kind object;
  #L418aba.  return v2 @kind object;
  #L418abc.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L418ac2.  v2:= temp @kind object;
  #L418ac4.  return v2 @kind object;
  #L418ac6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap`;
  #L418aca.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L418ad0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418ad6.  v2:= temp @kind object;
  #L418ad8.  return v2 @kind object;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41af64.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L41af68.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L41af6e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41af74.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41af7a.  v0:= temp @kind object;
  #L41af7c.  if v0 == 0 then goto L41af82;
  #L41af80.  return v0 @kind object;
  #L41af82.  v0:= new `java.util.NoSuchElementException`;
  #L41af86.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L41af8c.  throw v0;
}
procedure `java.lang.Object` `blockingFirst`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingFirst:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41afa0.  v0:= new `io.reactivex.internal.subscribers.BlockingFirstSubscriber`;
  #L41afa4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @kind direct;
  #L41afaa.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41afb0.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41afb6.  v0:= temp @kind object;
  #L41afb8.  if v0 == 0 then goto L41afbe;
  #L41afbc.  v2:= v0 @kind object;
  #L41afbe.  return v2 @kind object;
}
procedure `void` `blockingForEach`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingForEach:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41b15c.  call temp:= `blockingIterable`(v2) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @kind virtual;
  #L41b162.  v0:= temp @kind object;
  #L41b164.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L41b16a.  v0:= temp @kind object;
  #L41b16c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41b172.  v1:= temp;
  #L41b174.  if v1 == 0 then goto L41b1a4;
  #L41b178.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L41b17e.  v1:= temp @kind object;
  #L41b180.  call `accept`(v3, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L41b186.  goto L41b16c;
  #L41b188.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b18a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b190.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L41b194.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L41b19a.  call temp:= `wrapOrThrow`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41b1a0.  v3:= temp @kind object;
  #L41b1a2.  throw v3;
  #L41b1a4.  return @kind void;
  catch `java.lang.Throwable` @[L41b178..L41b186] goto L41b188;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingIterable:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ae98.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41ae9e.  v0:= temp;
  #L41aea0.  call temp:= `blockingIterable`(v1, v0) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @kind virtual;
  #L41aea6.  v0:= temp @kind object;
  #L41aea8.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingIterable`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.blockingIterable:(I)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aebc.  v0:= "bufferSize" @kind object;
  #L41aec0.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41aec6.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableIterable`;
  #L41aeca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L41aed0.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41afd0.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L41afd4.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L41afda.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41afe0.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41afe6.  v0:= temp @kind object;
  #L41afe8.  if v0 == 0 then goto L41afee;
  #L41afec.  return v0 @kind object;
  #L41afee.  v0:= new `java.util.NoSuchElementException`;
  #L41aff2.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L41aff8.  throw v0;
}
procedure `java.lang.Object` `blockingLast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingLast:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b00c.  v0:= new `io.reactivex.internal.subscribers.BlockingLastSubscriber`;
  #L41b010.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingLastSubscriber;.<init>:()V` @kind direct;
  #L41b016.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41b01c.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41b022.  v0:= temp @kind object;
  #L41b024.  if v0 == 0 then goto L41b02a;
  #L41b028.  v2:= v0 @kind object;
  #L41b02a.  return v2 @kind object;
}
procedure `java.lang.Iterable` `blockingLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingLatest:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aee4.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableLatest`;
  #L41aee8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41aeee.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingMostRecent`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.blockingMostRecent:(Ljava/lang/Object;)Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41af00.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableMostRecent`;
  #L41af04.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableMostRecent;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L41af0a.  return v0 @kind object;
}
procedure `java.lang.Iterable` `blockingNext`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingNext:()Ljava/lang/Iterable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41af1c.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableNext`;
  #L41af20.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41af26.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.blockingSingle:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b03c.  call temp:= `singleOrError`(v1) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @kind virtual;
  #L41b042.  v0:= temp @kind object;
  #L41b044.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41b04a.  v0:= temp @kind object;
  #L41b04c.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingSingle`(`io.reactivex.Flowable` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSingle:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b060.  call temp:= `single`(v0, v1) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L41b066.  v1:= temp @kind object;
  #L41b068.  call temp:= `blockingGet`(v1) @signature `Lio/reactivex/Single;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41b06e.  v1:= temp @kind object;
  #L41b070.  return v1 @kind object;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this) @signature `Lio/reactivex/Flowable;.blockingSubscribe:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b1c4.  call `subscribe`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;)V` @kind static;
  #L41b1ca.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41b1dc.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41b1e0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b1e4.  call `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L41b1ea.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41b1fc.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41b200.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b204.  call `subscribe`(v2, v3, v0, v1, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L41b20a.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b21c.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b220.  call `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L41b226.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b238.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41b23c.  call `subscribe`(v1, v2, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L41b242.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b254.  call `subscribe`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind static;
  #L41b25a.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b26c.  call `subscribe`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;I)V` @kind static;
  #L41b272.  return @kind void;
}
procedure `void` `blockingSubscribe`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.blockingSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b284.  call `subscribe`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBlockingSubscribe;.subscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L41b28a.  return @kind void;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/Flowable;.buffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L414800.  call temp:= `buffer`(v0, v1, v1) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @kind virtual;
  #L414806.  v1:= temp @kind object;
  #L414808.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41481c.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L414822.  v0:= temp @kind object;
  #L414824.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L41482a.  v2:= temp @kind object;
  #L41482c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414840.  v0:= "count" @kind object;
  #L414844.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41484a.  v0:= "skip" @kind object;
  #L41484e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414854.  v0:= "bufferSupplier is null" @kind object;
  #L414858.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41485e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBuffer`;
  #L414862.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.<init>:(Lio/reactivex/Flowable;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L414868.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41486e.  v2:= temp @kind object;
  #L414870.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v0 @kind this, `int` v1 , `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(ILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L414884.  call temp:= `buffer`(v0, v1, v1, v2) @signature `Lio/reactivex/Flowable;.buffer:(IILjava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L41488a.  v1:= temp @kind object;
  #L41488c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L414a8c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L414a92.  v6:= temp @kind object;
  #L414a94.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L414a9a.  v7:= temp @kind object;
  #L414a9c.  v0:= v8 @kind object;
  #L414a9e.  v1:= v9 @kind wide;
  #L414aa0.  v3:= v11 @kind wide;
  #L414aa2.  v5:= v13 @kind object;
  #L414aa4.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L414aaa.  v9:= temp @kind object;
  #L414aac.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L414ac0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L414ac6.  v7:= temp @kind object;
  #L414ac8.  v0:= v8 @kind object;
  #L414aca.  v1:= v9 @kind wide;
  #L414acc.  v3:= v11 @kind wide;
  #L414ace.  v5:= v13 @kind object;
  #L414ad0.  v6:= v14 @kind object;
  #L414ad2.  call temp:= `buffer`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L414ad8.  v9:= temp @kind object;
  #L414ada.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `long` v15 , `java.util.concurrent.TimeUnit` v17 @kind object, `io.reactivex.Scheduler` v18 @kind object, `java.util.concurrent.Callable` v19 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L414aec.  v0:= "unit is null" @kind object;
  #L414af0.  v7:= v17 @kind object;
  #L414af4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414afa.  v0:= "scheduler is null" @kind object;
  #L414afe.  v8:= v18 @kind object;
  #L414b02.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414b08.  v0:= "bufferSupplier is null" @kind object;
  #L414b0c.  v9:= v19 @kind object;
  #L414b10.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414b16.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L414b1a.  v10:= 2147483647I;
  #L414b20.  v11:= 0I;
  #L414b22.  v1:= v0 @kind object;
  #L414b24.  v2:= v12 @kind object;
  #L414b26.  v3:= v13 @kind wide;
  #L414b28.  v5:= v15 @kind wide;
  #L414b2a.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L414b30.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414b36.  v0:= temp @kind object;
  #L414b38.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L414964.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41496a.  v4:= temp @kind object;
  #L41496c.  v5:= 2147483647I;
  #L414972.  v0:= v6 @kind object;
  #L414974.  v1:= v7 @kind wide;
  #L414976.  v3:= v9 @kind object;
  #L414978.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L41497e.  v7:= temp @kind object;
  #L414980.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L414994.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41499a.  v4:= temp @kind object;
  #L41499c.  v0:= v6 @kind object;
  #L41499e.  v1:= v7 @kind wide;
  #L4149a0.  v3:= v9 @kind object;
  #L4149a2.  v5:= v10;
  #L4149a4.  call temp:= `buffer`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4149aa.  v7:= temp @kind object;
  #L4149ac.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4149c0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L4149c6.  v6:= temp @kind object;
  #L4149c8.  v5:= 2147483647I;
  #L4149ce.  v7:= 0I;
  #L4149d0.  v0:= v8 @kind object;
  #L4149d2.  v1:= v9 @kind wide;
  #L4149d4.  v3:= v11 @kind object;
  #L4149d6.  v4:= v12 @kind object;
  #L4149d8.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L4149de.  v9:= temp @kind object;
  #L4149e0.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `int` v13 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4149f4.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L4149fa.  v6:= temp @kind object;
  #L4149fc.  v7:= 0I;
  #L4149fe.  v0:= v8 @kind object;
  #L414a00.  v1:= v9 @kind wide;
  #L414a02.  v3:= v11 @kind object;
  #L414a04.  v4:= v12 @kind object;
  #L414a06.  v5:= v13;
  #L414a08.  call temp:= `buffer`(v0, v1, v3, v4, v5, v6, v7) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L414a0e.  v9:= temp @kind object;
  #L414a10.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v12 @kind this, `long` v13 , `java.util.concurrent.TimeUnit` v15 @kind object, `io.reactivex.Scheduler` v16 @kind object, `int` v17 , `java.util.concurrent.Callable` v18 @kind object, `boolean` v19 ) @signature `Lio/reactivex/Flowable;.buffer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ILjava/util/concurrent/Callable;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L414a24.  v0:= "unit is null" @kind object;
  #L414a28.  v7:= v15 @kind object;
  #L414a2a.  call temp:= `requireNonNull`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414a30.  v0:= "scheduler is null" @kind object;
  #L414a34.  v8:= v16 @kind object;
  #L414a38.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414a3e.  v0:= "bufferSupplier is null" @kind object;
  #L414a42.  v9:= v18 @kind object;
  #L414a46.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414a4c.  v0:= "count" @kind object;
  #L414a50.  v10:= v17;
  #L414a54.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414a5a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed`;
  #L414a5e.  v1:= v0 @kind object;
  #L414a60.  v2:= v12 @kind object;
  #L414a62.  v3:= v13 @kind wide;
  #L414a64.  v5:= v13 @kind wide;
  #L414a66.  v11:= v19;
  #L414a6a.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @kind direct;
  #L414a70.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414a76.  v0:= temp @kind object;
  #L414a78.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4148a0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L4148a6.  v0:= temp @kind object;
  #L4148a8.  call temp:= `buffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L4148ae.  v2:= temp @kind object;
  #L4148b0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Flowable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4148c4.  v0:= "openingIndicator is null" @kind object;
  #L4148c8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4148ce.  v0:= "closingIndicator is null" @kind object;
  #L4148d2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4148d8.  v0:= "bufferSupplier is null" @kind object;
  #L4148dc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4148e2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary`;
  #L4148e6.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L4148ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4148f2.  v2:= temp @kind object;
  #L4148f4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414908.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L41490e.  v0:= temp @kind object;
  #L414910.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L414916.  v2:= temp @kind object;
  #L414918.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41492c.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L414930.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414936.  v0:= "bufferSupplier is null" @kind object;
  #L41493a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414940.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier`;
  #L414944.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41494a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414950.  v2:= temp @kind object;
  #L414952.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414b4c.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L414b52.  v0:= temp @kind object;
  #L414b54.  call temp:= `buffer`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L414b5a.  v2:= temp @kind object;
  #L414b5c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414b70.  v0:= "initialCapacity" @kind object;
  #L414b74.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414b7a.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L414b80.  v3:= temp @kind object;
  #L414b82.  call temp:= `buffer`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L414b88.  v2:= temp @kind object;
  #L414b8a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `buffer`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.buffer:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414b9c.  v0:= "boundaryIndicator is null" @kind object;
  #L414ba0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414ba6.  v0:= "bufferSupplier is null" @kind object;
  #L414baa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414bb0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary`;
  #L414bb4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L414bba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414bc0.  v2:= temp @kind object;
  #L414bc2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cache`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.cache:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414bd4.  v0:= 16I;
  #L414bd8.  call temp:= `cacheWithInitialCapacity`(v1, v0) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L414bde.  v0:= temp @kind object;
  #L414be0.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `cacheWithInitialCapacity`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.cacheWithInitialCapacity:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414bf4.  v0:= "initialCapacity" @kind object;
  #L414bf8.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414bfe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache`;
  #L414c02.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L414c08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L414c0e.  v2:= temp @kind object;
  #L414c10.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `cast`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414c24.  v0:= "clazz is null" @kind object;
  #L414c28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414c2e.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L414c34.  v2:= temp @kind object;
  #L414c36.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L414c3c.  v2:= temp @kind object;
  #L414c3e.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collect`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a40c.  v0:= "initialItemSupplier is null" @kind object;
  #L41a410.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a416.  v0:= "collector is null" @kind object;
  #L41a41a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a420.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCollectSingle`;
  #L41a424.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L41a42a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a430.  v2:= temp @kind object;
  #L41a432.  return v2 @kind object;
}
procedure `io.reactivex.Single` `collectInto`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.collectInto:(Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a444.  v0:= "initialItem is null" @kind object;
  #L41a448.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a44e.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L41a454.  v2:= temp @kind object;
  #L41a456.  call temp:= `collect`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L41a45c.  v2:= temp @kind object;
  #L41a45e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `compose`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableTransformer` v2 @kind object) @signature `Lio/reactivex/Flowable;.compose:(Lio/reactivex/FlowableTransformer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41527c.  v0:= "composer is null" @kind object;
  #L415280.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415286.  v2:= temp @kind object;
  #L415288.  v2:= (`io.reactivex.FlowableTransformer`) v2 @kind object;
  #L41528c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/FlowableTransformer;.apply:(Lio/reactivex/Flowable;)Lorg/reactivestreams/Publisher;` @kind interface;
  #L415292.  v2:= temp @kind object;
  #L415294.  call temp:= `fromPublisher`(v2) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41529a.  v2:= temp @kind object;
  #L41529c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415738.  v0:= 2I;
  #L41573a.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L415740.  v2:= temp @kind object;
  #L415742.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415754.  v0:= "mapper is null" @kind object;
  #L415758.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41575e.  v0:= "prefetch" @kind object;
  #L415762.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415768.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L41576c.  if v0 == 0 then goto L415796;
  #L415770.  v4:= v2 @kind object;
  #L415772.  v4:= (`io.reactivex.internal.fuseable.ScalarCallable`) v4 @kind object;
  #L415776.  call temp:= `call`(v4) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L41577c.  v4:= temp @kind object;
  #L41577e.  if v4 != 0 then goto L41578c;
  #L415782.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L415788.  v3:= temp @kind object;
  #L41578a.  return v3 @kind object;
  #L41578c.  call temp:= `scalarXMap`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L415792.  v3:= temp @kind object;
  #L415794.  return v3 @kind object;
  #L415796.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L41579a.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41579e.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L4157a4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4157aa.  v3:= temp @kind object;
  #L4157ac.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414584.  v0:= 2I;
  #L414586.  call temp:= `concatMapCompletable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Completable;` @kind virtual;
  #L41458c.  v2:= temp @kind object;
  #L41458e.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapCompletable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4145a0.  v0:= "mapper is null" @kind object;
  #L4145a4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4145aa.  v0:= "prefetch" @kind object;
  #L4145ae.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4145b4.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable`;
  #L4145b8.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4145bc.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L4145c2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L4145c8.  v3:= temp @kind object;
  #L4145ca.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4145dc.  v0:= 1I;
  #L4145de.  v1:= 2I;
  #L4145e0.  call temp:= `concatMapCompletableDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L4145e6.  v3:= temp @kind object;
  #L4145e8.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4145fc.  v0:= 2I;
  #L4145fe.  call temp:= `concatMapCompletableDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L414604.  v2:= temp @kind object;
  #L414606.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `concatMapCompletableDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapCompletableDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414618.  v0:= "mapper is null" @kind object;
  #L41461c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L414622.  v0:= "prefetch" @kind object;
  #L414626.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41462c.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable`;
  #L414630.  if v3 == 0 then goto L41463a;
  #L414634.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L414638.  goto L41463e;
  #L41463a.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41463e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L414644.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L41464a.  v2:= temp @kind object;
  #L41464c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4157c0.  v0:= 2I;
  #L4157c2.  v1:= 1I;
  #L4157c4.  call temp:= `concatMapDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L4157ca.  v3:= temp @kind object;
  #L4157cc.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4157e0.  v0:= "mapper is null" @kind object;
  #L4157e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4157ea.  v0:= "prefetch" @kind object;
  #L4157ee.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4157f4.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L4157f8.  if v0 == 0 then goto L415822;
  #L4157fc.  v3:= v1 @kind object;
  #L4157fe.  v3:= (`io.reactivex.internal.fuseable.ScalarCallable`) v3 @kind object;
  #L415802.  call temp:= `call`(v3) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L415808.  v3:= temp @kind object;
  #L41580a.  if v3 != 0 then goto L415818;
  #L41580e.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L415814.  v2:= temp @kind object;
  #L415816.  return v2 @kind object;
  #L415818.  call temp:= `scalarXMap`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L41581e.  v2:= temp @kind object;
  #L415820.  return v2 @kind object;
  #L415822.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap`;
  #L415826.  if v4 == 0 then goto L415830;
  #L41582a.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41582e.  goto L415834;
  #L415830.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415834.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L41583a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415840.  v2:= temp @kind object;
  #L415842.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415854.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41585a.  v0:= temp;
  #L41585c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L415862.  v1:= temp;
  #L415864.  call temp:= `concatMapEager`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @kind virtual;
  #L41586a.  v3:= temp @kind object;
  #L41586c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEager`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;II)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L415880.  v0:= "mapper is null" @kind object;
  #L415884.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41588a.  v0:= "maxConcurrency" @kind object;
  #L41588e.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415894.  v0:= "prefetch" @kind object;
  #L415898.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41589e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L4158a2.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4158a6.  v1:= v0 @kind object;
  #L4158a8.  v2:= v7 @kind object;
  #L4158aa.  v3:= v8 @kind object;
  #L4158ac.  v4:= v9;
  #L4158ae.  v5:= v10;
  #L4158b0.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L4158b6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4158bc.  v8:= temp @kind object;
  #L4158be.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4158fc.  v0:= "mapper is null" @kind object;
  #L415900.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415906.  v0:= "maxConcurrency" @kind object;
  #L41590a.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415910.  v0:= "prefetch" @kind object;
  #L415914.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41591a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapEager`;
  #L41591e.  if v11 == 0 then goto L415928;
  #L415922.  v11:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415926.  goto L41592c;
  #L415928.  v11:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41592c.  v6:= v11 @kind object;
  #L41592e.  v1:= v0 @kind object;
  #L415930.  v2:= v7 @kind object;
  #L415932.  v3:= v8 @kind object;
  #L415934.  v4:= v9;
  #L415936.  v5:= v10;
  #L415938.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L41593e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415944.  v8:= temp @kind object;
  #L415946.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapEagerDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4158d0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4158d6.  v0:= temp;
  #L4158d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4158de.  v1:= temp;
  #L4158e0.  call temp:= `concatMapEagerDelayError`(v2, v3, v0, v1, v4) @signature `Lio/reactivex/Flowable;.concatMapEagerDelayError:(Lio/reactivex/functions/Function;IIZ)Lio/reactivex/Flowable;` @kind virtual;
  #L4158e6.  v3:= temp @kind object;
  #L4158e8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415958.  v0:= 2I;
  #L41595a.  call temp:= `concatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L415960.  v2:= temp @kind object;
  #L415962.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.concatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415974.  v0:= "mapper is null" @kind object;
  #L415978.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41597e.  v0:= "prefetch" @kind object;
  #L415982.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415988.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L41598c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L415992.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415998.  v2:= temp @kind object;
  #L41599a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4159ac.  v0:= 2I;
  #L4159ae.  call temp:= `concatMapMaybe`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4159b4.  v2:= temp @kind object;
  #L4159b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapMaybe:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4159c8.  v0:= "mapper is null" @kind object;
  #L4159cc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4159d2.  v0:= "prefetch" @kind object;
  #L4159d6.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4159dc.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe`;
  #L4159e0.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4159e4.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L4159ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4159f0.  v3:= temp @kind object;
  #L4159f2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415a04.  v0:= 1I;
  #L415a06.  v1:= 2I;
  #L415a08.  call temp:= `concatMapMaybeDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L415a0e.  v3:= temp @kind object;
  #L415a10.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415a24.  v0:= 2I;
  #L415a26.  call temp:= `concatMapMaybeDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L415a2c.  v2:= temp @kind object;
  #L415a2e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapMaybeDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapMaybeDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415a40.  v0:= "mapper is null" @kind object;
  #L415a44.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415a4a.  v0:= "prefetch" @kind object;
  #L415a4e.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415a54.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe`;
  #L415a58.  if v3 == 0 then goto L415a62;
  #L415a5c.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415a60.  goto L415a66;
  #L415a62.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415a66.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L415a6c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415a72.  v2:= temp @kind object;
  #L415a74.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415a88.  v0:= 2I;
  #L415a8a.  call temp:= `concatMapSingle`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L415a90.  v2:= temp @kind object;
  #L415a92.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapSingle:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415aa4.  v0:= "mapper is null" @kind object;
  #L415aa8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415aae.  v0:= "prefetch" @kind object;
  #L415ab2.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415ab8.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle`;
  #L415abc.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415ac0.  call `<init>`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L415ac6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415acc.  v3:= temp @kind object;
  #L415ace.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415ae0.  v0:= 1I;
  #L415ae2.  v1:= 2I;
  #L415ae4.  call temp:= `concatMapSingleDelayError`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L415aea.  v3:= temp @kind object;
  #L415aec.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415b00.  v0:= 2I;
  #L415b02.  call temp:= `concatMapSingleDelayError`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L415b08.  v2:= temp @kind object;
  #L415b0a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatMapSingleDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.concatMapSingleDelayError:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415b1c.  v0:= "mapper is null" @kind object;
  #L415b20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415b26.  v0:= "prefetch" @kind object;
  #L415b2a.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L415b30.  v0:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle`;
  #L415b34.  if v3 == 0 then goto L415b3e;
  #L415b38.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415b3c.  goto L415b42;
  #L415b3e.  v3:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L415b42.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @kind direct;
  #L415b48.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415b4e.  v2:= temp @kind object;
  #L415b50.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/CompletableSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415b64.  v0:= "other is null" @kind object;
  #L415b68.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415b6e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable`;
  #L415b72.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/CompletableSource;)V` @kind direct;
  #L415b78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415b7e.  v2:= temp @kind object;
  #L415b80.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415b94.  v0:= "other is null" @kind object;
  #L415b98.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415b9e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithMaybe`;
  #L415ba2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L415ba8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415bae.  v2:= temp @kind object;
  #L415bb0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lio/reactivex/SingleSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415bc4.  v0:= "other is null" @kind object;
  #L415bc8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415bce.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatWithSingle`;
  #L415bd2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @kind direct;
  #L415bd8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415bde.  v2:= temp @kind object;
  #L415be0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.concatWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415bf4.  v0:= "other is null" @kind object;
  #L415bf8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415bfe.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Flowable;.concat:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L415c04.  v2:= temp @kind object;
  #L415c06.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a470.  v0:= "item is null" @kind object;
  #L41a474.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a47a.  call temp:= `equalsWith`(v2) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L41a480.  v2:= temp @kind object;
  #L41a482.  call temp:= `any`(v1, v2) @signature `Lio/reactivex/Flowable;.any:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L41a488.  v2:= temp @kind object;
  #L41a48a.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a49c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCountSingle`;
  #L41a4a0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41a4a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a4ac.  v0:= temp @kind object;
  #L41a4ae.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415c80.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L415c86.  v0:= temp @kind object;
  #L415c88.  call temp:= `debounce`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L415c8e.  v2:= temp @kind object;
  #L415c90.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L415ca4.  v0:= "unit is null" @kind object;
  #L415ca8.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415cae.  v0:= "scheduler is null" @kind object;
  #L415cb2.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415cb8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed`;
  #L415cbc.  v1:= v0 @kind object;
  #L415cbe.  v2:= v7 @kind object;
  #L415cc0.  v3:= v8 @kind wide;
  #L415cc2.  v5:= v10 @kind object;
  #L415cc4.  v6:= v11 @kind object;
  #L415cc6.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L415ccc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415cd2.  v8:= temp @kind object;
  #L415cd4.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `debounce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.debounce:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415c50.  v0:= "debounceIndicator is null" @kind object;
  #L415c54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415c5a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDebounce`;
  #L415c5e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L415c64.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415c6a.  v2:= temp @kind object;
  #L415c6c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `defaultIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415ce8.  v0:= "defaultItem is null" @kind object;
  #L415cec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415cf2.  call temp:= `just`(v2) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L415cf8.  v2:= temp @kind object;
  #L415cfa.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L415d00.  v2:= temp @kind object;
  #L415d02.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L415d70.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L415d76.  v4:= temp @kind object;
  #L415d78.  v5:= 0I;
  #L415d7a.  v0:= v6 @kind object;
  #L415d7c.  v1:= v7 @kind wide;
  #L415d7e.  v3:= v9 @kind object;
  #L415d80.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L415d86.  v7:= temp @kind object;
  #L415d88.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L415dc8.  v5:= 0I;
  #L415dca.  v0:= v6 @kind object;
  #L415dcc.  v1:= v7 @kind wide;
  #L415dce.  v3:= v9 @kind object;
  #L415dd0.  v4:= v10 @kind object;
  #L415dd2.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L415dd8.  v7:= temp @kind object;
  #L415dda.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L415dec.  v0:= "unit is null" @kind object;
  #L415df0.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415df6.  v0:= "scheduler is null" @kind object;
  #L415dfa.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415e00.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelay`;
  #L415e04.  v1:= 0L;
  #L415e08.  call temp:= `max`(v1, v9) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L415e0e.  v3:= temp @kind wide;
  #L415e10.  v1:= v0 @kind object;
  #L415e12.  v2:= v8 @kind object;
  #L415e14.  v5:= v11 @kind object;
  #L415e16.  v6:= v12 @kind object;
  #L415e18.  v7:= v13;
  #L415e1a.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L415e20.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415e26.  v9:= temp @kind object;
  #L415e28.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L415d9c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L415da2.  v4:= temp @kind object;
  #L415da4.  v0:= v6 @kind object;
  #L415da6.  v1:= v7 @kind wide;
  #L415da8.  v3:= v9 @kind object;
  #L415daa.  v5:= v10;
  #L415dac.  call temp:= `delay`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L415db2.  v7:= temp @kind object;
  #L415db4.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415d44.  v0:= "itemDelayIndicator is null" @kind object;
  #L415d48.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415d4e.  call temp:= `itemDelay`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.itemDelay:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L415d54.  v2:= temp @kind object;
  #L415d56.  call temp:= `flatMap`(v1, v2) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L415d5c.  v2:= temp @kind object;
  #L415d5e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delay`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.delay:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L415e3c.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L415e42.  v1:= temp @kind object;
  #L415e44.  call temp:= `delay`(v1, v2) @signature `Lio/reactivex/Flowable;.delay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L415e4a.  v1:= temp @kind object;
  #L415e4c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415e60.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L415e66.  v0:= temp @kind object;
  #L415e68.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L415e6e.  v2:= temp @kind object;
  #L415e70.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L415e84.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L415e8a.  v1:= temp @kind object;
  #L415e8c.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L415e92.  v1:= temp @kind object;
  #L415e94.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `delaySubscription`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415ea8.  v0:= "subscriptionIndicator is null" @kind object;
  #L415eac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415eb2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther`;
  #L415eb6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L415ebc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415ec2.  v2:= temp @kind object;
  #L415ec4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `dematerialize`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.dematerialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415ed8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDematerialize`;
  #L415edc.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415ee2.  v1:= temp @kind object;
  #L415ee4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L415eea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415ef0.  v0:= temp @kind object;
  #L415ef2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `dematerialize`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.dematerialize:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415f04.  v0:= "selector is null" @kind object;
  #L415f08.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415f0e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDematerialize`;
  #L415f12.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L415f18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415f1e.  v2:= temp @kind object;
  #L415f20.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.distinct:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415f34.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415f3a.  v0:= temp @kind object;
  #L415f3c.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L415f42.  v1:= temp @kind object;
  #L415f44.  call temp:= `distinct`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L415f4a.  v0:= temp @kind object;
  #L415f4c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415f60.  call temp:= `createHashSet`() @signature `Lio/reactivex/internal/functions/Functions;.createHashSet:()Ljava/util/concurrent/Callable;` @kind static;
  #L415f66.  v0:= temp @kind object;
  #L415f68.  call temp:= `distinct`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @kind virtual;
  #L415f6e.  v2:= temp @kind object;
  #L415f70.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinct`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinct:(Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415f84.  v0:= "keySelector is null" @kind object;
  #L415f88.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415f8e.  v0:= "collectionSupplier is null" @kind object;
  #L415f92.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415f98.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinct`;
  #L415f9c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinct;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L415fa2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L415fa8.  v2:= temp @kind object;
  #L415faa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L415fbc.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415fc2.  v0:= temp @kind object;
  #L415fc4.  call temp:= `distinctUntilChanged`(v1, v0) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L415fca.  v0:= temp @kind object;
  #L415fcc.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L415fe0.  v0:= "comparer is null" @kind object;
  #L415fe4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L415fea.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L415fee.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L415ff4.  v1:= temp @kind object;
  #L415ff6.  call `<init>`(v0, v2, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L415ffc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416002.  v3:= temp @kind object;
  #L416004.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `distinctUntilChanged`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.distinctUntilChanged:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L416018.  v0:= "keySelector is null" @kind object;
  #L41601c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416022.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged`;
  #L416026.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L41602c.  v1:= temp @kind object;
  #L41602e.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L416034.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41603a.  v3:= temp @kind object;
  #L41603c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterNext`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416050.  v0:= "onAfterNext is null" @kind object;
  #L416054.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41605a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoAfterNext`;
  #L41605e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L416064.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41606a.  v2:= temp @kind object;
  #L41606c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doAfterTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L416080.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416086.  v0:= temp @kind object;
  #L416088.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41608e.  v1:= temp @kind object;
  #L416090.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L416094.  call temp:= `a`(v3, v0, v1, v2, v4) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L41609a.  v4:= temp @kind object;
  #L41609c.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doFinally`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Flowable;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4160b0.  v0:= "onFinally is null" @kind object;
  #L4160b4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4160ba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoFinally`;
  #L4160be.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Action;)V` @kind direct;
  #L4160c4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4160ca.  v2:= temp @kind object;
  #L4160cc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnCancel`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4160e0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L4160e6.  v0:= temp @kind object;
  #L4160e8.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L4160ec.  call temp:= `doOnLifecycle`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L4160f2.  v3:= temp @kind object;
  #L4160f4.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnComplete`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L416108.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41610e.  v0:= temp @kind object;
  #L416110.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416116.  v1:= temp @kind object;
  #L416118.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41611c.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L416122.  v4:= temp @kind object;
  #L416124.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L416138.  v0:= "onNotification is null" @kind object;
  #L41613c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416142.  call temp:= `notificationOnNext`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L416148.  v0:= temp @kind object;
  #L41614a.  call temp:= `notificationOnError`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Consumer;` @kind static;
  #L416150.  v1:= temp @kind object;
  #L416152.  call temp:= `notificationOnComplete`(v4) @signature `Lio/reactivex/internal/functions/Functions;.notificationOnComplete:(Lio/reactivex/functions/Consumer;)Lio/reactivex/functions/Action;` @kind static;
  #L416158.  v4:= temp @kind object;
  #L41615a.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41615e.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L416164.  v4:= temp @kind object;
  #L416166.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnEach`(`io.reactivex.Flowable` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnEach:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4161d0.  v0:= "subscriber is null" @kind object;
  #L4161d4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4161da.  call temp:= `subscriberOnNext`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnNext:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L4161e0.  v0:= temp @kind object;
  #L4161e2.  call temp:= `subscriberOnError`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnError:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Consumer;` @kind static;
  #L4161e8.  v1:= temp @kind object;
  #L4161ea.  call temp:= `subscriberOnComplete`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.subscriberOnComplete:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/functions/Action;` @kind static;
  #L4161f0.  v4:= temp @kind object;
  #L4161f2.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L4161f6.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L4161fc.  v4:= temp @kind object;
  #L4161fe.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `doOnError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L416210.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416216.  v0:= temp @kind object;
  #L416218.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41621c.  call temp:= `a`(v2, v0, v3, v1, v1) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L416222.  v3:= temp @kind object;
  #L416224.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnLifecycle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.LongConsumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416238.  v0:= "onSubscribe is null" @kind object;
  #L41623c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416242.  v0:= "onRequest is null" @kind object;
  #L416246.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41624c.  v0:= "onCancel is null" @kind object;
  #L416250.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416256.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDoOnLifecycle`;
  #L41625a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnLifecycle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L416260.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416266.  v2:= temp @kind object;
  #L416268.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `doOnNext`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41627c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L416282.  v0:= temp @kind object;
  #L416284.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L416288.  call temp:= `a`(v2, v3, v0, v1, v1) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L41628e.  v3:= temp @kind object;
  #L416290.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnRequest`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.LongConsumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4162a4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L4162aa.  v0:= temp @kind object;
  #L4162ac.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L4162b0.  call temp:= `doOnLifecycle`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L4162b6.  v3:= temp @kind object;
  #L4162b8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnSubscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4162cc.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L4162d0.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L4162d4.  call temp:= `doOnLifecycle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.doOnLifecycle:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L4162da.  v3:= temp @kind object;
  #L4162dc.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `doOnTerminate`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.doOnTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4162f0.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L4162f6.  v0:= temp @kind object;
  #L4162f8.  call temp:= `actionConsumer`(v4) @signature `Lio/reactivex/internal/functions/Functions;.actionConsumer:(Lio/reactivex/functions/Action;)Lio/reactivex/functions/Consumer;` @kind static;
  #L4162fe.  v1:= temp @kind object;
  #L416300.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L416304.  call temp:= `a`(v3, v0, v1, v4, v2) @signature `Lio/reactivex/Flowable;.a:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind direct;
  #L41630a.  v4:= temp @kind object;
  #L41630c.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41a290.  v0:= 0L;
  #L41a294.  v2:= lcmp(v4, v0);
  #L41a298.  if v2 < 0 then goto L41a2b0;
  #L41a29c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtMaybe`;
  #L41a2a0.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtMaybe;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L41a2a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41a2ac.  v4:= temp @kind object;
  #L41a2ae.  return v4 @kind object;
  #L41a2b0.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L41a2b4.  v1:= new `java.lang.StringBuilder`;
  #L41a2b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41a2be.  v2:= "index >= 0 required but it was " @kind object;
  #L41a2c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a2c8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a2ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41a2d4.  v4:= temp @kind object;
  #L41a2d6.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41a2dc.  throw v0;
}
procedure `io.reactivex.Single` `elementAt`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41a4c0.  v0:= 0L;
  #L41a4c4.  v2:= lcmp(v4, v0);
  #L41a4c8.  if v2 < 0 then goto L41a4ea;
  #L41a4cc.  v0:= "defaultItem is null" @kind object;
  #L41a4d0.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a4d6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L41a4da.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L41a4e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a4e6.  v4:= temp @kind object;
  #L41a4e8.  return v4 @kind object;
  #L41a4ea.  v6:= new `java.lang.IndexOutOfBoundsException`;
  #L41a4ee.  v0:= new `java.lang.StringBuilder`;
  #L41a4f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41a4f8.  v1:= "index >= 0 required but it was " @kind object;
  #L41a4fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a502.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a508.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41a50e.  v4:= temp @kind object;
  #L41a510.  call `<init>`(v6, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41a516.  throw v6;
}
procedure `io.reactivex.Single` `elementAtOrError`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41a528.  v0:= 0L;
  #L41a52c.  v2:= lcmp(v4, v0);
  #L41a530.  if v2 < 0 then goto L41a54a;
  #L41a534.  v0:= new `io.reactivex.internal.operators.flowable.FlowableElementAtSingle`;
  #L41a538.  v1:= 0I;
  #L41a53a.  call `<init>`(v0, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle;.<init>:(Lio/reactivex/Flowable;JLjava/lang/Object;)V` @kind direct;
  #L41a540.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a546.  v4:= temp @kind object;
  #L41a548.  return v4 @kind object;
  #L41a54a.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L41a54e.  v1:= new `java.lang.StringBuilder`;
  #L41a552.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41a558.  v2:= "index >= 0 required but it was " @kind object;
  #L41a55c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a562.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41a568.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41a56e.  v4:= temp @kind object;
  #L41a570.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41a576.  throw v0;
}
procedure `io.reactivex.Flowable` `filter`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41639c.  v0:= "predicate is null" @kind object;
  #L4163a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4163a6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFilter`;
  #L4163aa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L4163b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4163b6.  v2:= temp @kind object;
  #L4163b8.  return v2 @kind object;
}
procedure `io.reactivex.Single` `first`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.first:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a588.  v0:= 0L;
  #L41a58c.  call temp:= `elementAt`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.elementAt:(JLjava/lang/Object;)Lio/reactivex/Single;` @kind virtual;
  #L41a592.  v3:= temp @kind object;
  #L41a594.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `firstElement`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a2f0.  v0:= 0L;
  #L41a2f4.  call temp:= `elementAt`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAt:(J)Lio/reactivex/Maybe;` @kind virtual;
  #L41a2fa.  v0:= temp @kind object;
  #L41a2fc.  return v0 @kind object;
}
procedure `io.reactivex.Single` `firstOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.firstOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a5a8.  v0:= 0L;
  #L41a5ac.  call temp:= `elementAtOrError`(v2, v0) @signature `Lio/reactivex/Flowable;.elementAtOrError:(J)Lio/reactivex/Single;` @kind virtual;
  #L41a5b2.  v0:= temp @kind object;
  #L41a5b4.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4163cc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4163d2.  v0:= temp;
  #L4163d4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4163da.  v1:= temp;
  #L4163dc.  v2:= 0I;
  #L4163de.  call temp:= `flatMap`(v3, v4, v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4163e4.  v4:= temp @kind object;
  #L4163e6.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4164c4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4164ca.  v0:= temp;
  #L4164cc.  v1:= 0I;
  #L4164ce.  call temp:= `flatMap`(v2, v3, v1, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4164d4.  v3:= temp @kind object;
  #L4164d6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4164e8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4164ee.  v4:= temp;
  #L4164f0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4164f6.  v5:= temp;
  #L4164f8.  v3:= 0I;
  #L4164fa.  v0:= v6 @kind object;
  #L4164fc.  v1:= v7 @kind object;
  #L4164fe.  v2:= v8 @kind object;
  #L416500.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L416506.  v7:= temp @kind object;
  #L416508.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4165c8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4165ce.  v5:= temp;
  #L4165d0.  v3:= 0I;
  #L4165d2.  v0:= v6 @kind object;
  #L4165d4.  v1:= v7 @kind object;
  #L4165d6.  v2:= v8 @kind object;
  #L4165d8.  v4:= v9;
  #L4165da.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4165e0.  v7:= temp @kind object;
  #L4165e2.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41651c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416522.  v4:= temp;
  #L416524.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41652a.  v5:= temp;
  #L41652c.  v0:= v6 @kind object;
  #L41652e.  v1:= v7 @kind object;
  #L416530.  v2:= v8 @kind object;
  #L416532.  v3:= v9;
  #L416534.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L41653a.  v7:= temp @kind object;
  #L41653c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `io.reactivex.functions.BiFunction` v8 @kind object, `boolean` v9 , `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L416550.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416556.  v5:= temp;
  #L416558.  v0:= v6 @kind object;
  #L41655a.  v1:= v7 @kind object;
  #L41655c.  v2:= v8 @kind object;
  #L41655e.  v3:= v9;
  #L416560.  v4:= v10;
  #L416562.  call temp:= `flatMap`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L416568.  v7:= temp @kind object;
  #L41656a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41657c.  v0:= "mapper is null" @kind object;
  #L416580.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416586.  v0:= "combiner is null" @kind object;
  #L41658a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416590.  v0:= "maxConcurrency" @kind object;
  #L416594.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41659a.  v0:= "bufferSize" @kind object;
  #L41659e.  call temp:= `verifyPositive`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4165a4.  call temp:= `flatMapWithCombiner`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapWithCombiner:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L4165aa.  v2:= temp @kind object;
  #L4165ac.  call temp:= `flatMap`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L4165b2.  v2:= temp @kind object;
  #L4165b4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4165f4.  v0:= "onNextMapper is null" @kind object;
  #L4165f8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4165fe.  v0:= "onErrorMapper is null" @kind object;
  #L416602.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416608.  v0:= "onCompleteSupplier is null" @kind object;
  #L41660c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416612.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L416616.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41661c.  call temp:= `merge`(v0) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L416622.  v2:= temp @kind object;
  #L416624.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416638.  v0:= "onNextMapper is null" @kind object;
  #L41663c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416642.  v0:= "onErrorMapper is null" @kind object;
  #L416646.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41664c.  v0:= "onCompleteSupplier is null" @kind object;
  #L416650.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416656.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMapNotification`;
  #L41665a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableMapNotification;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L416660.  call temp:= `merge`(v0, v5) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L416666.  v2:= temp @kind object;
  #L416668.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4163f8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4163fe.  v0:= temp;
  #L416400.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416406.  v1:= temp;
  #L416408.  call temp:= `flatMap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L41640e.  v3:= temp @kind object;
  #L416410.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416424.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41642a.  v0:= temp;
  #L41642c.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L416432.  v2:= temp @kind object;
  #L416434.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMap`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L416448.  v0:= "mapper is null" @kind object;
  #L41644c.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416452.  v0:= "maxConcurrency" @kind object;
  #L416456.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41645c.  v0:= "bufferSize" @kind object;
  #L416460.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L416466.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.ScalarCallable` @kind boolean;
  #L41646a.  if v0 == 0 then goto L416494;
  #L41646e.  v9:= v7 @kind object;
  #L416470.  v9:= (`io.reactivex.internal.fuseable.ScalarCallable`) v9 @kind object;
  #L416474.  call temp:= `call`(v9) @signature `Lio/reactivex/internal/fuseable/ScalarCallable;.call:()Ljava/lang/Object;` @kind interface;
  #L41647a.  v9:= temp @kind object;
  #L41647c.  if v9 != 0 then goto L41648a;
  #L416480.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L416486.  v8:= temp @kind object;
  #L416488.  return v8 @kind object;
  #L41648a.  call temp:= `scalarXMap`(v9, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.scalarXMap:(Ljava/lang/Object;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L416490.  v8:= temp @kind object;
  #L416492.  return v8 @kind object;
  #L416494.  v6:= new `io.reactivex.internal.operators.flowable.FlowableFlatMap`;
  #L416498.  v0:= v6 @kind object;
  #L41649a.  v1:= v7 @kind object;
  #L41649c.  v2:= v8 @kind object;
  #L41649e.  v3:= v9;
  #L4164a0.  v4:= v10;
  #L4164a2.  v5:= v11;
  #L4164a4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L4164aa.  call temp:= `onAssembly`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4164b0.  v8:= temp @kind object;
  #L4164b2.  return v8 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L414660.  v0:= 0I;
  #L414662.  v1:= 2147483647I;
  #L414668.  call temp:= `flatMapCompletable`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @kind virtual;
  #L41466e.  v3:= temp @kind object;
  #L414670.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapCompletable:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L414684.  v0:= "mapper is null" @kind object;
  #L414688.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41468e.  v0:= "maxConcurrency" @kind object;
  #L414692.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L414698.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable`;
  #L41469c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L4146a2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L4146a8.  v2:= temp @kind object;
  #L4146aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41667c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416682.  v0:= temp;
  #L416684.  call temp:= `flatMapIterable`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L41668a.  v2:= temp @kind object;
  #L41668c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4166a0.  v0:= "mapper is null" @kind object;
  #L4166a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4166aa.  v0:= "bufferSize" @kind object;
  #L4166ae.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4166b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable`;
  #L4166b8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L4166be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4166c4.  v2:= temp @kind object;
  #L4166c6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4166d8.  v0:= "mapper is null" @kind object;
  #L4166dc.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4166e2.  v0:= "resultSelector is null" @kind object;
  #L4166e6.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4166ec.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L4166f2.  v2:= temp @kind object;
  #L4166f4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4166fa.  v5:= temp;
  #L4166fc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416702.  v6:= temp;
  #L416704.  v4:= 0I;
  #L416706.  v1:= v7 @kind object;
  #L416708.  v3:= v9 @kind object;
  #L41670a.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L416710.  v8:= temp @kind object;
  #L416712.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapIterable`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `io.reactivex.functions.BiFunction` v9 @kind object, `int` v10 ) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L416724.  v0:= "mapper is null" @kind object;
  #L416728.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41672e.  v0:= "resultSelector is null" @kind object;
  #L416732.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416738.  call temp:= `flatMapIntoIterable`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.flatMapIntoIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/Function;` @kind static;
  #L41673e.  v2:= temp @kind object;
  #L416740.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416746.  v5:= temp;
  #L416748.  v4:= 0I;
  #L41674a.  v1:= v7 @kind object;
  #L41674c.  v3:= v9 @kind object;
  #L41674e.  v6:= v10;
  #L416750.  call temp:= `flatMap`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;ZII)Lio/reactivex/Flowable;` @kind virtual;
  #L416756.  v8:= temp @kind object;
  #L416758.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41676c.  v0:= 0I;
  #L41676e.  v1:= 2147483647I;
  #L416774.  call temp:= `flatMapMaybe`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L41677a.  v3:= temp @kind object;
  #L41677c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapMaybe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapMaybe:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416790.  v0:= "mapper is null" @kind object;
  #L416794.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41679a.  v0:= "maxConcurrency" @kind object;
  #L41679e.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4167a4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe`;
  #L4167a8.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L4167ae.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4167b4.  v2:= temp @kind object;
  #L4167b6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4167c8.  v0:= 0I;
  #L4167ca.  v1:= 2147483647I;
  #L4167d0.  call temp:= `flatMapSingle`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L4167d6.  v3:= temp @kind object;
  #L4167d8.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapSingle`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.flatMapSingle:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4167ec.  v0:= "mapper is null" @kind object;
  #L4167f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4167f6.  v0:= "maxConcurrency" @kind object;
  #L4167fa.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L416800.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle`;
  #L416804.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ZI)V` @kind direct;
  #L41680a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416810.  v2:= temp @kind object;
  #L416812.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEach`(`io.reactivex.Flowable` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/Flowable;.forEach:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41aa84.  call temp:= `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41aa8a.  v1:= temp @kind object;
  #L41aa8c.  return v1 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41aaa0.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41aaa4.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41aaa8.  call temp:= `forEachWhile`(v2, v3, v0, v1) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41aaae.  v3:= temp @kind object;
  #L41aab0.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aac4.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41aac8.  call temp:= `forEachWhile`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41aace.  v2:= temp @kind object;
  #L41aad0.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `forEachWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.forEachWhile:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aae4.  v0:= "onNext is null" @kind object;
  #L41aae8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41aaee.  v0:= "onError is null" @kind object;
  #L41aaf2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41aaf8.  v0:= "onComplete is null" @kind object;
  #L41aafc.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ab02.  v0:= new `io.reactivex.internal.subscribers.ForEachWhileSubscriber`;
  #L41ab06.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41ab0c.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41ab12.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L416ae8.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L416aee.  v0:= temp @kind object;
  #L416af0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416af6.  v1:= temp;
  #L416af8.  v2:= 0I;
  #L416afa.  call temp:= `groupBy`(v3, v4, v0, v2, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L416b00.  v4:= temp @kind object;
  #L416b02.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L416b40.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416b46.  v0:= temp;
  #L416b48.  v1:= 0I;
  #L416b4a.  call temp:= `groupBy`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L416b50.  v3:= temp @kind object;
  #L416b52.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416b64.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416b6a.  v0:= temp;
  #L416b6c.  call temp:= `groupBy`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L416b72.  v2:= temp @kind object;
  #L416b74.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v8 @kind this, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `boolean` v11 , `int` v12 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L416b88.  v0:= "keySelector is null" @kind object;
  #L416b8c.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416b92.  v0:= "valueSelector is null" @kind object;
  #L416b96.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416b9c.  v0:= "bufferSize" @kind object;
  #L416ba0.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L416ba6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy`;
  #L416baa.  v7:= 0I;
  #L416bac.  v1:= v0 @kind object;
  #L416bae.  v2:= v8 @kind object;
  #L416bb0.  v3:= v9 @kind object;
  #L416bb2.  v4:= v10 @kind object;
  #L416bb4.  v5:= v12;
  #L416bb6.  v6:= v11;
  #L416bb8.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLio/reactivex/functions/Function;)V` @kind direct;
  #L416bbe.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416bc4.  v9:= temp @kind object;
  #L416bc6.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v8 @kind this, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `boolean` v11 , `int` v12 , `io.reactivex.functions.Function` v13 @kind object) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZILio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L416bd8.  v0:= "keySelector is null" @kind object;
  #L416bdc.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416be2.  v0:= "valueSelector is null" @kind object;
  #L416be6.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416bec.  v0:= "bufferSize" @kind object;
  #L416bf0.  call temp:= `verifyPositive`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L416bf6.  v0:= "evictingMapFactory is null" @kind object;
  #L416bfa.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416c00.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy`;
  #L416c04.  v1:= v0 @kind object;
  #L416c06.  v2:= v8 @kind object;
  #L416c08.  v3:= v9 @kind object;
  #L416c0a.  v4:= v10 @kind object;
  #L416c0c.  v5:= v12;
  #L416c0e.  v6:= v11;
  #L416c10.  v7:= v13 @kind object;
  #L416c12.  call `<init>`(v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLio/reactivex/functions/Function;)V` @kind direct;
  #L416c18.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416c1e.  v9:= temp @kind object;
  #L416c20.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `groupBy`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L416b14.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L416b1a.  v0:= temp @kind object;
  #L416b1c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L416b22.  v1:= temp;
  #L416b24.  call temp:= `groupBy`(v2, v3, v0, v4, v1) @signature `Lio/reactivex/Flowable;.groupBy:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L416b2a.  v3:= temp @kind object;
  #L416b2c.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `groupJoin`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.groupJoin:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L416c34.  v0:= "other is null" @kind object;
  #L416c38.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416c3e.  v0:= "leftEnd is null" @kind object;
  #L416c42.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416c48.  v0:= "rightEnd is null" @kind object;
  #L416c4c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416c52.  v0:= "resultSelector is null" @kind object;
  #L416c56.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416c5c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin`;
  #L416c60.  v1:= v0 @kind object;
  #L416c62.  v2:= v7 @kind object;
  #L416c64.  v3:= v8 @kind object;
  #L416c66.  v4:= v9 @kind object;
  #L416c68.  v5:= v10 @kind object;
  #L416c6a.  v6:= v11 @kind object;
  #L416c6c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L416c72.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416c78.  v8:= temp @kind object;
  #L416c7a.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `hide`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.hide:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L416c8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableHide`;
  #L416c90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L416c96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416c9c.  v0:= temp @kind object;
  #L416c9e.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElements`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.ignoreElements:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4146bc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElementsCompletable`;
  #L4146c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElementsCompletable;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4146c6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L4146cc.  v0:= temp @kind object;
  #L4146ce.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a5c8.  call temp:= `alwaysFalse`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysFalse:()Lio/reactivex/functions/Predicate;` @kind static;
  #L41a5ce.  v0:= temp @kind object;
  #L41a5d0.  call temp:= `all`(v1, v0) @signature `Lio/reactivex/Flowable;.all:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Single;` @kind virtual;
  #L41a5d6.  v0:= temp @kind object;
  #L41a5d8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `join`(`io.reactivex.Flowable` v7 @kind this, `org.reactivestreams.Publisher` v8 @kind object, `io.reactivex.functions.Function` v9 @kind object, `io.reactivex.functions.Function` v10 @kind object, `io.reactivex.functions.BiFunction` v11 @kind object) @signature `Lio/reactivex/Flowable;.join:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L416e94.  v0:= "other is null" @kind object;
  #L416e98.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416e9e.  v0:= "leftEnd is null" @kind object;
  #L416ea2.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416ea8.  v0:= "rightEnd is null" @kind object;
  #L416eac.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416eb2.  v0:= "resultSelector is null" @kind object;
  #L416eb6.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L416ebc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableJoin`;
  #L416ec0.  v1:= v0 @kind object;
  #L416ec2.  v2:= v7 @kind object;
  #L416ec4.  v3:= v8 @kind object;
  #L416ec6.  v4:= v9 @kind object;
  #L416ec8.  v5:= v10 @kind object;
  #L416eca.  v6:= v11 @kind object;
  #L416ecc.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L416ed2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L416ed8.  v8:= temp @kind object;
  #L416eda.  return v8 @kind object;
}
procedure `io.reactivex.Single` `last`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.last:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a5ec.  v0:= "defaultItem" @kind object;
  #L41a5f0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a5f6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L41a5fa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L41a600.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a606.  v2:= temp @kind object;
  #L41a608.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `lastElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.lastElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a310.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastMaybe`;
  #L41a314.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastMaybe;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41a31a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41a320.  v0:= temp @kind object;
  #L41a322.  return v0 @kind object;
}
procedure `io.reactivex.Single` `lastOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.lastOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a61c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLastSingle`;
  #L41a620.  v1:= 0I;
  #L41a622.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableLastSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;)V` @kind direct;
  #L41a628.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a62e.  v0:= temp @kind object;
  #L41a630.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `lift`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.FlowableOperator` v2 @kind object) @signature `Lio/reactivex/Flowable;.lift:(Lio/reactivex/FlowableOperator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4173ac.  v0:= "lifter is null" @kind object;
  #L4173b0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4173b6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLift`;
  #L4173ba.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLift;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/FlowableOperator;)V` @kind direct;
  #L4173c0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4173c6.  v2:= temp @kind object;
  #L4173c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `limit`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.limit:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4173dc.  v0:= 0L;
  #L4173e0.  v2:= lcmp(v4, v0);
  #L4173e4.  if v2 < 0 then goto L4173fc;
  #L4173e8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableLimit`;
  #L4173ec.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L4173f2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4173f8.  v4:= temp @kind object;
  #L4173fa.  return v4 @kind object;
  #L4173fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L417400.  v1:= new `java.lang.StringBuilder`;
  #L417404.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41740a.  v2:= "count >= 0 required but it was " @kind object;
  #L41740e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L417414.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L41741a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L417420.  v4:= temp @kind object;
  #L417422.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417428.  throw v0;
}
procedure `io.reactivex.Flowable` `map`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41743c.  v0:= "mapper is null" @kind object;
  #L417440.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417446.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMap`;
  #L41744a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L417450.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417456.  v2:= temp @kind object;
  #L417458.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `materialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41746c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMaterialize`;
  #L417470.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMaterialize;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L417476.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41747c.  v0:= temp @kind object;
  #L41747e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/CompletableSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41792c.  v0:= "other is null" @kind object;
  #L417930.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417936.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable`;
  #L41793a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/CompletableSource;)V` @kind direct;
  #L417940.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417946.  v2:= temp @kind object;
  #L417948.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41795c.  v0:= "other is null" @kind object;
  #L417960.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417966.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe`;
  #L41796a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L417970.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417976.  v2:= temp @kind object;
  #L417978.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lio/reactivex/SingleSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41798c.  v0:= "other is null" @kind object;
  #L417990.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417996.  v0:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle`;
  #L41799a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/SingleSource;)V` @kind direct;
  #L4179a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4179a6.  v2:= temp @kind object;
  #L4179a8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.mergeWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4179bc.  v0:= "other is null" @kind object;
  #L4179c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4179c6.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Flowable;.merge:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4179cc.  v2:= temp @kind object;
  #L4179ce.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417a00.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417a06.  v0:= temp;
  #L417a08.  v1:= 0I;
  #L417a0a.  call temp:= `observeOn`(v2, v3, v1, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417a10.  v3:= temp @kind object;
  #L417a12.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417a24.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417a2a.  v0:= temp;
  #L417a2c.  call temp:= `observeOn`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417a32.  v2:= temp @kind object;
  #L417a34.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `observeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417a48.  v0:= "scheduler is null" @kind object;
  #L417a4c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417a52.  v0:= "bufferSize" @kind object;
  #L417a56.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L417a5c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableObserveOn`;
  #L417a60.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;ZI)V` @kind direct;
  #L417a66.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417a6c.  v2:= temp @kind object;
  #L417a6e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `ofType`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Flowable;.ofType:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417a80.  v0:= "clazz is null" @kind object;
  #L417a84.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417a8a.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L417a90.  v0:= temp @kind object;
  #L417a92.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Flowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L417a98.  v0:= temp @kind object;
  #L417a9a.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Flowable;.cast:(Ljava/lang/Class;)Lio/reactivex/Flowable;` @kind virtual;
  #L417aa0.  v2:= temp @kind object;
  #L417aa2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L417ab4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417aba.  v0:= temp;
  #L417abc.  v1:= 0I;
  #L417abe.  v2:= 1I;
  #L417ac0.  call temp:= `onBackpressureBuffer`(v3, v0, v1, v2) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L417ac6.  v0:= temp @kind object;
  #L417ac8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417b00.  v0:= 0I;
  #L417b02.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L417b08.  v2:= temp @kind object;
  #L417b0a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(ILio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417bb8.  v0:= 0I;
  #L417bba.  call temp:= `onBackpressureBuffer`(v1, v2, v0, v0, v3) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @kind virtual;
  #L417bc0.  v2:= temp @kind object;
  #L417bc2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417b1c.  v0:= 0I;
  #L417b1e.  call temp:= `onBackpressureBuffer`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L417b24.  v2:= temp @kind object;
  #L417b26.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L417b38.  v0:= "capacity" @kind object;
  #L417b3c.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L417b42.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L417b46.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L417b4a.  v1:= v0 @kind object;
  #L417b4c.  v2:= v7 @kind object;
  #L417b4e.  v3:= v8;
  #L417b50.  v4:= v10;
  #L417b52.  v5:= v9;
  #L417b54.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L417b5a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417b60.  v8:= temp @kind object;
  #L417b62.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `int` v8 , `boolean` v9 , `boolean` v10 , `io.reactivex.functions.Action` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZLio/reactivex/functions/Action;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L417b74.  v0:= "onOverflow is null" @kind object;
  #L417b78.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417b7e.  v0:= "capacity" @kind object;
  #L417b82.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L417b88.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer`;
  #L417b8c.  v1:= v0 @kind object;
  #L417b8e.  v2:= v7 @kind object;
  #L417b90.  v3:= v8;
  #L417b92.  v4:= v10;
  #L417b94.  v5:= v9;
  #L417b96.  v6:= v11 @kind object;
  #L417b98.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L417b9e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417ba4.  v8:= temp @kind object;
  #L417ba6.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `io.reactivex.functions.Action` v10 @kind object, `io.reactivex.BackpressureOverflowStrategy` v11 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L417bd4.  v0:= "overflowStrategy is null" @kind object;
  #L417bd8.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417bde.  v0:= "capacity" @kind object;
  #L417be2.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L417be8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy`;
  #L417bec.  v1:= v0 @kind object;
  #L417bee.  v2:= v7 @kind object;
  #L417bf0.  v3:= v8 @kind wide;
  #L417bf2.  v5:= v10 @kind object;
  #L417bf4.  v6:= v11 @kind object;
  #L417bf6.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;)V` @kind direct;
  #L417bfc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417c02.  v8:= temp @kind object;
  #L417c04.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureBuffer`(`io.reactivex.Flowable` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417adc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417ae2.  v0:= temp;
  #L417ae4.  v1:= 1I;
  #L417ae6.  call temp:= `onBackpressureBuffer`(v2, v0, v3, v1) @signature `Lio/reactivex/Flowable;.onBackpressureBuffer:(IZZ)Lio/reactivex/Flowable;` @kind virtual;
  #L417aec.  v3:= temp @kind object;
  #L417aee.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417c18.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L417c1c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L417c22.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417c28.  v0:= temp @kind object;
  #L417c2a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureDrop`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Flowable;.onBackpressureDrop:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417c3c.  v0:= "onDrop is null" @kind object;
  #L417c40.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417c46.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop`;
  #L417c4a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L417c50.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417c56.  v2:= temp @kind object;
  #L417c58.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onBackpressureLatest`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onBackpressureLatest:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417c6c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest`;
  #L417c70.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L417c76.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417c7c.  v0:= temp @kind object;
  #L417c7e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417c90.  v0:= "resumeFunction is null" @kind object;
  #L417c94.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417c9a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L417c9e.  v1:= 0I;
  #L417ca0.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L417ca6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417cac.  v3:= temp @kind object;
  #L417cae.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorResumeNext`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417cc0.  v0:= "next is null" @kind object;
  #L417cc4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417cca.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L417cd0.  v2:= temp @kind object;
  #L417cd2.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L417cd8.  v2:= temp @kind object;
  #L417cda.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417cec.  v0:= "valueSupplier is null" @kind object;
  #L417cf0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417cf6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorReturn`;
  #L417cfa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorReturn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L417d00.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417d06.  v2:= temp @kind object;
  #L417d08.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onErrorReturnItem`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417d1c.  v0:= "item is null" @kind object;
  #L417d20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417d26.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L417d2c.  v2:= temp @kind object;
  #L417d2e.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Flowable;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L417d34.  v2:= temp @kind object;
  #L417d36.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `onExceptionResumeNext`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.onExceptionResumeNext:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417d48.  v0:= "next is null" @kind object;
  #L417d4c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417d52.  v0:= new `io.reactivex.internal.operators.flowable.FlowableOnErrorNext`;
  #L417d56.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L417d5c.  v3:= temp @kind object;
  #L417d5e.  v1:= 1I;
  #L417d60.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L417d66.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417d6c.  v3:= temp @kind object;
  #L417d6e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `onTerminateDetach`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.onTerminateDetach:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417d80.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDetach`;
  #L417d84.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L417d8a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417d90.  v0:= temp @kind object;
  #L417d92.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.parallel:()Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41adb4.  call temp:= `from`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L41adba.  v0:= temp @kind object;
  #L41adbc.  return v0 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.parallel:(I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41add0.  v0:= "parallelism" @kind object;
  #L41add4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41adda.  call temp:= `from`(v1, v2) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L41ade0.  v2:= temp @kind object;
  #L41ade2.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `parallel`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lio/reactivex/Flowable;.parallel:(II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41adf4.  v0:= "parallelism" @kind object;
  #L41adf8.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41adfe.  v0:= "prefetch" @kind object;
  #L41ae02.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41ae08.  call temp:= `from`(v1, v2, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L41ae0e.  v2:= temp @kind object;
  #L41ae10.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L417da4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L417daa.  v0:= temp;
  #L417dac.  call temp:= `publish`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L417db2.  v2:= temp @kind object;
  #L417db4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `publish`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.publish:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417dc8.  v0:= "selector is null" @kind object;
  #L417dcc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L417dd2.  v0:= "prefetch" @kind object;
  #L417dd6.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L417ddc.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast`;
  #L417de0.  v1:= 0I;
  #L417de2.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L417de8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417dee.  v3:= temp @kind object;
  #L417df0.  return v3 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ac0c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41ac12.  v0:= temp;
  #L41ac14.  call temp:= `publish`(v1, v0) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L41ac1a.  v0:= temp @kind object;
  #L41ac1c.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `publish`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.publish:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ac30.  v0:= "bufferSize" @kind object;
  #L41ac34.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41ac3a.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ac40.  v2:= temp @kind object;
  #L41ac42.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `rebatchRequests`(`io.reactivex.Flowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/Flowable;.rebatchRequests:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417f5c.  v0:= `@@io.reactivex.internal.schedulers.ImmediateThinScheduler.INSTANCE` @type ^`io.reactivex.Scheduler` @kind object;
  #L417f60.  v1:= 1I;
  #L417f62.  call temp:= `observeOn`(v2, v0, v1, v3) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L417f68.  v3:= temp @kind object;
  #L417f6a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `reduce`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a334.  v0:= "reducer is null" @kind object;
  #L41a338.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a33e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceMaybe`;
  #L41a342.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41a348.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41a34e.  v2:= temp @kind object;
  #L41a350.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduce`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduce:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a644.  v0:= "seed is null" @kind object;
  #L41a648.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a64e.  v0:= "reducer is null" @kind object;
  #L41a652.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a658.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle`;
  #L41a65c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41a662.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a668.  v2:= temp @kind object;
  #L41a66a.  return v2 @kind object;
}
procedure `io.reactivex.Single` `reduceWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.reduceWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a67c.  v0:= "seedSupplier is null" @kind object;
  #L41a680.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a686.  v0:= "reducer is null" @kind object;
  #L41a68a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a690.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReduceWithSingle`;
  #L41a694.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceWithSingle;.<init>:(Lorg/reactivestreams/Publisher;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41a69a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a6a0.  v2:= temp @kind object;
  #L41a6a2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L417f7c.  v0:= 9223372036854775807L;
  #L417f86.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L417f8c.  v0:= temp @kind object;
  #L417f8e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L417fa0.  v0:= 0L;
  #L417fa4.  v2:= lcmp(v4, v0);
  #L417fa8.  if v2 < 0 then goto L417fce;
  #L417fac.  if v2 != 0 then goto L417fba;
  #L417fb0.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L417fb6.  v4:= temp @kind object;
  #L417fb8.  return v4 @kind object;
  #L417fba.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeat`;
  #L417fbe.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L417fc4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L417fca.  v4:= temp @kind object;
  #L417fcc.  return v4 @kind object;
  #L417fce.  v0:= new `java.lang.IllegalArgumentException`;
  #L417fd2.  v1:= new `java.lang.StringBuilder`;
  #L417fd6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L417fdc.  v2:= "times >= 0 required but it was " @kind object;
  #L417fe0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L417fe6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L417fec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L417ff2.  v4:= temp @kind object;
  #L417ff4.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L417ffa.  throw v0;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41800c.  v0:= "stop is null" @kind object;
  #L418010.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418016.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatUntil`;
  #L41801a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BooleanSupplier;)V` @kind direct;
  #L418020.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418026.  v2:= temp @kind object;
  #L418028.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41803c.  v0:= "handler is null" @kind object;
  #L418040.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418046.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRepeatWhen`;
  #L41804a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L418050.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418056.  v2:= temp @kind object;
  #L418058.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41806c.  v0:= "selector is null" @kind object;
  #L418070.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418076.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L41807c.  v0:= temp @kind object;
  #L41807e.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L418084.  v2:= temp @kind object;
  #L418086.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418098.  v0:= "selector is null" @kind object;
  #L41809c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4180a2.  v0:= "bufferSize" @kind object;
  #L4180a6.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4180ac.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L4180b2.  v3:= temp @kind object;
  #L4180b4.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L4180ba.  v2:= temp @kind object;
  #L4180bc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418118.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41811e.  v6:= temp @kind object;
  #L418120.  v0:= v7 @kind object;
  #L418122.  v1:= v8 @kind object;
  #L418124.  v2:= v9;
  #L418126.  v3:= v10 @kind wide;
  #L418128.  v5:= v12 @kind object;
  #L41812a.  call temp:= `replay`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L418130.  v8:= temp @kind object;
  #L418132.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `int` v8 , `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L418144.  v0:= "selector is null" @kind object;
  #L418148.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41814e.  v0:= "unit is null" @kind object;
  #L418152.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418158.  v0:= "bufferSize" @kind object;
  #L41815c.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L418162.  v0:= "scheduler is null" @kind object;
  #L418166.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41816c.  v0:= v6 @kind object;
  #L41816e.  v1:= v8;
  #L418170.  v2:= v9 @kind wide;
  #L418172.  v4:= v11 @kind object;
  #L418174.  v5:= v12 @kind object;
  #L418176.  call temp:= `replayCallable`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L41817c.  v8:= temp @kind object;
  #L41817e.  call temp:= `multicastSelector`(v8, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L418184.  v7:= temp @kind object;
  #L418186.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;ILio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4180d0.  v0:= "selector is null" @kind object;
  #L4180d4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4180da.  v0:= "scheduler is null" @kind object;
  #L4180de.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4180e4.  v0:= "bufferSize" @kind object;
  #L4180e8.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4180ee.  call temp:= `replayCallable`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;I)Ljava/util/concurrent/Callable;` @kind static;
  #L4180f4.  v3:= temp @kind object;
  #L4180f6.  call temp:= `replayFunction`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L4180fc.  v2:= temp @kind object;
  #L4180fe.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L418104.  v2:= temp @kind object;
  #L418106.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `io.reactivex.functions.Function` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4181d8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4181de.  v5:= temp @kind object;
  #L4181e0.  v0:= v6 @kind object;
  #L4181e2.  v1:= v7 @kind object;
  #L4181e4.  v2:= v8 @kind wide;
  #L4181e6.  v4:= v10 @kind object;
  #L4181e8.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4181ee.  v7:= temp @kind object;
  #L4181f0.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418204.  v0:= "selector is null" @kind object;
  #L418208.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41820e.  v0:= "unit is null" @kind object;
  #L418212.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418218.  v0:= "scheduler is null" @kind object;
  #L41821c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418222.  call temp:= `replayCallable`(v1, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Ljava/util/concurrent/Callable;` @kind static;
  #L418228.  v3:= temp @kind object;
  #L41822a.  call temp:= `multicastSelector`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L418230.  v2:= temp @kind object;
  #L418232.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418198.  v0:= "selector is null" @kind object;
  #L41819c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4181a2.  v0:= "scheduler is null" @kind object;
  #L4181a6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4181ac.  call temp:= `replayCallable`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayCallable:(Lio/reactivex/Flowable;)Ljava/util/concurrent/Callable;` @kind static;
  #L4181b2.  v0:= temp @kind object;
  #L4181b4.  call temp:= `replayFunction`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableInternalHelper;.replayFunction:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L4181ba.  v2:= temp @kind object;
  #L4181bc.  call temp:= `multicastSelector`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind static;
  #L4181c2.  v2:= temp @kind object;
  #L4181c4.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ac54.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ac5a.  v0:= temp @kind object;
  #L41ac5c.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ac70.  v0:= "bufferSize" @kind object;
  #L41ac74.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41ac7a.  call temp:= `create`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ac80.  v2:= temp @kind object;
  #L41ac82.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41acc0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41acc6.  v5:= temp @kind object;
  #L41acc8.  v0:= v6 @kind object;
  #L41acca.  v1:= v7;
  #L41accc.  v2:= v8 @kind wide;
  #L41acce.  v4:= v10 @kind object;
  #L41acd0.  call temp:= `replay`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L41acd6.  v7:= temp @kind object;
  #L41acd8.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.replay:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41acec.  v0:= "bufferSize" @kind object;
  #L41acf0.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41acf6.  v1:= "unit is null" @kind object;
  #L41acfa.  call temp:= `requireNonNull`(v10, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ad00.  v1:= "scheduler is null" @kind object;
  #L41ad04.  call temp:= `requireNonNull`(v11, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ad0a.  call temp:= `verifyPositive`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41ad10.  v0:= v6 @kind object;
  #L41ad12.  v1:= v8 @kind wide;
  #L41ad14.  v3:= v10 @kind object;
  #L41ad16.  v4:= v11 @kind object;
  #L41ad18.  v5:= v7;
  #L41ad1a.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ad20.  v7:= temp @kind object;
  #L41ad22.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `int` v2 , `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.replay:(ILio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ac94.  v0:= "scheduler is null" @kind object;
  #L41ac98.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ac9e.  call temp:= `replay`(v1, v2) @signature `Lio/reactivex/Flowable;.replay:(I)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L41aca4.  v2:= temp @kind object;
  #L41aca6.  call temp:= `observeOn`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41acac.  v2:= temp @kind object;
  #L41acae.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ad60.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41ad66.  v0:= temp @kind object;
  #L41ad68.  call temp:= `replay`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L41ad6e.  v2:= temp @kind object;
  #L41ad70.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/Flowable;.replay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ad84.  v0:= "unit is null" @kind object;
  #L41ad88.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ad8e.  v0:= "scheduler is null" @kind object;
  #L41ad92.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ad98.  call temp:= `create`(v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ad9e.  v2:= temp @kind object;
  #L41ada0.  return v2 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `replay`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.replay:(Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ad34.  v0:= "scheduler is null" @kind object;
  #L41ad38.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ad3e.  call temp:= `replay`(v1) @signature `Lio/reactivex/Flowable;.replay:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L41ad44.  v0:= temp @kind object;
  #L41ad46.  call temp:= `observeOn`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L41ad4c.  v2:= temp @kind object;
  #L41ad4e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this) @signature `Lio/reactivex/Flowable;.retry:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L418244.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L41824a.  v0:= temp @kind object;
  #L41824c.  v1:= 9223372036854775807L;
  #L418256.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L41825c.  v0:= temp @kind object;
  #L41825e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.retry:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4182c4.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L4182ca.  v0:= temp @kind object;
  #L4182cc.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L4182d2.  v2:= temp @kind object;
  #L4182d4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v3 @kind this, `long` v4 , `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4182e8.  v0:= 0L;
  #L4182ec.  v2:= lcmp(v4, v0);
  #L4182f0.  if v2 < 0 then goto L418312;
  #L4182f4.  v0:= "predicate is null" @kind object;
  #L4182f8.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4182fe.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryPredicate`;
  #L418302.  call `<init>`(v0, v3, v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryPredicate;.<init>:(Lio/reactivex/Flowable;JLio/reactivex/functions/Predicate;)V` @kind direct;
  #L418308.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41830e.  v4:= temp @kind object;
  #L418310.  return v4 @kind object;
  #L418312.  v6:= new `java.lang.IllegalArgumentException`;
  #L418316.  v0:= new `java.lang.StringBuilder`;
  #L41831a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418320.  v1:= "times >= 0 required but it was " @kind object;
  #L418324.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41832a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L418330.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L418336.  v4:= temp @kind object;
  #L418338.  call `<init>`(v6, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41833e.  throw v6;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418270.  v0:= "predicate is null" @kind object;
  #L418274.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41827a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate`;
  #L41827e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L418284.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41828a.  v2:= temp @kind object;
  #L41828c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `retry`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4182a0.  v0:= 9223372036854775807L;
  #L4182aa.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L4182b0.  v3:= temp @kind object;
  #L4182b2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryUntil`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Flowable;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418350.  v0:= "stop is null" @kind object;
  #L418354.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41835a.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L418360.  v3:= temp @kind object;
  #L418362.  v0:= 9223372036854775807L;
  #L41836c.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L418372.  v3:= temp @kind object;
  #L418374.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `retryWhen`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418388.  v0:= "handler is null" @kind object;
  #L41838c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418392.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRetryWhen`;
  #L418396.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryWhen;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41839c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4183a2.  v2:= temp @kind object;
  #L4183a4.  return v2 @kind object;
}
procedure `void` `safeSubscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.safeSubscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b29c.  v0:= "s is null" @kind object;
  #L41b2a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b2a6.  v0:= instanceof @variable v2 @type ^`io.reactivex.subscribers.SafeSubscriber` @kind boolean;
  #L41b2aa.  if v0 == 0 then goto L41b2ba;
  #L41b2ae.  v2:= (`io.reactivex.subscribers.SafeSubscriber`) v2 @kind object;
  #L41b2b2.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41b2b8.  goto L41b2ca;
  #L41b2ba.  v0:= new `io.reactivex.subscribers.SafeSubscriber`;
  #L41b2be.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/SafeSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41b2c4.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41b2ca.  return @kind void;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4183b8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4183be.  v0:= temp @kind object;
  #L4183c0.  call temp:= `sample`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4183c6.  v2:= temp @kind object;
  #L4183c8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L418408.  v0:= "unit is null" @kind object;
  #L41840c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418412.  v0:= "scheduler is null" @kind object;
  #L418416.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41841c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L418420.  v7:= 0I;
  #L418422.  v1:= v0 @kind object;
  #L418424.  v2:= v8 @kind object;
  #L418426.  v3:= v9 @kind wide;
  #L418428.  v5:= v11 @kind object;
  #L41842a.  v6:= v12 @kind object;
  #L41842c.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L418432.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418438.  v9:= temp @kind object;
  #L41843a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L41844c.  v0:= "unit is null" @kind object;
  #L418450.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418456.  v0:= "scheduler is null" @kind object;
  #L41845a.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418460.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed`;
  #L418464.  v1:= v0 @kind object;
  #L418466.  v2:= v8 @kind object;
  #L418468.  v3:= v9 @kind wide;
  #L41846a.  v5:= v11 @kind object;
  #L41846c.  v6:= v12 @kind object;
  #L41846e.  v7:= v13;
  #L418470.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L418476.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41847c.  v9:= temp @kind object;
  #L41847e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4183dc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4183e2.  v4:= temp @kind object;
  #L4183e4.  v0:= v6 @kind object;
  #L4183e6.  v1:= v7 @kind wide;
  #L4183e8.  v3:= v9 @kind object;
  #L4183ea.  v5:= v10;
  #L4183ec.  call temp:= `sample`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L4183f2.  v7:= temp @kind object;
  #L4183f4.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418490.  v0:= "sampler is null" @kind object;
  #L418494.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41849a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L41849e.  v1:= 0I;
  #L4184a0.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L4184a6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4184ac.  v3:= temp @kind object;
  #L4184ae.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sample`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.sample:(Lorg/reactivestreams/Publisher;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4184c0.  v0:= "sampler is null" @kind object;
  #L4184c4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4184ca.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSamplePublisher`;
  #L4184ce.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSamplePublisher;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L4184d4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4184da.  v2:= temp @kind object;
  #L4184dc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4184f0.  v0:= "accumulator is null" @kind object;
  #L4184f4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4184fa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScan`;
  #L4184fe.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L418504.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41850a.  v2:= temp @kind object;
  #L41850c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scan`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scan:(Ljava/lang/Object;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418520.  v0:= "initialValue is null" @kind object;
  #L418524.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41852a.  call temp:= `justCallable`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justCallable:(Ljava/lang/Object;)Ljava/util/concurrent/Callable;` @kind static;
  #L418530.  v2:= temp @kind object;
  #L418532.  call temp:= `scanWith`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L418538.  v2:= temp @kind object;
  #L41853a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `scanWith`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.scanWith:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41854c.  v0:= "seedSupplier is null" @kind object;
  #L418550.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418556.  v0:= "accumulator is null" @kind object;
  #L41855a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418560.  v0:= new `io.reactivex.internal.operators.flowable.FlowableScanSeed`;
  #L418564.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41856a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418570.  v2:= temp @kind object;
  #L418572.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `serialize`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.serialize:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418584.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSerialized`;
  #L418588.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSerialized;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41858e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418594.  v0:= temp @kind object;
  #L418596.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `share`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.share:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4185a8.  call temp:= `publish`(v1) @signature `Lio/reactivex/Flowable;.publish:()Lio/reactivex/flowables/ConnectableFlowable;` @kind virtual;
  #L4185ae.  v0:= temp @kind object;
  #L4185b0.  call temp:= `refCount`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:()Lio/reactivex/Flowable;` @kind virtual;
  #L4185b6.  v0:= temp @kind object;
  #L4185b8.  return v0 @kind object;
}
procedure `io.reactivex.Single` `single`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Flowable;.single:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a774.  v0:= "defaultItem is null" @kind object;
  #L41a778.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a77e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L41a782.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L41a788.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a78e.  v2:= temp @kind object;
  #L41a790.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `singleElement`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a364.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleMaybe`;
  #L41a368.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41a36e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41a374.  v0:= temp @kind object;
  #L41a376.  return v0 @kind object;
}
procedure `io.reactivex.Single` `singleOrError`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.singleOrError:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a7a4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle`;
  #L41a7a8.  v1:= 0I;
  #L41a7aa.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @kind direct;
  #L41a7b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a7b6.  v0:= temp @kind object;
  #L41a7b8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.skip:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4185cc.  v0:= 0L;
  #L4185d0.  v2:= lcmp(v4, v0);
  #L4185d4.  if v2 > 0 then goto L4185e2;
  #L4185d8.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4185de.  v4:= temp @kind object;
  #L4185e0.  return v4 @kind object;
  #L4185e2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkip`;
  #L4185e6.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L4185ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4185f2.  v4:= temp @kind object;
  #L4185f4.  return v4 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L418608.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L41860e.  v1:= temp @kind object;
  #L418610.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L418616.  v1:= temp @kind object;
  #L418618.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skip`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.skip:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41862c.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L418632.  v1:= temp @kind object;
  #L418634.  call temp:= `skipUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L41863a.  v1:= temp @kind object;
  #L41863c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.skipLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L418650.  if v4 < 0 then goto L418676;
  #L418654.  if v4 != 0 then goto L418662;
  #L418658.  call temp:= `onAssembly`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41865e.  v4:= temp @kind object;
  #L418660.  return v4 @kind object;
  #L418662.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipLast`;
  #L418666.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L41866c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418672.  v4:= temp @kind object;
  #L418674.  return v4 @kind object;
  #L418676.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L41867a.  v1:= new `java.lang.StringBuilder`;
  #L41867e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418684.  v2:= "count >= 0 required but it was " @kind object;
  #L418688.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41868e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L418694.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41869a.  v4:= temp @kind object;
  #L41869c.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4186a2.  throw v0;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4186b4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4186ba.  v4:= temp @kind object;
  #L4186bc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4186c2.  v6:= temp;
  #L4186c4.  v5:= 0I;
  #L4186c6.  v0:= v7 @kind object;
  #L4186c8.  v1:= v8 @kind wide;
  #L4186ca.  v3:= v10 @kind object;
  #L4186cc.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L4186d2.  v8:= temp @kind object;
  #L4186d4.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41871c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418722.  v6:= temp;
  #L418724.  v5:= 0I;
  #L418726.  v0:= v7 @kind object;
  #L418728.  v1:= v8 @kind wide;
  #L41872a.  v3:= v10 @kind object;
  #L41872c.  v4:= v11 @kind object;
  #L41872e.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418734.  v8:= temp @kind object;
  #L418736.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418748.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L41874e.  v6:= temp;
  #L418750.  v0:= v7 @kind object;
  #L418752.  v1:= v8 @kind wide;
  #L418754.  v3:= v10 @kind object;
  #L418756.  v4:= v11 @kind object;
  #L418758.  v5:= v12;
  #L41875a.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418760.  v8:= temp @kind object;
  #L418762.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L418774.  v0:= "unit is null" @kind object;
  #L418778.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41877e.  v0:= "scheduler is null" @kind object;
  #L418782.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418788.  v0:= "bufferSize" @kind object;
  #L41878c.  call temp:= `verifyPositive`(v15, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L418792.  v7:= v15 ^< 1;
  #L418796.  v15:= new `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed`;
  #L41879a.  v1:= v15 @kind object;
  #L41879c.  v2:= v9 @kind object;
  #L41879e.  v3:= v10 @kind wide;
  #L4187a0.  v5:= v12 @kind object;
  #L4187a2.  v6:= v13 @kind object;
  #L4187a4.  v8:= v14;
  #L4187a6.  call `<init>`(v1, v2, v3, v5, v6, v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L4187ac.  call temp:= `onAssembly`(v15) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4187b2.  v10:= temp @kind object;
  #L4187b4.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `skipLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4186e8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4186ee.  v4:= temp @kind object;
  #L4186f0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4186f6.  v6:= temp;
  #L4186f8.  v0:= v7 @kind object;
  #L4186fa.  v1:= v8 @kind wide;
  #L4186fc.  v3:= v10 @kind object;
  #L4186fe.  v5:= v11;
  #L418700.  call temp:= `skipLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.skipLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418706.  v8:= temp @kind object;
  #L418708.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `skipUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4187c8.  v0:= "other is null" @kind object;
  #L4187cc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4187d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil`;
  #L4187d6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L4187dc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4187e2.  v2:= temp @kind object;
  #L4187e4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `skipWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.skipWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4187f8.  v0:= "predicate is null" @kind object;
  #L4187fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418802.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSkipWhile`;
  #L418806.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L41880c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418812.  v2:= temp @kind object;
  #L418814.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.sorted:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418828.  call temp:= `toList`(v2) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L41882e.  v0:= temp @kind object;
  #L418830.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L418836.  v0:= temp @kind object;
  #L418838.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L41883e.  v1:= temp @kind object;
  #L418840.  call temp:= `listSorter`(v1) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L418846.  v1:= temp @kind object;
  #L418848.  call temp:= `map`(v0, v1) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41884e.  v0:= temp @kind object;
  #L418850.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L418856.  v1:= temp @kind object;
  #L418858.  call temp:= `flatMapIterable`(v0, v1) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41885e.  v0:= temp @kind object;
  #L418860.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418874.  v0:= "sortFunction" @kind object;
  #L418878.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41887e.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L418884.  v0:= temp @kind object;
  #L418886.  call temp:= `toFlowable`(v0) @signature `Lio/reactivex/Single;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41888c.  v0:= temp @kind object;
  #L41888e.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L418894.  v2:= temp @kind object;
  #L418896.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41889c.  v2:= temp @kind object;
  #L41889e.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L4188a4.  v0:= temp @kind object;
  #L4188a6.  call temp:= `flatMapIterable`(v2, v0) @signature `Lio/reactivex/Flowable;.flatMapIterable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L4188ac.  v2:= temp @kind object;
  #L4188ae.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Iterable` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4188c0.  v0:= 2I;
  #L4188c2.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L4188c6.  call temp:= `fromIterable`(v3) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L4188cc.  v3:= temp @kind object;
  #L4188ce.  v1:= 0I;
  #L4188d0.  v0[v1]:= v3 @kind object;
  #L4188d4.  v3:= 1I;
  #L4188d6.  v0[v3]:= v2 @kind object;
  #L4188da.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4188e0.  v3:= temp @kind object;
  #L4188e2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4188f4.  v0:= "value is null" @kind object;
  #L4188f8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4188fe.  v0:= 2I;
  #L418900.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L418904.  call temp:= `just`(v3) @signature `Lio/reactivex/Flowable;.just:(Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41890a.  v3:= temp @kind object;
  #L41890c.  v1:= 0I;
  #L41890e.  v0[v1]:= v3 @kind object;
  #L418912.  v3:= 1I;
  #L418914.  v0[v3]:= v2 @kind object;
  #L418918.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41891e.  v3:= temp @kind object;
  #L418920.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWith`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Flowable;.startWith:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418934.  v0:= "other is null" @kind object;
  #L418938.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41893e.  v0:= 2I;
  #L418940.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L418944.  v1:= 0I;
  #L418946.  v0[v1]:= v3 @kind object;
  #L41894a.  v3:= 1I;
  #L41894c.  v0[v3]:= v2 @kind object;
  #L418950.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L418956.  v3:= temp @kind object;
  #L418958.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `startWithArray`(`io.reactivex.Flowable` v2 @kind this, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/Flowable;.startWithArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41896c.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L418972.  v3:= temp @kind object;
  #L418974.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41897a.  v0:= temp @kind object;
  #L41897c.  if v3 != v0 then goto L41898a;
  #L418980.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418986.  v3:= temp @kind object;
  #L418988.  return v3 @kind object;
  #L41898a.  v0:= 2I;
  #L41898c.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L418990.  v1:= 0I;
  #L418992.  v0[v1]:= v3 @kind object;
  #L418996.  v3:= 1I;
  #L418998.  v0[v3]:= v2 @kind object;
  #L41899c.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Flowable;.concatArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4189a2.  v3:= temp @kind object;
  #L4189a4.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v4 @kind this) @signature `Lio/reactivex/Flowable;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41ab24.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41ab2a.  v0:= temp @kind object;
  #L41ab2c.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41ab30.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41ab34.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L41ab38.  call temp:= `subscribe`(v4, v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41ab3e.  v0:= temp @kind object;
  #L41ab40.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41ab54.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41ab58.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41ab5c.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L41ab60.  call temp:= `subscribe`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41ab66.  v4:= temp @kind object;
  #L41ab68.  return v4 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41ab7c.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41ab80.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L41ab84.  call temp:= `subscribe`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41ab8a.  v3:= temp @kind object;
  #L41ab8c.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aba0.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax.INSTANCE` @type ^`io.reactivex.internal.operators.flowable.FlowableInternalHelper$RequestMax` @kind object;
  #L41aba4.  call temp:= `subscribe`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41abaa.  v2:= temp @kind object;
  #L41abac.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41abc0.  v0:= "onNext is null" @kind object;
  #L41abc4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41abca.  v0:= "onError is null" @kind object;
  #L41abce.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41abd4.  v0:= "onComplete is null" @kind object;
  #L41abd8.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41abde.  v0:= "onSubscribe is null" @kind object;
  #L41abe2.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41abe8.  v0:= new `io.reactivex.internal.subscribers.LambdaSubscriber`;
  #L41abec.  call `<init>`(v0, v2, v3, v4, v5) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L41abf2.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41abf8.  return v0 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.FlowableSubscriber` v3 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41b2dc.  v0:= "s is null" @kind object;
  #L41b2e0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b2e6.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Flowable;Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L41b2ec.  v3:= temp @kind object;
  #L41b2ee.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null FlowableSubscriber. Please check the handler provided to RxJavaPlugins.setOnFlowableSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L41b2f2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b2f8.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L41b2fe.  return @kind void;
  #L41b300.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b302.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b308.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L41b30e.  v0:= new `java.lang.NullPointerException`;
  #L41b312.  v1:= "Actually not, but can't throw other exceptions due to RS" @kind object;
  #L41b316.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41b31c.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L41b322.  throw v0;
  #L41b324.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L41b326.  throw v3;
  catch `java.lang.NullPointerException` @[L41b2e6..L41b2fe] goto L41b324;
  catch `java.lang.Throwable` @[L41b2e6..L41b2fe] goto L41b300;
}
procedure `void` `subscribe`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b348.  v0:= instanceof @variable v2 @type ^`io.reactivex.FlowableSubscriber` @kind boolean;
  #L41b34c.  if v0 == 0 then goto L41b35c;
  #L41b350.  v2:= (`io.reactivex.FlowableSubscriber`) v2 @kind object;
  #L41b354.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41b35a.  goto L41b376;
  #L41b35c.  v0:= "s is null" @kind object;
  #L41b360.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b366.  v0:= new `io.reactivex.internal.subscribers.StrictSubscriber`;
  #L41b36a.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L41b370.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41b376.  return @kind void;
}
procedure `void` `subscribeActual`(`org.reactivestreams.Subscriber` v0 @kind object) @signature `Lio/reactivex/Flowable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `subscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4189b8.  v0:= "scheduler is null" @kind object;
  #L4189bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4189c2.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.operators.flowable.FlowableCreate` @kind boolean;
  #L4189c6.  v0:= v0 ^~ 1;
  #L4189ca.  call temp:= `subscribeOn`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L4189d0.  v2:= temp @kind object;
  #L4189d2.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `subscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.subscribeOn:(Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4189e4.  v0:= "scheduler is null" @kind object;
  #L4189e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4189ee.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn`;
  #L4189f2.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L4189f8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4189fe.  v2:= temp @kind object;
  #L418a00.  return v2 @kind object;
}
procedure `org.reactivestreams.Subscriber` `subscribeWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41b0f4.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L41b0fa.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `switchIfEmpty`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchIfEmpty:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418a14.  v0:= "other is null" @kind object;
  #L418a18.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418a1e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchIfEmpty`;
  #L418a22.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchIfEmpty;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L418a28.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418a2e.  v2:= temp @kind object;
  #L418a30.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418a44.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418a4a.  v0:= temp;
  #L418a4c.  call temp:= `switchMap`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L418a52.  v2:= temp @kind object;
  #L418a54.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418a68.  v0:= 0I;
  #L418a6a.  call temp:= `b`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L418a70.  v2:= temp @kind object;
  #L418a72.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `switchMapCompletable`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4146e0.  v0:= "mapper is null" @kind object;
  #L4146e4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4146ea.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable`;
  #L4146ee.  v1:= 0I;
  #L4146f0.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L4146f6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L4146fc.  v3:= temp @kind object;
  #L4146fe.  return v3 @kind object;
}
procedure `io.reactivex.Completable` `switchMapCompletableDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapCompletableDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L414710.  v0:= "mapper is null" @kind object;
  #L414714.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41471a.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable`;
  #L41471e.  v1:= 1I;
  #L414720.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L414726.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L41472c.  v3:= temp @kind object;
  #L41472e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418aec.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418af2.  v0:= temp;
  #L418af4.  call temp:= `switchMapDelayError`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L418afa.  v2:= temp @kind object;
  #L418afc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapDelayError`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.switchMapDelayError:(Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418b10.  v0:= 1I;
  #L418b12.  call temp:= `b`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.b:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/Flowable;` @kind virtual;
  #L418b18.  v2:= temp @kind object;
  #L418b1a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapMaybe`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapMaybe:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418b2c.  v0:= "mapper is null" @kind object;
  #L418b30.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418b36.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe`;
  #L418b3a.  v1:= 0I;
  #L418b3c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L418b42.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418b48.  v3:= temp @kind object;
  #L418b4a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapMaybeDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapMaybeDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418b5c.  v0:= "mapper is null" @kind object;
  #L418b60.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418b66.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe`;
  #L418b6a.  v1:= 1I;
  #L418b6c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L418b72.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418b78.  v3:= temp @kind object;
  #L418b7a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapSingle`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418b8c.  v0:= "mapper is null" @kind object;
  #L418b90.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418b96.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle`;
  #L418b9a.  v1:= 0I;
  #L418b9c.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L418ba2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418ba8.  v3:= temp @kind object;
  #L418baa.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `switchMapSingleDelayError`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.switchMapSingleDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L418bbc.  v0:= "mapper is null" @kind object;
  #L418bc0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418bc6.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle`;
  #L418bca.  v1:= 1I;
  #L418bcc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L418bd2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418bd8.  v3:= temp @kind object;
  #L418bda.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/Flowable;.take:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L418c94.  v0:= 0L;
  #L418c98.  v2:= lcmp(v4, v0);
  #L418c9c.  if v2 < 0 then goto L418cb4;
  #L418ca0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTake`;
  #L418ca4.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake;.<init>:(Lio/reactivex/Flowable;J)V` @kind direct;
  #L418caa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418cb0.  v4:= temp @kind object;
  #L418cb2.  return v4 @kind object;
  #L418cb4.  v0:= new `java.lang.IllegalArgumentException`;
  #L418cb8.  v1:= new `java.lang.StringBuilder`;
  #L418cbc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418cc2.  v2:= "count >= 0 required but it was " @kind object;
  #L418cc6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L418ccc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L418cd2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L418cd8.  v4:= temp @kind object;
  #L418cda.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418ce0.  throw v0;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L418cf4.  call temp:= `timer`(v1, v3) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind static;
  #L418cfa.  v1:= temp @kind object;
  #L418cfc.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L418d02.  v1:= temp @kind object;
  #L418d04.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `take`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.take:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L418d18.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L418d1e.  v1:= temp @kind object;
  #L418d20.  call temp:= `takeUntil`(v0, v1) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind virtual;
  #L418d26.  v1:= temp @kind object;
  #L418d28.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/Flowable;.takeLast:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L418d3c.  if v4 < 0 then goto L418d86;
  #L418d40.  if v4 != 0 then goto L418d58;
  #L418d44.  v4:= new `io.reactivex.internal.operators.flowable.FlowableIgnoreElements`;
  #L418d48.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableIgnoreElements;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L418d4e.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418d54.  v4:= temp @kind object;
  #L418d56.  return v4 @kind object;
  #L418d58.  v0:= 1I;
  #L418d5a.  if v4 != v0 then goto L418d72;
  #L418d5e.  v4:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastOne`;
  #L418d62.  call `<init>`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastOne;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L418d68.  call temp:= `onAssembly`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418d6e.  v4:= temp @kind object;
  #L418d70.  return v4 @kind object;
  #L418d72.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeLast`;
  #L418d76.  call `<init>`(v0, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast;.<init>:(Lio/reactivex/Flowable;I)V` @kind direct;
  #L418d7c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418d82.  v4:= temp @kind object;
  #L418d84.  return v4 @kind object;
  #L418d86.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L418d8a.  v1:= new `java.lang.StringBuilder`;
  #L418d8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418d94.  v2:= "count >= 0 required but it was " @kind object;
  #L418d98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L418d9e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L418da4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L418daa.  v4:= temp @kind object;
  #L418dac.  call `<init>`(v0, v4) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418db2.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L418eb4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L418eba.  v6:= temp @kind object;
  #L418ebc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418ec2.  v8:= temp;
  #L418ec4.  v7:= 0I;
  #L418ec6.  v0:= v9 @kind object;
  #L418ec8.  v1:= v10 @kind wide;
  #L418eca.  v3:= v12 @kind wide;
  #L418ecc.  v5:= v14 @kind object;
  #L418ece.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418ed4.  v10:= temp @kind object;
  #L418ed6.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object, `io.reactivex.Scheduler` v15 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L418ee8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418eee.  v8:= temp;
  #L418ef0.  v7:= 0I;
  #L418ef2.  v0:= v9 @kind object;
  #L418ef4.  v1:= v10 @kind wide;
  #L418ef6.  v3:= v12 @kind wide;
  #L418ef8.  v5:= v14 @kind object;
  #L418efa.  v6:= v15 @kind object;
  #L418efc.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418f02.  v10:= temp @kind object;
  #L418f04.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v11 @kind this, `long` v12 , `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `boolean` v18 , `int` v19 ) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L418f18.  v2:= v12 @kind wide;
  #L418f1a.  v0:= "unit is null" @kind object;
  #L418f1e.  v6:= v16 @kind object;
  #L418f22.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418f28.  v0:= "scheduler is null" @kind object;
  #L418f2c.  v7:= v17 @kind object;
  #L418f30.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418f36.  v0:= "bufferSize" @kind object;
  #L418f3a.  v8:= v19;
  #L418f3e.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L418f44.  v0:= 0L;
  #L418f48.  v4:= lcmp(v2, v0);
  #L418f4c.  if v4 < 0 then goto L418f7c;
  #L418f50.  v10:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed`;
  #L418f54.  v0:= v10 @kind object;
  #L418f56.  v1:= v11 @kind object;
  #L418f58.  v2:= v12 @kind wide;
  #L418f5a.  v4:= v14 @kind wide;
  #L418f5c.  v6:= v16 @kind object;
  #L418f60.  v7:= v17 @kind object;
  #L418f64.  v8:= v19;
  #L418f68.  v9:= v18;
  #L418f6c.  call `<init>`(v0, v1, v2, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L418f72.  call temp:= `onAssembly`(v10) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418f78.  v0:= temp @kind object;
  #L418f7a.  return v0 @kind object;
  #L418f7c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L418f80.  v1:= new `java.lang.StringBuilder`;
  #L418f84.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L418f8a.  v4:= "count >= 0 required but it was " @kind object;
  #L418f8e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L418f94.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L418f9a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L418fa0.  v1:= temp @kind object;
  #L418fa2.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L418fa8.  throw v0;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418dc4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L418dca.  v4:= temp @kind object;
  #L418dcc.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418dd2.  v6:= temp;
  #L418dd4.  v5:= 0I;
  #L418dd6.  v0:= v7 @kind object;
  #L418dd8.  v1:= v8 @kind wide;
  #L418dda.  v3:= v10 @kind object;
  #L418ddc.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418de2.  v8:= temp @kind object;
  #L418de4.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418e2c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418e32.  v6:= temp;
  #L418e34.  v5:= 0I;
  #L418e36.  v0:= v7 @kind object;
  #L418e38.  v1:= v8 @kind wide;
  #L418e3a.  v3:= v10 @kind object;
  #L418e3c.  v4:= v11 @kind object;
  #L418e3e.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418e44.  v8:= temp @kind object;
  #L418e46.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `boolean` v12 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418e58.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418e5e.  v6:= temp;
  #L418e60.  v0:= v7 @kind object;
  #L418e62.  v1:= v8 @kind wide;
  #L418e64.  v3:= v10 @kind object;
  #L418e66.  v4:= v11 @kind object;
  #L418e68.  v5:= v12;
  #L418e6a.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418e70.  v8:= temp @kind object;
  #L418e72.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `boolean` v14 , `int` v15 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L418e84.  v1:= 9223372036854775807L;
  #L418e8e.  v0:= v9 @kind object;
  #L418e90.  v3:= v10 @kind wide;
  #L418e92.  v5:= v12 @kind object;
  #L418e94.  v6:= v13 @kind object;
  #L418e96.  v7:= v14;
  #L418e98.  v8:= v15;
  #L418e9a.  call temp:= `takeLast`(v0, v1, v3, v5, v6, v7, v8) @signature `Lio/reactivex/Flowable;.takeLast:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418ea0.  v10:= temp @kind object;
  #L418ea2.  return v10 @kind object;
}
procedure `io.reactivex.Flowable` `takeLast`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `boolean` v11 ) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L418df8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L418dfe.  v4:= temp @kind object;
  #L418e00.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L418e06.  v6:= temp;
  #L418e08.  v0:= v7 @kind object;
  #L418e0a.  v1:= v8 @kind wide;
  #L418e0c.  v3:= v10 @kind object;
  #L418e0e.  v5:= v11;
  #L418e10.  call temp:= `takeLast`(v0, v1, v3, v4, v5, v6) @signature `Lio/reactivex/Flowable;.takeLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L418e16.  v8:= temp @kind object;
  #L418e18.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418fbc.  v0:= "stopPredicate is null" @kind object;
  #L418fc0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418fc6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate`;
  #L418fca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L418fd0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L418fd6.  v2:= temp @kind object;
  #L418fd8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeUntil`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L418fec.  v0:= "other is null" @kind object;
  #L418ff0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L418ff6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeUntil`;
  #L418ffa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L419000.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419006.  v2:= temp @kind object;
  #L419008.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `takeWhile`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Flowable;.takeWhile:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41901c.  v0:= "predicate is null" @kind object;
  #L419020.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419026.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTakeWhile`;
  #L41902a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L419030.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419036.  v2:= temp @kind object;
  #L419038.  return v2 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.test:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ae24.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L41ae28.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L41ae2e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41ae34.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Flowable;.test:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ae48.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L41ae4c.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L41ae52.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41ae58.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `test`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `boolean` v4 ) @signature `Lio/reactivex/Flowable;.test:(JZ)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ae6c.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L41ae70.  call `<init>`(v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L41ae76.  if v4 == 0 then goto L41ae80;
  #L41ae7a.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L41ae80.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L41ae86.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41904c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L419052.  v0:= temp @kind object;
  #L419054.  call temp:= `throttleFirst`(v1, v2, v4, v0) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L41905a.  v2:= temp @kind object;
  #L41905c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `throttleFirst`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Flowable;.throttleFirst:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L419070.  v0:= "unit is null" @kind object;
  #L419074.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41907a.  v0:= "scheduler is null" @kind object;
  #L41907e.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419084.  v0:= new `io.reactivex.internal.operators.flowable.FlowableThrottleFirstTimed`;
  #L419088.  v1:= v0 @kind object;
  #L41908a.  v2:= v7 @kind object;
  #L41908c.  v3:= v8 @kind wide;
  #L41908e.  v5:= v10 @kind object;
  #L419090.  v6:= v11 @kind object;
  #L419092.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleFirstTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L419098.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41909e.  v8:= temp @kind object;
  #L4190a0.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4190b4.  call temp:= `sample`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L4190ba.  v1:= temp @kind object;
  #L4190bc.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLast`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleLast:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4190d0.  call temp:= `sample`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.sample:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4190d6.  v1:= temp @kind object;
  #L4190d8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4190ec.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4190f2.  v4:= temp @kind object;
  #L4190f4.  v5:= 0I;
  #L4190f6.  v0:= v6 @kind object;
  #L4190f8.  v1:= v7 @kind wide;
  #L4190fa.  v3:= v9 @kind object;
  #L4190fc.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L419102.  v7:= temp @kind object;
  #L419104.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L419144.  v5:= 0I;
  #L419146.  v0:= v6 @kind object;
  #L419148.  v1:= v7 @kind wide;
  #L41914a.  v3:= v9 @kind object;
  #L41914c.  v4:= v10 @kind object;
  #L41914e.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L419154.  v7:= temp @kind object;
  #L419156.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `boolean` v13 ) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L419168.  v0:= "unit is null" @kind object;
  #L41916c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419172.  v0:= "scheduler is null" @kind object;
  #L419176.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41917c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableThrottleLatest`;
  #L419180.  v1:= v0 @kind object;
  #L419182.  v2:= v8 @kind object;
  #L419184.  v3:= v9 @kind wide;
  #L419186.  v5:= v11 @kind object;
  #L419188.  v6:= v12 @kind object;
  #L41918a.  v7:= v13;
  #L41918c.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableThrottleLatest;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @kind direct;
  #L419192.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419198.  v9:= temp @kind object;
  #L41919a.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `throttleLatest`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `boolean` v10 ) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L419118.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41911e.  v4:= temp @kind object;
  #L419120.  v0:= v6 @kind object;
  #L419122.  v1:= v7 @kind wide;
  #L419124.  v3:= v9 @kind object;
  #L419126.  v5:= v10;
  #L419128.  call temp:= `throttleLatest`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.throttleLatest:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L41912e.  v7:= temp @kind object;
  #L419130.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4191ac.  call temp:= `debounce`(v0, v1, v3) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @kind virtual;
  #L4191b2.  v1:= temp @kind object;
  #L4191b4.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `throttleWithTimeout`(`io.reactivex.Flowable` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Flowable;.throttleWithTimeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4191c8.  call temp:= `debounce`(v0, v1, v3, v4) @signature `Lio/reactivex/Flowable;.debounce:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4191ce.  v1:= temp @kind object;
  #L4191d0.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timeInterval:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4191e4.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4191e8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4191ee.  v1:= temp @kind object;
  #L4191f0.  call temp:= `timeInterval`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4191f6.  v0:= temp @kind object;
  #L4191f8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41920c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L419210.  call temp:= `timeInterval`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L419216.  v2:= temp @kind object;
  #L419218.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41922c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L419232.  v0:= temp @kind object;
  #L419234.  call temp:= `timeInterval`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L41923a.  v2:= temp @kind object;
  #L41923c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeInterval`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeInterval:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419250.  v0:= "unit is null" @kind object;
  #L419254.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41925a.  v0:= "scheduler is null" @kind object;
  #L41925e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419264.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeInterval`;
  #L419268.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeInterval;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41926e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419274.  v2:= temp @kind object;
  #L419276.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4192cc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4192d2.  v5:= temp @kind object;
  #L4192d4.  v4:= 0I;
  #L4192d6.  v0:= v6 @kind object;
  #L4192d8.  v1:= v7 @kind wide;
  #L4192da.  v3:= v9 @kind object;
  #L4192dc.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L4192e2.  v7:= temp @kind object;
  #L4192e4.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4192f8.  v4:= 0I;
  #L4192fa.  v0:= v6 @kind object;
  #L4192fc.  v1:= v7 @kind wide;
  #L4192fe.  v3:= v9 @kind object;
  #L419300.  v5:= v10 @kind object;
  #L419302.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L419308.  v7:= temp @kind object;
  #L41930a.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41931c.  v0:= "other is null" @kind object;
  #L419320.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419326.  v0:= v6 @kind object;
  #L419328.  v1:= v7 @kind wide;
  #L41932a.  v3:= v9 @kind object;
  #L41932c.  v4:= v11 @kind object;
  #L41932e.  v5:= v10 @kind object;
  #L419330.  call temp:= `c`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L419336.  v7:= temp @kind object;
  #L419338.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `org.reactivestreams.Publisher` v11 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41934c.  v0:= "other is null" @kind object;
  #L419350.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419356.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41935c.  v6:= temp @kind object;
  #L41935e.  v1:= v7 @kind object;
  #L419360.  v2:= v8 @kind wide;
  #L419362.  v4:= v10 @kind object;
  #L419364.  v5:= v11 @kind object;
  #L419366.  call temp:= `c`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Flowable;.c:(JLjava/util/concurrent/TimeUnit;Lorg/reactivestreams/Publisher;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind direct;
  #L41936c.  v8:= temp @kind object;
  #L41936e.  return v8 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419288.  v0:= 0I;
  #L41928a.  call temp:= `d`(v1, v0, v2, v0) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L419290.  v2:= temp @kind object;
  #L419292.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.Flowable` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lio/reactivex/functions/Function;Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4192a4.  v0:= "other is null" @kind object;
  #L4192a8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4192ae.  v0:= 0I;
  #L4192b0.  call temp:= `d`(v1, v0, v2, v3) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L4192b6.  v2:= temp @kind object;
  #L4192b8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419380.  v0:= "firstTimeoutIndicator is null" @kind object;
  #L419384.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41938a.  v0:= 0I;
  #L41938c.  call temp:= `d`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L419392.  v2:= temp @kind object;
  #L419394.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timeout`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/Flowable;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4193a8.  v0:= "firstTimeoutSelector is null" @kind object;
  #L4193ac.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4193b2.  v0:= "other is null" @kind object;
  #L4193b6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4193bc.  call temp:= `d`(v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.d:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind direct;
  #L4193c2.  v2:= temp @kind object;
  #L4193c4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v2 @kind this) @signature `Lio/reactivex/Flowable;.timestamp:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4194b4.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4194b8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4194be.  v1:= temp @kind object;
  #L4194c0.  call temp:= `timestamp`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4194c6.  v0:= temp @kind object;
  #L4194c8.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4194dc.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4194e0.  call temp:= `timestamp`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L4194e6.  v2:= temp @kind object;
  #L4194e8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4194fc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L419502.  v0:= temp @kind object;
  #L419504.  call temp:= `timestamp`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L41950a.  v2:= temp @kind object;
  #L41950c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `timestamp`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.TimeUnit` v2 @kind object, `io.reactivex.Scheduler` v3 @kind object) @signature `Lio/reactivex/Flowable;.timestamp:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419520.  v0:= "unit is null" @kind object;
  #L419524.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41952a.  v0:= "scheduler is null" @kind object;
  #L41952e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419534.  call temp:= `timestampWith`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.timestampWith:(Ljava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/functions/Function;` @kind static;
  #L41953a.  v2:= temp @kind object;
  #L41953c.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Flowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L419542.  v2:= temp @kind object;
  #L419544.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b084.  v0:= "converter is null" @kind object;
  #L41b088.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b08e.  v2:= temp @kind object;
  #L41b090.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L41b094.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41b09a.  v2:= temp @kind object;
  #L41b09c.  return v2 @kind object;
  #L41b09e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41b0a0.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41b0a6.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41b0ac.  v2:= temp @kind object;
  #L41b0ae.  throw v2;
  catch `java.lang.Throwable` @[L41b084..L41b09c] goto L41b09e;
}
procedure `java.util.concurrent.Future` `toFuture`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b0cc.  v0:= new `io.reactivex.internal.subscribers.FutureSubscriber`;
  #L41b0d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/FutureSubscriber;.<init>:()V` @kind direct;
  #L41b0d6.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribeWith:(Lorg/reactivestreams/Subscriber;)Lorg/reactivestreams/Subscriber;` @kind virtual;
  #L41b0dc.  v0:= temp @kind object;
  #L41b0de.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L41b0e2.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a7cc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L41a7d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L41a7d6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a7dc.  v0:= temp @kind object;
  #L41a7de.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a7f0.  v0:= "capacityHint" @kind object;
  #L41a7f4.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41a7fa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L41a7fe.  call temp:= `createArrayList`(v2) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L41a804.  v2:= temp @kind object;
  #L41a806.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41a80c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a812.  v2:= temp @kind object;
  #L41a814.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toList`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.toList:(Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a828.  v0:= "collectionSupplier is null" @kind object;
  #L41a82c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a832.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle`;
  #L41a836.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41a83c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41a842.  v2:= temp @kind object;
  #L41a844.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a858.  v0:= "keySelector is null" @kind object;
  #L41a85c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a862.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L41a868.  v0:= temp @kind object;
  #L41a86a.  call temp:= `toMapKeySelector`(v2) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeySelector:(Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L41a870.  v2:= temp @kind object;
  #L41a872.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L41a878.  v2:= temp @kind object;
  #L41a87a.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a88c.  v0:= "keySelector is null" @kind object;
  #L41a890.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a896.  v0:= "valueSelector is null" @kind object;
  #L41a89a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a8a0.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L41a8a6.  v0:= temp @kind object;
  #L41a8a8.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L41a8ae.  v2:= temp @kind object;
  #L41a8b0.  call temp:= `collect`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L41a8b6.  v2:= temp @kind object;
  #L41a8b8.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a8cc.  v0:= "keySelector is null" @kind object;
  #L41a8d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a8d6.  v0:= "valueSelector is null" @kind object;
  #L41a8da.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a8e0.  call temp:= `toMapKeyValueSelector`(v2, v3) @signature `Lio/reactivex/internal/functions/Functions;.toMapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L41a8e6.  v2:= temp @kind object;
  #L41a8e8.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L41a8ee.  v2:= temp @kind object;
  #L41a8f0.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41a904.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41a90a.  v0:= temp @kind object;
  #L41a90c.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L41a912.  v1:= temp @kind object;
  #L41a914.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L41a91a.  v2:= temp @kind object;
  #L41a91c.  call temp:= `toMultimap`(v3, v4, v0, v1, v2) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L41a922.  v4:= temp @kind object;
  #L41a924.  return v4 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41a938.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/HashMapSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L41a93e.  v0:= temp @kind object;
  #L41a940.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L41a946.  v1:= temp @kind object;
  #L41a948.  call temp:= `toMultimap`(v2, v3, v4, v0, v1) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L41a94e.  v3:= temp @kind object;
  #L41a950.  return v3 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a964.  call temp:= `asFunction`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asFunction:()Lio/reactivex/functions/Function;` @kind static;
  #L41a96a.  v0:= temp @kind object;
  #L41a96c.  call temp:= `toMultimap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L41a972.  v2:= temp @kind object;
  #L41a974.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toMultimap`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object) @signature `Lio/reactivex/Flowable;.toMultimap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a988.  v0:= "keySelector is null" @kind object;
  #L41a98c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a992.  v0:= "valueSelector is null" @kind object;
  #L41a996.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a99c.  v0:= "mapSupplier is null" @kind object;
  #L41a9a0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a9a6.  v0:= "collectionFactory is null" @kind object;
  #L41a9aa.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a9b0.  call temp:= `toMultimapKeyValueSelector`(v2, v3, v5) @signature `Lio/reactivex/internal/functions/Functions;.toMultimapKeyValueSelector:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;)Lio/reactivex/functions/BiConsumer;` @kind static;
  #L41a9b6.  v2:= temp @kind object;
  #L41a9b8.  call temp:= `collect`(v1, v4, v2) @signature `Lio/reactivex/Flowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Single;` @kind virtual;
  #L41a9be.  v2:= temp @kind object;
  #L41a9c0.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a388.  v0:= new `io.reactivex.internal.operators.observable.ObservableFromPublisher`;
  #L41a38c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41a392.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L41a398.  v0:= temp @kind object;
  #L41a39a.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this) @signature `Lio/reactivex/Flowable;.toSortedList:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a9d4.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L41a9da.  v0:= temp @kind object;
  #L41a9dc.  call temp:= `toSortedList`(v1, v0) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @kind virtual;
  #L41a9e2.  v0:= temp @kind object;
  #L41a9e4.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/Flowable;.toSortedList:(I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a9f8.  call temp:= `naturalComparator`() @signature `Lio/reactivex/internal/functions/Functions;.naturalComparator:()Ljava/util/Comparator;` @kind static;
  #L41a9fe.  v0:= temp @kind object;
  #L41aa00.  call temp:= `toSortedList`(v1, v0, v2) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @kind virtual;
  #L41aa06.  v2:= temp @kind object;
  #L41aa08.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aa1c.  v0:= "comparator is null" @kind object;
  #L41aa20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41aa26.  call temp:= `toList`(v1) @signature `Lio/reactivex/Flowable;.toList:()Lio/reactivex/Single;` @kind virtual;
  #L41aa2c.  v0:= temp @kind object;
  #L41aa2e.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L41aa34.  v2:= temp @kind object;
  #L41aa36.  call temp:= `map`(v0, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L41aa3c.  v2:= temp @kind object;
  #L41aa3e.  return v2 @kind object;
}
procedure `io.reactivex.Single` `toSortedList`(`io.reactivex.Flowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41aa50.  v0:= "comparator is null" @kind object;
  #L41aa54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41aa5a.  call temp:= `toList`(v1, v3) @signature `Lio/reactivex/Flowable;.toList:(I)Lio/reactivex/Single;` @kind virtual;
  #L41aa60.  v3:= temp @kind object;
  #L41aa62.  call temp:= `listSorter`(v2) @signature `Lio/reactivex/internal/functions/Functions;.listSorter:(Ljava/util/Comparator;)Lio/reactivex/functions/Function;` @kind static;
  #L41aa68.  v2:= temp @kind object;
  #L41aa6a.  call temp:= `map`(v3, v2) @signature `Lio/reactivex/Single;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @kind virtual;
  #L41aa70.  v2:= temp @kind object;
  #L41aa72.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `unsubscribeOn`(`io.reactivex.Flowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Flowable;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4195a0.  v0:= "scheduler is null" @kind object;
  #L4195a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4195aa.  v0:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn`;
  #L4195ae.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4195b4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4195ba.  v2:= temp @kind object;
  #L4195bc.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/Flowable;.window:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L41968c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419692.  v5:= temp;
  #L419694.  v0:= v6 @kind object;
  #L419696.  v1:= v7 @kind wide;
  #L419698.  v3:= v7 @kind wide;
  #L41969a.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L4196a0.  v7:= temp @kind object;
  #L4196a2.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v6 @kind this, `long` v7 , `long` v9 ) @signature `Lio/reactivex/Flowable;.window:(JJ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L419830.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419836.  v5:= temp;
  #L419838.  v0:= v6 @kind object;
  #L41983a.  v1:= v7 @kind wide;
  #L41983c.  v3:= v9 @kind wide;
  #L41983e.  call temp:= `window`(v0, v1, v3, v5) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @kind virtual;
  #L419844.  v7:= temp @kind object;
  #L419846.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `int` v13 ) @signature `Lio/reactivex/Flowable;.window:(JJI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L419858.  v0:= "skip" @kind object;
  #L41985c.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L419862.  v0:= "count" @kind object;
  #L419866.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L41986c.  v0:= "bufferSize" @kind object;
  #L419870.  call temp:= `verifyPositive`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L419876.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindow`;
  #L41987a.  v1:= v0 @kind object;
  #L41987c.  v2:= v8 @kind object;
  #L41987e.  v3:= v9 @kind wide;
  #L419880.  v5:= v11 @kind wide;
  #L419882.  v7:= v13;
  #L419884.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/Flowable;JJI)V` @kind direct;
  #L41988a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419890.  v9:= temp @kind object;
  #L419892.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4198a4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4198aa.  v6:= temp @kind object;
  #L4198ac.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4198b2.  v7:= temp;
  #L4198b4.  v0:= v8 @kind object;
  #L4198b6.  v1:= v9 @kind wide;
  #L4198b8.  v3:= v11 @kind wide;
  #L4198ba.  v5:= v13 @kind object;
  #L4198bc.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4198c2.  v9:= temp @kind object;
  #L4198c4.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `long` v11 , `java.util.concurrent.TimeUnit` v13 @kind object, `io.reactivex.Scheduler` v14 @kind object) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4198d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4198de.  v7:= temp;
  #L4198e0.  v0:= v8 @kind object;
  #L4198e2.  v1:= v9 @kind wide;
  #L4198e4.  v3:= v11 @kind wide;
  #L4198e6.  v5:= v13 @kind object;
  #L4198e8.  v6:= v14 @kind object;
  #L4198ea.  call temp:= `window`(v0, v1, v3, v5, v6, v7) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4198f0.  v9:= temp @kind object;
  #L4198f2.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `long` v16 , `java.util.concurrent.TimeUnit` v18 @kind object, `io.reactivex.Scheduler` v19 @kind object, `int` v20 ) @signature `Lio/reactivex/Flowable;.window:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L419904.  v0:= "bufferSize" @kind object;
  #L419908.  v11:= v20;
  #L41990c.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L419912.  v0:= "timespan" @kind object;
  #L419916.  v3:= v14 @kind wide;
  #L419918.  call temp:= `verifyPositive`(v14, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L41991e.  v0:= "timeskip" @kind object;
  #L419922.  v5:= v16 @kind wide;
  #L419926.  call temp:= `verifyPositive`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L41992c.  v0:= "scheduler is null" @kind object;
  #L419930.  v8:= v19 @kind object;
  #L419934.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41993a.  v0:= "unit is null" @kind object;
  #L41993e.  v7:= v18 @kind object;
  #L419942.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419948.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L41994c.  v9:= 9223372036854775807L;
  #L419956.  v12:= 0I;
  #L419958.  v1:= v0 @kind object;
  #L41995a.  v2:= v13 @kind object;
  #L41995c.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L419962.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419968.  v0:= temp @kind object;
  #L41996a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4196b4.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4196ba.  v4:= temp @kind object;
  #L4196bc.  v5:= 9223372036854775807L;
  #L4196c6.  v7:= 0I;
  #L4196c8.  v0:= v8 @kind object;
  #L4196ca.  v1:= v9 @kind wide;
  #L4196cc.  v3:= v11 @kind object;
  #L4196ce.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L4196d4.  v9:= temp @kind object;
  #L4196d6.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4197d8.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L4197de.  v4:= temp @kind object;
  #L4197e0.  v7:= 0I;
  #L4197e2.  v0:= v8 @kind object;
  #L4197e4.  v1:= v9 @kind wide;
  #L4197e6.  v3:= v11 @kind object;
  #L4197e8.  v5:= v12 @kind wide;
  #L4197ea.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L4197f0.  v9:= temp @kind object;
  #L4197f2.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `long` v12 , `boolean` v14 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L419804.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41980a.  v4:= temp @kind object;
  #L41980c.  v0:= v8 @kind object;
  #L41980e.  v1:= v9 @kind wide;
  #L419810.  v3:= v11 @kind object;
  #L419812.  v5:= v12 @kind wide;
  #L419814.  v7:= v14;
  #L419816.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L41981c.  v9:= temp @kind object;
  #L41981e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4196e8.  v5:= 9223372036854775807L;
  #L4196f2.  v7:= 0I;
  #L4196f4.  v0:= v8 @kind object;
  #L4196f6.  v1:= v9 @kind wide;
  #L4196f8.  v3:= v11 @kind object;
  #L4196fa.  v4:= v12 @kind object;
  #L4196fc.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L419702.  v9:= temp @kind object;
  #L419704.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v8 @kind this, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `io.reactivex.Scheduler` v12 @kind object, `long` v13 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L419718.  v7:= 0I;
  #L41971a.  v0:= v8 @kind object;
  #L41971c.  v1:= v9 @kind wide;
  #L41971e.  v3:= v11 @kind object;
  #L419720.  v4:= v12 @kind object;
  #L419722.  v5:= v13 @kind wide;
  #L419724.  call temp:= `window`(v0, v1, v3, v4, v5, v7) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @kind virtual;
  #L41972a.  v9:= temp @kind object;
  #L41972c.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v9 @kind this, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object, `long` v14 , `boolean` v16 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZ)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L419740.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419746.  v8:= temp;
  #L419748.  v0:= v9 @kind object;
  #L41974a.  v1:= v10 @kind wide;
  #L41974c.  v3:= v12 @kind object;
  #L41974e.  v4:= v13 @kind object;
  #L419750.  v5:= v14 @kind wide;
  #L419752.  v7:= v16;
  #L419756.  call temp:= `window`(v0, v1, v3, v4, v5, v7, v8) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @kind virtual;
  #L41975c.  v0:= temp @kind object;
  #L41975e.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v13 @kind this, `long` v14 , `java.util.concurrent.TimeUnit` v16 @kind object, `io.reactivex.Scheduler` v17 @kind object, `long` v18 , `boolean` v20 , `int` v21 ) @signature `Lio/reactivex/Flowable;.window:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L419770.  v0:= "bufferSize" @kind object;
  #L419774.  v11:= v21;
  #L419778.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41977e.  v0:= "scheduler is null" @kind object;
  #L419782.  v8:= v17 @kind object;
  #L419786.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41978c.  v0:= "unit is null" @kind object;
  #L419790.  v7:= v16 @kind object;
  #L419794.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41979a.  v0:= "count" @kind object;
  #L41979e.  v9:= v18 @kind wide;
  #L4197a2.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L4197a8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed`;
  #L4197ac.  v1:= v0 @kind object;
  #L4197ae.  v2:= v13 @kind object;
  #L4197b0.  v3:= v14 @kind wide;
  #L4197b2.  v5:= v14 @kind wide;
  #L4197b4.  v12:= v20;
  #L4197b8.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v11, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @kind direct;
  #L4197be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4197c4.  v0:= temp @kind object;
  #L4197c6.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419630.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419636.  v0:= temp;
  #L419638.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @kind virtual;
  #L41963e.  v2:= temp @kind object;
  #L419640.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Ljava/util/concurrent/Callable;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419654.  v0:= "boundaryIndicatorSupplier is null" @kind object;
  #L419658.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41965e.  v0:= "bufferSize" @kind object;
  #L419662.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L419668.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier`;
  #L41966c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;I)V` @kind direct;
  #L419672.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419678.  v2:= temp @kind object;
  #L41967a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41997c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L419982.  v0:= temp;
  #L419984.  call temp:= `window`(v1, v2, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind virtual;
  #L41998a.  v2:= temp @kind object;
  #L41998c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4199a0.  v0:= "boundaryIndicator is null" @kind object;
  #L4199a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4199aa.  v0:= "bufferSize" @kind object;
  #L4199ae.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4199b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary`;
  #L4199b8.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;I)V` @kind direct;
  #L4199be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L4199c4.  v2:= temp @kind object;
  #L4199c6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4199d8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4199de.  v0:= temp;
  #L4199e0.  call temp:= `window`(v1, v2, v3, v0) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @kind virtual;
  #L4199e6.  v2:= temp @kind object;
  #L4199e8.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `window`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Flowable;.window:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4199fc.  v0:= "openingIndicator is null" @kind object;
  #L419a00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a06.  v0:= "closingIndicator is null" @kind object;
  #L419a0a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a10.  v0:= "bufferSize" @kind object;
  #L419a14.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L419a1a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector`;
  #L419a1e.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector;.<init>:(Lio/reactivex/Flowable;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L419a24.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419a2a.  v2:= temp @kind object;
  #L419a2c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419a40.  v0:= "others is null" @kind object;
  #L419a44.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a4a.  v0:= "combiner is null" @kind object;
  #L419a4e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a54.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L419a58.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L419a5e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419a64.  v2:= temp @kind object;
  #L419a66.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419a78.  v0:= "other is null" @kind object;
  #L419a7c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a82.  v0:= "combiner is null" @kind object;
  #L419a86.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419a8c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom`;
  #L419a90.  call `<init>`(v0, v1, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/BiFunction;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L419a96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419a9c.  v2:= temp @kind object;
  #L419a9e.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function3;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L419ab0.  v0:= "source1 is null" @kind object;
  #L419ab4.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419aba.  v0:= "source2 is null" @kind object;
  #L419abe.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419ac4.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L419aca.  v5:= temp @kind object;
  #L419acc.  v0:= 2I;
  #L419ace.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L419ad2.  v1:= 0I;
  #L419ad4.  v0[v1]:= v3 @kind object;
  #L419ad8.  v3:= 1I;
  #L419ada.  v0[v3]:= v4 @kind object;
  #L419ade.  call temp:= `withLatestFrom`(v2, v0, v5) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L419ae4.  v3:= temp @kind object;
  #L419ae6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function4;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L419af8.  v0:= "source1 is null" @kind object;
  #L419afc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b02.  v0:= "source2 is null" @kind object;
  #L419b06.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b0c.  v0:= "source3 is null" @kind object;
  #L419b10.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b16.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L419b1c.  v6:= temp @kind object;
  #L419b1e.  v0:= 3I;
  #L419b20.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L419b24.  v1:= 0I;
  #L419b26.  v0[v1]:= v3 @kind object;
  #L419b2a.  v3:= 1I;
  #L419b2c.  v0[v3]:= v4 @kind object;
  #L419b30.  v3:= 2I;
  #L419b32.  v0[v3]:= v5 @kind object;
  #L419b36.  call temp:= `withLatestFrom`(v2, v0, v6) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L419b3c.  v3:= temp @kind object;
  #L419b3e.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object, `org.reactivestreams.Publisher` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function5;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L419b50.  v0:= "source1 is null" @kind object;
  #L419b54.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b5a.  v0:= "source2 is null" @kind object;
  #L419b5e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b64.  v0:= "source3 is null" @kind object;
  #L419b68.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b6e.  v0:= "source4 is null" @kind object;
  #L419b72.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419b78.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L419b7e.  v7:= temp @kind object;
  #L419b80.  v0:= 4I;
  #L419b82.  v0:= new `org.reactivestreams.Publisher`[v0];
  #L419b86.  v1:= 0I;
  #L419b88.  v0[v1]:= v3 @kind object;
  #L419b8c.  v3:= 1I;
  #L419b8e.  v0[v3]:= v4 @kind object;
  #L419b92.  v3:= 2I;
  #L419b94.  v0[v3]:= v5 @kind object;
  #L419b98.  v3:= 3I;
  #L419b9a.  v0[v3]:= v6 @kind object;
  #L419b9e.  call temp:= `withLatestFrom`(v2, v0, v7) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L419ba4.  v3:= temp @kind object;
  #L419ba6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `withLatestFrom`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Flowable;.withLatestFrom:([Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L419bb8.  v0:= "others is null" @kind object;
  #L419bbc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419bc2.  v0:= "combiner is null" @kind object;
  #L419bc6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L419bcc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany`;
  #L419bd0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany;.<init>:(Lio/reactivex/Flowable;[Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;)V` @kind direct;
  #L419bd6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L419bdc.  v2:= temp @kind object;
  #L419bde.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `java.lang.Iterable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a1fc.  v0:= "other is null" @kind object;
  #L41a200.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a206.  v0:= "zipper is null" @kind object;
  #L41a20a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a210.  v0:= new `io.reactivex.internal.operators.flowable.FlowableZipIterable`;
  #L41a214.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Iterable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41a21a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41a220.  v2:= temp @kind object;
  #L41a222.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41a234.  v0:= "other is null" @kind object;
  #L41a238.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41a23e.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind static;
  #L41a244.  v2:= temp @kind object;
  #L41a246.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41a258.  call temp:= `zip`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;Z)Lio/reactivex/Flowable;` @kind static;
  #L41a25e.  v1:= temp @kind object;
  #L41a260.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `zipWith`(`io.reactivex.Flowable` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/Flowable;.zipWith:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41a274.  call temp:= `zip`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/Flowable;.zip:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiFunction;ZI)Lio/reactivex/Flowable;` @kind static;
  #L41a27a.  v1:= temp @kind object;
  #L41a27c.  return v1 @kind object;
}
