record `io.reactivex.Scheduler$Worker$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface, `io.reactivex.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.Scheduler$Worker$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.Scheduler$Worker$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.Scheduler$Worker$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.Scheduler$Worker$a.d` @AccessFlag ;
  `long` `io.reactivex.Scheduler$Worker$a.e` @AccessFlag ;
  `long` `io.reactivex.Scheduler$Worker$a.f` @AccessFlag ;
  `io.reactivex.Scheduler$Worker` `io.reactivex.Scheduler$Worker$a.g` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.Scheduler$Worker$a` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object, `long` v2 , `java.lang.Runnable` v4 @kind object, `long` v5 , `io.reactivex.internal.disposables.SequentialDisposable` v7 @kind object, `long` v8 ) @signature `Lio/reactivex/Scheduler$Worker$a;.<init>:(Lio/reactivex/Scheduler$Worker;JLjava/lang/Runnable;JLio/reactivex/internal/disposables/SequentialDisposable;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L424524.  v0.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L424528.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42452e.  v0.`io.reactivex.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` := v4 @kind object;
  #L424532.  v0.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v7 @kind object;
  #L424536.  v0.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` := v8 @kind wide;
  #L42453a.  v0.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` := v5 @kind wide;
  #L42453e.  v0.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L424542.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.Scheduler$Worker$a` v1 @kind this) @signature `Lio/reactivex/Scheduler$Worker$a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42450c.  v0:= v1.`io.reactivex.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L424510.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.Scheduler$Worker$a` v11 @kind this) @signature `Lio/reactivex/Scheduler$Worker$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L424554.  v0:= v11.`io.reactivex.Scheduler$Worker$a.a` @type ^`java.lang.Runnable` @kind object;
  #L424558.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L42455e.  v0:= v11.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L424562.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L424568.  v0:= temp;
  #L42456a.  if v0 != 0 then goto L4245fe;
  #L42456e.  v0:= v11.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L424572.  v1:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L424576.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L42457c.  v0:= temp @kind wide;
  #L42457e.  v2:= `@@io.reactivex.Scheduler.b` @type ^`long` @kind wide;
  #L424582.  v4:= v0 + v2 @kind long;
  #L424586.  v6:= v11.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` @kind wide;
  #L42458a.  v8:= 1L;
  #L42458e.  v10:= lcmp(v4, v6);
  #L424592.  if v10 < 0 then goto L4245be;
  #L424596.  v4:= v11.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L42459a.  v6:= v6 + v4 @kind long;
  #L42459c.  v6:= v6 + v2 @kind long;
  #L42459e.  v2:= lcmp(v0, v6);
  #L4245a2.  if v2 < 0 then goto L4245a8;
  #L4245a6.  goto L4245be;
  #L4245a8.  v2:= v11.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` @kind wide;
  #L4245ac.  v6:= v11.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L4245b0.  v6:= v6 + v8 @kind long;
  #L4245b2.  v11.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` := v6 @kind wide;
  #L4245b6.  v6:= v6 * v4 @kind long;
  #L4245ba.  v2:= v2 + v6 @kind long;
  #L4245bc.  goto L4245de;
  #L4245be.  v2:= v11.`io.reactivex.Scheduler$Worker$a.c` @type ^`long` @kind wide;
  #L4245c2.  v4:= v0 + v2 @kind long;
  #L4245c6.  v6:= v11.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` @kind wide;
  #L4245ca.  v6:= v6 + v8 @kind long;
  #L4245cc.  v11.`io.reactivex.Scheduler$Worker$a.d` @type ^`long` := v6 @kind wide;
  #L4245d0.  v2:= v2 * v6 @kind long;
  #L4245d4.  v2:= v4 - v2 @kind long;
  #L4245d8.  v11.`io.reactivex.Scheduler$Worker$a.f` @type ^`long` := v2 @kind wide;
  #L4245dc.  v2:= v4 @kind wide;
  #L4245de.  v11.`io.reactivex.Scheduler$Worker$a.e` @type ^`long` := v0 @kind wide;
  #L4245e2.  v2:= v2 - v0 @kind long;
  #L4245e4.  v0:= v11.`io.reactivex.Scheduler$Worker$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4245e8.  v1:= v11.`io.reactivex.Scheduler$Worker$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4245ec.  v4:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4245f0.  call temp:= `schedule`(v1, v11, v2, v4) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4245f6.  v1:= temp @kind object;
  #L4245f8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4245fe.  return @kind void;
}
