record `io.reactivex.parallel.ParallelFlowable` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`io.reactivex.parallel.ParallelFlowable` v0 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48f2a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48f2a6.  return @kind void;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48f020.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L48f026.  v0:= temp @kind object;
  #L48f028.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L48f02e.  v0:= temp;
  #L48f030.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48f036.  v1:= temp;
  #L48f038.  call temp:= `from`(v2, v0, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f03e.  v2:= temp @kind object;
  #L48f040.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f054.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48f05a.  v0:= temp;
  #L48f05c.  call temp:= `from`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f062.  v1:= temp @kind object;
  #L48f064.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `from`(`org.reactivestreams.Publisher` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.from:(Lorg/reactivestreams/Publisher;II)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f078.  v0:= "source" @kind object;
  #L48f07c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f082.  v0:= "parallelism" @kind object;
  #L48f086.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48f08c.  v0:= "prefetch" @kind object;
  #L48f090.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48f096.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher`;
  #L48f09a.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;II)V` @kind direct;
  #L48f0a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f0a6.  v1:= temp @kind object;
  #L48f0a8.  return v1 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `fromArray`(`org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.fromArray:([Lorg/reactivestreams/Publisher;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48f0bc.  v0:= length @variable v1;
  #L48f0be.  if v0 == 0 then goto L48f0d6;
  #L48f0c2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFromArray`;
  #L48f0c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L48f0cc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f0d2.  v1:= temp @kind object;
  #L48f0d4.  return v1 @kind object;
  #L48f0d6.  v1:= new `java.lang.IllegalArgumentException`;
  #L48f0da.  v0:= "Zero publishers not supported" @kind object;
  #L48f0de.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48f0e4.  throw v1;
}
procedure `java.lang.Object` `as`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.parallel.ParallelFlowableConverter` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.as:(Lio/reactivex/parallel/ParallelFlowableConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f22c.  v0:= "converter is null" @kind object;
  #L48f230.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f236.  v2:= temp @kind object;
  #L48f238.  v2:= (`io.reactivex.parallel.ParallelFlowableConverter`) v2 @kind object;
  #L48f23c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/parallel/ParallelFlowableConverter;.apply:(Lio/reactivex/parallel/ParallelFlowable;)Ljava/lang/Object;` @kind interface;
  #L48f242.  v2:= temp @kind object;
  #L48f244.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `collect`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.collect:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ea30.  v0:= "collectionSupplier is null" @kind object;
  #L48ea34.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ea3a.  v0:= "collector is null" @kind object;
  #L48ea3e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ea44.  v0:= new `io.reactivex.internal.operators.parallel.ParallelCollect`;
  #L48ea48.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L48ea4e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ea54.  v2:= temp @kind object;
  #L48ea56.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `compose`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.parallel.ParallelTransformer` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.compose:(Lio/reactivex/parallel/ParallelTransformer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ea68.  v0:= "composer is null" @kind object;
  #L48ea6c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ea72.  v2:= temp @kind object;
  #L48ea74.  v2:= (`io.reactivex.parallel.ParallelTransformer`) v2 @kind object;
  #L48ea78.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/parallel/ParallelTransformer;.apply:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind interface;
  #L48ea7e.  v2:= temp @kind object;
  #L48ea80.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ea86.  v2:= temp @kind object;
  #L48ea88.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ea9c.  v0:= 2I;
  #L48ea9e.  call temp:= `concatMap`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48eaa4.  v2:= temp @kind object;
  #L48eaa6.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMap:(Lio/reactivex/functions/Function;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48eab8.  v0:= "mapper is null" @kind object;
  #L48eabc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eac2.  v0:= "prefetch" @kind object;
  #L48eac6.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48eacc.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L48ead0.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L48ead4.  call `<init>`(v0, v2, v3, v4, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L48eada.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48eae0.  v3:= temp @kind object;
  #L48eae2.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48eb10.  v0:= "mapper is null" @kind object;
  #L48eb14.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eb1a.  v0:= "prefetch" @kind object;
  #L48eb1e.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48eb24.  v0:= new `io.reactivex.internal.operators.parallel.ParallelConcatMap`;
  #L48eb28.  if v4 == 0 then goto L48eb32;
  #L48eb2c.  v4:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L48eb30.  goto L48eb36;
  #L48eb32.  v4:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L48eb36.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L48eb3c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48eb42.  v2:= temp @kind object;
  #L48eb44.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `concatMapDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48eaf4.  v0:= 2I;
  #L48eaf6.  call temp:= `concatMapDelayError`(v1, v2, v0, v3) @signature `Lio/reactivex/parallel/ParallelFlowable;.concatMapDelayError:(Lio/reactivex/functions/Function;IZ)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48eafc.  v2:= temp @kind object;
  #L48eafe.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48eb58.  v0:= "onAfterNext is null" @kind object;
  #L48eb5c.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eb62.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48eb66.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48eb6c.  v3:= temp @kind object;
  #L48eb6e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48eb74.  v5:= temp @kind object;
  #L48eb76.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48eb7a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48eb80.  v8:= temp @kind object;
  #L48eb82.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48eb86.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48eb8a.  v1:= v0 @kind object;
  #L48eb8c.  v2:= v11 @kind object;
  #L48eb8e.  v4:= v12 @kind object;
  #L48eb90.  v6:= v7 @kind object;
  #L48eb92.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48eb98.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48eb9e.  v12:= temp @kind object;
  #L48eba0.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doAfterTerminated`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doAfterTerminated:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ebb4.  v0:= "onAfterTerminate is null" @kind object;
  #L48ebb8.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ebbe.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ebc2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ebc8.  v3:= temp @kind object;
  #L48ebca.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ebd0.  v4:= temp @kind object;
  #L48ebd2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ebd8.  v5:= temp @kind object;
  #L48ebda.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ebde.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ebe4.  v8:= temp @kind object;
  #L48ebe6.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ebea.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ebee.  v1:= v0 @kind object;
  #L48ebf0.  v2:= v11 @kind object;
  #L48ebf2.  v7:= v12 @kind object;
  #L48ebf4.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ebfa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ec00.  v12:= temp @kind object;
  #L48ec02.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnCancel`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnCancel:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ec14.  v0:= "onCancel is null" @kind object;
  #L48ec18.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ec1e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ec22.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec28.  v3:= temp @kind object;
  #L48ec2a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec30.  v4:= temp @kind object;
  #L48ec32.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec38.  v5:= temp @kind object;
  #L48ec3a.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ec3e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec44.  v8:= temp @kind object;
  #L48ec46.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ec4a.  v1:= v0 @kind object;
  #L48ec4c.  v2:= v11 @kind object;
  #L48ec4e.  v6:= v7 @kind object;
  #L48ec50.  v10:= v12 @kind object;
  #L48ec52.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ec58.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ec5e.  v12:= temp @kind object;
  #L48ec60.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnComplete`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Action` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ec74.  v0:= "onComplete is null" @kind object;
  #L48ec78.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ec7e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ec82.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec88.  v3:= temp @kind object;
  #L48ec8a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec90.  v4:= temp @kind object;
  #L48ec92.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ec98.  v5:= temp @kind object;
  #L48ec9a.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ec9e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48eca4.  v8:= temp @kind object;
  #L48eca6.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ecaa.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ecae.  v1:= v0 @kind object;
  #L48ecb0.  v2:= v11 @kind object;
  #L48ecb2.  v6:= v12 @kind object;
  #L48ecb4.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ecba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ecc0.  v12:= temp @kind object;
  #L48ecc2.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnError`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ecd4.  v0:= "onError is null" @kind object;
  #L48ecd8.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ecde.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ece2.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ece8.  v3:= temp @kind object;
  #L48ecea.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ecf0.  v4:= temp @kind object;
  #L48ecf2.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ecf6.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ecfc.  v8:= temp @kind object;
  #L48ecfe.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ed02.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ed06.  v1:= v0 @kind object;
  #L48ed08.  v2:= v11 @kind object;
  #L48ed0a.  v5:= v12 @kind object;
  #L48ed0c.  v6:= v7 @kind object;
  #L48ed0e.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ed14.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ed1a.  v12:= temp @kind object;
  #L48ed1c.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ed30.  v0:= "onNext is null" @kind object;
  #L48ed34.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ed3a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ed3e.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ed44.  v4:= temp @kind object;
  #L48ed46.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ed4c.  v5:= temp @kind object;
  #L48ed4e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ed52.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ed58.  v8:= temp @kind object;
  #L48ed5a.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ed5e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ed62.  v1:= v0 @kind object;
  #L48ed64.  v2:= v11 @kind object;
  #L48ed66.  v3:= v12 @kind object;
  #L48ed68.  v6:= v7 @kind object;
  #L48ed6a.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ed70.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ed76.  v12:= temp @kind object;
  #L48ed78.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ed8c.  v0:= "onNext is null" @kind object;
  #L48ed90.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ed96.  v0:= "errorHandler is null" @kind object;
  #L48ed9a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eda0.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L48eda4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48edaa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48edb0.  v2:= temp @kind object;
  #L48edb2.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnNext`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnNext:(Lio/reactivex/functions/Consumer;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48edc4.  v0:= "onNext is null" @kind object;
  #L48edc8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48edce.  v0:= "errorHandler is null" @kind object;
  #L48edd2.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48edd8.  v0:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry`;
  #L48eddc.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48ede2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ede8.  v2:= temp @kind object;
  #L48edea.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnRequest`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.LongConsumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnRequest:(Lio/reactivex/functions/LongConsumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48edfc.  v0:= "onRequest is null" @kind object;
  #L48ee00.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ee06.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ee0a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee10.  v3:= temp @kind object;
  #L48ee12.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee18.  v4:= temp @kind object;
  #L48ee1a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee20.  v5:= temp @kind object;
  #L48ee22.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ee26.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee2c.  v8:= temp @kind object;
  #L48ee2e.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ee32.  v1:= v0 @kind object;
  #L48ee34.  v2:= v11 @kind object;
  #L48ee36.  v6:= v7 @kind object;
  #L48ee38.  v9:= v12 @kind object;
  #L48ee3a.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ee40.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ee46.  v12:= temp @kind object;
  #L48ee48.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `doOnSubscribe`(`io.reactivex.parallel.ParallelFlowable` v11 @kind this, `io.reactivex.functions.Consumer` v12 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48ee5c.  v0:= "onSubscribe is null" @kind object;
  #L48ee60.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ee66.  v0:= new `io.reactivex.internal.operators.parallel.ParallelPeek`;
  #L48ee6a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee70.  v3:= temp @kind object;
  #L48ee72.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee78.  v4:= temp @kind object;
  #L48ee7a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ee80.  v5:= temp @kind object;
  #L48ee82.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ee86.  v9:= `@@io.reactivex.internal.functions.Functions.EMPTY_LONG_CONSUMER` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L48ee8a.  v10:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L48ee8e.  v1:= v0 @kind object;
  #L48ee90.  v2:= v11 @kind object;
  #L48ee92.  v6:= v7 @kind object;
  #L48ee94.  v8:= v12 @kind object;
  #L48ee96.  call `<init>`(v1, v2, v3, v4, v5, v6, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/LongConsumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L48ee9c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48eea2.  v12:= temp @kind object;
  #L48eea4.  return v12 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48eeb8.  v0:= "predicate" @kind object;
  #L48eebc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eec2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilter`;
  #L48eec6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L48eecc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48eed2.  v2:= temp @kind object;
  #L48eed4.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48eee8.  v0:= "predicate" @kind object;
  #L48eeec.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eef2.  v0:= "errorHandler is null" @kind object;
  #L48eef6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48eefc.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L48ef00.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48ef06.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ef0c.  v2:= temp @kind object;
  #L48ef0e.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `filter`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.filter:(Lio/reactivex/functions/Predicate;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ef20.  v0:= "predicate" @kind object;
  #L48ef24.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ef2a.  v0:= "errorHandler is null" @kind object;
  #L48ef2e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48ef34.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFilterTry`;
  #L48ef38.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48ef3e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48ef44.  v2:= temp @kind object;
  #L48ef46.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v3 @kind this, `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48ef58.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48ef5e.  v0:= temp;
  #L48ef60.  v1:= 0I;
  #L48ef62.  v2:= 2147483647I;
  #L48ef68.  call temp:= `flatMap`(v3, v4, v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48ef6e.  v4:= temp @kind object;
  #L48ef70.  return v4 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48ef84.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48ef8a.  v0:= temp;
  #L48ef8c.  v1:= 2147483647I;
  #L48ef92.  call temp:= `flatMap`(v2, v3, v4, v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48ef98.  v3:= temp @kind object;
  #L48ef9a.  return v3 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48efac.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48efb2.  v0:= temp;
  #L48efb4.  call temp:= `flatMap`(v1, v2, v3, v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48efba.  v2:= temp @kind object;
  #L48efbc.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `flatMap`(`io.reactivex.parallel.ParallelFlowable` v7 @kind this, `io.reactivex.functions.Function` v8 @kind object, `boolean` v9 , `int` v10 , `int` v11 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.flatMap:(Lio/reactivex/functions/Function;ZII)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48efd0.  v0:= "mapper is null" @kind object;
  #L48efd4.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48efda.  v0:= "maxConcurrency" @kind object;
  #L48efde.  call temp:= `verifyPositive`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48efe4.  v0:= "prefetch" @kind object;
  #L48efe8.  call temp:= `verifyPositive`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48efee.  v0:= new `io.reactivex.internal.operators.parallel.ParallelFlatMap`;
  #L48eff2.  v1:= v0 @kind object;
  #L48eff4.  v2:= v7 @kind object;
  #L48eff6.  v3:= v8 @kind object;
  #L48eff8.  v4:= v9;
  #L48effa.  v5:= v10;
  #L48effc.  v6:= v11;
  #L48effe.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelFlatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L48f004.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f00a.  v8:= temp @kind object;
  #L48f00c.  return v8 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f0f8.  v0:= "mapper" @kind object;
  #L48f0fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f102.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMap`;
  #L48f106.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L48f10c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f112.  v2:= temp @kind object;
  #L48f114.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f128.  v0:= "mapper" @kind object;
  #L48f12c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f132.  v0:= "errorHandler is null" @kind object;
  #L48f136.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f13c.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L48f140.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48f146.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f14c.  v2:= temp @kind object;
  #L48f14e.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `map`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.parallel.ParallelFailureHandling` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;Lio/reactivex/parallel/ParallelFailureHandling;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f160.  v0:= "mapper" @kind object;
  #L48f164.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f16a.  v0:= "errorHandler is null" @kind object;
  #L48f16e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f174.  v0:= new `io.reactivex.internal.operators.parallel.ParallelMapTry`;
  #L48f178.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48f17e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f184.  v2:= temp @kind object;
  #L48f186.  return v2 @kind object;
}
procedure `int` `parallelism`() @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e830.  v0:= "reducer" @kind object;
  #L48e834.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48e83a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull`;
  #L48e83e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48e844.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L48e84a.  v2:= temp @kind object;
  #L48e84c.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `reduce`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f198.  v0:= "initialSupplier" @kind object;
  #L48f19c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f1a2.  v0:= "reducer" @kind object;
  #L48f1a6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f1ac.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduce`;
  #L48f1b0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduce;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L48f1b6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f1bc.  v2:= temp @kind object;
  #L48f1be.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f1d0.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48f1d6.  v0:= temp;
  #L48f1d8.  call temp:= `runOn`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48f1de.  v2:= temp @kind object;
  #L48f1e0.  return v2 @kind object;
}
procedure `io.reactivex.parallel.ParallelFlowable` `runOn`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.runOn:(Lio/reactivex/Scheduler;I)Lio/reactivex/parallel/ParallelFlowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f1f4.  v0:= "scheduler" @kind object;
  #L48f1f8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f1fe.  v0:= "prefetch" @kind object;
  #L48f202.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48f208.  v0:= new `io.reactivex.internal.operators.parallel.ParallelRunOn`;
  #L48f20c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L48f212.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/parallel/ParallelFlowable;)Lio/reactivex/parallel/ParallelFlowable;` @kind static;
  #L48f218.  v2:= temp @kind object;
  #L48f21a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e860.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48e866.  v0:= temp;
  #L48e868.  call temp:= `sequential`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L48e86e.  v0:= temp @kind object;
  #L48e870.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequential`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequential:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48e884.  v0:= "prefetch" @kind object;
  #L48e888.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48e88e.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L48e892.  v1:= 0I;
  #L48e894.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L48e89a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L48e8a0.  v3:= temp @kind object;
  #L48e8a2.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e8b4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L48e8ba.  v0:= temp;
  #L48e8bc.  call temp:= `sequentialDelayError`(v1, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L48e8c2.  v0:= temp @kind object;
  #L48e8c4.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `sequentialDelayError`(`io.reactivex.parallel.ParallelFlowable` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sequentialDelayError:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48e8d8.  v0:= "prefetch" @kind object;
  #L48e8dc.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48e8e2.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin`;
  #L48e8e6.  v1:= 1I;
  #L48e8e8.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @kind direct;
  #L48e8ee.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L48e8f4.  v3:= temp @kind object;
  #L48e8f6.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e908.  v0:= 16I;
  #L48e90c.  call temp:= `sorted`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L48e912.  v2:= temp @kind object;
  #L48e914.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `sorted`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.sorted:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e928.  v0:= "comparator is null" @kind object;
  #L48e92c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48e932.  v0:= "capacityHint" @kind object;
  #L48e936.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48e93c.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L48e942.  v0:= temp;
  #L48e944.  v3:= v3 / v0 @kind int;
  #L48e946.  v3:= v3 + 1;
  #L48e94a.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L48e950.  v3:= temp @kind object;
  #L48e952.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L48e958.  v0:= temp @kind object;
  #L48e95a.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48e960.  v3:= temp @kind object;
  #L48e962.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L48e966.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L48e96c.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48e972.  v3:= temp @kind object;
  #L48e974.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin`;
  #L48e978.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/Comparator;)V` @kind direct;
  #L48e97e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L48e984.  v2:= temp @kind object;
  #L48e986.  return v2 @kind object;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber`[] v0 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.Object` `to`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48f258.  v0:= "converter is null" @kind object;
  #L48f25c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48f262.  v2:= temp @kind object;
  #L48f264.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L48f268.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48f26e.  v2:= temp @kind object;
  #L48f270.  return v2 @kind object;
  #L48f272.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48f274.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48f27a.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48f280.  v2:= temp @kind object;
  #L48f282.  throw v2;
  catch `java.lang.Throwable` @[L48f258..L48f270] goto L48f272;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e998.  v0:= 16I;
  #L48e99c.  call temp:= `toSortedList`(v1, v2, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @kind virtual;
  #L48e9a2.  v2:= temp @kind object;
  #L48e9a4.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `toSortedList`(`io.reactivex.parallel.ParallelFlowable` v1 @kind this, `java.util.Comparator` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/parallel/ParallelFlowable;.toSortedList:(Ljava/util/Comparator;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e9b8.  v0:= "comparator is null" @kind object;
  #L48e9bc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48e9c2.  v0:= "capacityHint" @kind object;
  #L48e9c6.  call temp:= `verifyPositive`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48e9cc.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L48e9d2.  v0:= temp;
  #L48e9d4.  v3:= v3 / v0 @kind int;
  #L48e9d6.  v3:= v3 + 1;
  #L48e9da.  call temp:= `createArrayList`(v3) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L48e9e0.  v3:= temp @kind object;
  #L48e9e2.  call temp:= `instance`() @signature `Lio/reactivex/internal/util/ListAddBiConsumer;.instance:()Lio/reactivex/functions/BiFunction;` @kind static;
  #L48e9e8.  v0:= temp @kind object;
  #L48e9ea.  call temp:= `reduce`(v1, v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48e9f0.  v3:= temp @kind object;
  #L48e9f2.  v0:= new `io.reactivex.internal.util.SorterFunction`;
  #L48e9f6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/SorterFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L48e9fc.  call temp:= `map`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/parallel/ParallelFlowable;` @kind virtual;
  #L48ea02.  v3:= temp @kind object;
  #L48ea04.  v0:= new `io.reactivex.internal.util.MergerBiFunction`;
  #L48ea08.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L48ea0e.  call temp:= `reduce`(v3, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.reduce:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/Flowable;` @kind virtual;
  #L48ea14.  v2:= temp @kind object;
  #L48ea16.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L48ea1c.  v2:= temp @kind object;
  #L48ea1e.  return v2 @kind object;
}
procedure `boolean` `validate`(`io.reactivex.parallel.ParallelFlowable` v5 @kind this, `org.reactivestreams.Subscriber`[] v6 @kind object) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48e7b4.  call temp:= `parallelism`(v5) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L48e7ba.  v0:= temp;
  #L48e7bc.  v1:= length @variable v6;
  #L48e7be.  if v1 == v0 then goto L48e81c;
  #L48e7c2.  v1:= new `java.lang.IllegalArgumentException`;
  #L48e7c6.  v2:= new `java.lang.StringBuilder`;
  #L48e7ca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e7d0.  v3:= "parallelism = " @kind object;
  #L48e7d4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e7da.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e7e0.  v0:= ", subscribers = " @kind object;
  #L48e7e4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e7ea.  v0:= length @variable v6;
  #L48e7ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e7f2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e7f8.  v0:= temp @kind object;
  #L48e7fa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e800.  v0:= length @variable v6;
  #L48e802.  v2:= 0I;
  #L48e804.  v3:= 0I;
  #L48e806.  if v3 >= v0 then goto L48e81a;
  #L48e80a.  v4:= v6[v3] @kind object;
  #L48e80e.  call `error`(v1, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L48e814.  v3:= v3 + 1;
  #L48e818.  goto L48e806;
  #L48e81a.  return v2;
  #L48e81c.  v6:= 1I;
  #L48e81e.  return v6;
}
