record `io.reactivex.flowables.ConnectableFlowable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Flowable` @kind class {
}
procedure `void` `<init>`(`io.reactivex.flowables.ConnectableFlowable` v0 @kind this) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42806c.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L428072.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `e`(`io.reactivex.flowables.ConnectableFlowable` v3 @kind this) @signature `Lio/reactivex/flowables/ConnectableFlowable;.e:()Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L428028.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.operators.flowable.FlowablePublishClassic` @kind boolean;
  #L42802c.  if v0 == 0 then goto L42805a;
  #L428030.  v0:= v3 @kind object;
  #L428032.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishClassic`) v0 @kind object;
  #L428036.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt`;
  #L42803a.  call temp:= `publishSource`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishClassic;.publishSource:()Lorg/reactivestreams/Publisher;` @kind interface;
  #L428040.  v2:= temp @kind object;
  #L428042.  call temp:= `publishBufferSize`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishClassic;.publishBufferSize:()I` @kind interface;
  #L428048.  v0:= temp;
  #L42804a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.<init>:(Lorg/reactivestreams/Publisher;I)V` @kind direct;
  #L428050.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L428056.  v0:= temp @kind object;
  #L428058.  return v0 @kind object;
  #L42805a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `autoConnect`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind this) @signature `Lio/reactivex/flowables/ConnectableFlowable;.autoConnect:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427e5c.  v0:= 1I;
  #L427e5e.  call temp:= `autoConnect`(v1, v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.autoConnect:(I)Lio/reactivex/Flowable;` @kind virtual;
  #L427e64.  v0:= temp @kind object;
  #L427e66.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `autoConnect`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/flowables/ConnectableFlowable;.autoConnect:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427e78.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L427e7e.  v0:= temp @kind object;
  #L427e80.  call temp:= `autoConnect`(v1, v2, v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @kind virtual;
  #L427e86.  v2:= temp @kind object;
  #L427e88.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `autoConnect`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind this, `int` v2 , `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427e9c.  if v2 > 0 then goto L427eb0;
  #L427ea0.  call `connect`(v1, v3) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L427ea6.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L427eac.  v2:= temp @kind object;
  #L427eae.  return v2 @kind object;
  #L427eb0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableAutoConnect`;
  #L427eb4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAutoConnect;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;ILio/reactivex/functions/Consumer;)V` @kind direct;
  #L427eba.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L427ec0.  v2:= temp @kind object;
  #L427ec2.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `connect`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind this) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L428000.  v0:= new `io.reactivex.internal.util.ConnectConsumer`;
  #L428004.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ConnectConsumer;.<init>:()V` @kind direct;
  #L42800a.  call `connect`(v1, v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L428010.  v0:= v0.`io.reactivex.internal.util.ConnectConsumer.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L428014.  return v0 @kind object;
}
procedure `void` `connect`(`io.reactivex.functions.Consumer` v0 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v2 @kind this) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L427ed4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount`;
  #L427ed8.  call temp:= `e`(v2) @signature `Lio/reactivex/flowables/ConnectableFlowable;.e:()Lio/reactivex/flowables/ConnectableFlowable;` @kind direct;
  #L427ede.  v1:= temp @kind object;
  #L427ee0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;)V` @kind direct;
  #L427ee6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L427eec.  v0:= temp @kind object;
  #L427eee.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v6 @kind this, `int` v7 ) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L427f00.  v4:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L427f04.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L427f0a.  v5:= temp @kind object;
  #L427f0c.  v2:= 0L;
  #L427f10.  v0:= v6 @kind object;
  #L427f12.  v1:= v7;
  #L427f14.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L427f1a.  v7:= temp @kind object;
  #L427f1c.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L427f30.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L427f36.  v5:= temp @kind object;
  #L427f38.  v0:= v6 @kind object;
  #L427f3a.  v1:= v7;
  #L427f3c.  v2:= v8 @kind wide;
  #L427f3e.  v4:= v10 @kind object;
  #L427f40.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L427f46.  v7:= temp @kind object;
  #L427f48.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v8 @kind this, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L427f5c.  v0:= "subscriberCount" @kind object;
  #L427f60.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L427f66.  v0:= "unit is null" @kind object;
  #L427f6a.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L427f70.  v0:= "scheduler is null" @kind object;
  #L427f74.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L427f7a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount`;
  #L427f7e.  call temp:= `e`(v8) @signature `Lio/reactivex/flowables/ConnectableFlowable;.e:()Lio/reactivex/flowables/ConnectableFlowable;` @kind direct;
  #L427f84.  v2:= temp @kind object;
  #L427f86.  v1:= v0 @kind object;
  #L427f88.  v3:= v9;
  #L427f8a.  v4:= v10 @kind wide;
  #L427f8c.  v6:= v12 @kind object;
  #L427f8e.  v7:= v13 @kind object;
  #L427f90.  call `<init>`(v1, v2, v3, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L427f96.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L427f9c.  v9:= temp @kind object;
  #L427f9e.  return v9 @kind object;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L427fb0.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L427fb6.  v5:= temp @kind object;
  #L427fb8.  v1:= 1I;
  #L427fba.  v0:= v6 @kind object;
  #L427fbc.  v2:= v7 @kind wide;
  #L427fbe.  v4:= v9 @kind object;
  #L427fc0.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L427fc6.  v7:= temp @kind object;
  #L427fc8.  return v7 @kind object;
}
procedure `io.reactivex.Flowable` `refCount`(`io.reactivex.flowables.ConnectableFlowable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L427fdc.  v1:= 1I;
  #L427fde.  v0:= v6 @kind object;
  #L427fe0.  v2:= v7 @kind wide;
  #L427fe2.  v4:= v9 @kind object;
  #L427fe4.  v5:= v10 @kind object;
  #L427fe6.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/flowables/ConnectableFlowable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L427fec.  v7:= temp @kind object;
  #L427fee.  return v7 @kind object;
}
