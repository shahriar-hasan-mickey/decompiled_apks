record `io.reactivex.schedulers.TestScheduler$a` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `boolean` `io.reactivex.schedulers.TestScheduler$a.a` @AccessFlag VOLATILE;
  `io.reactivex.schedulers.TestScheduler` `io.reactivex.schedulers.TestScheduler$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler$a` v0 @kind this, `io.reactivex.schedulers.TestScheduler` v1 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.<init>:(Lio/reactivex/schedulers/TestScheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L5270fc.  v0.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` := v1 @kind object;
  #L527100.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L527106.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527118.  v0:= 1I;
  #L52711a.  v1.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` := v0 @kind boolean;
  #L52711e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.schedulers.TestScheduler$a` v1 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L526fe4.  v0:= v1.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L526fe8.  return v0;
}
procedure `long` `now`(`io.reactivex.schedulers.TestScheduler$a` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5270dc.  v0:= v2.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L5270e0.  call temp:= `now`(v0, v3) @signature `Lio/reactivex/schedulers/TestScheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L5270e6.  v0:= temp @kind wide;
  #L5270e8.  return v0 @kind wide;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$a` v10 @kind this, `java.lang.Runnable` v11 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L526ffc.  v0:= v10.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L527000.  if v0 == 0 then goto L52700a;
  #L527004.  v11:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L527008.  return v11 @kind object;
  #L52700a.  v7:= new `io.reactivex.schedulers.TestScheduler$b`;
  #L52700e.  v2:= 0L;
  #L527012.  v0:= v10.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L527016.  v5:= v0.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L52701a.  v8:= 1L;
  #L52701e.  v8:= v8 + v5 @kind long;
  #L527020.  v0.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` := v8 @kind wide;
  #L527024.  v0:= v7 @kind object;
  #L527026.  v1:= v10 @kind object;
  #L527028.  v4:= v11 @kind object;
  #L52702a.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L527030.  v11:= v10.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L527034.  v11:= v11.`io.reactivex.schedulers.TestScheduler.c` @type ^`java.util.Queue` @kind object;
  #L527038.  call temp:= `add`(v11, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52703e.  v11:= new `io.reactivex.schedulers.TestScheduler$a$a`;
  #L527042.  call `<init>`(v11, v10, v7) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;Lio/reactivex/schedulers/TestScheduler$b;)V` @kind direct;
  #L527048.  call temp:= `fromRunnable`(v11) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L52704e.  v11:= temp @kind object;
  #L527050.  return v11 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.schedulers.TestScheduler$a` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L527064.  v0:= v8.`io.reactivex.schedulers.TestScheduler$a.a` @type ^`boolean` @kind boolean;
  #L527068.  if v0 == 0 then goto L527072;
  #L52706c.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L527070.  return v9 @kind object;
  #L527072.  v7:= new `io.reactivex.schedulers.TestScheduler$b`;
  #L527076.  v0:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L52707a.  v0:= v0.`io.reactivex.schedulers.TestScheduler.e` @type ^`long` @kind wide;
  #L52707e.  call temp:= `toNanos`(v12, v10) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L527084.  v10:= temp @kind wide;
  #L527086.  v2:= v0 + v10 @kind long;
  #L52708a.  v10:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L52708e.  v5:= v10.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` @kind wide;
  #L527092.  v11:= 1L;
  #L527096.  v11:= v11 + v5 @kind long;
  #L527098.  v10.`io.reactivex.schedulers.TestScheduler.d` @type ^`long` := v11 @kind wide;
  #L52709c.  v0:= v7 @kind object;
  #L52709e.  v1:= v8 @kind object;
  #L5270a0.  v4:= v9 @kind object;
  #L5270a2.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/schedulers/TestScheduler$b;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;JLjava/lang/Runnable;J)V` @kind direct;
  #L5270a8.  v9:= v8.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L5270ac.  v9:= v9.`io.reactivex.schedulers.TestScheduler.c` @type ^`java.util.Queue` @kind object;
  #L5270b0.  call temp:= `add`(v9, v7) @signature `Ljava/util/Queue;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5270b6.  v9:= new `io.reactivex.schedulers.TestScheduler$a$a`;
  #L5270ba.  call `<init>`(v9, v8, v7) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;Lio/reactivex/schedulers/TestScheduler$b;)V` @kind direct;
  #L5270c0.  call temp:= `fromRunnable`(v9) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L5270c6.  v9:= temp @kind object;
  #L5270c8.  return v9 @kind object;
}
