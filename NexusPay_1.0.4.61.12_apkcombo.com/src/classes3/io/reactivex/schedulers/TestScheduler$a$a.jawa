record `io.reactivex.schedulers.TestScheduler$a$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `io.reactivex.schedulers.TestScheduler$b` `io.reactivex.schedulers.TestScheduler$a$a.a` @AccessFlag FINAL;
  `io.reactivex.schedulers.TestScheduler$a` `io.reactivex.schedulers.TestScheduler$a$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.schedulers.TestScheduler$a$a` v0 @kind this, `io.reactivex.schedulers.TestScheduler$a` v1 @kind object, `io.reactivex.schedulers.TestScheduler$b` v2 @kind object) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.<init>:(Lio/reactivex/schedulers/TestScheduler$a;Lio/reactivex/schedulers/TestScheduler$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L526f9c.  v0.`io.reactivex.schedulers.TestScheduler$a$a.b` @type ^`io.reactivex.schedulers.TestScheduler$a` := v1 @kind object;
  #L526fa0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L526fa6.  v0.`io.reactivex.schedulers.TestScheduler$a$a.a` @type ^`io.reactivex.schedulers.TestScheduler$b` := v2 @kind object;
  #L526faa.  return @kind void;
}
procedure `void` `run`(`io.reactivex.schedulers.TestScheduler$a$a` v2 @kind this) @signature `Lio/reactivex/schedulers/TestScheduler$a$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L526fbc.  v0:= v2.`io.reactivex.schedulers.TestScheduler$a$a.b` @type ^`io.reactivex.schedulers.TestScheduler$a` @kind object;
  #L526fc0.  v0:= v0.`io.reactivex.schedulers.TestScheduler$a.b` @type ^`io.reactivex.schedulers.TestScheduler` @kind object;
  #L526fc4.  v0:= v0.`io.reactivex.schedulers.TestScheduler.c` @type ^`java.util.Queue` @kind object;
  #L526fc8.  v1:= v2.`io.reactivex.schedulers.TestScheduler$a$a.a` @type ^`io.reactivex.schedulers.TestScheduler$b` @kind object;
  #L526fcc.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Queue;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L526fd2.  return @kind void;
}
