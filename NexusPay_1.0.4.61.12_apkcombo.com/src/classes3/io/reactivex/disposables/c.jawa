record `io.reactivex.disposables.c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `long` `@@io.reactivex.disposables.c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.disposables.c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/disposables/c;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L42752c.  v0:= "value is null" @kind object;
  #L427530.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L427536.  v2:= temp @kind object;
  #L427538.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42753e.  return @kind void;
}
procedure `void` `a`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/disposables/c;.a:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.disposables.c` v1 @kind this) @signature `Lio/reactivex/disposables/c;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L427550.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L427556.  v0:= temp @kind object;
  #L427558.  if v0 == 0 then goto L427570;
  #L42755c.  v0:= 0I;
  #L42755e.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L427564.  v0:= temp @kind object;
  #L427566.  if v0 == 0 then goto L427570;
  #L42756a.  call `a`(v1, v0) @signature `Lio/reactivex/disposables/c;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L427570.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.c` v1 @kind this) @signature `Lio/reactivex/disposables/c;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L427508.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42750e.  v0:= temp @kind object;
  #L427510.  if v0 != 0 then goto L427518;
  #L427514.  v0:= 1I;
  #L427516.  goto L42751a;
  #L427518.  v0:= 0I;
  #L42751a.  return v0;
}
