record `io.reactivex.Maybe` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.MaybeSource` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.Maybe` v0 @kind this) @signature `Lio/reactivex/Maybe;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L41d590.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L41d596.  return @kind void;
}
procedure `io.reactivex.Maybe` `amb`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.amb:(Ljava/lang/Iterable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41bc14.  v0:= "sources is null" @kind object;
  #L41bc18.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bc1e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L41bc22.  v1:= 0I;
  #L41bc24.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L41bc2a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bc30.  v2:= temp @kind object;
  #L41bc32.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ambArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41bc44.  v0:= length @variable v2;
  #L41bc46.  if v0 != 0 then goto L41bc54;
  #L41bc4a.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L41bc50.  v2:= temp @kind object;
  #L41bc52.  return v2 @kind object;
  #L41bc54.  v0:= length @variable v2;
  #L41bc56.  v1:= 1I;
  #L41bc58.  if v0 != v1 then goto L41bc6c;
  #L41bc5c.  v0:= 0I;
  #L41bc5e.  v2:= v2[v0] @kind object;
  #L41bc62.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41bc68.  v2:= temp @kind object;
  #L41bc6a.  return v2 @kind object;
  #L41bc6c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeAmb`;
  #L41bc70.  v1:= 0I;
  #L41bc72.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb;.<init>:([Lio/reactivex/MaybeSource;Ljava/lang/Iterable;)V` @kind direct;
  #L41bc78.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bc7e.  v2:= temp @kind object;
  #L41bc80.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b3dc.  v0:= "source1 is null" @kind object;
  #L41b3e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b3e6.  v0:= "source2 is null" @kind object;
  #L41b3ea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b3f0.  v0:= 2I;
  #L41b3f2.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b3f6.  v1:= 0I;
  #L41b3f8.  v0[v1]:= v2 @kind object;
  #L41b3fc.  v2:= 1I;
  #L41b3fe.  v0[v2]:= v3 @kind object;
  #L41b402.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b408.  v2:= temp @kind object;
  #L41b40a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b41c.  v0:= "source1 is null" @kind object;
  #L41b420.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b426.  v0:= "source2 is null" @kind object;
  #L41b42a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b430.  v0:= "source3 is null" @kind object;
  #L41b434.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b43a.  v0:= 3I;
  #L41b43c.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b440.  v1:= 0I;
  #L41b442.  v0[v1]:= v2 @kind object;
  #L41b446.  v2:= 1I;
  #L41b448.  v0[v2]:= v3 @kind object;
  #L41b44c.  v2:= 2I;
  #L41b44e.  v0[v2]:= v4 @kind object;
  #L41b452.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b458.  v2:= temp @kind object;
  #L41b45a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b46c.  v0:= "source1 is null" @kind object;
  #L41b470.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b476.  v0:= "source2 is null" @kind object;
  #L41b47a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b480.  v0:= "source3 is null" @kind object;
  #L41b484.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b48a.  v0:= "source4 is null" @kind object;
  #L41b48e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b494.  v0:= 4I;
  #L41b496.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b49a.  v1:= 0I;
  #L41b49c.  v0[v1]:= v2 @kind object;
  #L41b4a0.  v2:= 1I;
  #L41b4a2.  v0[v2]:= v3 @kind object;
  #L41b4a6.  v2:= 2I;
  #L41b4a8.  v0[v2]:= v4 @kind object;
  #L41b4ac.  v2:= 3I;
  #L41b4ae.  v0[v2]:= v5 @kind object;
  #L41b4b2.  call temp:= `concatArray`(v0) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b4b8.  v2:= temp @kind object;
  #L41b4ba.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b4cc.  v0:= "sources is null" @kind object;
  #L41b4d0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b4d6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatIterable`;
  #L41b4da.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L41b4e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b4e6.  v1:= temp @kind object;
  #L41b4e8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b4fc.  v0:= 2I;
  #L41b4fe.  call temp:= `concat`(v1, v0) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L41b504.  v1:= temp @kind object;
  #L41b506.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concat`(`org.reactivestreams.Publisher` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/Maybe;.concat:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41b518.  v0:= "sources is null" @kind object;
  #L41b51c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b522.  v0:= "prefetch" @kind object;
  #L41b526.  call temp:= `verifyPositive`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41b52c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableConcatMapPublisher`;
  #L41b530.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b536.  v1:= temp @kind object;
  #L41b538.  v2:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L41b53c.  call `<init>`(v0, v3, v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @kind direct;
  #L41b542.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b548.  v3:= temp @kind object;
  #L41b54a.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `concatArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b55c.  v0:= "sources is null" @kind object;
  #L41b560.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b566.  v0:= length @variable v2;
  #L41b568.  if v0 != 0 then goto L41b576;
  #L41b56c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41b572.  v2:= temp @kind object;
  #L41b574.  return v2 @kind object;
  #L41b576.  v0:= length @variable v2;
  #L41b578.  v1:= 1I;
  #L41b57a.  if v0 != v1 then goto L41b598;
  #L41b57e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L41b582.  v1:= 0I;
  #L41b584.  v2:= v2[v1] @kind object;
  #L41b588.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b58e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b594.  v2:= temp @kind object;
  #L41b596.  return v2 @kind object;
  #L41b598.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArray`;
  #L41b59c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b5a2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b5a8.  v2:= temp @kind object;
  #L41b5aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayDelayError`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b5bc.  v0:= length @variable v2;
  #L41b5be.  if v0 != 0 then goto L41b5cc;
  #L41b5c2.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41b5c8.  v2:= temp @kind object;
  #L41b5ca.  return v2 @kind object;
  #L41b5cc.  v0:= length @variable v2;
  #L41b5ce.  v1:= 1I;
  #L41b5d0.  if v0 != v1 then goto L41b5ee;
  #L41b5d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L41b5d8.  v1:= 0I;
  #L41b5da.  v2:= v2[v1] @kind object;
  #L41b5de.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b5e4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b5ea.  v2:= temp @kind object;
  #L41b5ec.  return v2 @kind object;
  #L41b5ee.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArrayDelayError`;
  #L41b5f2.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArrayDelayError;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b5f8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b5fe.  v2:= temp @kind object;
  #L41b600.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatArrayEager`(`io.reactivex.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/Maybe;.concatArrayEager:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b614.  call temp:= `fromArray`(v1) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41b61a.  v1:= temp @kind object;
  #L41b61c.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b622.  v0:= temp @kind object;
  #L41b624.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41b62a.  v1:= temp @kind object;
  #L41b62c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b640.  v0:= "sources is null" @kind object;
  #L41b644.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b64a.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41b650.  v1:= temp @kind object;
  #L41b652.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b658.  v0:= temp @kind object;
  #L41b65a.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41b660.  v1:= temp @kind object;
  #L41b662.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b674.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41b67a.  v1:= temp @kind object;
  #L41b67c.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b682.  v0:= temp @kind object;
  #L41b684.  call temp:= `concatMapDelayError`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapDelayError:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41b68a.  v1:= temp @kind object;
  #L41b68c.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b6a0.  call temp:= `fromIterable`(v1) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41b6a6.  v1:= temp @kind object;
  #L41b6a8.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b6ae.  v0:= temp @kind object;
  #L41b6b0.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41b6b6.  v1:= temp @kind object;
  #L41b6b8.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `concatEager`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.concatEager:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b6cc.  call temp:= `fromPublisher`(v1) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41b6d2.  v1:= temp @kind object;
  #L41b6d4.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b6da.  v0:= temp @kind object;
  #L41b6dc.  call temp:= `concatMapEager`(v1, v0) @signature `Lio/reactivex/Flowable;.concatMapEager:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41b6e2.  v1:= temp @kind object;
  #L41b6e4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `create`(`io.reactivex.MaybeOnSubscribe` v1 @kind object) @signature `Lio/reactivex/Maybe;.create:(Lio/reactivex/MaybeOnSubscribe;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41bd80.  v0:= "onSubscribe is null" @kind object;
  #L41bd84.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bd8a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCreate`;
  #L41bd8e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate;.<init>:(Lio/reactivex/MaybeOnSubscribe;)V` @kind direct;
  #L41bd94.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bd9a.  v1:= temp @kind object;
  #L41bd9c.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `defer`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.defer:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41bddc.  v0:= "maybeSupplier is null" @kind object;
  #L41bde0.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bde6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDefer`;
  #L41bdea.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDefer;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41bdf0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bdf6.  v1:= temp @kind object;
  #L41bdf8.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c1ec.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeEmpty.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeEmpty` @kind object;
  #L41c1f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c1f6.  v0:= temp @kind object;
  #L41c1f8.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/lang/Throwable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c20c.  v0:= "exception is null" @kind object;
  #L41c210.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c216.  v0:= new `io.reactivex.internal.operators.maybe.MaybeError`;
  #L41c21a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L41c220.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c226.  v1:= temp @kind object;
  #L41c228.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `error`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.error:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c23c.  v0:= "errorSupplier is null" @kind object;
  #L41c240.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c246.  v0:= new `io.reactivex.internal.operators.maybe.MaybeErrorCallable`;
  #L41c24a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeErrorCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41c250.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c256.  v1:= temp @kind object;
  #L41c258.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromAction`(`io.reactivex.functions.Action` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromAction:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c378.  v0:= "run is null" @kind object;
  #L41c37c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c382.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromAction`;
  #L41c386.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c38c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c392.  v1:= temp @kind object;
  #L41c394.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCallable`(`java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCallable:(Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c3a8.  v0:= "callable is null" @kind object;
  #L41c3ac.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c3b2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCallable`;
  #L41c3b6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41c3bc.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c3c2.  v1:= temp @kind object;
  #L41c3c4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromCompletable`(`io.reactivex.CompletableSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromCompletable:(Lio/reactivex/CompletableSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c3d8.  v0:= "completableSource is null" @kind object;
  #L41c3dc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c3e2.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromCompletable`;
  #L41c3e6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromCompletable;.<init>:(Lio/reactivex/CompletableSource;)V` @kind direct;
  #L41c3ec.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c3f2.  v1:= temp @kind object;
  #L41c3f4.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L41c408.  v0:= "future is null" @kind object;
  #L41c40c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c412.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L41c416.  v1:= 0L;
  #L41c41a.  v3:= 0I;
  #L41c41c.  call `<init>`(v0, v4, v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L41c422.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c428.  v4:= temp @kind object;
  #L41c42a.  return v4 @kind object;
}
procedure `io.reactivex.Maybe` `fromFuture`(`java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.fromFuture:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c43c.  v0:= "future is null" @kind object;
  #L41c440.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c446.  v0:= "unit is null" @kind object;
  #L41c44a.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c450.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromFuture`;
  #L41c454.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L41c45a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c460.  v1:= temp @kind object;
  #L41c462.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromRunnable`(`java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c474.  v0:= "run is null" @kind object;
  #L41c478.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c47e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromRunnable`;
  #L41c482.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L41c488.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c48e.  v1:= temp @kind object;
  #L41c490.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `fromSingle`(`io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.fromSingle:(Lio/reactivex/SingleSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c4a4.  v0:= "singleSource is null" @kind object;
  #L41c4a8.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c4ae.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFromSingle`;
  #L41c4b2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle;.<init>:(Lio/reactivex/SingleSource;)V` @kind direct;
  #L41c4b8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c4be.  v1:= temp @kind object;
  #L41c4c0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `just`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c4f8.  v0:= "item is null" @kind object;
  #L41c4fc.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c502.  v0:= new `io.reactivex.internal.operators.maybe.MaybeJust`;
  #L41c506.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeJust;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L41c50c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c512.  v1:= temp @kind object;
  #L41c514.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b77c.  v0:= "source1 is null" @kind object;
  #L41b780.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b786.  v0:= "source2 is null" @kind object;
  #L41b78a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b790.  v0:= 2I;
  #L41b792.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b796.  v1:= 0I;
  #L41b798.  v0[v1]:= v2 @kind object;
  #L41b79c.  v2:= 1I;
  #L41b79e.  v0[v2]:= v3 @kind object;
  #L41b7a2.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b7a8.  v2:= temp @kind object;
  #L41b7aa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b7bc.  v0:= "source1 is null" @kind object;
  #L41b7c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b7c6.  v0:= "source2 is null" @kind object;
  #L41b7ca.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b7d0.  v0:= "source3 is null" @kind object;
  #L41b7d4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b7da.  v0:= 3I;
  #L41b7dc.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b7e0.  v1:= 0I;
  #L41b7e2.  v0[v1]:= v2 @kind object;
  #L41b7e6.  v2:= 1I;
  #L41b7e8.  v0[v2]:= v3 @kind object;
  #L41b7ec.  v2:= 2I;
  #L41b7ee.  v0[v2]:= v4 @kind object;
  #L41b7f2.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b7f8.  v2:= temp @kind object;
  #L41b7fa.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b80c.  v0:= "source1 is null" @kind object;
  #L41b810.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b816.  v0:= "source2 is null" @kind object;
  #L41b81a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b820.  v0:= "source3 is null" @kind object;
  #L41b824.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b82a.  v0:= "source4 is null" @kind object;
  #L41b82e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b834.  v0:= 4I;
  #L41b836.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b83a.  v1:= 0I;
  #L41b83c.  v0[v1]:= v2 @kind object;
  #L41b840.  v2:= 1I;
  #L41b842.  v0[v2]:= v3 @kind object;
  #L41b846.  v2:= 2I;
  #L41b848.  v0[v2]:= v4 @kind object;
  #L41b84c.  v2:= 3I;
  #L41b84e.  v0[v2]:= v5 @kind object;
  #L41b852.  call temp:= `mergeArray`(v0) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b858.  v2:= temp @kind object;
  #L41b85a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`java.lang.Iterable` v0 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41b86c.  call temp:= `fromIterable`(v0) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41b872.  v0:= temp @kind object;
  #L41b874.  call temp:= `merge`(v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L41b87a.  v0:= temp @kind object;
  #L41b87c.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41b890.  v0:= 2147483647I;
  #L41b896.  call temp:= `merge`(v1, v0) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L41b89c.  v1:= temp @kind object;
  #L41b89e.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `merge`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 ) @signature `Lio/reactivex/Maybe;.merge:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41b8b0.  v0:= "source is null" @kind object;
  #L41b8b4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b8ba.  v0:= "maxConcurrency" @kind object;
  #L41b8be.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41b8c4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher`;
  #L41b8c8.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b8ce.  v3:= temp @kind object;
  #L41b8d0.  v4:= 0I;
  #L41b8d2.  v6:= 1I;
  #L41b8d4.  v1:= v0 @kind object;
  #L41b8d6.  v2:= v7 @kind object;
  #L41b8d8.  v5:= v8;
  #L41b8da.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L41b8e0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b8e6.  v7:= temp @kind object;
  #L41b8e8.  return v7 @kind object;
}
procedure `io.reactivex.Maybe` `merge`(`io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41c588.  v0:= "source is null" @kind object;
  #L41c58c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c592.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L41c596.  call temp:= `identity`() @signature `Lio/reactivex/internal/functions/Functions;.identity:()Lio/reactivex/functions/Function;` @kind static;
  #L41c59c.  v1:= temp @kind object;
  #L41c59e.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41c5a4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c5aa.  v2:= temp @kind object;
  #L41c5ac.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArray`(`io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b8fc.  v0:= "sources is null" @kind object;
  #L41b900.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b906.  v0:= length @variable v2;
  #L41b908.  if v0 != 0 then goto L41b916;
  #L41b90c.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41b912.  v2:= temp @kind object;
  #L41b914.  return v2 @kind object;
  #L41b916.  v0:= length @variable v2;
  #L41b918.  v1:= 1I;
  #L41b91a.  if v0 != v1 then goto L41b938;
  #L41b91e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L41b922.  v1:= 0I;
  #L41b924.  v2:= v2[v1] @kind object;
  #L41b928.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b92e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b934.  v2:= temp @kind object;
  #L41b936.  return v2 @kind object;
  #L41b938.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMergeArray`;
  #L41b93c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray;.<init>:([Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b942.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b948.  v2:= temp @kind object;
  #L41b94a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeArrayDelayError`(`io.reactivex.MaybeSource`[] v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41b95c.  v0:= length @variable v3;
  #L41b95e.  if v0 != 0 then goto L41b96c;
  #L41b962.  call temp:= `empty`() @signature `Lio/reactivex/Flowable;.empty:()Lio/reactivex/Flowable;` @kind static;
  #L41b968.  v3:= temp @kind object;
  #L41b96a.  return v3 @kind object;
  #L41b96c.  call temp:= `fromArray`(v3) @signature `Lio/reactivex/Flowable;.fromArray:([Ljava/lang/Object;)Lio/reactivex/Flowable;` @kind static;
  #L41b972.  v0:= temp @kind object;
  #L41b974.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41b97a.  v1:= temp @kind object;
  #L41b97c.  v2:= 1I;
  #L41b97e.  v3:= length @variable v3;
  #L41b980.  call temp:= `flatMap`(v0, v1, v2, v3) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;ZI)Lio/reactivex/Flowable;` @kind virtual;
  #L41b986.  v3:= temp @kind object;
  #L41b988.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b99c.  v0:= "source1 is null" @kind object;
  #L41b9a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b9a6.  v0:= "source2 is null" @kind object;
  #L41b9aa.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b9b0.  v0:= 2I;
  #L41b9b2.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41b9b6.  v1:= 0I;
  #L41b9b8.  v0[v1]:= v2 @kind object;
  #L41b9bc.  v2:= 1I;
  #L41b9be.  v0[v2]:= v3 @kind object;
  #L41b9c2.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b9c8.  v2:= temp @kind object;
  #L41b9ca.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41b9dc.  v0:= "source1 is null" @kind object;
  #L41b9e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b9e6.  v0:= "source2 is null" @kind object;
  #L41b9ea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b9f0.  v0:= "source3 is null" @kind object;
  #L41b9f4.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b9fa.  v0:= 3I;
  #L41b9fc.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41ba00.  v1:= 0I;
  #L41ba02.  v0[v1]:= v2 @kind object;
  #L41ba06.  v2:= 1I;
  #L41ba08.  v0[v2]:= v3 @kind object;
  #L41ba0c.  v2:= 2I;
  #L41ba0e.  v0[v2]:= v4 @kind object;
  #L41ba12.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41ba18.  v2:= temp @kind object;
  #L41ba1a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41ba2c.  v0:= "source1 is null" @kind object;
  #L41ba30.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ba36.  v0:= "source2 is null" @kind object;
  #L41ba3a.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ba40.  v0:= "source3 is null" @kind object;
  #L41ba44.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ba4a.  v0:= "source4 is null" @kind object;
  #L41ba4e.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ba54.  v0:= 4I;
  #L41ba56.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41ba5a.  v1:= 0I;
  #L41ba5c.  v0[v1]:= v2 @kind object;
  #L41ba60.  v2:= 1I;
  #L41ba62.  v0[v2]:= v3 @kind object;
  #L41ba66.  v2:= 2I;
  #L41ba68.  v0[v2]:= v4 @kind object;
  #L41ba6c.  v2:= 3I;
  #L41ba6e.  v0[v2]:= v5 @kind object;
  #L41ba72.  call temp:= `mergeArrayDelayError`(v0) @signature `Lio/reactivex/Maybe;.mergeArrayDelayError:([Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41ba78.  v2:= temp @kind object;
  #L41ba7a.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41ba8c.  call temp:= `fromIterable`(v2) @signature `Lio/reactivex/Flowable;.fromIterable:(Ljava/lang/Iterable;)Lio/reactivex/Flowable;` @kind static;
  #L41ba92.  v2:= temp @kind object;
  #L41ba94.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41ba9a.  v0:= temp @kind object;
  #L41ba9c.  v1:= 1I;
  #L41ba9e.  call temp:= `flatMap`(v2, v0, v1) @signature `Lio/reactivex/Flowable;.flatMap:(Lio/reactivex/functions/Function;Z)Lio/reactivex/Flowable;` @kind virtual;
  #L41baa4.  v2:= temp @kind object;
  #L41baa6.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41bab8.  v0:= 2147483647I;
  #L41babe.  call temp:= `mergeDelayError`(v1, v0) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @kind static;
  #L41bac4.  v1:= temp @kind object;
  #L41bac6.  return v1 @kind object;
}
procedure `io.reactivex.Flowable` `mergeDelayError`(`org.reactivestreams.Publisher` v7 @kind object, `int` v8 ) @signature `Lio/reactivex/Maybe;.mergeDelayError:(Lorg/reactivestreams/Publisher;I)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41bad8.  v0:= "source is null" @kind object;
  #L41badc.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bae2.  v0:= "maxConcurrency" @kind object;
  #L41bae6.  call temp:= `verifyPositive`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L41baec.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapPublisher`;
  #L41baf0.  call temp:= `instance`() @signature `Lio/reactivex/internal/operators/maybe/MaybeToPublisher;.instance:()Lio/reactivex/functions/Function;` @kind static;
  #L41baf6.  v3:= temp @kind object;
  #L41baf8.  v4:= 1I;
  #L41bafa.  v6:= 1I;
  #L41bafc.  v1:= v0 @kind object;
  #L41bafe.  v2:= v7 @kind object;
  #L41bb00.  v5:= v8;
  #L41bb02.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapPublisher;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;ZII)V` @kind direct;
  #L41bb08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41bb0e.  v7:= temp @kind object;
  #L41bb10.  return v7 @kind object;
}
procedure `io.reactivex.Maybe` `never`() @signature `Lio/reactivex/Maybe;.never:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41c5c0.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeNever.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeNever` @kind object;
  #L41c5c4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c5ca.  v0:= temp @kind object;
  #L41c5cc.  return v0 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41d2c4.  call temp:= `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @kind static;
  #L41d2ca.  v0:= temp @kind object;
  #L41d2cc.  call temp:= `sequenceEqual`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @kind static;
  #L41d2d2.  v1:= temp @kind object;
  #L41d2d4.  return v1 @kind object;
}
procedure `io.reactivex.Single` `sequenceEqual`(`io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.sequenceEqual:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Single;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41d2e8.  v0:= "source1 is null" @kind object;
  #L41d2ec.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d2f2.  v0:= "source2 is null" @kind object;
  #L41d2f6.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d2fc.  v0:= "isEqual is null" @kind object;
  #L41d300.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d306.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle`;
  #L41d30a.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L41d310.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d316.  v1:= temp @kind object;
  #L41d318.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41cb14.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41cb1a.  v0:= temp @kind object;
  #L41cb1c.  call temp:= `timer`(v1, v3, v0) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L41cb22.  v1:= temp @kind object;
  #L41cb24.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timer`(`long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41cb38.  v0:= "unit is null" @kind object;
  #L41cb3c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cb42.  v0:= "scheduler is null" @kind object;
  #L41cb46.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cb4c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimer`;
  #L41cb50.  v1:= 0L;
  #L41cb54.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L41cb5a.  v3:= temp @kind wide;
  #L41cb5c.  call `<init>`(v0, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer;.<init>:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41cb62.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cb68.  v3:= temp @kind object;
  #L41cb6a.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `unsafeCreate`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.unsafeCreate:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41cb7c.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L41cb80.  if v0 != 0 then goto L41cba2;
  #L41cb84.  v0:= "onSubscribe is null" @kind object;
  #L41cb88.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cb8e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L41cb92.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41cb98.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cb9e.  v1:= temp @kind object;
  #L41cba0.  return v1 @kind object;
  #L41cba2.  v1:= new `java.lang.IllegalArgumentException`;
  #L41cba6.  v0:= "unsafeCreate(Maybe) should be upgraded" @kind object;
  #L41cbaa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41cbb0.  throw v1;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41cbf4.  v0:= 1I;
  #L41cbf6.  call temp:= `using`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @kind static;
  #L41cbfc.  v1:= temp @kind object;
  #L41cbfe.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `using`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/Maybe;.using:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41cc10.  v0:= "resourceSupplier is null" @kind object;
  #L41cc14.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cc1a.  v0:= "sourceSupplier is null" @kind object;
  #L41cc1e.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cc24.  v0:= "disposer is null" @kind object;
  #L41cc28.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cc2e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUsing`;
  #L41cc32.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L41cc38.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cc3e.  v1:= temp @kind object;
  #L41cc40.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `wrap`(`io.reactivex.MaybeSource` v1 @kind object) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41cc54.  v0:= instanceof @variable v1 @type ^`io.reactivex.Maybe` @kind boolean;
  #L41cc58.  if v0 == 0 then goto L41cc6a;
  #L41cc5c.  v1:= (`io.reactivex.Maybe`) v1 @kind object;
  #L41cc60.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cc66.  v1:= temp @kind object;
  #L41cc68.  return v1 @kind object;
  #L41cc6a.  v0:= "onSubscribe is null" @kind object;
  #L41cc6e.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cc74.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsafeCreate`;
  #L41cc78.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsafeCreate;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41cc7e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cc84.  v1:= temp @kind object;
  #L41cc86.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.MaybeSource` v10 @kind object, `io.reactivex.functions.Function9` v11 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function9;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41cc98.  v0:= "source1 is null" @kind object;
  #L41cc9c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cca2.  v0:= "source2 is null" @kind object;
  #L41cca6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccac.  v0:= "source3 is null" @kind object;
  #L41ccb0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccb6.  v0:= "source4 is null" @kind object;
  #L41ccba.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccc0.  v0:= "source5 is null" @kind object;
  #L41ccc4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccca.  v0:= "source6 is null" @kind object;
  #L41ccce.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccd4.  v0:= "source7 is null" @kind object;
  #L41ccd8.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccde.  v0:= "source8 is null" @kind object;
  #L41cce2.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cce8.  v0:= "source9 is null" @kind object;
  #L41ccec.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ccf2.  call temp:= `toFunction`(v11) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function9;)Lio/reactivex/functions/Function;` @kind static;
  #L41ccf8.  v11:= temp @kind object;
  #L41ccfa.  v0:= 9I;
  #L41ccfe.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41cd02.  v1:= 0I;
  #L41cd04.  v0[v1]:= v2 @kind object;
  #L41cd08.  v2:= 1I;
  #L41cd0a.  v0[v2]:= v3 @kind object;
  #L41cd0e.  v2:= 2I;
  #L41cd10.  v0[v2]:= v4 @kind object;
  #L41cd14.  v2:= 3I;
  #L41cd16.  v0[v2]:= v5 @kind object;
  #L41cd1a.  v2:= 4I;
  #L41cd1c.  v0[v2]:= v6 @kind object;
  #L41cd20.  v2:= 5I;
  #L41cd22.  v0[v2]:= v7 @kind object;
  #L41cd26.  v2:= 6I;
  #L41cd28.  v0[v2]:= v8 @kind object;
  #L41cd2c.  v2:= 7I;
  #L41cd2e.  v0[v2]:= v9 @kind object;
  #L41cd32.  v2:= 8I;
  #L41cd36.  v0[v2]:= v10 @kind object;
  #L41cd3a.  call temp:= `zipArray`(v11, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41cd40.  v2:= temp @kind object;
  #L41cd42.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.MaybeSource` v9 @kind object, `io.reactivex.functions.Function8` v10 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function8;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41cd54.  v0:= "source1 is null" @kind object;
  #L41cd58.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd5e.  v0:= "source2 is null" @kind object;
  #L41cd62.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd68.  v0:= "source3 is null" @kind object;
  #L41cd6c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd72.  v0:= "source4 is null" @kind object;
  #L41cd76.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd7c.  v0:= "source5 is null" @kind object;
  #L41cd80.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd86.  v0:= "source6 is null" @kind object;
  #L41cd8a.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd90.  v0:= "source7 is null" @kind object;
  #L41cd94.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cd9a.  v0:= "source8 is null" @kind object;
  #L41cd9e.  call temp:= `requireNonNull`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cda4.  call temp:= `toFunction`(v10) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function8;)Lio/reactivex/functions/Function;` @kind static;
  #L41cdaa.  v10:= temp @kind object;
  #L41cdac.  v0:= 8I;
  #L41cdb0.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41cdb4.  v1:= 0I;
  #L41cdb6.  v0[v1]:= v2 @kind object;
  #L41cdba.  v2:= 1I;
  #L41cdbc.  v0[v2]:= v3 @kind object;
  #L41cdc0.  v2:= 2I;
  #L41cdc2.  v0[v2]:= v4 @kind object;
  #L41cdc6.  v2:= 3I;
  #L41cdc8.  v0[v2]:= v5 @kind object;
  #L41cdcc.  v2:= 4I;
  #L41cdce.  v0[v2]:= v6 @kind object;
  #L41cdd2.  v2:= 5I;
  #L41cdd4.  v0[v2]:= v7 @kind object;
  #L41cdd8.  v2:= 6I;
  #L41cdda.  v0[v2]:= v8 @kind object;
  #L41cdde.  v2:= 7I;
  #L41cde0.  v0[v2]:= v9 @kind object;
  #L41cde4.  call temp:= `zipArray`(v10, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41cdea.  v2:= temp @kind object;
  #L41cdec.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.MaybeSource` v8 @kind object, `io.reactivex.functions.Function7` v9 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function7;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41ce00.  v0:= "source1 is null" @kind object;
  #L41ce04.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce0a.  v0:= "source2 is null" @kind object;
  #L41ce0e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce14.  v0:= "source3 is null" @kind object;
  #L41ce18.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce1e.  v0:= "source4 is null" @kind object;
  #L41ce22.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce28.  v0:= "source5 is null" @kind object;
  #L41ce2c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce32.  v0:= "source6 is null" @kind object;
  #L41ce36.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce3c.  v0:= "source7 is null" @kind object;
  #L41ce40.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ce46.  call temp:= `toFunction`(v9) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function7;)Lio/reactivex/functions/Function;` @kind static;
  #L41ce4c.  v9:= temp @kind object;
  #L41ce4e.  v0:= 7I;
  #L41ce50.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41ce54.  v1:= 0I;
  #L41ce56.  v0[v1]:= v2 @kind object;
  #L41ce5a.  v2:= 1I;
  #L41ce5c.  v0[v2]:= v3 @kind object;
  #L41ce60.  v2:= 2I;
  #L41ce62.  v0[v2]:= v4 @kind object;
  #L41ce66.  v2:= 3I;
  #L41ce68.  v0[v2]:= v5 @kind object;
  #L41ce6c.  v2:= 4I;
  #L41ce6e.  v0[v2]:= v6 @kind object;
  #L41ce72.  v2:= 5I;
  #L41ce74.  v0[v2]:= v7 @kind object;
  #L41ce78.  v2:= 6I;
  #L41ce7a.  v0[v2]:= v8 @kind object;
  #L41ce7e.  call temp:= `zipArray`(v9, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41ce84.  v2:= temp @kind object;
  #L41ce86.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.MaybeSource` v7 @kind object, `io.reactivex.functions.Function6` v8 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function6;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41ce98.  v0:= "source1 is null" @kind object;
  #L41ce9c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cea2.  v0:= "source2 is null" @kind object;
  #L41cea6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ceac.  v0:= "source3 is null" @kind object;
  #L41ceb0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ceb6.  v0:= "source4 is null" @kind object;
  #L41ceba.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cec0.  v0:= "source5 is null" @kind object;
  #L41cec4.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ceca.  v0:= "source6 is null" @kind object;
  #L41cece.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ced4.  call temp:= `toFunction`(v8) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function6;)Lio/reactivex/functions/Function;` @kind static;
  #L41ceda.  v8:= temp @kind object;
  #L41cedc.  v0:= 6I;
  #L41cede.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41cee2.  v1:= 0I;
  #L41cee4.  v0[v1]:= v2 @kind object;
  #L41cee8.  v2:= 1I;
  #L41ceea.  v0[v2]:= v3 @kind object;
  #L41ceee.  v2:= 2I;
  #L41cef0.  v0[v2]:= v4 @kind object;
  #L41cef4.  v2:= 3I;
  #L41cef6.  v0[v2]:= v5 @kind object;
  #L41cefa.  v2:= 4I;
  #L41cefc.  v0[v2]:= v6 @kind object;
  #L41cf00.  v2:= 5I;
  #L41cf02.  v0[v2]:= v7 @kind object;
  #L41cf06.  call temp:= `zipArray`(v8, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41cf0c.  v2:= temp @kind object;
  #L41cf0e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object, `io.reactivex.functions.Function5` v7 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function5;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41cf20.  v0:= "source1 is null" @kind object;
  #L41cf24.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cf2a.  v0:= "source2 is null" @kind object;
  #L41cf2e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cf34.  v0:= "source3 is null" @kind object;
  #L41cf38.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cf3e.  v0:= "source4 is null" @kind object;
  #L41cf42.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cf48.  v0:= "source5 is null" @kind object;
  #L41cf4c.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cf52.  call temp:= `toFunction`(v7) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function5;)Lio/reactivex/functions/Function;` @kind static;
  #L41cf58.  v7:= temp @kind object;
  #L41cf5a.  v0:= 5I;
  #L41cf5c.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41cf60.  v1:= 0I;
  #L41cf62.  v0[v1]:= v2 @kind object;
  #L41cf66.  v2:= 1I;
  #L41cf68.  v0[v2]:= v3 @kind object;
  #L41cf6c.  v2:= 2I;
  #L41cf6e.  v0[v2]:= v4 @kind object;
  #L41cf72.  v2:= 3I;
  #L41cf74.  v0[v2]:= v5 @kind object;
  #L41cf78.  v2:= 4I;
  #L41cf7a.  v0[v2]:= v6 @kind object;
  #L41cf7e.  call temp:= `zipArray`(v7, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41cf84.  v2:= temp @kind object;
  #L41cf86.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.MaybeSource` v5 @kind object, `io.reactivex.functions.Function4` v6 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function4;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41cf98.  v0:= "source1 is null" @kind object;
  #L41cf9c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cfa2.  v0:= "source2 is null" @kind object;
  #L41cfa6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cfac.  v0:= "source3 is null" @kind object;
  #L41cfb0.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cfb6.  v0:= "source4 is null" @kind object;
  #L41cfba.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cfc0.  call temp:= `toFunction`(v6) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function4;)Lio/reactivex/functions/Function;` @kind static;
  #L41cfc6.  v6:= temp @kind object;
  #L41cfc8.  v0:= 4I;
  #L41cfca.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41cfce.  v1:= 0I;
  #L41cfd0.  v0[v1]:= v2 @kind object;
  #L41cfd4.  v2:= 1I;
  #L41cfd6.  v0[v2]:= v3 @kind object;
  #L41cfda.  v2:= 2I;
  #L41cfdc.  v0[v2]:= v4 @kind object;
  #L41cfe0.  v2:= 3I;
  #L41cfe2.  v0[v2]:= v5 @kind object;
  #L41cfe6.  call temp:= `zipArray`(v6, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41cfec.  v2:= temp @kind object;
  #L41cfee.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.MaybeSource` v4 @kind object, `io.reactivex.functions.Function3` v5 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function3;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41d000.  v0:= "source1 is null" @kind object;
  #L41d004.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d00a.  v0:= "source2 is null" @kind object;
  #L41d00e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d014.  v0:= "source3 is null" @kind object;
  #L41d018.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d01e.  call temp:= `toFunction`(v5) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/Function3;)Lio/reactivex/functions/Function;` @kind static;
  #L41d024.  v5:= temp @kind object;
  #L41d026.  v0:= 3I;
  #L41d028.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41d02c.  v1:= 0I;
  #L41d02e.  v0[v1]:= v2 @kind object;
  #L41d032.  v2:= 1I;
  #L41d034.  v0[v2]:= v3 @kind object;
  #L41d038.  v2:= 2I;
  #L41d03a.  v0[v2]:= v4 @kind object;
  #L41d03e.  call temp:= `zipArray`(v5, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41d044.  v2:= temp @kind object;
  #L41d046.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object, `io.reactivex.functions.BiFunction` v4 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L41d058.  v0:= "source1 is null" @kind object;
  #L41d05c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d062.  v0:= "source2 is null" @kind object;
  #L41d066.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d06c.  call temp:= `toFunction`(v4) @signature `Lio/reactivex/internal/functions/Functions;.toFunction:(Lio/reactivex/functions/BiFunction;)Lio/reactivex/functions/Function;` @kind static;
  #L41d072.  v4:= temp @kind object;
  #L41d074.  v0:= 2I;
  #L41d076.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41d07a.  v1:= 0I;
  #L41d07c.  v0[v1]:= v2 @kind object;
  #L41d080.  v2:= 1I;
  #L41d082.  v0[v2]:= v3 @kind object;
  #L41d086.  call temp:= `zipArray`(v4, v0) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41d08c.  v2:= temp @kind object;
  #L41d08e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zip`(`java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.zip:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41d0a0.  v0:= "zipper is null" @kind object;
  #L41d0a4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d0aa.  v0:= "sources is null" @kind object;
  #L41d0ae.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d0b4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable`;
  #L41d0b8.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41d0be.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41d0c4.  v1:= temp @kind object;
  #L41d0c6.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `zipArray`(`io.reactivex.functions.Function` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/Maybe;.zipArray:(Lio/reactivex/functions/Function;[Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41d0d8.  v0:= "sources is null" @kind object;
  #L41d0dc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d0e2.  v0:= length @variable v2;
  #L41d0e4.  if v0 != 0 then goto L41d0f2;
  #L41d0e8.  call temp:= `empty`() @signature `Lio/reactivex/Maybe;.empty:()Lio/reactivex/Maybe;` @kind static;
  #L41d0ee.  v1:= temp @kind object;
  #L41d0f0.  return v1 @kind object;
  #L41d0f2.  v0:= "zipper is null" @kind object;
  #L41d0f6.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d0fc.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray`;
  #L41d100.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41d106.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41d10c.  v1:= temp @kind object;
  #L41d10e.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `ambWith`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.ambWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41bc94.  v0:= "other is null" @kind object;
  #L41bc98.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bc9e.  v0:= 2I;
  #L41bca0.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L41bca4.  v1:= 0I;
  #L41bca6.  v0[v1]:= v2 @kind object;
  #L41bcaa.  v1:= 1I;
  #L41bcac.  v0[v1]:= v3 @kind object;
  #L41bcb0.  call temp:= `ambArray`(v0) @signature `Lio/reactivex/Maybe;.ambArray:([Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41bcb6.  v3:= temp @kind object;
  #L41bcb8.  return v3 @kind object;
}
procedure `java.lang.Object` `as`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeConverter` v2 @kind object) @signature `Lio/reactivex/Maybe;.as:(Lio/reactivex/MaybeConverter;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d4bc.  v0:= "converter is null" @kind object;
  #L41d4c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d4c6.  v2:= temp @kind object;
  #L41d4c8.  v2:= (`io.reactivex.MaybeConverter`) v2 @kind object;
  #L41d4cc.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/MaybeConverter;.apply:(Lio/reactivex/Maybe;)Ljava/lang/Object;` @kind interface;
  #L41d4d2.  v2:= temp @kind object;
  #L41d4d4.  return v2 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d4e8.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L41d4ec.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L41d4f2.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d4f8.  call temp:= `blockingGet`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:()Ljava/lang/Object;` @kind virtual;
  #L41d4fe.  v0:= temp @kind object;
  #L41d500.  return v0 @kind object;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d514.  v0:= "defaultValue is null" @kind object;
  #L41d518.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d51e.  v0:= new `io.reactivex.internal.observers.BlockingMultiObserver`;
  #L41d522.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.<init>:()V` @kind direct;
  #L41d528.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d52e.  call temp:= `blockingGet`(v0, v2) @signature `Lio/reactivex/internal/observers/BlockingMultiObserver;.blockingGet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L41d534.  v2:= temp @kind object;
  #L41d536.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `cache`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.cache:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bccc.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache`;
  #L41bcd0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41bcd6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bcdc.  v0:= temp @kind object;
  #L41bcde.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `cast`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bcf0.  v0:= "clazz is null" @kind object;
  #L41bcf4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bcfa.  call temp:= `castFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.castFunction:(Ljava/lang/Class;)Lio/reactivex/functions/Function;` @kind static;
  #L41bd00.  v2:= temp @kind object;
  #L41bd02.  call temp:= `map`(v1, v2) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L41bd08.  v2:= temp @kind object;
  #L41bd0a.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `compose`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeTransformer` v2 @kind object) @signature `Lio/reactivex/Maybe;.compose:(Lio/reactivex/MaybeTransformer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bd1c.  v0:= "transformer is null" @kind object;
  #L41bd20.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bd26.  v2:= temp @kind object;
  #L41bd28.  v2:= (`io.reactivex.MaybeTransformer`) v2 @kind object;
  #L41bd2c.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/MaybeTransformer;.apply:(Lio/reactivex/Maybe;)Lio/reactivex/MaybeSource;` @kind interface;
  #L41bd32.  v2:= temp @kind object;
  #L41bd34.  call temp:= `wrap`(v2) @signature `Lio/reactivex/Maybe;.wrap:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind static;
  #L41bd3a.  v2:= temp @kind object;
  #L41bd3c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `concatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bd50.  v0:= "mapper is null" @kind object;
  #L41bd54.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bd5a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L41bd5e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41bd64.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bd6a.  v2:= temp @kind object;
  #L41bd6c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `concatWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.concatWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b6f8.  v0:= "other is null" @kind object;
  #L41b6fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b702.  call temp:= `concat`(v1, v2) @signature `Lio/reactivex/Maybe;.concat:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41b708.  v2:= temp @kind object;
  #L41b70a.  return v2 @kind object;
}
procedure `io.reactivex.Single` `contains`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.contains:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d1f8.  v0:= "item is null" @kind object;
  #L41d1fc.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d202.  v0:= new `io.reactivex.internal.operators.maybe.MaybeContains`;
  #L41d206.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeContains;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L41d20c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d212.  v2:= temp @kind object;
  #L41d214.  return v2 @kind object;
}
procedure `io.reactivex.Single` `count`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.count:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d228.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCount`;
  #L41d22c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41d232.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d238.  v0:= temp @kind object;
  #L41d23a.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `defaultIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.defaultIfEmpty:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bdb0.  v0:= "defaultItem is null" @kind object;
  #L41bdb4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bdba.  call temp:= `just`(v2) @signature `Lio/reactivex/Maybe;.just:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @kind static;
  #L41bdc0.  v2:= temp @kind object;
  #L41bdc2.  call temp:= `switchIfEmpty`(v1, v2) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L41bdc8.  v2:= temp @kind object;
  #L41bdca.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41be0c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41be12.  v0:= temp @kind object;
  #L41be14.  call temp:= `delay`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L41be1a.  v2:= temp @kind object;
  #L41be1c.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/Maybe;.delay:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41be30.  v0:= "unit is null" @kind object;
  #L41be34.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41be3a.  v0:= "scheduler is null" @kind object;
  #L41be3e.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41be44.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelay`;
  #L41be48.  v1:= 0L;
  #L41be4c.  call temp:= `max`(v1, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L41be52.  v3:= temp @kind wide;
  #L41be54.  v1:= v0 @kind object;
  #L41be56.  v2:= v7 @kind object;
  #L41be58.  v5:= v10 @kind object;
  #L41be5a.  v6:= v11 @kind object;
  #L41be5c.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelay;.<init>:(Lio/reactivex/MaybeSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41be62.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41be68.  v8:= temp @kind object;
  #L41be6a.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `delay`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delay:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41be7c.  v0:= "delayIndicator is null" @kind object;
  #L41be80.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41be86.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher`;
  #L41be8a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41be90.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41be96.  v2:= temp @kind object;
  #L41be98.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41beac.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41beb2.  v0:= temp @kind object;
  #L41beb4.  call temp:= `delaySubscription`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L41beba.  v2:= temp @kind object;
  #L41bebc.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41bed0.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Flowable;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind static;
  #L41bed6.  v1:= temp @kind object;
  #L41bed8.  call temp:= `delaySubscription`(v0, v1) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @kind virtual;
  #L41bede.  v1:= temp @kind object;
  #L41bee0.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `delaySubscription`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.delaySubscription:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bef4.  v0:= "subscriptionIndicator is null" @kind object;
  #L41bef8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41befe.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDelaySubscriptionOtherPublisher`;
  #L41bf02.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelaySubscriptionOtherPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41bf08.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bf0e.  v2:= temp @kind object;
  #L41bf10.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterSuccess`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doAfterSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bf24.  v0:= "onAfterSuccess is null" @kind object;
  #L41bf28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bf2e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoAfterSuccess`;
  #L41bf32.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoAfterSuccess;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;)V` @kind direct;
  #L41bf38.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bf3e.  v2:= temp @kind object;
  #L41bf40.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doAfterTerminate`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doAfterTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41bf54.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41bf58.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bf5e.  v2:= temp @kind object;
  #L41bf60.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bf66.  v3:= temp @kind object;
  #L41bf68.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bf6e.  v4:= temp @kind object;
  #L41bf70.  v5:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41bf74.  v0:= "onAfterTerminate is null" @kind object;
  #L41bf78.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bf7e.  v10:= temp @kind object;
  #L41bf80.  v6:= v10 @kind object;
  #L41bf82.  v6:= (`io.reactivex.functions.Action`) v6 @kind object;
  #L41bf86.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41bf8a.  v0:= v8 @kind object;
  #L41bf8c.  v1:= v9 @kind object;
  #L41bf8e.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41bf94.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bf9a.  v10:= temp @kind object;
  #L41bf9c.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doFinally`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Maybe;.doFinally:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bfb0.  v0:= "onFinally is null" @kind object;
  #L41bfb4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bfba.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoFinally`;
  #L41bfbe.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoFinally;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41bfc4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41bfca.  v2:= temp @kind object;
  #L41bfcc.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnComplete`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnComplete:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41bfe0.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41bfe4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bfea.  v2:= temp @kind object;
  #L41bfec.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bff2.  v3:= temp @kind object;
  #L41bff4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41bffa.  v4:= temp @kind object;
  #L41bffc.  v0:= "onComplete is null" @kind object;
  #L41c000.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c006.  v10:= temp @kind object;
  #L41c008.  v5:= v10 @kind object;
  #L41c00a.  v5:= (`io.reactivex.functions.Action`) v5 @kind object;
  #L41c00e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41c012.  v0:= v8 @kind object;
  #L41c014.  v1:= v9 @kind object;
  #L41c016.  v6:= v7 @kind object;
  #L41c018.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c01e.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c024.  v10:= temp @kind object;
  #L41c026.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnDispose`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Action` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnDispose:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41c038.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41c03c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c042.  v2:= temp @kind object;
  #L41c044.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c04a.  v3:= temp @kind object;
  #L41c04c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c052.  v4:= temp @kind object;
  #L41c054.  v6:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41c058.  v0:= "onDispose is null" @kind object;
  #L41c05c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c062.  v10:= temp @kind object;
  #L41c064.  v7:= v10 @kind object;
  #L41c066.  v7:= (`io.reactivex.functions.Action`) v7 @kind object;
  #L41c06a.  v0:= v8 @kind object;
  #L41c06c.  v1:= v9 @kind object;
  #L41c06e.  v5:= v6 @kind object;
  #L41c070.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c076.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c07c.  v10:= temp @kind object;
  #L41c07e.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnError`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnError:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41c090.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41c094.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c09a.  v2:= temp @kind object;
  #L41c09c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c0a2.  v3:= temp @kind object;
  #L41c0a4.  v0:= "onError is null" @kind object;
  #L41c0a8.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c0ae.  v10:= temp @kind object;
  #L41c0b0.  v4:= v10 @kind object;
  #L41c0b2.  v4:= (`io.reactivex.functions.Consumer`) v4 @kind object;
  #L41c0b6.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41c0ba.  v0:= v8 @kind object;
  #L41c0bc.  v1:= v9 @kind object;
  #L41c0be.  v5:= v7 @kind object;
  #L41c0c0.  v6:= v7 @kind object;
  #L41c0c2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c0c8.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c0ce.  v10:= temp @kind object;
  #L41c0d0.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnEvent`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiConsumer` v2 @kind object) @signature `Lio/reactivex/Maybe;.doOnEvent:(Lio/reactivex/functions/BiConsumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c0e4.  v0:= "onEvent is null" @kind object;
  #L41c0e8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c0ee.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoOnEvent`;
  #L41c0f2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnEvent;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L41c0f8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c0fe.  v2:= temp @kind object;
  #L41c100.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSubscribe`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSubscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41c114.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41c118.  v0:= "onSubscribe is null" @kind object;
  #L41c11c.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c122.  v10:= temp @kind object;
  #L41c124.  v2:= v10 @kind object;
  #L41c126.  v2:= (`io.reactivex.functions.Consumer`) v2 @kind object;
  #L41c12a.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c130.  v3:= temp @kind object;
  #L41c132.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c138.  v4:= temp @kind object;
  #L41c13a.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41c13e.  v0:= v8 @kind object;
  #L41c140.  v1:= v9 @kind object;
  #L41c142.  v5:= v7 @kind object;
  #L41c144.  v6:= v7 @kind object;
  #L41c146.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c14c.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c152.  v10:= temp @kind object;
  #L41c154.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnSuccess`(`io.reactivex.Maybe` v9 @kind this, `io.reactivex.functions.Consumer` v10 @kind object) @signature `Lio/reactivex/Maybe;.doOnSuccess:(Lio/reactivex/functions/Consumer;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41c168.  v8:= new `io.reactivex.internal.operators.maybe.MaybePeek`;
  #L41c16c.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c172.  v2:= temp @kind object;
  #L41c174.  v0:= "onSuccess is null" @kind object;
  #L41c178.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c17e.  v10:= temp @kind object;
  #L41c180.  v3:= v10 @kind object;
  #L41c182.  v3:= (`io.reactivex.functions.Consumer`) v3 @kind object;
  #L41c186.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41c18c.  v4:= temp @kind object;
  #L41c18e.  v7:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41c192.  v0:= v8 @kind object;
  #L41c194.  v1:= v9 @kind object;
  #L41c196.  v5:= v7 @kind object;
  #L41c198.  v6:= v7 @kind object;
  #L41c19a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/operators/maybe/MaybePeek;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c1a0.  call temp:= `onAssembly`(v8) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c1a6.  v10:= temp @kind object;
  #L41c1a8.  return v10 @kind object;
}
procedure `io.reactivex.Maybe` `doOnTerminate`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/Maybe;.doOnTerminate:(Lio/reactivex/functions/Action;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c1bc.  v0:= "onTerminate is null" @kind object;
  #L41c1c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c1c6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDoOnTerminate`;
  #L41c1ca.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeDoOnTerminate;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41c1d0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c1d6.  v2:= temp @kind object;
  #L41c1d8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `filter`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c26c.  v0:= "predicate is null" @kind object;
  #L41c270.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c276.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFilter`;
  #L41c27a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFilter;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L41c280.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c286.  v2:= temp @kind object;
  #L41c288.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c29c.  v0:= "mapper is null" @kind object;
  #L41c2a0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c2a6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatten`;
  #L41c2aa.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatten;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41c2b0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c2b6.  v2:= temp @kind object;
  #L41c2b8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c2cc.  v0:= "mapper is null" @kind object;
  #L41c2d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c2d6.  v0:= "resultSelector is null" @kind object;
  #L41c2da.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c2e0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapBiSelector`;
  #L41c2e4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapBiSelector;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L41c2ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c2f0.  v2:= temp @kind object;
  #L41c2f2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMap`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/Maybe;.flatMap:(Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c304.  v0:= "onSuccessMapper is null" @kind object;
  #L41c308.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c30e.  v0:= "onErrorMapper is null" @kind object;
  #L41c312.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c318.  v0:= "onCompleteSupplier is null" @kind object;
  #L41c31c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c322.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapNotification`;
  #L41c326.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapNotification;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L41c32c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c332.  v2:= temp @kind object;
  #L41c334.  return v2 @kind object;
}
procedure `io.reactivex.Completable` `flatMapCompletable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapCompletable:(Lio/reactivex/functions/Function;)Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b388.  v0:= "mapper is null" @kind object;
  #L41b38c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b392.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapCompletable`;
  #L41b396.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapCompletable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41b39c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L41b3a2.  v2:= temp @kind object;
  #L41b3a4.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flatMapObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d15c.  v0:= "mapper is null" @kind object;
  #L41d160.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d166.  v0:= new `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable`;
  #L41d16a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41d170.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L41d176.  v2:= temp @kind object;
  #L41d178.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flatMapPublisher`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapPublisher:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b71c.  v0:= "mapper is null" @kind object;
  #L41b720.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b726.  v0:= new `io.reactivex.internal.operators.mixed.MaybeFlatMapPublisher`;
  #L41b72a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapPublisher;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41b730.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b736.  v2:= temp @kind object;
  #L41b738.  return v2 @kind object;
}
procedure `io.reactivex.Single` `flatMapSingle`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingle:(Lio/reactivex/functions/Function;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d24c.  v0:= "mapper is null" @kind object;
  #L41d250.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d256.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle`;
  #L41d25a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41d260.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d266.  v2:= temp @kind object;
  #L41d268.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `flatMapSingleElement`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flatMapSingleElement:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c348.  v0:= "mapper is null" @kind object;
  #L41c34c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c352.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingleElement`;
  #L41c356.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingleElement;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41c35c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c362.  v2:= temp @kind object;
  #L41c364.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `flattenAsFlowable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsFlowable:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b74c.  v0:= "mapper is null" @kind object;
  #L41b750.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41b756.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable`;
  #L41b75a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41b760.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41b766.  v2:= temp @kind object;
  #L41b768.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `flattenAsObservable`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.flattenAsObservable:(Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d18c.  v0:= "mapper is null" @kind object;
  #L41d190.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d196.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable`;
  #L41d19a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41d1a0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L41d1a6.  v2:= temp @kind object;
  #L41d1a8.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `hide`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.hide:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c4d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeHide`;
  #L41c4d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeHide;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c4de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c4e4.  v0:= temp @kind object;
  #L41c4e6.  return v0 @kind object;
}
procedure `io.reactivex.Completable` `ignoreElement`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.ignoreElement:()Lio/reactivex/Completable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41b3b8.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIgnoreElementCompletable`;
  #L41b3bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIgnoreElementCompletable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41b3c2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Completable;)Lio/reactivex/Completable;` @kind static;
  #L41b3c8.  v0:= temp @kind object;
  #L41b3ca.  return v0 @kind object;
}
procedure `io.reactivex.Single` `isEmpty`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.isEmpty:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d27c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeIsEmptySingle`;
  #L41d280.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeIsEmptySingle;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41d286.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d28c.  v0:= temp @kind object;
  #L41d28e.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `lift`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeOperator` v2 @kind object) @signature `Lio/reactivex/Maybe;.lift:(Lio/reactivex/MaybeOperator;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c528.  v0:= "lift is null" @kind object;
  #L41c52c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c532.  v0:= new `io.reactivex.internal.operators.maybe.MaybeLift`;
  #L41c536.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeLift;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeOperator;)V` @kind direct;
  #L41c53c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c542.  v2:= temp @kind object;
  #L41c544.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `map`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.map:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c558.  v0:= "mapper is null" @kind object;
  #L41c55c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c562.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMap`;
  #L41c566.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41c56c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c572.  v2:= temp @kind object;
  #L41c574.  return v2 @kind object;
}
procedure `io.reactivex.Single` `materialize`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.materialize:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d2a0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeMaterialize`;
  #L41d2a4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMaterialize;.<init>:(Lio/reactivex/Maybe;)V` @kind direct;
  #L41d2aa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d2b0.  v0:= temp @kind object;
  #L41d2b2.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `mergeWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.mergeWith:(Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bb24.  v0:= "other is null" @kind object;
  #L41bb28.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41bb2e.  call temp:= `merge`(v1, v2) @signature `Lio/reactivex/Maybe;.merge:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Flowable;` @kind static;
  #L41bb34.  v2:= temp @kind object;
  #L41bb36.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `observeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c5e0.  v0:= "scheduler is null" @kind object;
  #L41c5e4.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c5ea.  v0:= new `io.reactivex.internal.operators.maybe.MaybeObserveOn`;
  #L41c5ee.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41c5f4.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c5fa.  v2:= temp @kind object;
  #L41c5fc.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `ofType`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lio/reactivex/Maybe;.ofType:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c610.  v0:= "clazz is null" @kind object;
  #L41c614.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c61a.  call temp:= `isInstanceOf`(v2) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L41c620.  v0:= temp @kind object;
  #L41c622.  call temp:= `filter`(v1, v0) @signature `Lio/reactivex/Maybe;.filter:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c628.  v0:= temp @kind object;
  #L41c62a.  call temp:= `cast`(v0, v2) @signature `Lio/reactivex/Maybe;.cast:(Ljava/lang/Class;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c630.  v2:= temp @kind object;
  #L41c632.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onErrorComplete:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c644.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L41c64a.  v0:= temp @kind object;
  #L41c64c.  call temp:= `onErrorComplete`(v1, v0) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c652.  v0:= temp @kind object;
  #L41c654.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorComplete`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorComplete:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c668.  v0:= "predicate is null" @kind object;
  #L41c66c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c672.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete`;
  #L41c676.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L41c67c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c682.  v2:= temp @kind object;
  #L41c684.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c698.  v0:= "next is null" @kind object;
  #L41c69c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c6a2.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L41c6a8.  v2:= temp @kind object;
  #L41c6aa.  call temp:= `onErrorResumeNext`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c6b0.  v2:= temp @kind object;
  #L41c6b2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/Maybe;.onErrorResumeNext:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41c6c4.  v0:= "resumeFunction is null" @kind object;
  #L41c6c8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c6ce.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L41c6d2.  v1:= 1I;
  #L41c6d4.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L41c6da.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c6e0.  v3:= temp @kind object;
  #L41c6e2.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c6f4.  v0:= "valueSupplier is null" @kind object;
  #L41c6f8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c6fe.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorReturn`;
  #L41c702.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorReturn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @kind direct;
  #L41c708.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c70e.  v2:= temp @kind object;
  #L41c710.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onErrorReturnItem`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.onErrorReturnItem:(Ljava/lang/Object;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c724.  v0:= "item is null" @kind object;
  #L41c728.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c72e.  call temp:= `justFunction`(v2) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L41c734.  v2:= temp @kind object;
  #L41c736.  call temp:= `onErrorReturn`(v1, v2) @signature `Lio/reactivex/Maybe;.onErrorReturn:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c73c.  v2:= temp @kind object;
  #L41c73e.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `onExceptionResumeNext`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.onExceptionResumeNext:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41c750.  v0:= "next is null" @kind object;
  #L41c754.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c75a.  v0:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext`;
  #L41c75e.  call temp:= `justFunction`(v3) @signature `Lio/reactivex/internal/functions/Functions;.justFunction:(Ljava/lang/Object;)Lio/reactivex/functions/Function;` @kind static;
  #L41c764.  v3:= temp @kind object;
  #L41c766.  v1:= 0I;
  #L41c768.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L41c76e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c774.  v3:= temp @kind object;
  #L41c776.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `onTerminateDetach`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.onTerminateDetach:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c788.  v0:= new `io.reactivex.internal.operators.maybe.MaybeDetach`;
  #L41c78c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c792.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c798.  v0:= temp @kind object;
  #L41c79a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.repeat:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41bb48.  v0:= 9223372036854775807L;
  #L41bb52.  call temp:= `repeat`(v2, v0) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L41bb58.  v0:= temp @kind object;
  #L41bb5a.  return v0 @kind object;
}
procedure `io.reactivex.Flowable` `repeat`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.repeat:(J)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bb6c.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41bb72.  v0:= temp @kind object;
  #L41bb74.  call temp:= `repeat`(v0, v2) @signature `Lio/reactivex/Flowable;.repeat:(J)Lio/reactivex/Flowable;` @kind virtual;
  #L41bb7a.  v2:= temp @kind object;
  #L41bb7c.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BooleanSupplier` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bb90.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41bb96.  v0:= temp @kind object;
  #L41bb98.  call temp:= `repeatUntil`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Flowable;` @kind virtual;
  #L41bb9e.  v2:= temp @kind object;
  #L41bba0.  return v2 @kind object;
}
procedure `io.reactivex.Flowable` `repeatWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bbb4.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41bbba.  v0:= temp @kind object;
  #L41bbbc.  call temp:= `repeatWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.repeatWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41bbc2.  v2:= temp @kind object;
  #L41bbc4.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.retry:()Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41c7ac.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L41c7b2.  v0:= temp @kind object;
  #L41c7b4.  v1:= 9223372036854775807L;
  #L41c7be.  call temp:= `retry`(v3, v1, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c7c4.  v0:= temp @kind object;
  #L41c7c6.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/Maybe;.retry:(J)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c828.  call temp:= `alwaysTrue`() @signature `Lio/reactivex/internal/functions/Functions;.alwaysTrue:()Lio/reactivex/functions/Predicate;` @kind static;
  #L41c82e.  v0:= temp @kind object;
  #L41c830.  call temp:= `retry`(v1, v2, v0) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c836.  v2:= temp @kind object;
  #L41c838.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c84c.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41c852.  v0:= temp @kind object;
  #L41c854.  call temp:= `retry`(v0, v2, v4) @signature `Lio/reactivex/Flowable;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L41c85a.  v2:= temp @kind object;
  #L41c85c.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L41c862.  v2:= temp @kind object;
  #L41c864.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.BiPredicate` v2 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c7d8.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41c7de.  v0:= temp @kind object;
  #L41c7e0.  call temp:= `retry`(v0, v2) @signature `Lio/reactivex/Flowable;.retry:(Lio/reactivex/functions/BiPredicate;)Lio/reactivex/Flowable;` @kind virtual;
  #L41c7e6.  v2:= temp @kind object;
  #L41c7e8.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L41c7ee.  v2:= temp @kind object;
  #L41c7f0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `retry`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/Maybe;.retry:(Lio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41c804.  v0:= 9223372036854775807L;
  #L41c80e.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c814.  v3:= temp @kind object;
  #L41c816.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryUntil`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.BooleanSupplier` v3 @kind object) @signature `Lio/reactivex/Maybe;.retryUntil:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41c878.  v0:= "stop is null" @kind object;
  #L41c87c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c882.  call temp:= `predicateReverseFor`(v3) @signature `Lio/reactivex/internal/functions/Functions;.predicateReverseFor:(Lio/reactivex/functions/BooleanSupplier;)Lio/reactivex/functions/Predicate;` @kind static;
  #L41c888.  v3:= temp @kind object;
  #L41c88a.  v0:= 9223372036854775807L;
  #L41c894.  call temp:= `retry`(v2, v0, v3) @signature `Lio/reactivex/Maybe;.retry:(JLio/reactivex/functions/Predicate;)Lio/reactivex/Maybe;` @kind virtual;
  #L41c89a.  v3:= temp @kind object;
  #L41c89c.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `retryWhen`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c8b0.  call temp:= `toFlowable`(v1) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @kind virtual;
  #L41c8b6.  v0:= temp @kind object;
  #L41c8b8.  call temp:= `retryWhen`(v0, v2) @signature `Lio/reactivex/Flowable;.retryWhen:(Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @kind virtual;
  #L41c8be.  v2:= temp @kind object;
  #L41c8c0.  call temp:= `singleElement`(v2) @signature `Lio/reactivex/Flowable;.singleElement:()Lio/reactivex/Maybe;` @kind virtual;
  #L41c8c6.  v2:= temp @kind object;
  #L41c8c8.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v3 @kind this) @signature `Lio/reactivex/Maybe;.subscribe:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L41d3b4.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L41d3ba.  v0:= temp @kind object;
  #L41d3bc.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41d3c0.  v2:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41d3c4.  call temp:= `subscribe`(v3, v0, v1, v2) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41d3ca.  v0:= temp @kind object;
  #L41d3cc.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41d3e0.  v0:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L41d3e4.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41d3e8.  call temp:= `subscribe`(v2, v3, v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41d3ee.  v3:= temp @kind object;
  #L41d3f0.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d404.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_ACTION` @type ^`io.reactivex.functions.Action` @kind object;
  #L41d408.  call temp:= `subscribe`(v1, v2, v3, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L41d40e.  v2:= temp @kind object;
  #L41d410.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `subscribe`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d424.  v0:= "onSuccess is null" @kind object;
  #L41d428.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d42e.  v0:= "onError is null" @kind object;
  #L41d432.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d438.  v0:= "onComplete is null" @kind object;
  #L41d43c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d442.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCallbackObserver`;
  #L41d446.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeCallbackObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @kind direct;
  #L41d44c.  call temp:= `subscribeWith`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind virtual;
  #L41d452.  v2:= temp @kind object;
  #L41d454.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L41d458.  return v2 @kind object;
}
procedure `void` `subscribe`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41d5a8.  v0:= "observer is null" @kind object;
  #L41d5ac.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d5b2.  call temp:= `onSubscribe`(v2, v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSubscribe:(Lio/reactivex/Maybe;Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @kind static;
  #L41d5b8.  v3:= temp @kind object;
  #L41d5ba.  v0:= "The RxJavaPlugins.onSubscribe hook returned a null MaybeObserver. Please check the handler provided to RxJavaPlugins.setOnMaybeSubscribe for invalid null returns. Further reading: https://github.com/ReactiveX/RxJava/wiki/Plugins" @kind object;
  #L41d5be.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d5c4.  call `subscribeActual`(v2, v3) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d5ca.  return @kind void;
  #L41d5cc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d5ce.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41d5d4.  v0:= new `java.lang.NullPointerException`;
  #L41d5d8.  v1:= "subscribeActual failed" @kind object;
  #L41d5dc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41d5e2.  call temp:= `initCause`(v0, v3) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L41d5e8.  throw v0;
  #L41d5ea.  v3:= Exception @type ^`java.lang.NullPointerException` @kind object;
  #L41d5ec.  throw v3;
  catch `java.lang.NullPointerException` @[L41d5c4..L41d5ca] goto L41d5ea;
  catch `java.lang.Throwable` @[L41d5c4..L41d5ca] goto L41d5cc;
}
procedure `void` `subscribeActual`(`io.reactivex.MaybeObserver` v0 @kind object) @signature `Lio/reactivex/Maybe;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `io.reactivex.Maybe` `subscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.subscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c8dc.  v0:= "scheduler is null" @kind object;
  #L41c8e0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c8e6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSubscribeOn`;
  #L41c8ea.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41c8f0.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c8f6.  v2:= temp @kind object;
  #L41c8f8.  return v2 @kind object;
}
procedure `io.reactivex.MaybeObserver` `subscribeWith`(`io.reactivex.Maybe` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/Maybe;.subscribeWith:(Lio/reactivex/MaybeObserver;)Lio/reactivex/MaybeObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41d144.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d14a.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `switchIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c90c.  v0:= "other is null" @kind object;
  #L41c910.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c916.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmpty`;
  #L41c91a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmpty;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c920.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c926.  v2:= temp @kind object;
  #L41c928.  return v2 @kind object;
}
procedure `io.reactivex.Single` `switchIfEmpty`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.switchIfEmpty:(Lio/reactivex/SingleSource;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d32c.  v0:= "other is null" @kind object;
  #L41d330.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d336.  v0:= new `io.reactivex.internal.operators.maybe.MaybeSwitchIfEmptySingle`;
  #L41d33a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeSwitchIfEmptySingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/SingleSource;)V` @kind direct;
  #L41d340.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d346.  v2:= temp @kind object;
  #L41d348.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c93c.  v0:= "other is null" @kind object;
  #L41c940.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c946.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe`;
  #L41c94a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c950.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c956.  v2:= temp @kind object;
  #L41c958.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `takeUntil`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/Maybe;.takeUntil:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c96c.  v0:= "other is null" @kind object;
  #L41c970.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c976.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher`;
  #L41c97a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;)V` @kind direct;
  #L41c980.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c986.  v2:= temp @kind object;
  #L41c988.  return v2 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.test:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d46c.  v0:= new `io.reactivex.observers.TestObserver`;
  #L41d470.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L41d476.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d47c.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `test`(`io.reactivex.Maybe` v1 @kind this, `boolean` v2 ) @signature `Lio/reactivex/Maybe;.test:(Z)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d490.  v0:= new `io.reactivex.observers.TestObserver`;
  #L41d494.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L41d49a.  if v2 == 0 then goto L41d4a4;
  #L41d49e.  call `cancel`(v0) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @kind virtual;
  #L41d4a4.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Maybe;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind virtual;
  #L41d4aa.  return v0 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ca04.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41ca0a.  v0:= temp @kind object;
  #L41ca0c.  call temp:= `timeout`(v1, v2, v4, v0) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind virtual;
  #L41ca12.  v2:= temp @kind object;
  #L41ca14.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v7 @kind this, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.MaybeSource` v11 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L41ca28.  v0:= "fallback is null" @kind object;
  #L41ca2c.  call temp:= `requireNonNull`(v11, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ca32.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L41ca38.  v5:= temp @kind object;
  #L41ca3a.  v1:= v7 @kind object;
  #L41ca3c.  v2:= v8 @kind wide;
  #L41ca3e.  v4:= v10 @kind object;
  #L41ca40.  v6:= v11 @kind object;
  #L41ca42.  call temp:= `timeout`(v1, v2, v4, v5, v6) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L41ca48.  v8:= temp @kind object;
  #L41ca4a.  return v8 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object, `io.reactivex.Scheduler` v4 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L41ca5c.  call temp:= `timer`(v1, v3, v4) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L41ca62.  v1:= temp @kind object;
  #L41ca64.  call temp:= `timeout`(v0, v1) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L41ca6a.  v1:= temp @kind object;
  #L41ca6c.  return v1 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `io.reactivex.MaybeSource` v6 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41ca80.  v0:= "fallback is null" @kind object;
  #L41ca84.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41ca8a.  call temp:= `timer`(v2, v4, v5) @signature `Lio/reactivex/Maybe;.timer:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @kind static;
  #L41ca90.  v2:= temp @kind object;
  #L41ca92.  call temp:= `timeout`(v1, v2, v6) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @kind virtual;
  #L41ca98.  v2:= temp @kind object;
  #L41ca9a.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41c99c.  v0:= "timeoutIndicator is null" @kind object;
  #L41c9a0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c9a6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L41c9aa.  v1:= 0I;
  #L41c9ac.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c9b2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c9b8.  v3:= temp @kind object;
  #L41c9ba.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41c9cc.  v0:= "timeoutIndicator is null" @kind object;
  #L41c9d0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c9d6.  v0:= "fallback is null" @kind object;
  #L41c9da.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41c9e0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe`;
  #L41c9e4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41c9ea.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41c9f0.  v2:= temp @kind object;
  #L41c9f2.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v2 @kind this, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41caac.  v0:= "timeoutIndicator is null" @kind object;
  #L41cab0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cab6.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L41caba.  v1:= 0I;
  #L41cabc.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41cac2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cac8.  v3:= temp @kind object;
  #L41caca.  return v3 @kind object;
}
procedure `io.reactivex.Maybe` `timeout`(`io.reactivex.Maybe` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/Maybe;.timeout:(Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41cadc.  v0:= "timeoutIndicator is null" @kind object;
  #L41cae0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cae6.  v0:= "fallback is null" @kind object;
  #L41caea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41caf0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher`;
  #L41caf4.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher;.<init>:(Lio/reactivex/MaybeSource;Lorg/reactivestreams/Publisher;Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41cafa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cb00.  v2:= temp @kind object;
  #L41cb02.  return v2 @kind object;
}
procedure `java.lang.Object` `to`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Maybe;.to:(Lio/reactivex/functions/Function;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d548.  v0:= "convert is null" @kind object;
  #L41d54c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d552.  v2:= temp @kind object;
  #L41d554.  v2:= (`io.reactivex.functions.Function`) v2 @kind object;
  #L41d558.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L41d55e.  v2:= temp @kind object;
  #L41d560.  return v2 @kind object;
  #L41d562.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L41d564.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L41d56a.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L41d570.  v2:= temp @kind object;
  #L41d572.  throw v2;
  catch `java.lang.Throwable` @[L41d548..L41d560] goto L41d562;
}
procedure `io.reactivex.Flowable` `toFlowable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41bbd8.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToFlowable` @kind boolean;
  #L41bbdc.  if v0 == 0 then goto L41bbf0;
  #L41bbe0.  v0:= v1 @kind object;
  #L41bbe2.  v0:= (`io.reactivex.internal.fuseable.FuseToFlowable`) v0 @kind object;
  #L41bbe6.  call temp:= `fuseToFlowable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToFlowable;.fuseToFlowable:()Lio/reactivex/Flowable;` @kind interface;
  #L41bbec.  v0:= temp @kind object;
  #L41bbee.  return v0 @kind object;
  #L41bbf0.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToFlowable`;
  #L41bbf4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToFlowable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41bbfa.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L41bc00.  v0:= temp @kind object;
  #L41bc02.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `toObservable`(`io.reactivex.Maybe` v1 @kind this) @signature `Lio/reactivex/Maybe;.toObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d1bc.  v0:= instanceof @variable v1 @type ^`io.reactivex.internal.fuseable.FuseToObservable` @kind boolean;
  #L41d1c0.  if v0 == 0 then goto L41d1d4;
  #L41d1c4.  v0:= v1 @kind object;
  #L41d1c6.  v0:= (`io.reactivex.internal.fuseable.FuseToObservable`) v0 @kind object;
  #L41d1ca.  call temp:= `fuseToObservable`(v0) @signature `Lio/reactivex/internal/fuseable/FuseToObservable;.fuseToObservable:()Lio/reactivex/Observable;` @kind interface;
  #L41d1d0.  v0:= temp @kind object;
  #L41d1d2.  return v0 @kind object;
  #L41d1d4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToObservable`;
  #L41d1d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToObservable;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L41d1de.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L41d1e4.  v0:= temp @kind object;
  #L41d1e6.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v2 @kind this) @signature `Lio/reactivex/Maybe;.toSingle:()Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L41d35c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L41d360.  v1:= 0I;
  #L41d362.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L41d368.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d36e.  v0:= temp @kind object;
  #L41d370.  return v0 @kind object;
}
procedure `io.reactivex.Single` `toSingle`(`io.reactivex.Maybe` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/Maybe;.toSingle:(Ljava/lang/Object;)Lio/reactivex/Single;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d384.  v0:= "defaultValue is null" @kind object;
  #L41d388.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d38e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeToSingle`;
  #L41d392.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle;.<init>:(Lio/reactivex/MaybeSource;Ljava/lang/Object;)V` @kind direct;
  #L41d398.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Single;)Lio/reactivex/Single;` @kind static;
  #L41d39e.  v2:= temp @kind object;
  #L41d3a0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `unsubscribeOn`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/Maybe;.unsubscribeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41cbc4.  v0:= "scheduler is null" @kind object;
  #L41cbc8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41cbce.  v0:= new `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn`;
  #L41cbd2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/Scheduler;)V` @kind direct;
  #L41cbd8.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Maybe;)Lio/reactivex/Maybe;` @kind static;
  #L41cbde.  v2:= temp @kind object;
  #L41cbe0.  return v2 @kind object;
}
procedure `io.reactivex.Maybe` `zipWith`(`io.reactivex.Maybe` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/Maybe;.zipWith:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L41d120.  v0:= "other is null" @kind object;
  #L41d124.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L41d12a.  call temp:= `zip`(v1, v2, v3) @signature `Lio/reactivex/Maybe;.zip:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiFunction;)Lio/reactivex/Maybe;` @kind static;
  #L41d130.  v2:= temp @kind object;
  #L41d132.  return v2 @kind object;
}
