record `io.reactivex.observers.TestObserver` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.observers.TestObserver.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.TestObserver.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueDisposable` `io.reactivex.observers.TestObserver.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48e2b0.  v0:= `@@io.reactivex.observers.TestObserver$a.INSTANCE` @type ^`io.reactivex.observers.TestObserver$a` @kind object;
  #L48e2b4.  call `<init>`(v1, v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L48e2ba.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48e2cc.  call `<init>`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L48e2d2.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48e2d6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48e2dc.  v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L48e2e0.  v1.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L48e2e4.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver` `create`() @signature `Lio/reactivex/observers/TestObserver;.create:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e278.  v0:= new `io.reactivex.observers.TestObserver`;
  #L48e27c.  call `<init>`(v0) @signature `Lio/reactivex/observers/TestObserver;.<init>:()V` @kind direct;
  #L48e282.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `create`(`io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.create:(Lio/reactivex/Observer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e294.  v0:= new `io.reactivex.observers.TestObserver`;
  #L48e298.  call `<init>`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L48e29e.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L48e190.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L48e196.  v0:= temp @kind object;
  #L48e198.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertNotSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertNotSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e1c8.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e1cc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e1d2.  v0:= temp @kind object;
  #L48e1d4.  if v0 != 0 then goto L48e1f8;
  #L48e1d8.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e1dc.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L48e1e2.  v0:= temp;
  #L48e1e4.  if v0 == 0 then goto L48e1ea;
  #L48e1e8.  return v1 @kind object;
  #L48e1ea.  v0:= "Not subscribed but errors found" @kind object;
  #L48e1ee.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48e1f4.  v0:= temp @kind object;
  #L48e1f6.  throw v0;
  #L48e1f8.  v0:= "Subscribed!" @kind object;
  #L48e1fc.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48e202.  v0:= temp @kind object;
  #L48e204.  throw v0;
}
procedure `io.reactivex.observers.TestObserver` `assertOf`(`io.reactivex.observers.TestObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e218.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48e21e.  return v0 @kind object;
  #L48e220.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e222.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48e228.  v1:= temp @kind object;
  #L48e22a.  throw v1;
  catch `java.lang.Throwable` @[L48e218..L48e21e] goto L48e220;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L48e1ac.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @kind virtual;
  #L48e1b2.  v0:= temp @kind object;
  #L48e1b4.  return v0 @kind object;
}
procedure `io.reactivex.observers.TestObserver` `assertSubscribed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.assertSubscribed:()Lio/reactivex/observers/TestObserver;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e248.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e24c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e252.  v0:= temp @kind object;
  #L48e254.  if v0 == 0 then goto L48e25a;
  #L48e258.  return v1 @kind object;
  #L48e25a.  v0:= "Not subscribed!" @kind object;
  #L48e25e.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48e264.  v0:= temp @kind object;
  #L48e266.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.observers.TestObserver` v0 @kind this) @signature `Lio/reactivex/observers/TestObserver;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48e2f8.  call `dispose`(v0) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @kind virtual;
  #L48e2fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e310.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e314.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48e31a.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e120.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e124.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e12a.  v0:= temp @kind object;
  #L48e12c.  if v0 == 0 then goto L48e134;
  #L48e130.  v0:= 1I;
  #L48e132.  goto L48e136;
  #L48e134.  v0:= 0I;
  #L48e136.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e148.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @kind virtual;
  #L48e14e.  v0:= temp;
  #L48e150.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.TestObserver` v1 @kind this) @signature `Lio/reactivex/observers/TestObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48e164.  v0:= v1.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e168.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e16e.  v0:= temp @kind object;
  #L48e170.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L48e174.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48e17a.  v0:= temp;
  #L48e17c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver` v4 @kind this) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e32c.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L48e330.  if v0 != 0 then goto L48e362;
  #L48e334.  v0:= 1I;
  #L48e336.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L48e33a.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e33e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e344.  v0:= temp @kind object;
  #L48e346.  if v0 != 0 then goto L48e362;
  #L48e34a.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e34e.  v1:= new `java.lang.IllegalStateException`;
  #L48e352.  v2:= "onSubscribe not called in proper order" @kind object;
  #L48e356.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e35c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e362.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48e368.  v0:= temp @kind object;
  #L48e36a.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L48e36e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48e372.  v2:= 1L;
  #L48e376.  v0:= v0 + v2 @kind long;
  #L48e378.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L48e37c.  v0:= v4.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48e380.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48e386.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48e38a.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L48e390.  return @kind void;
  #L48e392.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e394.  v1:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48e398.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L48e39e.  throw v0;
  catch `java.lang.Throwable` @[L48e362..L48e386] goto L48e392;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48e3bc.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L48e3c0.  if v0 != 0 then goto L48e3f2;
  #L48e3c4.  v0:= 1I;
  #L48e3c6.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L48e3ca.  v0:= v3.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e3ce.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e3d4.  v0:= temp @kind object;
  #L48e3d6.  if v0 != 0 then goto L48e3f2;
  #L48e3da.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e3de.  v1:= new `java.lang.IllegalStateException`;
  #L48e3e2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L48e3e6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e3ec.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e3f2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48e3f8.  v0:= temp @kind object;
  #L48e3fa.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L48e3fe.  if v4 != 0 then goto L48e41c;
  #L48e402.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e406.  v1:= new `java.lang.NullPointerException`;
  #L48e40a.  v2:= "onError received a null Throwable" @kind object;
  #L48e40e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e414.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e41a.  goto L48e426;
  #L48e41c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e420.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e426.  v0:= v3.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48e42a.  call `onError`(v0, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48e430.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48e434.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L48e43a.  return @kind void;
  #L48e43c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e43e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48e442.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L48e448.  throw v4;
  catch `java.lang.Throwable` @[L48e3f2..L48e430] goto L48e43c;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48e468.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L48e46c.  if v0 != 0 then goto L48e49e;
  #L48e470.  v0:= 1I;
  #L48e472.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L48e476.  v0:= v3.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e47a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e480.  v0:= temp @kind object;
  #L48e482.  if v0 != 0 then goto L48e49e;
  #L48e486.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e48a.  v1:= new `java.lang.IllegalStateException`;
  #L48e48e.  v2:= "onSubscribe not called in proper order" @kind object;
  #L48e492.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e498.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e49e.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48e4a4.  v0:= temp @kind object;
  #L48e4a6.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L48e4aa.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int`;
  #L48e4ae.  v1:= 2I;
  #L48e4b0.  if v0 != v1 then goto L48e4e8;
  #L48e4b4.  v4:= v3.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L48e4b8.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48e4be.  v4:= temp @kind object;
  #L48e4c0.  if v4 == 0 then goto L48e4e6;
  #L48e4c4.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48e4c8.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e4ce.  goto L48e4b4;
  #L48e4d0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e4d2.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e4d6.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e4dc.  v4:= v3.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L48e4e0.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e4e6.  return @kind void;
  #L48e4e8.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48e4ec.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e4f2.  if v4 != 0 then goto L48e50e;
  #L48e4f6.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e4fa.  v1:= new `java.lang.NullPointerException`;
  #L48e4fe.  v2:= "onNext received a null value" @kind object;
  #L48e502.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e508.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e50e.  v0:= v3.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48e512.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48e518.  return @kind void;
  catch `java.lang.Throwable` @[L48e4b4..L48e4ce] goto L48e4d0;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48e538.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48e53e.  v0:= temp @kind object;
  #L48e540.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L48e544.  if v5 != 0 then goto L48e562;
  #L48e548.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e54c.  v0:= new `java.lang.NullPointerException`;
  #L48e550.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L48e554.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e55a.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e560.  return @kind void;
  #L48e562.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e566.  v1:= 0I;
  #L48e568.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48e56e.  v0:= temp;
  #L48e570.  if v0 != 0 then goto L48e5c6;
  #L48e574.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48e57a.  v0:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e57e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48e584.  v0:= temp @kind object;
  #L48e586.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L48e58a.  if v0 == v1 then goto L48e5c4;
  #L48e58e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e592.  v1:= new `java.lang.IllegalStateException`;
  #L48e596.  v2:= new `java.lang.StringBuilder`;
  #L48e59a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48e5a0.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L48e5a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e5aa.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48e5b0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48e5b6.  v5:= temp @kind object;
  #L48e5b8.  call `<init>`(v1, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48e5be.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e5c4.  return @kind void;
  #L48e5c6.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.initialFusionMode` @type ^`int`;
  #L48e5ca.  if v0 == 0 then goto L48e64a;
  #L48e5ce.  v1:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L48e5d2.  if v1 == 0 then goto L48e64a;
  #L48e5d6.  v1:= v5 @kind object;
  #L48e5d8.  v1:= (`io.reactivex.internal.fuseable.QueueDisposable`) v1 @kind object;
  #L48e5dc.  v4.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` := v1 @kind object;
  #L48e5e0.  call temp:= `requestFusion`(v1, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L48e5e6.  v0:= temp;
  #L48e5e8.  v4.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int` := v0;
  #L48e5ec.  v1:= 1I;
  #L48e5ee.  if v0 != v1 then goto L48e64a;
  #L48e5f2.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L48e5f6.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48e5fc.  v5:= temp @kind object;
  #L48e5fe.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v5 @kind object;
  #L48e602.  v5:= v4.`io.reactivex.observers.TestObserver.c` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L48e606.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48e60c.  v5:= temp @kind object;
  #L48e60e.  if v5 == 0 then goto L48e61e;
  #L48e612.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48e616.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e61c.  goto L48e602;
  #L48e61e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48e622.  v2:= 1L;
  #L48e626.  v0:= v0 + v2 @kind long;
  #L48e628.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L48e62c.  v5:= v4.`io.reactivex.observers.TestObserver.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48e630.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L48e634.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48e63a.  goto L48e648;
  #L48e63c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48e63e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48e642.  call temp:= `add`(v0, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48e648.  return @kind void;
  #L48e64a.  v0:= v4.`io.reactivex.observers.TestObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48e64e.  call `onSubscribe`(v0, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L48e654.  return @kind void;
  catch `java.lang.Throwable` @[L48e602..L48e63a] goto L48e63c;
}
procedure `void` `onSuccess`(`io.reactivex.observers.TestObserver` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L48e674.  call `onNext`(v0, v1) @signature `Lio/reactivex/observers/TestObserver;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L48e67a.  call `onComplete`(v0) @signature `Lio/reactivex/observers/TestObserver;.onComplete:()V` @kind virtual;
  #L48e680.  return @kind void;
}
