record `io.reactivex.observers.ResourceSingleObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.ResourceSingleObserver.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.disposables.ListCompositeDisposable` `io.reactivex.observers.ResourceSingleObserver.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.ResourceSingleObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceSingleObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48d7e0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48d7e6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48d7ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48d7f0.  v1.`io.reactivex.observers.ResourceSingleObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L48d7f4.  v0:= new `io.reactivex.internal.disposables.ListCompositeDisposable`;
  #L48d7f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.<init>:()V` @kind direct;
  #L48d7fe.  v1.`io.reactivex.observers.ResourceSingleObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` := v0 @kind object;
  #L48d802.  return @kind void;
}
procedure `void` `add`(`io.reactivex.observers.ResourceSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/observers/ResourceSingleObserver;.add:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d814.  v0:= "resource is null" @kind object;
  #L48d818.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48d81e.  v0:= v1.`io.reactivex.observers.ResourceSingleObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L48d822.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L48d828.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.ResourceSingleObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceSingleObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d83c.  v0:= v1.`io.reactivex.observers.ResourceSingleObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d840.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48d846.  v0:= temp;
  #L48d848.  if v0 == 0 then goto L48d856;
  #L48d84c.  v0:= v1.`io.reactivex.observers.ResourceSingleObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L48d850.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.dispose:()V` @kind virtual;
  #L48d856.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.ResourceSingleObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d7b4.  v0:= v1.`io.reactivex.observers.ResourceSingleObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d7b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48d7be.  v0:= temp @kind object;
  #L48d7c0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L48d7c4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48d7ca.  v0:= temp;
  #L48d7cc.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.ResourceSingleObserver` v0 @kind this) @signature `Lio/reactivex/observers/ResourceSingleObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L48d868.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.ResourceSingleObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/ResourceSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d87c.  v0:= v2.`io.reactivex.observers.ResourceSingleObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d880.  v1:= constclass @type ^`io.reactivex.observers.ResourceSingleObserver` @kind object;
  #L48d884.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L48d88a.  v3:= temp;
  #L48d88c.  if v3 == 0 then goto L48d896;
  #L48d890.  call `onStart`(v2) @signature `Lio/reactivex/observers/ResourceSingleObserver;.onStart:()V` @kind virtual;
  #L48d896.  return @kind void;
}
