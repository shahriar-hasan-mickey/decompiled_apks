record `io.reactivex.observers.BaseTestConsumer` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.disposables.Disposable` @kind interface {
  `boolean` `io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @AccessFlag PROTECTED;
  `long` `io.reactivex.observers.BaseTestConsumer.completions` @AccessFlag PROTECTED;
  `java.util.concurrent.CountDownLatch` `io.reactivex.observers.BaseTestConsumer.done` @AccessFlag PROTECTED_FINAL;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.errors` @AccessFlag PROTECTED_FINAL;
  `int` `io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @AccessFlag PROTECTED;
  `int` `io.reactivex.observers.BaseTestConsumer.initialFusionMode` @AccessFlag PROTECTED;
  `java.lang.Thread` `io.reactivex.observers.BaseTestConsumer.lastThread` @AccessFlag PROTECTED;
  `java.lang.CharSequence` `io.reactivex.observers.BaseTestConsumer.tag` @AccessFlag PROTECTED;
  `boolean` `io.reactivex.observers.BaseTestConsumer.timeout` @AccessFlag PROTECTED;
  `java.util.List` `io.reactivex.observers.BaseTestConsumer.values` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48d144.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48d14a.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L48d14e.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L48d154.  v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` := v0 @kind object;
  #L48d158.  v0:= new `io.reactivex.internal.util.VolatileSizeArrayList`;
  #L48d15c.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/VolatileSizeArrayList;.<init>:()V` @kind direct;
  #L48d162.  v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` := v0 @kind object;
  #L48d166.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L48d16a.  v1:= 1I;
  #L48d16c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L48d172.  v2.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` := v0 @kind object;
  #L48d176.  return @kind void;
}
procedure `java.lang.String` `valueAndClass`(`java.lang.Object` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48d014.  if v2 == 0 then goto L48d05c;
  #L48d018.  v0:= new `java.lang.StringBuilder`;
  #L48d01c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48d022.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d028.  v1:= " (class: " @kind object;
  #L48d02c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d032.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L48d038.  v2:= temp @kind object;
  #L48d03a.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L48d040.  v2:= temp @kind object;
  #L48d042.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d048.  v2:= ")" @kind object;
  #L48d04c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48d052.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48d058.  v2:= temp @kind object;
  #L48d05a.  return v2 @kind object;
  #L48d05c.  v2:= "null" @kind object;
  #L48d060.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c07c.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48c080.  v2:= 0L;
  #L48c084.  v4:= lcmp(v0, v2);
  #L48c088.  if v4 == 0 then goto L48c0c6;
  #L48c08c.  v2:= 1L;
  #L48c090.  v4:= lcmp(v0, v2);
  #L48c094.  if v4 > 0 then goto L48c09a;
  #L48c098.  return v5 @kind object;
  #L48c09a.  v2:= new `java.lang.StringBuilder`;
  #L48c09e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c0a4.  v3:= "Multiple completions: " @kind object;
  #L48c0a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c0ae.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c0b4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c0ba.  v0:= temp @kind object;
  #L48c0bc.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c0c2.  v0:= temp @kind object;
  #L48c0c4.  throw v0;
  #L48c0c6.  v0:= "Not completed" @kind object;
  #L48c0ca.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c0d0.  v0:= temp @kind object;
  #L48c0d2.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertEmpty`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertEmpty:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c0e4.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c0ea.  v0:= temp @kind object;
  #L48c0ec.  call temp:= `assertNoValues`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c0f2.  v0:= temp @kind object;
  #L48c0f4.  call temp:= `assertNoErrors`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c0fa.  v0:= temp @kind object;
  #L48c0fc.  call temp:= `assertNotComplete`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c102.  v0:= temp @kind object;
  #L48c104.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `io.reactivex.functions.Predicate` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c118.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c11c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c122.  v0:= temp;
  #L48c124.  if v0 == 0 then goto L48c192;
  #L48c128.  v1:= 0I;
  #L48c12a.  v2:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c12e.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48c134.  v2:= temp @kind object;
  #L48c136.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48c13c.  v3:= temp;
  #L48c13e.  v4:= 1I;
  #L48c140.  if v3 == 0 then goto L48c16c;
  #L48c144.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48c14a.  v3:= temp @kind object;
  #L48c14c.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L48c150.  call temp:= `test`(v6, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L48c156.  v3:= temp;
  #L48c158.  if v3 == 0 then goto L48c136;
  #L48c15c.  v1:= 1I;
  #L48c15e.  goto L48c16c;
  #L48c160.  v6:= Exception @type ^`java.lang.Exception` @kind object;
  #L48c162.  call temp:= `wrapOrThrow`(v6) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48c168.  v6:= temp @kind object;
  #L48c16a.  throw v6;
  #L48c16c.  if v1 == 0 then goto L48c184;
  #L48c170.  if v0 != v4 then goto L48c176;
  #L48c174.  return v5 @kind object;
  #L48c176.  v6:= "Error present but other errors as well" @kind object;
  #L48c17a.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c180.  v6:= temp @kind object;
  #L48c182.  throw v6;
  #L48c184.  v6:= "Error not present" @kind object;
  #L48c188.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c18e.  v6:= temp @kind object;
  #L48c190.  throw v6;
  #L48c192.  v6:= "No errors" @kind object;
  #L48c196.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c19c.  v6:= temp @kind object;
  #L48c19e.  throw v6;
  catch `java.lang.Exception` @[L48c150..L48c158] goto L48c160;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c1c0.  call temp:= `isInstanceOf`(v1) @signature `Lio/reactivex/internal/functions/Functions;.isInstanceOf:(Ljava/lang/Class;)Lio/reactivex/functions/Predicate;` @kind static;
  #L48c1c6.  v1:= temp @kind object;
  #L48c1c8.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c1ce.  v1:= temp @kind object;
  #L48c1d0.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertError`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Throwable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48c1e4.  call temp:= `equalsWith`(v1) @signature `Lio/reactivex/internal/functions/Functions;.equalsWith:(Ljava/lang/Object;)Lio/reactivex/functions/Predicate;` @kind static;
  #L48c1ea.  v1:= temp @kind object;
  #L48c1ec.  call temp:= `assertError`(v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c1f2.  v1:= temp @kind object;
  #L48c1f4.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertErrorMessage`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48c208.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c20c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c212.  v0:= temp;
  #L48c214.  if v0 == 0 then goto L48c290;
  #L48c218.  v1:= 1I;
  #L48c21a.  if v0 != v1 then goto L48c282;
  #L48c21e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c222.  v1:= 0I;
  #L48c224.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c22a.  v0:= temp @kind object;
  #L48c22c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48c230.  call temp:= `getMessage`(v0) @signature `Ljava/lang/Throwable;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L48c236.  v0:= temp @kind object;
  #L48c238.  call temp:= `equals`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48c23e.  v1:= temp;
  #L48c240.  if v1 == 0 then goto L48c246;
  #L48c244.  return v3 @kind object;
  #L48c246.  v1:= new `java.lang.StringBuilder`;
  #L48c24a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c250.  v2:= "Error message differs; exptected: " @kind object;
  #L48c254.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c25a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c260.  v4:= " but was: " @kind object;
  #L48c264.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c26a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c270.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c276.  v4:= temp @kind object;
  #L48c278.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c27e.  v4:= temp @kind object;
  #L48c280.  throw v4;
  #L48c282.  v4:= "Multiple errors" @kind object;
  #L48c286.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c28c.  v4:= temp @kind object;
  #L48c28e.  throw v4;
  #L48c290.  v4:= "No errors" @kind object;
  #L48c294.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c29a.  v4:= temp @kind object;
  #L48c29c.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Lio/reactivex/functions/Predicate;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c2b0.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2b6.  v0:= temp @kind object;
  #L48c2b8.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2be.  v3:= temp @kind object;
  #L48c2c0.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2c6.  v2:= temp @kind object;
  #L48c2c8.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2ce.  v2:= temp @kind object;
  #L48c2d0.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailure`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailure:(Ljava/lang/Class;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c2e4.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2ea.  v0:= temp @kind object;
  #L48c2ec.  call temp:= `assertValues`(v0, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2f2.  v3:= temp @kind object;
  #L48c2f4.  call temp:= `assertError`(v3, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c2fa.  v2:= temp @kind object;
  #L48c2fc.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c302.  v2:= temp @kind object;
  #L48c304.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertFailureAndMessage`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertFailureAndMessage:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c318.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c31e.  v0:= temp @kind object;
  #L48c320.  call temp:= `assertValues`(v0, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c326.  v4:= temp @kind object;
  #L48c328.  call temp:= `assertError`(v4, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertError:(Ljava/lang/Class;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c32e.  v2:= temp @kind object;
  #L48c330.  call temp:= `assertErrorMessage`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertErrorMessage:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c336.  v2:= temp @kind object;
  #L48c338.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c33e.  v2:= temp @kind object;
  #L48c340.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `io.reactivex.functions.Predicate` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48c354.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c358.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c35e.  v0:= temp;
  #L48c360.  v1:= 0I;
  #L48c362.  if v1 >= v0 then goto L48c3de;
  #L48c366.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c36a.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c370.  v2:= temp @kind object;
  #L48c372.  call temp:= `test`(v4, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L48c378.  v2:= temp;
  #L48c37a.  if v2 != 0 then goto L48c384;
  #L48c37e.  v1:= v1 + 1;
  #L48c382.  goto L48c362;
  #L48c384.  v0:= new `java.lang.StringBuilder`;
  #L48c388.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c38e.  v2:= "Value at position " @kind object;
  #L48c392.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c398.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c39e.  v1:= " matches predicate " @kind object;
  #L48c3a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c3a8.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c3ae.  v4:= temp @kind object;
  #L48c3b0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c3b6.  v4:= ", which was not expected." @kind object;
  #L48c3ba.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c3c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c3c6.  v4:= temp @kind object;
  #L48c3c8.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c3ce.  v4:= temp @kind object;
  #L48c3d0.  throw v4;
  #L48c3d2.  v4:= Exception @type ^`java.lang.Exception` @kind object;
  #L48c3d4.  call temp:= `wrapOrThrow`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48c3da.  v4:= temp @kind object;
  #L48c3dc.  throw v4;
  #L48c3de.  return v3 @kind object;
  catch `java.lang.Exception` @[L48c372..L48c3d2] goto L48c3d2;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNever`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNever:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48c400.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c404.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c40a.  v0:= temp;
  #L48c40c.  v1:= 0I;
  #L48c40e.  if v1 >= v0 then goto L48c47e;
  #L48c412.  v2:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c416.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c41c.  v2:= temp @kind object;
  #L48c41e.  call temp:= `equals`(v2, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48c424.  v2:= temp;
  #L48c426.  if v2 != 0 then goto L48c430;
  #L48c42a.  v1:= v1 + 1;
  #L48c42e.  goto L48c40e;
  #L48c430.  v0:= new `java.lang.StringBuilder`;
  #L48c434.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c43a.  v2:= "Value at position " @kind object;
  #L48c43e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c444.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c44a.  v1:= " is equal to " @kind object;
  #L48c44e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c454.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c45a.  v4:= temp @kind object;
  #L48c45c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c462.  v4:= "; Expected them to be different" @kind object;
  #L48c466.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c46c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c472.  v4:= temp @kind object;
  #L48c474.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c47a.  v4:= temp @kind object;
  #L48c47c.  throw v4;
  #L48c47e.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoErrors`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48c490.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c494.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c49a.  v0:= temp;
  #L48c49c.  if v0 != 0 then goto L48c4a2;
  #L48c4a0.  return v2 @kind object;
  #L48c4a2.  v0:= new `java.lang.StringBuilder`;
  #L48c4a6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c4ac.  v1:= "Error(s) present: " @kind object;
  #L48c4b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c4b6.  v1:= v2.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c4ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c4c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c4c6.  v0:= temp @kind object;
  #L48c4c8.  call temp:= `fail`(v2, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c4ce.  v0:= temp @kind object;
  #L48c4d0.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c4e4.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L48c4e8.  if v0 != 0 then goto L48c4ee;
  #L48c4ec.  return v1 @kind object;
  #L48c4ee.  v0:= "Timeout?!" @kind object;
  #L48c4f2.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c4f8.  v0:= temp @kind object;
  #L48c4fa.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNoValues`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c50c.  v0:= 0I;
  #L48c50e.  call temp:= `assertValueCount`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c514.  v0:= temp @kind object;
  #L48c516.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotComplete`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c528.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48c52c.  v2:= 1L;
  #L48c530.  v4:= lcmp(v0, v2);
  #L48c534.  if v4 == 0 then goto L48c56a;
  #L48c538.  if v4 > 0 then goto L48c53e;
  #L48c53c.  return v5 @kind object;
  #L48c53e.  v2:= new `java.lang.StringBuilder`;
  #L48c542.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c548.  v3:= "Multiple completions: " @kind object;
  #L48c54c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c552.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c558.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c55e.  v0:= temp @kind object;
  #L48c560.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c566.  v0:= temp @kind object;
  #L48c568.  throw v0;
  #L48c56a.  v0:= "Completed!" @kind object;
  #L48c56e.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c574.  v0:= temp @kind object;
  #L48c576.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c588.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48c58c.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48c592.  v0:= temp @kind wide;
  #L48c594.  v2:= 0L;
  #L48c598.  v4:= lcmp(v0, v2);
  #L48c59c.  if v4 == 0 then goto L48c5a2;
  #L48c5a0.  return v5 @kind object;
  #L48c5a2.  v0:= "Subscriber terminated!" @kind object;
  #L48c5a6.  call temp:= `fail`(v5, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c5ac.  v0:= temp @kind object;
  #L48c5ae.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertResult`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertResult:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c5c0.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c5c6.  v0:= temp @kind object;
  #L48c5c8.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c5ce.  v2:= temp @kind object;
  #L48c5d0.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c5d6.  v2:= temp @kind object;
  #L48c5d8.  call temp:= `assertComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c5de.  v2:= temp @kind object;
  #L48c5e0.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`() @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTerminated`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTerminated:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48c5f4.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48c5f8.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48c5fe.  v0:= temp @kind wide;
  #L48c600.  v2:= 0L;
  #L48c604.  v4:= lcmp(v0, v2);
  #L48c608.  if v4 != 0 then goto L48c6c2;
  #L48c60c.  v0:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48c610.  v4:= 1L;
  #L48c614.  v6:= lcmp(v0, v4);
  #L48c618.  if v6 > 0 then goto L48c696;
  #L48c61c.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c620.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c626.  v4:= temp;
  #L48c628.  v5:= 1I;
  #L48c62a.  if v4 > v5 then goto L48c66a;
  #L48c62e.  v5:= lcmp(v0, v2);
  #L48c632.  if v5 == 0 then goto L48c668;
  #L48c636.  if v4 != 0 then goto L48c63c;
  #L48c63a.  goto L48c668;
  #L48c63c.  v2:= new `java.lang.StringBuilder`;
  #L48c640.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c646.  v3:= "Terminated with multiple completions and errors: " @kind object;
  #L48c64a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c650.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c656.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c65c.  v0:= temp @kind object;
  #L48c65e.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c664.  v0:= temp @kind object;
  #L48c666.  throw v0;
  #L48c668.  return v7 @kind object;
  #L48c66a.  v0:= new `java.lang.StringBuilder`;
  #L48c66e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c674.  v1:= "Terminated with multiple errors: " @kind object;
  #L48c678.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c67e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c684.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c68a.  v0:= temp @kind object;
  #L48c68c.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c692.  v0:= temp @kind object;
  #L48c694.  throw v0;
  #L48c696.  v2:= new `java.lang.StringBuilder`;
  #L48c69a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c6a0.  v3:= "Terminated with multiple completions: " @kind object;
  #L48c6a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c6aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c6b0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c6b6.  v0:= temp @kind object;
  #L48c6b8.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c6be.  v0:= temp @kind object;
  #L48c6c0.  throw v0;
  #L48c6c2.  v0:= "Subscriber still running!" @kind object;
  #L48c6c6.  call temp:= `fail`(v7, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c6cc.  v0:= temp @kind object;
  #L48c6ce.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c6e0.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L48c6e4.  if v0 == 0 then goto L48c6ea;
  #L48c6e8.  return v1 @kind object;
  #L48c6ea.  v0:= "No timeout?!" @kind object;
  #L48c6ee.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c6f4.  v0:= temp @kind object;
  #L48c6f6.  throw v0;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Lio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c708.  v0:= 0I;
  #L48c70a.  call temp:= `assertValueAt`(v1, v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48c710.  v2:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c714.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c71a.  v2:= temp;
  #L48c71c.  v0:= 1I;
  #L48c71e.  if v2 > v0 then goto L48c724;
  #L48c722.  return v1 @kind object;
  #L48c724.  v2:= "Value present but other values as well" @kind object;
  #L48c728.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c72e.  v2:= temp @kind object;
  #L48c730.  throw v2;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValue`(`io.reactivex.observers.BaseTestConsumer` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValue:(Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48c744.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c748.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c74e.  v0:= temp;
  #L48c750.  v1:= " but was: " @kind object;
  #L48c754.  v2:= "expected: " @kind object;
  #L48c758.  v3:= 1I;
  #L48c75a.  if v0 != v3 then goto L48c7be;
  #L48c75e.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c762.  v3:= 0I;
  #L48c764.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c76a.  v0:= temp @kind object;
  #L48c76c.  call temp:= `equals`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48c772.  v3:= temp;
  #L48c774.  if v3 == 0 then goto L48c77a;
  #L48c778.  return v4 @kind object;
  #L48c77a.  v3:= new `java.lang.StringBuilder`;
  #L48c77e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c784.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c78a.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c790.  v5:= temp @kind object;
  #L48c792.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c798.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c79e.  call temp:= `valueAndClass`(v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c7a4.  v5:= temp @kind object;
  #L48c7a6.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c7ac.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c7b2.  v5:= temp @kind object;
  #L48c7b4.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c7ba.  v5:= temp @kind object;
  #L48c7bc.  throw v5;
  #L48c7be.  v0:= new `java.lang.StringBuilder`;
  #L48c7c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c7c8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c7ce.  call temp:= `valueAndClass`(v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c7d4.  v5:= temp @kind object;
  #L48c7d6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c7dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c7e2.  v5:= v4.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c7e6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c7ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c7f2.  v5:= temp @kind object;
  #L48c7f4.  call temp:= `fail`(v4, v5) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c7fa.  v5:= temp @kind object;
  #L48c7fc.  throw v5;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `int` v2 , `io.reactivex.functions.Predicate` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILio/reactivex/functions/Predicate;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c810.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c814.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c81a.  v0:= temp;
  #L48c81c.  if v0 == 0 then goto L48c890;
  #L48c820.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c824.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c82a.  v0:= temp;
  #L48c82c.  if v2 >= v0 then goto L48c864;
  #L48c830.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c834.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c83a.  v2:= temp @kind object;
  #L48c83c.  call temp:= `test`(v3, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L48c842.  v2:= temp;
  #L48c844.  if v2 == 0 then goto L48c84a;
  #L48c848.  return v1 @kind object;
  #L48c84a.  v2:= "Value not present" @kind object;
  #L48c84e.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c854.  v2:= temp @kind object;
  #L48c856.  throw v2;
  #L48c858.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L48c85a.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48c860.  v2:= temp @kind object;
  #L48c862.  throw v2;
  #L48c864.  v3:= new `java.lang.StringBuilder`;
  #L48c868.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c86e.  v0:= "Invalid index: " @kind object;
  #L48c872.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c878.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c87e.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c884.  v2:= temp @kind object;
  #L48c886.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c88c.  v2:= temp @kind object;
  #L48c88e.  throw v2;
  #L48c890.  v2:= "No values" @kind object;
  #L48c894.  call temp:= `fail`(v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c89a.  v2:= temp @kind object;
  #L48c89c.  throw v2;
  catch `java.lang.Exception` @[L48c830..L48c844] goto L48c858;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueAt`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueAt:(ILjava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48c8c0.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c8c4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c8ca.  v0:= temp;
  #L48c8cc.  if v0 == 0 then goto L48c966;
  #L48c8d0.  if v3 >= v0 then goto L48c93a;
  #L48c8d4.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c8d8.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48c8de.  v3:= temp @kind object;
  #L48c8e0.  call temp:= `equals`(v4, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48c8e6.  v0:= temp;
  #L48c8e8.  if v0 == 0 then goto L48c8ee;
  #L48c8ec.  return v2 @kind object;
  #L48c8ee.  v0:= new `java.lang.StringBuilder`;
  #L48c8f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c8f8.  v1:= "expected: " @kind object;
  #L48c8fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c902.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c908.  v4:= temp @kind object;
  #L48c90a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c910.  v4:= " but was: " @kind object;
  #L48c914.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c91a.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48c920.  v3:= temp @kind object;
  #L48c922.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c928.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c92e.  v3:= temp @kind object;
  #L48c930.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c936.  v3:= temp @kind object;
  #L48c938.  throw v3;
  #L48c93a.  v4:= new `java.lang.StringBuilder`;
  #L48c93e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c944.  v0:= "Invalid index: " @kind object;
  #L48c948.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c94e.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c954.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c95a.  v3:= temp @kind object;
  #L48c95c.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c962.  v3:= temp @kind object;
  #L48c964.  throw v3;
  #L48c966.  v3:= "No values" @kind object;
  #L48c96a.  call temp:= `fail`(v2, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c970.  v3:= temp @kind object;
  #L48c972.  throw v3;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48c984.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c988.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c98e.  v0:= temp;
  #L48c990.  if v0 != v4 then goto L48c996;
  #L48c994.  return v3 @kind object;
  #L48c996.  v1:= new `java.lang.StringBuilder`;
  #L48c99a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48c9a0.  v2:= "Value counts differ; expected: " @kind object;
  #L48c9a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c9aa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c9b0.  v4:= " but was: " @kind object;
  #L48c9b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c9ba.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48c9c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48c9c6.  v4:= temp @kind object;
  #L48c9c8.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48c9ce.  v4:= temp @kind object;
  #L48c9d0.  throw v4;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSequence`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `java.lang.Iterable` v6 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48c9e4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c9e8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48c9ee.  v0:= temp @kind object;
  #L48c9f0.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48c9f6.  v6:= temp @kind object;
  #L48c9f8.  v1:= 0I;
  #L48c9fa.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48ca00.  v2:= temp;
  #L48ca02.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48ca08.  v3:= temp;
  #L48ca0a.  if v3 == 0 then goto L48ca92;
  #L48ca0e.  if v2 != 0 then goto L48ca14;
  #L48ca12.  goto L48ca92;
  #L48ca14.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48ca1a.  v2:= temp @kind object;
  #L48ca1c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48ca22.  v3:= temp @kind object;
  #L48ca24.  call temp:= `equals`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48ca2a.  v4:= temp;
  #L48ca2c.  if v4 == 0 then goto L48ca36;
  #L48ca30.  v1:= v1 + 1;
  #L48ca34.  goto L48c9fa;
  #L48ca36.  v6:= new `java.lang.StringBuilder`;
  #L48ca3a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48ca40.  v0:= "Values at position " @kind object;
  #L48ca44.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca4a.  call temp:= `append`(v6, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca50.  v0:= " differ; expected: " @kind object;
  #L48ca54.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca5a.  call temp:= `valueAndClass`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48ca60.  v0:= temp @kind object;
  #L48ca62.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca68.  v0:= " but was: " @kind object;
  #L48ca6c.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca72.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48ca78.  v0:= temp @kind object;
  #L48ca7a.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ca80.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48ca86.  v6:= temp @kind object;
  #L48ca88.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48ca8e.  v6:= temp @kind object;
  #L48ca90.  throw v6;
  #L48ca92.  v6:= ")" @kind object;
  #L48ca96.  if v3 != 0 then goto L48cad2;
  #L48ca9a.  if v2 != 0 then goto L48caa0;
  #L48ca9e.  return v5 @kind object;
  #L48caa0.  v0:= new `java.lang.StringBuilder`;
  #L48caa4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48caaa.  v2:= "Fewer values received than expected (" @kind object;
  #L48caae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cab4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48caba.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cac0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48cac6.  v6:= temp @kind object;
  #L48cac8.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48cace.  v6:= temp @kind object;
  #L48cad0.  throw v6;
  #L48cad2.  v0:= new `java.lang.StringBuilder`;
  #L48cad6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48cadc.  v2:= "More values received than expected (" @kind object;
  #L48cae0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cae6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48caec.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48caf2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48caf8.  v6:= temp @kind object;
  #L48cafa.  call temp:= `fail`(v5, v6) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48cb00.  v6:= temp @kind object;
  #L48cb02.  throw v6;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSequenceOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequenceOnly:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cb14.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cb1a.  v0:= temp @kind object;
  #L48cb1c.  call temp:= `assertValueSequence`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSequence:(Ljava/lang/Iterable;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cb22.  v2:= temp @kind object;
  #L48cb24.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cb2a.  v2:= temp @kind object;
  #L48cb2c.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cb32.  v2:= temp @kind object;
  #L48cb34.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSet`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSet:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48cb48.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L48cb4e.  v0:= temp;
  #L48cb50.  if v0 == 0 then goto L48cb5c;
  #L48cb54.  call temp:= `assertNoValues`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoValues:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cb5a.  return v3 @kind object;
  #L48cb5c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48cb60.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48cb66.  v0:= temp @kind object;
  #L48cb68.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48cb6e.  v1:= temp;
  #L48cb70.  if v1 == 0 then goto L48cbbe;
  #L48cb74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48cb7a.  v1:= temp @kind object;
  #L48cb7c.  call temp:= `contains`(v4, v1) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L48cb82.  v2:= temp;
  #L48cb84.  if v2 == 0 then goto L48cb8a;
  #L48cb88.  goto L48cb68;
  #L48cb8a.  v4:= new `java.lang.StringBuilder`;
  #L48cb8e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48cb94.  v0:= "Value not in the expected collection: " @kind object;
  #L48cb98.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cb9e.  call temp:= `valueAndClass`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48cba4.  v0:= temp @kind object;
  #L48cba6.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cbac.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48cbb2.  v4:= temp @kind object;
  #L48cbb4.  call temp:= `fail`(v3, v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48cbba.  v4:= temp @kind object;
  #L48cbbc.  throw v4;
  #L48cbbe.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValueSetOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSetOnly:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cbd0.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cbd6.  v0:= temp @kind object;
  #L48cbd8.  call temp:= `assertValueSet`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValueSet:(Ljava/util/Collection;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cbde.  v2:= temp @kind object;
  #L48cbe0.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cbe6.  v2:= temp @kind object;
  #L48cbe8.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cbee.  v2:= temp @kind object;
  #L48cbf0.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValues`(`io.reactivex.observers.BaseTestConsumer` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48cc04.  v0:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48cc08.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48cc0e.  v0:= temp;
  #L48cc10.  v1:= length @variable v7;
  #L48cc12.  v2:= " but was: " @kind object;
  #L48cc16.  if v0 != v1 then goto L48cc9c;
  #L48cc1a.  v1:= 0I;
  #L48cc1c.  if v1 >= v0 then goto L48cc9a;
  #L48cc20.  v3:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48cc24.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48cc2a.  v3:= temp @kind object;
  #L48cc2c.  v4:= v7[v1] @kind object;
  #L48cc30.  call temp:= `equals`(v4, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L48cc36.  v5:= temp;
  #L48cc38.  if v5 == 0 then goto L48cc42;
  #L48cc3c.  v1:= v1 + 1;
  #L48cc40.  goto L48cc1c;
  #L48cc42.  v7:= new `java.lang.StringBuilder`;
  #L48cc46.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48cc4c.  v0:= "Values at position " @kind object;
  #L48cc50.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc56.  call temp:= `append`(v7, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc5c.  v0:= " differ; expected: " @kind object;
  #L48cc60.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc66.  call temp:= `valueAndClass`(v4) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48cc6c.  v0:= temp @kind object;
  #L48cc6e.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc74.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc7a.  call temp:= `valueAndClass`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueAndClass:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48cc80.  v0:= temp @kind object;
  #L48cc82.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cc88.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48cc8e.  v7:= temp @kind object;
  #L48cc90.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48cc96.  v7:= temp @kind object;
  #L48cc98.  throw v7;
  #L48cc9a.  return v6 @kind object;
  #L48cc9c.  v1:= new `java.lang.StringBuilder`;
  #L48cca0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48cca6.  v3:= "Value count differs; expected: " @kind object;
  #L48ccaa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccb0.  v3:= length @variable v7;
  #L48ccb2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccb8.  v3:= " " @kind object;
  #L48ccbc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccc2.  call temp:= `toString`(v7) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L48ccc8.  v7:= temp @kind object;
  #L48ccca.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccd0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccd6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccdc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cce2.  v7:= v6.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48cce6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ccec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48ccf2.  v7:= temp @kind object;
  #L48ccf4.  call temp:= `fail`(v6, v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L48ccfa.  v7:= temp @kind object;
  #L48ccfc.  throw v7;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertValuesOnly`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValuesOnly:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48cd10.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cd16.  v0:= temp @kind object;
  #L48cd18.  call temp:= `assertValues`(v0, v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertValues:([Ljava/lang/Object;)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cd1e.  v2:= temp @kind object;
  #L48cd20.  call temp:= `assertNoErrors`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNoErrors:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cd26.  v2:= temp @kind object;
  #L48cd28.  call temp:= `assertNotComplete`(v2) @signature `Lio/reactivex/observers/BaseTestConsumer;.assertNotComplete:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cd2e.  v2:= temp @kind object;
  #L48cd30.  return v2 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48cd44.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48cd48.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48cd4e.  v0:= temp @kind wide;
  #L48cd50.  v2:= 0L;
  #L48cd54.  v4:= lcmp(v0, v2);
  #L48cd58.  if v4 != 0 then goto L48cd5e;
  #L48cd5c.  return v5 @kind object;
  #L48cd5e.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48cd62.  call `await`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L48cd68.  return v5 @kind object;
}
procedure `boolean` `await`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48bf30.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48bf34.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48bf3a.  v0:= temp @kind wide;
  #L48bf3c.  v2:= 0L;
  #L48bf40.  v4:= lcmp(v0, v2);
  #L48bf44.  if v4 == 0 then goto L48bf5e;
  #L48bf48.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48bf4c.  call temp:= `await`(v0, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L48bf52.  v6:= temp;
  #L48bf54.  if v6 == 0 then goto L48bf5a;
  #L48bf58.  goto L48bf5e;
  #L48bf5a.  v6:= 0I;
  #L48bf5c.  goto L48bf60;
  #L48bf5e.  v6:= 1I;
  #L48bf60.  v7:= v6 ^~ 1;
  #L48bf64.  v5.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v7 @kind boolean;
  #L48bf68.  return v6;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(I)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48cd7c.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48cd80.  v1:= 5000L;
  #L48cd84.  call temp:= `awaitCount`(v3, v4, v0, v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cd8a.  v4:= temp @kind object;
  #L48cd8c.  return v4 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48cda0.  v0:= 5000L;
  #L48cda4.  call temp:= `awaitCount`(v2, v3, v4, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48cdaa.  v3:= temp @kind object;
  #L48cdac.  return v3 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitCount`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this, `int` v8 , `java.lang.Runnable` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitCount:(ILjava/lang/Runnable;J)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48cdc0.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L48cdc6.  v0:= temp @kind wide;
  #L48cdc8.  v2:= 0L;
  #L48cdcc.  v4:= lcmp(v10, v2);
  #L48cdd0.  if v4 <= 0 then goto L48cdee;
  #L48cdd4.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L48cdda.  v4:= temp @kind wide;
  #L48cddc.  v4:= v4 - v0 @kind long;
  #L48cdde.  v6:= lcmp(v4, v10);
  #L48cde2.  if v6 < 0 then goto L48cdee;
  #L48cde6.  v8:= 1I;
  #L48cde8.  v7.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v8 @kind boolean;
  #L48cdec.  goto L48ce14;
  #L48cdee.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48cdf2.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48cdf8.  v4:= temp @kind wide;
  #L48cdfa.  v6:= lcmp(v4, v2);
  #L48cdfe.  if v6 != 0 then goto L48ce04;
  #L48ce02.  goto L48ce14;
  #L48ce04.  v2:= v7.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48ce08.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48ce0e.  v2:= temp;
  #L48ce10.  if v2 < v8 then goto L48ce16;
  #L48ce14.  return v7 @kind object;
  #L48ce16.  call `run`(v9) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L48ce1c.  goto L48cdc8;
}
procedure `io.reactivex.observers.BaseTestConsumer` `awaitDone`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitDone:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ce30.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48ce34.  call temp:= `await`(v0, v2, v4) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L48ce3a.  v2:= temp;
  #L48ce3c.  if v2 != 0 then goto L48ce4c;
  #L48ce40.  v2:= 1I;
  #L48ce42.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v2 @kind boolean;
  #L48ce46.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48ce4c.  return v1 @kind object;
  #L48ce4e.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L48ce50.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48ce56.  call temp:= `wrapOrThrow`(v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L48ce5c.  v2:= temp @kind object;
  #L48ce5e.  throw v2;
  catch `java.lang.InterruptedException` @[L48ce30..L48ce4c] goto L48ce4e;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bf7c.  call temp:= `await`(v1) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:()Lio/reactivex/observers/BaseTestConsumer;` @kind virtual;
  #L48bf82.  v0:= 1I;
  #L48bf84.  return v0;
  #L48bf86.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48bf8c.  v0:= temp @kind object;
  #L48bf8e.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L48bf94.  v0:= 0I;
  #L48bf96.  return v0;
  catch `java.lang.InterruptedException` @[L48bf7c..L48bf82] goto L48bf86;
}
procedure `boolean` `awaitTerminalEvent`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.awaitTerminalEvent:(JLjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48bfb8.  call temp:= `await`(v0, v1, v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L48bfbe.  v1:= temp;
  #L48bfc0.  return v1;
  #L48bfc2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48bfc8.  v1:= temp @kind object;
  #L48bfca.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L48bfd0.  v1:= 0I;
  #L48bfd2.  return v1;
  catch `java.lang.InterruptedException` @[L48bfb8..L48bfc0] goto L48bfc2;
}
procedure `io.reactivex.observers.BaseTestConsumer` `clearTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.clearTimeout:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48ce80.  v0:= 0I;
  #L48ce82.  v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` := v0 @kind boolean;
  #L48ce86.  return v1 @kind object;
}
procedure `long` `completions`(`io.reactivex.observers.BaseTestConsumer` v2 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.completions:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d12c.  v0:= v2.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48d130.  return v0 @kind wide;
}
procedure `int` `errorCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errorCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c03c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48c040.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c046.  v0:= temp;
  #L48c048.  return v0;
}
procedure `java.util.List` `errors`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d08c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48d090.  return v0 @kind object;
}
procedure `java.lang.AssertionError` `fail`(`io.reactivex.observers.BaseTestConsumer` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L48ceb0.  v0:= new `java.lang.StringBuilder`;
  #L48ceb4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L48ceba.  v1:= temp;
  #L48cebc.  v1:= v1 + 64;
  #L48cec0.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L48cec6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cecc.  v4:= " (" @kind object;
  #L48ced0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48ced6.  v4:= "latch = " @kind object;
  #L48ceda.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cee0.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48cee4.  call temp:= `getCount`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48ceea.  v1:= temp @kind wide;
  #L48ceec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cef2.  v4:= ", " @kind object;
  #L48cef6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cefc.  v1:= "values = " @kind object;
  #L48cf00.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf06.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48cf0a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48cf10.  v1:= temp;
  #L48cf12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf18.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf1e.  v1:= "errors = " @kind object;
  #L48cf22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf28.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48cf2c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48cf32.  v1:= temp;
  #L48cf34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf3a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf40.  v4:= "completions = " @kind object;
  #L48cf44.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf4a.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48cf4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf54.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L48cf58.  if v4 == 0 then goto L48cf66;
  #L48cf5c.  v4:= ", timeout!" @kind object;
  #L48cf60.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf66.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L48cf6c.  v4:= temp;
  #L48cf6e.  if v4 == 0 then goto L48cf7c;
  #L48cf72.  v4:= ", disposed!" @kind object;
  #L48cf76.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf7c.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` @kind object;
  #L48cf80.  if v4 == 0 then goto L48cf94;
  #L48cf84.  v1:= ", tag = " @kind object;
  #L48cf88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf8e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/CharSequence;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf94.  v4:= 41I;
  #L48cf98.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L48cf9e.  v4:= new `java.lang.AssertionError`;
  #L48cfa2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48cfa8.  v0:= temp @kind object;
  #L48cfaa.  call `<init>`(v4, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L48cfb0.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48cfb4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L48cfba.  v0:= temp;
  #L48cfbc.  if v0 != 0 then goto L48d000;
  #L48cfc0.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48cfc4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48cfca.  v0:= temp;
  #L48cfcc.  v1:= 1I;
  #L48cfce.  if v0 != v1 then goto L48cfec;
  #L48cfd2.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48cfd6.  v1:= 0I;
  #L48cfd8.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48cfde.  v0:= temp @kind object;
  #L48cfe0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48cfe4.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L48cfea.  goto L48d000;
  #L48cfec.  v0:= new `io.reactivex.exceptions.CompositeException`;
  #L48cff0.  v1:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L48cff4.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L48cffa.  call temp:= `initCause`(v4, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L48d000.  return v4 @kind object;
}
procedure `java.util.List` `getEvents`(`io.reactivex.observers.BaseTestConsumer` v7 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.getEvents:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48d0a4.  v0:= new `java.util.ArrayList`;
  #L48d0a8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48d0ae.  call temp:= `values`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @kind virtual;
  #L48d0b4.  v1:= temp @kind object;
  #L48d0b6.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48d0bc.  call temp:= `errors`(v7) @signature `Lio/reactivex/observers/BaseTestConsumer;.errors:()Ljava/util/List;` @kind virtual;
  #L48d0c2.  v1:= temp @kind object;
  #L48d0c4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48d0ca.  v1:= new `java.util.ArrayList`;
  #L48d0ce.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48d0d4.  v2:= 0L;
  #L48d0d8.  v4:= v7.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L48d0dc.  v6:= lcmp(v2, v4);
  #L48d0e0.  if v6 >= 0 then goto L48d0fa;
  #L48d0e4.  call temp:= `createOnComplete`() @signature `Lio/reactivex/Notification;.createOnComplete:()Lio/reactivex/Notification;` @kind static;
  #L48d0ea.  v4:= temp @kind object;
  #L48d0ec.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48d0f2.  v4:= 1L;
  #L48d0f6.  v2:= v2 + v4 @kind long;
  #L48d0f8.  goto L48d0d8;
  #L48d0fa.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48d100.  return v0 @kind object;
}
procedure `boolean` `isTerminated`(`io.reactivex.observers.BaseTestConsumer` v5 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTerminated:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48bff4.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L48bff8.  call temp:= `getCount`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L48bffe.  v0:= temp @kind wide;
  #L48c000.  v2:= 0L;
  #L48c004.  v4:= lcmp(v0, v2);
  #L48c008.  if v4 != 0 then goto L48c010;
  #L48c00c.  v0:= 1I;
  #L48c00e.  goto L48c012;
  #L48c010.  v0:= 0I;
  #L48c012.  return v0;
}
procedure `boolean` `isTimeout`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.isTimeout:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c024.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.timeout` @type ^`boolean` @kind boolean;
  #L48c028.  return v0;
}
procedure `java.lang.Thread` `lastThread`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.lastThread:()Ljava/lang/Thread;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d074.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` @kind object;
  #L48d078.  return v0 @kind object;
}
procedure `int` `valueCount`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.valueCount:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48c05c.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48c060.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48c066.  v0:= temp;
  #L48c068.  return v0;
}
procedure `java.util.List` `values`(`io.reactivex.observers.BaseTestConsumer` v1 @kind this) @signature `Lio/reactivex/observers/BaseTestConsumer;.values:()Ljava/util/List;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d114.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L48d118.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `withTag`(`io.reactivex.observers.BaseTestConsumer` v0 @kind this, `java.lang.CharSequence` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer;.withTag:(Ljava/lang/CharSequence;)Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L48ce98.  v0.`io.reactivex.observers.BaseTestConsumer.tag` @type ^`java.lang.CharSequence` := v1 @kind object;
  #L48ce9c.  return v0 @kind object;
}
