record `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `java.lang.Runnable` @kind interface {
}
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48be08.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$a`;
  #L48be0c.  v1:= "SPIN" @kind object;
  #L48be10.  v2:= 0I;
  #L48be12.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be18.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be1c.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$b`;
  #L48be20.  v1:= "YIELD" @kind object;
  #L48be24.  v3:= 1I;
  #L48be26.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$b;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be2c.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be30.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$c`;
  #L48be34.  v1:= "SLEEP_1MS" @kind object;
  #L48be38.  v4:= 2I;
  #L48be3a.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$c;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be40.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be44.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$d`;
  #L48be48.  v1:= "SLEEP_10MS" @kind object;
  #L48be4c.  v5:= 3I;
  #L48be4e.  call `<init>`(v0, v1, v5) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be54.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be58.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$e`;
  #L48be5c.  v1:= "SLEEP_100MS" @kind object;
  #L48be60.  v6:= 4I;
  #L48be62.  call `<init>`(v0, v1, v6) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$e;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be68.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be6c.  v0:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy$f`;
  #L48be70.  v1:= "SLEEP_1000MS" @kind object;
  #L48be74.  v7:= 5I;
  #L48be76.  call `<init>`(v0, v1, v7) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy$f;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48be7c.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1000MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` := v0 @kind object;
  #L48be80.  v1:= 6I;
  #L48be82.  v1:= new `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[v1];
  #L48be86.  v8:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SPIN` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48be8a.  v1[v2]:= v8 @kind object;
  #L48be8e.  v2:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.YIELD` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48be92.  v1[v3]:= v2 @kind object;
  #L48be96.  v2:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_1MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48be9a.  v1[v4]:= v2 @kind object;
  #L48be9e.  v2:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_10MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48bea2.  v1[v5]:= v2 @kind object;
  #L48bea6.  v2:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.SLEEP_100MS` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48beaa.  v1[v6]:= v2 @kind object;
  #L48beae.  v1[v7]:= v0 @kind object;
  #L48beb2.  `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] := v1 @kind object;
  #L48beb6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48bec8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48bece.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `io.reactivex.observers.BaseTestConsumer$a` v3 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;ILio/reactivex/observers/BaseTestConsumer$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L48bee0.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48bee6.  return @kind void;
}
procedure `void` `sleep`(`int` v2 ) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.sleep:(I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L48bef8.  v0:= (`long`) v2 @kind i2l;
  #L48befa.  call `sleep`(v0) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L48bf00.  return @kind void;
  #L48bf02.  v2:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L48bf04.  v0:= new `java.lang.RuntimeException`;
  #L48bf08.  call `<init>`(v0, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L48bf0e.  throw v0;
  catch `java.lang.InterruptedException` @[L48befa..L48bf00] goto L48bf02;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48bdc0.  v0:= constclass @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy` @kind object;
  #L48bdc4.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L48bdca.  v1:= temp @kind object;
  #L48bdcc.  v1:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`) v1 @kind object;
  #L48bdd0.  return v1 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] `values`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.values:()[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48bde4.  v0:= `@@io.reactivex.observers.BaseTestConsumer$TestWaitStrategy.$VALUES` @type ^`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[] @kind object;
  #L48bde8.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48bdee.  v0:= temp @kind object;
  #L48bdf0.  v0:= (`io.reactivex.observers.BaseTestConsumer$TestWaitStrategy`[]) v0 @kind object;
  #L48bdf4.  return v0 @kind object;
}
procedure `void` `run`() @signature `Lio/reactivex/observers/BaseTestConsumer$TestWaitStrategy;.run:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
