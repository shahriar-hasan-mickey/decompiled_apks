record `io.reactivex.observers.SerializedObserver` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.observers.SerializedObserver.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.observers.SerializedObserver.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.observers.SerializedObserver.c` @AccessFlag ;
  `boolean` `io.reactivex.observers.SerializedObserver.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.observers.SerializedObserver.e` @AccessFlag ;
  `boolean` `io.reactivex.observers.SerializedObserver.f` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.observers.SerializedObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48dd68.  v0:= 0I;
  #L48dd6a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;Z)V` @kind direct;
  #L48dd70.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.SerializedObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48dd84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48dd8a.  v0.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L48dd8e.  v0.`io.reactivex.observers.SerializedObserver.b` @type ^`boolean` := v2 @kind boolean;
  #L48dd92.  return @kind void;
}
procedure `void` `a`(`io.reactivex.observers.SerializedObserver` v2 @kind this) @signature `Lio/reactivex/observers/SerializedObserver;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48ddc0.  @monitorenter v2
  #L48ddc2.  v0:= v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L48ddc6.  if v0 != 0 then goto L48ddd4;
  #L48ddca.  v0:= 0I;
  #L48ddcc.  v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L48ddd0.  @monitorexit v2
  #L48ddd2.  return @kind void;
  #L48ddd4.  v1:= 0I;
  #L48ddd6.  v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L48ddda.  @monitorexit v2
  #L48dddc.  v1:= v2.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48dde0.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lio/reactivex/Observer;)Z` @kind virtual;
  #L48dde6.  v0:= temp;
  #L48dde8.  if v0 == 0 then goto L48ddc0;
  #L48ddec.  return @kind void;
  #L48ddee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48ddf0.  @monitorexit v2
  #L48ddf2.  throw v0;
  catch `java.lang.Throwable` @[L48ddc2..L48dddc] goto L48ddee;
  catch `java.lang.Throwable` @[L48ddf0..L48ddf2] goto L48ddee;
}
procedure `void` `dispose`(`io.reactivex.observers.SerializedObserver` v1 @kind this) @signature `Lio/reactivex/observers/SerializedObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48dda4.  v0:= v1.`io.reactivex.observers.SerializedObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48dda8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48ddae.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.SerializedObserver` v1 @kind this) @signature `Lio/reactivex/observers/SerializedObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48dd48.  v0:= v1.`io.reactivex.observers.SerializedObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48dd4c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L48dd52.  v0:= temp;
  #L48dd54.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.observers.SerializedObserver` v2 @kind this) @signature `Lio/reactivex/observers/SerializedObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48de18.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48de1c.  if v0 == 0 then goto L48de22;
  #L48de20.  return @kind void;
  #L48de22.  @monitorenter v2
  #L48de24.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48de28.  if v0 == 0 then goto L48de30;
  #L48de2c.  @monitorexit v2
  #L48de2e.  return @kind void;
  #L48de30.  v0:= v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` @kind boolean;
  #L48de34.  if v0 == 0 then goto L48de62;
  #L48de38.  v0:= v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L48de3c.  if v0 != 0 then goto L48de50;
  #L48de40.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L48de44.  v1:= 4I;
  #L48de46.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L48de4c.  v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L48de50.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L48de56.  v1:= temp @kind object;
  #L48de58.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L48de5e.  @monitorexit v2
  #L48de60.  return @kind void;
  #L48de62.  v0:= 1I;
  #L48de64.  v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` := v0 @kind boolean;
  #L48de68.  v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L48de6c.  @monitorexit v2
  #L48de6e.  v0:= v2.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48de72.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48de78.  return @kind void;
  #L48de7a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48de7c.  @monitorexit v2
  #L48de7e.  throw v0;
  catch `java.lang.Throwable` @[L48de24..L48de6e] goto L48de7a;
  catch `java.lang.Throwable` @[L48de7c..L48de7e] goto L48de7a;
}
procedure `void` `onError`(`io.reactivex.observers.SerializedObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/observers/SerializedObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48dea4.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48dea8.  if v0 == 0 then goto L48deb4;
  #L48deac.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48deb2.  return @kind void;
  #L48deb4.  @monitorenter v2
  #L48deb6.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48deba.  v1:= 1I;
  #L48debc.  if v0 == 0 then goto L48dec2;
  #L48dec0.  goto L48df12;
  #L48dec2.  v0:= v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` @kind boolean;
  #L48dec6.  if v0 == 0 then goto L48df08;
  #L48deca.  v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` := v1 @kind boolean;
  #L48dece.  v0:= v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L48ded2.  if v0 != 0 then goto L48dee6;
  #L48ded6.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L48deda.  v1:= 4I;
  #L48dedc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L48dee2.  v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L48dee6.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L48deec.  v3:= temp @kind object;
  #L48deee.  v1:= v2.`io.reactivex.observers.SerializedObserver.b` @type ^`boolean` @kind boolean;
  #L48def2.  if v1 == 0 then goto L48defe;
  #L48def6.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L48defc.  goto L48df04;
  #L48defe.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L48df04.  @monitorexit v2
  #L48df06.  return @kind void;
  #L48df08.  v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` := v1 @kind boolean;
  #L48df0c.  v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` := v1 @kind boolean;
  #L48df10.  v1:= 0I;
  #L48df12.  @monitorexit v2
  #L48df14.  if v1 == 0 then goto L48df20;
  #L48df18.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48df1e.  return @kind void;
  #L48df20.  v0:= v2.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48df24.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48df2a.  return @kind void;
  #L48df2c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48df2e.  @monitorexit v2
  #L48df30.  throw v3;
  catch `java.lang.Throwable` @[L48deb6..L48df14] goto L48df2c;
  catch `java.lang.Throwable` @[L48df2e..L48df30] goto L48df2c;
}
procedure `void` `onNext`(`io.reactivex.observers.SerializedObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/observers/SerializedObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48df58.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48df5c.  if v0 == 0 then goto L48df62;
  #L48df60.  return @kind void;
  #L48df62.  if v3 != 0 then goto L48df86;
  #L48df66.  v3:= v2.`io.reactivex.observers.SerializedObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48df6a.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48df70.  v3:= new `java.lang.NullPointerException`;
  #L48df74.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L48df78.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48df7e.  call `onError`(v2, v3) @signature `Lio/reactivex/observers/SerializedObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48df84.  return @kind void;
  #L48df86.  @monitorenter v2
  #L48df88.  v0:= v2.`io.reactivex.observers.SerializedObserver.f` @type ^`boolean` @kind boolean;
  #L48df8c.  if v0 == 0 then goto L48df94;
  #L48df90.  @monitorexit v2
  #L48df92.  return @kind void;
  #L48df94.  v0:= v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` @kind boolean;
  #L48df98.  if v0 == 0 then goto L48dfc6;
  #L48df9c.  v0:= v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L48dfa0.  if v0 != 0 then goto L48dfb4;
  #L48dfa4.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L48dfa8.  v1:= 4I;
  #L48dfaa.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L48dfb0.  v2.`io.reactivex.observers.SerializedObserver.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L48dfb4.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L48dfba.  v3:= temp @kind object;
  #L48dfbc.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L48dfc2.  @monitorexit v2
  #L48dfc4.  return @kind void;
  #L48dfc6.  v0:= 1I;
  #L48dfc8.  v2.`io.reactivex.observers.SerializedObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L48dfcc.  @monitorexit v2
  #L48dfce.  v0:= v2.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48dfd2.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48dfd8.  call `a`(v2) @signature `Lio/reactivex/observers/SerializedObserver;.a:()V` @kind virtual;
  #L48dfde.  return @kind void;
  #L48dfe0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48dfe2.  @monitorexit v2
  #L48dfe4.  throw v3;
  catch `java.lang.Throwable` @[L48df88..L48dfce] goto L48dfe0;
  catch `java.lang.Throwable` @[L48dfe2..L48dfe4] goto L48dfe0;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.SerializedObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/observers/SerializedObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48e00c.  v0:= v1.`io.reactivex.observers.SerializedObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48e010.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48e016.  v0:= temp;
  #L48e018.  if v0 == 0 then goto L48e02a;
  #L48e01c.  v1.`io.reactivex.observers.SerializedObserver.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L48e020.  v2:= v1.`io.reactivex.observers.SerializedObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L48e024.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L48e02a.  return @kind void;
}
