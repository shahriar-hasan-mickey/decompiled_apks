record `io.reactivex.observers.ResourceMaybeObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.observers.ResourceMaybeObserver.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.disposables.ListCompositeDisposable` `io.reactivex.observers.ResourceMaybeObserver.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.observers.ResourceMaybeObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48d5f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48d5fe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48d602.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48d608.  v1.`io.reactivex.observers.ResourceMaybeObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L48d60c.  v0:= new `io.reactivex.internal.disposables.ListCompositeDisposable`;
  #L48d610.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.<init>:()V` @kind direct;
  #L48d616.  v1.`io.reactivex.observers.ResourceMaybeObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` := v0 @kind object;
  #L48d61a.  return @kind void;
}
procedure `void` `add`(`io.reactivex.observers.ResourceMaybeObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.add:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d62c.  v0:= "resource is null" @kind object;
  #L48d630.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48d636.  v0:= v1.`io.reactivex.observers.ResourceMaybeObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L48d63a.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L48d640.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.observers.ResourceMaybeObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d654.  v0:= v1.`io.reactivex.observers.ResourceMaybeObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d658.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48d65e.  v0:= temp;
  #L48d660.  if v0 == 0 then goto L48d66e;
  #L48d664.  v0:= v1.`io.reactivex.observers.ResourceMaybeObserver.b` @type ^`io.reactivex.internal.disposables.ListCompositeDisposable` @kind object;
  #L48d668.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/ListCompositeDisposable;.dispose:()V` @kind virtual;
  #L48d66e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.observers.ResourceMaybeObserver` v1 @kind this) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48d5cc.  v0:= v1.`io.reactivex.observers.ResourceMaybeObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d5d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48d5d6.  v0:= temp @kind object;
  #L48d5d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L48d5dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48d5e2.  v0:= temp;
  #L48d5e4.  return v0;
}
procedure `void` `onStart`(`io.reactivex.observers.ResourceMaybeObserver` v0 @kind this) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L48d680.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.ResourceMaybeObserver` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L48d694.  v0:= v2.`io.reactivex.observers.ResourceMaybeObserver.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48d698.  v1:= constclass @type ^`io.reactivex.observers.ResourceMaybeObserver` @kind object;
  #L48d69c.  call temp:= `setOnce`(v0, v3, v1) @signature `Lio/reactivex/internal/util/EndConsumerHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;Ljava/lang/Class;)Z` @kind static;
  #L48d6a2.  v3:= temp;
  #L48d6a4.  if v3 == 0 then goto L48d6ae;
  #L48d6a8.  call `onStart`(v2) @signature `Lio/reactivex/observers/ResourceMaybeObserver;.onStart:()V` @kind virtual;
  #L48d6ae.  return @kind void;
}
