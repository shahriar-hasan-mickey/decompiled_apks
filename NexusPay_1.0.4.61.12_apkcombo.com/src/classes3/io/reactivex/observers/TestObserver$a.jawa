record `io.reactivex.observers.TestObserver$a` @kind class @AccessFlag FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.Observer` @kind interface {
}
global `io.reactivex.observers.TestObserver$a`[] `@@io.reactivex.observers.TestObserver$a.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.observers.TestObserver$a` `@@io.reactivex.observers.TestObserver$a.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/observers/TestObserver$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48e084.  v0:= new `io.reactivex.observers.TestObserver$a`;
  #L48e088.  v1:= "INSTANCE" @kind object;
  #L48e08c.  v2:= 0I;
  #L48e08e.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/observers/TestObserver$a;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48e094.  `@@io.reactivex.observers.TestObserver$a.INSTANCE` @type ^`io.reactivex.observers.TestObserver$a` := v0 @kind object;
  #L48e098.  v1:= 1I;
  #L48e09a.  v1:= new `io.reactivex.observers.TestObserver$a`[v1];
  #L48e09e.  v1[v2]:= v0 @kind object;
  #L48e0a2.  `@@io.reactivex.observers.TestObserver$a.$VALUES` @type ^`io.reactivex.observers.TestObserver$a`[] := v1 @kind object;
  #L48e0a6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.observers.TestObserver$a` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/observers/TestObserver$a;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L48e0b8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L48e0be.  return @kind void;
}
procedure `io.reactivex.observers.TestObserver$a` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$a;.valueOf:(Ljava/lang/String;)Lio/reactivex/observers/TestObserver$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e03c.  v0:= constclass @type ^`io.reactivex.observers.TestObserver$a` @kind object;
  #L48e040.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L48e046.  v1:= temp @kind object;
  #L48e048.  v1:= (`io.reactivex.observers.TestObserver$a`) v1 @kind object;
  #L48e04c.  return v1 @kind object;
}
procedure `io.reactivex.observers.TestObserver$a`[] `values`() @signature `Lio/reactivex/observers/TestObserver$a;.values:()[Lio/reactivex/observers/TestObserver$a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48e060.  v0:= `@@io.reactivex.observers.TestObserver$a.$VALUES` @type ^`io.reactivex.observers.TestObserver$a`[] @kind object;
  #L48e064.  call temp:= `clone`(v0) @signature `[Lio/reactivex/observers/TestObserver$a;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48e06a.  v0:= temp @kind object;
  #L48e06c.  v0:= (`io.reactivex.observers.TestObserver$a`[]) v0 @kind object;
  #L48e070.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.observers.TestObserver$a` v0 @kind this) @signature `Lio/reactivex/observers/TestObserver$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L48e0d0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.observers.TestObserver$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L48e0e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.observers.TestObserver$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L48e0f8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.observers.TestObserver$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/observers/TestObserver$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L48e10c.  return @kind void;
}
