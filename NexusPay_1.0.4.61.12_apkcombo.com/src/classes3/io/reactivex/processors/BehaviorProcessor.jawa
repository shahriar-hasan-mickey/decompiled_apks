record `io.reactivex.processors.BehaviorProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.processors.BehaviorProcessor.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.processors.BehaviorProcessor.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.BehaviorProcessor.g` @AccessFlag FINAL;
  `long` `io.reactivex.processors.BehaviorProcessor.h` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.processors.BehaviorProcessor.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.BehaviorProcessor$a`[] `@@io.reactivex.processors.BehaviorProcessor.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.BehaviorProcessor$a`[] `@@io.reactivex.processors.BehaviorProcessor.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/BehaviorProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L490ccc.  v0:= 0I;
  #L490cce.  v1:= new `java.lang.Object`[v0];
  #L490cd2.  `@@io.reactivex.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] := v1 @kind object;
  #L490cd6.  v1:= new `io.reactivex.processors.BehaviorProcessor$a`[v0];
  #L490cda.  `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] := v1 @kind object;
  #L490cde.  v0:= new `io.reactivex.processors.BehaviorProcessor$a`[v0];
  #L490ce2.  `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] := v0 @kind object;
  #L490ce6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L490cf8.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L490cfe.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L490d02.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L490d08.  v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L490d0c.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L490d10.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L490d16.  v2.`io.reactivex.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L490d1a.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L490d20.  v0:= temp @kind object;
  #L490d22.  v2.`io.reactivex.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L490d26.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.c` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L490d2a.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L490d30.  v0:= temp @kind object;
  #L490d32.  v2.`io.reactivex.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L490d36.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L490d3a.  v1:= `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L490d3e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L490d44.  v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L490d48.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L490d4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L490d52.  v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L490d56.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L490d68.  call `<init>`(v2) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L490d6e.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490d72.  v1:= "defaultValue is null" @kind object;
  #L490d76.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L490d7c.  v3:= temp @kind object;
  #L490d7e.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L490d84.  return @kind void;
}
procedure `io.reactivex.processors.BehaviorProcessor` `create`() @signature `Lio/reactivex/processors/BehaviorProcessor;.create:()Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L490b0c.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L490b10.  call `<init>`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:()V` @kind direct;
  #L490b16.  return v0 @kind object;
}
procedure `io.reactivex.processors.BehaviorProcessor` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.createDefault:(Ljava/lang/Object;)Lio/reactivex/processors/BehaviorProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L490b28.  v0:= "defaultValue is null" @kind object;
  #L490b2c.  call temp:= `requireNonNull`(v1, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L490b32.  v0:= new `io.reactivex.processors.BehaviorProcessor`;
  #L490b36.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L490b3c.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.BehaviorProcessor` v4 @kind this, `io.reactivex.processors.BehaviorProcessor$a` v5 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.e:(Lio/reactivex/processors/BehaviorProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L490970.  v0:= v4.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490974.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49097a.  v0:= temp @kind object;
  #L49097c.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L490980.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L490984.  v2:= 0I;
  #L490986.  if v0 != v1 then goto L49098c;
  #L49098a.  return v2;
  #L49098c.  v1:= length @variable v0;
  #L49098e.  v3:= v1 + 1;
  #L490992.  v3:= new `io.reactivex.processors.BehaviorProcessor$a`[v3];
  #L490996.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L49099c.  v3[v1]:= v5 @kind object;
  #L4909a0.  v1:= v4.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4909a4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4909aa.  v0:= temp;
  #L4909ac.  if v0 == 0 then goto L490970;
  #L4909b0.  v5:= 1I;
  #L4909b2.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `io.reactivex.processors.BehaviorProcessor$a` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490ef8.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490efc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490f02.  v0:= temp @kind object;
  #L490f04.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L490f08.  v1:= length @variable v0;
  #L490f0a.  if v1 != 0 then goto L490f10;
  #L490f0e.  return @kind void;
  #L490f10.  v2:= -1I;
  #L490f12.  v3:= 0I;
  #L490f14.  v4:= 0I;
  #L490f16.  if v4 >= v1 then goto L490f2c;
  #L490f1a.  v5:= v0[v4] @kind object;
  #L490f1e.  if v5 != v7 then goto L490f26;
  #L490f22.  v2:= v4;
  #L490f24.  goto L490f2c;
  #L490f26.  v4:= v4 + 1;
  #L490f2a.  goto L490f16;
  #L490f2c.  if v2 >= 0 then goto L490f32;
  #L490f30.  return @kind void;
  #L490f32.  v4:= 1I;
  #L490f34.  if v1 != v4 then goto L490f3e;
  #L490f38.  v1:= `@@io.reactivex.processors.BehaviorProcessor.j` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L490f3c.  goto L490f5c;
  #L490f3e.  v5:= v1 + -1;
  #L490f42.  v5:= new `io.reactivex.processors.BehaviorProcessor$a`[v5];
  #L490f46.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L490f4c.  v3:= v2 + 1;
  #L490f50.  v1:= v1 - v2 @kind int;
  #L490f52.  v1:= v1 - v4 @kind int;
  #L490f54.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L490f5a.  v1:= v5 @kind object;
  #L490f5c.  v2:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490f60.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L490f66.  v0:= temp;
  #L490f68.  if v0 == 0 then goto L490ef8;
  #L490f6c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490f80.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L490f84.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L490f8a.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L490f8e.  v3:= 1L;
  #L490f92.  v1:= v1 + v3 @kind long;
  #L490f94.  v5.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` := v1 @kind wide;
  #L490f98.  v1:= v5.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490f9c.  call `lazySet`(v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L490fa2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L490fa8.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490c94.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490c98.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490c9e.  v0:= temp @kind object;
  #L490ca0.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L490ca6.  v1:= temp;
  #L490ca8.  if v1 == 0 then goto L490cb6;
  #L490cac.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L490cb2.  v0:= temp @kind object;
  #L490cb4.  return v0 @kind object;
  #L490cb6.  v0:= 0I;
  #L490cb8.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490b98.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490b9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490ba2.  v0:= temp @kind object;
  #L490ba4.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L490baa.  v1:= temp;
  #L490bac.  if v1 != 0 then goto L490bc8;
  #L490bb0.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L490bb6.  v1:= temp;
  #L490bb8.  if v1 == 0 then goto L490bbe;
  #L490bbc.  goto L490bc8;
  #L490bbe.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L490bc4.  v0:= temp @kind object;
  #L490bc6.  return v0 @kind object;
  #L490bc8.  v0:= 0I;
  #L490bca.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490bdc.  v0:= `@@io.reactivex.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] @kind object;
  #L490be0.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L490be6.  v0:= temp @kind object;
  #L490be8.  v1:= `@@io.reactivex.processors.BehaviorProcessor.i` @type ^`java.lang.Object`[] @kind object;
  #L490bec.  if v0 != v1 then goto L490bf6;
  #L490bf0.  v0:= 0I;
  #L490bf2.  v0:= new `java.lang.Object`[v0];
  #L490bf6.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.BehaviorProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490c08.  v0:= v5.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490c0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490c12.  v0:= temp @kind object;
  #L490c14.  v1:= 0I;
  #L490c16.  v2:= 0I;
  #L490c18.  if v0 == 0 then goto L490c78;
  #L490c1c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L490c22.  v3:= temp;
  #L490c24.  if v3 != 0 then goto L490c78;
  #L490c28.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L490c2e.  v3:= temp;
  #L490c30.  if v3 == 0 then goto L490c36;
  #L490c34.  goto L490c78;
  #L490c36.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L490c3c.  v0:= temp @kind object;
  #L490c3e.  v3:= length @variable v6;
  #L490c40.  v4:= 1I;
  #L490c42.  if v3 == 0 then goto L490c56;
  #L490c46.  v6[v2]:= v0 @kind object;
  #L490c4a.  v0:= length @variable v6;
  #L490c4c.  if v0 == v4 then goto L490c76;
  #L490c50.  v6[v4]:= v1 @kind object;
  #L490c54.  goto L490c76;
  #L490c56.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L490c5c.  v6:= temp @kind object;
  #L490c5e.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L490c64.  v6:= temp @kind object;
  #L490c66.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L490c6c.  v6:= temp @kind object;
  #L490c6e.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L490c72.  v6[v2]:= v0 @kind object;
  #L490c76.  return v6 @kind object;
  #L490c78.  v0:= length @variable v6;
  #L490c7a.  if v0 == 0 then goto L490c82;
  #L490c7e.  v6[v2]:= v1 @kind object;
  #L490c82.  return v6 @kind object;
}
procedure `io.reactivex.processors.BehaviorProcessor$a`[] `h`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L490b50.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490b54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490b5a.  v0:= temp @kind object;
  #L490b5c.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L490b60.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L490b64.  if v0 == v1 then goto L490b86;
  #L490b68.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490b6c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L490b72.  v0:= temp @kind object;
  #L490b74.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L490b78.  v1:= `@@io.reactivex.processors.BehaviorProcessor.k` @type ^`io.reactivex.processors.BehaviorProcessor$a`[] @kind object;
  #L490b7c.  if v0 == v1 then goto L490b86;
  #L490b80.  call `g`(v2, v3) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L490b86.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909c4.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4909c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4909ce.  v0:= temp @kind object;
  #L4909d0.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4909d6.  v0:= temp;
  #L4909d8.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4909ec.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4909f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4909f6.  v0:= temp @kind object;
  #L4909f8.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L4909fc.  v0:= length @variable v0;
  #L4909fe.  if v0 == 0 then goto L490a06;
  #L490a02.  v0:= 1I;
  #L490a04.  goto L490a08;
  #L490a06.  v0:= 0I;
  #L490a08.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.BehaviorProcessor` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490a1c.  v0:= v1.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490a20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490a26.  v0:= temp @kind object;
  #L490a28.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L490a2e.  v0:= temp;
  #L490a30.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490a44.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490a48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490a4e.  v0:= temp @kind object;
  #L490a50.  if v0 == 0 then goto L490a70;
  #L490a54.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L490a5a.  v1:= temp;
  #L490a5c.  if v1 != 0 then goto L490a70;
  #L490a60.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L490a66.  v0:= temp;
  #L490a68.  if v0 != 0 then goto L490a70;
  #L490a6c.  v0:= 1I;
  #L490a6e.  goto L490a72;
  #L490a70.  v0:= 0I;
  #L490a72.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L490a84.  v0:= 1I;
  #L490a86.  if v8 != 0 then goto L490aa0;
  #L490a8a.  v8:= new `java.lang.NullPointerException`;
  #L490a8e.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L490a92.  call `<init>`(v8, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L490a98.  call `onError`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L490a9e.  return v0;
  #L490aa0.  v1:= v7.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490aa4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490aaa.  v1:= temp @kind object;
  #L490aac.  v1:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v1 @kind object;
  #L490ab0.  v2:= length @variable v1;
  #L490ab2.  v3:= 0I;
  #L490ab4.  v4:= 0I;
  #L490ab6.  if v4 >= v2 then goto L490ad2;
  #L490aba.  v5:= v1[v4] @kind object;
  #L490abe.  call temp:= `d`(v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.d:()Z` @kind virtual;
  #L490ac4.  v5:= temp;
  #L490ac6.  if v5 == 0 then goto L490acc;
  #L490aca.  return v3;
  #L490acc.  v4:= v4 + 1;
  #L490ad0.  goto L490ab6;
  #L490ad2.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L490ad8.  v8:= temp @kind object;
  #L490ada.  call `g`(v7, v8) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L490ae0.  v2:= length @variable v1;
  #L490ae2.  if v3 >= v2 then goto L490afa;
  #L490ae6.  v4:= v1[v3] @kind object;
  #L490aea.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L490aee.  call `c`(v4, v8, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L490af4.  v3:= v3 + 1;
  #L490af8.  goto L490ae2;
  #L490afa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.BehaviorProcessor` v7 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L490d98.  v0:= v7.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490d9c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L490da0.  v2:= 0I;
  #L490da2.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L490da8.  v0:= temp;
  #L490daa.  if v0 != 0 then goto L490db0;
  #L490dae.  return @kind void;
  #L490db0.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L490db6.  v0:= temp @kind object;
  #L490db8.  call temp:= `h`(v7, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @kind virtual;
  #L490dbe.  v1:= temp @kind object;
  #L490dc0.  v2:= length @variable v1;
  #L490dc2.  v3:= 0I;
  #L490dc4.  if v3 >= v2 then goto L490ddc;
  #L490dc8.  v4:= v1[v3] @kind object;
  #L490dcc.  v5:= v7.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L490dd0.  call `c`(v4, v0, v5) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L490dd6.  v3:= v3 + 1;
  #L490dda.  goto L490dc4;
  #L490ddc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490df0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L490df4.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L490dfa.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490dfe.  v1:= 0I;
  #L490e00.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L490e06.  v0:= temp;
  #L490e08.  if v0 != 0 then goto L490e14;
  #L490e0c.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L490e12.  return @kind void;
  #L490e14.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L490e1a.  v7:= temp @kind object;
  #L490e1c.  call temp:= `h`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.h:(Ljava/lang/Object;)[Lio/reactivex/processors/BehaviorProcessor$a;` @kind virtual;
  #L490e22.  v0:= temp @kind object;
  #L490e24.  v1:= length @variable v0;
  #L490e26.  v2:= 0I;
  #L490e28.  if v2 >= v1 then goto L490e40;
  #L490e2c.  v3:= v0[v2] @kind object;
  #L490e30.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L490e34.  call `c`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L490e3a.  v2:= v2 + 1;
  #L490e3e.  goto L490e28;
  #L490e40.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.BehaviorProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490e54.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L490e58.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L490e5e.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490e62.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490e68.  v0:= temp @kind object;
  #L490e6a.  if v0 == 0 then goto L490e70;
  #L490e6e.  return @kind void;
  #L490e70.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L490e76.  v7:= temp @kind object;
  #L490e78.  call `g`(v6, v7) @signature `Lio/reactivex/processors/BehaviorProcessor;.g:(Ljava/lang/Object;)V` @kind virtual;
  #L490e7e.  v0:= v6.`io.reactivex.processors.BehaviorProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490e82.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490e88.  v0:= temp @kind object;
  #L490e8a.  v0:= (`io.reactivex.processors.BehaviorProcessor$a`[]) v0 @kind object;
  #L490e8e.  v1:= length @variable v0;
  #L490e90.  v2:= 0I;
  #L490e92.  if v2 >= v1 then goto L490eaa;
  #L490e96.  v3:= v0[v2] @kind object;
  #L490e9a.  v4:= v6.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L490e9e.  call `c`(v3, v7, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L490ea4.  v2:= v2 + 1;
  #L490ea8.  goto L490e92;
  #L490eaa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490ebc.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490ec0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490ec6.  v0:= temp @kind object;
  #L490ec8.  if v0 == 0 then goto L490ed4;
  #L490ecc.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L490ed2.  return @kind void;
  #L490ed4.  v0:= 9223372036854775807L;
  #L490ede.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L490ee4.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.BehaviorProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L490fbc.  v0:= new `io.reactivex.processors.BehaviorProcessor$a`;
  #L490fc0.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @kind direct;
  #L490fc6.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L490fcc.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.e:(Lio/reactivex/processors/BehaviorProcessor$a;)Z` @kind virtual;
  #L490fd2.  v1:= temp;
  #L490fd4.  if v1 == 0 then goto L490ff0;
  #L490fd8.  v3:= v0.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L490fdc.  if v3 == 0 then goto L490fe8;
  #L490fe0.  call `f`(v2, v0) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L490fe6.  goto L491016;
  #L490fe8.  call `a`(v0) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.a:()V` @kind virtual;
  #L490fee.  goto L491016;
  #L490ff0.  v0:= v2.`io.reactivex.processors.BehaviorProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490ff4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490ffa.  v0:= temp @kind object;
  #L490ffc.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L491000.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L491004.  if v0 != v1 then goto L491010;
  #L491008.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49100e.  goto L491016;
  #L491010.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L491016.  return @kind void;
}
