record `io.reactivex.processors.MulticastProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.MulticastProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.processors.MulticastProcessor` `io.reactivex.processors.MulticastProcessor$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.processors.MulticastProcessor$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.processors.MulticastProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.MulticastProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.MulticastProcessor` v2 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/MulticastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L491068.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49106e.  v0.`io.reactivex.processors.MulticastProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L491072.  v0.`io.reactivex.processors.MulticastProcessor$a.b` @type ^`io.reactivex.processors.MulticastProcessor` := v2 @kind object;
  #L491076.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.MulticastProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/MulticastProcessor$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4910b8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4910be.  v0:= temp @kind wide;
  #L4910c0.  v2:= -9223372036854775808L;
  #L4910c4.  v4:= lcmp(v0, v2);
  #L4910c8.  if v4 == 0 then goto L4910d6;
  #L4910cc.  v0:= v5.`io.reactivex.processors.MulticastProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4910d0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4910d6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.processors.MulticastProcessor$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4910e8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4910ee.  v0:= temp @kind wide;
  #L4910f0.  v2:= -9223372036854775808L;
  #L4910f4.  v4:= lcmp(v0, v2);
  #L4910f8.  if v4 == 0 then goto L491106;
  #L4910fc.  v0:= v5.`io.reactivex.processors.MulticastProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491100.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L491106.  return @kind void;
}
procedure `void` `c`(`io.reactivex.processors.MulticastProcessor$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/MulticastProcessor$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491118.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49111e.  v0:= temp @kind wide;
  #L491120.  v2:= -9223372036854775808L;
  #L491124.  v4:= lcmp(v0, v2);
  #L491128.  if v4 == 0 then goto L491144;
  #L49112c.  v0:= v5.`io.reactivex.processors.MulticastProcessor$a.c` @type ^`long` @kind wide;
  #L491130.  v2:= 1L;
  #L491134.  v0:= v0 + v2 @kind long;
  #L491136.  v5.`io.reactivex.processors.MulticastProcessor$a.c` @type ^`long` := v0 @kind wide;
  #L49113a.  v0:= v5.`io.reactivex.processors.MulticastProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49113e.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491144.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.MulticastProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/MulticastProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491088.  v0:= -9223372036854775808L;
  #L49108c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L491092.  v2:= temp @kind wide;
  #L491094.  v4:= lcmp(v2, v0);
  #L491098.  if v4 == 0 then goto L4910a6;
  #L49109c.  v0:= v5.`io.reactivex.processors.MulticastProcessor$a.b` @type ^`io.reactivex.processors.MulticastProcessor` @kind object;
  #L4910a0.  call `g`(v0, v5) @signature `Lio/reactivex/processors/MulticastProcessor;.g:(Lio/reactivex/processors/MulticastProcessor$a;)V` @kind virtual;
  #L4910a6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.MulticastProcessor$a` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/processors/MulticastProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L491158.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L49115e.  v0:= temp;
  #L491160.  if v0 == 0 then goto L4911b6;
  #L491164.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49116a.  v0:= temp @kind wide;
  #L49116c.  v2:= -9223372036854775808L;
  #L491170.  v4:= lcmp(v0, v2);
  #L491174.  if v4 == 0 then goto L4911b6;
  #L491178.  v2:= 9223372036854775807L;
  #L491182.  v4:= lcmp(v0, v2);
  #L491186.  if v4 != 0 then goto L49118c;
  #L49118a.  goto L4911b6;
  #L49118c.  v4:= v0 + v10 @kind long;
  #L491190.  v6:= 0L;
  #L491194.  v8:= lcmp(v4, v6);
  #L491198.  if v8 >= 0 then goto L49119e;
  #L49119c.  goto L4911a0;
  #L49119e.  v2:= v4 @kind wide;
  #L4911a0.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4911a6.  v0:= temp;
  #L4911a8.  if v0 == 0 then goto L491164;
  #L4911ac.  v10:= v9.`io.reactivex.processors.MulticastProcessor$a.b` @type ^`io.reactivex.processors.MulticastProcessor` @kind object;
  #L4911b0.  call `f`(v10) @signature `Lio/reactivex/processors/MulticastProcessor;.f:()V` @kind virtual;
  #L4911b6.  return @kind void;
}
