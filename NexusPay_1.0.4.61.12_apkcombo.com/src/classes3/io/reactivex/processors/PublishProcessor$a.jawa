record `io.reactivex.processors.PublishProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.PublishProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.processors.PublishProcessor` `io.reactivex.processors.PublishProcessor$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.processors.PublishProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.PublishProcessor` v2 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/PublishProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L491a44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L491a4a.  v0.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L491a4e.  v0.`io.reactivex.processors.PublishProcessor$a.b` @type ^`io.reactivex.processors.PublishProcessor` := v2 @kind object;
  #L491a52.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4919ec.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4919f2.  v0:= temp @kind wide;
  #L4919f4.  v2:= -9223372036854775808L;
  #L4919f8.  v4:= lcmp(v0, v2);
  #L4919fc.  if v4 != 0 then goto L491a04;
  #L491a00.  v0:= 1I;
  #L491a02.  goto L491a06;
  #L491a04.  v0:= 0I;
  #L491a06.  return v0;
}
procedure `boolean` `b`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.b:()Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491a18.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491a1e.  v0:= temp @kind wide;
  #L491a20.  v2:= 0L;
  #L491a24.  v4:= lcmp(v0, v2);
  #L491a28.  if v4 != 0 then goto L491a30;
  #L491a2c.  v0:= 1I;
  #L491a2e.  goto L491a32;
  #L491a30.  v0:= 0I;
  #L491a32.  return v0;
}
procedure `void` `c`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491a94.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491a9a.  v0:= temp @kind wide;
  #L491a9c.  v2:= -9223372036854775808L;
  #L491aa0.  v4:= lcmp(v0, v2);
  #L491aa4.  if v4 == 0 then goto L491ab2;
  #L491aa8.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491aac.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L491ab2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/PublishProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491a64.  v0:= -9223372036854775808L;
  #L491a68.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L491a6e.  v2:= temp @kind wide;
  #L491a70.  v4:= lcmp(v2, v0);
  #L491a74.  if v4 == 0 then goto L491a82;
  #L491a78.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.b` @type ^`io.reactivex.processors.PublishProcessor` @kind object;
  #L491a7c.  call `f`(v0, v5) @signature `Lio/reactivex/processors/PublishProcessor;.f:(Lio/reactivex/processors/PublishProcessor$a;)V` @kind virtual;
  #L491a82.  return @kind void;
}
procedure `void` `d`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491ac4.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491aca.  v0:= temp @kind wide;
  #L491acc.  v2:= -9223372036854775808L;
  #L491ad0.  v4:= lcmp(v0, v2);
  #L491ad4.  if v4 == 0 then goto L491ae4;
  #L491ad8.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491adc.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L491ae2.  goto L491aea;
  #L491ae4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L491aea.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.PublishProcessor$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L491afc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L491b02.  v0:= temp @kind wide;
  #L491b04.  v2:= -9223372036854775808L;
  #L491b08.  v4:= lcmp(v0, v2);
  #L491b0c.  if v4 != 0 then goto L491b12;
  #L491b10.  return @kind void;
  #L491b12.  v2:= 0L;
  #L491b16.  v4:= lcmp(v0, v2);
  #L491b1a.  if v4 == 0 then goto L491b34;
  #L491b1e.  v0:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491b22.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L491b28.  v0:= 1L;
  #L491b2c.  call temp:= `producedCancel`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L491b32.  goto L491b52;
  #L491b34.  call `cancel`(v5) @signature `Lio/reactivex/processors/PublishProcessor$a;.cancel:()V` @kind virtual;
  #L491b3a.  v6:= v5.`io.reactivex.processors.PublishProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L491b3e.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L491b42.  v1:= "Could not emit value due to lack of requests" @kind object;
  #L491b46.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491b4c.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L491b52.  return @kind void;
}
procedure `void` `request`(`io.reactivex.processors.PublishProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/PublishProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491b64.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L491b6a.  v0:= temp;
  #L491b6c.  if v0 == 0 then goto L491b76;
  #L491b70.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L491b76.  return @kind void;
}
