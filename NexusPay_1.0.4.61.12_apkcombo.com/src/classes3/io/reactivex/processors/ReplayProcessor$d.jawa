record `io.reactivex.processors.ReplayProcessor$d` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `int` `io.reactivex.processors.ReplayProcessor$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.processors.ReplayProcessor$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.processors.ReplayProcessor$d.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.processors.ReplayProcessor$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$d.e` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$f` `io.reactivex.processors.ReplayProcessor$d.f` @AccessFlag VOLATILE;
  `io.reactivex.processors.ReplayProcessor$f` `io.reactivex.processors.ReplayProcessor$d.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$d.h` @AccessFlag ;
  `boolean` `io.reactivex.processors.ReplayProcessor$d.i` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L49221c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L492222.  v0:= "maxSize" @kind object;
  #L492226.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L49222c.  v2:= temp;
  #L49222e.  v1.`io.reactivex.processors.ReplayProcessor$d.a` @type ^`int` := v2;
  #L492232.  v2:= "maxAge" @kind object;
  #L492236.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L49223c.  v2:= temp @kind wide;
  #L49223e.  v1.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` := v2 @kind wide;
  #L492242.  v2:= "unit is null" @kind object;
  #L492246.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49224c.  v2:= temp @kind object;
  #L49224e.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L492252.  v1.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L492256.  v2:= "scheduler is null" @kind object;
  #L49225a.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L492260.  v2:= temp @kind object;
  #L492262.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L492266.  v1.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L49226a.  v2:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L49226e.  v3:= 0I;
  #L492270.  v4:= 0L;
  #L492274.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49227a.  v1.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L49227e.  v1.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L492282.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.ReplayProcessor$d` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4922b4.  call `j`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$d;.j:()V` @kind virtual;
  #L4922ba.  v0.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4922be.  v1:= 1I;
  #L4922c0.  v0.`io.reactivex.processors.ReplayProcessor$d.i` @type ^`boolean` := v1 @kind boolean;
  #L4922c4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.processors.ReplayProcessor$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4922d8.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L4922dc.  v1:= v3.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4922e0.  v2:= v3.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4922e4.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4922ea.  v1:= temp @kind wide;
  #L4922ec.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L4922f2.  v4:= v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L4922f6.  v3.`io.reactivex.processors.ReplayProcessor$d.g` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L4922fa.  v1:= v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L4922fe.  v1:= v1 + 1;
  #L492302.  v3.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v1;
  #L492306.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L49230c.  call `i`(v3) @signature `Lio/reactivex/processors/ReplayProcessor$d;.i:()V` @kind virtual;
  #L492312.  return @kind void;
}
procedure `void` `c`(`io.reactivex.processors.ReplayProcessor$d` v4 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L492574.  v0:= v4.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L492578.  v0:= v0.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L49257c.  if v0 == 0 then goto L4925a6;
  #L492580.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L492584.  v1:= 0I;
  #L492586.  v2:= 0L;
  #L49258a.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L492590.  v1:= v4.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L492594.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49259a.  v1:= temp @kind object;
  #L49259c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4925a2.  v4.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L4925a6.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492294.  call `j`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$d;.j:()V` @kind virtual;
  #L49229a.  v0:= 1I;
  #L49229c.  v1.`io.reactivex.processors.ReplayProcessor$d.i` @type ^`boolean` := v0 @kind boolean;
  #L4922a0.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.processors.ReplayProcessor$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L492184.  call temp:= `g`(v5) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L49218a.  v0:= temp @kind object;
  #L49218c.  call temp:= `h`(v5, v0) @signature `Lio/reactivex/processors/ReplayProcessor$d;.h:(Lio/reactivex/processors/ReplayProcessor$f;)I` @kind virtual;
  #L492192.  v1:= temp;
  #L492194.  v2:= 0I;
  #L492196.  v3:= 0I;
  #L492198.  if v1 != 0 then goto L4921a8;
  #L49219c.  v0:= length @variable v6;
  #L49219e.  if v0 == 0 then goto L4921f2;
  #L4921a2.  v6[v3]:= v2 @kind object;
  #L4921a6.  goto L4921f2;
  #L4921a8.  v4:= length @variable v6;
  #L4921aa.  if v4 >= v1 then goto L4921ca;
  #L4921ae.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4921b4.  v6:= temp @kind object;
  #L4921b6.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4921bc.  v6:= temp @kind object;
  #L4921be.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4921c4.  v6:= temp @kind object;
  #L4921c6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4921ca.  if v3 == v1 then goto L4921e8;
  #L4921ce.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4921d4.  v0:= temp @kind object;
  #L4921d6.  v0:= (`io.reactivex.processors.ReplayProcessor$f`) v0 @kind object;
  #L4921da.  v4:= v0.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L4921de.  v6[v3]:= v4 @kind object;
  #L4921e2.  v3:= v3 + 1;
  #L4921e6.  goto L4921ca;
  #L4921e8.  v0:= length @variable v6;
  #L4921ea.  if v0 <= v1 then goto L4921f2;
  #L4921ee.  v6[v1]:= v2 @kind object;
  #L4921f2.  return v6 @kind object;
}
procedure `java.lang.Throwable` `e`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.e:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492204.  v0:= v1.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`java.lang.Throwable` @kind object;
  #L492208.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor$d` v13 @kind this, `io.reactivex.processors.ReplayProcessor$c` v14 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L492324.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L49232a.  v0:= temp;
  #L49232c.  if v0 == 0 then goto L492332;
  #L492330.  return @kind void;
  #L492332.  v0:= v14.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L492336.  v1:= v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L49233a.  v1:= (`io.reactivex.processors.ReplayProcessor$f`) v1 @kind object;
  #L49233e.  if v1 != 0 then goto L49234a;
  #L492342.  call temp:= `g`(v13) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L492348.  v1:= temp @kind object;
  #L49234a.  v2:= v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` @kind wide;
  #L49234e.  v4:= 1I;
  #L492350.  v5:= 1I;
  #L492352.  v6:= v14.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L492356.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L49235c.  v6:= temp @kind wide;
  #L49235e.  v8:= 0I;
  #L492360.  v9:= lcmp(v2, v6);
  #L492364.  if v9 == 0 then goto L4923d2;
  #L492368.  v10:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L49236c.  if v10 == 0 then goto L492376;
  #L492370.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L492374.  return @kind void;
  #L492376.  v10:= v13.`io.reactivex.processors.ReplayProcessor$d.i` @type ^`boolean` @kind boolean;
  #L49237a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492380.  v11:= temp @kind object;
  #L492382.  v11:= (`io.reactivex.processors.ReplayProcessor$f`) v11 @kind object;
  #L492386.  if v11 != 0 then goto L49238e;
  #L49238a.  v12:= 1I;
  #L49238c.  goto L492390;
  #L49238e.  v12:= 0I;
  #L492390.  if v10 == 0 then goto L4923b8;
  #L492394.  if v12 == 0 then goto L4923b8;
  #L492398.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L49239c.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v4 @kind boolean;
  #L4923a0.  v14:= v13.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`java.lang.Throwable` @kind object;
  #L4923a4.  if v14 != 0 then goto L4923b0;
  #L4923a8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4923ae.  goto L4923b6;
  #L4923b0.  call `onError`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4923b6.  return @kind void;
  #L4923b8.  if v12 == 0 then goto L4923be;
  #L4923bc.  goto L4923d2;
  #L4923be.  v1:= v11.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L4923c2.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4923c8.  v8:= 1L;
  #L4923cc.  v2:= v2 + v8 @kind long;
  #L4923ce.  v1:= v11 @kind object;
  #L4923d0.  goto L49235e;
  #L4923d2.  if v9 != 0 then goto L492418;
  #L4923d6.  v6:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4923da.  if v6 == 0 then goto L4923e4;
  #L4923de.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L4923e2.  return @kind void;
  #L4923e4.  v6:= v13.`io.reactivex.processors.ReplayProcessor$d.i` @type ^`boolean` @kind boolean;
  #L4923e8.  if v6 == 0 then goto L492418;
  #L4923ec.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4923f2.  v6:= temp @kind object;
  #L4923f4.  if v6 != 0 then goto L492418;
  #L4923f8.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L4923fc.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v4 @kind boolean;
  #L492400.  v14:= v13.`io.reactivex.processors.ReplayProcessor$d.h` @type ^`java.lang.Throwable` @kind object;
  #L492404.  if v14 != 0 then goto L492410;
  #L492408.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L49240e.  goto L492416;
  #L492410.  call `onError`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L492416.  return @kind void;
  #L492418.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L49241c.  v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` := v2 @kind wide;
  #L492420.  v5:= -v5 @kind int;
  #L492422.  call temp:= `addAndGet`(v14, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L492428.  v5:= temp;
  #L49242a.  if v5 != 0 then goto L492352;
  #L49242e.  return @kind void;
}
procedure `io.reactivex.processors.ReplayProcessor$f` `g`(`io.reactivex.processors.ReplayProcessor$d` v8 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()Lio/reactivex/processors/ReplayProcessor$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4920d0.  v0:= v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L4920d4.  v1:= v8.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4920d8.  v2:= v8.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4920dc.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4920e2.  v1:= temp @kind wide;
  #L4920e4.  v3:= v8.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L4920e8.  v1:= v1 - v3 @kind long;
  #L4920ea.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4920f0.  v3:= temp @kind object;
  #L4920f2.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L4920f6.  v7:= v3 @kind object;
  #L4920f8.  v3:= v0 @kind object;
  #L4920fa.  v0:= v7 @kind object;
  #L4920fc.  if v0 == 0 then goto L49211c;
  #L492100.  v4:= v0.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L492104.  v6:= lcmp(v4, v1);
  #L492108.  if v6 <= 0 then goto L49210e;
  #L49210c.  goto L49211c;
  #L49210e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492114.  v3:= temp @kind object;
  #L492116.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L49211a.  goto L4920f6;
  #L49211c.  return v3 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$d` v6 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L492130.  v0:= v6.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L492134.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49213a.  v1:= temp @kind object;
  #L49213c.  v1:= (`io.reactivex.processors.ReplayProcessor$f`) v1 @kind object;
  #L492140.  if v1 != 0 then goto L492170;
  #L492144.  v1:= v6.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L492148.  v2:= v6.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L49214c.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L492152.  v1:= temp @kind wide;
  #L492154.  v3:= v6.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L492158.  v1:= v1 - v3 @kind long;
  #L49215a.  v3:= v0.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L49215e.  v5:= lcmp(v3, v1);
  #L492162.  if v5 >= 0 then goto L49216a;
  #L492166.  v0:= 0I;
  #L492168.  return v0 @kind object;
  #L49216a.  v0:= v0.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L49216e.  return v0 @kind object;
  #L492170.  v0:= v1 @kind object;
  #L492172.  goto L492134;
}
procedure `int` `h`(`io.reactivex.processors.ReplayProcessor$d` v2 @kind this, `io.reactivex.processors.ReplayProcessor$f` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$d;.h:(Lio/reactivex/processors/ReplayProcessor$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L492098.  v0:= 0I;
  #L49209a.  v1:= 2147483647I;
  #L4920a0.  if v0 == v1 then goto L4920bc;
  #L4920a4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4920aa.  v3:= temp @kind object;
  #L4920ac.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L4920b0.  if v3 != 0 then goto L4920b6;
  #L4920b4.  goto L4920bc;
  #L4920b6.  v0:= v0 + 1;
  #L4920ba.  goto L49209a;
  #L4920bc.  return v0;
}
procedure `void` `i`(`io.reactivex.processors.ReplayProcessor$d` v8 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L492440.  v0:= v8.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L492444.  v1:= v8.`io.reactivex.processors.ReplayProcessor$d.a` @type ^`int`;
  #L492448.  v2:= 1I;
  #L49244a.  if v0 <= v1 then goto L492468;
  #L49244e.  v0:= v0 - v2 @kind int;
  #L492450.  v8.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v0;
  #L492454.  v0:= v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L492458.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49245e.  v0:= temp @kind object;
  #L492460.  v0:= (`io.reactivex.processors.ReplayProcessor$f`) v0 @kind object;
  #L492464.  v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L492468.  v0:= v8.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L49246c.  v1:= v8.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L492470.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L492476.  v0:= temp @kind wide;
  #L492478.  v3:= v8.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L49247c.  v0:= v0 - v3 @kind long;
  #L49247e.  v3:= v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L492482.  v4:= v8.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L492486.  if v4 > v2 then goto L492490;
  #L49248a.  v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v3 @kind object;
  #L49248e.  goto L4924b6;
  #L492490.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492496.  v4:= temp @kind object;
  #L492498.  v4:= (`io.reactivex.processors.ReplayProcessor$f`) v4 @kind object;
  #L49249c.  if v4 != 0 then goto L4924a6;
  #L4924a0.  v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v3 @kind object;
  #L4924a4.  goto L4924b6;
  #L4924a6.  v5:= v4.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L4924aa.  v7:= lcmp(v5, v0);
  #L4924ae.  if v7 <= 0 then goto L4924b8;
  #L4924b2.  v8.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v3 @kind object;
  #L4924b6.  return @kind void;
  #L4924b8.  v3:= v8.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int`;
  #L4924bc.  v3:= v3 - v2 @kind int;
  #L4924be.  v8.`io.reactivex.processors.ReplayProcessor$d.e` @type ^`int` := v3;
  #L4924c2.  v3:= v4 @kind object;
  #L4924c4.  goto L492482;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49205c.  v0:= v1.`io.reactivex.processors.ReplayProcessor$d.i` @type ^`boolean` @kind boolean;
  #L492060.  return v0;
}
procedure `void` `j`(`io.reactivex.processors.ReplayProcessor$d` v10 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4924d8.  v0:= v10.`io.reactivex.processors.ReplayProcessor$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4924dc.  v1:= v10.`io.reactivex.processors.ReplayProcessor$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4924e0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4924e6.  v0:= temp @kind wide;
  #L4924e8.  v2:= v10.`io.reactivex.processors.ReplayProcessor$d.b` @type ^`long` @kind wide;
  #L4924ec.  v0:= v0 - v2 @kind long;
  #L4924ee.  v2:= v10.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` @kind object;
  #L4924f2.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4924f8.  v3:= temp @kind object;
  #L4924fa.  v3:= (`io.reactivex.processors.ReplayProcessor$f`) v3 @kind object;
  #L4924fe.  v4:= 0L;
  #L492502.  v6:= 0I;
  #L492504.  if v3 != 0 then goto L492526;
  #L492508.  v0:= v2.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L49250c.  if v0 == 0 then goto L492520;
  #L492510.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L492514.  call `<init>`(v0, v6, v4) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L49251a.  v10.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L49251e.  goto L49255c;
  #L492520.  v10.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L492524.  goto L49255c;
  #L492526.  v7:= v3.`io.reactivex.processors.ReplayProcessor$f.b` @type ^`long` @kind wide;
  #L49252a.  v9:= lcmp(v7, v0);
  #L49252e.  if v9 <= 0 then goto L49255e;
  #L492532.  v0:= v2.`io.reactivex.processors.ReplayProcessor$f.a` @type ^`java.lang.Object` @kind object;
  #L492536.  if v0 == 0 then goto L492558;
  #L49253a.  v0:= new `io.reactivex.processors.ReplayProcessor$f`;
  #L49253e.  call `<init>`(v0, v6, v4) @signature `Lio/reactivex/processors/ReplayProcessor$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L492544.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49254a.  v1:= temp @kind object;
  #L49254c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L492552.  v10.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v0 @kind object;
  #L492556.  goto L49255c;
  #L492558.  v10.`io.reactivex.processors.ReplayProcessor$d.f` @type ^`io.reactivex.processors.ReplayProcessor$f` := v2 @kind object;
  #L49255c.  return @kind void;
  #L49255e.  v2:= v3 @kind object;
  #L492560.  goto L4924f2;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$d` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492074.  call temp:= `g`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$d;.g:()Lio/reactivex/processors/ReplayProcessor$f;` @kind virtual;
  #L49207a.  v0:= temp @kind object;
  #L49207c.  call temp:= `h`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor$d;.h:(Lio/reactivex/processors/ReplayProcessor$f;)I` @kind virtual;
  #L492082.  v0:= temp;
  #L492084.  return v0;
}
