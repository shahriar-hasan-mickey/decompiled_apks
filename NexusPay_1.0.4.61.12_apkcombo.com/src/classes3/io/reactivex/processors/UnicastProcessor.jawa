record `io.reactivex.processors.UnicastProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.processors.UnicastProcessor.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.processors.UnicastProcessor.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.UnicastProcessor.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.h` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.processors.UnicastProcessor.i` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` `io.reactivex.processors.UnicastProcessor.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.processors.UnicastProcessor.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.UnicastProcessor.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4937bc.  v0:= 0I;
  #L4937be.  v1:= 1I;
  #L4937c0.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4937c6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4937d8.  v0:= 1I;
  #L4937da.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L4937e0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4937f4.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4937fa.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4937fe.  v1:= "capacityHint" @kind object;
  #L493802.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L493808.  v3:= temp;
  #L49380a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L493810.  v2.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L493814.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L493818.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49381e.  v2.`io.reactivex.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L493822.  v2.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` := v5 @kind boolean;
  #L493826.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49382a.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L493830.  v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L493834.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L493838.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L49383e.  v2.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L493842.  v3:= new `io.reactivex.processors.UnicastProcessor$a`;
  #L493846.  call `<init>`(v3, v2) @signature `Lio/reactivex/processors/UnicastProcessor$a;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L49384c.  v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` := v3 @kind object;
  #L493850.  v3:= new `java.util.concurrent.atomic.AtomicLong`;
  #L493854.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49385a.  v2.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v3 @kind object;
  #L49385e.  return @kind void;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4936e0.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L4936e4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4936ea.  v1:= temp;
  #L4936ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L4936f2.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L49372c.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L493730.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(I)V` @kind direct;
  #L493736.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493748.  v0:= "onTerminate" @kind object;
  #L49374c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L493752.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L493756.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;)V` @kind direct;
  #L49375c.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L493770.  v0:= "onTerminate" @kind object;
  #L493774.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L49377a.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L49377e.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L493784.  return v0 @kind object;
}
procedure `io.reactivex.processors.UnicastProcessor` `create`(`boolean` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(Z)Lio/reactivex/processors/UnicastProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L493704.  v0:= new `io.reactivex.processors.UnicastProcessor`;
  #L493708.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L49370e.  v1:= temp;
  #L493710.  v2:= 0I;
  #L493712.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L493718.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `boolean` v4 , `boolean` v5 , `boolean` v6 , `org.reactivestreams.Subscriber` v7 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4935e4.  v0:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L4935e8.  v1:= 1I;
  #L4935ea.  v2:= 0I;
  #L4935ec.  if v0 == 0 then goto L493602;
  #L4935f0.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4935f6.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4935fa.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493600.  return v1;
  #L493602.  if v5 == 0 then goto L493654;
  #L493606.  if v4 == 0 then goto L49362e;
  #L49360a.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L49360e.  if v4 == 0 then goto L49362e;
  #L493612.  call `clear`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L493618.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49361c.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493622.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L493626.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49362c.  return v1;
  #L49362e.  if v6 == 0 then goto L493654;
  #L493632.  v4:= v3.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L493636.  v5:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49363a.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493640.  if v4 == 0 then goto L49364c;
  #L493644.  call `onError`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49364a.  goto L493652;
  #L49364c.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493652.  return v1;
  #L493654.  v4:= 0I;
  #L493656.  return v4;
}
procedure `void` `f`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L493870.  v0:= v2.`io.reactivex.processors.UnicastProcessor.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493874.  v1:= 0I;
  #L493876.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L49387c.  v0:= temp @kind object;
  #L49387e.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L493882.  if v0 == 0 then goto L49388c;
  #L493886.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L49388c.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.UnicastProcessor` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4938a0.  v0:= v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4938a4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4938aa.  v0:= temp;
  #L4938ac.  if v0 == 0 then goto L4938b2;
  #L4938b0.  return @kind void;
  #L4938b2.  v0:= 1I;
  #L4938b4.  v1:= v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4938b8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4938be.  v1:= temp @kind object;
  #L4938c0.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L4938c4.  if v1 == 0 then goto L4938e0;
  #L4938c8.  v0:= v2.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` @kind boolean;
  #L4938cc.  if v0 == 0 then goto L4938d8;
  #L4938d0.  call `h`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4938d6.  goto L4938de;
  #L4938d8.  call `i`(v2, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L4938de.  return @kind void;
  #L4938e0.  v1:= v2.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L4938e4.  v0:= -v0 @kind int;
  #L4938e6.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4938ec.  v0:= temp;
  #L4938ee.  if v0 != 0 then goto L4938f4;
  #L4938f2.  return @kind void;
  #L4938f4.  v1:= v2.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4938f8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4938fe.  v1:= temp @kind object;
  #L493900.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L493904.  goto L4938c4;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493798.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L49379c.  if v0 == 0 then goto L4937a6;
  #L4937a0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4937a4.  return v0 @kind object;
  #L4937a6.  v0:= 0I;
  #L4937a8.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.processors.UnicastProcessor` v6 @kind this, `org.reactivestreams.Subscriber` v7 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L493918.  v0:= v6.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L49391c.  v1:= v6.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L493920.  v2:= 1I;
  #L493922.  v1:= v1 ^~ v2 @kind int;
  #L493924.  v3:= v6.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493928.  v4:= 0I;
  #L49392a.  if v3 == 0 then goto L49393a;
  #L49392e.  v7:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493932.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493938.  return @kind void;
  #L49393a.  v3:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L49393e.  if v1 == 0 then goto L49396a;
  #L493942.  if v3 == 0 then goto L49396a;
  #L493946.  v5:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L49394a.  if v5 == 0 then goto L49396a;
  #L49394e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L493954.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493958.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49395e.  v0:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L493962.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493968.  return @kind void;
  #L49396a.  call `onNext`(v7, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493970.  if v3 == 0 then goto L493996;
  #L493974.  v0:= v6.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493978.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49397e.  v0:= v6.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L493982.  if v0 == 0 then goto L49398e;
  #L493986.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49398c.  goto L493994;
  #L49398e.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493994.  return @kind void;
  #L493996.  v3:= v6.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L49399a.  v2:= -v2 @kind int;
  #L49399c.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4939a2.  v2:= temp;
  #L4939a4.  if v2 != 0 then goto L493924;
  #L4939a8.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493668.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L49366c.  if v0 == 0 then goto L49367c;
  #L493670.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L493674.  if v0 != 0 then goto L49367c;
  #L493678.  v0:= 1I;
  #L49367a.  goto L49367e;
  #L49367c.  v0:= 0I;
  #L49367e.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493690.  v0:= v1.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493694.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49369a.  v0:= temp @kind object;
  #L49369c.  if v0 == 0 then goto L4936a4;
  #L4936a0.  v0:= 1I;
  #L4936a2.  goto L4936a6;
  #L4936a4.  v0:= 0I;
  #L4936a6.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4936b8.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4936bc.  if v0 == 0 then goto L4936cc;
  #L4936c0.  v0:= v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` @kind object;
  #L4936c4.  if v0 == 0 then goto L4936cc;
  #L4936c8.  v0:= 1I;
  #L4936ca.  goto L4936ce;
  #L4936cc.  v0:= 0I;
  #L4936ce.  return v0;
}
procedure `void` `i`(`io.reactivex.processors.UnicastProcessor` v17 @kind this, `org.reactivestreams.Subscriber` v18 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.i:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L4939bc.  v6:= v17 @kind object;
  #L4939c0.  v7:= v6.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4939c4.  v0:= v6.`io.reactivex.processors.UnicastProcessor.d` @type ^`boolean` @kind boolean;
  #L4939c8.  v8:= 1I;
  #L4939ca.  v9:= v0 ^~ 1;
  #L4939ce.  v10:= 1I;
  #L4939d0.  v0:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4939d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4939da.  v11:= temp @kind wide;
  #L4939dc.  v4:= 0L;
  #L4939e0.  v15:= lcmp(v11, v4);
  #L4939e4.  if v15 == 0 then goto L493a42;
  #L4939e8.  v2:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L4939ec.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4939f2.  v3:= temp @kind object;
  #L4939f4.  if v3 != 0 then goto L4939fe;
  #L4939f8.  v16:= 1I;
  #L4939fc.  goto L493a04;
  #L4939fe.  v0:= 0I;
  #L493a00.  v16:= 0I;
  #L493a04.  v0:= v17 @kind object;
  #L493a08.  v1:= v9;
  #L493a0a.  v8:= v3 @kind object;
  #L493a0c.  v3:= v16;
  #L493a10.  v13:= v4 @kind wide;
  #L493a12.  v4:= v18 @kind object;
  #L493a16.  v5:= v7 @kind object;
  #L493a18.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L493a1e.  v0:= temp;
  #L493a20.  if v0 == 0 then goto L493a26;
  #L493a24.  return @kind void;
  #L493a26.  if v16 == 0 then goto L493a2c;
  #L493a2a.  goto L493a44;
  #L493a2c.  v5:= v18 @kind object;
  #L493a30.  call `onNext`(v5, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L493a36.  v0:= 1L;
  #L493a3a.  v0:= v0 + v13 @kind long;
  #L493a3c.  v4:= v0 @kind wide;
  #L493a3e.  v8:= 1I;
  #L493a40.  goto L4939e0;
  #L493a42.  v13:= v4 @kind wide;
  #L493a44.  v5:= v18 @kind object;
  #L493a48.  if v15 != 0 then goto L493a72;
  #L493a4c.  v2:= v6.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L493a50.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L493a56.  v3:= temp;
  #L493a58.  v0:= v17 @kind object;
  #L493a5c.  v1:= v9;
  #L493a5e.  v4:= v18 @kind object;
  #L493a62.  v5:= v7 @kind object;
  #L493a64.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/processors/UnicastProcessor;.e:(ZZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L493a6a.  v0:= temp;
  #L493a6c.  if v0 == 0 then goto L493a72;
  #L493a70.  return @kind void;
  #L493a72.  v0:= 0L;
  #L493a76.  v2:= lcmp(v13, v0);
  #L493a7a.  if v2 == 0 then goto L493a9c;
  #L493a7e.  v0:= 9223372036854775807L;
  #L493a88.  v2:= lcmp(v11, v0);
  #L493a8c.  if v2 == 0 then goto L493a9c;
  #L493a90.  v0:= v6.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L493a94.  v1:= -v13 @kind long;
  #L493a96.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L493a9c.  v0:= v6.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L493aa0.  v1:= -v10 @kind int;
  #L493aa2.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L493aa8.  v10:= temp;
  #L493aaa.  if v10 != 0 then goto L493ab0;
  #L493aae.  return @kind void;
  #L493ab0.  v8:= 1I;
  #L493ab2.  goto L4939d0;
}
procedure `void` `onComplete`(`io.reactivex.processors.UnicastProcessor` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493ac4.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L493ac8.  if v0 != 0 then goto L493ae8;
  #L493acc.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493ad0.  if v0 == 0 then goto L493ad6;
  #L493ad4.  goto L493ae8;
  #L493ad6.  v0:= 1I;
  #L493ad8.  v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` := v0 @kind boolean;
  #L493adc.  call `f`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L493ae2.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L493ae8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493afc.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L493b00.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L493b06.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L493b0a.  if v0 != 0 then goto L493b30;
  #L493b0e.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493b12.  if v0 == 0 then goto L493b18;
  #L493b16.  goto L493b30;
  #L493b18.  v1.`io.reactivex.processors.UnicastProcessor.f` @type ^`java.lang.Throwable` := v2 @kind object;
  #L493b1c.  v2:= 1I;
  #L493b1e.  v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` := v2 @kind boolean;
  #L493b22.  call `f`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L493b28.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L493b2e.  return @kind void;
  #L493b30.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L493b36.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.UnicastProcessor` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493b48.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L493b4c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L493b52.  v0:= v1.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L493b56.  if v0 != 0 then goto L493b74;
  #L493b5a.  v0:= v1.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493b5e.  if v0 == 0 then goto L493b64;
  #L493b62.  goto L493b74;
  #L493b64.  v0:= v1.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L493b68.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L493b6e.  call `g`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L493b74.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.UnicastProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493b88.  v0:= v2.`io.reactivex.processors.UnicastProcessor.e` @type ^`boolean` @kind boolean;
  #L493b8c.  if v0 != 0 then goto L493bac;
  #L493b90.  v0:= v2.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493b94.  if v0 == 0 then goto L493b9a;
  #L493b98.  goto L493bac;
  #L493b9a.  v0:= 9223372036854775807L;
  #L493ba4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493baa.  goto L493bb2;
  #L493bac.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L493bb2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.UnicastProcessor` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L493bc4.  v0:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L493bc8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L493bce.  v0:= temp;
  #L493bd0.  if v0 != 0 then goto L493c1a;
  #L493bd4.  v0:= v3.`io.reactivex.processors.UnicastProcessor.i` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L493bd8.  v1:= 0I;
  #L493bda.  v2:= 1I;
  #L493bdc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L493be2.  v0:= temp;
  #L493be4.  if v0 == 0 then goto L493c1a;
  #L493be8.  v0:= v3.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L493bec.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493bf2.  v0:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493bf6.  call `set`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L493bfc.  v4:= v3.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493c00.  if v4 == 0 then goto L493c12;
  #L493c04.  v4:= v3.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493c08.  v0:= 0I;
  #L493c0a.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493c10.  goto L493c2e;
  #L493c12.  call `g`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L493c18.  goto L493c2e;
  #L493c1a.  v0:= new `java.lang.IllegalStateException`;
  #L493c1e.  v1:= "This processor allows only a single Subscriber" @kind object;
  #L493c22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L493c28.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L493c2e.  return @kind void;
}
