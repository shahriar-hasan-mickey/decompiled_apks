record `io.reactivex.processors.UnicastProcessor$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.processors.UnicastProcessor$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.processors.UnicastProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.UnicastProcessor$a` v0 @kind this, `io.reactivex.processors.UnicastProcessor` v1 @kind object) @signature `Lio/reactivex/processors/UnicastProcessor$a;.<init>:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4934f4.  v0.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L4934f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4934fe.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.processors.UnicastProcessor$a` v2 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493510.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493514.  v0:= v0.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` @kind boolean;
  #L493518.  if v0 == 0 then goto L49351e;
  #L49351c.  return @kind void;
  #L49351e.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493522.  v1:= 1I;
  #L493524.  v0.`io.reactivex.processors.UnicastProcessor.h` @type ^`boolean` := v1 @kind boolean;
  #L493528.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L49352c.  call `f`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.f:()V` @kind virtual;
  #L493532.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493536.  v0:= v0.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49353a.  v1:= 0I;
  #L49353c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493542.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493546.  v0:= v0.`io.reactivex.processors.UnicastProcessor.j` @type ^`io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind object;
  #L49354a.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L493550.  v0:= temp;
  #L493552.  if v0 != 0 then goto L49357a;
  #L493556.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L49355a.  v0:= v0.`io.reactivex.processors.UnicastProcessor.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49355e.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L493564.  v0:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493568.  v1:= v0.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` @kind boolean;
  #L49356c.  if v1 != 0 then goto L49357a;
  #L493570.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L493574.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49357a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49358c.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493590.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L493594.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L49359a.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493484.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L493488.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L49348c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L493492.  v0:= temp;
  #L493494.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/UnicastProcessor$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4934d0.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4934d4.  v0:= v0.`io.reactivex.processors.UnicastProcessor.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4934d8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4934de.  v0:= temp @kind object;
  #L4934e0.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.processors.UnicastProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/UnicastProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4935ac.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4935b2.  v0:= temp;
  #L4935b4.  if v0 == 0 then goto L4935d0;
  #L4935b8.  v0:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4935bc.  v0:= v0.`io.reactivex.processors.UnicastProcessor.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4935c0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4935c6.  v2:= v1.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4935ca.  call `g`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.g:()V` @kind virtual;
  #L4935d0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.processors.UnicastProcessor$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/UnicastProcessor$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4934a8.  v0:= 2I;
  #L4934aa.  v3:= v3 ^& v0 @kind int;
  #L4934ac.  if v3 == 0 then goto L4934bc;
  #L4934b0.  v3:= v2.`io.reactivex.processors.UnicastProcessor$a.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4934b4.  v1:= 1I;
  #L4934b6.  v3.`io.reactivex.processors.UnicastProcessor.l` @type ^`boolean` := v1 @kind boolean;
  #L4934ba.  return v0;
  #L4934bc.  v3:= 0I;
  #L4934be.  return v3;
}
