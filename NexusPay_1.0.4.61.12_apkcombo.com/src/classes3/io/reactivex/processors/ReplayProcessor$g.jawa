record `io.reactivex.processors.ReplayProcessor$g` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `java.util.List` `io.reactivex.processors.ReplayProcessor$g.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$g.b` @AccessFlag ;
  `boolean` `io.reactivex.processors.ReplayProcessor$g.c` @AccessFlag VOLATILE;
  `int` `io.reactivex.processors.ReplayProcessor$g.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$g` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L492a2c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L492a32.  v0:= new `java.util.ArrayList`;
  #L492a36.  v1:= "capacityHint" @kind object;
  #L492a3a.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L492a40.  v3:= temp;
  #L492a42.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L492a48.  v2.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` := v0 @kind object;
  #L492a4c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.ReplayProcessor$g` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L492a78.  v0.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` := v1 @kind object;
  #L492a7c.  v1:= 1I;
  #L492a7e.  v0.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`boolean` := v1 @kind boolean;
  #L492a82.  return @kind void;
}
procedure `void` `b`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492a94.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L492a98.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L492a9e.  v2:= v1.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L492aa2.  v2:= v2 + 1;
  #L492aa6.  v1.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int` := v2;
  #L492aaa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.processors.ReplayProcessor$g` v0 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.c:()V` @AccessFlag PUBLIC {
    temp;

  #L492be4.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492a60.  v0:= 1I;
  #L492a62.  v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`boolean` := v0 @kind boolean;
  #L492a66.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.processors.ReplayProcessor$g` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4929a4.  v0:= v5.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L4929a8.  v1:= 0I;
  #L4929aa.  v2:= 0I;
  #L4929ac.  if v0 != 0 then goto L4929bc;
  #L4929b0.  v0:= length @variable v6;
  #L4929b2.  if v0 == 0 then goto L4929ba;
  #L4929b6.  v6[v2]:= v1 @kind object;
  #L4929ba.  return v6 @kind object;
  #L4929bc.  v3:= v5.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L4929c0.  v4:= length @variable v6;
  #L4929c2.  if v4 >= v0 then goto L4929e2;
  #L4929c6.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L4929cc.  v6:= temp @kind object;
  #L4929ce.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L4929d4.  v6:= temp @kind object;
  #L4929d6.  call temp:= `newInstance`(v6, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L4929dc.  v6:= temp @kind object;
  #L4929de.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4929e2.  if v2 >= v0 then goto L4929f8;
  #L4929e6.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L4929ec.  v4:= temp @kind object;
  #L4929ee.  v6[v2]:= v4 @kind object;
  #L4929f2.  v2:= v2 + 1;
  #L4929f6.  goto L4929e2;
  #L4929f8.  v2:= length @variable v6;
  #L4929fa.  if v2 <= v0 then goto L492a02;
  #L4929fe.  v6[v0]:= v1 @kind object;
  #L492a02.  return v6 @kind object;
}
procedure `java.lang.Throwable` `e`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.e:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492a14.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L492a18.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor$g` v13 @kind this, `io.reactivex.processors.ReplayProcessor$c` v14 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$g;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L492abc.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492ac2.  v0:= temp;
  #L492ac4.  if v0 == 0 then goto L492aca;
  #L492ac8.  return @kind void;
  #L492aca.  v0:= v13.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L492ace.  v1:= v14.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L492ad2.  v2:= v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L492ad6.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L492ada.  v3:= 0I;
  #L492adc.  if v2 == 0 then goto L492aea;
  #L492ae0.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L492ae6.  v3:= temp;
  #L492ae8.  goto L492af6;
  #L492aea.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L492af0.  v2:= temp @kind object;
  #L492af2.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v2 @kind object;
  #L492af6.  v4:= v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` @kind wide;
  #L492afa.  v2:= 1I;
  #L492afc.  v6:= 1I;
  #L492afe.  v7:= v14.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L492b02.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L492b08.  v7:= temp @kind wide;
  #L492b0a.  v9:= 0I;
  #L492b0c.  v10:= lcmp(v4, v7);
  #L492b10.  if v10 == 0 then goto L492b72;
  #L492b14.  v11:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L492b18.  if v11 == 0 then goto L492b22;
  #L492b1c.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L492b20.  return @kind void;
  #L492b22.  v11:= v13.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L492b26.  v12:= v13.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L492b2a.  if v11 == 0 then goto L492b52;
  #L492b2e.  if v3 != v12 then goto L492b52;
  #L492b32.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L492b36.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L492b3a.  v14:= v13.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L492b3e.  if v14 != 0 then goto L492b4a;
  #L492b42.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L492b48.  goto L492b50;
  #L492b4a.  call `onError`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L492b50.  return @kind void;
  #L492b52.  if v3 != v12 then goto L492b58;
  #L492b56.  goto L492b72;
  #L492b58.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L492b5e.  v9:= temp @kind object;
  #L492b60.  call `onNext`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L492b66.  v3:= v3 + 1;
  #L492b6a.  v9:= 1L;
  #L492b6e.  v4:= v4 + v9 @kind long;
  #L492b70.  goto L492b0a;
  #L492b72.  if v10 != 0 then goto L492bb4;
  #L492b76.  v7:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L492b7a.  if v7 == 0 then goto L492b84;
  #L492b7e.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L492b82.  return @kind void;
  #L492b84.  v7:= v13.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L492b88.  v8:= v13.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L492b8c.  if v7 == 0 then goto L492bb4;
  #L492b90.  if v3 != v8 then goto L492bb4;
  #L492b94.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v9 @kind object;
  #L492b98.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v2 @kind boolean;
  #L492b9c.  v14:= v13.`io.reactivex.processors.ReplayProcessor$g.b` @type ^`java.lang.Throwable` @kind object;
  #L492ba0.  if v14 != 0 then goto L492bac;
  #L492ba4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L492baa.  goto L492bb2;
  #L492bac.  call `onError`(v1, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L492bb2.  return @kind void;
  #L492bb4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L492bba.  v7:= temp @kind object;
  #L492bbc.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v7 @kind object;
  #L492bc0.  v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` := v4 @kind wide;
  #L492bc4.  v6:= -v6 @kind int;
  #L492bc6.  call temp:= `addAndGet`(v14, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L492bcc.  v6:= temp;
  #L492bce.  if v6 != 0 then goto L492afe;
  #L492bd2.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$g` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492974.  v0:= v2.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L492978.  if v0 != 0 then goto L492980;
  #L49297c.  v0:= 0I;
  #L49297e.  return v0 @kind object;
  #L492980.  v1:= v2.`io.reactivex.processors.ReplayProcessor$g.a` @type ^`java.util.List` @kind object;
  #L492984.  v0:= v0 + -1;
  #L492988.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L49298e.  v0:= temp @kind object;
  #L492990.  return v0 @kind object;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492944.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.c` @type ^`boolean` @kind boolean;
  #L492948.  return v0;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$g` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49295c.  v0:= v1.`io.reactivex.processors.ReplayProcessor$g.d` @type ^`int`;
  #L492960.  return v0;
}
