record `io.reactivex.processors.a` @kind class @AccessFlag FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.processors.a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.a.c` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.a.d` @AccessFlag ;
  `boolean` `io.reactivex.processors.a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.a` v0 @kind this, `io.reactivex.processors.FlowableProcessor` v1 @kind object) @signature `Lio/reactivex/processors/a;.<init>:(Lio/reactivex/processors/FlowableProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4931a8.  call `<init>`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L4931ae.  v0.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` := v1 @kind object;
  #L4931b2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.processors.a` v2 @kind this) @signature `Lio/reactivex/processors/a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4931c4.  @monitorenter v2
  #L4931c6.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4931ca.  if v0 != 0 then goto L4931d8;
  #L4931ce.  v0:= 0I;
  #L4931d0.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L4931d4.  @monitorexit v2
  #L4931d6.  return @kind void;
  #L4931d8.  v1:= 0I;
  #L4931da.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L4931de.  @monitorexit v2
  #L4931e0.  v1:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L4931e4.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4931ea.  goto L4931c4;
  #L4931ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4931ee.  @monitorexit v2
  #L4931f0.  throw v0;
  catch `java.lang.Throwable` @[L4931c6..L4931e0] goto L4931ec;
  catch `java.lang.Throwable` @[L4931ee..L4931f0] goto L4931ec;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493188.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49318c.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L493192.  v0:= temp @kind object;
  #L493194.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493128.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49312c.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasComplete:()Z` @kind virtual;
  #L493132.  v0:= temp;
  #L493134.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493148.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49314c.  call temp:= `hasSubscribers`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasSubscribers:()Z` @kind virtual;
  #L493152.  v0:= temp;
  #L493154.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.a` v1 @kind this) @signature `Lio/reactivex/processors/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L493168.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49316c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/processors/FlowableProcessor;.hasThrowable:()Z` @kind virtual;
  #L493172.  v0:= temp;
  #L493174.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.a` v2 @kind this) @signature `Lio/reactivex/processors/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493218.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L49321c.  if v0 == 0 then goto L493222;
  #L493220.  return @kind void;
  #L493222.  @monitorenter v2
  #L493224.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L493228.  if v0 == 0 then goto L493230;
  #L49322c.  @monitorexit v2
  #L49322e.  return @kind void;
  #L493230.  v0:= 1I;
  #L493232.  v2.`io.reactivex.processors.a.e` @type ^`boolean` := v0 @kind boolean;
  #L493236.  v1:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L49323a.  if v1 == 0 then goto L493268;
  #L49323e.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L493242.  if v0 != 0 then goto L493256;
  #L493246.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L49324a.  v1:= 4I;
  #L49324c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L493252.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L493256.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L49325c.  v1:= temp @kind object;
  #L49325e.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L493264.  @monitorexit v2
  #L493266.  return @kind void;
  #L493268.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L49326c.  @monitorexit v2
  #L49326e.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L493272.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L493278.  return @kind void;
  #L49327a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49327c.  @monitorexit v2
  #L49327e.  throw v0;
  catch `java.lang.Throwable` @[L493224..L49326e] goto L49327a;
  catch `java.lang.Throwable` @[L49327c..L49327e] goto L49327a;
}
procedure `void` `onError`(`io.reactivex.processors.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/processors/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4932a4.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4932a8.  if v0 == 0 then goto L4932b4;
  #L4932ac.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4932b2.  return @kind void;
  #L4932b4.  @monitorenter v2
  #L4932b6.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4932ba.  v1:= 1I;
  #L4932bc.  if v0 == 0 then goto L4932c2;
  #L4932c0.  goto L493300;
  #L4932c2.  v2.`io.reactivex.processors.a.e` @type ^`boolean` := v1 @kind boolean;
  #L4932c6.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L4932ca.  if v0 == 0 then goto L4932f8;
  #L4932ce.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4932d2.  if v0 != 0 then goto L4932e6;
  #L4932d6.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4932da.  v1:= 4I;
  #L4932dc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4932e2.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L4932e6.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L4932ec.  v3:= temp @kind object;
  #L4932ee.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L4932f4.  @monitorexit v2
  #L4932f6.  return @kind void;
  #L4932f8.  v0:= 0I;
  #L4932fa.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L4932fe.  v1:= 0I;
  #L493300.  @monitorexit v2
  #L493302.  if v1 == 0 then goto L49330e;
  #L493306.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L49330c.  return @kind void;
  #L49330e.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L493312.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L493318.  return @kind void;
  #L49331a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49331c.  @monitorexit v2
  #L49331e.  throw v3;
  catch `java.lang.Throwable` @[L4932b6..L493302] goto L49331a;
  catch `java.lang.Throwable` @[L49331c..L49331e] goto L49331a;
}
procedure `void` `onNext`(`io.reactivex.processors.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493344.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L493348.  if v0 == 0 then goto L49334e;
  #L49334c.  return @kind void;
  #L49334e.  @monitorenter v2
  #L493350.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L493354.  if v0 == 0 then goto L49335c;
  #L493358.  @monitorexit v2
  #L49335a.  return @kind void;
  #L49335c.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L493360.  if v0 == 0 then goto L49338e;
  #L493364.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L493368.  if v0 != 0 then goto L49337c;
  #L49336c.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L493370.  v1:= 4I;
  #L493372.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L493378.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L49337c.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L493382.  v3:= temp @kind object;
  #L493384.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L49338a.  @monitorexit v2
  #L49338c.  return @kind void;
  #L49338e.  v0:= 1I;
  #L493390.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v0 @kind boolean;
  #L493394.  @monitorexit v2
  #L493396.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49339a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4933a0.  call `e`(v2) @signature `Lio/reactivex/processors/a;.e:()V` @kind virtual;
  #L4933a6.  return @kind void;
  #L4933a8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4933aa.  @monitorexit v2
  #L4933ac.  throw v3;
  catch `java.lang.Throwable` @[L493350..L493396] goto L4933a8;
  catch `java.lang.Throwable` @[L4933aa..L4933ac] goto L4933a8;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4933d4.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4933d8.  v1:= 1I;
  #L4933da.  if v0 != 0 then goto L49342e;
  #L4933de.  @monitorenter v2
  #L4933e0.  v0:= v2.`io.reactivex.processors.a.e` @type ^`boolean` @kind boolean;
  #L4933e4.  if v0 == 0 then goto L4933ea;
  #L4933e8.  goto L493424;
  #L4933ea.  v0:= v2.`io.reactivex.processors.a.c` @type ^`boolean` @kind boolean;
  #L4933ee.  if v0 == 0 then goto L49341c;
  #L4933f2.  v0:= v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4933f6.  if v0 != 0 then goto L49340a;
  #L4933fa.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4933fe.  v1:= 4I;
  #L493400.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L493406.  v2.`io.reactivex.processors.a.d` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L49340a.  call temp:= `subscription`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.subscription:(Lorg/reactivestreams/Subscription;)Ljava/lang/Object;` @kind static;
  #L493410.  v3:= temp @kind object;
  #L493412.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L493418.  @monitorexit v2
  #L49341a.  return @kind void;
  #L49341c.  v2.`io.reactivex.processors.a.c` @type ^`boolean` := v1 @kind boolean;
  #L493420.  v0:= 0I;
  #L493422.  v1:= 0I;
  #L493424.  @monitorexit v2
  #L493426.  goto L49342e;
  #L493428.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49342a.  @monitorexit v2
  #L49342c.  throw v3;
  #L49342e.  if v1 == 0 then goto L49343a;
  #L493432.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L493438.  goto L49344a;
  #L49343a.  v0:= v2.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49343e.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L493444.  call `e`(v2) @signature `Lio/reactivex/processors/a;.e:()V` @kind virtual;
  #L49344a.  return @kind void;
  catch `java.lang.Throwable` @[L4933e0..L49342c] goto L493428;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L493468.  v0:= v1.`io.reactivex.processors.a.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L49346c.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L493472.  return @kind void;
}
