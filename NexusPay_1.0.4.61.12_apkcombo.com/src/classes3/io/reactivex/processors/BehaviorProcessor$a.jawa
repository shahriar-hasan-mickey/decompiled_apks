record `io.reactivex.processors.BehaviorProcessor$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.processors.BehaviorProcessor$a.a` @AccessFlag FINAL;
  `io.reactivex.processors.BehaviorProcessor` `io.reactivex.processors.BehaviorProcessor$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.c` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.processors.BehaviorProcessor$a.e` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.f` @AccessFlag ;
  `boolean` `io.reactivex.processors.BehaviorProcessor$a.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.processors.BehaviorProcessor$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.processors.BehaviorProcessor$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.processors.BehaviorProcessor$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.processors.BehaviorProcessor` v2 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/BehaviorProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L490764.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L49076a.  v0.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L49076e.  v0.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` := v2 @kind object;
  #L490772.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.BehaviorProcessor$a` v4 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4907b0.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4907b4.  if v0 == 0 then goto L4907ba;
  #L4907b8.  return @kind void;
  #L4907ba.  @monitorenter v4
  #L4907bc.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4907c0.  if v0 == 0 then goto L4907c8;
  #L4907c4.  @monitorexit v4
  #L4907c6.  return @kind void;
  #L4907c8.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` @kind boolean;
  #L4907cc.  if v0 == 0 then goto L4907d4;
  #L4907d0.  @monitorexit v4
  #L4907d2.  return @kind void;
  #L4907d4.  v0:= v4.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L4907d8.  v1:= v0.`io.reactivex.processors.BehaviorProcessor.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4907dc.  call `lock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4907e2.  v2:= v0.`io.reactivex.processors.BehaviorProcessor.h` @type ^`long` @kind wide;
  #L4907e6.  v4.`io.reactivex.processors.BehaviorProcessor$a.h` @type ^`long` := v2 @kind wide;
  #L4907ea.  v0:= v0.`io.reactivex.processors.BehaviorProcessor.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4907ee.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4907f4.  v0:= temp @kind object;
  #L4907f6.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4907fc.  v1:= 1I;
  #L4907fe.  if v0 == 0 then goto L490806;
  #L490802.  v2:= 1I;
  #L490804.  goto L490808;
  #L490806.  v2:= 0I;
  #L490808.  v4.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` := v2 @kind boolean;
  #L49080c.  v4.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` := v1 @kind boolean;
  #L490810.  @monitorexit v4
  #L490812.  if v0 == 0 then goto L49082a;
  #L490816.  call temp:= `test`(v4, v0) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L49081c.  v0:= temp;
  #L49081e.  if v0 == 0 then goto L490824;
  #L490822.  return @kind void;
  #L490824.  call `b`(v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.b:()V` @kind virtual;
  #L49082a.  return @kind void;
  #L49082c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49082e.  @monitorexit v4
  #L490830.  throw v0;
  catch `java.lang.Throwable` @[L4907bc..L490812] goto L49082c;
  catch `java.lang.Throwable` @[L49082e..L490830] goto L49082c;
}
procedure `void` `b`(`io.reactivex.processors.BehaviorProcessor$a` v2 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L490858.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L49085c.  if v0 == 0 then goto L490862;
  #L490860.  return @kind void;
  #L490862.  @monitorenter v2
  #L490864.  v0:= v2.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L490868.  if v0 != 0 then goto L490876;
  #L49086c.  v0:= 0I;
  #L49086e.  v2.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` := v0 @kind boolean;
  #L490872.  @monitorexit v2
  #L490874.  return @kind void;
  #L490876.  v1:= 0I;
  #L490878.  v2.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L49087c.  @monitorexit v2
  #L49087e.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L490884.  goto L490858;
  #L490886.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L490888.  @monitorexit v2
  #L49088a.  throw v0;
  catch `java.lang.Throwable` @[L490864..L49087e] goto L490886;
  catch `java.lang.Throwable` @[L490888..L49088a] goto L490886;
}
procedure `void` `c`(`io.reactivex.processors.BehaviorProcessor$a` v3 @kind this, `java.lang.Object` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.c:(Ljava/lang/Object;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4908b0.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4908b4.  if v0 == 0 then goto L4908ba;
  #L4908b8.  return @kind void;
  #L4908ba.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.f` @type ^`boolean` @kind boolean;
  #L4908be.  if v0 != 0 then goto L49091e;
  #L4908c2.  @monitorenter v3
  #L4908c4.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4908c8.  if v0 == 0 then goto L4908d0;
  #L4908cc.  @monitorexit v3
  #L4908ce.  return @kind void;
  #L4908d0.  v0:= v3.`io.reactivex.processors.BehaviorProcessor$a.h` @type ^`long` @kind wide;
  #L4908d4.  v2:= lcmp(v0, v5);
  #L4908d8.  if v2 != 0 then goto L4908e0;
  #L4908dc.  @monitorexit v3
  #L4908de.  return @kind void;
  #L4908e0.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$a.d` @type ^`boolean` @kind boolean;
  #L4908e4.  if v5 == 0 then goto L49090a;
  #L4908e8.  v5:= v3.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L4908ec.  if v5 != 0 then goto L490900;
  #L4908f0.  v5:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L4908f4.  v6:= 4I;
  #L4908f6.  call `<init>`(v5, v6) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L4908fc.  v3.`io.reactivex.processors.BehaviorProcessor$a.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v5 @kind object;
  #L490900.  call `add`(v5, v4) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L490906.  @monitorexit v3
  #L490908.  return @kind void;
  #L49090a.  v5:= 1I;
  #L49090c.  v3.`io.reactivex.processors.BehaviorProcessor$a.c` @type ^`boolean` := v5 @kind boolean;
  #L490910.  @monitorexit v3
  #L490912.  v3.`io.reactivex.processors.BehaviorProcessor$a.f` @type ^`boolean` := v5 @kind boolean;
  #L490916.  goto L49091e;
  #L490918.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L49091a.  @monitorexit v3
  #L49091c.  throw v4;
  #L49091e.  call temp:= `test`(v3, v4) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @kind virtual;
  #L490924.  return @kind void;
  catch `java.lang.Throwable` @[L4908c4..L490912] goto L490918;
  catch `java.lang.Throwable` @[L49091a..L49091c] goto L490918;
}
procedure `void` `cancel`(`io.reactivex.processors.BehaviorProcessor$a` v1 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L490784.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L490788.  if v0 != 0 then goto L49079c;
  #L49078c.  v0:= 1I;
  #L49078e.  v1.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` := v0 @kind boolean;
  #L490792.  v0:= v1.`io.reactivex.processors.BehaviorProcessor$a.b` @type ^`io.reactivex.processors.BehaviorProcessor` @kind object;
  #L490796.  call `f`(v0, v1) @signature `Lio/reactivex/processors/BehaviorProcessor;.f:(Lio/reactivex/processors/BehaviorProcessor$a;)V` @kind virtual;
  #L49079c.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.processors.BehaviorProcessor$a` v5 @kind this) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490680.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L490686.  v0:= temp @kind wide;
  #L490688.  v2:= 0L;
  #L49068c.  v4:= lcmp(v0, v2);
  #L490690.  if v4 != 0 then goto L490698;
  #L490694.  v0:= 1I;
  #L490696.  goto L49069a;
  #L490698.  v0:= 0I;
  #L49069a.  return v0;
}
procedure `void` `request`(`io.reactivex.processors.BehaviorProcessor$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49094c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L490952.  v0:= temp;
  #L490954.  if v0 == 0 then goto L49095e;
  #L490958.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L49095e.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.processors.BehaviorProcessor$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4906ac.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.g` @type ^`boolean` @kind boolean;
  #L4906b0.  v1:= 1I;
  #L4906b2.  if v0 == 0 then goto L4906b8;
  #L4906b6.  return v1;
  #L4906b8.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4906be.  v0:= temp;
  #L4906c0.  if v0 == 0 then goto L4906d0;
  #L4906c4.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4906c8.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4906ce.  return v1;
  #L4906d0.  call temp:= `isError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4906d6.  v0:= temp;
  #L4906d8.  if v0 == 0 then goto L4906f0;
  #L4906dc.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4906e0.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L4906e6.  v7:= temp @kind object;
  #L4906e8.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4906ee.  return v1;
  #L4906f0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4906f6.  v2:= temp @kind wide;
  #L4906f8.  v4:= 0L;
  #L4906fc.  v0:= lcmp(v2, v4);
  #L490700.  if v0 == 0 then goto L490732;
  #L490704.  v0:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L490708.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L49070e.  v7:= temp @kind object;
  #L490710.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L490716.  v0:= 9223372036854775807L;
  #L490720.  v7:= lcmp(v2, v0);
  #L490724.  if v7 == 0 then goto L49072e;
  #L490728.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L49072e.  v7:= 0I;
  #L490730.  return v7;
  #L490732.  call `cancel`(v6) @signature `Lio/reactivex/processors/BehaviorProcessor$a;.cancel:()V` @kind virtual;
  #L490738.  v7:= v6.`io.reactivex.processors.BehaviorProcessor$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L49073c.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L490740.  v2:= "Could not deliver value due to lack of requests" @kind object;
  #L490744.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L49074a.  call `onError`(v7, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L490750.  return v1;
}
