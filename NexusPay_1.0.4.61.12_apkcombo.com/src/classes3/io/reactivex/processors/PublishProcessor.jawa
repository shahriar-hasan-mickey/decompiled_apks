record `io.reactivex.processors.PublishProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.PublishProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.processors.PublishProcessor.c` @AccessFlag ;
}
global `io.reactivex.processors.PublishProcessor$a`[] `@@io.reactivex.processors.PublishProcessor.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.PublishProcessor$a`[] `@@io.reactivex.processors.PublishProcessor.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/PublishProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L491d38.  v0:= 0I;
  #L491d3a.  v1:= new `io.reactivex.processors.PublishProcessor$a`[v0];
  #L491d3e.  `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] := v1 @kind object;
  #L491d42.  v0:= new `io.reactivex.processors.PublishProcessor$a`[v0];
  #L491d46.  `@@io.reactivex.processors.PublishProcessor.e` @type ^`io.reactivex.processors.PublishProcessor$a`[] := v0 @kind object;
  #L491d4a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L491d5c.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L491d62.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L491d66.  v1:= `@@io.reactivex.processors.PublishProcessor.e` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491d6a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L491d70.  v2.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L491d74.  return @kind void;
}
procedure `io.reactivex.processors.PublishProcessor` `create`() @signature `Lio/reactivex/processors/PublishProcessor;.create:()Lio/reactivex/processors/PublishProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L491cec.  v0:= new `io.reactivex.processors.PublishProcessor`;
  #L491cf0.  call `<init>`(v0) @signature `Lio/reactivex/processors/PublishProcessor;.<init>:()V` @kind direct;
  #L491cf6.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `io.reactivex.processors.PublishProcessor$a` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.e:(Lio/reactivex/processors/PublishProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L491b88.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491b8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491b92.  v0:= temp @kind object;
  #L491b94.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491b98.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491b9c.  v2:= 0I;
  #L491b9e.  if v0 != v1 then goto L491ba4;
  #L491ba2.  return v2;
  #L491ba4.  v1:= length @variable v0;
  #L491ba6.  v3:= v1 + 1;
  #L491baa.  v3:= new `io.reactivex.processors.PublishProcessor$a`[v3];
  #L491bae.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L491bb4.  v3[v1]:= v5 @kind object;
  #L491bb8.  v1:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491bbc.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L491bc2.  v0:= temp;
  #L491bc4.  if v0 == 0 then goto L491b88;
  #L491bc8.  v5:= 1I;
  #L491bca.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.PublishProcessor` v6 @kind this, `io.reactivex.processors.PublishProcessor$a` v7 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.f:(Lio/reactivex/processors/PublishProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L491ec0.  v0:= v6.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491ec4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491eca.  v0:= temp @kind object;
  #L491ecc.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491ed0.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491ed4.  if v0 == v1 then goto L491f40;
  #L491ed8.  v1:= `@@io.reactivex.processors.PublishProcessor.e` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491edc.  if v0 != v1 then goto L491ee2;
  #L491ee0.  goto L491f40;
  #L491ee2.  v1:= length @variable v0;
  #L491ee4.  v2:= -1I;
  #L491ee6.  v3:= 0I;
  #L491ee8.  v4:= 0I;
  #L491eea.  if v4 >= v1 then goto L491f00;
  #L491eee.  v5:= v0[v4] @kind object;
  #L491ef2.  if v5 != v7 then goto L491efa;
  #L491ef6.  v2:= v4;
  #L491ef8.  goto L491f00;
  #L491efa.  v4:= v4 + 1;
  #L491efe.  goto L491eea;
  #L491f00.  if v2 >= 0 then goto L491f06;
  #L491f04.  return @kind void;
  #L491f06.  v4:= 1I;
  #L491f08.  if v1 != v4 then goto L491f12;
  #L491f0c.  v1:= `@@io.reactivex.processors.PublishProcessor.e` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491f10.  goto L491f30;
  #L491f12.  v5:= v1 + -1;
  #L491f16.  v5:= new `io.reactivex.processors.PublishProcessor$a`[v5];
  #L491f1a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L491f20.  v3:= v2 + 1;
  #L491f24.  v1:= v1 - v2 @kind int;
  #L491f26.  v1:= v1 - v4 @kind int;
  #L491f28.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L491f2e.  v1:= v5 @kind object;
  #L491f30.  v2:= v6.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491f34.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L491f3a.  v0:= temp;
  #L491f3c.  if v0 == 0 then goto L491ec0;
  #L491f40.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491d08.  v0:= v2.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491d0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491d12.  v0:= temp @kind object;
  #L491d14.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491d18.  if v0 != v1 then goto L491d22;
  #L491d1c.  v0:= v2.`io.reactivex.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L491d20.  return v0 @kind object;
  #L491d22.  v0:= 0I;
  #L491d24.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491bdc.  v0:= v2.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491be0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491be6.  v0:= temp @kind object;
  #L491be8.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491bec.  if v0 != v1 then goto L491bfc;
  #L491bf0.  v0:= v2.`io.reactivex.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L491bf4.  if v0 != 0 then goto L491bfc;
  #L491bf8.  v0:= 1I;
  #L491bfa.  goto L491bfe;
  #L491bfc.  v0:= 0I;
  #L491bfe.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.PublishProcessor` v1 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L491c10.  v0:= v1.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491c14.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491c1a.  v0:= temp @kind object;
  #L491c1c.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491c20.  v0:= length @variable v0;
  #L491c22.  if v0 == 0 then goto L491c2a;
  #L491c26.  v0:= 1I;
  #L491c28.  goto L491c2c;
  #L491c2a.  v0:= 0I;
  #L491c2c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.PublishProcessor` v2 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491c40.  v0:= v2.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491c44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491c4a.  v0:= temp @kind object;
  #L491c4c.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491c50.  if v0 != v1 then goto L491c60;
  #L491c54.  v0:= v2.`io.reactivex.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L491c58.  if v0 == 0 then goto L491c60;
  #L491c5c.  v0:= 1I;
  #L491c5e.  goto L491c62;
  #L491c60.  v0:= 0I;
  #L491c62.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.processors.PublishProcessor` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L491c74.  v0:= 1I;
  #L491c76.  if v7 != 0 then goto L491c90;
  #L491c7a.  v7:= new `java.lang.NullPointerException`;
  #L491c7e.  v1:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L491c82.  call `<init>`(v7, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L491c88.  call `onError`(v6, v7) @signature `Lio/reactivex/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491c8e.  return v0;
  #L491c90.  v1:= v6.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491c94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491c9a.  v1:= temp @kind object;
  #L491c9c.  v1:= (`io.reactivex.processors.PublishProcessor$a`[]) v1 @kind object;
  #L491ca0.  v2:= length @variable v1;
  #L491ca2.  v3:= 0I;
  #L491ca4.  v4:= 0I;
  #L491ca6.  if v4 >= v2 then goto L491cc2;
  #L491caa.  v5:= v1[v4] @kind object;
  #L491cae.  call temp:= `b`(v5) @signature `Lio/reactivex/processors/PublishProcessor$a;.b:()Z` @kind virtual;
  #L491cb4.  v5:= temp;
  #L491cb6.  if v5 == 0 then goto L491cbc;
  #L491cba.  return v3;
  #L491cbc.  v4:= v4 + 1;
  #L491cc0.  goto L491ca6;
  #L491cc2.  v2:= length @variable v1;
  #L491cc4.  if v3 >= v2 then goto L491cd8;
  #L491cc8.  v4:= v1[v3] @kind object;
  #L491ccc.  call `e`(v4, v7) @signature `Lio/reactivex/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L491cd2.  v3:= v3 + 1;
  #L491cd6.  goto L491cc4;
  #L491cd8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.PublishProcessor` v4 @kind this) @signature `Lio/reactivex/processors/PublishProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L491d88.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491d8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491d92.  v0:= temp @kind object;
  #L491d94.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491d98.  if v0 != v1 then goto L491d9e;
  #L491d9c.  return @kind void;
  #L491d9e.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491da2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L491da8.  v0:= temp @kind object;
  #L491daa.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491dae.  v1:= length @variable v0;
  #L491db0.  v2:= 0I;
  #L491db2.  if v2 >= v1 then goto L491dc6;
  #L491db6.  v3:= v0[v2] @kind object;
  #L491dba.  call `c`(v3) @signature `Lio/reactivex/processors/PublishProcessor$a;.c:()V` @kind virtual;
  #L491dc0.  v2:= v2 + 1;
  #L491dc4.  goto L491db2;
  #L491dc6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L491dd8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L491ddc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L491de2.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491de6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491dec.  v0:= temp @kind object;
  #L491dee.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491df2.  if v0 != v1 then goto L491dfe;
  #L491df6.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L491dfc.  return @kind void;
  #L491dfe.  v4.`io.reactivex.processors.PublishProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L491e02.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491e06.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L491e0c.  v0:= temp @kind object;
  #L491e0e.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491e12.  v1:= length @variable v0;
  #L491e14.  v2:= 0I;
  #L491e16.  if v2 >= v1 then goto L491e2a;
  #L491e1a.  v3:= v0[v2] @kind object;
  #L491e1e.  call `d`(v3, v5) @signature `Lio/reactivex/processors/PublishProcessor$a;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L491e24.  v2:= v2 + 1;
  #L491e28.  goto L491e16;
  #L491e2a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.PublishProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L491e3c.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L491e40.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L491e46.  v0:= v4.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491e4a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491e50.  v0:= temp @kind object;
  #L491e52.  v0:= (`io.reactivex.processors.PublishProcessor$a`[]) v0 @kind object;
  #L491e56.  v1:= length @variable v0;
  #L491e58.  v2:= 0I;
  #L491e5a.  if v2 >= v1 then goto L491e6e;
  #L491e5e.  v3:= v0[v2] @kind object;
  #L491e62.  call `e`(v3, v5) @signature `Lio/reactivex/processors/PublishProcessor$a;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L491e68.  v2:= v2 + 1;
  #L491e6c.  goto L491e5a;
  #L491e6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L491e80.  v0:= v2.`io.reactivex.processors.PublishProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L491e84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L491e8a.  v0:= temp @kind object;
  #L491e8c.  v1:= `@@io.reactivex.processors.PublishProcessor.d` @type ^`io.reactivex.processors.PublishProcessor$a`[] @kind object;
  #L491e90.  if v0 != v1 then goto L491e9c;
  #L491e94.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L491e9a.  return @kind void;
  #L491e9c.  v0:= 9223372036854775807L;
  #L491ea6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L491eac.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.PublishProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/PublishProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L491f54.  v0:= new `io.reactivex.processors.PublishProcessor$a`;
  #L491f58.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/PublishProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/PublishProcessor;)V` @kind direct;
  #L491f5e.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L491f64.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/processors/PublishProcessor;.e:(Lio/reactivex/processors/PublishProcessor$a;)Z` @kind virtual;
  #L491f6a.  v1:= temp;
  #L491f6c.  if v1 == 0 then goto L491f84;
  #L491f70.  call temp:= `a`(v0) @signature `Lio/reactivex/processors/PublishProcessor$a;.a:()Z` @kind virtual;
  #L491f76.  v3:= temp;
  #L491f78.  if v3 == 0 then goto L491f9a;
  #L491f7c.  call `f`(v2, v0) @signature `Lio/reactivex/processors/PublishProcessor;.f:(Lio/reactivex/processors/PublishProcessor$a;)V` @kind virtual;
  #L491f82.  goto L491f9a;
  #L491f84.  v0:= v2.`io.reactivex.processors.PublishProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L491f88.  if v0 == 0 then goto L491f94;
  #L491f8c.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L491f92.  goto L491f9a;
  #L491f94.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L491f9a.  return @kind void;
}
