record `io.reactivex.processors.ReplayProcessor$e` @kind class @AccessFlag FINAL extends `io.reactivex.processors.ReplayProcessor$b` @kind interface {
  `int` `io.reactivex.processors.ReplayProcessor$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.processors.ReplayProcessor$e.b` @AccessFlag ;
  `io.reactivex.processors.ReplayProcessor$a` `io.reactivex.processors.ReplayProcessor$e.c` @AccessFlag VOLATILE;
  `io.reactivex.processors.ReplayProcessor$a` `io.reactivex.processors.ReplayProcessor$e.d` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.processors.ReplayProcessor$e.e` @AccessFlag ;
  `boolean` `io.reactivex.processors.ReplayProcessor$e.f` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4926d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4926da.  v0:= "maxSize" @kind object;
  #L4926de.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L4926e4.  v2:= temp;
  #L4926e6.  v1.`io.reactivex.processors.ReplayProcessor$e.a` @type ^`int` := v2;
  #L4926ea.  v2:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L4926ee.  v0:= 0I;
  #L4926f0.  call `<init>`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4926f6.  v1.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` := v2 @kind object;
  #L4926fa.  v1.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` := v2 @kind object;
  #L4926fe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.processors.ReplayProcessor$e` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L492730.  v0.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L492734.  call `c`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$e;.c:()V` @kind virtual;
  #L49273a.  v1:= 1I;
  #L49273c.  v0.`io.reactivex.processors.ReplayProcessor$e.f` @type ^`boolean` := v1 @kind boolean;
  #L492740.  return @kind void;
}
procedure `void` `b`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492754.  v0:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L492758.  call `<init>`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L49275e.  v3:= v2.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L492762.  v2.`io.reactivex.processors.ReplayProcessor$e.d` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L492766.  v1:= v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int`;
  #L49276a.  v1:= v1 + 1;
  #L49276e.  v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int` := v1;
  #L492772.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L492778.  call `g`(v2) @signature `Lio/reactivex/processors/ReplayProcessor$e;.g:()V` @kind virtual;
  #L49277e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4928e4.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4928e8.  v0:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L4928ec.  if v0 == 0 then goto L492912;
  #L4928f0.  v0:= new `io.reactivex.processors.ReplayProcessor$a`;
  #L4928f4.  v1:= 0I;
  #L4928f6.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4928fc.  v1:= v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L492900.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492906.  v1:= temp @kind object;
  #L492908.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L49290e.  v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L492912.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.processors.ReplayProcessor$e` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492710.  call `c`(v1) @signature `Lio/reactivex/processors/ReplayProcessor$e;.c:()V` @kind virtual;
  #L492716.  v0:= 1I;
  #L492718.  v1.`io.reactivex.processors.ReplayProcessor$e.f` @type ^`boolean` := v0 @kind boolean;
  #L49271c.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.processors.ReplayProcessor$e` v4 @kind this, `java.lang.Object`[] v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L49263c.  v0:= v4.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L492640.  v1:= 0I;
  #L492642.  v2:= v0 @kind object;
  #L492644.  v3:= 0I;
  #L492646.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49264c.  v2:= temp @kind object;
  #L49264e.  v2:= (`io.reactivex.processors.ReplayProcessor$a`) v2 @kind object;
  #L492652.  if v2 != 0 then goto L4926a4;
  #L492656.  v2:= length @variable v5;
  #L492658.  if v2 >= v3 then goto L492678;
  #L49265c.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L492662.  v5:= temp @kind object;
  #L492664.  call temp:= `getComponentType`(v5) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L49266a.  v5:= temp @kind object;
  #L49266c.  call temp:= `newInstance`(v5, v3) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L492672.  v5:= temp @kind object;
  #L492674.  v5:= (`java.lang.Object`[]) v5 @kind object;
  #L492678.  if v1 >= v3 then goto L492696;
  #L49267c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492682.  v0:= temp @kind object;
  #L492684.  v0:= (`io.reactivex.processors.ReplayProcessor$a`) v0 @kind object;
  #L492688.  v2:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L49268c.  v5[v1]:= v2 @kind object;
  #L492690.  v1:= v1 + 1;
  #L492694.  goto L492678;
  #L492696.  v0:= length @variable v5;
  #L492698.  if v0 <= v3 then goto L4926a2;
  #L49269c.  v0:= 0I;
  #L49269e.  v5[v3]:= v0 @kind object;
  #L4926a2.  return v5 @kind object;
  #L4926a4.  v3:= v3 + 1;
  #L4926a8.  goto L492646;
}
procedure `java.lang.Throwable` `e`(`io.reactivex.processors.ReplayProcessor$e` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.e:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4926bc.  v0:= v1.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`java.lang.Throwable` @kind object;
  #L4926c0.  return v0 @kind object;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor$e` v13 @kind this, `io.reactivex.processors.ReplayProcessor$c` v14 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor$e;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L492790.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L492796.  v0:= temp;
  #L492798.  if v0 == 0 then goto L49279e;
  #L49279c.  return @kind void;
  #L49279e.  v0:= v14.`io.reactivex.processors.ReplayProcessor$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4927a2.  v1:= v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` @kind object;
  #L4927a6.  v1:= (`io.reactivex.processors.ReplayProcessor$a`) v1 @kind object;
  #L4927aa.  if v1 != 0 then goto L4927b2;
  #L4927ae.  v1:= v13.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4927b2.  v2:= v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` @kind wide;
  #L4927b6.  v4:= 1I;
  #L4927b8.  v5:= 1I;
  #L4927ba.  v6:= v14.`io.reactivex.processors.ReplayProcessor$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4927be.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4927c4.  v6:= temp @kind wide;
  #L4927c6.  v8:= 0I;
  #L4927c8.  v9:= lcmp(v2, v6);
  #L4927cc.  if v9 == 0 then goto L49283a;
  #L4927d0.  v10:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L4927d4.  if v10 == 0 then goto L4927de;
  #L4927d8.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L4927dc.  return @kind void;
  #L4927de.  v10:= v13.`io.reactivex.processors.ReplayProcessor$e.f` @type ^`boolean` @kind boolean;
  #L4927e2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4927e8.  v11:= temp @kind object;
  #L4927ea.  v11:= (`io.reactivex.processors.ReplayProcessor$a`) v11 @kind object;
  #L4927ee.  if v11 != 0 then goto L4927f6;
  #L4927f2.  v12:= 1I;
  #L4927f4.  goto L4927f8;
  #L4927f6.  v12:= 0I;
  #L4927f8.  if v10 == 0 then goto L492820;
  #L4927fc.  if v12 == 0 then goto L492820;
  #L492800.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L492804.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v4 @kind boolean;
  #L492808.  v14:= v13.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`java.lang.Throwable` @kind object;
  #L49280c.  if v14 != 0 then goto L492818;
  #L492810.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L492816.  goto L49281e;
  #L492818.  call `onError`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49281e.  return @kind void;
  #L492820.  if v12 == 0 then goto L492826;
  #L492824.  goto L49283a;
  #L492826.  v1:= v11.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L49282a.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L492830.  v8:= 1L;
  #L492834.  v2:= v2 + v8 @kind long;
  #L492836.  v1:= v11 @kind object;
  #L492838.  goto L4927c6;
  #L49283a.  if v9 != 0 then goto L492880;
  #L49283e.  v6:= v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L492842.  if v6 == 0 then goto L49284c;
  #L492846.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L49284a.  return @kind void;
  #L49284c.  v6:= v13.`io.reactivex.processors.ReplayProcessor$e.f` @type ^`boolean` @kind boolean;
  #L492850.  if v6 == 0 then goto L492880;
  #L492854.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49285a.  v6:= temp @kind object;
  #L49285c.  if v6 != 0 then goto L492880;
  #L492860.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v8 @kind object;
  #L492864.  v14.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` := v4 @kind boolean;
  #L492868.  v14:= v13.`io.reactivex.processors.ReplayProcessor$e.e` @type ^`java.lang.Throwable` @kind object;
  #L49286c.  if v14 != 0 then goto L492878;
  #L492870.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L492876.  goto L49287e;
  #L492878.  call `onError`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L49287e.  return @kind void;
  #L492880.  v14.`io.reactivex.processors.ReplayProcessor$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L492884.  v14.`io.reactivex.processors.ReplayProcessor$c.f` @type ^`long` := v2 @kind wide;
  #L492888.  v5:= -v5 @kind int;
  #L49288a.  call temp:= `addAndGet`(v14, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L492890.  v5:= temp;
  #L492892.  if v5 != 0 then goto L4927ba;
  #L492896.  return @kind void;
}
procedure `void` `g`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4928a8.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int`;
  #L4928ac.  v1:= v2.`io.reactivex.processors.ReplayProcessor$e.a` @type ^`int`;
  #L4928b0.  if v0 <= v1 then goto L4928d0;
  #L4928b4.  v0:= v0 + -1;
  #L4928b8.  v2.`io.reactivex.processors.ReplayProcessor$e.b` @type ^`int` := v0;
  #L4928bc.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4928c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4928c6.  v0:= temp @kind object;
  #L4928c8.  v0:= (`io.reactivex.processors.ReplayProcessor$a`) v0 @kind object;
  #L4928cc.  v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` := v0 @kind object;
  #L4928d0.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor$e` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49260c.  v0:= v2.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L492610.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492616.  v1:= temp @kind object;
  #L492618.  v1:= (`io.reactivex.processors.ReplayProcessor$a`) v1 @kind object;
  #L49261c.  if v1 != 0 then goto L492626;
  #L492620.  v0:= v0.`io.reactivex.processors.ReplayProcessor$a.a` @type ^`java.lang.Object` @kind object;
  #L492624.  return v0 @kind object;
  #L492626.  v0:= v1 @kind object;
  #L492628.  goto L492610;
}
procedure `boolean` `isDone`(`io.reactivex.processors.ReplayProcessor$e` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4925b8.  v0:= v1.`io.reactivex.processors.ReplayProcessor$e.f` @type ^`boolean` @kind boolean;
  #L4925bc.  return v0;
}
procedure `int` `size`(`io.reactivex.processors.ReplayProcessor$e` v3 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4925d0.  v0:= v3.`io.reactivex.processors.ReplayProcessor$e.c` @type ^`io.reactivex.processors.ReplayProcessor$a` @kind object;
  #L4925d4.  v1:= 0I;
  #L4925d6.  v2:= 2147483647I;
  #L4925dc.  if v1 == v2 then goto L4925f8;
  #L4925e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4925e6.  v0:= temp @kind object;
  #L4925e8.  v0:= (`io.reactivex.processors.ReplayProcessor$a`) v0 @kind object;
  #L4925ec.  if v0 != 0 then goto L4925f2;
  #L4925f0.  goto L4925f8;
  #L4925f2.  v1:= v1 + 1;
  #L4925f6.  goto L4925d6;
  #L4925f8.  return v1;
}
