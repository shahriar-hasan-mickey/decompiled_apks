record `io.reactivex.processors.ReplayProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `io.reactivex.processors.ReplayProcessor$b` `io.reactivex.processors.ReplayProcessor.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.processors.ReplayProcessor.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.ReplayProcessor.d` @AccessFlag FINAL;
}
global `java.lang.Object`[] `@@io.reactivex.processors.ReplayProcessor.e` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.processors.ReplayProcessor$c`[] `@@io.reactivex.processors.ReplayProcessor.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.ReplayProcessor$c`[] `@@io.reactivex.processors.ReplayProcessor.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/ReplayProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L492e88.  v0:= 0I;
  #L492e8a.  v1:= new `java.lang.Object`[v0];
  #L492e8e.  `@@io.reactivex.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] := v1 @kind object;
  #L492e92.  v1:= new `io.reactivex.processors.ReplayProcessor$c`[v0];
  #L492e96.  `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] := v1 @kind object;
  #L492e9a.  v0:= new `io.reactivex.processors.ReplayProcessor$c`[v0];
  #L492e9e.  `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] := v0 @kind object;
  #L492ea2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `io.reactivex.processors.ReplayProcessor$b` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L492eb4.  call `<init>`(v1) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L492eba.  v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` := v2 @kind object;
  #L492ebe.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L492ec2.  v0:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L492ec6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L492ecc.  v1.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L492ed0.  return @kind void;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`() @signature `Lio/reactivex/processors/ReplayProcessor;.create:()Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L492d0c.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L492d10.  v1:= new `io.reactivex.processors.ReplayProcessor$g`;
  #L492d14.  v2:= 16I;
  #L492d18.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L492d1e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L492d24.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `create`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.create:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L492d38.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L492d3c.  v1:= new `io.reactivex.processors.ReplayProcessor$g`;
  #L492d40.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$g;.<init>:(I)V` @kind direct;
  #L492d46.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L492d4c.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithSize:(I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L492d60.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L492d64.  v1:= new `io.reactivex.processors.ReplayProcessor$e`;
  #L492d68.  call `<init>`(v1, v2) @signature `Lio/reactivex/processors/ReplayProcessor$e;.<init>:(I)V` @kind direct;
  #L492d6e.  call `<init>`(v0, v1) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L492d74.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L492d88.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L492d8c.  v7:= new `io.reactivex.processors.ReplayProcessor$d`;
  #L492d90.  v2:= 2147483647I;
  #L492d96.  v1:= v7 @kind object;
  #L492d98.  v3:= v8 @kind wide;
  #L492d9a.  v5:= v10 @kind object;
  #L492d9c.  v6:= v11 @kind object;
  #L492d9e.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L492da4.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L492daa.  return v0 @kind object;
}
procedure `io.reactivex.processors.ReplayProcessor` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/processors/ReplayProcessor;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/processors/ReplayProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L492dbc.  v0:= new `io.reactivex.processors.ReplayProcessor`;
  #L492dc0.  v7:= new `io.reactivex.processors.ReplayProcessor$d`;
  #L492dc4.  v1:= v7 @kind object;
  #L492dc6.  v2:= v12;
  #L492dc8.  v3:= v8 @kind wide;
  #L492dca.  v5:= v10 @kind object;
  #L492dcc.  v6:= v11 @kind object;
  #L492dce.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/processors/ReplayProcessor$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L492dd4.  call `<init>`(v0, v7) @signature `Lio/reactivex/processors/ReplayProcessor;.<init>:(Lio/reactivex/processors/ReplayProcessor$b;)V` @kind direct;
  #L492dda.  return v0 @kind object;
}
procedure `void` `cleanupBuffer`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492ee4.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492ee8.  call `c`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.c:()V` @kind interface;
  #L492eee.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `io.reactivex.processors.ReplayProcessor$c` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.e:(Lio/reactivex/processors/ReplayProcessor$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L492bf8.  v0:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492bfc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492c02.  v0:= temp @kind object;
  #L492c04.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L492c08.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L492c0c.  v2:= 0I;
  #L492c0e.  if v0 != v1 then goto L492c14;
  #L492c12.  return v2;
  #L492c14.  v1:= length @variable v0;
  #L492c16.  v3:= v1 + 1;
  #L492c1a.  v3:= new `io.reactivex.processors.ReplayProcessor$c`[v3];
  #L492c1e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L492c24.  v3[v1]:= v5 @kind object;
  #L492c28.  v1:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492c2c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L492c32.  v0:= temp;
  #L492c34.  if v0 == 0 then goto L492bf8;
  #L492c38.  v5:= 1I;
  #L492c3a.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.ReplayProcessor` v6 @kind this, `io.reactivex.processors.ReplayProcessor$c` v7 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L49304c.  v0:= v6.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L493050.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L493056.  v0:= temp @kind object;
  #L493058.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L49305c.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L493060.  if v0 == v1 then goto L4930cc;
  #L493064.  v1:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L493068.  if v0 != v1 then goto L49306e;
  #L49306c.  goto L4930cc;
  #L49306e.  v1:= length @variable v0;
  #L493070.  v2:= -1I;
  #L493072.  v3:= 0I;
  #L493074.  v4:= 0I;
  #L493076.  if v4 >= v1 then goto L49308c;
  #L49307a.  v5:= v0[v4] @kind object;
  #L49307e.  if v5 != v7 then goto L493086;
  #L493082.  v2:= v4;
  #L493084.  goto L49308c;
  #L493086.  v4:= v4 + 1;
  #L49308a.  goto L493076;
  #L49308c.  if v2 >= 0 then goto L493092;
  #L493090.  return @kind void;
  #L493092.  v4:= 1I;
  #L493094.  if v1 != v4 then goto L49309e;
  #L493098.  v1:= `@@io.reactivex.processors.ReplayProcessor.f` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L49309c.  goto L4930bc;
  #L49309e.  v5:= v1 + -1;
  #L4930a2.  v5:= new `io.reactivex.processors.ReplayProcessor$c`[v5];
  #L4930a6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4930ac.  v3:= v2 + 1;
  #L4930b0.  v1:= v1 - v2 @kind int;
  #L4930b2.  v1:= v1 - v4 @kind int;
  #L4930b4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4930ba.  v1:= v5 @kind object;
  #L4930bc.  v2:= v6.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4930c0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4930c6.  v0:= temp;
  #L4930c8.  if v0 == 0 then goto L49304c;
  #L4930cc.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492e58.  v0:= v2.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492e5c.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L492e62.  v1:= temp;
  #L492e64.  if v1 == 0 then goto L492e72;
  #L492e68.  call temp:= `e`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:()Ljava/lang/Throwable;` @kind interface;
  #L492e6e.  v0:= temp @kind object;
  #L492e70.  return v0 @kind object;
  #L492e72.  v0:= 0I;
  #L492e74.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492dec.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492df0.  call temp:= `getValue`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L492df6.  v0:= temp @kind object;
  #L492df8.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492e0c.  v0:= `@@io.reactivex.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] @kind object;
  #L492e10.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L492e16.  v0:= temp @kind object;
  #L492e18.  v1:= `@@io.reactivex.processors.ReplayProcessor.e` @type ^`java.lang.Object`[] @kind object;
  #L492e1c.  if v0 != v1 then goto L492e26;
  #L492e20.  v0:= 0I;
  #L492e22.  v0:= new `java.lang.Object`[v0];
  #L492e26.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492e38.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492e3c.  call temp:= `d`(v0, v2) @signature `Lio/reactivex/processors/ReplayProcessor$b;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L492e42.  v2:= temp @kind object;
  #L492e44.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492c4c.  v0:= v2.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492c50.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L492c56.  v1:= temp;
  #L492c58.  if v1 == 0 then goto L492c6c;
  #L492c5c.  call temp:= `e`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:()Ljava/lang/Throwable;` @kind interface;
  #L492c62.  v0:= temp @kind object;
  #L492c64.  if v0 != 0 then goto L492c6c;
  #L492c68.  v0:= 1I;
  #L492c6a.  goto L492c6e;
  #L492c6c.  v0:= 0I;
  #L492c6e.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492c80.  v0:= v1.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492c84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492c8a.  v0:= temp @kind object;
  #L492c8c.  v0:= (`io.reactivex.processors.ReplayProcessor$c`[]) v0 @kind object;
  #L492c90.  v0:= length @variable v0;
  #L492c92.  if v0 == 0 then goto L492c9a;
  #L492c96.  v0:= 1I;
  #L492c98.  goto L492c9c;
  #L492c9a.  v0:= 0I;
  #L492c9c.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.ReplayProcessor` v2 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L492cb0.  v0:= v2.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492cb4.  call temp:= `isDone`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.isDone:()Z` @kind interface;
  #L492cba.  v1:= temp;
  #L492cbc.  if v1 == 0 then goto L492cd0;
  #L492cc0.  call temp:= `e`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.e:()Ljava/lang/Throwable;` @kind interface;
  #L492cc6.  v0:= temp @kind object;
  #L492cc8.  if v0 == 0 then goto L492cd0;
  #L492ccc.  v0:= 1I;
  #L492cce.  goto L492cd2;
  #L492cd0.  v0:= 0I;
  #L492cd2.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.ReplayProcessor` v1 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L492ce4.  v0:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492ce8.  call temp:= `size`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.size:()I` @kind interface;
  #L492cee.  v0:= temp;
  #L492cf0.  if v0 == 0 then goto L492cf8;
  #L492cf4.  v0:= 1I;
  #L492cf6.  goto L492cfa;
  #L492cf8.  v0:= 0I;
  #L492cfa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.ReplayProcessor` v5 @kind this) @signature `Lio/reactivex/processors/ReplayProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L492f00.  v0:= v5.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L492f04.  if v0 == 0 then goto L492f0a;
  #L492f08.  return @kind void;
  #L492f0a.  v0:= 1I;
  #L492f0c.  v5.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L492f10.  v0:= v5.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492f14.  call `complete`(v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.complete:()V` @kind interface;
  #L492f1a.  v1:= v5.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492f1e.  v2:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L492f22.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L492f28.  v1:= temp @kind object;
  #L492f2a.  v1:= (`io.reactivex.processors.ReplayProcessor$c`[]) v1 @kind object;
  #L492f2e.  v2:= length @variable v1;
  #L492f30.  v3:= 0I;
  #L492f32.  if v3 >= v2 then goto L492f46;
  #L492f36.  v4:= v1[v3] @kind object;
  #L492f3a.  call `f`(v0, v4) @signature `Lio/reactivex/processors/ReplayProcessor$b;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L492f40.  v3:= v3 + 1;
  #L492f44.  goto L492f32;
  #L492f46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L492f58.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L492f5c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L492f62.  v0:= v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L492f66.  if v0 == 0 then goto L492f72;
  #L492f6a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L492f70.  return @kind void;
  #L492f72.  v0:= 1I;
  #L492f74.  v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` := v0 @kind boolean;
  #L492f78.  v0:= v4.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492f7c.  call `a`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L492f82.  v5:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492f86.  v1:= `@@io.reactivex.processors.ReplayProcessor.g` @type ^`io.reactivex.processors.ReplayProcessor$c`[] @kind object;
  #L492f8a.  call temp:= `getAndSet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L492f90.  v5:= temp @kind object;
  #L492f92.  v5:= (`io.reactivex.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L492f96.  v1:= length @variable v5;
  #L492f98.  v2:= 0I;
  #L492f9a.  if v2 >= v1 then goto L492fae;
  #L492f9e.  v3:= v5[v2] @kind object;
  #L492fa2.  call `f`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$b;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L492fa8.  v2:= v2 + 1;
  #L492fac.  goto L492f9a;
  #L492fae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.ReplayProcessor` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L492fc0.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L492fc4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L492fca.  v0:= v4.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L492fce.  if v0 == 0 then goto L492fd4;
  #L492fd2.  return @kind void;
  #L492fd4.  v0:= v4.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L492fd8.  call `b`(v0, v5) @signature `Lio/reactivex/processors/ReplayProcessor$b;.b:(Ljava/lang/Object;)V` @kind interface;
  #L492fde.  v5:= v4.`io.reactivex.processors.ReplayProcessor.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L492fe2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L492fe8.  v5:= temp @kind object;
  #L492fea.  v5:= (`io.reactivex.processors.ReplayProcessor$c`[]) v5 @kind object;
  #L492fee.  v1:= length @variable v5;
  #L492ff0.  v2:= 0I;
  #L492ff2.  if v2 >= v1 then goto L493006;
  #L492ff6.  v3:= v5[v2] @kind object;
  #L492ffa.  call `f`(v0, v3) @signature `Lio/reactivex/processors/ReplayProcessor$b;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L493000.  v2:= v2 + 1;
  #L493004.  goto L492ff2;
  #L493006.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.ReplayProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L493018.  v0:= v2.`io.reactivex.processors.ReplayProcessor.c` @type ^`boolean` @kind boolean;
  #L49301c.  if v0 == 0 then goto L493028;
  #L493020.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L493026.  return @kind void;
  #L493028.  v0:= 9223372036854775807L;
  #L493032.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L493038.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.ReplayProcessor` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/processors/ReplayProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L4930e0.  v0:= new `io.reactivex.processors.ReplayProcessor$c`;
  #L4930e4.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/processors/ReplayProcessor$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/ReplayProcessor;)V` @kind direct;
  #L4930ea.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4930f0.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.e:(Lio/reactivex/processors/ReplayProcessor$c;)Z` @kind virtual;
  #L4930f6.  v2:= temp;
  #L4930f8.  if v2 == 0 then goto L49310c;
  #L4930fc.  v2:= v0.`io.reactivex.processors.ReplayProcessor$c.e` @type ^`boolean` @kind boolean;
  #L493100.  if v2 == 0 then goto L49310c;
  #L493104.  call `f`(v1, v0) @signature `Lio/reactivex/processors/ReplayProcessor;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind virtual;
  #L49310a.  return @kind void;
  #L49310c.  v2:= v1.`io.reactivex.processors.ReplayProcessor.b` @type ^`io.reactivex.processors.ReplayProcessor$b` @kind object;
  #L493110.  call `f`(v2, v0) @signature `Lio/reactivex/processors/ReplayProcessor$b;.f:(Lio/reactivex/processors/ReplayProcessor$c;)V` @kind interface;
  #L493116.  return @kind void;
}
