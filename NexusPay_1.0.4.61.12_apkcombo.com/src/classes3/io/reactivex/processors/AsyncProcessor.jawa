record `io.reactivex.processors.AsyncProcessor` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.processors.FlowableProcessor` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.processors.AsyncProcessor.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.processors.AsyncProcessor.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.processors.AsyncProcessor.d` @AccessFlag ;
}
global `io.reactivex.processors.AsyncProcessor$a`[] `@@io.reactivex.processors.AsyncProcessor.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.processors.AsyncProcessor$a`[] `@@io.reactivex.processors.AsyncProcessor.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/processors/AsyncProcessor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4903ec.  v0:= 0I;
  #L4903ee.  v1:= new `io.reactivex.processors.AsyncProcessor$a`[v0];
  #L4903f2.  `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] := v1 @kind object;
  #L4903f6.  v0:= new `io.reactivex.processors.AsyncProcessor$a`[v0];
  #L4903fa.  `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] := v0 @kind object;
  #L4903fe.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L490410.  call `<init>`(v2) @signature `Lio/reactivex/processors/FlowableProcessor;.<init>:()V` @kind direct;
  #L490416.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L49041a.  v1:= `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L49041e.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L490424.  v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L490428.  return @kind void;
}
procedure `io.reactivex.processors.AsyncProcessor` `create`() @signature `Lio/reactivex/processors/AsyncProcessor;.create:()Lio/reactivex/processors/AsyncProcessor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4902f4.  v0:= new `io.reactivex.processors.AsyncProcessor`;
  #L4902f8.  call `<init>`(v0) @signature `Lio/reactivex/processors/AsyncProcessor;.<init>:()V` @kind direct;
  #L4902fe.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `io.reactivex.processors.AsyncProcessor$a` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.e:(Lio/reactivex/processors/AsyncProcessor$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4901d4.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4901d8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4901de.  v0:= temp @kind object;
  #L4901e0.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4901e4.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L4901e8.  v2:= 0I;
  #L4901ea.  if v0 != v1 then goto L4901f0;
  #L4901ee.  return v2;
  #L4901f0.  v1:= length @variable v0;
  #L4901f2.  v3:= v1 + 1;
  #L4901f6.  v3:= new `io.reactivex.processors.AsyncProcessor$a`[v3];
  #L4901fa.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L490200.  v3[v1]:= v5 @kind object;
  #L490204.  v1:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490208.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L49020e.  v0:= temp;
  #L490210.  if v0 == 0 then goto L4901d4;
  #L490214.  v5:= 1I;
  #L490216.  return v5;
}
procedure `void` `f`(`io.reactivex.processors.AsyncProcessor` v6 @kind this, `io.reactivex.processors.AsyncProcessor$a` v7 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.f:(Lio/reactivex/processors/AsyncProcessor$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L490590.  v0:= v6.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490594.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49059a.  v0:= temp @kind object;
  #L49059c.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4905a0.  v1:= length @variable v0;
  #L4905a2.  if v1 != 0 then goto L4905a8;
  #L4905a6.  return @kind void;
  #L4905a8.  v2:= -1I;
  #L4905aa.  v3:= 0I;
  #L4905ac.  v4:= 0I;
  #L4905ae.  if v4 >= v1 then goto L4905c4;
  #L4905b2.  v5:= v0[v4] @kind object;
  #L4905b6.  if v5 != v7 then goto L4905be;
  #L4905ba.  v2:= v4;
  #L4905bc.  goto L4905c4;
  #L4905be.  v4:= v4 + 1;
  #L4905c2.  goto L4905ae;
  #L4905c4.  if v2 >= 0 then goto L4905ca;
  #L4905c8.  return @kind void;
  #L4905ca.  v4:= 1I;
  #L4905cc.  if v1 != v4 then goto L4905d6;
  #L4905d0.  v1:= `@@io.reactivex.processors.AsyncProcessor.e` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L4905d4.  goto L4905f4;
  #L4905d6.  v5:= v1 + -1;
  #L4905da.  v5:= new `io.reactivex.processors.AsyncProcessor$a`[v5];
  #L4905de.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4905e4.  v3:= v2 + 1;
  #L4905e8.  v1:= v1 - v2 @kind int;
  #L4905ea.  v1:= v1 - v4 @kind int;
  #L4905ec.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4905f2.  v1:= v5 @kind object;
  #L4905f4.  v2:= v6.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4905f8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4905fe.  v0:= temp;
  #L490600.  if v0 == 0 then goto L490590;
  #L490604.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4903bc.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4903c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4903c6.  v0:= temp @kind object;
  #L4903c8.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L4903cc.  if v0 != v1 then goto L4903d6;
  #L4903d0.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4903d4.  goto L4903d8;
  #L4903d6.  v0:= 0I;
  #L4903d8.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490310.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490314.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49031a.  v0:= temp @kind object;
  #L49031c.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L490320.  if v0 != v1 then goto L49032a;
  #L490324.  v0:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L490328.  goto L49032c;
  #L49032a.  v0:= 0I;
  #L49032c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v3 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L490340.  call temp:= `getValue`(v3) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L490346.  v0:= temp @kind object;
  #L490348.  v1:= 0I;
  #L49034a.  if v0 == 0 then goto L49035a;
  #L49034e.  v2:= 1I;
  #L490350.  v2:= new `java.lang.Object`[v2];
  #L490354.  v2[v1]:= v0 @kind object;
  #L490358.  goto L49035e;
  #L49035a.  v2:= new `java.lang.Object`[v1];
  #L49035e.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.processors.AsyncProcessor` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L490370.  call temp:= `getValue`(v5) @signature `Lio/reactivex/processors/AsyncProcessor;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L490376.  v0:= temp @kind object;
  #L490378.  v1:= 0I;
  #L49037a.  v2:= 0I;
  #L49037c.  if v0 != 0 then goto L49038c;
  #L490380.  v0:= length @variable v6;
  #L490382.  if v0 == 0 then goto L49038a;
  #L490386.  v6[v2]:= v1 @kind object;
  #L49038a.  return v6 @kind object;
  #L49038c.  v3:= length @variable v6;
  #L49038e.  v4:= 1I;
  #L490390.  if v3 != 0 then goto L49039c;
  #L490394.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L49039a.  v6:= temp @kind object;
  #L49039c.  v6[v2]:= v0 @kind object;
  #L4903a0.  v0:= length @variable v6;
  #L4903a2.  if v0 == v4 then goto L4903aa;
  #L4903a6.  v6[v4]:= v1 @kind object;
  #L4903aa.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490228.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49022c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490232.  v0:= temp @kind object;
  #L490234.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L490238.  if v0 != v1 then goto L490248;
  #L49023c.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L490240.  if v0 != 0 then goto L490248;
  #L490244.  v0:= 1I;
  #L490246.  goto L49024a;
  #L490248.  v0:= 0I;
  #L49024a.  return v0;
}
procedure `boolean` `hasSubscribers`(`io.reactivex.processors.AsyncProcessor` v1 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasSubscribers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L49025c.  v0:= v1.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490260.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490266.  v0:= temp @kind object;
  #L490268.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L49026c.  v0:= length @variable v0;
  #L49026e.  if v0 == 0 then goto L490276;
  #L490272.  v0:= 1I;
  #L490274.  goto L490278;
  #L490276.  v0:= 0I;
  #L490278.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L49028c.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490290.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490296.  v0:= temp @kind object;
  #L490298.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L49029c.  if v0 != v1 then goto L4902ac;
  #L4902a0.  v0:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L4902a4.  if v0 == 0 then goto L4902ac;
  #L4902a8.  v0:= 1I;
  #L4902aa.  goto L4902ae;
  #L4902ac.  v0:= 0I;
  #L4902ae.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.processors.AsyncProcessor` v2 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4902c0.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4902c4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4902ca.  v0:= temp @kind object;
  #L4902cc.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L4902d0.  if v0 != v1 then goto L4902e0;
  #L4902d4.  v0:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L4902d8.  if v0 == 0 then goto L4902e0;
  #L4902dc.  v0:= 1I;
  #L4902de.  goto L4902e2;
  #L4902e0.  v0:= 0I;
  #L4902e2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.processors.AsyncProcessor` v5 @kind this) @signature `Lio/reactivex/processors/AsyncProcessor;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L49043c.  v0:= v5.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490440.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L490446.  v0:= temp @kind object;
  #L490448.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L49044c.  if v0 != v1 then goto L490452;
  #L490450.  return @kind void;
  #L490452.  v0:= v5.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L490456.  v2:= v5.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L49045a.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L490460.  v1:= temp @kind object;
  #L490462.  v1:= (`io.reactivex.processors.AsyncProcessor$a`[]) v1 @kind object;
  #L490466.  v2:= 0I;
  #L490468.  if v0 != 0 then goto L490482;
  #L49046c.  v0:= length @variable v1;
  #L49046e.  if v2 >= v0 then goto L490498;
  #L490472.  v3:= v1[v2] @kind object;
  #L490476.  call `onComplete`(v3) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L49047c.  v2:= v2 + 1;
  #L490480.  goto L49046e;
  #L490482.  v3:= length @variable v1;
  #L490484.  if v2 >= v3 then goto L490498;
  #L490488.  v4:= v1[v2] @kind object;
  #L49048c.  call `complete`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L490492.  v2:= v2 + 1;
  #L490496.  goto L490484;
  #L490498.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.processors.AsyncProcessor` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4904ac.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4904b0.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4904b6.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4904ba.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4904c0.  v0:= temp @kind object;
  #L4904c2.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L4904c6.  if v0 != v1 then goto L4904d2;
  #L4904ca.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4904d0.  return @kind void;
  #L4904d2.  v0:= 0I;
  #L4904d4.  v4.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4904d8.  v4.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L4904dc.  v0:= v4.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4904e0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4904e6.  v0:= temp @kind object;
  #L4904e8.  v0:= (`io.reactivex.processors.AsyncProcessor$a`[]) v0 @kind object;
  #L4904ec.  v1:= length @variable v0;
  #L4904ee.  v2:= 0I;
  #L4904f0.  if v2 >= v1 then goto L490504;
  #L4904f4.  v3:= v0[v2] @kind object;
  #L4904f8.  call `onError`(v3, v5) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4904fe.  v2:= v2 + 1;
  #L490502.  goto L4904f0;
  #L490504.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490518.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L49051c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L490522.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490526.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49052c.  v0:= temp @kind object;
  #L49052e.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L490532.  if v0 != v1 then goto L490538;
  #L490536.  return @kind void;
  #L490538.  v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` := v3 @kind object;
  #L49053c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L490550.  v0:= v2.`io.reactivex.processors.AsyncProcessor.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L490554.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L49055a.  v0:= temp @kind object;
  #L49055c.  v1:= `@@io.reactivex.processors.AsyncProcessor.f` @type ^`io.reactivex.processors.AsyncProcessor$a`[] @kind object;
  #L490560.  if v0 != v1 then goto L49056c;
  #L490564.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L49056a.  return @kind void;
  #L49056c.  v0:= 9223372036854775807L;
  #L490576.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L49057c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.processors.AsyncProcessor` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/processors/AsyncProcessor;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L490618.  v0:= new `io.reactivex.processors.AsyncProcessor$a`;
  #L49061c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/processors/AsyncProcessor$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/AsyncProcessor;)V` @kind direct;
  #L490622.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L490628.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.e:(Lio/reactivex/processors/AsyncProcessor$a;)Z` @kind virtual;
  #L49062e.  v1:= temp;
  #L490630.  if v1 == 0 then goto L490648;
  #L490634.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L49063a.  v3:= temp;
  #L49063c.  if v3 == 0 then goto L49066e;
  #L490640.  call `f`(v2, v0) @signature `Lio/reactivex/processors/AsyncProcessor;.f:(Lio/reactivex/processors/AsyncProcessor$a;)V` @kind virtual;
  #L490646.  goto L49066e;
  #L490648.  v1:= v2.`io.reactivex.processors.AsyncProcessor.c` @type ^`java.lang.Throwable` @kind object;
  #L49064c.  if v1 == 0 then goto L490658;
  #L490650.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L490656.  goto L49066e;
  #L490658.  v3:= v2.`io.reactivex.processors.AsyncProcessor.d` @type ^`java.lang.Object` @kind object;
  #L49065c.  if v3 == 0 then goto L490668;
  #L490660.  call `complete`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L490666.  goto L49066e;
  #L490668.  call `onComplete`(v0) @signature `Lio/reactivex/processors/AsyncProcessor$a;.onComplete:()V` @kind virtual;
  #L49066e.  return @kind void;
}
