record `io.reactivex.Scheduler` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `boolean` `@@io.reactivex.Scheduler.a` @AccessFlag STATIC;
global `long` `@@io.reactivex.Scheduler.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/Scheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L424830.  v0:= "rx2.scheduler.use-nanotime" @kind object;
  #L424834.  call temp:= `getBoolean`(v0) @signature `Ljava/lang/Boolean;.getBoolean:(Ljava/lang/String;)Z` @kind static;
  #L42483a.  v0:= temp;
  #L42483c.  `@@io.reactivex.Scheduler.a` @type ^`boolean` := v0 @kind boolean;
  #L424840.  v0:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L424844.  v1:= "rx2.scheduler.drift-tolerance" @kind object;
  #L424848.  v2:= 15L;
  #L42484c.  call temp:= `getLong`(v1, v2) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L424852.  v1:= temp @kind object;
  #L424854.  call temp:= `longValue`(v1) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L42485a.  v1:= temp @kind wide;
  #L42485c.  call temp:= `toNanos`(v0, v1) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L424862.  v0:= temp @kind wide;
  #L424864.  `@@io.reactivex.Scheduler.b` @type ^`long` := v0 @kind wide;
  #L424868.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.Scheduler` v0 @kind this) @signature `Lio/reactivex/Scheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42487c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L424882.  return @kind void;
}
procedure `long` `a`(`java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Scheduler;.a:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4247d0.  v0:= `@@io.reactivex.Scheduler.a` @type ^`boolean` @kind boolean;
  #L4247d4.  if v0 != 0 then goto L4247ee;
  #L4247d8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L4247de.  v0:= temp @kind wide;
  #L4247e0.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4247e4.  call temp:= `convert`(v3, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4247ea.  v0:= temp @kind wide;
  #L4247ec.  return v0 @kind wide;
  #L4247ee.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L4247f4.  v0:= temp @kind wide;
  #L4247f6.  v2:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4247fa.  call temp:= `convert`(v3, v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.convert:(JLjava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L424800.  v0:= temp @kind wide;
  #L424802.  return v0 @kind wide;
}
procedure `long` `clockDriftTolerance`() @signature `Lio/reactivex/Scheduler;.clockDriftTolerance:()J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4247b8.  v0:= `@@io.reactivex.Scheduler.b` @type ^`long` @kind wide;
  #L4247bc.  return v0 @kind wide;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`() @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `long` `now`(`io.reactivex.Scheduler` v2 @kind this, `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L424814.  call temp:= `a`(v3) @signature `Lio/reactivex/Scheduler;.a:(Ljava/util/concurrent/TimeUnit;)J` @kind static;
  #L42481a.  v0:= temp @kind wide;
  #L42481c.  return v0 @kind wide;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.Scheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L424718.  v0:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L42471c.  v1:= 0L;
  #L424720.  call temp:= `scheduleDirect`(v3, v4, v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L424726.  v4:= temp @kind object;
  #L424728.  return v4 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.Scheduler` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42473c.  call temp:= `createWorker`(v2) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L424742.  v0:= temp @kind object;
  #L424744.  call temp:= `onSchedule`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L42474a.  v3:= temp @kind object;
  #L42474c.  v1:= new `io.reactivex.Scheduler$a`;
  #L424750.  call `<init>`(v1, v3, v0) @signature `Lio/reactivex/Scheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L424756.  call temp:= `schedule`(v0, v1, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L42475c.  return v1 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.Scheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L424770.  call temp:= `createWorker`(v8) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L424776.  v0:= temp @kind object;
  #L424778.  call temp:= `onSchedule`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L42477e.  v9:= temp @kind object;
  #L424780.  v7:= new `io.reactivex.Scheduler$b`;
  #L424784.  call `<init>`(v7, v9, v0) @signature `Lio/reactivex/Scheduler$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L42478a.  v1:= v7 @kind object;
  #L42478c.  v2:= v10 @kind wide;
  #L42478e.  v4:= v12 @kind wide;
  #L424790.  v6:= v14 @kind object;
  #L424792.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L424798.  v9:= temp @kind object;
  #L42479a.  v10:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L42479e.  if v9 != v10 then goto L4247a4;
  #L4247a2.  return v9 @kind object;
  #L4247a4.  return v7 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.Scheduler` v0 @kind this) @signature `Lio/reactivex/Scheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;

  #L424894.  return @kind void;
}
procedure `void` `start`(`io.reactivex.Scheduler` v0 @kind this) @signature `Lio/reactivex/Scheduler;.start:()V` @AccessFlag PUBLIC {
    temp;

  #L4248a8.  return @kind void;
}
procedure `io.reactivex.Scheduler` `when`(`io.reactivex.Scheduler` v1 @kind this, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/Scheduler;.when:(Lio/reactivex/functions/Function;)Lio/reactivex/Scheduler;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4246fc.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen`;
  #L424700.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen;.<init>:(Lio/reactivex/functions/Function;Lio/reactivex/Scheduler;)V` @kind direct;
  #L424706.  return v0 @kind object;
}
