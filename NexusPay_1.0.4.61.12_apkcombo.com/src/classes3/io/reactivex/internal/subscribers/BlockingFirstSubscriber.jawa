record `io.reactivex.internal.subscribers.BlockingFirstSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscribers.BlockingBaseSubscriber` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BlockingFirstSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L486d28.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/BlockingBaseSubscriber;.<init>:()V` @kind direct;
  #L486d2e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BlockingFirstSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486d40.  v0:= v1.`io.reactivex.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L486d44.  if v0 != 0 then goto L486d4e;
  #L486d48.  v1.`io.reactivex.internal.subscribers.BlockingBaseSubscriber.b` @type ^`java.lang.Throwable` := v2 @kind object;
  #L486d4c.  goto L486d54;
  #L486d4e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L486d54.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L486d5a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BlockingFirstSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BlockingFirstSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486d6c.  v0:= v1.`io.reactivex.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` @kind object;
  #L486d70.  if v0 != 0 then goto L486d88;
  #L486d74.  v1.`io.reactivex.internal.subscribers.BlockingBaseSubscriber.a` @type ^`java.lang.Object` := v2 @kind object;
  #L486d78.  v2:= v1.`io.reactivex.internal.subscribers.BlockingBaseSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L486d7c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L486d82.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L486d88.  return @kind void;
}
