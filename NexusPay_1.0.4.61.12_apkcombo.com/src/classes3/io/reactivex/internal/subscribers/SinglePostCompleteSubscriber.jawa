record `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @AccessFlag PROTECTED;
  `java.lang.Object` `io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L487ee8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L487eee.  v0.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L487ef2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487f04.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487f08.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487f0e.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.complete:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L487f20.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.produced` @type ^`long` @kind wide;
  #L487f24.  v2:= 0L;
  #L487f28.  v4:= lcmp(v0, v2);
  #L487f2c.  if v4 == 0 then goto L487f36;
  #L487f30.  call temp:= `produced`(v9, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L487f36.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L487f3c.  v0:= temp @kind wide;
  #L487f3e.  v4:= -9223372036854775808L;
  #L487f42.  v6:= v0 ^& v4 @kind long;
  #L487f46.  v8:= lcmp(v6, v2);
  #L487f4a.  if v8 == 0 then goto L487f56;
  #L487f4e.  call `onDrop`(v9, v10) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @kind virtual;
  #L487f54.  return @kind void;
  #L487f56.  v6:= 9223372036854775807L;
  #L487f60.  v0:= v0 ^& v6 @kind long;
  #L487f62.  v6:= lcmp(v0, v2);
  #L487f66.  if v6 == 0 then goto L487f90;
  #L487f6a.  v0:= -4.9E-324D;
  #L487f74.  call `lazySet`(v9, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L487f7a.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487f7e.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L487f84.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487f88.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L487f8e.  return @kind void;
  #L487f90.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v10 @kind object;
  #L487f94.  call temp:= `compareAndSet`(v9, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L487f9a.  v0:= temp;
  #L487f9c.  if v0 == 0 then goto L487fa2;
  #L487fa0.  return @kind void;
  #L487fa2.  v0:= 0I;
  #L487fa4.  v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` := v0 @kind object;
  #L487fa8.  goto L487f36;
}
procedure `void` `onDrop`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onDrop:(Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;

  #L487fbc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487fd0.  v0:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L487fd4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L487fda.  v0:= temp;
  #L487fdc.  if v0 == 0 then goto L487fee;
  #L487fe0.  v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L487fe4.  v2:= v1.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487fe8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L487fee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/subscribers/SinglePostCompleteSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L488000.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L488006.  v0:= temp;
  #L488008.  if v0 == 0 then goto L488076;
  #L48800c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L488012.  v0:= temp @kind wide;
  #L488014.  v2:= -9223372036854775808L;
  #L488018.  v4:= v0 ^& v2 @kind long;
  #L48801c.  v6:= 0L;
  #L488020.  v8:= lcmp(v4, v6);
  #L488024.  if v8 == 0 then goto L488058;
  #L488028.  v10:= -4.9E-324D;
  #L488032.  call temp:= `compareAndSet`(v9, v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L488038.  v10:= temp;
  #L48803a.  if v10 == 0 then goto L488076;
  #L48803e.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488042.  v11:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.value` @type ^`java.lang.Object` @kind object;
  #L488046.  call `onNext`(v10, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48804c.  v10:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488050.  call `onComplete`(v10) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L488056.  goto L488076;
  #L488058.  call temp:= `addCap`(v0, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L48805e.  v2:= temp @kind wide;
  #L488060.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L488066.  v0:= temp;
  #L488068.  if v0 == 0 then goto L48800c;
  #L48806c.  v0:= v9.`io.reactivex.internal.subscribers.SinglePostCompleteSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488070.  call `request`(v0, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488076.  return @kind void;
}
