record `io.reactivex.internal.subscribers.BoundedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.BoundedSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.BoundedSubscriber.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.e` @AccessFlag ;
  `int` `io.reactivex.internal.subscribers.BoundedSubscriber.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.BoundedSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L486f8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L486f92.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L486f96.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L486f9a.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L486f9e.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L486fa2.  v1:= v5 ^> 2;
  #L486fa6.  v5:= v5 - v1 @kind int;
  #L486fa8.  v0.`io.reactivex.internal.subscribers.BoundedSubscriber.f` @type ^`int` := v5;
  #L486fac.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L486fc0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L486fc6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.BoundedSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L486fd8.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.cancel:()V` @kind virtual;
  #L486fde.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486f40.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L486f44.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L486f48.  if v0 == v1 then goto L486f50;
  #L486f4c.  v0:= 1I;
  #L486f4e.  goto L486f52;
  #L486f50.  v0:= 0I;
  #L486f52.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486f64.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486f6a.  v0:= temp @kind object;
  #L486f6c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L486f70.  if v0 != v1 then goto L486f78;
  #L486f74.  v0:= 1I;
  #L486f76.  goto L486f7a;
  #L486f78.  v0:= 0I;
  #L486f7a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486ff0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486ff6.  v0:= temp @kind object;
  #L486ff8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L486ffc.  if v0 == v1 then goto L487020;
  #L487000.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L487006.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L48700a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L487010.  goto L487020;
  #L487012.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487014.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48701a.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487020.  return @kind void;
  catch `java.lang.Throwable` @[L487006..L487010] goto L487012;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BoundedSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487040.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487046.  v0:= temp @kind object;
  #L487048.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48704c.  if v0 == v1 then goto L48708e;
  #L487050.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L487056.  v0:= v4.`io.reactivex.internal.subscribers.BoundedSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L48705a.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L487060.  goto L487094;
  #L487062.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487064.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48706a.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L48706e.  v2:= 2I;
  #L487070.  v2:= new `java.lang.Throwable`[v2];
  #L487074.  v3:= 0I;
  #L487076.  v2[v3]:= v5 @kind object;
  #L48707a.  v5:= 1I;
  #L48707c.  v2[v5]:= v0 @kind object;
  #L487080.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L487086.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48708c.  goto L487094;
  #L48708e.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487094.  return @kind void;
  catch `java.lang.Throwable` @[L487056..L487060] goto L487062;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.BoundedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4870b4.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.isDisposed:()Z` @kind virtual;
  #L4870ba.  v0:= temp;
  #L4870bc.  if v0 != 0 then goto L487120;
  #L4870c0.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4870c4.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4870ca.  v3:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.e` @type ^`int`;
  #L4870ce.  v3:= v3 + 1;
  #L4870d2.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.f` @type ^`int`;
  #L4870d6.  if v3 != v0 then goto L4870fa;
  #L4870da.  v3:= 0I;
  #L4870dc.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.e` @type ^`int` := v3;
  #L4870e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4870e6.  v3:= temp @kind object;
  #L4870e8.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4870ec.  v0:= v2.`io.reactivex.internal.subscribers.BoundedSubscriber.f` @type ^`int`;
  #L4870f0.  v0:= (`long`) v0 @kind i2l;
  #L4870f2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4870f8.  goto L487120;
  #L4870fa.  v2.`io.reactivex.internal.subscribers.BoundedSubscriber.e` @type ^`int` := v3;
  #L4870fe.  goto L487120;
  #L487100.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487102.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487108.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48710e.  v0:= temp @kind object;
  #L487110.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L487114.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48711a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487120.  return @kind void;
  catch `java.lang.Throwable` @[L4870c0..L4870fe] goto L487100;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487140.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L487146.  v0:= temp;
  #L487148.  if v0 == 0 then goto L48716c;
  #L48714c.  v0:= v1.`io.reactivex.internal.subscribers.BoundedSubscriber.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487150.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L487156.  goto L48716c;
  #L487158.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48715a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487160.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487166.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L48716c.  return @kind void;
  catch `java.lang.Throwable` @[L48714c..L487156] goto L487158;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BoundedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BoundedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48718c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487192.  v0:= temp @kind object;
  #L487194.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L487198.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48719e.  return @kind void;
}
