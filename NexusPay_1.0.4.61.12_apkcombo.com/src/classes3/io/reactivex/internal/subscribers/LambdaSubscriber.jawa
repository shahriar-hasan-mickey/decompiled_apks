record `io.reactivex.internal.subscribers.LambdaSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.LambdaSubscriber.c` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.LambdaSubscriber.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscribers.LambdaSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L487990.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L487996.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L48799a.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L48799e.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L4879a2.  v0.`io.reactivex.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L4879a6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4879b8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4879be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.LambdaSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4879d0.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.cancel:()V` @kind virtual;
  #L4879d6.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487944.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487948.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L48794c.  if v0 == v1 then goto L487954;
  #L487950.  v0:= 1I;
  #L487952.  goto L487956;
  #L487954.  v0:= 0I;
  #L487956.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487968.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48796e.  v0:= temp @kind object;
  #L487970.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L487974.  if v0 != v1 then goto L48797c;
  #L487978.  v0:= 1I;
  #L48797a.  goto L48797e;
  #L48797c.  v0:= 0I;
  #L48797e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.LambdaSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4879e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4879ee.  v0:= temp @kind object;
  #L4879f0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4879f4.  if v0 == v1 then goto L487a18;
  #L4879f8.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4879fe.  v0:= v2.`io.reactivex.internal.subscribers.LambdaSubscriber.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L487a02.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L487a08.  goto L487a18;
  #L487a0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487a0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487a12.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487a18.  return @kind void;
  catch `java.lang.Throwable` @[L4879fe..L487a08] goto L487a0a;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.LambdaSubscriber` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L487a38.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487a3e.  v0:= temp @kind object;
  #L487a40.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L487a44.  if v0 == v1 then goto L487a86;
  #L487a48.  call `lazySet`(v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L487a4e.  v0:= v4.`io.reactivex.internal.subscribers.LambdaSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487a52.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L487a58.  goto L487a8c;
  #L487a5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487a5c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487a62.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L487a66.  v2:= 2I;
  #L487a68.  v2:= new `java.lang.Throwable`[v2];
  #L487a6c.  v3:= 0I;
  #L487a6e.  v2[v3]:= v5 @kind object;
  #L487a72.  v5:= 1I;
  #L487a74.  v2[v5]:= v0 @kind object;
  #L487a78.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L487a7e.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487a84.  goto L487a8c;
  #L487a86.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487a8c.  return @kind void;
  catch `java.lang.Throwable` @[L487a4e..L487a58] goto L487a5a;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487aac.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.isDisposed:()Z` @kind virtual;
  #L487ab2.  v0:= temp;
  #L487ab4.  if v0 != 0 then goto L487ae4;
  #L487ab8.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487abc.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L487ac2.  goto L487ae4;
  #L487ac4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487ac6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487acc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487ad2.  v0:= temp @kind object;
  #L487ad4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L487ad8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487ade.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487ae4.  return @kind void;
  catch `java.lang.Throwable` @[L487ab8..L487ac2] goto L487ac4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487b04.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L487b0a.  v0:= temp;
  #L487b0c.  if v0 == 0 then goto L487b30;
  #L487b10.  v0:= v1.`io.reactivex.internal.subscribers.LambdaSubscriber.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487b14.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L487b1a.  goto L487b30;
  #L487b1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487b1e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487b24.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L487b2a.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L487b30.  return @kind void;
  catch `java.lang.Throwable` @[L487b10..L487b1a] goto L487b1c;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.LambdaSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/LambdaSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487b50.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487b56.  v0:= temp @kind object;
  #L487b58.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L487b5c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L487b62.  return @kind void;
}
