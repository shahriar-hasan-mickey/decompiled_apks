record `io.reactivex.internal.subscribers.ForEachWhileSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.subscribers.ForEachWhileSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4872a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4872ae.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L4872b2.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4872b6.  v0.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L4872ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4872cc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4872d2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L487280.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L487286.  v0:= temp @kind object;
  #L487288.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48728c.  if v0 != v1 then goto L487294;
  #L487290.  v0:= 1I;
  #L487292.  goto L487296;
  #L487294.  v0:= 0I;
  #L487296.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4872e4.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L4872e8.  if v0 == 0 then goto L4872ee;
  #L4872ec.  return @kind void;
  #L4872ee.  v0:= 1I;
  #L4872f0.  v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L4872f4.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4872f8.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4872fe.  goto L48730e;
  #L487300.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487302.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487308.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48730e.  return @kind void;
  catch `java.lang.Throwable` @[L4872f4..L4872fe] goto L487300;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48732c.  v0:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L487330.  if v0 == 0 then goto L48733c;
  #L487334.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48733a.  return @kind void;
  #L48733c.  v0:= 1I;
  #L48733e.  v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L487342.  v1:= v5.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L487346.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48734c.  goto L487376;
  #L48734e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L487350.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L487356.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L48735a.  v3:= 2I;
  #L48735c.  v3:= new `java.lang.Throwable`[v3];
  #L487360.  v4:= 0I;
  #L487362.  v3[v4]:= v6 @kind object;
  #L487366.  v3[v0]:= v1 @kind object;
  #L48736a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L487370.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L487376.  return @kind void;
  catch `java.lang.Throwable` @[L487342..L48734c] goto L48734e;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L487394.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.d` @type ^`boolean` @kind boolean;
  #L487398.  if v0 == 0 then goto L48739e;
  #L48739c.  return @kind void;
  #L48739e.  v0:= v1.`io.reactivex.internal.subscribers.ForEachWhileSubscriber.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4873a2.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4873a8.  v2:= temp;
  #L4873aa.  if v2 != 0 then goto L4873ba;
  #L4873ae.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L4873b4.  call `onComplete`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onComplete:()V` @kind virtual;
  #L4873ba.  return @kind void;
  #L4873bc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4873be.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4873c4.  call `dispose`(v1) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.dispose:()V` @kind virtual;
  #L4873ca.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4873d0.  return @kind void;
  catch `java.lang.Throwable` @[L48739e..L4873aa] goto L4873bc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.ForEachWhileSubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/ForEachWhileSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4873f0.  v0:= 9223372036854775807L;
  #L4873fa.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L487400.  return @kind void;
}
