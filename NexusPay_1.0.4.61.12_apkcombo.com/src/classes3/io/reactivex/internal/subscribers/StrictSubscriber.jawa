record `io.reactivex.internal.subscribers.StrictSubscriber` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.StrictSubscriber.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.subscribers.StrictSubscriber.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscribers.StrictSubscriber.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscribers.StrictSubscriber.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.subscribers.StrictSubscriber.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscribers.StrictSubscriber.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.subscribers.StrictSubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscribers.StrictSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L488088.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L48808e.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L488092.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L488096.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L48809c.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L4880a0.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4880a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4880aa.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4880ae.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4880b2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4880b8.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4880bc.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4880c0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4880c6.  v0.`io.reactivex.internal.subscribers.StrictSubscriber.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4880ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.StrictSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4880dc.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` @kind boolean;
  #L4880e0.  if v0 != 0 then goto L4880ee;
  #L4880e4.  v0:= v1.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4880e8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4880ee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488100.  v0:= 1I;
  #L488102.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L488106.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48810a.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L48810e.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L488114.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488128.  v0:= 1I;
  #L48812a.  v2.`io.reactivex.internal.subscribers.StrictSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L48812e.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488132.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L488136.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L48813c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.subscribers.StrictSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488150.  v0:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488154.  v1:= v2.`io.reactivex.internal.subscribers.StrictSubscriber.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L488158.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L48815e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L488170.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L488174.  v1:= 0I;
  #L488176.  v2:= 1I;
  #L488178.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L48817e.  v0:= temp;
  #L488180.  if v0 == 0 then goto L48819e;
  #L488184.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488188.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48818e.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488192.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488196.  call temp:= `deferredSetOnce`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48819c.  goto L4881be;
  #L48819e.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4881a4.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L4881aa.  v4:= new `java.lang.IllegalStateException`;
  #L4881ae.  v0:= "ยง2.12 violated: onSubscribe must be called at most once" @kind object;
  #L4881b2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4881b8.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4881be.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.StrictSubscriber` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4881d0.  v0:= 0L;
  #L4881d4.  v2:= lcmp(v4, v0);
  #L4881d8.  if v2 > 0 then goto L488216;
  #L4881dc.  call `cancel`(v3) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.cancel:()V` @kind virtual;
  #L4881e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L4881e6.  v1:= new `java.lang.StringBuilder`;
  #L4881ea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4881f0.  v2:= "ยง3.9 violated: positive request amount required but it was " @kind object;
  #L4881f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4881fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L488200.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L488206.  v4:= temp @kind object;
  #L488208.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48820e.  call `onError`(v3, v0) @signature `Lio/reactivex/internal/subscribers/StrictSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L488214.  goto L488224;
  #L488216.  v0:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48821a.  v1:= v3.`io.reactivex.internal.subscribers.StrictSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48821e.  call `deferredRequest`(v0, v1, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L488224.  return @kind void;
}
