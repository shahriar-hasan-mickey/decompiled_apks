record `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @AccessFlag PROTECTED;
  `int` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @AccessFlag PROTECTED;
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4868b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4868be.  v0.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L4868c2.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L4868d4.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L48680c.  v0:= 1I;
  #L48680e.  return v0;
}
procedure `void` `cancel`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4868e8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4868ec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4868f2.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486904.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L486908.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48690e.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L486920.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L486926.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48692a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L486930.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L486936.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486820.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L486824.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L48682a.  v0:= temp;
  #L48682c.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L486840.  v2:= new `java.lang.UnsupportedOperationException`;
  #L486844.  v0:= "Should not be called!" @kind object;
  #L486848.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48684e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L486860.  v1:= new `java.lang.UnsupportedOperationException`;
  #L486864.  v2:= "Should not be called!" @kind object;
  #L486868.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48686e.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486948.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L48694c.  if v0 == 0 then goto L486952;
  #L486950.  return @kind void;
  #L486952.  v0:= 1I;
  #L486954.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L486958.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48695c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L486962.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486974.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L486978.  if v0 == 0 then goto L486984;
  #L48697c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L486982.  return @kind void;
  #L486984.  v0:= 1I;
  #L486986.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L48698a.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L48698e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L486994.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4869a8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4869ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4869b2.  v0:= temp;
  #L4869b4.  if v0 == 0 then goto L4869e8;
  #L4869b8.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4869bc.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4869c0.  if v0 == 0 then goto L4869cc;
  #L4869c4.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L4869c8.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L4869cc.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.beforeDownstream:()Z` @kind virtual;
  #L4869d2.  v2:= temp;
  #L4869d4.  if v2 == 0 then goto L4869e8;
  #L4869d8.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4869dc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4869e2.  call `afterDownstream`(v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.afterDownstream:()V` @kind virtual;
  #L4869e8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4869fc.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L486a00.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L486a06.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L486880.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L486884.  if v0 == 0 then goto L4868a2;
  #L486888.  v1:= v3 ^& 4;
  #L48688c.  if v1 != 0 then goto L4868a2;
  #L486890.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L486896.  v3:= temp;
  #L486898.  if v3 == 0 then goto L4868a0;
  #L48689c.  v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int` := v3;
  #L4868a0.  return v3;
  #L4868a2.  v3:= 0I;
  #L4868a4.  return v3;
}
