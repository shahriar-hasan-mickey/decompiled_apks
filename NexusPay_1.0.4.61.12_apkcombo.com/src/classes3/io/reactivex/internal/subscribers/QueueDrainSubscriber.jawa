record `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.subscribers.d` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.util.QueueDrain` @kind interface {
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @AccessFlag PROTECTED_VOLATILE;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L487d2c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscribers/d;.<init>:()V` @kind direct;
  #L487d32.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L487d36.  v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L487d3a.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L487c0c.  v1:= 0I;
  #L487c0e.  return v1;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487c20.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L487c24.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487c38.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L487c3c.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487c50.  v0:= v1.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487c54.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L487c5a.  v0:= temp;
  #L487c5c.  if v0 != 0 then goto L487c64;
  #L487c60.  v0:= 1I;
  #L487c62.  goto L487c66;
  #L487c64.  v0:= 0I;
  #L487c66.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487cd4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L487cd8.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v3 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L487c78.  v0:= v3.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487c7c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L487c82.  v0:= temp;
  #L487c84.  v1:= 1I;
  #L487c86.  v2:= 0I;
  #L487c88.  if v0 != 0 then goto L487c9e;
  #L487c8c.  v0:= v3.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487c90.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L487c96.  v0:= temp;
  #L487c98.  if v0 == 0 then goto L487c9e;
  #L487c9c.  goto L487ca0;
  #L487c9e.  v1:= 0I;
  #L487ca0.  return v1;
}
procedure `void` `fastPathEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L487d4c.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487d50.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L487d54.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L487d5a.  v2:= temp;
  #L487d5c.  if v2 == 0 then goto L487dcc;
  #L487d60.  v2:= v7.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L487d64.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L487d6a.  v2:= temp @kind wide;
  #L487d6c.  v4:= 0L;
  #L487d70.  v6:= lcmp(v2, v4);
  #L487d74.  if v6 == 0 then goto L487db0;
  #L487d78.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L487d7e.  v8:= temp;
  #L487d80.  if v8 == 0 then goto L487da0;
  #L487d84.  v4:= 9223372036854775807L;
  #L487d8e.  v8:= lcmp(v2, v4);
  #L487d92.  if v8 == 0 then goto L487da0;
  #L487d96.  v2:= 1L;
  #L487d9a.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L487da0.  v8:= -1I;
  #L487da2.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L487da8.  v8:= temp;
  #L487daa.  if v8 != 0 then goto L487de0;
  #L487dae.  return @kind void;
  #L487db0.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L487db6.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L487dba.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L487dbe.  call `<init>`(v8, v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L487dc4.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487dca.  return @kind void;
  #L487dcc.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L487dd2.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L487dd8.  v8:= temp;
  #L487dda.  if v8 != 0 then goto L487de0;
  #L487dde.  return @kind void;
  #L487de0.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L487de6.  return @kind void;
}
procedure `void` `fastPathOrderedEmitMax`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 , `io.reactivex.disposables.Disposable` v10 @kind object) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L487df8.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L487dfc.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L487e00.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L487e06.  v2:= temp;
  #L487e08.  if v2 == 0 then goto L487e92;
  #L487e0c.  v2:= v7.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L487e10.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L487e16.  v2:= temp @kind wide;
  #L487e18.  v4:= 0L;
  #L487e1c.  v6:= lcmp(v2, v4);
  #L487e20.  if v6 == 0 then goto L487e70;
  #L487e24.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L487e2a.  v4:= temp;
  #L487e2c.  if v4 == 0 then goto L487e68;
  #L487e30.  call temp:= `accept`(v7, v0, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind virtual;
  #L487e36.  v8:= temp;
  #L487e38.  if v8 == 0 then goto L487e58;
  #L487e3c.  v4:= 9223372036854775807L;
  #L487e46.  v8:= lcmp(v2, v4);
  #L487e4a.  if v8 == 0 then goto L487e58;
  #L487e4e.  v2:= 1L;
  #L487e52.  call temp:= `produced`(v7, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L487e58.  v8:= -1I;
  #L487e5a.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L487e60.  v8:= temp;
  #L487e62.  if v8 != 0 then goto L487ea6;
  #L487e66.  return @kind void;
  #L487e68.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L487e6e.  goto L487ea6;
  #L487e70.  v8:= 1I;
  #L487e72.  v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v8 @kind boolean;
  #L487e76.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L487e7c.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L487e80.  v9:= "Could not emit buffer due to lack of requests" @kind object;
  #L487e84.  call `<init>`(v8, v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L487e8a.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L487e90.  return @kind void;
  #L487e92.  call temp:= `offer`(v1, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L487e98.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L487e9e.  v8:= temp;
  #L487ea0.  if v8 != 0 then goto L487ea6;
  #L487ea4.  return @kind void;
  #L487ea6.  call `drainMaxLoop`(v1, v0, v9, v10, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L487eac.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487cb4.  v0:= v1.`io.reactivex.internal.subscribers.e.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L487cb8.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L487cbe.  v2:= temp;
  #L487cc0.  return v2;
}
procedure `long` `produced`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487cec.  v0:= v1.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L487cf0.  v2:= -v2 @kind long;
  #L487cf2.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L487cf8.  v2:= temp @kind wide;
  #L487cfa.  return v2 @kind wide;
}
procedure `long` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v2 @kind this) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L487d0c.  v0:= v2.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L487d10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L487d16.  v0:= temp @kind wide;
  #L487d18.  return v0 @kind wide;
}
procedure `void` `requested`(`io.reactivex.internal.subscribers.QueueDrainSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L487ec0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L487ec6.  v0:= temp;
  #L487ec8.  if v0 == 0 then goto L487ed6;
  #L487ecc.  v0:= v1.`io.reactivex.internal.subscribers.c.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L487ed0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L487ed6.  return @kind void;
}
