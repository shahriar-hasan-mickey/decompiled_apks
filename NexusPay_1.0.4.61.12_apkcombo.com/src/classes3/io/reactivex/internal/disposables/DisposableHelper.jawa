record `io.reactivex.internal.disposables.DisposableHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `io.reactivex.internal.disposables.DisposableHelper`[] `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.internal.disposables.DisposableHelper` `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L428498.  v0:= new `io.reactivex.internal.disposables.DisposableHelper`;
  #L42849c.  v1:= "DISPOSED" @kind object;
  #L4284a0.  v2:= 0I;
  #L4284a2.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4284a8.  `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` := v0 @kind object;
  #L4284ac.  v1:= 1I;
  #L4284ae.  v1:= new `io.reactivex.internal.disposables.DisposableHelper`[v1];
  #L4284b2.  v1[v2]:= v0 @kind object;
  #L4284b6.  `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] := v1 @kind object;
  #L4284ba.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4284cc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4284d2.  return @kind void;
}
procedure `boolean` `dispose`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428278.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42827e.  v0:= temp @kind object;
  #L428280.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L428284.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428288.  if v0 == v1 then goto L4282aa;
  #L42828c.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L428292.  v2:= temp @kind object;
  #L428294.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L428298.  if v2 == v1 then goto L4282aa;
  #L42829c.  if v2 == 0 then goto L4282a6;
  #L4282a0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4282a6.  v2:= 1I;
  #L4282a8.  return v2;
  #L4282aa.  v2:= 0I;
  #L4282ac.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4282d4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4282d8.  if v1 != v0 then goto L4282e0;
  #L4282dc.  v1:= 1I;
  #L4282de.  goto L4282e2;
  #L4282e0.  v1:= 0I;
  #L4282e2.  return v1;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4282f4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4282fa.  v0:= temp @kind object;
  #L4282fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L428300.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428304.  if v0 != v1 then goto L428316;
  #L428308.  if v3 == 0 then goto L428312;
  #L42830c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428312.  v2:= 0I;
  #L428314.  return v2;
  #L428316.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42831c.  v0:= temp;
  #L42831e.  if v0 == 0 then goto L4282f4;
  #L428322.  v2:= 1I;
  #L428324.  return v2;
}
procedure `void` `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4284f8.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L4284fc.  v1:= "Disposable already set!" @kind object;
  #L428500.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428506.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42850c.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L428338.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42833e.  v0:= temp @kind object;
  #L428340.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L428344.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428348.  if v0 != v1 then goto L42835a;
  #L42834c.  if v3 == 0 then goto L428356;
  #L428350.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428356.  v2:= 0I;
  #L428358.  return v2;
  #L42835a.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L428360.  v1:= temp;
  #L428362.  if v1 == 0 then goto L428338;
  #L428366.  if v0 == 0 then goto L428370;
  #L42836a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428370.  v2:= 1I;
  #L428372.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L428384.  v0:= "d is null" @kind object;
  #L428388.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L42838e.  v0:= 0I;
  #L428390.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L428396.  v0:= temp;
  #L428398.  if v0 != 0 then goto L4283bc;
  #L42839c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4283a2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4283a8.  v1:= temp @kind object;
  #L4283aa.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4283ae.  if v1 == v2 then goto L4283b8;
  #L4283b2.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L4283b8.  v1:= 0I;
  #L4283ba.  return v1;
  #L4283bc.  v1:= 1I;
  #L4283be.  return v1;
}
procedure `boolean` `trySet`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4283d0.  v0:= 0I;
  #L4283d2.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4283d8.  v0:= temp;
  #L4283da.  if v0 != 0 then goto L4283f8;
  #L4283de.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4283e4.  v1:= temp @kind object;
  #L4283e6.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4283ea.  if v1 != v0 then goto L4283f4;
  #L4283ee.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4283f4.  v1:= 0I;
  #L4283f6.  return v1;
  #L4283f8.  v1:= 1I;
  #L4283fa.  return v1;
}
procedure `boolean` `validate`(`io.reactivex.disposables.Disposable` v1 @kind object, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42840c.  v0:= 0I;
  #L42840e.  if v2 != 0 then goto L428428;
  #L428412.  v1:= new `java.lang.NullPointerException`;
  #L428416.  v2:= "next is null" @kind object;
  #L42841a.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L428420.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L428426.  return v0;
  #L428428.  if v1 == 0 then goto L42843a;
  #L42842c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L428432.  call `reportDisposableSet`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.reportDisposableSet:()V` @kind static;
  #L428438.  return v0;
  #L42843a.  v1:= 1I;
  #L42843c.  return v1;
}
procedure `io.reactivex.internal.disposables.DisposableHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L428450.  v0:= constclass @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L428454.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L42845a.  v1:= temp @kind object;
  #L42845c.  v1:= (`io.reactivex.internal.disposables.DisposableHelper`) v1 @kind object;
  #L428460.  return v1 @kind object;
}
procedure `io.reactivex.internal.disposables.DisposableHelper`[] `values`() @signature `Lio/reactivex/internal/disposables/DisposableHelper;.values:()[Lio/reactivex/internal/disposables/DisposableHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L428474.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.$VALUES` @type ^`io.reactivex.internal.disposables.DisposableHelper`[] @kind object;
  #L428478.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/disposables/DisposableHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L42847e.  v0:= temp @kind object;
  #L428480.  v0:= (`io.reactivex.internal.disposables.DisposableHelper`[]) v0 @kind object;
  #L428484.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.disposables.DisposableHelper` v0 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4284e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.disposables.DisposableHelper` v1 @kind this) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4282c0.  v0:= 1I;
  #L4282c2.  return v0;
}
