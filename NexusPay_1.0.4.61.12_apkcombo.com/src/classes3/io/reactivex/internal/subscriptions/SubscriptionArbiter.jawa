record `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscription` `io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @AccessFlag ;
  `long` `io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.SubscriptionArbiter.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v0 @kind this, `boolean` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L488d48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L488d4e.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` := v1 @kind boolean;
  #L488d52.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L488d56.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L488d5c.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L488d60.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L488d64.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L488d6a.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L488d6e.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L488d72.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L488d78.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L488d7c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.c:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L488db8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L488dbe.  v0:= temp;
  #L488dc0.  if v0 == 0 then goto L488dc6;
  #L488dc4.  return @kind void;
  #L488dc6.  call `d`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L488dcc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488d90.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L488d94.  if v0 != 0 then goto L488da4;
  #L488d98.  v0:= 1I;
  #L488d9a.  v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` := v0 @kind boolean;
  #L488d9e.  call `c`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L488da4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v19 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L488de0.  v0:= v19 @kind object;
  #L488de4.  v1:= 0I;
  #L488de6.  v2:= 0L;
  #L488dea.  v4:= 1I;
  #L488dec.  v7:= v1 @kind object;
  #L488dee.  v5:= v2 @kind wide;
  #L488df0.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488df4.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L488dfa.  v8:= temp @kind object;
  #L488dfc.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L488e00.  if v8 == 0 then goto L488e14;
  #L488e04.  v8:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L488e08.  call temp:= `getAndSet`(v8, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L488e0e.  v8:= temp @kind object;
  #L488e10.  v8:= (`org.reactivestreams.Subscription`) v8 @kind object;
  #L488e14.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488e18.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L488e1e.  v9:= temp @kind wide;
  #L488e20.  v11:= lcmp(v9, v2);
  #L488e24.  if v11 == 0 then goto L488e34;
  #L488e28.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488e2c.  call temp:= `getAndSet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L488e32.  v9:= temp @kind wide;
  #L488e34.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488e38.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L488e3e.  v11:= temp @kind wide;
  #L488e40.  v13:= lcmp(v11, v2);
  #L488e44.  if v13 == 0 then goto L488e54;
  #L488e48.  v11:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488e4c.  call temp:= `getAndSet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L488e52.  v11:= temp @kind wide;
  #L488e54.  v13:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L488e58.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L488e5c.  if v14 == 0 then goto L488e7a;
  #L488e60.  if v13 == 0 then goto L488e6e;
  #L488e64.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L488e6a.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L488e6e.  if v8 == 0 then goto L488efa;
  #L488e72.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L488e78.  goto L488efa;
  #L488e7a.  v14:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L488e7e.  v16:= 9223372036854775807L;
  #L488e88.  v18:= lcmp(v14, v16);
  #L488e8c.  if v18 == 0 then goto L488eb6;
  #L488e90.  call temp:= `addCap`(v14, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L488e96.  v14:= temp @kind wide;
  #L488e98.  v18:= lcmp(v14, v16);
  #L488e9c.  if v18 == 0 then goto L488eb2;
  #L488ea0.  v14:= v14 - v11 @kind long;
  #L488ea2.  v11:= lcmp(v14, v2);
  #L488ea6.  if v11 >= 0 then goto L488eb2;
  #L488eaa.  call `reportMoreProduced`(v14) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L488eb0.  v14:= v2 @kind wide;
  #L488eb2.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v14 @kind wide;
  #L488eb6.  if v8 == 0 then goto L488ee4;
  #L488eba.  if v13 == 0 then goto L488ecc;
  #L488ebe.  v9:= v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L488ec2.  if v9 == 0 then goto L488ecc;
  #L488ec6.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L488ecc.  v0.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v8 @kind object;
  #L488ed0.  v9:= lcmp(v14, v2);
  #L488ed4.  if v9 == 0 then goto L488efa;
  #L488ed8.  call temp:= `addCap`(v5, v14) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L488ede.  v5:= temp @kind wide;
  #L488ee0.  v7:= v8 @kind object;
  #L488ee2.  goto L488efa;
  #L488ee4.  if v13 == 0 then goto L488efa;
  #L488ee8.  v8:= lcmp(v9, v2);
  #L488eec.  if v8 == 0 then goto L488efa;
  #L488ef0.  call temp:= `addCap`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L488ef6.  v5:= temp @kind wide;
  #L488ef8.  v7:= v13 @kind object;
  #L488efa.  v4:= -v4 @kind int;
  #L488efc.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L488f02.  v4:= temp;
  #L488f04.  if v4 != 0 then goto L488df0;
  #L488f08.  v1:= lcmp(v5, v2);
  #L488f0c.  if v1 == 0 then goto L488f16;
  #L488f10.  call `request`(v7, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L488f16.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L488d18.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L488d1c.  return v0;
}
procedure `boolean` `isUnbounded`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L488d30.  v0:= v1.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L488d34.  return v0;
}
procedure `void` `produced`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L488f28.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L488f2c.  if v0 == 0 then goto L488f32;
  #L488f30.  return @kind void;
  #L488f32.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488f38.  v0:= temp;
  #L488f3a.  if v0 != 0 then goto L488f94;
  #L488f3e.  v0:= 0I;
  #L488f40.  v1:= 1I;
  #L488f42.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L488f48.  v0:= temp;
  #L488f4a.  if v0 == 0 then goto L488f94;
  #L488f4e.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L488f52.  v2:= 9223372036854775807L;
  #L488f5c.  v4:= lcmp(v0, v2);
  #L488f60.  if v4 == 0 then goto L488f7e;
  #L488f64.  v0:= v0 - v6 @kind long;
  #L488f66.  v6:= 0L;
  #L488f6a.  v2:= lcmp(v0, v6);
  #L488f6e.  if v2 >= 0 then goto L488f7a;
  #L488f72.  call `reportMoreProduced`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @kind static;
  #L488f78.  v0:= v6 @kind wide;
  #L488f7a.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v0 @kind wide;
  #L488f7e.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L488f84.  v6:= temp;
  #L488f86.  if v6 != 0 then goto L488f8c;
  #L488f8a.  return @kind void;
  #L488f8c.  call `d`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L488f92.  return @kind void;
  #L488f94.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L488f98.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L488f9e.  call `c`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L488fa4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L488fb8.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L488fbe.  v0:= temp;
  #L488fc0.  if v0 == 0 then goto L48904a;
  #L488fc4.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` @kind boolean;
  #L488fc8.  if v0 == 0 then goto L488fce;
  #L488fcc.  return @kind void;
  #L488fce.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488fd4.  v0:= temp;
  #L488fd6.  if v0 != 0 then goto L48903a;
  #L488fda.  v0:= 0I;
  #L488fdc.  v1:= 1I;
  #L488fde.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L488fe4.  v0:= temp;
  #L488fe6.  if v0 == 0 then goto L48903a;
  #L488fea.  v2:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L488fee.  v4:= 9223372036854775807L;
  #L488ff8.  v0:= lcmp(v2, v4);
  #L488ffc.  if v0 == 0 then goto L489018;
  #L489000.  call temp:= `addCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L489006.  v2:= temp @kind wide;
  #L489008.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` := v2 @kind wide;
  #L48900c.  v0:= lcmp(v2, v4);
  #L489010.  if v0 != 0 then goto L489018;
  #L489014.  v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.unbounded` @type ^`boolean` := v1 @kind boolean;
  #L489018.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L48901c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L489022.  v1:= temp;
  #L489024.  if v1 == 0 then goto L48902e;
  #L489028.  call `d`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L48902e.  if v0 == 0 then goto L489038;
  #L489032.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L489038.  return @kind void;
  #L48903a.  v0:= v6.`io.reactivex.internal.subscriptions.SubscriptionArbiter.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48903e.  call temp:= `add`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L489044.  call `c`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L48904a.  return @kind void;
}
procedure `void` `setSubscription`(`io.reactivex.internal.subscriptions.SubscriptionArbiter` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48905c.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.g` @type ^`boolean` @kind boolean;
  #L489060.  if v0 == 0 then goto L48906c;
  #L489064.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48906a.  return @kind void;
  #L48906c.  v0:= "s is null" @kind object;
  #L489070.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L489076.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48907c.  v0:= temp;
  #L48907e.  if v0 != 0 then goto L4890d6;
  #L489082.  v0:= 0I;
  #L489084.  v1:= 1I;
  #L489086.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48908c.  v0:= temp;
  #L48908e.  if v0 == 0 then goto L4890d6;
  #L489092.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` @kind object;
  #L489096.  if v0 == 0 then goto L4890a8;
  #L48909a.  v1:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L48909e.  if v1 == 0 then goto L4890a8;
  #L4890a2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4890a8.  v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.a` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4890ac.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.b` @type ^`long` @kind wide;
  #L4890b0.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4890b6.  v2:= temp;
  #L4890b8.  if v2 == 0 then goto L4890c2;
  #L4890bc.  call `d`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.d:()V` @kind virtual;
  #L4890c2.  v2:= 0L;
  #L4890c6.  v4:= lcmp(v0, v2);
  #L4890ca.  if v4 == 0 then goto L4890d4;
  #L4890ce.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4890d4.  return @kind void;
  #L4890d6.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4890da.  call temp:= `getAndSet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4890e0.  v6:= temp @kind object;
  #L4890e2.  v6:= (`org.reactivestreams.Subscription`) v6 @kind object;
  #L4890e6.  if v6 == 0 then goto L4890f8;
  #L4890ea.  v0:= v5.`io.reactivex.internal.subscriptions.SubscriptionArbiter.f` @type ^`boolean` @kind boolean;
  #L4890ee.  if v0 == 0 then goto L4890f8;
  #L4890f2.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4890f8.  call `c`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.c:()V` @kind virtual;
  #L4890fe.  return @kind void;
}
