record `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.subscriptions.DeferredScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L488850.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L488856.  v0.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L48885a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48886c.  v0:= 4I;
  #L48886e.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L488874.  v0:= 0I;
  #L488876.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L48887a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48888c.  v0:= 32I;
  #L488890.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488896.  v0:= 0I;
  #L488898.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v0 @kind object;
  #L48889c.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4888b0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4888b6.  v0:= temp;
  #L4888b8.  v1:= 8I;
  #L4888bc.  v2:= 4I;
  #L4888be.  if v0 != v1 then goto L4888ee;
  #L4888c2.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L4888c6.  v0:= 16I;
  #L4888ca.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4888d0.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4888d4.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4888da.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4888e0.  v4:= temp;
  #L4888e2.  if v4 == v2 then goto L4888ec;
  #L4888e6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4888ec.  return @kind void;
  #L4888ee.  v1:= v0 ^& -3;
  #L4888f2.  if v1 == 0 then goto L4888f8;
  #L4888f6.  return @kind void;
  #L4888f8.  v1:= 2I;
  #L4888fa.  if v0 != v1 then goto L488924;
  #L4888fe.  v0:= 3I;
  #L488900.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488906.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48890a.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L488910.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488916.  v4:= temp;
  #L488918.  if v4 == v2 then goto L488922;
  #L48891c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L488922.  return @kind void;
  #L488924.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L488928.  v0:= 0I;
  #L48892a.  v1:= 1I;
  #L48892c.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L488932.  v0:= temp;
  #L488934.  if v0 == 0 then goto L48893a;
  #L488938.  return @kind void;
  #L48893a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488940.  v0:= temp;
  #L488942.  if v0 != v2 then goto L4888b8;
  #L488946.  v4:= 0I;
  #L488948.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v4 @kind object;
  #L48894c.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L488778.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48877e.  v0:= temp;
  #L488780.  v1:= 4I;
  #L488782.  if v0 != v1 then goto L48878a;
  #L488786.  v0:= 1I;
  #L488788.  goto L48878c;
  #L48878a.  v0:= 0I;
  #L48878c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4887a0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4887a6.  v0:= temp;
  #L4887a8.  v1:= 16I;
  #L4887ac.  if v0 == v1 then goto L4887b4;
  #L4887b0.  v0:= 1I;
  #L4887b2.  goto L4887b6;
  #L4887b4.  v0:= 0I;
  #L4887b6.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L488818.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48881e.  v0:= temp;
  #L488820.  v1:= 0I;
  #L488822.  v2:= 16I;
  #L488826.  if v0 != v2 then goto L48883e;
  #L48882a.  v0:= 32I;
  #L48882e.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488834.  v0:= v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L488838.  v3.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L48883c.  return v0 @kind object;
  #L48883e.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L488960.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L488966.  v2:= temp;
  #L488968.  if v2 == 0 then goto L4889d0;
  #L48896c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488972.  v2:= temp;
  #L488974.  v3:= v2 ^& -2;
  #L488978.  if v3 == 0 then goto L48897e;
  #L48897c.  return @kind void;
  #L48897e.  v3:= 1I;
  #L488980.  if v2 != v3 then goto L4889c0;
  #L488984.  v2:= 3I;
  #L488986.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48898c.  v2:= temp;
  #L48898e.  if v2 == 0 then goto L4889be;
  #L488992.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L488996.  if v2 == 0 then goto L4889be;
  #L48899a.  v3:= 0I;
  #L48899c.  v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L4889a0.  v3:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4889a4.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4889aa.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4889b0.  v2:= temp;
  #L4889b2.  v0:= 4I;
  #L4889b4.  if v2 == v0 then goto L4889be;
  #L4889b8.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4889be.  return @kind void;
  #L4889c0.  v2:= 0I;
  #L4889c2.  v3:= 2I;
  #L4889c4.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4889ca.  v2:= temp;
  #L4889cc.  if v2 == 0 then goto L48896c;
  #L4889d0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L4887f0.  v0:= 2I;
  #L4887f2.  v2:= v2 ^& v0 @kind int;
  #L4887f4.  if v2 == 0 then goto L488804;
  #L4887f8.  v2:= 8I;
  #L4887fc.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488802.  return v0;
  #L488804.  v2:= 0I;
  #L488806.  return v2;
}
procedure `boolean` `tryCancel`(`io.reactivex.internal.subscriptions.DeferredScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.tryCancel:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4887c8.  v0:= 4I;
  #L4887ca.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4887d0.  v1:= temp;
  #L4887d2.  if v1 == v0 then goto L4887da;
  #L4887d6.  v0:= 1I;
  #L4887d8.  goto L4887dc;
  #L4887da.  v0:= 0I;
  #L4887dc.  return v0;
}
