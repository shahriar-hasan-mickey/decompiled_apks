record `io.reactivex.internal.subscriptions.SubscriptionHelper` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class, `org.reactivestreams.Subscription` @kind interface {
}
global `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `io.reactivex.internal.subscriptions.SubscriptionHelper` `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L489388.  v0:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`;
  #L48938c.  v1:= "CANCELLED" @kind object;
  #L489390.  v2:= 0I;
  #L489392.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L489398.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` := v0 @kind object;
  #L48939c.  v1:= 1I;
  #L48939e.  v1:= new `io.reactivex.internal.subscriptions.SubscriptionHelper`[v1];
  #L4893a2.  v1[v2]:= v0 @kind object;
  #L4893a6.  `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] := v1 @kind object;
  #L4893aa.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4893bc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L4893c2.  return @kind void;
}
procedure `boolean` `cancel`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L489110.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L489116.  v0:= temp @kind object;
  #L489118.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L48911c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L489120.  if v0 == v1 then goto L489146;
  #L489124.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48912a.  v2:= temp @kind object;
  #L48912c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L489130.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L489134.  if v2 == v0 then goto L489146;
  #L489138.  if v2 == 0 then goto L489142;
  #L48913c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489142.  v2:= 1I;
  #L489144.  return v2;
  #L489146.  v2:= 0I;
  #L489148.  return v2;
}
procedure `void` `deferredRequest`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `java.util.concurrent.atomic.AtomicLong` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4893e8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4893ee.  v0:= temp @kind object;
  #L4893f0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4893f4.  if v0 == 0 then goto L489400;
  #L4893f8.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4893fe.  goto L48943c;
  #L489400.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L489406.  v0:= temp;
  #L489408.  if v0 == 0 then goto L48943c;
  #L48940c.  call temp:= `add`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L489412.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L489418.  v2:= temp @kind object;
  #L48941a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L48941e.  if v2 == 0 then goto L48943c;
  #L489422.  v4:= 0L;
  #L489426.  call temp:= `getAndSet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L48942c.  v0:= temp @kind wide;
  #L48942e.  v3:= lcmp(v0, v4);
  #L489432.  if v3 == 0 then goto L48943c;
  #L489436.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48943c.  return @kind void;
}
procedure `boolean` `deferredSetOnce`(`java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.atomic.AtomicLong` v4 @kind object, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L48915c.  call temp:= `setOnce`(v3, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L489162.  v3:= temp;
  #L489164.  if v3 == 0 then goto L489186;
  #L489168.  v0:= 0L;
  #L48916c.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L489172.  v3:= temp @kind wide;
  #L489174.  v2:= lcmp(v3, v0);
  #L489178.  if v2 == 0 then goto L489182;
  #L48917c.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L489182.  v3:= 1I;
  #L489184.  return v3;
  #L489186.  v3:= 0I;
  #L489188.  return v3;
}
procedure `boolean` `replace`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48919c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4891a2.  v0:= temp @kind object;
  #L4891a4.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4891a8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4891ac.  if v0 != v1 then goto L4891be;
  #L4891b0.  if v3 == 0 then goto L4891ba;
  #L4891b4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4891ba.  v2:= 0I;
  #L4891bc.  return v2;
  #L4891be.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4891c4.  v0:= temp;
  #L4891c6.  if v0 == 0 then goto L48919c;
  #L4891ca.  v2:= 1I;
  #L4891cc.  return v2;
}
procedure `void` `reportMoreProduced`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportMoreProduced:(J)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L489450.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L489454.  v1:= new `java.lang.StringBuilder`;
  #L489458.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48945e.  v2:= "More produced than requested: " @kind object;
  #L489462.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489468.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48946e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L489474.  v3:= temp @kind object;
  #L489476.  call `<init>`(v0, v3) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48947c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L489482.  return @kind void;
}
procedure `void` `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L489494.  v0:= new `io.reactivex.exceptions.ProtocolViolationException`;
  #L489498.  v1:= "Subscription already set!" @kind object;
  #L48949c.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/ProtocolViolationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4894a2.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4894a8.  return @kind void;
}
procedure `boolean` `set`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4891e0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4891e6.  v0:= temp @kind object;
  #L4891e8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4891ec.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4891f0.  if v0 != v1 then goto L489202;
  #L4891f4.  if v3 == 0 then goto L4891fe;
  #L4891f8.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4891fe.  v2:= 0I;
  #L489200.  return v2;
  #L489202.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L489208.  v1:= temp;
  #L48920a.  if v1 == 0 then goto L4891e0;
  #L48920e.  if v0 == 0 then goto L489218;
  #L489212.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489218.  v2:= 1I;
  #L48921a.  return v2;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48922c.  v0:= "s is null" @kind object;
  #L489230.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L489236.  v0:= 0I;
  #L489238.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48923e.  v0:= temp;
  #L489240.  if v0 != 0 then goto L489264;
  #L489244.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48924a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L489250.  v1:= temp @kind object;
  #L489252.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L489256.  if v1 == v2 then goto L489260;
  #L48925a.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L489260.  v1:= 0I;
  #L489262.  return v1;
  #L489264.  v1:= 1I;
  #L489266.  return v1;
}
procedure `boolean` `setOnce`(`java.util.concurrent.atomic.AtomicReference` v0 @kind object, `org.reactivestreams.Subscription` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L489278.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L48927e.  v0:= temp;
  #L489280.  if v0 == 0 then goto L48928e;
  #L489284.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48928a.  v0:= 1I;
  #L48928c.  return v0;
  #L48928e.  v0:= 0I;
  #L489290.  return v0;
}
procedure `boolean` `validate`(`long` v3 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4892a4.  v0:= 0L;
  #L4892a8.  v2:= lcmp(v3, v0);
  #L4892ac.  if v2 > 0 then goto L4892e6;
  #L4892b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L4892b4.  v1:= new `java.lang.StringBuilder`;
  #L4892b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4892be.  v2:= "n > 0 required but it was " @kind object;
  #L4892c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4892c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4892ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4892d4.  v3:= temp @kind object;
  #L4892d6.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4892dc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4892e2.  v3:= 0I;
  #L4892e4.  return v3;
  #L4892e6.  v3:= 1I;
  #L4892e8.  return v3;
}
procedure `boolean` `validate`(`org.reactivestreams.Subscription` v1 @kind object, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4892fc.  v0:= 0I;
  #L4892fe.  if v2 != 0 then goto L489318;
  #L489302.  v1:= new `java.lang.NullPointerException`;
  #L489306.  v2:= "next is null" @kind object;
  #L48930a.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L489310.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L489316.  return v0;
  #L489318.  if v1 == 0 then goto L48932a;
  #L48931c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L489322.  call `reportSubscriptionSet`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.reportSubscriptionSet:()V` @kind static;
  #L489328.  return v0;
  #L48932a.  v1:= 1I;
  #L48932c.  return v1;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.valueOf:(Ljava/lang/String;)Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489340.  v0:= constclass @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L489344.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L48934a.  v1:= temp @kind object;
  #L48934c.  v1:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`) v1 @kind object;
  #L489350.  return v1 @kind object;
}
procedure `io.reactivex.internal.subscriptions.SubscriptionHelper`[] `values`() @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.values:()[Lio/reactivex/internal/subscriptions/SubscriptionHelper;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L489364.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.$VALUES` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper`[] @kind object;
  #L489368.  call temp:= `clone`(v0) @signature `[Lio/reactivex/internal/subscriptions/SubscriptionHelper;.clone:()Ljava/lang/Object;` @kind virtual;
  #L48936e.  v0:= temp @kind object;
  #L489370.  v0:= (`io.reactivex.internal.subscriptions.SubscriptionHelper`[]) v0 @kind object;
  #L489374.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L4893d4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.SubscriptionHelper` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4894bc.  return @kind void;
}
