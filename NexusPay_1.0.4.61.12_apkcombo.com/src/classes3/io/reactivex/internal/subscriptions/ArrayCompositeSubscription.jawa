record `io.reactivex.internal.subscriptions.ArrayCompositeSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
global `long` `@@io.reactivex.internal.subscriptions.ArrayCompositeSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48845c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L488462.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v4 @kind this) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L488474.  v0:= 0I;
  #L488476.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L48847c.  v1:= temp @kind object;
  #L48847e.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L488482.  if v1 == v2 then goto L4884ca;
  #L488486.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L48848c.  v1:= temp;
  #L48848e.  if v0 >= v1 then goto L4884ca;
  #L488492.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L488498.  v2:= temp @kind object;
  #L48849a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L48849e.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4884a2.  if v2 == v3 then goto L4884c4;
  #L4884a6.  call temp:= `getAndSet`(v4, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.getAndSet:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4884ac.  v2:= temp @kind object;
  #L4884ae.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L4884b2.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4884b6.  if v2 == v3 then goto L4884c4;
  #L4884ba.  if v2 == 0 then goto L4884c4;
  #L4884be.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4884c4.  v0:= v0 + 1;
  #L4884c8.  goto L48848e;
  #L4884ca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v3 @kind this) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4883a8.  v0:= 0I;
  #L4883aa.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4883b0.  v1:= temp @kind object;
  #L4883b2.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4883b6.  if v1 != v2 then goto L4883bc;
  #L4883ba.  v0:= 1I;
  #L4883bc.  return v0;
}
procedure `org.reactivestreams.Subscription` `replaceResource`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.replaceResource:(ILorg/reactivestreams/Subscription;)Lorg/reactivestreams/Subscription;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48841c.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L488422.  v0:= temp @kind object;
  #L488424.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L488428.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L48842c.  if v0 != v1 then goto L48843e;
  #L488430.  if v4 == 0 then goto L48843a;
  #L488434.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L48843a.  v3:= 0I;
  #L48843c.  return v3 @kind object;
  #L48843e.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L488444.  v1:= temp;
  #L488446.  if v1 == 0 then goto L48841c;
  #L48844a.  return v0 @kind object;
}
procedure `boolean` `setResource`(`io.reactivex.internal.subscriptions.ArrayCompositeSubscription` v2 @kind this, `int` v3 , `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/subscriptions/ArrayCompositeSubscription;.setResource:(ILorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4883d0.  call temp:= `get`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4883d6.  v0:= temp @kind object;
  #L4883d8.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4883dc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4883e0.  if v0 != v1 then goto L4883f2;
  #L4883e4.  if v4 == 0 then goto L4883ee;
  #L4883e8.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4883ee.  v3:= 0I;
  #L4883f0.  return v3;
  #L4883f2.  call temp:= `compareAndSet`(v2, v3, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4883f8.  v1:= temp;
  #L4883fa.  if v1 == 0 then goto L4883d0;
  #L4883fe.  if v0 == 0 then goto L488408;
  #L488402.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L488408.  v3:= 1I;
  #L48840a.  return v3;
}
