record `io.reactivex.internal.subscriptions.ScalarSubscription` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueSubscription` @kind interface {
  `java.lang.Object` `io.reactivex.internal.subscriptions.ScalarSubscription.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.subscriptions.ScalarSubscription.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.subscriptions.ScalarSubscription.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L488c6c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L488c72.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L488c76.  v0.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` := v2 @kind object;
  #L488c7a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488c8c.  v0:= 2I;
  #L488c8e.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488c94.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488ca8.  v0:= 1I;
  #L488caa.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488cb0.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.subscriptions.ScalarSubscription` v2 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L488b98.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488b9e.  v0:= temp;
  #L488ba0.  v1:= 2I;
  #L488ba2.  if v0 != v1 then goto L488baa;
  #L488ba6.  v0:= 1I;
  #L488ba8.  goto L488bac;
  #L488baa.  v0:= 0I;
  #L488bac.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488bc0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488bc6.  v0:= temp;
  #L488bc8.  if v0 == 0 then goto L488bd0;
  #L488bcc.  v0:= 1I;
  #L488bce.  goto L488bd2;
  #L488bd0.  v0:= 0I;
  #L488bd2.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488be4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L488be8.  v0:= "Should not be called!" @kind object;
  #L488bec.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488bf2.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L488c04.  v1:= new `java.lang.UnsupportedOperationException`;
  #L488c08.  v2:= "Should not be called!" @kind object;
  #L488c0c.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L488c12.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488c3c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488c42.  v0:= temp;
  #L488c44.  if v0 != 0 then goto L488c56;
  #L488c48.  v0:= 1I;
  #L488c4a.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L488c50.  v0:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L488c54.  return v0 @kind object;
  #L488c56.  v0:= 0I;
  #L488c58.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.subscriptions.ScalarSubscription` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L488cc4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L488cca.  v2:= temp;
  #L488ccc.  if v2 != 0 then goto L488cd2;
  #L488cd0.  return @kind void;
  #L488cd2.  v2:= 0I;
  #L488cd4.  v3:= 1I;
  #L488cd6.  call temp:= `compareAndSet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L488cdc.  v2:= temp;
  #L488cde.  if v2 == 0 then goto L488d04;
  #L488ce2.  v2:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L488ce6.  v3:= v1.`io.reactivex.internal.subscriptions.ScalarSubscription.a` @type ^`java.lang.Object` @kind object;
  #L488cea.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L488cf0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L488cf6.  v3:= temp;
  #L488cf8.  v0:= 2I;
  #L488cfa.  if v3 == v0 then goto L488d04;
  #L488cfe.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L488d04.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.subscriptions.ScalarSubscription` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/subscriptions/ScalarSubscription;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L488c24.  v1:= v1 ^& 1;
  #L488c28.  return v1;
}
