record `io.reactivex.internal.schedulers.a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.a.runnable` @AccessFlag PROTECTED_FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.a.runner` @AccessFlag PROTECTED;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.a.DISPOSED` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.a.FINISHED` @AccessFlag PROTECTED_STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4837a4.  v0:= new `java.util.concurrent.FutureTask`;
  #L4837a8.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4837ac.  v2:= 0I;
  #L4837ae.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4837b4.  `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4837b8.  v0:= new `java.util.concurrent.FutureTask`;
  #L4837bc.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4837c0.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4837c6.  `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4837ca.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.a` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4837dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4837e2.  v0.`io.reactivex.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4837e6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.a` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L4837f8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4837fe.  v0:= temp @kind object;
  #L483800.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L483804.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L483808.  if v0 == v1 then goto L483840;
  #L48380c.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L483810.  if v0 == v1 then goto L483840;
  #L483814.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48381a.  v1:= temp;
  #L48381c.  if v1 == 0 then goto L483840;
  #L483820.  if v0 == 0 then goto L483840;
  #L483824.  v1:= v3.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L483828.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48382e.  v2:= temp @kind object;
  #L483830.  if v1 == v2 then goto L483838;
  #L483834.  v1:= 1I;
  #L483836.  goto L48383a;
  #L483838.  v1:= 0I;
  #L48383a.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L483840.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.a` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48378c.  v0:= v1.`io.reactivex.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L483790.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.a` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/a;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L483754.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48375a.  v0:= temp @kind object;
  #L48375c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L483760.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L483764.  if v0 == v1 then goto L483776;
  #L483768.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L48376c.  if v0 != v1 then goto L483772;
  #L483770.  goto L483776;
  #L483772.  v0:= 0I;
  #L483774.  goto L483778;
  #L483776.  v0:= 1I;
  #L483778.  return v0;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.a` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L483854.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48385a.  v0:= temp @kind object;
  #L48385c.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L483860.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L483864.  if v0 != v1 then goto L48386a;
  #L483868.  goto L48389c;
  #L48386a.  v1:= `@@io.reactivex.internal.schedulers.a.DISPOSED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L48386e.  if v0 != v1 then goto L483890;
  #L483872.  v0:= v2.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` @kind object;
  #L483876.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48387c.  v1:= temp @kind object;
  #L48387e.  if v0 == v1 then goto L483886;
  #L483882.  v0:= 1I;
  #L483884.  goto L483888;
  #L483886.  v0:= 0I;
  #L483888.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L48388e.  goto L48389c;
  #L483890.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L483896.  v0:= temp;
  #L483898.  if v0 == 0 then goto L483854;
  #L48389c.  return @kind void;
}
