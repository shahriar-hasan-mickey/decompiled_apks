record `io.reactivex.internal.schedulers.SchedulerPoolFactory` @kind class @AccessFlag PUBLIC_FINAL {
}
global `boolean` `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.concurrent.atomic.AtomicReference` `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.a` @AccessFlag STATIC_FINAL;
global `java.util.Map` `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4859e0.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4859e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4859ea.  `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4859ee.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L4859f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L4859f8.  `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` := v0 @kind object;
  #L4859fc.  v0:= new `io.reactivex.internal.schedulers.SchedulerPoolFactory$b`;
  #L485a00.  call `<init>`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory$b;.<init>:()V` @kind direct;
  #L485a06.  v1:= 1I;
  #L485a08.  v2:= "rx2.purge-enabled" @kind object;
  #L485a0c.  call temp:= `a`(v1, v2, v1, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/functions/Function;)Z` @kind static;
  #L485a12.  v2:= temp;
  #L485a14.  `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` := v2 @kind boolean;
  #L485a18.  v3:= "rx2.purge-period-seconds" @kind object;
  #L485a1c.  call temp:= `b`(v2, v3, v1, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/functions/Function;)I` @kind static;
  #L485a22.  v0:= temp;
  #L485a24.  `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int` := v0;
  #L485a28.  call `start`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.start:()V` @kind static;
  #L485a2e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerPoolFactory` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L485a40.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L485a46.  v0:= new `java.lang.IllegalStateException`;
  #L485a4a.  v1:= "No instances!" @kind object;
  #L485a4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485a54.  throw v0;
}
procedure `boolean` `a`(`boolean` v0 , `java.lang.String` v1 @kind object, `boolean` v2 , `boolean` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.a:(ZLjava/lang/String;ZZLio/reactivex/functions/Function;)Z` @AccessFlag STATIC {
    temp;

  #L485934.  if v0 == 0 then goto L48595a;
  #L485938.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L48593e.  v0:= temp @kind object;
  #L485940.  v0:= (`java.lang.String`) v0 @kind object;
  #L485944.  if v0 != 0 then goto L48594a;
  #L485948.  return v2;
  #L48594a.  v1:= "true" @kind object;
  #L48594e.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L485954.  v0:= temp;
  #L485956.  return v0;
  #L485958.  return v2;
  #L48595a.  return v3;
  catch `java.lang.Throwable` @[L485938..L485956] goto L485958;
}
procedure `int` `b`(`boolean` v0 , `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.b:(ZLjava/lang/String;IILio/reactivex/functions/Function;)I` @AccessFlag STATIC {
    temp;

  #L485978.  if v0 == 0 then goto L48599a;
  #L48597c.  call temp:= `apply`(v4, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L485982.  v0:= temp @kind object;
  #L485984.  v0:= (`java.lang.String`) v0 @kind object;
  #L485988.  if v0 != 0 then goto L48598e;
  #L48598c.  return v2;
  #L48598e.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L485994.  v0:= temp;
  #L485996.  return v0;
  #L485998.  return v2;
  #L48599a.  return v3;
  catch `java.lang.Throwable` @[L48597c..L485996] goto L485998;
}
procedure `void` `c`(`boolean` v1 , `java.util.concurrent.ScheduledExecutorService` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L485abc.  if v1 == 0 then goto L485ad8;
  #L485ac0.  v1:= instanceof @variable v2 @type ^`java.util.concurrent.ScheduledThreadPoolExecutor` @kind boolean;
  #L485ac4.  if v1 == 0 then goto L485ad8;
  #L485ac8.  v1:= v2 @kind object;
  #L485aca.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L485ace.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L485ad2.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L485ad8.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `create`(`java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4859b8.  v0:= 1I;
  #L4859ba.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4859c0.  v1:= temp @kind object;
  #L4859c2.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L4859c6.  call `c`(v0, v1) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.c:(ZLjava/util/concurrent/ScheduledExecutorService;)V` @kind static;
  #L4859cc.  return v1 @kind object;
}
procedure `void` `d`(`boolean` v10 ) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L485aec.  if v10 == 0 then goto L485b54;
  #L485af0.  v10:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L485af4.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L485afa.  v10:= temp @kind object;
  #L485afc.  v10:= (`java.util.concurrent.ScheduledExecutorService`) v10 @kind object;
  #L485b00.  if v10 == 0 then goto L485b06;
  #L485b04.  return @kind void;
  #L485b06.  v0:= 1I;
  #L485b08.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L485b0c.  v2:= "RxSchedulerPurge" @kind object;
  #L485b10.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L485b16.  call temp:= `newScheduledThreadPool`(v0, v1) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(ILjava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L485b1c.  v3:= temp @kind object;
  #L485b1e.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L485b22.  call temp:= `compareAndSet`(v0, v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485b28.  v10:= temp;
  #L485b2a.  if v10 == 0 then goto L485b4c;
  #L485b2e.  v4:= new `io.reactivex.internal.schedulers.SchedulerPoolFactory$a`;
  #L485b32.  call `<init>`(v4) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory$a;.<init>:()V` @kind direct;
  #L485b38.  v10:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_PERIOD_SECONDS` @type ^`int`;
  #L485b3c.  v5:= (`long`) v10 @kind i2l;
  #L485b3e.  v7:= (`long`) v10 @kind i2l;
  #L485b40.  v9:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L485b44.  call temp:= `scheduleAtFixedRate`(v3, v4, v5, v7, v9) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L485b4a.  return @kind void;
  #L485b4c.  call temp:= `shutdownNow`(v3) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L485b52.  goto L485af0;
  #L485b54.  return @kind void;
}
procedure `void` `shutdown`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.shutdown:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L485a68.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L485a6c.  v1:= 0I;
  #L485a6e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L485a74.  v0:= temp @kind object;
  #L485a76.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L485a7a.  if v0 == 0 then goto L485a84;
  #L485a7e.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L485a84.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L485a88.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L485a8e.  return @kind void;
}
procedure `void` `start`() @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.start:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L485aa0.  v0:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.PURGE_ENABLED` @type ^`boolean` @kind boolean;
  #L485aa4.  call `d`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.d:(Z)V` @kind static;
  #L485aaa.  return @kind void;
}
