record `io.reactivex.internal.schedulers.SchedulerWhen$f` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L485e0c.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e10.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L485e16.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v2 @kind this, `io.reactivex.Scheduler$Worker` v3 @kind object, `io.reactivex.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.a:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L485e28.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L485e2e.  v0:= temp @kind object;
  #L485e30.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L485e34.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e38.  if v0 != v1 then goto L485e3e;
  #L485e3c.  return @kind void;
  #L485e3e.  v1:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e42.  if v0 == v1 then goto L485e48;
  #L485e46.  return @kind void;
  #L485e48.  call temp:= `b`(v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L485e4e.  v3:= temp @kind object;
  #L485e50.  v4:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e54.  call temp:= `compareAndSet`(v2, v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485e5a.  v4:= temp;
  #L485e5c.  if v4 != 0 then goto L485e66;
  #L485e60.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L485e66.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `b`(`io.reactivex.Scheduler$Worker` v0 @kind object, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.b:(Lio/reactivex/Scheduler$Worker;Lio/reactivex/CompletableObserver;)Lio/reactivex/disposables/Disposable;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485e78.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e7c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L485e82.  v1:= temp @kind object;
  #L485e84.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L485e88.  v2:= `@@io.reactivex.internal.schedulers.SchedulerWhen.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485e8c.  if v1 != v2 then goto L485e92;
  #L485e90.  return @kind void;
  #L485e92.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485e98.  v2:= temp;
  #L485e9a.  if v2 == 0 then goto L485e7c;
  #L485e9e.  v0:= `@@io.reactivex.internal.schedulers.SchedulerWhen.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L485ea2.  if v1 == v0 then goto L485eac;
  #L485ea6.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L485eac.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$f` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$f;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485de4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L485dea.  v0:= temp @kind object;
  #L485dec.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L485df0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L485df6.  v0:= temp;
  #L485df8.  return v0;
}
