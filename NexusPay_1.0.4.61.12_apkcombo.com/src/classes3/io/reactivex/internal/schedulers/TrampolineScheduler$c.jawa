record `io.reactivex.internal.schedulers.TrampolineScheduler$c` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.PriorityBlockingQueue` `io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4866cc.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4866d2.  v0:= new `java.util.concurrent.PriorityBlockingQueue`;
  #L4866d6.  call `<init>`(v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.<init>:()V` @kind direct;
  #L4866dc.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` := v0 @kind object;
  #L4866e0.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4866e4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4866ea.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4866ee.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4866f2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4866f8.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4866fc.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `a`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @AccessFlag  {
    temp;
    v0;

  #L4865a4.  v0:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L4865a8.  if v0 == 0 then goto L4865b2;
  #L4865ac.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4865b0.  return v2 @kind object;
  #L4865b2.  v0:= new `io.reactivex.internal.schedulers.TrampolineScheduler$b`;
  #L4865b6.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4865bc.  v3:= temp @kind object;
  #L4865be.  v4:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4865c2.  call temp:= `incrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L4865c8.  v4:= temp;
  #L4865ca.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$b;.<init>:(Ljava/lang/Runnable;Ljava/lang/Long;I)V` @kind direct;
  #L4865d0.  v2:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L4865d4.  call temp:= `add`(v2, v0) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L4865da.  v2:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4865de.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4865e4.  v2:= temp;
  #L4865e6.  if v2 != 0 then goto L486644;
  #L4865ea.  v2:= 1I;
  #L4865ec.  v3:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L4865f0.  if v3 == 0 then goto L486604;
  #L4865f4.  v2:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L4865f8.  call `clear`(v2) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.clear:()V` @kind virtual;
  #L4865fe.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L486602.  return v2 @kind object;
  #L486604.  v3:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.a` @type ^`java.util.concurrent.PriorityBlockingQueue` @kind object;
  #L486608.  call temp:= `poll`(v3) @signature `Ljava/util/concurrent/PriorityBlockingQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48660e.  v3:= temp @kind object;
  #L486610.  v3:= (`io.reactivex.internal.schedulers.TrampolineScheduler$b`) v3 @kind object;
  #L486614.  if v3 != 0 then goto L486630;
  #L486618.  v3:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48661c.  v2:= -v2 @kind int;
  #L48661e.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L486624.  v2:= temp;
  #L486626.  if v2 != 0 then goto L4865ec;
  #L48662a.  v2:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L48662e.  return v2 @kind object;
  #L486630.  v4:= v3.`io.reactivex.internal.schedulers.TrampolineScheduler$b.d` @type ^`boolean` @kind boolean;
  #L486634.  if v4 != 0 then goto L4865ec;
  #L486638.  v3:= v3.`io.reactivex.internal.schedulers.TrampolineScheduler$b.a` @type ^`java.lang.Runnable` @kind object;
  #L48663c.  call `run`(v3) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L486642.  goto L4865ec;
  #L486644.  v2:= new `io.reactivex.internal.schedulers.TrampolineScheduler$c$a`;
  #L486648.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c$a;.<init>:(Lio/reactivex/internal/schedulers/TrampolineScheduler$c;Lio/reactivex/internal/schedulers/TrampolineScheduler$b;)V` @kind direct;
  #L48664e.  call temp:= `fromRunnable`(v2) @signature `Lio/reactivex/disposables/Disposables;.fromRunnable:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind static;
  #L486654.  v2:= temp @kind object;
  #L486656.  return v2 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L486710.  v0:= 1I;
  #L486712.  v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` := v0 @kind boolean;
  #L486716.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48658c.  v0:= v1.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L486590.  return v0;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486668.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48666c.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L486672.  v0:= temp @kind wide;
  #L486674.  call temp:= `a`(v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L48667a.  v3:= temp @kind object;
  #L48667c.  return v3 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.TrampolineScheduler$c` v2 @kind this, `java.lang.Runnable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486690.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L486694.  call temp:= `now`(v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L48669a.  v0:= temp @kind wide;
  #L48669c.  call temp:= `toMillis`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L4866a2.  v4:= temp @kind wide;
  #L4866a4.  v0:= v0 + v4 @kind long;
  #L4866a6.  v4:= new `io.reactivex.internal.schedulers.TrampolineScheduler$a`;
  #L4866aa.  call `<init>`(v4, v3, v2, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/TrampolineScheduler$c;J)V` @kind direct;
  #L4866b0.  call temp:= `a`(v2, v4, v0) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$c;.a:(Ljava/lang/Runnable;J)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4866b6.  v3:= temp @kind object;
  #L4866b8.  return v3 @kind object;
}
