record `io.reactivex.internal.schedulers.RxThreadFactory` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.String` `io.reactivex.internal.schedulers.RxThreadFactory.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.schedulers.RxThreadFactory.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.RxThreadFactory.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.RxThreadFactory.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4853fc.  v0:= 5I;
  #L4853fe.  v1:= 0I;
  #L485400.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L485406.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L485418.  v0:= 0I;
  #L48541a.  call `<init>`(v1, v2, v3, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L485420.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.RxThreadFactory` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L485434.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48543a.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` := v1 @kind object;
  #L48543e.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.b` @type ^`int` := v2;
  #L485442.  v0.`io.reactivex.internal.schedulers.RxThreadFactory.c` @type ^`boolean` := v3 @kind boolean;
  #L485446.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`io.reactivex.internal.schedulers.RxThreadFactory` v3 @kind this, `java.lang.Runnable` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48538c.  v0:= new `java.lang.StringBuilder`;
  #L485390.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` @kind object;
  #L485394.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48539a.  v1:= 45I;
  #L48539e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4853a4.  call temp:= `incrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.incrementAndGet:()J` @kind virtual;
  #L4853aa.  v1:= temp @kind wide;
  #L4853ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L4853b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4853b8.  v0:= temp @kind object;
  #L4853ba.  v1:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.c` @type ^`boolean` @kind boolean;
  #L4853be.  if v1 == 0 then goto L4853ce;
  #L4853c2.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory$a`;
  #L4853c6.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory$a;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L4853cc.  goto L4853d8;
  #L4853ce.  v1:= new `java.lang.Thread`;
  #L4853d2.  call `<init>`(v1, v4, v0) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L4853d8.  v4:= v3.`io.reactivex.internal.schedulers.RxThreadFactory.b` @type ^`int`;
  #L4853dc.  call `setPriority`(v1, v4) @signature `Ljava/lang/Thread;.setPriority:(I)V` @kind virtual;
  #L4853e2.  v4:= 1I;
  #L4853e4.  call `setDaemon`(v1, v4) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L4853ea.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.schedulers.RxThreadFactory` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L485348.  v0:= new `java.lang.StringBuilder`;
  #L48534c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L485352.  v1:= "RxThreadFactory[" @kind object;
  #L485356.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48535c.  v1:= v2.`io.reactivex.internal.schedulers.RxThreadFactory.a` @type ^`java.lang.String` @kind object;
  #L485360.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485366.  v1:= "]" @kind object;
  #L48536a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L485370.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L485376.  v0:= temp @kind object;
  #L485378.  return v0 @kind object;
}
