record `io.reactivex.internal.schedulers.ExecutorScheduler$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.schedulers.SchedulerRunnableIntrospection` @kind interface {
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.schedulers.ExecutorScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.schedulers.ExecutorScheduler$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$b` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$b;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L483ea4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L483eaa.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L483eae.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L483eb4.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L483eb8.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L483ebc.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L483ec2.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L483ec6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483ed8.  v0:= 0I;
  #L483eda.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L483ee0.  v0:= temp @kind object;
  #L483ee2.  if v0 == 0 then goto L483efa;
  #L483ee6.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483eea.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L483ef0.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483ef4.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L483efa.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$b;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483e7c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483e82.  v0:= temp @kind object;
  #L483e84.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L483e88.  if v0 == 0 then goto L483e8e;
  #L483e8c.  goto L483e92;
  #L483e8e.  v0:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L483e92.  return v0 @kind object;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483e58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483e5e.  v0:= temp @kind object;
  #L483e60.  if v0 != 0 then goto L483e68;
  #L483e64.  v0:= 1I;
  #L483e66.  goto L483e6a;
  #L483e68.  v0:= 0I;
  #L483e6a.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$b` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L483f0c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483f12.  v0:= temp @kind object;
  #L483f14.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L483f18.  if v0 == 0 then goto L483f6e;
  #L483f1c.  v1:= 0I;
  #L483f1e.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L483f24.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f2a.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483f2e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L483f32.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f38.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483f3c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L483f40.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f46.  goto L483f6e;
  #L483f48.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L483f4a.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f50.  v1:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$b.a` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483f54.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L483f58.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f5e.  v1:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L483f62.  v2:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L483f66.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L483f6c.  throw v0;
  #L483f6e.  return @kind void;
  catch `java.lang.Throwable` @[L483f1e..L483f24] goto L483f48;
}
