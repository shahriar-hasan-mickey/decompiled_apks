record `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler$Worker` @kind class, `java.lang.Runnable` @kind interface {
  `boolean` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @AccessFlag FINAL;
  `java.util.concurrent.Executor` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.<init>:(Ljava/util/concurrent/Executor;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4843b0.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L4843b6.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4843ba.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4843c0.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L4843c4.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4843c8.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4843ce.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` := v0 @kind object;
  #L4843d2.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L4843d6.  v2:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4843da.  call `<init>`(v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4843e0.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v2 @kind object;
  #L4843e4.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` := v3 @kind boolean;
  #L4843e8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4843fc.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L484400.  if v0 != 0 then goto L48442e;
  #L484404.  v0:= 1I;
  #L484406.  v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` := v0 @kind boolean;
  #L48440a.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L48440e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L484414.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L484418.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48441e.  v0:= temp;
  #L484420.  if v0 != 0 then goto L48442e;
  #L484424.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L484428.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L48442e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484214.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L484218.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484440.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L484444.  v1:= 1I;
  #L484446.  v2:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L48444a.  if v2 == 0 then goto L484456;
  #L48444e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L484454.  return @kind void;
  #L484456.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48445c.  v2:= temp @kind object;
  #L48445e.  v2:= (`java.lang.Runnable`) v2 @kind object;
  #L484462.  if v2 != 0 then goto L48448a;
  #L484466.  v2:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L48446a.  if v2 == 0 then goto L484476;
  #L48446e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L484474.  return @kind void;
  #L484476.  v2:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48447a.  v1:= -v1 @kind int;
  #L48447c.  call temp:= `addAndGet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L484482.  v1:= temp;
  #L484484.  if v1 != 0 then goto L484446;
  #L484488.  return @kind void;
  #L48448a.  call `run`(v2) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L484490.  v2:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L484494.  if v2 == 0 then goto L484456;
  #L484498.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L48449e.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48422c.  v0:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L484230.  if v0 == 0 then goto L48423a;
  #L484234.  v3:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L484238.  return v3 @kind object;
  #L48423a.  call temp:= `onSchedule`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L484240.  v3:= temp @kind object;
  #L484242.  v0:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.a` @type ^`boolean` @kind boolean;
  #L484246.  if v0 == 0 then goto L484264;
  #L48424a.  v0:= new `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b`;
  #L48424e.  v1:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484252.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/DisposableContainer;)V` @kind direct;
  #L484258.  v3:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L48425c.  call temp:= `add`(v3, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L484262.  goto L48426e;
  #L484264.  v0:= new `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$a`;
  #L484268.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L48426e.  v3:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L484272.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L484278.  v3:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L48427c.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L484282.  v3:= temp;
  #L484284.  if v3 != 0 then goto L4842b2;
  #L484288.  v3:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L48428c.  call `execute`(v3, v2) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L484292.  goto L4842b2;
  #L484294.  v3:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L484296.  v0:= 1I;
  #L484298.  v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` := v0 @kind boolean;
  #L48429c.  v0:= v2.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.c` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4842a0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4842a6.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4842ac.  v3:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4842b0.  return v3 @kind object;
  #L4842b2.  return v0 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L484288..L484292] goto L484294;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker` v4 @kind this, `java.lang.Runnable` v5 @kind object, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4842d4.  v0:= 0L;
  #L4842d8.  v2:= lcmp(v6, v0);
  #L4842dc.  if v2 > 0 then goto L4842ea;
  #L4842e0.  call temp:= `schedule`(v4, v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4842e6.  v5:= temp @kind object;
  #L4842e8.  return v5 @kind object;
  #L4842ea.  v0:= v4.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` @kind boolean;
  #L4842ee.  if v0 == 0 then goto L4842f8;
  #L4842f2.  v5:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4842f6.  return v5 @kind object;
  #L4842f8.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4842fc.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L484302.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L484306.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:(Lio/reactivex/disposables/Disposable;)V` @kind direct;
  #L48430c.  call temp:= `onSchedule`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L484312.  v5:= temp @kind object;
  #L484314.  v2:= new `io.reactivex.internal.schedulers.ScheduledRunnable`;
  #L484318.  v3:= new `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$c`;
  #L48431c.  call `<init>`(v3, v4, v1, v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$c;.<init>:(Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker;Lio/reactivex/internal/disposables/SequentialDisposable;Ljava/lang/Runnable;)V` @kind direct;
  #L484322.  v5:= v4.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484326.  call `<init>`(v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/DisposableContainer;)V` @kind direct;
  #L48432c.  v5:= v4.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484330.  call temp:= `add`(v5, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L484336.  v5:= v4.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L48433a.  v3:= instanceof @variable v5 @type ^`java.util.concurrent.ScheduledExecutorService` @kind boolean;
  #L48433e.  if v3 == 0 then goto L48436a;
  #L484342.  v5:= (`java.util.concurrent.ScheduledExecutorService`) v5 @kind object;
  #L484346.  call temp:= `schedule`(v5, v2, v6, v8) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L48434c.  v5:= temp @kind object;
  #L48434e.  call `setFuture`(v2, v5) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L484354.  goto L484386;
  #L484356.  v5:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L484358.  v6:= 1I;
  #L48435a.  v4.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker.d` @type ^`boolean` := v6 @kind boolean;
  #L48435e.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L484364.  v5:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L484368.  return v5 @kind object;
  #L48436a.  v5:= `@@io.reactivex.internal.schedulers.ExecutorScheduler.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L48436e.  call temp:= `scheduleDirect`(v5, v2, v6, v8) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L484374.  v5:= temp @kind object;
  #L484376.  v6:= new `io.reactivex.internal.schedulers.b`;
  #L48437a.  call `<init>`(v6, v5) @signature `Lio/reactivex/internal/schedulers/b;.<init>:(Lio/reactivex/disposables/Disposable;)V` @kind direct;
  #L484380.  call `setFuture`(v2, v6) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L484386.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L48438c.  return v1 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L484342..L484354] goto L484356;
}
