record `io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.schedulers.a` @kind class, `java.lang.Runnable` @kind interface {
}
global `long` `@@io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L485474.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L48547a.  return @kind void;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L485458.  call temp:= `getWrappedRunnable`(v1) @signature `Lio/reactivex/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @kind super;
  #L48545e.  v0:= temp @kind object;
  #L485460.  return v0 @kind object;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48548c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L485492.  v0:= temp @kind object;
  #L485494.  v2.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L485498.  v0:= 0I;
  #L48549a.  v1:= v2.`io.reactivex.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L48549e.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L4854a4.  v2.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L4854a8.  goto L4854c0;
  #L4854aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4854ac.  v2.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L4854b0.  v0:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4854b4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4854ba.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4854c0.  return @kind void;
  catch `java.lang.Throwable` @[L48549a..L4854a8] goto L4854aa;
}
