record `io.reactivex.internal.schedulers.ScheduledDirectTask` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.schedulers.a` @kind class, `java.util.concurrent.Callable` @kind interface {
}
global `long` `@@io.reactivex.internal.schedulers.ScheduledDirectTask.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L485570.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/a;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L485576.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4854e0.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Void;` @kind virtual;
  #L4854e6.  v0:= temp @kind object;
  #L4854e8.  return v0 @kind object;
}
procedure `java.lang.Void` `call`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.call:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485518.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48551e.  v0:= temp @kind object;
  #L485520.  v3.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L485524.  v0:= 0I;
  #L485526.  v1:= v3.`io.reactivex.internal.schedulers.a.runnable` @type ^`java.lang.Runnable` @kind object;
  #L48552a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L485530.  v1:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L485534.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48553a.  v3.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L48553e.  return v0 @kind object;
  #L485540.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L485542.  v2:= `@@io.reactivex.internal.schedulers.a.FINISHED` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L485546.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48554c.  v3.`io.reactivex.internal.schedulers.a.runner` @type ^`java.lang.Thread` := v0 @kind object;
  #L485550.  throw v1;
  catch `java.lang.Throwable` @[L485526..L485530] goto L485540;
}
procedure `java.lang.Runnable` `getWrappedRunnable`(`io.reactivex.internal.schedulers.ScheduledDirectTask` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.getWrappedRunnable:()Ljava/lang/Runnable;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4854fc.  call temp:= `getWrappedRunnable`(v1) @signature `Lio/reactivex/internal/schedulers/a;.getWrappedRunnable:()Ljava/lang/Runnable;` @kind super;
  #L485502.  v0:= temp @kind object;
  #L485504.  return v0 @kind object;
}
