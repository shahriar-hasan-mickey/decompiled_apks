record `io.reactivex.internal.schedulers.ScheduledRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `java.lang.Runnable` @kind interface, `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ScheduledRunnable.a` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.ScheduledRunnable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4855d4.  v0:= new `java.lang.Object`;
  #L4855d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4855de.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4855e2.  v0:= new `java.lang.Object`;
  #L4855e6.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4855ec.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4855f0.  v0:= new `java.lang.Object`;
  #L4855f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4855fa.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` := v0 @kind object;
  #L4855fe.  v0:= new `java.lang.Object`;
  #L485602.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L485608.  `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` := v0 @kind object;
  #L48560c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this, `java.lang.Runnable` v2 @kind object, `io.reactivex.internal.disposables.DisposableContainer` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/DisposableContainer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L485620.  v0:= 3I;
  #L485622.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L485628.  v1.`io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` := v2 @kind object;
  #L48562c.  v2:= 0I;
  #L48562e.  call `lazySet`(v1, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L485634.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.ScheduledRunnable` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4855b8.  call `run`(v1) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @kind virtual;
  #L4855be.  v0:= 0I;
  #L4855c0.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L485648.  v0:= 1I;
  #L48564a.  call temp:= `get`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L485650.  v1:= temp @kind object;
  #L485652.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L485656.  v3:= 0I;
  #L485658.  if v1 == v2 then goto L4856b2;
  #L48565c.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L485660.  if v1 == v2 then goto L4856b2;
  #L485664.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L485668.  if v1 != v2 then goto L48566e;
  #L48566c.  goto L4856b2;
  #L48566e.  v2:= 2I;
  #L485670.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L485676.  v2:= temp @kind object;
  #L485678.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48567e.  v4:= temp @kind object;
  #L485680.  if v2 == v4 then goto L485688;
  #L485684.  v2:= 1I;
  #L485686.  goto L48568a;
  #L485688.  v2:= 0I;
  #L48568a.  if v2 == 0 then goto L485694;
  #L48568e.  v4:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L485692.  goto L485698;
  #L485694.  v4:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L485698.  call temp:= `compareAndSet`(v5, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48569e.  v0:= temp;
  #L4856a0.  if v0 == 0 then goto L485648;
  #L4856a4.  if v1 == 0 then goto L4856b2;
  #L4856a8.  v1:= (`java.util.concurrent.Future`) v1 @kind object;
  #L4856ac.  call temp:= `cancel`(v1, v2) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4856b2.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4856b8.  v0:= temp @kind object;
  #L4856ba.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4856be.  if v0 == v1 then goto L4856e6;
  #L4856c2.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L4856c6.  if v0 == v1 then goto L4856e6;
  #L4856ca.  if v0 != 0 then goto L4856d0;
  #L4856ce.  goto L4856e6;
  #L4856d0.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4856d6.  v1:= temp;
  #L4856d8.  if v1 == 0 then goto L4856b2;
  #L4856dc.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L4856e0.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L4856e6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485588.  v0:= 0I;
  #L48558a.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L485590.  v1:= temp @kind object;
  #L485592.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L485596.  if v1 == v2 then goto L4855a2;
  #L48559a.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L48559e.  if v1 != v2 then goto L4855a4;
  #L4855a2.  v0:= 1I;
  #L4855a4.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ScheduledRunnable` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4856f8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4856fe.  v0:= temp @kind object;
  #L485700.  v1:= 2I;
  #L485702.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L485708.  v0:= 0I;
  #L48570a.  v2:= 1I;
  #L48570c.  v3:= 0I;
  #L48570e.  v4:= v5.`io.reactivex.internal.schedulers.ScheduledRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L485712.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L485718.  goto L485722;
  #L48571a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48571c.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L485722.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L485728.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L48572e.  v0:= temp @kind object;
  #L485730.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L485734.  if v0 == v1 then goto L485756;
  #L485738.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L48573c.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485742.  v1:= temp;
  #L485744.  if v1 == 0 then goto L485756;
  #L485748.  if v0 == 0 then goto L485756;
  #L48574c.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L485750.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L485756.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L48575c.  v0:= temp @kind object;
  #L48575e.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L485762.  if v0 == v1 then goto L48577e;
  #L485766.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L48576a.  if v0 == v1 then goto L48577e;
  #L48576e.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L485772.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485778.  v0:= temp;
  #L48577a.  if v0 == 0 then goto L485756;
  #L48577e.  return @kind void;
  #L485780.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L485782.  call `lazySet`(v5, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L485788.  call temp:= `get`(v5, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L48578e.  v0:= temp @kind object;
  #L485790.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.b` @type ^`java.lang.Object` @kind object;
  #L485794.  if v0 == v1 then goto L4857b6;
  #L485798.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L48579c.  call temp:= `compareAndSet`(v5, v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4857a2.  v1:= temp;
  #L4857a4.  if v1 == 0 then goto L4857b6;
  #L4857a8.  if v0 == 0 then goto L4857b6;
  #L4857ac.  v0:= (`io.reactivex.internal.disposables.DisposableContainer`) v0 @kind object;
  #L4857b0.  call temp:= `delete`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L4857b6.  call temp:= `get`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4857bc.  v0:= temp @kind object;
  #L4857be.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L4857c2.  if v0 == v1 then goto L4857e0;
  #L4857c6.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L4857ca.  if v0 == v1 then goto L4857e0;
  #L4857ce.  v1:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L4857d2.  call temp:= `compareAndSet`(v5, v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4857d8.  v0:= temp;
  #L4857da.  if v0 != 0 then goto L4857e0;
  #L4857de.  goto L4857b6;
  #L4857e0.  throw v4;
  catch `java.lang.Throwable` @[L48570e..L485718] goto L48571a;
  catch `java.lang.Throwable` @[L48571c..L485722] goto L485780;
}
procedure `void` `setFuture`(`io.reactivex.internal.schedulers.ScheduledRunnable` v3 @kind this, `java.util.concurrent.Future` v4 @kind object) @signature `Lio/reactivex/internal/schedulers/ScheduledRunnable;.setFuture:(Ljava/util/concurrent/Future;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48580c.  v0:= 1I;
  #L48580e.  call temp:= `get`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L485814.  v1:= temp @kind object;
  #L485816.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.e` @type ^`java.lang.Object` @kind object;
  #L48581a.  if v1 != v2 then goto L485820;
  #L48581e.  return @kind void;
  #L485820.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.c` @type ^`java.lang.Object` @kind object;
  #L485824.  if v1 != v2 then goto L485832;
  #L485828.  v0:= 0I;
  #L48582a.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L485830.  return @kind void;
  #L485832.  v2:= `@@io.reactivex.internal.schedulers.ScheduledRunnable.d` @type ^`java.lang.Object` @kind object;
  #L485836.  if v1 != v2 then goto L485842;
  #L48583a.  call temp:= `cancel`(v4, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L485840.  return @kind void;
  #L485842.  call temp:= `compareAndSet`(v3, v0, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.compareAndSet:(ILjava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L485848.  v0:= temp;
  #L48584a.  if v0 == 0 then goto L48580c;
  #L48584e.  return @kind void;
}
