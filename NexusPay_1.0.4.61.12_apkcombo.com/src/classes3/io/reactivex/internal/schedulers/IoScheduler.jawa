record `io.reactivex.internal.schedulers.IoScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.IoScheduler.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.IoScheduler.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.schedulers.IoScheduler.KEEP_ALIVE_TIME_DEFAULT` @AccessFlag PUBLIC_STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.IoScheduler.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.IoScheduler.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.schedulers.IoScheduler.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.TimeUnit` `@@io.reactivex.internal.schedulers.IoScheduler.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.internal.schedulers.IoScheduler$c` `@@io.reactivex.internal.schedulers.IoScheduler.i` @AccessFlag STATIC_FINAL;
global `boolean` `@@io.reactivex.internal.schedulers.IoScheduler.j` @AccessFlag STATIC;
global `io.reactivex.internal.schedulers.IoScheduler$a` `@@io.reactivex.internal.schedulers.IoScheduler.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L484e3c.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L484e40.  `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`java.util.concurrent.TimeUnit` := v0 @kind object;
  #L484e44.  v0:= "rx2.io-keep-alive-time" @kind object;
  #L484e48.  v1:= 60L;
  #L484e4c.  call temp:= `getLong`(v0, v1) @signature `Ljava/lang/Long;.getLong:(Ljava/lang/String;J)Ljava/lang/Long;` @kind static;
  #L484e52.  v0:= temp @kind object;
  #L484e54.  call temp:= `longValue`(v0) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L484e5a.  v0:= temp @kind wide;
  #L484e5c.  `@@io.reactivex.internal.schedulers.IoScheduler.g` @type ^`long` := v0 @kind wide;
  #L484e60.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$c`;
  #L484e64.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L484e68.  v2:= "RxCachedThreadSchedulerShutdown" @kind object;
  #L484e6c.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L484e72.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L484e78.  `@@io.reactivex.internal.schedulers.IoScheduler.i` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` := v0 @kind object;
  #L484e7c.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L484e82.  v0:= "rx2.io-priority" @kind object;
  #L484e86.  v1:= 5I;
  #L484e88.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L484e8e.  v0:= temp @kind object;
  #L484e90.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L484e96.  v0:= temp;
  #L484e98.  v1:= 10I;
  #L484e9c.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L484ea2.  v0:= temp;
  #L484ea4.  v1:= 1I;
  #L484ea6.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L484eac.  v0:= temp;
  #L484eae.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L484eb2.  v2:= "RxCachedThreadScheduler" @kind object;
  #L484eb6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L484ebc.  `@@io.reactivex.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L484ec0.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L484ec4.  v2:= "RxCachedWorkerPoolEvictor" @kind object;
  #L484ec8.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L484ece.  `@@io.reactivex.internal.schedulers.IoScheduler.f` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L484ed2.  v0:= "rx2.io-scheduled-release" @kind object;
  #L484ed6.  call temp:= `getBoolean`(v0) @signature `Ljava/lang/Boolean;.getBoolean:(Ljava/lang/String;)Z` @kind static;
  #L484edc.  v0:= temp;
  #L484ede.  `@@io.reactivex.internal.schedulers.IoScheduler.j` @type ^`boolean` := v0 @kind boolean;
  #L484ee2.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$a`;
  #L484ee6.  v1:= `@@io.reactivex.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L484eea.  v2:= 0L;
  #L484eee.  v4:= 0I;
  #L484ef0.  call `<init>`(v0, v2, v4, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L484ef6.  `@@io.reactivex.internal.schedulers.IoScheduler.k` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` := v0 @kind object;
  #L484efa.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L484f00.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L484f14.  v0:= `@@io.reactivex.internal.schedulers.IoScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L484f18.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L484f1e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L484f30.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L484f36.  v1.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L484f3a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L484f3e.  v0:= `@@io.reactivex.internal.schedulers.IoScheduler.k` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L484f42.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L484f48.  v1.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L484f4c.  call `start`(v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.start:()V` @kind virtual;
  #L484f52.  return @kind void;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.IoScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484e10.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$b`;
  #L484e14.  v1:= v2.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484e18.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L484e1e.  v1:= temp @kind object;
  #L484e20.  v1:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v1 @kind object;
  #L484e24.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.<init>:(Lio/reactivex/internal/schedulers/IoScheduler$a;)V` @kind direct;
  #L484e2a.  return v0 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.IoScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484f64.  v0:= v3.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484f68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L484f6e.  v0:= temp @kind object;
  #L484f70.  v0:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L484f74.  v1:= `@@io.reactivex.internal.schedulers.IoScheduler.k` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L484f78.  if v0 != v1 then goto L484f7e;
  #L484f7c.  return @kind void;
  #L484f7e.  v2:= v3.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484f82.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L484f88.  v1:= temp;
  #L484f8a.  if v1 == 0 then goto L484f64;
  #L484f8e.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L484f94.  return @kind void;
}
procedure `int` `size`(`io.reactivex.internal.schedulers.IoScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484de0.  v0:= v1.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484de4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L484dea.  v0:= temp @kind object;
  #L484dec.  v0:= (`io.reactivex.internal.schedulers.IoScheduler$a`) v0 @kind object;
  #L484df0.  v0:= v0.`io.reactivex.internal.schedulers.IoScheduler$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484df4.  call temp:= `size`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L484dfa.  v0:= temp;
  #L484dfc.  return v0;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.IoScheduler` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L484fa8.  v0:= new `io.reactivex.internal.schedulers.IoScheduler$a`;
  #L484fac.  v1:= `@@io.reactivex.internal.schedulers.IoScheduler.g` @type ^`long` @kind wide;
  #L484fb0.  v3:= `@@io.reactivex.internal.schedulers.IoScheduler.h` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L484fb4.  v4:= v5.`io.reactivex.internal.schedulers.IoScheduler.c` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L484fb8.  call `<init>`(v0, v1, v3, v4) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.<init>:(JLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L484fbe.  v1:= v5.`io.reactivex.internal.schedulers.IoScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484fc2.  v2:= `@@io.reactivex.internal.schedulers.IoScheduler.k` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L484fc6.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L484fcc.  v1:= temp;
  #L484fce.  if v1 != 0 then goto L484fd8;
  #L484fd2.  call `e`(v0) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.e:()V` @kind virtual;
  #L484fd8.  return @kind void;
}
