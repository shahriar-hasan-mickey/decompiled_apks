record `io.reactivex.internal.schedulers.IoScheduler$b` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class, `java.lang.Runnable` @kind interface {
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.schedulers.IoScheduler$b.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.IoScheduler$a` `io.reactivex.internal.schedulers.IoScheduler$b.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.IoScheduler$c` `io.reactivex.internal.schedulers.IoScheduler$b.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.schedulers.IoScheduler$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.IoScheduler$b` v1 @kind this, `io.reactivex.internal.schedulers.IoScheduler$a` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.<init>:(Lio/reactivex/internal/schedulers/IoScheduler$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L484ccc.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L484cd2.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L484cd6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L484cdc.  v1.`io.reactivex.internal.schedulers.IoScheduler$b.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L484ce0.  v1.`io.reactivex.internal.schedulers.IoScheduler$b.b` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` := v2 @kind object;
  #L484ce4.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L484ce8.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L484cee.  v1.`io.reactivex.internal.schedulers.IoScheduler$b.a` @type ^`io.reactivex.disposables.CompositeDisposable` := v0 @kind object;
  #L484cf2.  call temp:= `b`(v2) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.b:()Lio/reactivex/internal/schedulers/IoScheduler$c;` @kind virtual;
  #L484cf8.  v2:= temp @kind object;
  #L484cfa.  v1.`io.reactivex.internal.schedulers.IoScheduler$b.c` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` := v2 @kind object;
  #L484cfe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.IoScheduler$b` v7 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L484d10.  v0:= v7.`io.reactivex.internal.schedulers.IoScheduler$b.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L484d14.  v1:= 0I;
  #L484d16.  v2:= 1I;
  #L484d18.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L484d1e.  v0:= temp;
  #L484d20.  if v0 == 0 then goto L484d5c;
  #L484d24.  v0:= v7.`io.reactivex.internal.schedulers.IoScheduler$b.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484d28.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L484d2e.  v0:= `@@io.reactivex.internal.schedulers.IoScheduler.j` @type ^`boolean` @kind boolean;
  #L484d32.  if v0 == 0 then goto L484d4e;
  #L484d36.  v1:= v7.`io.reactivex.internal.schedulers.IoScheduler$b.c` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` @kind object;
  #L484d3a.  v3:= 0L;
  #L484d3e.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L484d42.  v6:= 0I;
  #L484d44.  v2:= v7 @kind object;
  #L484d46.  call temp:= `scheduleActual`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/internal/disposables/DisposableContainer;)Lio/reactivex/internal/schedulers/ScheduledRunnable;` @kind virtual;
  #L484d4c.  goto L484d5c;
  #L484d4e.  v0:= v7.`io.reactivex.internal.schedulers.IoScheduler$b.b` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L484d52.  v1:= v7.`io.reactivex.internal.schedulers.IoScheduler$b.c` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` @kind object;
  #L484d56.  call `d`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.d:(Lio/reactivex/internal/schedulers/IoScheduler$c;)V` @kind virtual;
  #L484d5c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.IoScheduler$b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L484c6c.  v0:= v1.`io.reactivex.internal.schedulers.IoScheduler$b.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L484c70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L484c76.  v0:= temp;
  #L484c78.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.IoScheduler$b` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484d70.  v0:= v2.`io.reactivex.internal.schedulers.IoScheduler$b.b` @type ^`io.reactivex.internal.schedulers.IoScheduler$a` @kind object;
  #L484d74.  v1:= v2.`io.reactivex.internal.schedulers.IoScheduler$b.c` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` @kind object;
  #L484d78.  call `d`(v0, v1) @signature `Lio/reactivex/internal/schedulers/IoScheduler$a;.d:(Lio/reactivex/internal/schedulers/IoScheduler$c;)V` @kind virtual;
  #L484d7e.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.IoScheduler$b` v6 @kind this, `java.lang.Runnable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/internal/schedulers/IoScheduler$b;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L484c8c.  v0:= v6.`io.reactivex.internal.schedulers.IoScheduler$b.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484c90.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L484c96.  v0:= temp;
  #L484c98.  if v0 == 0 then goto L484ca2;
  #L484c9c.  v7:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L484ca0.  return v7 @kind object;
  #L484ca2.  v0:= v6.`io.reactivex.internal.schedulers.IoScheduler$b.c` @type ^`io.reactivex.internal.schedulers.IoScheduler$c` @kind object;
  #L484ca6.  v5:= v6.`io.reactivex.internal.schedulers.IoScheduler$b.a` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L484caa.  v1:= v7 @kind object;
  #L484cac.  v2:= v8 @kind wide;
  #L484cae.  v4:= v10 @kind object;
  #L484cb0.  call temp:= `scheduleActual`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.scheduleActual:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/internal/disposables/DisposableContainer;)Lio/reactivex/internal/schedulers/ScheduledRunnable;` @kind virtual;
  #L484cb6.  v7:= temp @kind object;
  #L484cb8.  return v7 @kind object;
}
