record `io.reactivex.internal.schedulers.SchedulerWhen$a` @kind class @AccessFlag FINAL extends `io.reactivex.functions.Function` @kind interface {
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.schedulers.SchedulerWhen$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$a` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.<init>:(Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L485bf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L485bfa.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$a.a` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L485bfe.  return @kind void;
}
procedure `io.reactivex.Completable` `a`(`io.reactivex.internal.schedulers.SchedulerWhen$a` v1 @kind this, `io.reactivex.internal.schedulers.SchedulerWhen$f` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.a:(Lio/reactivex/internal/schedulers/SchedulerWhen$f;)Lio/reactivex/Completable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485bb8.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$a$a`;
  #L485bbc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a$a;.<init>:(Lio/reactivex/internal/schedulers/SchedulerWhen$a;Lio/reactivex/internal/schedulers/SchedulerWhen$f;)V` @kind direct;
  #L485bc2.  return v0 @kind object;
}
procedure `java.lang.Object` `apply`(`io.reactivex.internal.schedulers.SchedulerWhen$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L485bd4.  v1:= (`io.reactivex.internal.schedulers.SchedulerWhen$f`) v1 @kind object;
  #L485bd8.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$a;.a:(Lio/reactivex/internal/schedulers/SchedulerWhen$f;)Lio/reactivex/Completable;` @kind virtual;
  #L485bde.  v1:= temp @kind object;
  #L485be0.  return v1 @kind object;
}
