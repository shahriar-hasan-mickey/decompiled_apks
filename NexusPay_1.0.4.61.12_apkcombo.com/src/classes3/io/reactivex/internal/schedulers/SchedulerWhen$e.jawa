record `io.reactivex.internal.schedulers.SchedulerWhen$e` @kind class @AccessFlag FINAL extends `io.reactivex.Scheduler$Worker` @kind class {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.schedulers.SchedulerWhen$e.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.schedulers.SchedulerWhen$e.b` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.schedulers.SchedulerWhen$e.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerWhen$e` v0 @kind this, `io.reactivex.processors.FlowableProcessor` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.<init>:(Lio/reactivex/processors/FlowableProcessor;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L485d78.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler$Worker;.<init>:()V` @kind direct;
  #L485d7e.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$e.b` @type ^`io.reactivex.processors.FlowableProcessor` := v1 @kind object;
  #L485d82.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$e.c` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L485d86.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L485d8a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L485d90.  v0.`io.reactivex.internal.schedulers.SchedulerWhen$e.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L485d94.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.SchedulerWhen$e` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485da8.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$e.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485dac.  v1:= 0I;
  #L485dae.  v2:= 1I;
  #L485db0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L485db6.  v0:= temp;
  #L485db8.  if v0 == 0 then goto L485dd0;
  #L485dbc.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$e.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L485dc0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L485dc6.  v0:= v3.`io.reactivex.internal.schedulers.SchedulerWhen$e.c` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L485dca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L485dd0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.SchedulerWhen$e` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485d08.  v0:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$e.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L485d0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L485d12.  v0:= temp;
  #L485d14.  return v0;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.SchedulerWhen$e` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485d28.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$c`;
  #L485d2c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$c;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L485d32.  v2:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$e.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L485d36.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L485d3c.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedule`(`io.reactivex.internal.schedulers.SchedulerWhen$e` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$e;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L485d50.  v0:= new `io.reactivex.internal.schedulers.SchedulerWhen$b`;
  #L485d54.  call `<init>`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/SchedulerWhen$b;.<init>:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L485d5a.  v2:= v1.`io.reactivex.internal.schedulers.SchedulerWhen$e.b` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L485d5e.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L485d64.  return v0 @kind object;
}
