record `io.reactivex.internal.schedulers.SchedulerPoolFactory$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SchedulerPoolFactory$a` v0 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L485860.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L485866.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.SchedulerPoolFactory$a` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L485878.  v0:= new `java.util.ArrayList`;
  #L48587c.  v1:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L485880.  call temp:= `keySet`(v1) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L485886.  v1:= temp @kind object;
  #L485888.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L48588e.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayList;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L485894.  v0:= temp @kind object;
  #L485896.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48589c.  v1:= temp;
  #L48589e.  if v1 == 0 then goto L4858ce;
  #L4858a2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4858a8.  v1:= temp @kind object;
  #L4858aa.  v1:= (`java.util.concurrent.ScheduledThreadPoolExecutor`) v1 @kind object;
  #L4858ae.  call temp:= `isShutdown`(v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.isShutdown:()Z` @kind virtual;
  #L4858b4.  v2:= temp;
  #L4858b6.  if v2 == 0 then goto L4858c6;
  #L4858ba.  v2:= `@@io.reactivex.internal.schedulers.SchedulerPoolFactory.b` @type ^`java.util.Map` @kind object;
  #L4858be.  call temp:= `remove`(v2, v1) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4858c4.  goto L485896;
  #L4858c6.  call `purge`(v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.purge:()V` @kind virtual;
  #L4858cc.  goto L485896;
  #L4858ce.  return @kind void;
}
