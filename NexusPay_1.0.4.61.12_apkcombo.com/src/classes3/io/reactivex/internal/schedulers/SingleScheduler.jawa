record `io.reactivex.internal.schedulers.SingleScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.SingleScheduler.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.SingleScheduler.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.SingleScheduler.e` @AccessFlag STATIC_FINAL;
global `java.util.concurrent.ScheduledExecutorService` `@@io.reactivex.internal.schedulers.SingleScheduler.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4862b8.  v0:= 0I;
  #L4862ba.  call temp:= `newScheduledThreadPool`(v0) @signature `Ljava/util/concurrent/Executors;.newScheduledThreadPool:(I)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4862c0.  v0:= temp @kind object;
  #L4862c2.  `@@io.reactivex.internal.schedulers.SingleScheduler.f` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L4862c6.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L4862cc.  v0:= "rx2.single-priority" @kind object;
  #L4862d0.  v1:= 5I;
  #L4862d2.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L4862d8.  v0:= temp @kind object;
  #L4862da.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4862e0.  v0:= temp;
  #L4862e2.  v1:= 10I;
  #L4862e6.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4862ec.  v0:= temp;
  #L4862ee.  v1:= 1I;
  #L4862f0.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4862f6.  v0:= temp;
  #L4862f8.  v2:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L4862fc.  v3:= "RxSingleScheduler" @kind object;
  #L486300.  call `<init>`(v2, v3, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L486306.  `@@io.reactivex.internal.schedulers.SingleScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v2 @kind object;
  #L48630a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48631c.  v0:= `@@io.reactivex.internal.schedulers.SingleScheduler.e` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L486320.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L486326.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.SingleScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L486338.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L48633e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L486342.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L486348.  v1.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L48634c.  v1.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L486350.  call temp:= `b`(v2) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.b:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L486356.  v2:= temp @kind object;
  #L486358.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L48635e.  return @kind void;
}
procedure `java.util.concurrent.ScheduledExecutorService` `b`(`java.util.concurrent.ThreadFactory` v0 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.b:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC {
    temp;

  #L48629c.  call temp:= `create`(v0) @signature `Lio/reactivex/internal/schedulers/SchedulerPoolFactory;.create:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4862a2.  v0:= temp @kind object;
  #L4862a4.  return v0 @kind object;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48611c.  v0:= new `io.reactivex.internal.schedulers.SingleScheduler$a`;
  #L486120.  v1:= v2.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L486124.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48612a.  v1:= temp @kind object;
  #L48612c.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L486130.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/SingleScheduler$a;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;)V` @kind direct;
  #L486136.  return v0 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this, `java.lang.Runnable` v4 @kind object, `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L486148.  v0:= new `io.reactivex.internal.schedulers.ScheduledDirectTask`;
  #L48614c.  call temp:= `onSchedule`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L486152.  v4:= temp @kind object;
  #L486154.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L48615a.  v1:= 0L;
  #L48615e.  v4:= lcmp(v5, v1);
  #L486162.  if v4 > 0 then goto L486180;
  #L486166.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48616a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486170.  v4:= temp @kind object;
  #L486172.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L486176.  call temp:= `submit`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L48617c.  v4:= temp @kind object;
  #L48617e.  goto L486198;
  #L486180.  v4:= v3.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L486184.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48618a.  v4:= temp @kind object;
  #L48618c.  v4:= (`java.util.concurrent.ScheduledExecutorService`) v4 @kind object;
  #L486190.  call temp:= `schedule`(v4, v0, v5, v7) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L486196.  v4:= temp @kind object;
  #L486198.  call `setFuture`(v0, v4) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L48619e.  return v0 @kind object;
  #L4861a0.  v4:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L4861a2.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4861a8.  v4:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L4861ac.  return v4 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L486166..L48619e] goto L4861a0;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.internal.schedulers.SingleScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4861d0.  call temp:= `onSchedule`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onSchedule:(Ljava/lang/Runnable;)Ljava/lang/Runnable;` @kind static;
  #L4861d6.  v9:= temp @kind object;
  #L4861d8.  v0:= 0L;
  #L4861dc.  v2:= lcmp(v12, v0);
  #L4861e0.  if v2 > 0 then goto L48622e;
  #L4861e4.  v12:= v8.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4861e8.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4861ee.  v12:= temp @kind object;
  #L4861f0.  v12:= (`java.util.concurrent.ScheduledExecutorService`) v12 @kind object;
  #L4861f4.  v13:= new `io.reactivex.internal.schedulers.c`;
  #L4861f8.  call `<init>`(v13, v9, v12) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @kind direct;
  #L4861fe.  v9:= lcmp(v10, v0);
  #L486202.  if v9 > 0 then goto L486210;
  #L486206.  call temp:= `submit`(v12, v13) @signature `Ljava/util/concurrent/ScheduledExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L48620c.  v9:= temp @kind object;
  #L48620e.  goto L486218;
  #L486210.  call temp:= `schedule`(v12, v13, v10, v14) @signature `Ljava/util/concurrent/ScheduledExecutorService;.schedule:(Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L486216.  v9:= temp @kind object;
  #L486218.  call `b`(v13, v9) @signature `Lio/reactivex/internal/schedulers/c;.b:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L48621e.  return v13 @kind object;
  #L486220.  v9:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L486222.  call `onError`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L486228.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L48622c.  return v9 @kind object;
  #L48622e.  v7:= new `io.reactivex.internal.schedulers.ScheduledDirectPeriodicTask`;
  #L486232.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/schedulers/ScheduledDirectPeriodicTask;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L486238.  v9:= v8.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48623c.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L486242.  v9:= temp @kind object;
  #L486244.  v0:= v9 @kind object;
  #L486246.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L48624a.  v1:= v7 @kind object;
  #L48624c.  v2:= v10 @kind wide;
  #L48624e.  v4:= v12 @kind wide;
  #L486250.  v6:= v14 @kind object;
  #L486252.  call temp:= `scheduleAtFixedRate`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L486258.  v9:= temp @kind object;
  #L48625a.  call `setFuture`(v7, v9) @signature `Lio/reactivex/internal/schedulers/a;.setFuture:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L486260.  return v7 @kind object;
  #L486262.  v9:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L486264.  call `onError`(v9) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48626a.  v9:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L48626e.  return v9 @kind object;
  catch `java.util.concurrent.RejectedExecutionException` @[L486206..L48621e] goto L486220;
  catch `java.util.concurrent.RejectedExecutionException` @[L486238..L486260] goto L486262;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.SingleScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L486370.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L486374.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48637a.  v0:= temp @kind object;
  #L48637c.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L486380.  v1:= `@@io.reactivex.internal.schedulers.SingleScheduler.f` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L486384.  if v0 == v1 then goto L4863a6;
  #L486388.  v0:= v2.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48638c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L486392.  v0:= temp @kind object;
  #L486394.  v0:= (`java.util.concurrent.ScheduledExecutorService`) v0 @kind object;
  #L486398.  v1:= `@@io.reactivex.internal.schedulers.SingleScheduler.f` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L48639c.  if v0 == v1 then goto L4863a6;
  #L4863a0.  call temp:= `shutdownNow`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdownNow:()Ljava/util/List;` @kind interface;
  #L4863a6.  return @kind void;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.SingleScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4863b8.  v0:= 0I;
  #L4863ba.  v1:= v3.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4863be.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4863c4.  v1:= temp @kind object;
  #L4863c6.  v1:= (`java.util.concurrent.ScheduledExecutorService`) v1 @kind object;
  #L4863ca.  v2:= `@@io.reactivex.internal.schedulers.SingleScheduler.f` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L4863ce.  if v1 == v2 then goto L4863de;
  #L4863d2.  if v0 == 0 then goto L4863dc;
  #L4863d6.  call `shutdown`(v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L4863dc.  return @kind void;
  #L4863de.  if v0 != 0 then goto L4863ee;
  #L4863e2.  v0:= v3.`io.reactivex.internal.schedulers.SingleScheduler.c` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L4863e6.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/schedulers/SingleScheduler;.b:(Ljava/util/concurrent/ThreadFactory;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L4863ec.  v0:= temp @kind object;
  #L4863ee.  v2:= v3.`io.reactivex.internal.schedulers.SingleScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4863f2.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4863f8.  v1:= temp;
  #L4863fa.  if v1 == 0 then goto L4863ba;
  #L4863fe.  return @kind void;
}
