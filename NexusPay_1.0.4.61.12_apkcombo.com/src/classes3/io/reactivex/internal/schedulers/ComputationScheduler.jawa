record `io.reactivex.internal.schedulers.ComputationScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class, `io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport` @kind interface {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.ComputationScheduler.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.ComputationScheduler.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.ComputationScheduler$b` `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @AccessFlag STATIC_FINAL;
global `int` `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.schedulers.ComputationScheduler$c` `@@io.reactivex.internal.schedulers.ComputationScheduler.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L483bc0.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L483bc6.  v0:= temp @kind object;
  #L483bc8.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L483bce.  v0:= temp;
  #L483bd0.  v1:= "rx2.computation-threads" @kind object;
  #L483bd4.  v2:= 0I;
  #L483bd6.  call temp:= `getInteger`(v1, v2) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L483bdc.  v1:= temp @kind object;
  #L483bde.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L483be4.  v1:= temp;
  #L483be6.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.b:(II)I` @kind static;
  #L483bec.  v0:= temp;
  #L483bee.  `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @type ^`int` := v0;
  #L483bf2.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`;
  #L483bf6.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L483bfa.  v3:= "RxComputationShutdown" @kind object;
  #L483bfe.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L483c04.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L483c0a.  `@@io.reactivex.internal.schedulers.ComputationScheduler.h` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c` := v0 @kind object;
  #L483c0e.  call `dispose`(v0) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L483c14.  v0:= "rx2.computation-priority" @kind object;
  #L483c18.  v1:= 5I;
  #L483c1a.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L483c20.  v0:= temp @kind object;
  #L483c22.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L483c28.  v0:= temp;
  #L483c2a.  v1:= 10I;
  #L483c2e.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L483c34.  v0:= temp;
  #L483c36.  v1:= 1I;
  #L483c38.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L483c3e.  v0:= temp;
  #L483c40.  v3:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L483c44.  v4:= "RxComputationThreadPool" @kind object;
  #L483c48.  call `<init>`(v3, v4, v0, v1) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;IZ)V` @kind direct;
  #L483c4e.  `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v3 @kind object;
  #L483c52.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$b`;
  #L483c56.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L483c5c.  `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` := v0 @kind object;
  #L483c60.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L483c66.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L483c78.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.f` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L483c7c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L483c82.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this, `java.util.concurrent.ThreadFactory` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L483c94.  call `<init>`(v1) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L483c9a.  v1.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.ThreadFactory` := v2 @kind object;
  #L483c9e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L483ca2.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L483ca6.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L483cac.  v1.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L483cb0.  call `start`(v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.start:()V` @kind virtual;
  #L483cb6.  return @kind void;
}
procedure `int` `b`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.b:(II)I` @AccessFlag STATIC {
    temp;

  #L483afc.  if v1 <= 0 then goto L483b08;
  #L483b00.  if v1 <= v0 then goto L483b06;
  #L483b04.  goto L483b08;
  #L483b06.  v0:= v1;
  #L483b08.  return v0;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.ComputationScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L483b1c.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$a`;
  #L483b20.  v1:= v2.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483b24.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483b2a.  v1:= temp @kind object;
  #L483b2c.  v1:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v1 @kind object;
  #L483b30.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L483b36.  v1:= temp @kind object;
  #L483b38.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L483b3e.  return v0 @kind object;
}
procedure `void` `createWorkers`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this, `int` v2 , `io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.createWorkers:(ILio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483cc8.  v0:= "number > 0 required" @kind object;
  #L483ccc.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L483cd2.  v0:= v1.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483cd6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483cdc.  v0:= temp @kind object;
  #L483cde.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L483ce2.  call `createWorkers`(v0, v2, v3) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.createWorkers:(ILio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @kind virtual;
  #L483ce8.  return @kind void;
}
procedure `io.reactivex.disposables.Disposable` `scheduleDirect`(`io.reactivex.internal.schedulers.ComputationScheduler` v1 @kind this, `java.lang.Runnable` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483b50.  v0:= v1.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483b54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483b5a.  v0:= temp @kind object;
  #L483b5c.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L483b60.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L483b66.  v0:= temp @kind object;
  #L483b68.  call temp:= `scheduleDirect`(v0, v2, v3, v5) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L483b6e.  v2:= temp @kind object;
  #L483b70.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `schedulePeriodicallyDirect`(`io.reactivex.internal.schedulers.ComputationScheduler` v8 @kind this, `java.lang.Runnable` v9 @kind object, `long` v10 , `long` v12 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L483b84.  v0:= v8.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483b88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483b8e.  v0:= temp @kind object;
  #L483b90.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L483b94.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @kind virtual;
  #L483b9a.  v1:= temp @kind object;
  #L483b9c.  v2:= v9 @kind object;
  #L483b9e.  v3:= v10 @kind wide;
  #L483ba0.  v5:= v12 @kind wide;
  #L483ba2.  v7:= v14 @kind object;
  #L483ba4.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L483baa.  v9:= temp @kind object;
  #L483bac.  return v9 @kind object;
}
procedure `void` `shutdown`(`io.reactivex.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.shutdown:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L483cfc.  v0:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483d00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L483d06.  v0:= temp @kind object;
  #L483d08.  v0:= (`io.reactivex.internal.schedulers.ComputationScheduler$b`) v0 @kind object;
  #L483d0c.  v1:= `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L483d10.  if v0 != v1 then goto L483d16;
  #L483d14.  return @kind void;
  #L483d16.  v2:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483d1a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L483d20.  v1:= temp;
  #L483d22.  if v1 == 0 then goto L483cfc;
  #L483d26.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L483d2c.  return @kind void;
}
procedure `void` `start`(`io.reactivex.internal.schedulers.ComputationScheduler` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L483d40.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$b`;
  #L483d44.  v1:= `@@io.reactivex.internal.schedulers.ComputationScheduler.g` @type ^`int`;
  #L483d48.  v2:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.c` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L483d4c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L483d52.  v1:= v3.`io.reactivex.internal.schedulers.ComputationScheduler.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L483d56.  v2:= `@@io.reactivex.internal.schedulers.ComputationScheduler.e` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$b` @kind object;
  #L483d5a.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L483d60.  v1:= temp;
  #L483d62.  if v1 != 0 then goto L483d6c;
  #L483d66.  call `b`(v0) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @kind virtual;
  #L483d6c.  return @kind void;
}
