record `io.reactivex.internal.schedulers.NewThreadScheduler` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Scheduler` @kind class {
  `java.util.concurrent.ThreadFactory` `io.reactivex.internal.schedulers.NewThreadScheduler.c` @AccessFlag FINAL;
}
global `io.reactivex.internal.schedulers.RxThreadFactory` `@@io.reactivex.internal.schedulers.NewThreadScheduler.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L48500c.  v0:= "rx2.newthread-priority" @kind object;
  #L485010.  v1:= 5I;
  #L485012.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L485018.  v0:= temp @kind object;
  #L48501a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L485020.  v0:= temp;
  #L485022.  v1:= 10I;
  #L485026.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L48502c.  v0:= temp;
  #L48502e.  v1:= 1I;
  #L485030.  call temp:= `max`(v1, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L485036.  v0:= temp;
  #L485038.  v1:= new `io.reactivex.internal.schedulers.RxThreadFactory`;
  #L48503c.  v2:= "RxNewThreadScheduler" @kind object;
  #L485040.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/schedulers/RxThreadFactory;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L485046.  `@@io.reactivex.internal.schedulers.NewThreadScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` := v1 @kind object;
  #L48504a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.NewThreadScheduler` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48505c.  v0:= `@@io.reactivex.internal.schedulers.NewThreadScheduler.d` @type ^`io.reactivex.internal.schedulers.RxThreadFactory` @kind object;
  #L485060.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L485066.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.NewThreadScheduler` v0 @kind this, `java.util.concurrent.ThreadFactory` v1 @kind object) @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L485078.  call `<init>`(v0) @signature `Lio/reactivex/Scheduler;.<init>:()V` @kind direct;
  #L48507e.  v0.`io.reactivex.internal.schedulers.NewThreadScheduler.c` @type ^`java.util.concurrent.ThreadFactory` := v1 @kind object;
  #L485082.  return @kind void;
}
procedure `io.reactivex.Scheduler$Worker` `createWorker`(`io.reactivex.internal.schedulers.NewThreadScheduler` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/NewThreadScheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484fec.  v0:= new `io.reactivex.internal.schedulers.NewThreadWorker`;
  #L484ff0.  v1:= v2.`io.reactivex.internal.schedulers.NewThreadScheduler.c` @type ^`java.util.concurrent.ThreadFactory` @kind object;
  #L484ff4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L484ffa.  return v0 @kind object;
}
