record `io.reactivex.internal.schedulers.TrampolineScheduler$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.TrampolineScheduler$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.schedulers.TrampolineScheduler$c` `io.reactivex.internal.schedulers.TrampolineScheduler$a.b` @AccessFlag PRIVATE_FINAL;
  `long` `io.reactivex.internal.schedulers.TrampolineScheduler$a.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.TrampolineScheduler$a` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.schedulers.TrampolineScheduler$c` v2 @kind object, `long` v3 ) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$a;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/schedulers/TrampolineScheduler$c;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L486410.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L486416.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$a.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L48641a.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$a.b` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$c` := v2 @kind object;
  #L48641e.  v0.`io.reactivex.internal.schedulers.TrampolineScheduler$a.c` @type ^`long` := v3 @kind wide;
  #L486422.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.TrampolineScheduler$a` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/TrampolineScheduler$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L486434.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$a.b` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$c` @kind object;
  #L486438.  v0:= v0.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L48643c.  if v0 != 0 then goto L486494;
  #L486440.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$a.b` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$c` @kind object;
  #L486444.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L486448.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L48644e.  v0:= temp @kind wide;
  #L486450.  v2:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$a.c` @type ^`long` @kind wide;
  #L486454.  v4:= lcmp(v2, v0);
  #L486458.  if v4 <= 0 then goto L48647e;
  #L48645c.  v2:= v2 - v0 @kind long;
  #L48645e.  call `sleep`(v2) @signature `Ljava/lang/Thread;.sleep:(J)V` @kind static;
  #L486464.  goto L48647e;
  #L486466.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L486468.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48646e.  v1:= temp @kind object;
  #L486470.  call `interrupt`(v1) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L486476.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48647c.  return @kind void;
  #L48647e.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$a.b` @type ^`io.reactivex.internal.schedulers.TrampolineScheduler$c` @kind object;
  #L486482.  v0:= v0.`io.reactivex.internal.schedulers.TrampolineScheduler$c.d` @type ^`boolean` @kind boolean;
  #L486486.  if v0 != 0 then goto L486494;
  #L48648a.  v0:= v5.`io.reactivex.internal.schedulers.TrampolineScheduler$a.a` @type ^`java.lang.Runnable` @kind object;
  #L48648e.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L486494.  return @kind void;
  catch `java.lang.InterruptedException` @[L48645e..L486464] goto L486466;
}
