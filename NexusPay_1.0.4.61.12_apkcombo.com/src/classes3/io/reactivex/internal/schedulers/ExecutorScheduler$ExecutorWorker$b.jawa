record `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.DisposableContainer` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v0 @kind this, `java.lang.Runnable` v1 @kind object, `io.reactivex.internal.disposables.DisposableContainer` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.<init>:(Ljava/lang/Runnable;Lio/reactivex/internal/disposables/DisposableContainer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L484050.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L484056.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L48405a.  v0.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.internal.disposables.DisposableContainer` := v2 @kind object;
  #L48405e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L484070.  v0:= v1.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.b` @type ^`io.reactivex.internal.disposables.DisposableContainer` @kind object;
  #L484074.  if v0 == 0 then goto L48407e;
  #L484078.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableContainer;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind interface;
  #L48407e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v3 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L484090.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L484096.  v0:= temp;
  #L484098.  v1:= 2I;
  #L48409a.  if v0 < v1 then goto L4840a0;
  #L48409e.  goto L4840ec;
  #L4840a0.  v1:= 4I;
  #L4840a2.  if v0 != 0 then goto L4840bc;
  #L4840a6.  v0:= 0I;
  #L4840a8.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4840ae.  v0:= temp;
  #L4840b0.  if v0 == 0 then goto L484090;
  #L4840b4.  call `a`(v3) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4840ba.  goto L4840ec;
  #L4840bc.  v0:= 1I;
  #L4840be.  v2:= 3I;
  #L4840c0.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4840c6.  v0:= temp;
  #L4840c8.  if v0 == 0 then goto L484090;
  #L4840cc.  v0:= v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` @kind object;
  #L4840d0.  if v0 == 0 then goto L4840e0;
  #L4840d4.  call `interrupt`(v0) @signature `Ljava/lang/Thread;.interrupt:()V` @kind virtual;
  #L4840da.  v0:= 0I;
  #L4840dc.  v3.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L4840e0.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L4840e6.  call `a`(v3) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4840ec.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484028.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48402e.  v0:= temp;
  #L484030.  v1:= 2I;
  #L484032.  if v0 < v1 then goto L48403a;
  #L484036.  v0:= 1I;
  #L484038.  goto L48403c;
  #L48403a.  v0:= 0I;
  #L48403c.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L484100.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L484106.  v0:= temp;
  #L484108.  if v0 != 0 then goto L4841a6;
  #L48410c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L484112.  v0:= temp @kind object;
  #L484114.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v0 @kind object;
  #L484118.  v0:= 0I;
  #L48411a.  v1:= 1I;
  #L48411c.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L484122.  v0:= temp;
  #L484124.  v2:= 0I;
  #L484126.  if v0 == 0 then goto L4841a2;
  #L48412a.  v0:= 3I;
  #L48412c.  v3:= 2I;
  #L48412e.  v4:= v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.a` @type ^`java.lang.Runnable` @kind object;
  #L484132.  call `run`(v4) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L484138.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L48413c.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L484142.  v1:= temp;
  #L484144.  if v1 == 0 then goto L484150;
  #L484148.  call `a`(v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L48414e.  goto L4841a6;
  #L484150.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L484156.  v1:= temp;
  #L484158.  if v1 != v0 then goto L484164;
  #L48415c.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L484162.  goto L484150;
  #L484164.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L48416a.  goto L4841a6;
  #L48416c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48416e.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L484172.  call temp:= `compareAndSet`(v5, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L484178.  v1:= temp;
  #L48417a.  if v1 != 0 then goto L48419a;
  #L48417e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L484184.  v1:= temp;
  #L484186.  if v1 != v0 then goto L484192;
  #L48418a.  call `yield`() @signature `Ljava/lang/Thread;.yield:()V` @kind static;
  #L484190.  goto L48417e;
  #L484192.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L484198.  goto L4841a0;
  #L48419a.  call `a`(v5) @signature `Lio/reactivex/internal/schedulers/ExecutorScheduler$ExecutorWorker$b;.a:()V` @kind virtual;
  #L4841a0.  throw v4;
  #L4841a2.  v5.`io.reactivex.internal.schedulers.ExecutorScheduler$ExecutorWorker$b.c` @type ^`java.lang.Thread` := v2 @kind object;
  #L4841a6.  return @kind void;
  catch `java.lang.Throwable` @[L48412e..L484138] goto L48416c;
}
