record `io.reactivex.internal.schedulers.c` @kind class @AccessFlag FINAL extends `java.util.concurrent.Callable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Runnable` `io.reactivex.internal.schedulers.c.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.schedulers.c.c` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `io.reactivex.internal.schedulers.c.d` @AccessFlag FINAL;
  `java.lang.Thread` `io.reactivex.internal.schedulers.c.e` @AccessFlag ;
}
global `java.util.concurrent.FutureTask` `@@io.reactivex.internal.schedulers.c.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/schedulers/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4848c4.  v0:= new `java.util.concurrent.FutureTask`;
  #L4848c8.  v1:= `@@io.reactivex.internal.functions.Functions.EMPTY_RUNNABLE` @type ^`java.lang.Runnable` @kind object;
  #L4848cc.  v2:= 0I;
  #L4848ce.  call `<init>`(v0, v1, v2) @signature `Ljava/util/concurrent/FutureTask;.<init>:(Ljava/lang/Runnable;Ljava/lang/Object;)V` @kind direct;
  #L4848d4.  `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` := v0 @kind object;
  #L4848d8.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.c` v0 @kind this, `java.lang.Runnable` v1 @kind object, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lio/reactivex/internal/schedulers/c;.<init>:(Ljava/lang/Runnable;Ljava/util/concurrent/ExecutorService;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4848ec.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4848f2.  v0.`io.reactivex.internal.schedulers.c.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L4848f6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4848fa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L484900.  v0.`io.reactivex.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L484904.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L484908.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48490e.  v0.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L484912.  v0.`io.reactivex.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` := v2 @kind object;
  #L484916.  return @kind void;
}
procedure `java.lang.Void` `a`(`io.reactivex.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484868.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L48486e.  v0:= temp @kind object;
  #L484870.  v2.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L484874.  v0:= 0I;
  #L484876.  v1:= v2.`io.reactivex.internal.schedulers.c.a` @type ^`java.lang.Runnable` @kind object;
  #L48487a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L484880.  v1:= v2.`io.reactivex.internal.schedulers.c.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L484884.  call temp:= `submit`(v1, v2) @signature `Ljava/util/concurrent/ExecutorService;.submit:(Ljava/util/concurrent/Callable;)Ljava/util/concurrent/Future;` @kind interface;
  #L48488a.  v1:= temp @kind object;
  #L48488c.  call `c`(v2, v1) @signature `Lio/reactivex/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @kind virtual;
  #L484892.  v2.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L484896.  goto L4848a4;
  #L484898.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48489a.  v2.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` := v0 @kind object;
  #L48489e.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4848a4.  return v0 @kind object;
  catch `java.lang.Throwable` @[L484876..L484896] goto L484898;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/c;.b:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4849b4.  v0:= v2.`io.reactivex.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4849b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4849be.  v0:= temp @kind object;
  #L4849c0.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L4849c4.  v1:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L4849c8.  if v0 != v1 then goto L4849ea;
  #L4849cc.  v0:= v2.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L4849d0.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L4849d6.  v1:= temp @kind object;
  #L4849d8.  if v0 == v1 then goto L4849e0;
  #L4849dc.  v0:= 1I;
  #L4849de.  goto L4849e2;
  #L4849e0.  v0:= 0I;
  #L4849e2.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4849e8.  return @kind void;
  #L4849ea.  v1:= v2.`io.reactivex.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4849ee.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4849f4.  v0:= temp;
  #L4849f6.  if v0 == 0 then goto L4849b4;
  #L4849fa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.schedulers.c` v2 @kind this, `java.util.concurrent.Future` v3 @kind object) @signature `Lio/reactivex/internal/schedulers/c;.c:(Ljava/util/concurrent/Future;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L484a0c.  v0:= v2.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484a10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L484a16.  v0:= temp @kind object;
  #L484a18.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L484a1c.  v1:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484a20.  if v0 != v1 then goto L484a42;
  #L484a24.  v0:= v2.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L484a28.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L484a2e.  v1:= temp @kind object;
  #L484a30.  if v0 == v1 then goto L484a38;
  #L484a34.  v0:= 1I;
  #L484a36.  goto L484a3a;
  #L484a38.  v0:= 0I;
  #L484a3a.  call temp:= `cancel`(v3, v0) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L484a40.  return @kind void;
  #L484a42.  v1:= v2.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484a46.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L484a4c.  v0:= temp;
  #L484a4e.  if v0 == 0 then goto L484a0c;
  #L484a52.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.schedulers.c` v1 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L48484c.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/schedulers/c;.a:()Ljava/lang/Void;` @kind virtual;
  #L484852.  v0:= temp @kind object;
  #L484854.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.schedulers.c` v5 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L484928.  v0:= v5.`io.reactivex.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48492c.  v1:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484930.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L484936.  v0:= temp @kind object;
  #L484938.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L48493c.  v1:= 1I;
  #L48493e.  v2:= 0I;
  #L484940.  if v0 == 0 then goto L484968;
  #L484944.  v3:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484948.  if v0 == v3 then goto L484968;
  #L48494c.  v3:= v5.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L484950.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L484956.  v4:= temp @kind object;
  #L484958.  if v3 == v4 then goto L484960;
  #L48495c.  v3:= 1I;
  #L48495e.  goto L484962;
  #L484960.  v3:= 0I;
  #L484962.  call temp:= `cancel`(v0, v3) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L484968.  v0:= v5.`io.reactivex.internal.schedulers.c.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L48496c.  v3:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484970.  call temp:= `getAndSet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L484976.  v0:= temp @kind object;
  #L484978.  v0:= (`java.util.concurrent.Future`) v0 @kind object;
  #L48497c.  if v0 == 0 then goto L4849a2;
  #L484980.  v3:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484984.  if v0 == v3 then goto L4849a2;
  #L484988.  v3:= v5.`io.reactivex.internal.schedulers.c.e` @type ^`java.lang.Thread` @kind object;
  #L48498c.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L484992.  v4:= temp @kind object;
  #L484994.  if v3 == v4 then goto L48499a;
  #L484998.  goto L48499c;
  #L48499a.  v1:= 0I;
  #L48499c.  call temp:= `cancel`(v0, v1) @signature `Ljava/util/concurrent/Future;.cancel:(Z)Z` @kind interface;
  #L4849a2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.schedulers.c` v2 @kind this) @signature `Lio/reactivex/internal/schedulers/c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L484820.  v0:= v2.`io.reactivex.internal.schedulers.c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L484824.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48482a.  v0:= temp @kind object;
  #L48482c.  v1:= `@@io.reactivex.internal.schedulers.c.f` @type ^`java.util.concurrent.FutureTask` @kind object;
  #L484830.  if v0 != v1 then goto L484838;
  #L484834.  v0:= 1I;
  #L484836.  goto L48483a;
  #L484838.  v0:= 0I;
  #L48483a.  return v0;
}
