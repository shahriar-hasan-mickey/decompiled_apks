record `io.reactivex.internal.schedulers.ComputationScheduler$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport` @kind interface {
  `int` `io.reactivex.internal.schedulers.ComputationScheduler$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.schedulers.ComputationScheduler$c`[] `io.reactivex.internal.schedulers.ComputationScheduler$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.schedulers.ComputationScheduler$b.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v3 @kind this, `int` v4 , `java.util.concurrent.ThreadFactory` v5 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L483a04.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L483a0a.  v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.a` @type ^`int` := v4;
  #L483a0e.  v0:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`[v4];
  #L483a12.  v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] := v0 @kind object;
  #L483a16.  v0:= 0I;
  #L483a18.  if v0 >= v4 then goto L483a34;
  #L483a1c.  v1:= v3.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L483a20.  v2:= new `io.reactivex.internal.schedulers.ComputationScheduler$c`;
  #L483a24.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$c;.<init>:(Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L483a2a.  v1[v0]:= v2 @kind object;
  #L483a2e.  v0:= v0 + 1;
  #L483a32.  goto L483a18;
  #L483a34.  return @kind void;
}
procedure `io.reactivex.internal.schedulers.ComputationScheduler$c` `a`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v6 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.a:()Lio/reactivex/internal/schedulers/ComputationScheduler$c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4839c8.  v0:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.a` @type ^`int`;
  #L4839cc.  if v0 != 0 then goto L4839d6;
  #L4839d0.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.h` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c` @kind object;
  #L4839d4.  return v0 @kind object;
  #L4839d6.  v1:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L4839da.  v2:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` @kind wide;
  #L4839de.  v4:= 1L;
  #L4839e2.  v4:= v4 + v2 @kind long;
  #L4839e4.  v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` := v4 @kind wide;
  #L4839e8.  v4:= (`long`) v0 @kind i2l;
  #L4839ea.  v2:= v2 %% v4 @kind long;
  #L4839ec.  v0:= (`int`) v2 @kind l2i;
  #L4839ee.  v0:= v1[v0] @kind object;
  #L4839f2.  return v0 @kind object;
}
procedure `void` `b`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v4 @kind this) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L483ab4.  v0:= v4.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L483ab8.  v1:= length @variable v0;
  #L483aba.  v2:= 0I;
  #L483abc.  if v2 >= v1 then goto L483ad0;
  #L483ac0.  v3:= v0[v2] @kind object;
  #L483ac4.  call `dispose`(v3) @signature `Lio/reactivex/internal/schedulers/NewThreadWorker;.dispose:()V` @kind virtual;
  #L483aca.  v2:= v2 + 1;
  #L483ace.  goto L483abc;
  #L483ad0.  return @kind void;
}
procedure `void` `createWorkers`(`io.reactivex.internal.schedulers.ComputationScheduler$b` v6 @kind this, `int` v7 , `io.reactivex.internal.schedulers.SchedulerMultiWorkerSupport$WorkerCallback` v8 @kind object) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$b;.createWorkers:(ILio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L483a48.  v0:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.a` @type ^`int`;
  #L483a4c.  v1:= 0I;
  #L483a4e.  if v0 != 0 then goto L483a66;
  #L483a52.  if v1 >= v7 then goto L483aa2;
  #L483a56.  v0:= `@@io.reactivex.internal.schedulers.ComputationScheduler.h` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c` @kind object;
  #L483a5a.  call `onWorker`(v8, v1, v0) @signature `Lio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;.onWorker:(ILio/reactivex/Scheduler$Worker;)V` @kind interface;
  #L483a60.  v1:= v1 + 1;
  #L483a64.  goto L483a52;
  #L483a66.  v2:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` @kind wide;
  #L483a6a.  v3:= (`int`) v2 @kind l2i;
  #L483a6c.  v3:= v3 %% v0 @kind int;
  #L483a6e.  v2:= 0I;
  #L483a70.  if v2 >= v7 then goto L483a9c;
  #L483a74.  v4:= new `io.reactivex.internal.schedulers.ComputationScheduler$a`;
  #L483a78.  v5:= v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.b` @type ^`io.reactivex.internal.schedulers.ComputationScheduler$c`[] @kind object;
  #L483a7c.  v5:= v5[v3] @kind object;
  #L483a80.  call `<init>`(v4, v5) @signature `Lio/reactivex/internal/schedulers/ComputationScheduler$a;.<init>:(Lio/reactivex/internal/schedulers/ComputationScheduler$c;)V` @kind direct;
  #L483a86.  call `onWorker`(v8, v2, v4) @signature `Lio/reactivex/internal/schedulers/SchedulerMultiWorkerSupport$WorkerCallback;.onWorker:(ILio/reactivex/Scheduler$Worker;)V` @kind interface;
  #L483a8c.  v3:= v3 + 1;
  #L483a90.  if v3 != v0 then goto L483a96;
  #L483a94.  v3:= 0I;
  #L483a96.  v2:= v2 + 1;
  #L483a9a.  goto L483a70;
  #L483a9c.  v7:= (`long`) v3 @kind i2l;
  #L483a9e.  v6.`io.reactivex.internal.schedulers.ComputationScheduler$b.c` @type ^`long` := v7 @kind wide;
  #L483aa2.  return @kind void;
}
