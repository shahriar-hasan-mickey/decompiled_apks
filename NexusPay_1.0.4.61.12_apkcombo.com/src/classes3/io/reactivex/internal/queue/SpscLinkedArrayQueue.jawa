record `io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.fuseable.SimplePlainQueue` @kind interface {
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscLinkedArrayQueue.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.b` @AccessFlag ;
  `long` `io.reactivex.internal.queue.SpscLinkedArrayQueue.c` @AccessFlag ;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @AccessFlag ;
  `int` `io.reactivex.internal.queue.SpscLinkedArrayQueue.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscLinkedArrayQueue.h` @AccessFlag FINAL;
}
global `int` `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.i` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L483570.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L483574.  v1:= 4096I;
  #L483578.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L48357e.  v0:= temp @kind object;
  #L483580.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L483586.  v0:= temp;
  #L483588.  `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.i` @type ^`int` := v0;
  #L48358c.  v0:= new `java.lang.Object`;
  #L483590.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L483596.  `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @type ^`java.lang.Object` := v0 @kind object;
  #L48359a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4835ac.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4835b2.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4835b6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4835bc.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.a` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4835c0.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4835c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4835ca.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4835ce.  v0:= 8I;
  #L4835d2.  call temp:= `max`(v0, v4) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L4835d8.  v4:= temp;
  #L4835da.  call temp:= `roundToPowerOfTwo`(v4) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L4835e0.  v4:= temp;
  #L4835e2.  v0:= v4 + -1;
  #L4835e6.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4835ea.  v2:= v4 + 1;
  #L4835ee.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4835f4.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L4835f8.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.d` @type ^`int` := v0;
  #L4835fc.  call `a`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.a:(I)V` @kind direct;
  #L483602.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L483606.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.f` @type ^`int` := v0;
  #L48360a.  v0:= v0 + -1;
  #L48360e.  v0:= (`long`) v0 @kind i2l;
  #L483610.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.c` @type ^`long` := v0 @kind wide;
  #L483614.  v0:= 0L;
  #L483618.  call `s`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @kind direct;
  #L48361e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L483630.  v2:= v2 / 4;
  #L483634.  v0:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.i` @type ^`int`;
  #L483638.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L48363e.  v2:= temp;
  #L483640.  v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.b` @type ^`int` := v2;
  #L483644.  return @kind void;
}
procedure `int` `e`(`int` v0 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.e:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L483308.  return v0;
}
procedure `int` `f`(`long` v0 , `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @AccessFlag PRIVATE_STATIC {
    temp;

  #L48331c.  v1:= (`int`) v0 @kind l2i;
  #L48331e.  v0:= v1 ^& v2 @kind int;
  #L483322.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.e:(I)I` @kind static;
  #L483328.  return v0;
}
procedure `long` `g`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.g:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4834f0.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4834f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4834fa.  v0:= temp @kind wide;
  #L4834fc.  return v0 @kind wide;
}
procedure `long` `h`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.h:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483510.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L483514.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48351a.  v0:= temp @kind wide;
  #L48351c.  return v0 @kind wide;
}
procedure `long` `i`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.i:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483530.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L483534.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48353a.  v0:= temp @kind wide;
  #L48353c.  return v0 @kind wide;
}
procedure `java.lang.Object` `j`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;

  #L483378.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L48337e.  v0:= temp @kind object;
  #L483380.  return v0 @kind object;
}
procedure `java.util.concurrent.atomic.AtomicReferenceArray` `k`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4834c4.  call temp:= `e`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.e:(I)I` @kind static;
  #L4834ca.  call temp:= `j`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L4834d0.  v0:= temp @kind object;
  #L4834d2.  v0:= (`java.util.concurrent.atomic.AtomicReferenceArray`) v0 @kind object;
  #L4834d6.  v1:= 0I;
  #L4834d8.  call `q`(v3, v4, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4834de.  return v0 @kind object;
}
procedure `long` `l`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.l:()J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L483550.  v0:= v2.`io.reactivex.internal.queue.SpscLinkedArrayQueue.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L483554.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48355a.  v0:= temp @kind wide;
  #L48355c.  return v0 @kind wide;
}
procedure `java.lang.Object` `m`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;

  #L483394.  v0.`io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L483398.  call temp:= `f`(v2, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L48339e.  v2:= temp;
  #L4833a0.  call temp:= `j`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L4833a6.  v1:= temp @kind object;
  #L4833a8.  return v1 @kind object;
}
procedure `java.lang.Object` `n`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v4 @kind object, `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L4833bc.  v3.`io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v4 @kind object;
  #L4833c0.  call temp:= `f`(v5, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L4833c6.  v7:= temp;
  #L4833c8.  call temp:= `j`(v4, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L4833ce.  v0:= temp @kind object;
  #L4833d0.  if v0 == 0 then goto L4833e8;
  #L4833d4.  v1:= 0I;
  #L4833d6.  call `q`(v4, v7, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4833dc.  v1:= 1L;
  #L4833e0.  v5:= v5 + v1 @kind long;
  #L4833e2.  call `p`(v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.p:(J)V` @kind direct;
  #L4833e8.  return v0 @kind object;
}
procedure `void` `o`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v5 @kind object, `long` v6 , `int` v8 , `java.lang.Object` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.o:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L483684.  call temp:= `length`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L48368a.  v0:= temp;
  #L48368c.  v1:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L483690.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L483696.  v4.`io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v1 @kind object;
  #L48369a.  v10:= v10 + v6 @kind long;
  #L48369c.  v2:= 1L;
  #L4836a0.  v10:= v10 - v2 @kind long;
  #L4836a2.  v4.`io.reactivex.internal.queue.SpscLinkedArrayQueue.c` @type ^`long` := v10 @kind wide;
  #L4836a6.  call `q`(v1, v8, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4836ac.  call `r`(v4, v5, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.r:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L4836b2.  v9:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @type ^`java.lang.Object` @kind object;
  #L4836b6.  call `q`(v5, v8, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4836bc.  v6:= v6 + v2 @kind long;
  #L4836be.  call `s`(v4, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @kind direct;
  #L4836c4.  return @kind void;
}
procedure `void` `p`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.p:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L4836d8.  v0:= v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4836dc.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4836e2.  return @kind void;
}
procedure `void` `q`(`java.util.concurrent.atomic.AtomicReferenceArray` v0 @kind object, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L4836f4.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4836fa.  return @kind void;
}
procedure `void` `r`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v2 @kind object, `java.util.concurrent.atomic.AtomicReferenceArray` v3 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.r:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L48370c.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L483712.  v0:= temp;
  #L483714.  v0:= v0 + -1;
  #L483718.  call temp:= `e`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.e:(I)I` @kind static;
  #L48371e.  call `q`(v2, v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L483724.  return @kind void;
}
procedure `void` `s`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L483738.  v0:= v1.`io.reactivex.internal.queue.SpscLinkedArrayQueue.a` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L48373c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L483742.  return @kind void;
}
procedure `boolean` `t`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v0 @kind this, `java.util.concurrent.atomic.AtomicReferenceArray` v1 @kind object, `java.lang.Object` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.t:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @AccessFlag PRIVATE {
    temp;

  #L4832e0.  call `q`(v1, v5, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4832e6.  v1:= 1L;
  #L4832ea.  v3:= v3 + v1 @kind long;
  #L4832ec.  call `s`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @kind direct;
  #L4832f2.  v1:= 1I;
  #L4832f4.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L483658.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L48365e.  v0:= temp @kind object;
  #L483660.  if v0 != 0 then goto L483658;
  #L483664.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L48366a.  v0:= temp;
  #L48366c.  if v0 != 0 then goto L483672;
  #L483670.  goto L483658;
  #L483672.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v5 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L483148.  call temp:= `l`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.l:()J` @kind direct;
  #L48314e.  v0:= temp @kind wide;
  #L483150.  call temp:= `i`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.i:()J` @kind direct;
  #L483156.  v2:= temp @kind wide;
  #L483158.  v4:= lcmp(v0, v2);
  #L48315c.  if v4 != 0 then goto L483164;
  #L483160.  v0:= 1I;
  #L483162.  goto L483166;
  #L483164.  v0:= 0I;
  #L483166.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v10 @kind this, `java.lang.Object` v11 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L483178.  if v11 == 0 then goto L48321a;
  #L48317c.  v1:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L483180.  call temp:= `h`(v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.h:()J` @kind direct;
  #L483186.  v3:= temp @kind wide;
  #L483188.  v0:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.d` @type ^`int`;
  #L48318c.  call temp:= `f`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L483192.  v5:= temp;
  #L483194.  v6:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.c` @type ^`long` @kind wide;
  #L483198.  v2:= lcmp(v3, v6);
  #L48319c.  if v2 >= 0 then goto L4831ae;
  #L4831a0.  v0:= v10 @kind object;
  #L4831a2.  v2:= v11 @kind object;
  #L4831a4.  call temp:= `t`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.t:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L4831aa.  v11:= temp;
  #L4831ac.  return v11;
  #L4831ae.  v2:= v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.b` @type ^`int`;
  #L4831b2.  v6:= (`long`) v2 @kind i2l;
  #L4831b4.  v6:= v6 + v3 @kind long;
  #L4831b6.  call temp:= `f`(v6, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L4831bc.  v2:= temp;
  #L4831be.  call temp:= `j`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L4831c4.  v2:= temp @kind object;
  #L4831c6.  v8:= 1L;
  #L4831ca.  if v2 != 0 then goto L4831e2;
  #L4831ce.  v6:= v6 - v8 @kind long;
  #L4831d0.  v10.`io.reactivex.internal.queue.SpscLinkedArrayQueue.c` @type ^`long` := v6 @kind wide;
  #L4831d4.  v0:= v10 @kind object;
  #L4831d6.  v2:= v11 @kind object;
  #L4831d8.  call temp:= `t`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.t:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L4831de.  v11:= temp;
  #L4831e0.  return v11;
  #L4831e2.  v8:= v8 + v3 @kind long;
  #L4831e4.  call temp:= `f`(v8, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L4831ea.  v2:= temp;
  #L4831ec.  call temp:= `j`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L4831f2.  v2:= temp @kind object;
  #L4831f4.  if v2 != 0 then goto L483206;
  #L4831f8.  v0:= v10 @kind object;
  #L4831fa.  v2:= v11 @kind object;
  #L4831fc.  call temp:= `t`(v0, v1, v2, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.t:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/lang/Object;JI)Z` @kind direct;
  #L483202.  v11:= temp;
  #L483204.  return v11;
  #L483206.  v6:= (`long`) v0 @kind i2l;
  #L483208.  v0:= v10 @kind object;
  #L48320a.  v2:= v3 @kind wide;
  #L48320c.  v4:= v5;
  #L48320e.  v5:= v11 @kind object;
  #L483210.  call `o`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.o:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JILjava/lang/Object;J)V` @kind direct;
  #L483216.  v11:= 1I;
  #L483218.  return v11;
  #L48321a.  v11:= new `java.lang.NullPointerException`;
  #L48321e.  v0:= "Null is not a valid element" @kind object;
  #L483222.  call `<init>`(v11, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L483228.  throw v11;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48323c.  v0:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L483240.  call temp:= `l`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.l:()J` @kind direct;
  #L483246.  v1:= temp @kind wide;
  #L483248.  v3:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.d` @type ^`int`;
  #L48324c.  v4:= 2L;
  #L483250.  v4:= v4 + v1 @kind long;
  #L483252.  call temp:= `f`(v4, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L483258.  v6:= temp;
  #L48325a.  call temp:= `j`(v0, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L483260.  v6:= temp @kind object;
  #L483262.  if v6 != 0 then goto L483286;
  #L483266.  call temp:= `f`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L48326c.  v1:= temp;
  #L48326e.  v2:= v1 + 1;
  #L483272.  call `q`(v0, v2, v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L483278.  call `q`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L48327e.  call `s`(v8, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @kind direct;
  #L483284.  goto L4832ca;
  #L483286.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L48328c.  v6:= temp;
  #L48328e.  v7:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L483292.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L483298.  v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.e` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v7 @kind object;
  #L48329c.  call temp:= `f`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L4832a2.  v1:= temp;
  #L4832a4.  v2:= v1 + 1;
  #L4832a8.  call `q`(v7, v2, v10) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4832ae.  call `q`(v7, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4832b4.  call `r`(v8, v0, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.r:(Ljava/util/concurrent/atomic/AtomicReferenceArray;Ljava/util/concurrent/atomic/AtomicReferenceArray;)V` @kind direct;
  #L4832ba.  v9:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @type ^`java.lang.Object` @kind object;
  #L4832be.  call `q`(v0, v1, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L4832c4.  call `s`(v8, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.s:(J)V` @kind direct;
  #L4832ca.  v9:= 1I;
  #L4832cc.  return v9;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4833fc.  v0:= v6.`io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L483400.  call temp:= `g`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.g:()J` @kind direct;
  #L483406.  v1:= temp @kind wide;
  #L483408.  v3:= v6.`io.reactivex.internal.queue.SpscLinkedArrayQueue.f` @type ^`int`;
  #L48340c.  call temp:= `f`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L483412.  v4:= temp;
  #L483414.  call temp:= `j`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L48341a.  v4:= temp @kind object;
  #L48341c.  v5:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @type ^`java.lang.Object` @kind object;
  #L483420.  if v4 != v5 then goto L48343a;
  #L483424.  v4:= v3 + 1;
  #L483428.  call temp:= `k`(v6, v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L48342e.  v0:= temp @kind object;
  #L483430.  call temp:= `m`(v6, v0, v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.m:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L483436.  v0:= temp @kind object;
  #L483438.  return v0 @kind object;
  #L48343a.  return v4 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v8 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48344c.  v0:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.g` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L483450.  call temp:= `g`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.g:()J` @kind direct;
  #L483456.  v1:= temp @kind wide;
  #L483458.  v3:= v8.`io.reactivex.internal.queue.SpscLinkedArrayQueue.f` @type ^`int`;
  #L48345c.  call temp:= `f`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.f:(JI)I` @kind static;
  #L483462.  v4:= temp;
  #L483464.  call temp:= `j`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.j:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/lang/Object;` @kind static;
  #L48346a.  v5:= temp @kind object;
  #L48346c.  v6:= `@@io.reactivex.internal.queue.SpscLinkedArrayQueue.j` @type ^`java.lang.Object` @kind object;
  #L483470.  if v5 != v6 then goto L483478;
  #L483474.  v6:= 1I;
  #L483476.  goto L48347a;
  #L483478.  v6:= 0I;
  #L48347a.  v7:= 0I;
  #L48347c.  if v5 == 0 then goto L483498;
  #L483480.  if v6 != 0 then goto L483498;
  #L483484.  call `q`(v0, v4, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.q:(Ljava/util/concurrent/atomic/AtomicReferenceArray;ILjava/lang/Object;)V` @kind static;
  #L48348a.  v3:= 1L;
  #L48348e.  v1:= v1 + v3 @kind long;
  #L483490.  call `p`(v8, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.p:(J)V` @kind direct;
  #L483496.  return v5 @kind object;
  #L483498.  if v6 == 0 then goto L4834b2;
  #L48349c.  v4:= v3 + 1;
  #L4834a0.  call temp:= `k`(v8, v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.k:(Ljava/util/concurrent/atomic/AtomicReferenceArray;I)Ljava/util/concurrent/atomic/AtomicReferenceArray;` @kind direct;
  #L4834a6.  v0:= temp @kind object;
  #L4834a8.  call temp:= `n`(v8, v0, v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.n:(Ljava/util/concurrent/atomic/AtomicReferenceArray;JI)Ljava/lang/Object;` @kind direct;
  #L4834ae.  v0:= temp @kind object;
  #L4834b0.  return v0 @kind object;
  #L4834b2.  return v7 @kind object;
}
procedure `int` `size`(`io.reactivex.internal.queue.SpscLinkedArrayQueue` v7 @kind this) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L48333c.  call temp:= `i`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.i:()J` @kind direct;
  #L483342.  v0:= temp @kind wide;
  #L483344.  call temp:= `l`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.l:()J` @kind direct;
  #L48334a.  v2:= temp @kind wide;
  #L48334c.  call temp:= `i`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.i:()J` @kind direct;
  #L483352.  v4:= temp @kind wide;
  #L483354.  v6:= lcmp(v0, v4);
  #L483358.  if v6 != 0 then goto L483362;
  #L48335c.  v2:= v2 - v4 @kind long;
  #L48335e.  v0:= (`int`) v2 @kind l2i;
  #L483360.  return v0;
  #L483362.  v0:= v4 @kind wide;
  #L483364.  goto L483344;
}
