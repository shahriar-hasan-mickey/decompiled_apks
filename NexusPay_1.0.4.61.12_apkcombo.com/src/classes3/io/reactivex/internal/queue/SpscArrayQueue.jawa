record `io.reactivex.internal.queue.SpscArrayQueue` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.fuseable.SimplePlainQueue` @kind interface {
  `int` `io.reactivex.internal.queue.SpscArrayQueue.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.queue.SpscArrayQueue.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.queue.SpscArrayQueue.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.queue.SpscArrayQueue.e` @AccessFlag FINAL;
}
global `java.lang.Integer` `@@io.reactivex.internal.queue.SpscArrayQueue.f` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@io.reactivex.internal.queue.SpscArrayQueue.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48303c.  v0:= "jctools.spsc.max.lookahead.step" @kind object;
  #L483040.  v1:= 4096I;
  #L483044.  call temp:= `getInteger`(v0, v1) @signature `Ljava/lang/Integer;.getInteger:(Ljava/lang/String;I)Ljava/lang/Integer;` @kind static;
  #L48304a.  v0:= temp @kind object;
  #L48304c.  `@@io.reactivex.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` := v0 @kind object;
  #L483050.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L483064.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L48306a.  v0:= temp;
  #L48306c.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L483072.  call temp:= `length`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L483078.  v0:= temp;
  #L48307a.  v0:= v0 + -1;
  #L48307e.  v1.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int` := v0;
  #L483082.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L483086.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48308c.  v1.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L483090.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L483094.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48309a.  v1.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L48309e.  v2:= v2 / 4;
  #L4830a2.  v0:= `@@io.reactivex.internal.queue.SpscArrayQueue.f` @type ^`java.lang.Integer` @kind object;
  #L4830a6.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4830ac.  v0:= temp;
  #L4830ae.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L4830b4.  v2:= temp;
  #L4830b6.  v1.`io.reactivex.internal.queue.SpscArrayQueue.e` @type ^`int` := v2;
  #L4830ba.  return @kind void;
}
procedure `int` `a`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @AccessFlag  {
    temp;

  #L482fa4.  v2:= (`int`) v1 @kind l2i;
  #L482fa6.  v1:= v0.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L482faa.  v1:= v1 ^& v2 @kind int;
  #L482fac.  return v1;
}
procedure `void` `clear`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4830cc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4830d2.  v0:= temp @kind object;
  #L4830d4.  if v0 != 0 then goto L4830cc;
  #L4830d8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4830de.  v0:= temp;
  #L4830e0.  if v0 != 0 then goto L4830e6;
  #L4830e4.  goto L4830cc;
  #L4830e6.  return @kind void;
}
procedure `int` `e`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `long` v1 , `int` v3 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @AccessFlag  {
    temp;

  #L482fc0.  v2:= (`int`) v1 @kind l2i;
  #L482fc2.  v1:= v2 ^& v3 @kind int;
  #L482fc6.  return v1;
}
procedure `java.lang.Object` `f`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L482fd8.  call temp:= `get`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L482fde.  v1:= temp @kind object;
  #L482fe0.  return v1 @kind object;
}
procedure `void` `g`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.g:(J)V` @AccessFlag  {
    temp;
    v0;

  #L4830f8.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4830fc.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L483102.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;

  #L483114.  call `lazySet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L48311a.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.queue.SpscArrayQueue` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.i:(J)V` @AccessFlag  {
    temp;
    v0;

  #L48312c.  v0:= v1.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L483130.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L483136.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.queue.SpscArrayQueue` v5 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L482eac.  v0:= v5.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L482eb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L482eb6.  v0:= temp @kind wide;
  #L482eb8.  v2:= v5.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L482ebc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L482ec2.  v2:= temp @kind wide;
  #L482ec4.  v4:= lcmp(v0, v2);
  #L482ec8.  if v4 != 0 then goto L482ed0;
  #L482ecc.  v0:= 1I;
  #L482ece.  goto L482ed2;
  #L482ed0.  v0:= 0I;
  #L482ed2.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L482ee4.  if v8 == 0 then goto L482f54;
  #L482ee8.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.a` @type ^`int`;
  #L482eec.  v1:= v7.`io.reactivex.internal.queue.SpscArrayQueue.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L482ef0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L482ef6.  v1:= temp @kind wide;
  #L482ef8.  call temp:= `e`(v7, v1, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L482efe.  v3:= temp;
  #L482f00.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.c` @type ^`long` @kind wide;
  #L482f04.  v6:= lcmp(v1, v4);
  #L482f08.  if v6 < 0 then goto L482f3e;
  #L482f0c.  v4:= v7.`io.reactivex.internal.queue.SpscArrayQueue.e` @type ^`int`;
  #L482f10.  v4:= (`long`) v4 @kind i2l;
  #L482f12.  v4:= v4 + v1 @kind long;
  #L482f14.  call temp:= `e`(v7, v4, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.e:(JI)I` @kind virtual;
  #L482f1a.  v0:= temp;
  #L482f1c.  call temp:= `f`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L482f22.  v0:= temp @kind object;
  #L482f24.  if v0 != 0 then goto L482f2e;
  #L482f28.  v7.`io.reactivex.internal.queue.SpscArrayQueue.c` @type ^`long` := v4 @kind wide;
  #L482f2c.  goto L482f3e;
  #L482f2e.  call temp:= `f`(v7, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L482f34.  v0:= temp @kind object;
  #L482f36.  if v0 == 0 then goto L482f3e;
  #L482f3a.  v8:= 0I;
  #L482f3c.  return v8;
  #L482f3e.  call `h`(v7, v3, v8) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L482f44.  v3:= 1L;
  #L482f48.  v1:= v1 + v3 @kind long;
  #L482f4a.  call `i`(v7, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.i:(J)V` @kind virtual;
  #L482f50.  v8:= 1I;
  #L482f52.  return v8;
  #L482f54.  v8:= new `java.lang.NullPointerException`;
  #L482f58.  v0:= "Null is not a valid element" @kind object;
  #L482f5c.  call `<init>`(v8, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L482f62.  throw v8;
}
procedure `boolean` `offer`(`io.reactivex.internal.queue.SpscArrayQueue` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L482f74.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L482f7a.  v1:= temp;
  #L482f7c.  if v1 == 0 then goto L482f90;
  #L482f80.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L482f86.  v1:= temp;
  #L482f88.  if v1 == 0 then goto L482f90;
  #L482f8c.  v1:= 1I;
  #L482f8e.  goto L482f92;
  #L482f90.  v1:= 0I;
  #L482f92.  return v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.queue.SpscArrayQueue` v7 @kind this) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L482ff4.  v0:= v7.`io.reactivex.internal.queue.SpscArrayQueue.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L482ff8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L482ffe.  v0:= temp @kind wide;
  #L483000.  call temp:= `a`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.a:(J)I` @kind virtual;
  #L483006.  v2:= temp;
  #L483008.  call temp:= `f`(v7, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.f:(I)Ljava/lang/Object;` @kind virtual;
  #L48300e.  v3:= temp @kind object;
  #L483010.  v4:= 0I;
  #L483012.  if v3 != 0 then goto L483018;
  #L483016.  return v4 @kind object;
  #L483018.  v5:= 1L;
  #L48301c.  v0:= v0 + v5 @kind long;
  #L48301e.  call `g`(v7, v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.g:(J)V` @kind virtual;
  #L483024.  call `h`(v7, v2, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.h:(ILjava/lang/Object;)V` @kind virtual;
  #L48302a.  return v3 @kind object;
}
