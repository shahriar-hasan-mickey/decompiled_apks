record `io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind class @AccessFlag PUBLIC {
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L489570.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L489576.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int` := v1;
  #L48957a.  v1:= v1 + 1;
  #L48957e.  v1:= new `java.lang.Object`[v1];
  #L489582.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L489586.  v0.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L48958a.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lio/reactivex/Observer;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4894d0.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L4894d4.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L4894d8.  v2:= 0I;
  #L4894da.  if v0 == 0 then goto L48950c;
  #L4894de.  if v2 >= v1 then goto L489502;
  #L4894e2.  v3:= v0[v2] @kind object;
  #L4894e6.  if v3 != 0 then goto L4894ec;
  #L4894ea.  goto L489502;
  #L4894ec.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L4894f2.  v3:= temp;
  #L4894f4.  if v3 == 0 then goto L4894fc;
  #L4894f8.  v5:= 1I;
  #L4894fa.  return v5;
  #L4894fc.  v2:= v2 + 1;
  #L489500.  goto L4894de;
  #L489502.  v0:= v0[v1] @kind object;
  #L489506.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48950a.  goto L4894d8;
  #L48950c.  return v2;
}
procedure `boolean` `accept`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L489520.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L489524.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L489528.  v2:= 0I;
  #L48952a.  if v0 == 0 then goto L48955c;
  #L48952e.  if v2 >= v1 then goto L489552;
  #L489532.  v3:= v0[v2] @kind object;
  #L489536.  if v3 != 0 then goto L48953c;
  #L48953a.  goto L489552;
  #L48953c.  call temp:= `acceptFull`(v3, v5) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L489542.  v3:= temp;
  #L489544.  if v3 == 0 then goto L48954c;
  #L489548.  v5:= 1I;
  #L48954a.  return v5;
  #L48954c.  v2:= v2 + 1;
  #L489550.  goto L48952e;
  #L489552.  v0:= v0[v1] @kind object;
  #L489556.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L48955a.  goto L489528;
  #L48955c.  return v2;
}
procedure `void` `add`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L48959c.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L4895a0.  v1:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @type ^`int`;
  #L4895a4.  if v1 != v0 then goto L4895be;
  #L4895a8.  v1:= v0 + 1;
  #L4895ac.  v1:= new `java.lang.Object`[v1];
  #L4895b0.  v2:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L4895b4.  v2[v0]:= v1 @kind object;
  #L4895b8.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] := v1 @kind object;
  #L4895bc.  v1:= 0I;
  #L4895be.  v0:= v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.c` @type ^`java.lang.Object`[] @kind object;
  #L4895c2.  v0[v1]:= v4 @kind object;
  #L4895c6.  v1:= v1 + 1;
  #L4895ca.  v3.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.d` @type ^`int` := v1;
  #L4895ce.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` v5 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4895e0.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L4895e4.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L4895e8.  if v0 == 0 then goto L48961a;
  #L4895ec.  v2:= 0I;
  #L4895ee.  if v2 >= v1 then goto L489610;
  #L4895f2.  v3:= v0[v2] @kind object;
  #L4895f6.  if v3 != 0 then goto L4895fc;
  #L4895fa.  goto L489610;
  #L4895fc.  call temp:= `test`(v5, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L489602.  v3:= temp;
  #L489604.  if v3 == 0 then goto L48960a;
  #L489608.  return @kind void;
  #L48960a.  v2:= v2 + 1;
  #L48960e.  goto L4895ee;
  #L489610.  v0:= v0[v1] @kind object;
  #L489614.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L489618.  goto L4895e8;
  #L48961a.  return @kind void;
}
procedure `void` `forEachWhile`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v4 @kind this, `java.lang.Object` v5 @kind object, `io.reactivex.functions.BiPredicate` v6 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Ljava/lang/Object;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48962c.  v0:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L489630.  v1:= v4.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.a` @type ^`int`;
  #L489634.  v2:= 0I;
  #L489636.  if v2 >= v1 then goto L489658;
  #L48963a.  v3:= v0[v2] @kind object;
  #L48963e.  if v3 != 0 then goto L489644;
  #L489642.  return @kind void;
  #L489644.  call temp:= `test`(v6, v5, v3) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L48964a.  v3:= temp;
  #L48964c.  if v3 == 0 then goto L489652;
  #L489650.  return @kind void;
  #L489652.  v2:= v2 + 1;
  #L489656.  goto L489636;
  #L489658.  v0:= v0[v1] @kind object;
  #L48965c.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L489660.  goto L489634;
}
procedure `void` `setFirst`(`io.reactivex.internal.util.AppendOnlyLinkedArrayList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L489674.  v0:= v2.`io.reactivex.internal.util.AppendOnlyLinkedArrayList.b` @type ^`java.lang.Object`[] @kind object;
  #L489678.  v1:= 0I;
  #L48967a.  v0[v1]:= v3 @kind object;
  #L48967e.  return @kind void;
}
