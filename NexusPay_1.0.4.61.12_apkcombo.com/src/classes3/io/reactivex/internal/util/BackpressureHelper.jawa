record `io.reactivex.internal.util.BackpressureHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.BackpressureHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/BackpressureHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L489a4c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L489a52.  v0:= new `java.lang.IllegalStateException`;
  #L489a56.  v1:= "No instances!" @kind object;
  #L489a5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L489a60.  throw v0;
}
procedure `long` `add`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48983c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L489842.  v0:= temp @kind wide;
  #L489844.  v2:= 9223372036854775807L;
  #L48984e.  v4:= lcmp(v0, v2);
  #L489852.  if v4 != 0 then goto L489858;
  #L489856.  return v2 @kind wide;
  #L489858.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L48985e.  v2:= temp @kind wide;
  #L489860.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L489866.  v2:= temp;
  #L489868.  if v2 == 0 then goto L48983c;
  #L48986c.  return v0 @kind wide;
}
procedure `long` `addCancel`(`java.util.concurrent.atomic.AtomicLong` v5 @kind object, `long` v6 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L489880.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L489886.  v0:= temp @kind wide;
  #L489888.  v2:= -9223372036854775808L;
  #L48988c.  v4:= lcmp(v0, v2);
  #L489890.  if v4 != 0 then goto L489896;
  #L489894.  return v2 @kind wide;
  #L489896.  v2:= 9223372036854775807L;
  #L4898a0.  v4:= lcmp(v0, v2);
  #L4898a4.  if v4 != 0 then goto L4898aa;
  #L4898a8.  return v2 @kind wide;
  #L4898aa.  call temp:= `addCap`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L4898b0.  v2:= temp @kind wide;
  #L4898b2.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4898b8.  v2:= temp;
  #L4898ba.  if v2 == 0 then goto L489880;
  #L4898be.  return v0 @kind wide;
}
procedure `long` `addCap`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4898d0.  v1:= v1 + v3 @kind long;
  #L4898d2.  v3:= 0L;
  #L4898d6.  v0:= lcmp(v1, v3);
  #L4898da.  if v0 >= 0 then goto L4898e8;
  #L4898de.  v1:= 9223372036854775807L;
  #L4898e8.  return v1 @kind wide;
}
procedure `long` `multiplyCap`(`long` v7 , `long` v9 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4898fc.  v0:= v7 * v9 @kind long;
  #L489900.  v2:= v7 ^| v9 @kind long;
  #L489904.  v4:= 31I;
  #L489908.  v2:= v2 ^>> v4 @kind long;
  #L48990a.  v4:= 0L;
  #L48990e.  v6:= lcmp(v2, v4);
  #L489912.  if v6 == 0 then goto L48992e;
  #L489916.  v7:= v0 / v7 @kind long;
  #L48991a.  v2:= lcmp(v7, v9);
  #L48991e.  if v2 == 0 then goto L48992e;
  #L489922.  v7:= 9223372036854775807L;
  #L48992c.  return v7 @kind wide;
  #L48992e.  return v0 @kind wide;
}
procedure `long` `produced`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L489940.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L489946.  v0:= temp @kind wide;
  #L489948.  v2:= 9223372036854775807L;
  #L489952.  v4:= lcmp(v0, v2);
  #L489956.  if v4 != 0 then goto L48995c;
  #L48995a.  return v2 @kind wide;
  #L48995c.  v2:= v0 - v10 @kind long;
  #L489960.  v4:= 0L;
  #L489964.  v6:= lcmp(v2, v4);
  #L489968.  if v6 >= 0 then goto L4899a0;
  #L48996c.  v6:= new `java.lang.IllegalStateException`;
  #L489970.  v7:= new `java.lang.StringBuilder`;
  #L489974.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48997a.  v8:= "More produced than requested: " @kind object;
  #L48997e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489984.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48998a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L489990.  v2:= temp @kind object;
  #L489992.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L489998.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48999e.  v2:= v4 @kind wide;
  #L4899a0.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L4899a6.  v0:= temp;
  #L4899a8.  if v0 == 0 then goto L489940;
  #L4899ac.  return v2 @kind wide;
}
procedure `long` `producedCancel`(`java.util.concurrent.atomic.AtomicLong` v9 @kind object, `long` v10 ) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L4899c0.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4899c6.  v0:= temp @kind wide;
  #L4899c8.  v2:= -9223372036854775808L;
  #L4899cc.  v4:= lcmp(v0, v2);
  #L4899d0.  if v4 != 0 then goto L4899d6;
  #L4899d4.  return v2 @kind wide;
  #L4899d6.  v2:= 9223372036854775807L;
  #L4899e0.  v4:= lcmp(v0, v2);
  #L4899e4.  if v4 != 0 then goto L4899ea;
  #L4899e8.  return v2 @kind wide;
  #L4899ea.  v2:= v0 - v10 @kind long;
  #L4899ee.  v4:= 0L;
  #L4899f2.  v6:= lcmp(v2, v4);
  #L4899f6.  if v6 >= 0 then goto L489a2e;
  #L4899fa.  v6:= new `java.lang.IllegalStateException`;
  #L4899fe.  v7:= new `java.lang.StringBuilder`;
  #L489a02.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L489a08.  v8:= "More produced than requested: " @kind object;
  #L489a0c.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L489a12.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L489a18.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L489a1e.  v2:= temp @kind object;
  #L489a20.  call `<init>`(v6, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L489a26.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L489a2c.  v2:= v4 @kind wide;
  #L489a2e.  call temp:= `compareAndSet`(v9, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L489a34.  v0:= temp;
  #L489a36.  if v0 == 0 then goto L4899c0;
  #L489a3a.  return v2 @kind wide;
}
