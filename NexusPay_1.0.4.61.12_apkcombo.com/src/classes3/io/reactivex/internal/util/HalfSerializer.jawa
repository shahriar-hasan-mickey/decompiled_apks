record `io.reactivex.internal.util.HalfSerializer` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.HalfSerializer` v2 @kind this) @signature `Lio/reactivex/internal/util/HalfSerializer;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48a2a4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48a2aa.  v0:= new `java.lang.IllegalStateException`;
  #L48a2ae.  v1:= "No instances!" @kind object;
  #L48a2b2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48a2b8.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.Observer` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a2cc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48a2d2.  v1:= temp;
  #L48a2d4.  if v1 != 0 then goto L48a2f2;
  #L48a2d8.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a2de.  v1:= temp @kind object;
  #L48a2e0.  if v1 == 0 then goto L48a2ec;
  #L48a2e4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a2ea.  goto L48a2f2;
  #L48a2ec.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48a2f2.  return @kind void;
}
procedure `void` `onComplete`(`org.reactivestreams.Subscriber` v0 @kind object, `java.util.concurrent.atomic.AtomicInteger` v1 @kind object, `io.reactivex.internal.util.AtomicThrowable` v2 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L48a304.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48a30a.  v1:= temp;
  #L48a30c.  if v1 != 0 then goto L48a32a;
  #L48a310.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a316.  v1:= temp @kind object;
  #L48a318.  if v1 == 0 then goto L48a324;
  #L48a31c.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a322.  goto L48a32a;
  #L48a324.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48a32a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.Observer` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a33c.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48a342.  v0:= temp;
  #L48a344.  if v0 == 0 then goto L48a364;
  #L48a348.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48a34e.  v2:= temp;
  #L48a350.  if v2 != 0 then goto L48a36a;
  #L48a354.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a35a.  v2:= temp @kind object;
  #L48a35c.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a362.  goto L48a36a;
  #L48a364.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48a36a.  return @kind void;
}
procedure `void` `onError`(`org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Throwable` v2 @kind object, `java.util.concurrent.atomic.AtomicInteger` v3 @kind object, `io.reactivex.internal.util.AtomicThrowable` v4 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a37c.  call temp:= `addThrowable`(v4, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L48a382.  v0:= temp;
  #L48a384.  if v0 == 0 then goto L48a3a4;
  #L48a388.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L48a38e.  v2:= temp;
  #L48a390.  if v2 != 0 then goto L48a3aa;
  #L48a394.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a39a.  v2:= temp @kind object;
  #L48a39c.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a3a2.  goto L48a3aa;
  #L48a3a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48a3aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.Observer` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a3bc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48a3c2.  v0:= temp;
  #L48a3c4.  if v0 != 0 then goto L48a404;
  #L48a3c8.  v0:= 0I;
  #L48a3ca.  v1:= 1I;
  #L48a3cc.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48a3d2.  v0:= temp;
  #L48a3d4.  if v0 == 0 then goto L48a404;
  #L48a3d8.  call `onNext`(v2, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48a3de.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48a3e4.  v3:= temp;
  #L48a3e6.  if v3 == 0 then goto L48a404;
  #L48a3ea.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a3f0.  v3:= temp @kind object;
  #L48a3f2.  if v3 == 0 then goto L48a3fe;
  #L48a3f6.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a3fc.  goto L48a404;
  #L48a3fe.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48a404.  return @kind void;
}
procedure `void` `onNext`(`org.reactivestreams.Subscriber` v2 @kind object, `java.lang.Object` v3 @kind object, `java.util.concurrent.atomic.AtomicInteger` v4 @kind object, `io.reactivex.internal.util.AtomicThrowable` v5 @kind object) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a418.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48a41e.  v0:= temp;
  #L48a420.  if v0 != 0 then goto L48a460;
  #L48a424.  v0:= 0I;
  #L48a426.  v1:= 1I;
  #L48a428.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L48a42e.  v0:= temp;
  #L48a430.  if v0 == 0 then goto L48a460;
  #L48a434.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48a43a.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48a440.  v3:= temp;
  #L48a442.  if v3 == 0 then goto L48a460;
  #L48a446.  call temp:= `terminate`(v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L48a44c.  v3:= temp @kind object;
  #L48a44e.  if v3 == 0 then goto L48a45a;
  #L48a452.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48a458.  goto L48a460;
  #L48a45a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48a460.  return @kind void;
}
