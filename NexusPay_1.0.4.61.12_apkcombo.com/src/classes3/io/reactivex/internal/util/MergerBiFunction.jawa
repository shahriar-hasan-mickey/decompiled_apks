record `io.reactivex.internal.util.MergerBiFunction` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.functions.BiFunction` @kind interface {
  `java.util.Comparator` `io.reactivex.internal.util.MergerBiFunction.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.util.Comparator` v1 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48a8b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48a8be.  v0.`io.reactivex.internal.util.MergerBiFunction.a` @type ^`java.util.Comparator` := v1 @kind object;
  #L48a8c2.  return @kind void;
}
procedure `java.lang.Object` `apply`(`io.reactivex.internal.util.MergerBiFunction` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L48a778.  v1:= (`java.util.List`) v1 @kind object;
  #L48a77c.  v2:= (`java.util.List`) v2 @kind object;
  #L48a780.  call temp:= `apply`(v0, v1, v2) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @kind virtual;
  #L48a786.  v1:= temp @kind object;
  #L48a788.  return v1 @kind object;
}
procedure `java.util.List` `apply`(`io.reactivex.internal.util.MergerBiFunction` v5 @kind this, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lio/reactivex/internal/util/MergerBiFunction;.apply:(Ljava/util/List;Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48a79c.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48a7a2.  v0:= temp;
  #L48a7a4.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48a7aa.  v1:= temp;
  #L48a7ac.  v0:= v0 + v1 @kind int;
  #L48a7ae.  if v0 != 0 then goto L48a7be;
  #L48a7b2.  v6:= new `java.util.ArrayList`;
  #L48a7b6.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48a7bc.  return v6 @kind object;
  #L48a7be.  v1:= new `java.util.ArrayList`;
  #L48a7c2.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L48a7c8.  call temp:= `iterator`(v6) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48a7ce.  v6:= temp @kind object;
  #L48a7d0.  call temp:= `iterator`(v7) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48a7d6.  v7:= temp @kind object;
  #L48a7d8.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a7de.  v0:= temp;
  #L48a7e0.  v2:= 0I;
  #L48a7e2.  if v0 == 0 then goto L48a7f0;
  #L48a7e6.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a7ec.  v0:= temp @kind object;
  #L48a7ee.  goto L48a7f2;
  #L48a7f0.  v0:= v2 @kind object;
  #L48a7f2.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a7f8.  v3:= temp;
  #L48a7fa.  if v3 == 0 then goto L48a808;
  #L48a7fe.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a804.  v3:= temp @kind object;
  #L48a806.  goto L48a80a;
  #L48a808.  v3:= v2 @kind object;
  #L48a80a.  if v0 == 0 then goto L48a85e;
  #L48a80e.  if v3 == 0 then goto L48a85e;
  #L48a812.  v4:= v5.`io.reactivex.internal.util.MergerBiFunction.a` @type ^`java.util.Comparator` @kind object;
  #L48a816.  call temp:= `compare`(v4, v0, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L48a81c.  v4:= temp;
  #L48a81e.  if v4 >= 0 then goto L48a842;
  #L48a822.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a828.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a82e.  v0:= temp;
  #L48a830.  if v0 == 0 then goto L48a83e;
  #L48a834.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a83a.  v0:= temp @kind object;
  #L48a83c.  goto L48a80a;
  #L48a83e.  v0:= v2 @kind object;
  #L48a840.  goto L48a80a;
  #L48a842.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a848.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a84e.  v3:= temp;
  #L48a850.  if v3 == 0 then goto L48a808;
  #L48a854.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a85a.  v3:= temp @kind object;
  #L48a85c.  goto L48a80a;
  #L48a85e.  if v0 == 0 then goto L48a884;
  #L48a862.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a868.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a86e.  v7:= temp;
  #L48a870.  if v7 == 0 then goto L48a8a6;
  #L48a874.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a87a.  v7:= temp @kind object;
  #L48a87c.  call temp:= `add`(v1, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a882.  goto L48a868;
  #L48a884.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a88a.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48a890.  v6:= temp;
  #L48a892.  if v6 == 0 then goto L48a8a6;
  #L48a896.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48a89c.  v6:= temp @kind object;
  #L48a89e.  call temp:= `add`(v1, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a8a4.  goto L48a88a;
  #L48a8a6.  return v1 @kind object;
}
