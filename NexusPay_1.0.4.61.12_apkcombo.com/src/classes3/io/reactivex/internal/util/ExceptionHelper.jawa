record `io.reactivex.internal.util.ExceptionHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.Throwable` `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/util/ExceptionHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L48a25c.  v0:= new `io.reactivex.internal.util.ExceptionHelper$a`;
  #L48a260.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper$a;.<init>:()V` @kind direct;
  #L48a266.  `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` := v0 @kind object;
  #L48a26a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.ExceptionHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/ExceptionHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48a27c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48a282.  v0:= new `java.lang.IllegalStateException`;
  #L48a286.  v1:= "No instances!" @kind object;
  #L48a28a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48a290.  throw v0;
}
procedure `boolean` `addThrowable`(`java.util.concurrent.atomic.AtomicReference` v5 @kind object, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48a094.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48a09a.  v0:= temp @kind object;
  #L48a09c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48a0a0.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L48a0a4.  v2:= 0I;
  #L48a0a6.  if v0 != v1 then goto L48a0ac;
  #L48a0aa.  return v2;
  #L48a0ac.  v1:= 1I;
  #L48a0ae.  if v0 != 0 then goto L48a0b6;
  #L48a0b2.  v3:= v6 @kind object;
  #L48a0b4.  goto L48a0ce;
  #L48a0b6.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L48a0ba.  v4:= 2I;
  #L48a0bc.  v4:= new `java.lang.Throwable`[v4];
  #L48a0c0.  v4[v2]:= v0 @kind object;
  #L48a0c4.  v4[v1]:= v6 @kind object;
  #L48a0c8.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L48a0ce.  call temp:= `compareAndSet`(v5, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L48a0d4.  v0:= temp;
  #L48a0d6.  if v0 == 0 then goto L48a094;
  #L48a0da.  return v1;
}
procedure `java.util.List` `flatten`(`java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.flatten:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48a1d8.  v0:= new `java.util.ArrayList`;
  #L48a1dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L48a1e2.  v1:= new `java.util.ArrayDeque`;
  #L48a1e6.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L48a1ec.  call temp:= `offer`(v1, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L48a1f2.  call temp:= `isEmpty`(v1) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L48a1f8.  v4:= temp;
  #L48a1fa.  if v4 != 0 then goto L48a24a;
  #L48a1fe.  call temp:= `removeFirst`(v1) @signature `Ljava/util/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L48a204.  v4:= temp @kind object;
  #L48a206.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L48a20a.  v2:= instanceof @variable v4 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L48a20e.  if v2 == 0 then goto L48a242;
  #L48a212.  v4:= (`io.reactivex.exceptions.CompositeException`) v4 @kind object;
  #L48a216.  call temp:= `getExceptions`(v4) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L48a21c.  v4:= temp @kind object;
  #L48a21e.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L48a224.  v2:= temp;
  #L48a226.  v2:= v2 + -1;
  #L48a22a.  if v2 < 0 then goto L48a1f2;
  #L48a22e.  call temp:= `get`(v4, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L48a234.  v3:= temp @kind object;
  #L48a236.  call temp:= `offerFirst`(v1, v3) @signature `Ljava/util/ArrayDeque;.offerFirst:(Ljava/lang/Object;)Z` @kind virtual;
  #L48a23c.  v2:= v2 + -1;
  #L48a240.  goto L48a22a;
  #L48a242.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L48a248.  goto L48a1f2;
  #L48a24a.  return v0 @kind object;
}
procedure `java.lang.Throwable` `terminate`(`java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a1a4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L48a1aa.  v0:= temp @kind object;
  #L48a1ac.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48a1b0.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L48a1b4.  if v0 == v1 then goto L48a1c6;
  #L48a1b8.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48a1be.  v2:= temp @kind object;
  #L48a1c0.  v0:= v2 @kind object;
  #L48a1c2.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L48a1c6.  return v0 @kind object;
}
procedure `java.lang.Exception` `throwIfThrowable`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a0ec.  v0:= instanceof @variable v1 @type ^`java.lang.Exception` @kind boolean;
  #L48a0f0.  if v0 == 0 then goto L48a0fa;
  #L48a0f4.  v1:= (`java.lang.Exception`) v1 @kind object;
  #L48a0f8.  return v1 @kind object;
  #L48a0fa.  throw v1;
}
procedure `java.lang.String` `timeoutMessage`(`long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48a144.  v0:= new `java.lang.StringBuilder`;
  #L48a148.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L48a14e.  v1:= "The source did not signal an event for " @kind object;
  #L48a152.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48a158.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L48a15e.  v2:= " " @kind object;
  #L48a162.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48a168.  call temp:= `toString`(v4) @signature `Ljava/util/concurrent/TimeUnit;.toString:()Ljava/lang/String;` @kind virtual;
  #L48a16e.  v2:= temp @kind object;
  #L48a170.  call temp:= `toLowerCase`(v2) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L48a176.  v2:= temp @kind object;
  #L48a178.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48a17e.  v2:= " and has been terminated." @kind object;
  #L48a182.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L48a188.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L48a18e.  v2:= temp @kind object;
  #L48a190.  return v2 @kind object;
}
procedure `java.lang.RuntimeException` `wrapOrThrow`(`java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48a10c.  v0:= instanceof @variable v1 @type ^`java.lang.Error` @kind boolean;
  #L48a110.  if v0 != 0 then goto L48a12e;
  #L48a114.  v0:= instanceof @variable v1 @type ^`java.lang.RuntimeException` @kind boolean;
  #L48a118.  if v0 == 0 then goto L48a122;
  #L48a11c.  v1:= (`java.lang.RuntimeException`) v1 @kind object;
  #L48a120.  return v1 @kind object;
  #L48a122.  v0:= new `java.lang.RuntimeException`;
  #L48a126.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L48a12c.  return v0 @kind object;
  #L48a12e.  v1:= (`java.lang.Error`) v1 @kind object;
  #L48a132.  throw v1;
}
