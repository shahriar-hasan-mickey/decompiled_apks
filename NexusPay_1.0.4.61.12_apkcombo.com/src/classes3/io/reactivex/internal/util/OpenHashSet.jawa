record `io.reactivex.internal.util.OpenHashSet` @kind class @AccessFlag PUBLIC_FINAL {
  `float` `io.reactivex.internal.util.OpenHashSet.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.util.OpenHashSet.b` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.c` @AccessFlag ;
  `int` `io.reactivex.internal.util.OpenHashSet.d` @AccessFlag ;
  `java.lang.Object`[] `io.reactivex.internal.util.OpenHashSet.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v2 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48af34.  v0:= 16I;
  #L48af38.  v1:= 0.75F;
  #L48af3c.  call `<init>`(v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L48af42.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48af54.  v0:= 0.75F;
  #L48af58.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @kind direct;
  #L48af5e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this, `int` v2 , `float` v3 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.<init>:(IF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L48af70.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48af76.  v1.`io.reactivex.internal.util.OpenHashSet.a` @type ^`float` := v3;
  #L48af7a.  call temp:= `roundToPowerOfTwo`(v2) @signature `Lio/reactivex/internal/util/Pow2;.roundToPowerOfTwo:(I)I` @kind static;
  #L48af80.  v2:= temp;
  #L48af82.  v0:= v2 + -1;
  #L48af86.  v1.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int` := v0;
  #L48af8a.  v0:= (`float`) v2 @kind i2f;
  #L48af8c.  v3:= v3 * v0 @kind float;
  #L48af90.  v3:= (`int`) v3 @kind f2i;
  #L48af92.  v1.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int` := v3;
  #L48af96.  v2:= new `java.lang.Object`[v2];
  #L48af9a.  v1.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L48af9e.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @AccessFlag STATIC {
    temp;
    v0;

  #L48aee0.  v0:= -1640531527I;
  #L48aee6.  v1:= v1 * v0 @kind int;
  #L48aeea.  v0:= v1 ^>> 16;
  #L48aeee.  v1:= v1 ^~ v0 @kind int;
  #L48aef0.  return v1;
}
procedure `boolean` `add`(`io.reactivex.internal.util.OpenHashSet` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48ad84.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L48ad88.  v1:= v6.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int`;
  #L48ad8c.  call temp:= `hashCode`(v7) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48ad92.  v2:= temp;
  #L48ad94.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L48ad9a.  v2:= temp;
  #L48ad9c.  v2:= v2 ^& v1 @kind int;
  #L48ad9e.  v3:= v0[v2] @kind object;
  #L48ada2.  v4:= 1I;
  #L48ada4.  if v3 == 0 then goto L48add4;
  #L48ada8.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48adae.  v3:= temp;
  #L48adb0.  v5:= 0I;
  #L48adb2.  if v3 == 0 then goto L48adb8;
  #L48adb6.  return v5;
  #L48adb8.  v2:= v2 + v4 @kind int;
  #L48adba.  v2:= v2 ^& v1 @kind int;
  #L48adbc.  v3:= v0[v2] @kind object;
  #L48adc0.  if v3 != 0 then goto L48adc6;
  #L48adc4.  goto L48add4;
  #L48adc6.  call temp:= `equals`(v3, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48adcc.  v3:= temp;
  #L48adce.  if v3 == 0 then goto L48adb8;
  #L48add2.  return v5;
  #L48add4.  v0[v2]:= v7 @kind object;
  #L48add8.  v7:= v6.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L48addc.  v7:= v7 + v4 @kind int;
  #L48adde.  v6.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int` := v7;
  #L48ade2.  v0:= v6.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int`;
  #L48ade6.  if v7 < v0 then goto L48adf0;
  #L48adea.  call `b`(v6) @signature `Lio/reactivex/internal/util/OpenHashSet;.b:()V` @kind virtual;
  #L48adf0.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.util.OpenHashSet` v8 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48afb0.  v0:= v8.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L48afb4.  v1:= length @variable v0;
  #L48afb6.  v2:= v1 ^< 1;
  #L48afba.  v3:= v2 + -1;
  #L48afbe.  v4:= new `java.lang.Object`[v2];
  #L48afc2.  v5:= v8.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L48afc6.  v6:= v5 + -1;
  #L48afca.  if v5 == 0 then goto L48b014;
  #L48afce.  v1:= v1 + -1;
  #L48afd2.  v5:= v0[v1] @kind object;
  #L48afd6.  if v5 != 0 then goto L48afdc;
  #L48afda.  goto L48afce;
  #L48afdc.  v5:= v0[v1] @kind object;
  #L48afe0.  call temp:= `hashCode`(v5) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48afe6.  v5:= temp;
  #L48afe8.  call temp:= `a`(v5) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L48afee.  v5:= temp;
  #L48aff0.  v5:= v5 ^& v3 @kind int;
  #L48aff2.  v7:= v4[v5] @kind object;
  #L48aff6.  if v7 == 0 then goto L48b008;
  #L48affa.  v5:= v5 + 1;
  #L48affe.  v5:= v5 ^& v3 @kind int;
  #L48b000.  v7:= v4[v5] @kind object;
  #L48b004.  if v7 != 0 then goto L48affa;
  #L48b008.  v7:= v0[v1] @kind object;
  #L48b00c.  v4[v5]:= v7 @kind object;
  #L48b010.  v5:= v6;
  #L48b012.  goto L48afc6;
  #L48b014.  v8.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int` := v3;
  #L48b018.  v0:= (`float`) v2 @kind i2f;
  #L48b01a.  v1:= v8.`io.reactivex.internal.util.OpenHashSet.a` @type ^`float`;
  #L48b01e.  v0:= v0 * v1 @kind float;
  #L48b022.  v0:= (`int`) v0 @kind f2i;
  #L48b024.  v8.`io.reactivex.internal.util.OpenHashSet.d` @type ^`int` := v0;
  #L48b028.  v8.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] := v4 @kind object;
  #L48b02c.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.util.OpenHashSet` v4 @kind this, `int` v5 , `java.lang.Object`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48ae78.  v0:= v4.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L48ae7c.  v1:= 1I;
  #L48ae7e.  v0:= v0 - v1 @kind int;
  #L48ae80.  v4.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int` := v0;
  #L48ae84.  v0:= v5 + 1;
  #L48ae88.  v0:= v0 ^& v7 @kind int;
  #L48ae8a.  v2:= v6[v0] @kind object;
  #L48ae8e.  if v2 != 0 then goto L48ae9a;
  #L48ae92.  v7:= 0I;
  #L48ae94.  v6[v5]:= v7 @kind object;
  #L48ae98.  return v1;
  #L48ae9a.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48aea0.  v3:= temp;
  #L48aea2.  call temp:= `a`(v3) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L48aea8.  v3:= temp;
  #L48aeaa.  v3:= v3 ^& v7 @kind int;
  #L48aeac.  if v5 > v0 then goto L48aeba;
  #L48aeb0.  if v5 >= v3 then goto L48aec2;
  #L48aeb4.  if v3 <= v0 then goto L48aeca;
  #L48aeb8.  goto L48aec2;
  #L48aeba.  if v5 < v3 then goto L48aeca;
  #L48aebe.  if v3 <= v0 then goto L48aeca;
  #L48aec2.  v6[v5]:= v2 @kind object;
  #L48aec6.  v5:= v0;
  #L48aec8.  goto L48ae84;
  #L48aeca.  v0:= v0 + 1;
  #L48aece.  goto L48ae88;
}
procedure `java.lang.Object`[] `keys`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.keys:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48af1c.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L48af20.  return v0 @kind object;
}
procedure `boolean` `remove`(`io.reactivex.internal.util.OpenHashSet` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/util/OpenHashSet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L48ae04.  v0:= v5.`io.reactivex.internal.util.OpenHashSet.e` @type ^`java.lang.Object`[] @kind object;
  #L48ae08.  v1:= v5.`io.reactivex.internal.util.OpenHashSet.b` @type ^`int`;
  #L48ae0c.  call temp:= `hashCode`(v6) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L48ae12.  v2:= temp;
  #L48ae14.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/util/OpenHashSet;.a:(I)I` @kind static;
  #L48ae1a.  v2:= temp;
  #L48ae1c.  v2:= v2 ^& v1 @kind int;
  #L48ae1e.  v3:= v0[v2] @kind object;
  #L48ae22.  v4:= 0I;
  #L48ae24.  if v3 != 0 then goto L48ae2a;
  #L48ae28.  return v4;
  #L48ae2a.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48ae30.  v3:= temp;
  #L48ae32.  if v3 == 0 then goto L48ae40;
  #L48ae36.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L48ae3c.  v6:= temp;
  #L48ae3e.  return v6;
  #L48ae40.  v2:= v2 + 1;
  #L48ae44.  v2:= v2 ^& v1 @kind int;
  #L48ae46.  v3:= v0[v2] @kind object;
  #L48ae4a.  if v3 != 0 then goto L48ae50;
  #L48ae4e.  return v4;
  #L48ae50.  call temp:= `equals`(v3, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L48ae56.  v3:= temp;
  #L48ae58.  if v3 == 0 then goto L48ae40;
  #L48ae5c.  call temp:= `c`(v5, v2, v0, v1) @signature `Lio/reactivex/internal/util/OpenHashSet;.c:(I[Ljava/lang/Object;I)Z` @kind virtual;
  #L48ae62.  v6:= temp;
  #L48ae64.  return v6;
}
procedure `int` `size`(`io.reactivex.internal.util.OpenHashSet` v1 @kind this) @signature `Lio/reactivex/internal/util/OpenHashSet;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48af04.  v0:= v1.`io.reactivex.internal.util.OpenHashSet.c` @type ^`int`;
  #L48af08.  return v0;
}
