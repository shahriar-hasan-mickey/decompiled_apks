record `io.reactivex.internal.util.QueueDrainHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`io.reactivex.internal.util.QueueDrainHelper` v2 @kind this) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L48b358.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L48b35e.  v0:= new `java.lang.IllegalStateException`;
  #L48b362.  v1:= "No instances!" @kind object;
  #L48b366.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48b36c.  throw v0;
}
procedure `boolean` `a`(`io.reactivex.functions.BooleanSupplier` v0 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag STATIC {
    temp;

  #L48b1c8.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L48b1ce.  v0:= temp;
  #L48b1d0.  return v0;
  #L48b1d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48b1d4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48b1da.  v0:= 1I;
  #L48b1dc.  return v0;
  catch `java.lang.Throwable` @[L48b1c8..L48b1d0] goto L48b1d2;
}
procedure `boolean` `b`(`long` v9 , `org.reactivestreams.Subscriber` v11 @kind object, `java.util.Queue` v12 @kind object, `java.util.concurrent.atomic.AtomicLong` v13 @kind object, `io.reactivex.functions.BooleanSupplier` v14 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L48b1fc.  v0:= -9223372036854775808L;
  #L48b200.  v2:= v9 ^& v0 @kind long;
  #L48b204.  v4:= 1I;
  #L48b206.  v5:= lcmp(v2, v9);
  #L48b20a.  if v5 == 0 then goto L48b23e;
  #L48b20e.  call temp:= `a`(v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L48b214.  v5:= temp;
  #L48b216.  if v5 == 0 then goto L48b21c;
  #L48b21a.  return v4;
  #L48b21c.  call temp:= `poll`(v12) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48b222.  v5:= temp @kind object;
  #L48b224.  if v5 != 0 then goto L48b230;
  #L48b228.  call `onComplete`(v11) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b22e.  return v4;
  #L48b230.  call `onNext`(v11, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48b236.  v4:= 1L;
  #L48b23a.  v2:= v2 + v4 @kind long;
  #L48b23c.  goto L48b204;
  #L48b23e.  call temp:= `a`(v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.a:(Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L48b244.  v9:= temp;
  #L48b246.  if v9 == 0 then goto L48b24c;
  #L48b24a.  return v4;
  #L48b24c.  call temp:= `isEmpty`(v12) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L48b252.  v9:= temp;
  #L48b254.  if v9 == 0 then goto L48b260;
  #L48b258.  call `onComplete`(v11) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b25e.  return v4;
  #L48b260.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48b266.  v9:= temp @kind wide;
  #L48b268.  v4:= lcmp(v9, v2);
  #L48b26c.  if v4 != 0 then goto L48b204;
  #L48b270.  v9:= 9223372036854775807L;
  #L48b27a.  v2:= v2 ^& v9 @kind long;
  #L48b27c.  v2:= -v2 @kind long;
  #L48b27e.  call temp:= `addAndGet`(v13, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L48b284.  v2:= temp @kind wide;
  #L48b286.  v9:= v9 ^& v2 @kind long;
  #L48b288.  v4:= 0L;
  #L48b28c.  v6:= lcmp(v9, v4);
  #L48b290.  if v6 != 0 then goto L48b298;
  #L48b294.  v9:= 0I;
  #L48b296.  return v9;
  #L48b298.  v9:= v2 ^& v0 @kind long;
  #L48b29c.  v7:= v9 @kind wide;
  #L48b29e.  v9:= v2 @kind wide;
  #L48b2a0.  v2:= v7 @kind wide;
  #L48b2a2.  goto L48b204;
}
procedure `boolean` `checkTerminated`(`boolean` v2 , `boolean` v3 , `io.reactivex.Observer` v4 @kind object, `boolean` v5 , `io.reactivex.internal.fuseable.SimpleQueue` v6 @kind object, `io.reactivex.disposables.Disposable` v7 @kind object, `io.reactivex.internal.util.ObservableQueueDrain` v8 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48b0b4.  call temp:= `cancelled`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.cancelled:()Z` @kind interface;
  #L48b0ba.  v0:= temp;
  #L48b0bc.  v1:= 1I;
  #L48b0be.  if v0 == 0 then goto L48b0d0;
  #L48b0c2.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48b0c8.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b0ce.  return v1;
  #L48b0d0.  if v2 == 0 then goto L48b13c;
  #L48b0d4.  if v5 == 0 then goto L48b102;
  #L48b0d8.  if v3 == 0 then goto L48b13c;
  #L48b0dc.  if v7 == 0 then goto L48b0e6;
  #L48b0e0.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b0e6.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L48b0ec.  v2:= temp @kind object;
  #L48b0ee.  if v2 == 0 then goto L48b0fa;
  #L48b0f2.  call `onError`(v4, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b0f8.  goto L48b100;
  #L48b0fa.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48b100.  return v1;
  #L48b102.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L48b108.  v2:= temp @kind object;
  #L48b10a.  if v2 == 0 then goto L48b126;
  #L48b10e.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48b114.  if v7 == 0 then goto L48b11e;
  #L48b118.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b11e.  call `onError`(v4, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b124.  return v1;
  #L48b126.  if v3 == 0 then goto L48b13c;
  #L48b12a.  if v7 == 0 then goto L48b134;
  #L48b12e.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b134.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L48b13a.  return v1;
  #L48b13c.  v2:= 0I;
  #L48b13e.  return v2;
}
procedure `boolean` `checkTerminated`(`boolean` v2 , `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 , `io.reactivex.internal.fuseable.SimpleQueue` v6 @kind object, `io.reactivex.internal.util.QueueDrain` v7 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/internal/util/QueueDrain;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48b150.  call temp:= `cancelled`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.cancelled:()Z` @kind interface;
  #L48b156.  v0:= temp;
  #L48b158.  v1:= 1I;
  #L48b15a.  if v0 == 0 then goto L48b166;
  #L48b15e.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48b164.  return v1;
  #L48b166.  if v2 == 0 then goto L48b1b4;
  #L48b16a.  if v5 == 0 then goto L48b18e;
  #L48b16e.  if v3 == 0 then goto L48b1b4;
  #L48b172.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L48b178.  v2:= temp @kind object;
  #L48b17a.  if v2 == 0 then goto L48b186;
  #L48b17e.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b184.  goto L48b18c;
  #L48b186.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b18c.  return v1;
  #L48b18e.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/QueueDrain;.error:()Ljava/lang/Throwable;` @kind interface;
  #L48b194.  v2:= temp @kind object;
  #L48b196.  if v2 == 0 then goto L48b1a8;
  #L48b19a.  call `clear`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48b1a0.  call `onError`(v4, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b1a6.  return v1;
  #L48b1a8.  if v3 == 0 then goto L48b1b4;
  #L48b1ac.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b1b2.  return v1;
  #L48b1b4.  v2:= 0I;
  #L48b1b6.  return v2;
}
procedure `io.reactivex.internal.fuseable.SimpleQueue` `createQueue`(`int` v1 ) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L48b328.  if v1 >= 0 then goto L48b33a;
  #L48b32c.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L48b330.  v1:= -v1 @kind int;
  #L48b332.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L48b338.  return v0 @kind object;
  #L48b33a.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L48b33e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L48b344.  return v0 @kind object;
}
procedure `void` `drainLoop`(`io.reactivex.internal.fuseable.SimplePlainQueue` v11 @kind object, `io.reactivex.Observer` v12 @kind object, `boolean` v13 , `io.reactivex.disposables.Disposable` v14 @kind object, `io.reactivex.internal.util.ObservableQueueDrain` v15 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48b380.  v0:= 1I;
  #L48b382.  v1:= 1I;
  #L48b384.  call temp:= `done`(v15) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.done:()Z` @kind interface;
  #L48b38a.  v2:= temp;
  #L48b38c.  call temp:= `isEmpty`(v11) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L48b392.  v3:= temp;
  #L48b394.  v4:= v12 @kind object;
  #L48b396.  v5:= v13;
  #L48b398.  v6:= v11 @kind object;
  #L48b39a.  v7:= v14 @kind object;
  #L48b39c.  v8:= v15 @kind object;
  #L48b39e.  call temp:= `checkTerminated`(v2, v3, v4, v5, v6, v7, v8) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @kind static;
  #L48b3a4.  v2:= temp;
  #L48b3a6.  if v2 == 0 then goto L48b3ac;
  #L48b3aa.  return @kind void;
  #L48b3ac.  call temp:= `done`(v15) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.done:()Z` @kind interface;
  #L48b3b2.  v3:= temp;
  #L48b3b4.  call temp:= `poll`(v11) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48b3ba.  v2:= temp @kind object;
  #L48b3bc.  if v2 != 0 then goto L48b3c4;
  #L48b3c0.  v10:= 1I;
  #L48b3c2.  goto L48b3c8;
  #L48b3c4.  v4:= 0I;
  #L48b3c6.  v10:= 0I;
  #L48b3c8.  v4:= v10;
  #L48b3ca.  v5:= v12 @kind object;
  #L48b3cc.  v6:= v13;
  #L48b3ce.  v7:= v11 @kind object;
  #L48b3d0.  v8:= v14 @kind object;
  #L48b3d2.  v9:= v15 @kind object;
  #L48b3d4.  call temp:= `checkTerminated`(v3, v4, v5, v6, v7, v8, v9) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)Z` @kind static;
  #L48b3da.  v3:= temp;
  #L48b3dc.  if v3 == 0 then goto L48b3e2;
  #L48b3e0.  return @kind void;
  #L48b3e2.  if v10 == 0 then goto L48b3f6;
  #L48b3e6.  v1:= -v1 @kind int;
  #L48b3e8.  call temp:= `leave`(v15, v1) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.leave:(I)I` @kind interface;
  #L48b3ee.  v1:= temp;
  #L48b3f0.  if v1 != 0 then goto L48b384;
  #L48b3f4.  return @kind void;
  #L48b3f6.  call `accept`(v15, v12, v2) @signature `Lio/reactivex/internal/util/ObservableQueueDrain;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind interface;
  #L48b3fc.  goto L48b3ac;
}
procedure `void` `drainMaxLoop`(`io.reactivex.internal.fuseable.SimplePlainQueue` v10 @kind object, `org.reactivestreams.Subscriber` v11 @kind object, `boolean` v12 , `io.reactivex.disposables.Disposable` v13 @kind object, `io.reactivex.internal.util.QueueDrain` v14 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L48b410.  v0:= 1I;
  #L48b412.  v1:= 1I;
  #L48b414.  call temp:= `done`(v14) @signature `Lio/reactivex/internal/util/QueueDrain;.done:()Z` @kind interface;
  #L48b41a.  v2:= temp;
  #L48b41c.  call temp:= `poll`(v10) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L48b422.  v8:= temp @kind object;
  #L48b424.  if v8 != 0 then goto L48b42c;
  #L48b428.  v9:= 1I;
  #L48b42a.  goto L48b430;
  #L48b42c.  v3:= 0I;
  #L48b42e.  v9:= 0I;
  #L48b430.  v3:= v9;
  #L48b432.  v4:= v11 @kind object;
  #L48b434.  v5:= v12;
  #L48b436.  v6:= v10 @kind object;
  #L48b438.  v7:= v14 @kind object;
  #L48b43a.  call temp:= `checkTerminated`(v2, v3, v4, v5, v6, v7) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.checkTerminated:(ZZLorg/reactivestreams/Subscriber;ZLio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/internal/util/QueueDrain;)Z` @kind static;
  #L48b440.  v2:= temp;
  #L48b442.  if v2 == 0 then goto L48b452;
  #L48b446.  if v13 == 0 then goto L48b450;
  #L48b44a.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b450.  return @kind void;
  #L48b452.  if v9 == 0 then goto L48b466;
  #L48b456.  v1:= -v1 @kind int;
  #L48b458.  call temp:= `leave`(v14, v1) @signature `Lio/reactivex/internal/util/QueueDrain;.leave:(I)I` @kind interface;
  #L48b45e.  v1:= temp;
  #L48b460.  if v1 != 0 then goto L48b414;
  #L48b464.  return @kind void;
  #L48b466.  call temp:= `requested`(v14) @signature `Lio/reactivex/internal/util/QueueDrain;.requested:()J` @kind interface;
  #L48b46c.  v2:= temp @kind wide;
  #L48b46e.  v4:= 0L;
  #L48b472.  v6:= lcmp(v2, v4);
  #L48b476.  if v6 == 0 then goto L48b4a4;
  #L48b47a.  call temp:= `accept`(v14, v11, v8) @signature `Lio/reactivex/internal/util/QueueDrain;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @kind interface;
  #L48b480.  v4:= temp;
  #L48b482.  if v4 == 0 then goto L48b414;
  #L48b486.  v4:= 9223372036854775807L;
  #L48b490.  v6:= lcmp(v2, v4);
  #L48b494.  if v6 == 0 then goto L48b414;
  #L48b498.  v2:= 1L;
  #L48b49c.  call temp:= `produced`(v14, v2) @signature `Lio/reactivex/internal/util/QueueDrain;.produced:(J)J` @kind interface;
  #L48b4a2.  goto L48b414;
  #L48b4a4.  call `clear`(v10) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L48b4aa.  if v13 == 0 then goto L48b4b4;
  #L48b4ae.  call `dispose`(v13) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48b4b4.  v10:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L48b4b8.  v12:= "Could not emit value due to lack of requests." @kind object;
  #L48b4bc.  call `<init>`(v10, v12) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L48b4c2.  call `onError`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48b4c8.  return @kind void;
}
procedure `void` `postComplete`(`org.reactivestreams.Subscriber` v15 @kind object, `java.util.Queue` v16 @kind object, `java.util.concurrent.atomic.AtomicLong` v17 @kind object, `io.reactivex.functions.BooleanSupplier` v18 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L48b4dc.  call temp:= `isEmpty`(v16) @signature `Ljava/util/Queue;.isEmpty:()Z` @kind interface;
  #L48b4e2.  v0:= temp;
  #L48b4e4.  if v0 == 0 then goto L48b4f0;
  #L48b4e8.  call `onComplete`(v15) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48b4ee.  return @kind void;
  #L48b4f0.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48b4f6.  v1:= temp @kind wide;
  #L48b4f8.  v3:= v15 @kind object;
  #L48b4fa.  v4:= v16 @kind object;
  #L48b4fe.  v5:= v17 @kind object;
  #L48b502.  v6:= v18 @kind object;
  #L48b506.  call temp:= `b`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L48b50c.  v0:= temp;
  #L48b50e.  if v0 == 0 then goto L48b514;
  #L48b512.  return @kind void;
  #L48b514.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48b51a.  v0:= temp @kind wide;
  #L48b51c.  v2:= -9223372036854775808L;
  #L48b520.  v4:= v0 ^& v2 @kind long;
  #L48b524.  v6:= 0L;
  #L48b528.  v8:= lcmp(v4, v6);
  #L48b52c.  if v8 == 0 then goto L48b532;
  #L48b530.  return @kind void;
  #L48b532.  v9:= v0 ^| v2 @kind long;
  #L48b536.  v2:= v17 @kind object;
  #L48b53a.  call temp:= `compareAndSet`(v2, v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L48b540.  v3:= temp;
  #L48b542.  if v3 == 0 then goto L48b514;
  #L48b546.  v3:= lcmp(v0, v6);
  #L48b54a.  if v3 == 0 then goto L48b562;
  #L48b54e.  v11:= v15 @kind object;
  #L48b550.  v12:= v16 @kind object;
  #L48b554.  v13:= v17 @kind object;
  #L48b558.  v14:= v18 @kind object;
  #L48b55c.  call temp:= `b`(v9, v11, v12, v13, v14) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L48b562.  return @kind void;
}
procedure `boolean` `postCompleteRequest`(`long` v14 , `org.reactivestreams.Subscriber` v16 @kind object, `java.util.Queue` v17 @kind object, `java.util.concurrent.atomic.AtomicLong` v18 @kind object, `io.reactivex.functions.BooleanSupplier` v19 @kind object) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L48b2b4.  v0:= v14 @kind wide;
  #L48b2b6.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48b2bc.  v2:= temp @kind wide;
  #L48b2be.  v4:= 9223372036854775807L;
  #L48b2c8.  v4:= v4 ^& v2 @kind long;
  #L48b2ca.  v6:= -9223372036854775808L;
  #L48b2ce.  v8:= v2 ^& v6 @kind long;
  #L48b2d2.  call temp:= `addCap`(v4, v14) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L48b2d8.  v4:= temp @kind wide;
  #L48b2da.  v4:= v4 ^| v8 @kind long;
  #L48b2dc.  v12:= v18 @kind object;
  #L48b2e0.  call temp:= `compareAndSet`(v12, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L48b2e6.  v4:= temp;
  #L48b2e8.  if v4 == 0 then goto L48b2b6;
  #L48b2ec.  v4:= lcmp(v2, v6);
  #L48b2f0.  if v4 != 0 then goto L48b312;
  #L48b2f4.  v8:= v0 ^| v6 @kind long;
  #L48b2f8.  v10:= v16 @kind object;
  #L48b2fc.  v11:= v17 @kind object;
  #L48b300.  v12:= v18 @kind object;
  #L48b304.  v13:= v19 @kind object;
  #L48b308.  call temp:= `b`(v8, v10, v11, v12, v13) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.b:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L48b30e.  v0:= 1I;
  #L48b310.  return v0;
  #L48b312.  v0:= 0I;
  #L48b314.  return v0;
}
procedure `void` `request`(`org.reactivestreams.Subscription` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L48b574.  if v3 >= 0 then goto L48b584;
  #L48b578.  v0:= 9223372036854775807L;
  #L48b582.  goto L48b586;
  #L48b584.  v0:= (`long`) v3 @kind i2l;
  #L48b586.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L48b58c.  return @kind void;
}
