record `io.reactivex.internal.functions.ObjectHelper` @kind class @AccessFlag PUBLIC_FINAL {
}
global `io.reactivex.functions.BiPredicate` `@@io.reactivex.internal.functions.ObjectHelper.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L42a26c.  v0:= new `io.reactivex.internal.functions.ObjectHelper$a`;
  #L42a270.  call `<init>`(v0) @signature `Lio/reactivex/internal/functions/ObjectHelper$a;.<init>:()V` @kind direct;
  #L42a276.  `@@io.reactivex.internal.functions.ObjectHelper.a` @type ^`io.reactivex.functions.BiPredicate` := v0 @kind object;
  #L42a27a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.functions.ObjectHelper` v2 @kind this) @signature `Lio/reactivex/internal/functions/ObjectHelper;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42a28c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a292.  v0:= new `java.lang.IllegalStateException`;
  #L42a296.  v1:= "No instances!" @kind object;
  #L42a29a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a2a0.  throw v0;
}
procedure `int` `compare`(`int` v0 , `int` v1 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(II)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L42a0e0.  if v0 >= v1 then goto L42a0e8;
  #L42a0e4.  v0:= -1I;
  #L42a0e6.  goto L42a0f2;
  #L42a0e8.  if v0 <= v1 then goto L42a0f0;
  #L42a0ec.  v0:= 1I;
  #L42a0ee.  goto L42a0f2;
  #L42a0f0.  v0:= 0I;
  #L42a0f2.  return v0;
}
procedure `int` `compare`(`long` v1 , `long` v3 ) @signature `Lio/reactivex/internal/functions/ObjectHelper;.compare:(JJ)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42a104.  v0:= lcmp(v1, v3);
  #L42a108.  if v0 >= 0 then goto L42a110;
  #L42a10c.  v1:= -1I;
  #L42a10e.  goto L42a11a;
  #L42a110.  if v0 <= 0 then goto L42a118;
  #L42a114.  v1:= 1I;
  #L42a116.  goto L42a11a;
  #L42a118.  v1:= 0I;
  #L42a11a.  return v1;
}
procedure `boolean` `equals`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.equals:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L42a0b0.  if v0 == v1 then goto L42a0ca;
  #L42a0b4.  if v0 == 0 then goto L42a0c6;
  #L42a0b8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L42a0be.  v0:= temp;
  #L42a0c0.  if v0 == 0 then goto L42a0c6;
  #L42a0c4.  goto L42a0ca;
  #L42a0c6.  v0:= 0I;
  #L42a0c8.  goto L42a0cc;
  #L42a0ca.  v0:= 1I;
  #L42a0cc.  return v0;
}
procedure `io.reactivex.functions.BiPredicate` `equalsPredicate`() @signature `Lio/reactivex/internal/functions/ObjectHelper;.equalsPredicate:()Lio/reactivex/functions/BiPredicate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42a19c.  v0:= `@@io.reactivex.internal.functions.ObjectHelper.a` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L42a1a0.  return v0 @kind object;
}
procedure `int` `hashCode`(`java.lang.Object` v0 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.hashCode:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L42a12c.  if v0 == 0 then goto L42a13a;
  #L42a130.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L42a136.  v0:= temp;
  #L42a138.  goto L42a13c;
  #L42a13a.  v0:= 0I;
  #L42a13c.  return v0;
}
procedure `long` `requireNonNull`(`long` v1 , `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L42a1d8.  v1:= new `java.lang.InternalError`;
  #L42a1dc.  v2:= new `java.lang.StringBuilder`;
  #L42a1e0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a1e6.  v0:= "Null check on a primitive: " @kind object;
  #L42a1ea.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a1f0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a1f6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a1fc.  v2:= temp @kind object;
  #L42a1fe.  call `<init>`(v1, v2) @signature `Ljava/lang/InternalError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a204.  throw v1;
}
procedure `java.lang.Object` `requireNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L42a1b4.  if v0 == 0 then goto L42a1ba;
  #L42a1b8.  return v0 @kind object;
  #L42a1ba.  v0:= new `java.lang.NullPointerException`;
  #L42a1be.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a1c4.  throw v0;
}
procedure `int` `verifyPositive`(`int` v2 , `java.lang.String` v3 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L42a150.  if v2 <= 0 then goto L42a156;
  #L42a154.  return v2;
  #L42a156.  v0:= new `java.lang.IllegalArgumentException`;
  #L42a15a.  v1:= new `java.lang.StringBuilder`;
  #L42a15e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a164.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a16a.  v3:= " > 0 required but it was " @kind object;
  #L42a16e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a174.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a17a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a180.  v2:= temp @kind object;
  #L42a182.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a188.  throw v0;
}
procedure `long` `verifyPositive`(`long` v3 , `java.lang.String` v5 @kind object) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L42a218.  v0:= 0L;
  #L42a21c.  v2:= lcmp(v3, v0);
  #L42a220.  if v2 <= 0 then goto L42a226;
  #L42a224.  return v3 @kind wide;
  #L42a226.  v0:= new `java.lang.IllegalArgumentException`;
  #L42a22a.  v1:= new `java.lang.StringBuilder`;
  #L42a22e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L42a234.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a23a.  v5:= " > 0 required but it was " @kind object;
  #L42a23e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a244.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L42a24a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L42a250.  v3:= temp @kind object;
  #L42a252.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a258.  throw v0;
}
