record `io.reactivex.internal.observers.LambdaObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.observers.LambdaConsumerIntrospection` @kind interface {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.observers.LambdaObserver.c` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.LambdaObserver.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.LambdaObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object, `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.<init>:(Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42bd44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42bd4a.  v0.`io.reactivex.internal.observers.LambdaObserver.a` @type ^`io.reactivex.functions.Consumer` := v1 @kind object;
  #L42bd4e.  v0.`io.reactivex.internal.observers.LambdaObserver.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L42bd52.  v0.`io.reactivex.internal.observers.LambdaObserver.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L42bd56.  v0.`io.reactivex.internal.observers.LambdaObserver.d` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L42bd5a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.LambdaObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42bd6c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42bd72.  return @kind void;
}
procedure `boolean` `hasCustomOnError`(`io.reactivex.internal.observers.LambdaObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.hasCustomOnError:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bcf8.  v0:= v2.`io.reactivex.internal.observers.LambdaObserver.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42bcfc.  v1:= `@@io.reactivex.internal.functions.Functions.ON_ERROR_MISSING` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42bd00.  if v0 == v1 then goto L42bd08;
  #L42bd04.  v0:= 1I;
  #L42bd06.  goto L42bd0a;
  #L42bd08.  v0:= 0I;
  #L42bd0a.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.LambdaObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bd1c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42bd22.  v0:= temp @kind object;
  #L42bd24.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42bd28.  if v0 != v1 then goto L42bd30;
  #L42bd2c.  v0:= 1I;
  #L42bd2e.  goto L42bd32;
  #L42bd30.  v0:= 0I;
  #L42bd32.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bd84.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L42bd8a.  v0:= temp;
  #L42bd8c.  if v0 != 0 then goto L42bdb4;
  #L42bd90.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42bd94.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42bd9a.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L42bd9e.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L42bda4.  goto L42bdb4;
  #L42bda6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42bda8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bdae.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42bdb4.  return @kind void;
  catch `java.lang.Throwable` @[L42bd9a..L42bda4] goto L42bda6;
}
procedure `void` `onError`(`io.reactivex.internal.observers.LambdaObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42bdd4.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L42bdda.  v0:= temp;
  #L42bddc.  if v0 != 0 then goto L42be22;
  #L42bde0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42bde4.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42bdea.  v0:= v4.`io.reactivex.internal.observers.LambdaObserver.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42bdee.  call `accept`(v0, v5) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42bdf4.  goto L42be28;
  #L42bdf6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42bdf8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bdfe.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L42be02.  v2:= 2I;
  #L42be04.  v2:= new `java.lang.Throwable`[v2];
  #L42be08.  v3:= 0I;
  #L42be0a.  v2[v3]:= v5 @kind object;
  #L42be0e.  v5:= 1I;
  #L42be10.  v2[v5]:= v0 @kind object;
  #L42be14.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42be1a.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42be20.  goto L42be28;
  #L42be22.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42be28.  return @kind void;
  catch `java.lang.Throwable` @[L42bdea..L42bdf4] goto L42bdf6;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42be48.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/observers/LambdaObserver;.isDisposed:()Z` @kind virtual;
  #L42be4e.  v0:= temp;
  #L42be50.  if v0 != 0 then goto L42be80;
  #L42be54.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42be58.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42be5e.  goto L42be80;
  #L42be60.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42be62.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42be68.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42be6e.  v0:= temp @kind object;
  #L42be70.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42be74.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42be7a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42be80.  return @kind void;
  catch `java.lang.Throwable` @[L42be54..L42be5e] goto L42be60;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.LambdaObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bea0.  call temp:= `setOnce`(v1, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42bea6.  v0:= temp;
  #L42bea8.  if v0 == 0 then goto L42becc;
  #L42beac.  v0:= v1.`io.reactivex.internal.observers.LambdaObserver.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42beb0.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42beb6.  goto L42becc;
  #L42beb8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42beba.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42bec0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42bec6.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/observers/LambdaObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42becc.  return @kind void;
  catch `java.lang.Throwable` @[L42beac..L42beb6] goto L42beb8;
}
