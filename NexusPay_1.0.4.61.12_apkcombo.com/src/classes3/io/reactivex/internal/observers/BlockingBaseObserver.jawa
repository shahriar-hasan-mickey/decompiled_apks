record `io.reactivex.internal.observers.BlockingBaseObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.BlockingBaseObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.BlockingBaseObserver.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.BlockingBaseObserver.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.observers.BlockingBaseObserver.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BlockingBaseObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42a710.  v0:= 1I;
  #L42a712.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L42a718.  return @kind void;
}
procedure `java.lang.Object` `blockingGet`(`io.reactivex.internal.observers.BlockingBaseObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.blockingGet:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42a6a4.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L42a6aa.  v0:= temp @kind wide;
  #L42a6ac.  v2:= 0L;
  #L42a6b0.  v4:= lcmp(v0, v2);
  #L42a6b4.  if v4 == 0 then goto L42a6d8;
  #L42a6b8.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L42a6be.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L42a6c4.  goto L42a6d8;
  #L42a6c6.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L42a6c8.  call `dispose`(v5) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.dispose:()V` @kind virtual;
  #L42a6ce.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L42a6d4.  v0:= temp @kind object;
  #L42a6d6.  throw v0;
  #L42a6d8.  v0:= v5.`io.reactivex.internal.observers.BlockingBaseObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L42a6dc.  if v0 != 0 then goto L42a6e6;
  #L42a6e0.  v0:= v5.`io.reactivex.internal.observers.BlockingBaseObserver.a` @type ^`java.lang.Object` @kind object;
  #L42a6e4.  return v0 @kind object;
  #L42a6e6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L42a6ec.  v0:= temp @kind object;
  #L42a6ee.  throw v0;
  catch `java.lang.InterruptedException` @[L42a6b8..L42a6c4] goto L42a6c6;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BlockingBaseObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42a72c.  v0:= 1I;
  #L42a72e.  v1.`io.reactivex.internal.observers.BlockingBaseObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L42a732.  v0:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a736.  if v0 == 0 then goto L42a740;
  #L42a73a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42a740.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.BlockingBaseObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42a68c.  v0:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.d` @type ^`boolean` @kind boolean;
  #L42a690.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.BlockingBaseObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L42a754.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42a75a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BlockingBaseObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42a76c.  v1.`io.reactivex.internal.observers.BlockingBaseObserver.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42a770.  v0:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.d` @type ^`boolean` @kind boolean;
  #L42a774.  if v0 == 0 then goto L42a77e;
  #L42a778.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42a77e.  return @kind void;
}
