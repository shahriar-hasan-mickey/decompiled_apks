record `io.reactivex.internal.observers.ForEachWhileObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.observers.ForEachWhileObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.observers.ForEachWhileObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.observers.ForEachWhileObserver.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.observers.ForEachWhileObserver.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.observers.ForEachWhileObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this, `io.reactivex.functions.Predicate` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Action` v3 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b44c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42b452.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.a` @type ^`io.reactivex.functions.Predicate` := v1 @kind object;
  #L42b456.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L42b45a.  v0.`io.reactivex.internal.observers.ForEachWhileObserver.c` @type ^`io.reactivex.functions.Action` := v3 @kind object;
  #L42b45e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42b470.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42b476.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b424.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b42a.  v0:= temp @kind object;
  #L42b42c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b430.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b436.  v0:= temp;
  #L42b438.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b488.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.d` @type ^`boolean` @kind boolean;
  #L42b48c.  if v0 == 0 then goto L42b492;
  #L42b490.  return @kind void;
  #L42b492.  v0:= 1I;
  #L42b494.  v1.`io.reactivex.internal.observers.ForEachWhileObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L42b498.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L42b49c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L42b4a2.  goto L42b4b2;
  #L42b4a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b4a6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b4ac.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b4b2.  return @kind void;
  catch `java.lang.Throwable` @[L42b498..L42b4a2] goto L42b4a4;
}
procedure `void` `onError`(`io.reactivex.internal.observers.ForEachWhileObserver` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b4d0.  v0:= v5.`io.reactivex.internal.observers.ForEachWhileObserver.d` @type ^`boolean` @kind boolean;
  #L42b4d4.  if v0 == 0 then goto L42b4e0;
  #L42b4d8.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b4de.  return @kind void;
  #L42b4e0.  v0:= 1I;
  #L42b4e2.  v5.`io.reactivex.internal.observers.ForEachWhileObserver.d` @type ^`boolean` := v0 @kind boolean;
  #L42b4e6.  v1:= v5.`io.reactivex.internal.observers.ForEachWhileObserver.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L42b4ea.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L42b4f0.  goto L42b51a;
  #L42b4f2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b4f4.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b4fa.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L42b4fe.  v3:= 2I;
  #L42b500.  v3:= new `java.lang.Throwable`[v3];
  #L42b504.  v4:= 0I;
  #L42b506.  v3[v4]:= v6 @kind object;
  #L42b50a.  v3[v0]:= v1 @kind object;
  #L42b50e.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42b514.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b51a.  return @kind void;
  catch `java.lang.Throwable` @[L42b4e6..L42b4f0] goto L42b4f2;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.ForEachWhileObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b538.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.d` @type ^`boolean` @kind boolean;
  #L42b53c.  if v0 == 0 then goto L42b542;
  #L42b540.  return @kind void;
  #L42b542.  v0:= v1.`io.reactivex.internal.observers.ForEachWhileObserver.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L42b546.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L42b54c.  v2:= temp;
  #L42b54e.  if v2 != 0 then goto L42b55e;
  #L42b552.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @kind virtual;
  #L42b558.  call `onComplete`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onComplete:()V` @kind virtual;
  #L42b55e.  return @kind void;
  #L42b560.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42b562.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42b568.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.dispose:()V` @kind virtual;
  #L42b56e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42b574.  return @kind void;
  catch `java.lang.Throwable` @[L42b542..L42b54e] goto L42b560;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.ForEachWhileObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/observers/ForEachWhileObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42b594.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b59a.  return @kind void;
}
