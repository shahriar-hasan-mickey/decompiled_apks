record `io.reactivex.internal.observers.BiConsumerSingleObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.observers.BiConsumerSingleObserver.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.observers.BiConsumerSingleObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this, `io.reactivex.functions.BiConsumer` v1 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.<init>:(Lio/reactivex/functions/BiConsumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a59c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42a5a2.  v0.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` := v1 @kind object;
  #L42a5a6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42a5b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42a5be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a574.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42a57a.  v0:= temp @kind object;
  #L42a57c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a580.  if v0 != v1 then goto L42a588;
  #L42a584.  v0:= 1I;
  #L42a586.  goto L42a58a;
  #L42a588.  v0:= 0I;
  #L42a58a.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42a5d0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a5d4.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a5da.  v0:= v4.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L42a5de.  v1:= 0I;
  #L42a5e0.  call `accept`(v0, v1, v5) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L42a5e6.  goto L42a612;
  #L42a5e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a5ea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a5f0.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L42a5f4.  v2:= 2I;
  #L42a5f6.  v2:= new `java.lang.Throwable`[v2];
  #L42a5fa.  v3:= 0I;
  #L42a5fc.  v2[v3]:= v5 @kind object;
  #L42a600.  v5:= 1I;
  #L42a602.  v2[v5]:= v0 @kind object;
  #L42a606.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L42a60c.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a612.  return @kind void;
  catch `java.lang.Throwable` @[L42a5d0..L42a5e6] goto L42a5e8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42a630.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a636.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.BiConsumerSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/BiConsumerSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42a648.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42a64c.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L42a652.  v0:= v2.`io.reactivex.internal.observers.BiConsumerSingleObserver.a` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L42a656.  v1:= 0I;
  #L42a658.  call `accept`(v0, v3, v1) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L42a65e.  goto L42a66e;
  #L42a660.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42a662.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a668.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a66e.  return @kind void;
  catch `java.lang.Throwable` @[L42a648..L42a65e] goto L42a660;
}
