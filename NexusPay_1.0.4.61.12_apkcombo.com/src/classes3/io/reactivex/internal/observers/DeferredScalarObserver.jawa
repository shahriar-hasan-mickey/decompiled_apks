record `io.reactivex.internal.observers.DeferredScalarObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.DeferredScalarObserver.upstream` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.observers.DeferredScalarObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42b124.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L42b12a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.DeferredScalarObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b13c.  call `dispose`(v1) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @kind super;
  #L42b142.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b146.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b14c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.DeferredScalarObserver` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b160.  v0:= v2.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L42b164.  if v0 == 0 then goto L42b176;
  #L42b168.  v1:= 0I;
  #L42b16a.  v2.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42b16e.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L42b174.  goto L42b17c;
  #L42b176.  call `complete`(v2) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @kind virtual;
  #L42b17c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.DeferredScalarObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b190.  v0:= 0I;
  #L42b192.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L42b196.  call `error`(v1, v2) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42b19c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.DeferredScalarObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b1b0.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42b1b4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b1ba.  v0:= temp;
  #L42b1bc.  if v0 == 0 then goto L42b1ce;
  #L42b1c0.  v1.`io.reactivex.internal.observers.DeferredScalarObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42b1c4.  v2:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b1c8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42b1ce.  return @kind void;
}
