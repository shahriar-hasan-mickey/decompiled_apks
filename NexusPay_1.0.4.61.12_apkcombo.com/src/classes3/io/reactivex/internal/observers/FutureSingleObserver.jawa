record `io.reactivex.internal.observers.FutureSingleObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.CountDownLatch` @kind class, `io.reactivex.SingleObserver` @kind interface, `java.util.concurrent.Future` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.observers.FutureSingleObserver.a` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.observers.FutureSingleObserver.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.observers.FutureSingleObserver.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42ba78.  v0:= 1I;
  #L42ba7a.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L42ba80.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42ba84.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42ba8a.  v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L42ba8e.  return @kind void;
}
procedure `boolean` `cancel`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `boolean` v3 ) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.cancel:(Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42b8c8.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42b8cc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b8d2.  v3:= temp @kind object;
  #L42b8d4.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L42b8d8.  if v3 == v2 then goto L42b90a;
  #L42b8dc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42b8e0.  if v3 != v0 then goto L42b8e6;
  #L42b8e4.  goto L42b90a;
  #L42b8e6.  v1:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42b8ea.  call temp:= `compareAndSet`(v1, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42b8f0.  v0:= temp;
  #L42b8f2.  if v0 == 0 then goto L42b8c8;
  #L42b8f6.  if v3 == 0 then goto L42b900;
  #L42b8fa.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42b900.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42b906.  v3:= 1I;
  #L42b908.  return v3;
  #L42b90a.  v3:= 0I;
  #L42b90c.  return v3;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.FutureSingleObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42baa0.  return @kind void;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b994.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L42b99a.  v0:= temp @kind wide;
  #L42b99c.  v2:= 0L;
  #L42b9a0.  v4:= lcmp(v0, v2);
  #L42b9a4.  if v4 == 0 then goto L42b9b4;
  #L42b9a8.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L42b9ae.  call `await`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.await:()V` @kind virtual;
  #L42b9b4.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L42b9ba.  v0:= temp;
  #L42b9bc.  if v0 != 0 then goto L42b9da;
  #L42b9c0.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L42b9c4.  if v0 != 0 then goto L42b9ce;
  #L42b9c8.  v0:= v5.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` @kind object;
  #L42b9cc.  return v0 @kind object;
  #L42b9ce.  v1:= new `java.util.concurrent.ExecutionException`;
  #L42b9d2.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L42b9d8.  throw v1;
  #L42b9da.  v0:= new `java.util.concurrent.CancellationException`;
  #L42b9de.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L42b9e4.  throw v0;
}
procedure `java.lang.Object` `get`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this, `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b9f8.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L42b9fe.  v0:= temp @kind wide;
  #L42ba00.  v2:= 0L;
  #L42ba04.  v4:= lcmp(v0, v2);
  #L42ba08.  if v4 == 0 then goto L42ba34;
  #L42ba0c.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L42ba12.  call temp:= `await`(v5, v6, v8) @signature `Ljava/util/concurrent/CountDownLatch;.await:(JLjava/util/concurrent/TimeUnit;)Z` @kind virtual;
  #L42ba18.  v0:= temp;
  #L42ba1a.  if v0 == 0 then goto L42ba20;
  #L42ba1e.  goto L42ba34;
  #L42ba20.  v0:= new `java.util.concurrent.TimeoutException`;
  #L42ba24.  call temp:= `timeoutMessage`(v6, v8) @signature `Lio/reactivex/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L42ba2a.  v6:= temp @kind object;
  #L42ba2c.  call `<init>`(v0, v6) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42ba32.  throw v0;
  #L42ba34.  call temp:= `isCancelled`(v5) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @kind virtual;
  #L42ba3a.  v6:= temp;
  #L42ba3c.  if v6 != 0 then goto L42ba5a;
  #L42ba40.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` @kind object;
  #L42ba44.  if v6 != 0 then goto L42ba4e;
  #L42ba48.  v6:= v5.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` @kind object;
  #L42ba4c.  return v6 @kind object;
  #L42ba4e.  v7:= new `java.util.concurrent.ExecutionException`;
  #L42ba52.  call `<init>`(v7, v6) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L42ba58.  throw v7;
  #L42ba5a.  v6:= new `java.util.concurrent.CancellationException`;
  #L42ba5e.  call `<init>`(v6) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L42ba64.  throw v6;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b920.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42b924.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42b92a.  v0:= temp @kind object;
  #L42b92c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42b930.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42b936.  v0:= temp;
  #L42b938.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b94c.  call temp:= `isDone`(v1) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @kind virtual;
  #L42b952.  v0:= temp;
  #L42b954.  return v0;
}
procedure `boolean` `isDone`(`io.reactivex.internal.observers.FutureSingleObserver` v5 @kind this) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.isDone:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42b968.  call temp:= `getCount`(v5) @signature `Ljava/util/concurrent/CountDownLatch;.getCount:()J` @kind virtual;
  #L42b96e.  v0:= temp @kind wide;
  #L42b970.  v2:= 0L;
  #L42b974.  v4:= lcmp(v0, v2);
  #L42b978.  if v4 != 0 then goto L42b980;
  #L42b97c.  v0:= 1I;
  #L42b97e.  goto L42b982;
  #L42b980.  v0:= 0I;
  #L42b982.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bab4.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bab8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42babe.  v0:= temp @kind object;
  #L42bac0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42bac4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42bac8.  if v0 != v1 then goto L42bad4;
  #L42bacc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42bad2.  return @kind void;
  #L42bad4.  v2.`io.reactivex.internal.observers.FutureSingleObserver.b` @type ^`java.lang.Throwable` := v3 @kind object;
  #L42bad8.  v1:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42badc.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42bae2.  v0:= temp;
  #L42bae4.  if v0 == 0 then goto L42bab4;
  #L42bae8.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42baee.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.FutureSingleObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42bb00.  v0:= v1.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bb04.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42bb0a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.observers.FutureSingleObserver` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/observers/FutureSingleObserver;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42bb1c.  v0:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bb20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42bb26.  v0:= temp @kind object;
  #L42bb28.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42bb2c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42bb30.  if v0 != v1 then goto L42bb36;
  #L42bb34.  return @kind void;
  #L42bb36.  v2.`io.reactivex.internal.observers.FutureSingleObserver.a` @type ^`java.lang.Object` := v3 @kind object;
  #L42bb3a.  v3:= v2.`io.reactivex.internal.observers.FutureSingleObserver.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42bb3e.  call temp:= `compareAndSet`(v3, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42bb44.  call `countDown`(v2) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42bb4a.  return @kind void;
}
