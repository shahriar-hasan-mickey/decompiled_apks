record `io.reactivex.internal.observers.BasicFuseableObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observer` @kind interface, `io.reactivex.internal.fuseable.QueueDisposable` @kind interface {
  `boolean` `io.reactivex.internal.observers.BasicFuseableObserver.done` @AccessFlag PROTECTED;
  `io.reactivex.Observer` `io.reactivex.internal.observers.BasicFuseableObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.internal.fuseable.QueueDisposable` `io.reactivex.internal.observers.BasicFuseableObserver.qd` @AccessFlag PROTECTED;
  `int` `io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @AccessFlag PROTECTED;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.observers.BasicFuseableObserver.upstream` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a380.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42a386.  v0.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42a38a.  return @kind void;
}
procedure `void` `afterDownstream`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @AccessFlag PROTECTED {
    temp;

  #L42a39c.  return @kind void;
}
procedure `boolean` `beforeDownstream`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L42a2b4.  v0:= 1I;
  #L42a2b6.  return v0;
}
procedure `void` `clear`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a3b0.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L42a3b4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L42a3ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a3cc.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a3d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42a3d6.  return @kind void;
}
procedure `void` `fail`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L42a3e8.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42a3ee.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a3f2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42a3f8.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42a3fe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a2c8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a2cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42a2d2.  v0:= temp;
  #L42a2d4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a2e8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L42a2ec.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42a2f2.  v0:= temp;
  #L42a2f4.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42a308.  v2:= new `java.lang.UnsupportedOperationException`;
  #L42a30c.  v0:= "Should not be called!" @kind object;
  #L42a310.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a316.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.observers.BasicFuseableObserver` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;

  #L42a328.  v1:= new `java.lang.UnsupportedOperationException`;
  #L42a32c.  v2:= "Should not be called!" @kind object;
  #L42a330.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42a336.  throw v1;
}
procedure `void` `onComplete`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a410.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L42a414.  if v0 == 0 then goto L42a41a;
  #L42a418.  return @kind void;
  #L42a41a.  v0:= 1I;
  #L42a41c.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42a420.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a424.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42a42a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a43c.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L42a440.  if v0 == 0 then goto L42a44c;
  #L42a444.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42a44a.  return @kind void;
  #L42a44c.  v0:= 1I;
  #L42a44e.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L42a452.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a456.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42a45c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.observers.BasicFuseableObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42a470.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a474.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42a47a.  v0:= temp;
  #L42a47c.  if v0 == 0 then goto L42a4b0;
  #L42a480.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.upstream` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42a484.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L42a488.  if v0 == 0 then goto L42a494;
  #L42a48c.  v2:= (`io.reactivex.internal.fuseable.QueueDisposable`) v2 @kind object;
  #L42a490.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` := v2 @kind object;
  #L42a494.  call temp:= `beforeDownstream`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.beforeDownstream:()Z` @kind virtual;
  #L42a49a.  v2:= temp;
  #L42a49c.  if v2 == 0 then goto L42a4b0;
  #L42a4a0.  v2:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42a4a4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42a4aa.  call `afterDownstream`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.afterDownstream:()V` @kind virtual;
  #L42a4b0.  return @kind void;
}
procedure `int` `transitiveBoundaryFusion`(`io.reactivex.internal.observers.BasicFuseableObserver` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;

  #L42a348.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L42a34c.  if v0 == 0 then goto L42a36a;
  #L42a350.  v1:= v3 ^& 4;
  #L42a354.  if v1 != 0 then goto L42a36a;
  #L42a358.  call temp:= `requestFusion`(v0, v3) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L42a35e.  v3:= temp;
  #L42a360.  if v3 == 0 then goto L42a368;
  #L42a364.  v2.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int` := v3;
  #L42a368.  return v3;
  #L42a36a.  v3:= 0I;
  #L42a36c.  return v3;
}
