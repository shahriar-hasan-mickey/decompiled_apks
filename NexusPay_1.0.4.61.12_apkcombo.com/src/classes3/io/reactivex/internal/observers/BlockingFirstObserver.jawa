record `io.reactivex.internal.observers.BlockingFirstObserver` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.observers.BlockingBaseObserver` @kind class {
}
procedure `void` `<init>`(`io.reactivex.internal.observers.BlockingFirstObserver` v0 @kind this) @signature `Lio/reactivex/internal/observers/BlockingFirstObserver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42a790.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BlockingBaseObserver;.<init>:()V` @kind direct;
  #L42a796.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.observers.BlockingFirstObserver` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/BlockingFirstObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a7a8.  v0:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.a` @type ^`java.lang.Object` @kind object;
  #L42a7ac.  if v0 != 0 then goto L42a7b4;
  #L42a7b0.  v1.`io.reactivex.internal.observers.BlockingBaseObserver.b` @type ^`java.lang.Throwable` := v2 @kind object;
  #L42a7b4.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42a7ba.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.observers.BlockingFirstObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/BlockingFirstObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42a7cc.  v0:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.a` @type ^`java.lang.Object` @kind object;
  #L42a7d0.  if v0 != 0 then goto L42a7e8;
  #L42a7d4.  v1.`io.reactivex.internal.observers.BlockingBaseObserver.a` @type ^`java.lang.Object` := v2 @kind object;
  #L42a7d8.  v2:= v1.`io.reactivex.internal.observers.BlockingBaseObserver.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42a7dc.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42a7e2.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L42a7e8.  return @kind void;
}
