record `io.reactivex.internal.observers.QueueDrainObserver` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.internal.observers.b` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.internal.util.ObservableQueueDrain` @kind interface {
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.cancelled` @AccessFlag PROTECTED_VOLATILE;
  `boolean` `io.reactivex.internal.observers.QueueDrainObserver.done` @AccessFlag PROTECTED_VOLATILE;
  `io.reactivex.Observer` `io.reactivex.internal.observers.QueueDrainObserver.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Throwable` `io.reactivex.internal.observers.QueueDrainObserver.error` @AccessFlag PROTECTED;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.observers.QueueDrainObserver.queue` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.fuseable.SimplePlainQueue` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42bfb8.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/b;.<init>:()V` @kind direct;
  #L42bfbe.  v0.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42bfc2.  v0.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L42bfc6.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.observers.QueueDrainObserver` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L42bfd8.  return @kind void;
}
procedure `boolean` `cancelled`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.cancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42beec.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L42bef0.  return v0;
}
procedure `boolean` `done`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.done:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42bf04.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L42bf08.  return v0;
}
procedure `boolean` `enter`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42bf1c.  v0:= v1.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bf20.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42bf26.  v0:= temp;
  #L42bf28.  if v0 != 0 then goto L42bf30;
  #L42bf2c.  v0:= 1I;
  #L42bf2e.  goto L42bf32;
  #L42bf30.  v0:= 0I;
  #L42bf32.  return v0;
}
procedure `java.lang.Throwable` `error`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.error:()Ljava/lang/Throwable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42bfa0.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L42bfa4.  return v0 @kind object;
}
procedure `boolean` `fastEnter`(`io.reactivex.internal.observers.QueueDrainObserver` v3 @kind this) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42bf44.  v0:= v3.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bf48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42bf4e.  v0:= temp;
  #L42bf50.  v1:= 1I;
  #L42bf52.  v2:= 0I;
  #L42bf54.  if v0 != 0 then goto L42bf6a;
  #L42bf58.  v0:= v3.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bf5c.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L42bf62.  v0:= temp;
  #L42bf64.  if v0 == 0 then goto L42bf6a;
  #L42bf68.  goto L42bf6c;
  #L42bf6a.  v1:= 0I;
  #L42bf6c.  return v1;
}
procedure `void` `fastPathEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42bfec.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42bff0.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42bff4.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bff8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42bffe.  v2:= temp;
  #L42c000.  if v2 != 0 then goto L42c02e;
  #L42c004.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42c008.  v3:= 0I;
  #L42c00a.  v4:= 1I;
  #L42c00c.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L42c012.  v2:= temp;
  #L42c014.  if v2 == 0 then goto L42c02e;
  #L42c018.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L42c01e.  v6:= -1I;
  #L42c020.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L42c026.  v6:= temp;
  #L42c028.  if v6 != 0 then goto L42c042;
  #L42c02c.  return @kind void;
  #L42c02e.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42c034.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L42c03a.  v6:= temp;
  #L42c03c.  if v6 != 0 then goto L42c042;
  #L42c040.  return @kind void;
  #L42c042.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L42c048.  return @kind void;
}
procedure `void` `fastPathOrderedEmit`(`io.reactivex.internal.observers.QueueDrainObserver` v5 @kind this, `java.lang.Object` v6 @kind object, `boolean` v7 , `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c05c.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42c060.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L42c064.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42c068.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42c06e.  v2:= temp;
  #L42c070.  if v2 != 0 then goto L42c0b2;
  #L42c074.  v2:= v5.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42c078.  v3:= 0I;
  #L42c07a.  v4:= 1I;
  #L42c07c.  call temp:= `compareAndSet`(v2, v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L42c082.  v2:= temp;
  #L42c084.  if v2 == 0 then goto L42c0b2;
  #L42c088.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L42c08e.  v2:= temp;
  #L42c090.  if v2 == 0 then goto L42c0aa;
  #L42c094.  call `accept`(v5, v0, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind virtual;
  #L42c09a.  v6:= -1I;
  #L42c09c.  call temp:= `leave`(v5, v6) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L42c0a2.  v6:= temp;
  #L42c0a4.  if v6 != 0 then goto L42c0c6;
  #L42c0a8.  return @kind void;
  #L42c0aa.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42c0b0.  goto L42c0c6;
  #L42c0b2.  call temp:= `offer`(v1, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42c0b8.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L42c0be.  v6:= temp;
  #L42c0c0.  if v6 != 0 then goto L42c0c6;
  #L42c0c4.  return @kind void;
  #L42c0c6.  call `drainLoop`(v1, v0, v7, v8, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L42c0cc.  return @kind void;
}
procedure `int` `leave`(`io.reactivex.internal.observers.QueueDrainObserver` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42bf80.  v0:= v1.`io.reactivex.internal.observers.c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L42bf84.  call temp:= `addAndGet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L42bf8a.  v2:= temp;
  #L42bf8c.  return v2;
}
