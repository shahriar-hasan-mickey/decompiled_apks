record `io.reactivex.internal.observers.DeferredScalarDisposable` @kind class @AccessFlag PUBLIC extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `io.reactivex.internal.observers.DeferredScalarDisposable.value` @AccessFlag PROTECTED;
}
global `long` `@@io.reactivex.internal.observers.DeferredScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.observers.DeferredScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42afe4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L42afea.  v0.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42afee.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42b000.  v0:= 32I;
  #L42b004.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42b00a.  v0:= 0I;
  #L42b00c.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L42b010.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42b024.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42b02a.  v0:= temp;
  #L42b02c.  v0:= v0 ^& 54;
  #L42b030.  if v0 == 0 then goto L42b036;
  #L42b034.  return @kind void;
  #L42b036.  v0:= 2I;
  #L42b038.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42b03e.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b042.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42b048.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42b05c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42b062.  v0:= temp;
  #L42b064.  v1:= v0 ^& 54;
  #L42b068.  if v1 == 0 then goto L42b06e;
  #L42b06c.  return @kind void;
  #L42b06e.  v1:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b072.  v2:= 8I;
  #L42b076.  if v0 != v2 then goto L42b092;
  #L42b07a.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v4 @kind object;
  #L42b07e.  v4:= 16I;
  #L42b082.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42b088.  v4:= 0I;
  #L42b08a.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42b090.  goto L42b0a0;
  #L42b092.  v0:= 2I;
  #L42b094.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42b09a.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L42b0a0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42b0a6.  v4:= temp;
  #L42b0a8.  v0:= 4I;
  #L42b0aa.  if v4 == v0 then goto L42b0b4;
  #L42b0ae.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42b0b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42b0c8.  v0:= 4I;
  #L42b0ca.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L42b0d0.  v0:= 0I;
  #L42b0d2.  v1.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v0 @kind object;
  #L42b0d6.  return @kind void;
}
procedure `void` `error`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.error:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42b0e8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42b0ee.  v0:= temp;
  #L42b0f0.  v0:= v0 ^& 54;
  #L42b0f4.  if v0 == 0 then goto L42b100;
  #L42b0f8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42b0fe.  return @kind void;
  #L42b100.  v0:= 2I;
  #L42b102.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42b108.  v0:= v1.`io.reactivex.internal.observers.DeferredScalarDisposable.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L42b10c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42b112.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42af0c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42af12.  v0:= temp;
  #L42af14.  v1:= 4I;
  #L42af16.  if v0 != v1 then goto L42af1e;
  #L42af1a.  v0:= 1I;
  #L42af1c.  goto L42af20;
  #L42af1e.  v0:= 0I;
  #L42af20.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42af34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42af3a.  v0:= temp;
  #L42af3c.  v1:= 16I;
  #L42af40.  if v0 == v1 then goto L42af48;
  #L42af44.  v0:= 1I;
  #L42af46.  goto L42af4a;
  #L42af48.  v0:= 0I;
  #L42af4a.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.observers.DeferredScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L42afac.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L42afb2.  v0:= temp;
  #L42afb4.  v1:= 0I;
  #L42afb6.  v2:= 16I;
  #L42afba.  if v0 != v2 then goto L42afd2;
  #L42afbe.  v0:= v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` @kind object;
  #L42afc2.  v3.`io.reactivex.internal.observers.DeferredScalarDisposable.value` @type ^`java.lang.Object` := v1 @kind object;
  #L42afc6.  v1:= 32I;
  #L42afca.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42afd0.  return v0 @kind object;
  #L42afd2.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.observers.DeferredScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L42af84.  v0:= 2I;
  #L42af86.  v2:= v2 ^& v0 @kind int;
  #L42af88.  if v2 == 0 then goto L42af98;
  #L42af8c.  v2:= 8I;
  #L42af90.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42af96.  return v0;
  #L42af98.  v2:= 0I;
  #L42af9a.  return v2;
}
procedure `boolean` `tryDispose`(`io.reactivex.internal.observers.DeferredScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.tryDispose:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L42af5c.  v0:= 4I;
  #L42af5e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L42af64.  v1:= temp;
  #L42af66.  if v1 == v0 then goto L42af6e;
  #L42af6a.  v0:= 1I;
  #L42af6c.  goto L42af70;
  #L42af6e.  v0:= 0I;
  #L42af70.  return v0;
}
