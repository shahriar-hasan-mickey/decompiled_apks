record `io.reactivex.internal.operators.maybe.MaybeNever` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
}
global `io.reactivex.internal.operators.maybe.MaybeNever` `@@io.reactivex.internal.operators.maybe.MaybeNever.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/maybe/MaybeNever;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4589cc.  v0:= new `io.reactivex.internal.operators.maybe.MaybeNever`;
  #L4589d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeNever;.<init>:()V` @kind direct;
  #L4589d6.  `@@io.reactivex.internal.operators.maybe.MaybeNever.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeNever` := v0 @kind object;
  #L4589da.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeNever` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeNever;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4589ec.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L4589f2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeNever` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeNever;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L458a04.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.NEVER` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L458a08.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L458a0e.  return @kind void;
}
