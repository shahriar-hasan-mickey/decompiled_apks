record `io.reactivex.internal.operators.maybe.MaybeAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeAmb$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.disposables.CompositeDisposable` v2 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/disposables/CompositeDisposable;Ljava/util/concurrent/atomic/AtomicBoolean;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L453580.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L453586.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L45358a.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L45358e.  v0.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L453592.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4535a4.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4535a8.  v1:= 0I;
  #L4535aa.  v2:= 1I;
  #L4535ac.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4535b2.  v0:= temp;
  #L4535b4.  if v0 == 0 then goto L4535da;
  #L4535b8.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4535bc.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4535c0.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4535c6.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4535ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4535d0.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4535d4.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4535da.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4535ec.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4535f0.  v1:= 0I;
  #L4535f2.  v2:= 1I;
  #L4535f4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4535fa.  v0:= temp;
  #L4535fc.  if v0 == 0 then goto L453624;
  #L453600.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L453604.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L453608.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45360e.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L453612.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L453618.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45361c.  call `onError`(v0, v4) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453622.  goto L45362a;
  #L453624.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45362a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45363c.  v1.`io.reactivex.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L453640.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L453644.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45364a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeAmb$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeAmb$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45365c.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L453660.  v1:= 0I;
  #L453662.  v2:= 1I;
  #L453664.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L45366a.  v0:= temp;
  #L45366c.  if v0 == 0 then goto L453692;
  #L453670.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L453674.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L453678.  call temp:= `delete`(v0, v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45367e.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L453682.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L453688.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeAmb$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45368c.  call `onSuccess`(v0, v4) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L453692.  return @kind void;
}
