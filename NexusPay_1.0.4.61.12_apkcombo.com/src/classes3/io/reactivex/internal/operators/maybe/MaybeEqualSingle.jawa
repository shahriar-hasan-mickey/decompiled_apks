record `io.reactivex.internal.operators.maybe.MaybeEqualSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.a` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.maybe.MaybeEqualSingle.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L455d14.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L455d1a.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.a` @type ^`io.reactivex.MaybeSource` := v1 @kind object;
  #L455d1e.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.b` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L455d22.  v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.c` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L455d26.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L455d38.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a`;
  #L455d3c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L455d40.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L455d46.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L455d4c.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.a` @type ^`io.reactivex.MaybeSource` @kind object;
  #L455d50.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeEqualSingle.b` @type ^`io.reactivex.MaybeSource` @kind object;
  #L455d54.  call `c`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.c:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @kind virtual;
  #L455d5a.  return @kind void;
}
