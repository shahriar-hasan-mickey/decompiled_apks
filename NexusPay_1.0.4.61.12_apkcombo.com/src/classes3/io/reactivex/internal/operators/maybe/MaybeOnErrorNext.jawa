record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.maybe.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext` v0 @kind this, `io.reactivex.MaybeSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.<init>:(Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L458f2c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/a;.<init>:(Lio/reactivex/MaybeSource;)V` @kind direct;
  #L458f32.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L458f36.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @type ^`boolean` := v3 @kind boolean;
  #L458f3a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext` v4 @kind this, `io.reactivex.MaybeObserver` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L458f4c.  v0:= v4.`io.reactivex.internal.operators.maybe.a.source` @type ^`io.reactivex.MaybeSource` @kind object;
  #L458f50.  v1:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a`;
  #L458f54.  v2:= v4.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L458f58.  v3:= v4.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext.b` @type ^`boolean` @kind boolean;
  #L458f5c.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L458f62.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L458f68.  return @kind void;
}
