record `io.reactivex.internal.operators.maybe.MaybeCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45482c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L454832.  v0.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L454836.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L454848.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45484e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454744.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45474a.  v0:= temp @kind object;
  #L45474c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L454750.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L454756.  v0:= temp;
  #L454758.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454860.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454866.  v0:= temp @kind object;
  #L454868.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45486c.  if v0 == v1 then goto L4548a8;
  #L454870.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L454876.  v0:= temp @kind object;
  #L454878.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45487c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L454880.  if v0 == v1 then goto L4548a8;
  #L454884.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454888.  call `onComplete`(v1) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45488e.  if v0 == 0 then goto L4548a8;
  #L454892.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L454898.  goto L4548a8;
  #L45489a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45489c.  if v0 == 0 then goto L4548a6;
  #L4548a0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4548a6.  throw v1;
  #L4548a8.  return @kind void;
  catch `java.lang.Throwable` @[L454884..L45488e] goto L45489a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4548c8.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4548ce.  v0:= temp;
  #L4548d0.  if v0 != 0 then goto L4548da;
  #L4548d4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4548da.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4548ec.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4548f2.  v0:= temp @kind object;
  #L4548f4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4548f8.  if v0 == v1 then goto L454952;
  #L4548fc.  call temp:= `getAndSet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L454902.  v0:= temp @kind object;
  #L454904.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L454908.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45490c.  if v0 == v1 then goto L454952;
  #L454910.  if v4 != 0 then goto L45492e;
  #L454914.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454918.  v1:= new `java.lang.NullPointerException`;
  #L45491c.  v2:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L454920.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L454926.  call `onError`(v4, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45492c.  goto L454938;
  #L45492e.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454932.  call `onSuccess`(v1, v4) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L454938.  if v0 == 0 then goto L454952;
  #L45493c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L454942.  goto L454952;
  #L454944.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L454946.  if v0 == 0 then goto L454950;
  #L45494a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L454950.  throw v4;
  #L454952.  return @kind void;
  catch `java.lang.Throwable` @[L454914..L454938] goto L454944;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454970.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L454974.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L45497a.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L454980.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L454994.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45499a.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4547e8.  v0:= 2I;
  #L4547ea.  v0:= new `java.lang.Object`[v0];
  #L4547ee.  v1:= constclass @type ^`io.reactivex.internal.operators.maybe.MaybeCreate$a` @kind object;
  #L4547f2.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L4547f8.  v1:= temp @kind object;
  #L4547fa.  v2:= 0I;
  #L4547fc.  v0[v2]:= v1 @kind object;
  #L454800.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L454806.  v1:= temp @kind object;
  #L454808.  v2:= 1I;
  #L45480a.  v0[v2]:= v1 @kind object;
  #L45480e.  v1:= "%s{%s}" @kind object;
  #L454812.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L454818.  v0:= temp @kind object;
  #L45481a.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.maybe.MaybeCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45476c.  if v3 != 0 then goto L45477e;
  #L454770.  v3:= new `java.lang.NullPointerException`;
  #L454774.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L454778.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45477e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454784.  v0:= temp @kind object;
  #L454786.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45478a.  if v0 == v1 then goto L4547c8;
  #L45478e.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L454794.  v0:= temp @kind object;
  #L454796.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45479a.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45479e.  if v0 == v1 then goto L4547c8;
  #L4547a2.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeCreate$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4547a6.  call `onError`(v1, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4547ac.  if v0 == 0 then goto L4547b6;
  #L4547b0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4547b6.  v3:= 1I;
  #L4547b8.  return v3;
  #L4547ba.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4547bc.  if v0 == 0 then goto L4547c6;
  #L4547c0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4547c6.  throw v3;
  #L4547c8.  v3:= 0I;
  #L4547ca.  return v3;
  catch `java.lang.Throwable` @[L4547a2..L4547ac] goto L4547ba;
}
