record `io.reactivex.internal.operators.maybe.MaybeZipIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.<init>:(Ljava/lang/Iterable;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45b3bc.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L45b3c2.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` := v1 @kind object;
  #L45b3c6.  v0.`io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45b3ca.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeZipIterable` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45b3dc.  v0:= 8I;
  #L45b3e0.  v0:= new `io.reactivex.MaybeSource`[v0];
  #L45b3e4.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.a` @type ^`java.lang.Iterable` @kind object;
  #L45b3e8.  call temp:= `iterator`(v1) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45b3ee.  v1:= temp @kind object;
  #L45b3f0.  v2:= 0I;
  #L45b3f2.  v3:= 0I;
  #L45b3f4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45b3fa.  v4:= temp;
  #L45b3fc.  if v4 == 0 then goto L45b44a;
  #L45b400.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45b406.  v4:= temp @kind object;
  #L45b408.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L45b40c.  if v4 != 0 then goto L45b426;
  #L45b410.  v0:= new `java.lang.NullPointerException`;
  #L45b414.  v1:= "One of the sources is null" @kind object;
  #L45b418.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b41e.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45b424.  return @kind void;
  #L45b426.  v5:= length @variable v0;
  #L45b428.  if v3 != v5 then goto L45b43e;
  #L45b42c.  v5:= v3 ^> 2;
  #L45b430.  v5:= v5 + v3 @kind int;
  #L45b432.  call temp:= `copyOf`(v0, v5) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L45b438.  v0:= temp @kind object;
  #L45b43a.  v0:= (`io.reactivex.MaybeSource`[]) v0 @kind object;
  #L45b43e.  v5:= v3 + 1;
  #L45b442.  v0[v3]:= v4 @kind object;
  #L45b446.  v3:= v5;
  #L45b448.  goto L45b3f4;
  #L45b44a.  if v3 != 0 then goto L45b456;
  #L45b44e.  call `complete`(v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45b454.  return @kind void;
  #L45b456.  v1:= 1I;
  #L45b458.  if v3 != v1 then goto L45b47c;
  #L45b45c.  v0:= v0[v2] @kind object;
  #L45b460.  v1:= new `io.reactivex.internal.operators.maybe.MaybeMap$a`;
  #L45b464.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipIterable$a`;
  #L45b468.  call `<init>`(v2, v6) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipIterable$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipIterable;)V` @kind direct;
  #L45b46e.  call `<init>`(v1, v7, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L45b474.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45b47a.  return @kind void;
  #L45b47c.  v1:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$b`;
  #L45b480.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeZipIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45b484.  call `<init>`(v1, v7, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L45b48a.  call `onSubscribe`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45b490.  if v2 >= v3 then goto L45b4ba;
  #L45b494.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @kind virtual;
  #L45b49a.  v7:= temp;
  #L45b49c.  if v7 == 0 then goto L45b4a2;
  #L45b4a0.  return @kind void;
  #L45b4a2.  v7:= v0[v2] @kind object;
  #L45b4a6.  v4:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L45b4aa.  v4:= v4[v2] @kind object;
  #L45b4ae.  call `subscribe`(v7, v4) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45b4b4.  v2:= v2 + 1;
  #L45b4b8.  goto L45b490;
  #L45b4ba.  return @kind void;
  #L45b4bc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45b4be.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45b4c4.  call `error`(v0, v7) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45b4ca.  return @kind void;
  catch `java.lang.Throwable` @[L45b3e4..L45b446] goto L45b4bc;
}
