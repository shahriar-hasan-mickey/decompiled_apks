record `io.reactivex.internal.operators.maybe.MaybeFromAction` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `java.util.concurrent.Callable` @kind interface {
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.maybe.MaybeFromAction.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v0 @kind this, `io.reactivex.functions.Action` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.<init>:(Lio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L457454.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L45745a.  v0.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` := v1 @kind object;
  #L45745e.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457434.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` @kind object;
  #L457438.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L45743e.  v0:= 0I;
  #L457440.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromAction` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromAction;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L457470.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L457476.  v0:= temp @kind object;
  #L457478.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45747e.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L457484.  v1:= temp;
  #L457486.  if v1 != 0 then goto L4574ca;
  #L45748a.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFromAction.a` @type ^`io.reactivex.functions.Action` @kind object;
  #L45748e.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L457494.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L45749a.  v0:= temp;
  #L45749c.  if v0 != 0 then goto L4574ca;
  #L4574a0.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L4574a6.  goto L4574ca;
  #L4574a8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4574aa.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4574b0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4574b6.  v0:= temp;
  #L4574b8.  if v0 != 0 then goto L4574c4;
  #L4574bc.  call `onError`(v3, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4574c2.  goto L4574ca;
  #L4574c4.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4574ca.  return @kind void;
  catch `java.lang.Throwable` @[L45748a..L457494] goto L4574a8;
}
