record `io.reactivex.internal.operators.maybe.MaybeDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4552e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4552ee.  v0.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4552f2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455304.  v0:= 0I;
  #L455306.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` := v0 @kind object;
  #L45530a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45530e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L455314.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L455318.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45531c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4552c8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4552cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4552d2.  v0:= temp;
  #L4552d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455330.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L455334.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L455338.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45533c.  if v0 == 0 then goto L45534c;
  #L455340.  v1:= 0I;
  #L455342.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L455346.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45534c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L455360.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L455364.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L455368.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45536c.  if v0 == 0 then goto L45537c;
  #L455370.  v1:= 0I;
  #L455372.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L455376.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45537c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455390.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L455394.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45539a.  v0:= temp;
  #L45539c.  if v0 == 0 then goto L4553ae;
  #L4553a0.  v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4553a4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4553a8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4553ae.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeDetach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDetach$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4553c0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4553c4.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4553c8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4553cc.  if v0 == 0 then goto L4553dc;
  #L4553d0.  v1:= 0I;
  #L4553d2.  v2.`io.reactivex.internal.operators.maybe.MaybeDetach$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4553d6.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4553dc.  return @kind void;
}
