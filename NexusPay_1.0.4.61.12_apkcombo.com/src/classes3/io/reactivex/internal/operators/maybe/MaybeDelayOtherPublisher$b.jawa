record `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.b` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L454d18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L454d1e.  v0.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L454d22.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454d34.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @type ^`java.lang.Throwable` @kind object;
  #L454d38.  if v0 == 0 then goto L454d48;
  #L454d3c.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454d40.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L454d46.  goto L454d66;
  #L454d48.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.b` @type ^`java.lang.Object` @kind object;
  #L454d4c.  if v0 == 0 then goto L454d5c;
  #L454d50.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454d54.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L454d5a.  goto L454d66;
  #L454d5c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454d60.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L454d66.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L454d78.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.c` @type ^`java.lang.Throwable` @kind object;
  #L454d7c.  if v0 != 0 then goto L454d8c;
  #L454d80.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454d84.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L454d8a.  goto L454db2;
  #L454d8c.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L454d90.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L454d94.  v3:= 2I;
  #L454d96.  v3:= new `java.lang.Throwable`[v3];
  #L454d9a.  v4:= 0I;
  #L454d9c.  v3[v4]:= v0 @kind object;
  #L454da0.  v0:= 1I;
  #L454da2.  v3[v0]:= v6 @kind object;
  #L454da6.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L454dac.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L454db2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454dc4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L454dca.  v2:= temp @kind object;
  #L454dcc.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L454dd0.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L454dd4.  if v2 == v0 then goto L454dea;
  #L454dd8.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454dde.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L454de4.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onComplete:()V` @kind virtual;
  #L454dea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeDelayOtherPublisher$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeDelayOtherPublisher$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454dfc.  v0:= 9223372036854775807L;
  #L454e06.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L454e0c.  return @kind void;
}
