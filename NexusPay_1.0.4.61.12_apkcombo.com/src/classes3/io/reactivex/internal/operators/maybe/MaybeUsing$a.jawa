record `io.reactivex.internal.operators.maybe.MaybeUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45ac84.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L45ac8a.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L45ac8e.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L45ac92.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` := v4 @kind boolean;
  #L45ac96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45acd4.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45acda.  v0:= temp @kind object;
  #L45acdc.  if v0 == v2 then goto L45acfa;
  #L45ace0.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45ace4.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45acea.  goto L45acfa;
  #L45acec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45acee.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45acf4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45acfa.  return @kind void;
  catch `java.lang.Throwable` @[L45ace0..L45acea] goto L45acec;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aca8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45acac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45acb2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45acb6.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45acba.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L45acc0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ac64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ac68.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L45ac6e.  v0:= temp;
  #L45ac70.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45ad18.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ad1c.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45ad20.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45ad24.  if v0 == 0 then goto L45ad54;
  #L45ad28.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ad2e.  v0:= temp @kind object;
  #L45ad30.  if v0 == v2 then goto L45ad52;
  #L45ad34.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45ad38.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45ad3e.  goto L45ad54;
  #L45ad40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ad42.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45ad48.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ad4c.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ad52.  return @kind void;
  #L45ad54.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ad58.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45ad5e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45ad62.  if v0 != 0 then goto L45ad6c;
  #L45ad66.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L45ad6c.  return @kind void;
  catch `java.lang.Throwable` @[L45ad34..L45ad3e] goto L45ad40;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45ad8c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ad90.  v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45ad94.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45ad98.  if v0 == 0 then goto L45adde;
  #L45ad9c.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ada2.  v0:= temp @kind object;
  #L45ada4.  if v0 == v4 then goto L45addc;
  #L45ada8.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45adac.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45adb2.  goto L45adde;
  #L45adb4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45adb6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45adbc.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L45adc0.  v2:= 2I;
  #L45adc2.  v2:= new `java.lang.Throwable`[v2];
  #L45adc6.  v3:= 0I;
  #L45adc8.  v2[v3]:= v5 @kind object;
  #L45adcc.  v5:= 1I;
  #L45adce.  v2[v5]:= v0 @kind object;
  #L45add2.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L45add8.  v5:= v1 @kind object;
  #L45adda.  goto L45adde;
  #L45addc.  return @kind void;
  #L45adde.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ade2.  call `onError`(v0, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ade8.  v5:= v4.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45adec.  if v5 != 0 then goto L45adf6;
  #L45adf0.  call `a`(v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L45adf6.  return @kind void;
  catch `java.lang.Throwable` @[L45ada8..L45adb2] goto L45adb4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ae14.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ae18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45ae1e.  v0:= temp;
  #L45ae20.  if v0 == 0 then goto L45ae32;
  #L45ae24.  v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45ae28.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ae2c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45ae32.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45ae44.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ae48.  v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45ae4c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45ae50.  if v0 == 0 then goto L45ae80;
  #L45ae54.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ae5a.  v0:= temp @kind object;
  #L45ae5c.  if v0 == v2 then goto L45ae7e;
  #L45ae60.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45ae64.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45ae6a.  goto L45ae80;
  #L45ae6c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ae6e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45ae74.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ae78.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ae7e.  return @kind void;
  #L45ae80.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ae84.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45ae8a.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeUsing$a.c` @type ^`boolean` @kind boolean;
  #L45ae8e.  if v3 != 0 then goto L45ae98;
  #L45ae92.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.a:()V` @kind virtual;
  #L45ae98.  return @kind void;
  catch `java.lang.Throwable` @[L45ae60..L45ae6a] goto L45ae6c;
}
