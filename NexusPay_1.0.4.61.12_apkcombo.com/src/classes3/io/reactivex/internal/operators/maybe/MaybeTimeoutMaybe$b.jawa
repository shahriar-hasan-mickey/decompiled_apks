record `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L459f04.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L459f0a.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L459f0e.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c`;
  #L459f12.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;)V` @kind direct;
  #L459f18.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` := v0 @kind object;
  #L459f1c.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.MaybeSource` := v3 @kind object;
  #L459f20.  if v3 == 0 then goto L459f30;
  #L459f24.  v3:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a`;
  #L459f28.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L459f2e.  goto L459f32;
  #L459f30.  v3:= 0I;
  #L459f32.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` := v3 @kind object;
  #L459f36.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a04c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a052.  v0:= temp;
  #L45a054.  if v0 == 0 then goto L45a080;
  #L45a058.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.c` @type ^`io.reactivex.MaybeSource` @kind object;
  #L45a05c.  if v0 != 0 then goto L45a076;
  #L45a060.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a064.  v1:= new `java.util.concurrent.TimeoutException`;
  #L45a068.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L45a06e.  call `onError`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a074.  goto L45a080;
  #L45a076.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L45a07a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45a080.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a094.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a09a.  v0:= temp;
  #L45a09c.  if v0 == 0 then goto L45a0ac;
  #L45a0a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a0a4.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a0aa.  goto L45a0b2;
  #L45a0ac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45a0b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459f48.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459f4e.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L459f52.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459f58.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$a` @kind object;
  #L459f5c.  if v0 == 0 then goto L459f66;
  #L459f60.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459f66.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459edc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L459ee2.  v0:= temp @kind object;
  #L459ee4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L459ee8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L459eee.  v0:= temp;
  #L459ef0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459f78.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L459f7c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459f82.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459f86.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459f8c.  v0:= temp @kind object;
  #L459f8e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459f92.  if v0 == v1 then goto L459fa0;
  #L459f96.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459f9a.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L459fa0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459fb4.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L459fb8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459fbe.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459fc2.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459fc8.  v0:= temp @kind object;
  #L459fca.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459fce.  if v0 == v1 then goto L459fde;
  #L459fd2.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459fd6.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L459fdc.  goto L459fe4;
  #L459fde.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459fe4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L459ff8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L459ffe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutMaybe$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a010.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$c` @kind object;
  #L45a014.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a01a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a01e.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45a024.  v0:= temp @kind object;
  #L45a026.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a02a.  if v0 == v1 then goto L45a038;
  #L45a02e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a032.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45a038.  return @kind void;
}
