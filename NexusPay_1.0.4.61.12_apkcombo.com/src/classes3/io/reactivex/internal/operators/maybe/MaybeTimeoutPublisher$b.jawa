record `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45a25c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45a262.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L45a266.  v0:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c`;
  #L45a26a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;)V` @kind direct;
  #L45a270.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` := v0 @kind object;
  #L45a274.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @type ^`io.reactivex.MaybeSource` := v3 @kind object;
  #L45a278.  if v3 == 0 then goto L45a288;
  #L45a27c.  v3:= new `io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a`;
  #L45a280.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L45a286.  goto L45a28a;
  #L45a288.  v3:= 0I;
  #L45a28a.  v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` := v3 @kind object;
  #L45a28e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a3a4.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a3aa.  v0:= temp;
  #L45a3ac.  if v0 == 0 then goto L45a3d8;
  #L45a3b0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.c` @type ^`io.reactivex.MaybeSource` @kind object;
  #L45a3b4.  if v0 != 0 then goto L45a3ce;
  #L45a3b8.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a3bc.  v1:= new `java.util.concurrent.TimeoutException`;
  #L45a3c0.  call `<init>`(v1) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L45a3c6.  call `onError`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a3cc.  goto L45a3d8;
  #L45a3ce.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` @kind object;
  #L45a3d2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45a3d8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a3ec.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a3f2.  v0:= temp;
  #L45a3f4.  if v0 == 0 then goto L45a404;
  #L45a3f8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a3fc.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a402.  goto L45a40a;
  #L45a404.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45a40a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a2a0.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a2a6.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L45a2aa.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a2b0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$a` @kind object;
  #L45a2b4.  if v0 == 0 then goto L45a2be;
  #L45a2b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a2be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a234.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45a23a.  v0:= temp @kind object;
  #L45a23c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45a240.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45a246.  v0:= temp;
  #L45a248.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a2d0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L45a2d4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a2da.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a2de.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45a2e4.  v0:= temp @kind object;
  #L45a2e6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a2ea.  if v0 == v1 then goto L45a2f8;
  #L45a2ee.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a2f2.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45a2f8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a30c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L45a310.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a316.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a31a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45a320.  v0:= temp @kind object;
  #L45a322.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a326.  if v0 == v1 then goto L45a336;
  #L45a32a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a32e.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a334.  goto L45a33c;
  #L45a336.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45a33c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45a350.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45a356.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimeoutPublisher$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45a368.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$c` @kind object;
  #L45a36c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a372.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a376.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45a37c.  v0:= temp @kind object;
  #L45a37e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a382.  if v0 == v1 then goto L45a390;
  #L45a386.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTimeoutPublisher$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a38a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45a390.  return @kind void;
}
