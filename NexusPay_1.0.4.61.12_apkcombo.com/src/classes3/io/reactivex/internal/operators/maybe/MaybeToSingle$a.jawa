record `io.reactivex.internal.operators.maybe.MaybeToSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45a968.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45a96e.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L45a972.  v0.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L45a976.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a988.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45a98c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45a992.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a996.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45a99a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a948.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45a94c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L45a952.  v0:= temp;
  #L45a954.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45a9ac.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a9b0.  v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45a9b4.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L45a9b8.  if v0 == 0 then goto L45a9c8;
  #L45a9bc.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45a9c0.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45a9c6.  goto L45a9e0;
  #L45a9c8.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45a9cc.  v1:= new `java.util.NoSuchElementException`;
  #L45a9d0.  v2:= "The MaybeSource is empty" @kind object;
  #L45a9d4.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45a9da.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45a9e0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a9f4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45a9f8.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45a9fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45aa00.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45aa06.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aa18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45aa1c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45aa22.  v0:= temp;
  #L45aa24.  if v0 == 0 then goto L45aa36;
  #L45aa28.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45aa2c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45aa30.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45aa36.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeToSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeToSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aa48.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45aa4c.  v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45aa50.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeToSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L45aa54.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45aa5a.  return @kind void;
}
