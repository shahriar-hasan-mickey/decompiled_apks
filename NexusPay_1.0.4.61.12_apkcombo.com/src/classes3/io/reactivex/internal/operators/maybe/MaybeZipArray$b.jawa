record `io.reactivex.internal.operators.maybe.MaybeZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45b05c.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L45b062.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` := v2 @kind object;
  #L45b066.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L45b06a.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$c`[v3];
  #L45b06e.  v4:= 0I;
  #L45b070.  if v4 >= v3 then goto L45b088;
  #L45b074.  v0:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$c`;
  #L45b078.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;I)V` @kind direct;
  #L45b07e.  v2[v4]:= v0 @kind object;
  #L45b082.  v4:= v4 + 1;
  #L45b086.  goto L45b070;
  #L45b088.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] := v2 @kind object;
  #L45b08c.  v2:= new `java.lang.Object`[v3];
  #L45b090.  v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L45b094.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45b0e4.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L45b0e8.  v1:= length @variable v0;
  #L45b0ea.  v2:= 0I;
  #L45b0ec.  if v2 >= v5 then goto L45b100;
  #L45b0f0.  v3:= v0[v2] @kind object;
  #L45b0f4.  call `a`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L45b0fa.  v2:= v2 + 1;
  #L45b0fe.  goto L45b0ec;
  #L45b100.  v5:= v5 + 1;
  #L45b104.  if v5 >= v1 then goto L45b114;
  #L45b108.  v2:= v0[v5] @kind object;
  #L45b10c.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L45b112.  goto L45b100;
  #L45b114.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.b:(I)V` @AccessFlag  {
    temp;
    v0;

  #L45b128.  v0:= 0I;
  #L45b12a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L45b130.  v0:= temp;
  #L45b132.  if v0 <= 0 then goto L45b146;
  #L45b136.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L45b13c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45b140.  call `onComplete`(v2) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45b146.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.c:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L45b158.  v0:= 0I;
  #L45b15a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L45b160.  v0:= temp;
  #L45b162.  if v0 <= 0 then goto L45b178;
  #L45b166.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.a:(I)V` @kind virtual;
  #L45b16c.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45b170.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45b176.  goto L45b17e;
  #L45b178.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45b17e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.d:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L45b190.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L45b194.  v0[v3]:= v2 @kind object;
  #L45b198.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L45b19e.  v2:= temp;
  #L45b1a0.  if v2 != 0 then goto L45b1de;
  #L45b1a4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45b1a8.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L45b1ac.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45b1b2.  v2:= temp @kind object;
  #L45b1b4.  v3:= "The zipper returned a null value" @kind object;
  #L45b1b8.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45b1be.  v2:= temp @kind object;
  #L45b1c0.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45b1c4.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45b1ca.  goto L45b1de;
  #L45b1cc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45b1ce.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45b1d4.  v3:= v1.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45b1d8.  call `onError`(v3, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45b1de.  return @kind void;
  catch `java.lang.Throwable` @[L45b1a4..L45b1c0] goto L45b1cc;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45b0a8.  v0:= 0I;
  #L45b0aa.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L45b0b0.  v1:= temp;
  #L45b0b2.  if v1 <= 0 then goto L45b0d0;
  #L45b0b6.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L45b0ba.  v2:= length @variable v1;
  #L45b0bc.  if v0 >= v2 then goto L45b0d0;
  #L45b0c0.  v3:= v1[v0] @kind object;
  #L45b0c4.  call `a`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$c;.a:()V` @kind virtual;
  #L45b0ca.  v0:= v0 + 1;
  #L45b0ce.  goto L45b0bc;
  #L45b0d0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeZipArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b038.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45b03e.  v0:= temp;
  #L45b040.  if v0 > 0 then goto L45b048;
  #L45b044.  v0:= 1I;
  #L45b046.  goto L45b04a;
  #L45b048.  v0:= 0I;
  #L45b04a.  return v0;
}
