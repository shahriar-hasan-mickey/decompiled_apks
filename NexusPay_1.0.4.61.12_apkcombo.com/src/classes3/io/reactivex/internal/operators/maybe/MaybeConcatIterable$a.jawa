record `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.d` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L454198.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45419e.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4541a2.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4541a6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4541aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4541b0.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4541b4.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4541b8.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4541be.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L4541c2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4541c6.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4541ca.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4541d0.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4541d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L454204.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45420a.  v0:= temp;
  #L45420c.  if v0 == 0 then goto L454212;
  #L454210.  return @kind void;
  #L454212.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L454216.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45421a.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L45421e.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L454224.  v3:= temp;
  #L454226.  v4:= 0I;
  #L454228.  if v3 == 0 then goto L454234;
  #L45422c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454232.  return @kind void;
  #L454234.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45423a.  v3:= temp @kind object;
  #L45423c.  if v3 == 0 then goto L4542f2;
  #L454240.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L454244.  v6:= 1I;
  #L454246.  if v3 == v5 then goto L454280;
  #L45424a.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` @kind wide;
  #L45424e.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L454252.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L454258.  v9:= temp @kind wide;
  #L45425a.  v5:= lcmp(v7, v9);
  #L45425e.  if v5 == 0 then goto L45427a;
  #L454262.  v9:= 1L;
  #L454266.  v7:= v7 + v9 @kind long;
  #L454268.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.f` @type ^`long` := v7 @kind wide;
  #L45426c.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454272.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L454278.  goto L454286;
  #L45427a.  v3:= 0I;
  #L45427c.  v6:= 0I;
  #L45427e.  goto L454286;
  #L454280.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454286.  if v6 == 0 then goto L4542f2;
  #L45428a.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L454290.  v3:= temp;
  #L454292.  if v3 != 0 then goto L4542f2;
  #L454296.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L45429a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4542a0.  v3:= temp;
  #L4542a2.  if v3 == 0 then goto L4542da;
  #L4542a6.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4542aa.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4542b0.  v3:= temp @kind object;
  #L4542b2.  v4:= "The source Iterator returned a null MaybeSource" @kind object;
  #L4542b6.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4542bc.  v3:= temp @kind object;
  #L4542be.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L4542c2.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4542c8.  goto L4542f2;
  #L4542ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4542cc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4542d2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4542d8.  return @kind void;
  #L4542da.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4542e0.  goto L4542f2;
  #L4542e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4542e4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4542ea.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4542f0.  return @kind void;
  #L4542f2.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4542f8.  v3:= temp;
  #L4542fa.  if v3 != 0 then goto L45421e;
  #L4542fe.  return @kind void;
  catch `java.lang.Throwable` @[L454296..L4542a2] goto L4542e2;
  catch `java.lang.Throwable` @[L4542a6..L4542c2] goto L4542ca;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4541e8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4541ec.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4541f2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L454328.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45432c.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L454330.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454336.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L45433c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454350.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L454354.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45435a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45436c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L454370.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L454376.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454388.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45438c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L454392.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L454398.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4543ac.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4543b2.  v0:= temp;
  #L4543b4.  if v0 == 0 then goto L4543c8;
  #L4543b8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatIterable$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4543bc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4543c2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatIterable$a;.a:()V` @kind virtual;
  #L4543c8.  return @kind void;
}
