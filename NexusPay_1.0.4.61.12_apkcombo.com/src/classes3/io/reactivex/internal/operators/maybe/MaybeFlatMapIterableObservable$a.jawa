record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L456958.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L45695e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L456962.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L456966.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456978.  v0:= 0I;
  #L45697a.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L45697e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456990.  v0:= 1I;
  #L456992.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L456996.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45699a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4569a0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4569a4.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4569a8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4568b8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4568bc.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4568d0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L4568d4.  if v0 != 0 then goto L4568dc;
  #L4568d8.  v0:= 1I;
  #L4568da.  goto L4568de;
  #L4568dc.  v0:= 0I;
  #L4568de.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4569bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4569c0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4569c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4569d8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4569dc.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4569e0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4569e4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4569ea.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4569fc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L456a00.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L456a06.  v0:= temp;
  #L456a08.  if v0 == 0 then goto L456a1a;
  #L456a0c.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L456a10.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L456a14.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L456a1a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456a2c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L456a30.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L456a34.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L456a3a.  v3:= temp @kind object;
  #L456a3c.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L456a40.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L456a46.  v3:= temp @kind object;
  #L456a48.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L456a4e.  v1:= temp;
  #L456a50.  if v1 != 0 then goto L456a5c;
  #L456a54.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L456a5a.  return @kind void;
  #L456a5c.  v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L456a60.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L456a64.  if v1 == 0 then goto L456a78;
  #L456a68.  v3:= 0I;
  #L456a6a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L456a70.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L456a76.  return @kind void;
  #L456a78.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L456a7c.  if v1 == 0 then goto L456a82;
  #L456a80.  return @kind void;
  #L456a82.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L456a88.  v1:= temp @kind object;
  #L456a8a.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L456a90.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L456a94.  if v1 == 0 then goto L456a9a;
  #L456a98.  return @kind void;
  #L456a9a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L456aa0.  v1:= temp;
  #L456aa2.  if v1 != 0 then goto L456a78;
  #L456aa6.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L456aac.  return @kind void;
  #L456aae.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456ab0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456ab6.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456abc.  return @kind void;
  #L456abe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456ac0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456ac6.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456acc.  return @kind void;
  #L456ace.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456ad0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456ad6.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456adc.  return @kind void;
  catch `java.lang.Throwable` @[L456a30..L456a50] goto L456ace;
  catch `java.lang.Throwable` @[L456a82..L456a8a] goto L456abe;
  catch `java.lang.Throwable` @[L456a9a..L456aa2] goto L456aae;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L456914.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L456918.  v1:= 0I;
  #L45691a.  if v0 == 0 then goto L456944;
  #L45691e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L456924.  v2:= temp @kind object;
  #L456926.  v3:= "The iterator returned a null value" @kind object;
  #L45692a.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L456930.  v2:= temp @kind object;
  #L456932.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L456938.  v0:= temp;
  #L45693a.  if v0 != 0 then goto L456942;
  #L45693e.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L456942.  return v2 @kind object;
  #L456944.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4568f0.  v0:= 2I;
  #L4568f2.  v2:= v2 ^& v0 @kind int;
  #L4568f4.  if v2 == 0 then goto L456900;
  #L4568f8.  v2:= 1I;
  #L4568fa.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L4568fe.  return v0;
  #L456900.  v2:= 0I;
  #L456902.  return v2;
}
