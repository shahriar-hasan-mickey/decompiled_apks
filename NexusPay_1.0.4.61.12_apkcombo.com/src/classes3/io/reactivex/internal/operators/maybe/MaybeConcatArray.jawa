record `io.reactivex.internal.operators.maybe.MaybeConcatArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeConcatArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArray` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray;.<init>:([Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L454150.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L454156.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray.b` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L45415a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeConcatArray` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L45416c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeConcatArray$a`;
  #L454170.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArray.b` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L454174.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/MaybeSource;)V` @kind direct;
  #L45417a.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L454180.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L454186.  return @kind void;
}
