record `io.reactivex.internal.operators.maybe.MaybeFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.util.concurrent.Future` `io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4576e0.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L4576e6.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L4576ea.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` := v2 @kind wide;
  #L4576ee.  v0.`io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L4576f2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeFromFuture` v6 @kind this, `io.reactivex.MaybeObserver` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromFuture;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L457704.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L45770a.  v0:= temp @kind object;
  #L45770c.  call `onSubscribe`(v7, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L457712.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L457718.  v1:= temp;
  #L45771a.  if v1 != 0 then goto L45779a;
  #L45771e.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` @kind wide;
  #L457722.  v3:= 0L;
  #L457726.  v5:= lcmp(v1, v3);
  #L45772a.  if v5 > 0 then goto L45773c;
  #L45772e.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L457732.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L457738.  v1:= temp @kind object;
  #L45773a.  goto L457750;
  #L45773c.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.a` @type ^`java.util.concurrent.Future` @kind object;
  #L457740.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.b` @type ^`long` @kind wide;
  #L457744.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeFromFuture.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L457748.  call temp:= `get`(v1, v2, v4) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L45774e.  v1:= temp @kind object;
  #L457750.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L457756.  v0:= temp;
  #L457758.  if v0 != 0 then goto L45779a;
  #L45775c.  if v1 != 0 then goto L457768;
  #L457760.  call `onComplete`(v7) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L457766.  goto L45779a;
  #L457768.  call `onSuccess`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45776e.  goto L45779a;
  #L457770.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L457772.  v2:= instanceof @variable v1 @type ^`java.util.concurrent.ExecutionException` @kind boolean;
  #L457776.  if v2 == 0 then goto L457782;
  #L45777a.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L457780.  v1:= temp @kind object;
  #L457782.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L457788.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L45778e.  v0:= temp;
  #L457790.  if v0 != 0 then goto L45779a;
  #L457794.  call `onError`(v7, v1) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45779a.  return @kind void;
  catch `java.lang.Throwable` @[L45771e..L457750] goto L457770;
}
