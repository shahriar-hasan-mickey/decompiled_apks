record `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4599e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4599ee.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L4599f2.  v1:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a`;
  #L4599f6.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;)V` @kind direct;
  #L4599fc.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` := v1 @kind object;
  #L459a00.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L459b0c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459b12.  v0:= temp;
  #L459b14.  if v0 == 0 then goto L459b22;
  #L459b18.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459b1c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L459b22.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L459b34.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459b3a.  v0:= temp;
  #L459b3c.  if v0 == 0 then goto L459b4c;
  #L459b40.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459b44.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L459b4a.  goto L459b52;
  #L459b4c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459b52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459a14.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459a1a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L459a1e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459a24.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4599c0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4599c6.  v0:= temp @kind object;
  #L4599c8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4599cc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4599d2.  v0:= temp;
  #L4599d4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459a38.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L459a3c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459a42.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459a46.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459a4c.  v0:= temp @kind object;
  #L459a4e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459a52.  if v0 == v1 then goto L459a60;
  #L459a56.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459a5a.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L459a60.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459a74.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L459a78.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459a7e.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459a82.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459a88.  v0:= temp @kind object;
  #L459a8a.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459a8e.  if v0 == v1 then goto L459a9e;
  #L459a92.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459a96.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L459a9c.  goto L459aa4;
  #L459a9e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459aa4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L459ab8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L459abe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459ad0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a$a` @kind object;
  #L459ad4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459ada.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459ade.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459ae4.  v0:= temp @kind object;
  #L459ae6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459aea.  if v0 == v1 then goto L459af8;
  #L459aee.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459af2.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L459af8.  return @kind void;
}
