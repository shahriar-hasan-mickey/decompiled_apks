record `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L455afc.  v0:= 2I;
  #L455afe.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L455b04.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L455b08.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L455b0c.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b`;
  #L455b10.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L455b16.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L455b1a.  v2:= new `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b`;
  #L455b1e.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;)V` @kind direct;
  #L455b24.  v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` := v2 @kind object;
  #L455b28.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L455b64.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L455b6a.  v0:= temp;
  #L455b6c.  if v0 != 0 then goto L455bdc;
  #L455b70.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455b74.  v0:= v0.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L455b78.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455b7c.  v1:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b.b` @type ^`java.lang.Object` @kind object;
  #L455b80.  if v0 == 0 then goto L455bbc;
  #L455b84.  if v1 == 0 then goto L455bbc;
  #L455b88.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.d` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L455b8c.  call temp:= `test`(v2, v0, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L455b92.  v0:= temp;
  #L455b94.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L455b98.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L455b9e.  v0:= temp @kind object;
  #L455ba0.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L455ba6.  goto L455bdc;
  #L455ba8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L455baa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L455bb0.  v1:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L455bb4.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L455bba.  return @kind void;
  #L455bbc.  v2:= v3.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L455bc0.  if v0 != 0 then goto L455bcc;
  #L455bc4.  if v1 != 0 then goto L455bcc;
  #L455bc8.  v0:= 1I;
  #L455bca.  goto L455bce;
  #L455bcc.  v0:= 0I;
  #L455bce.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L455bd4.  v0:= temp @kind object;
  #L455bd6.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L455bdc.  return @kind void;
  catch `java.lang.Throwable` @[L455b88..L455b94] goto L455ba8;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.b:(Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L455bfc.  v0:= 0I;
  #L455bfe.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L455c04.  v0:= temp;
  #L455c06.  if v0 <= 0 then goto L455c30;
  #L455c0a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455c0e.  if v2 != v0 then goto L455c1e;
  #L455c12.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455c16.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L455c1c.  goto L455c24;
  #L455c1e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L455c24.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L455c28.  call `onError`(v2, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L455c2e.  goto L455c36;
  #L455c30.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L455c36.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object, `io.reactivex.MaybeSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.c:(Lio/reactivex/MaybeSource;Lio/reactivex/MaybeSource;)V` @AccessFlag  {
    temp;
    v0;

  #L455c48.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455c4c.  call `subscribe`(v2, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L455c52.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455c56.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L455c5c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455b3c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455b40.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L455b46.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.c` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455b4a.  call `a`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$b;.a:()V` @kind virtual;
  #L455b50.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455ad0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeEqualSingle$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeEqualSingle$b` @kind object;
  #L455ad4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L455ada.  v0:= temp @kind object;
  #L455adc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L455ae0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L455ae6.  v0:= temp;
  #L455ae8.  return v0;
}
