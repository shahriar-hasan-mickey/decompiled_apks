record `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L456544.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L45654a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45654e.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L456552.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L456556.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45655c.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L456560.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456574.  v0:= 1I;
  #L456576.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L45657a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45657e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L456584.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L456588.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45658c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4565a0.  v0:= 0I;
  #L4565a2.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4565a6.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4565b8.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4565be.  v0:= temp;
  #L4565c0.  if v0 == 0 then goto L4565c6;
  #L4565c4.  return @kind void;
  #L4565c6.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4565ca.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4565ce.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L4565d2.  if v2 == 0 then goto L4565ea;
  #L4565d6.  if v1 == 0 then goto L4565ea;
  #L4565da.  v1:= 0I;
  #L4565dc.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4565e2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4565e8.  return @kind void;
  #L4565ea.  v2:= 1I;
  #L4565ec.  if v1 == 0 then goto L45669e;
  #L4565f0.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4565f4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4565fa.  v3:= temp @kind wide;
  #L4565fc.  v5:= 9223372036854775807L;
  #L456606.  v7:= lcmp(v3, v5);
  #L45660a.  if v7 != 0 then goto L456616;
  #L45660e.  call `e`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L456614.  return @kind void;
  #L456616.  v5:= 0L;
  #L45661a.  v7:= v5 @kind wide;
  #L45661c.  v9:= lcmp(v7, v3);
  #L456620.  if v9 == 0 then goto L45668c;
  #L456624.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L456628.  if v9 == 0 then goto L45662e;
  #L45662c.  return @kind void;
  #L45662e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L456634.  v9:= temp @kind object;
  #L456636.  v10:= "The iterator returned a null value" @kind object;
  #L45663a.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L456640.  v9:= temp @kind object;
  #L456642.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L456648.  v9:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L45664c.  if v9 == 0 then goto L456652;
  #L456650.  return @kind void;
  #L456652.  v9:= 1L;
  #L456656.  v7:= v7 + v9 @kind long;
  #L456658.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45665e.  v9:= temp;
  #L456660.  if v9 != 0 then goto L45661c;
  #L456664.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45666a.  return @kind void;
  #L45666c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45666e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456674.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45667a.  return @kind void;
  #L45667c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45667e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456684.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45668a.  return @kind void;
  #L45668c.  v3:= lcmp(v7, v5);
  #L456690.  if v3 == 0 then goto L45669e;
  #L456694.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L456698.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45669e.  v2:= -v2 @kind int;
  #L4566a0.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4566a6.  v2:= temp;
  #L4566a8.  if v2 != 0 then goto L4566ae;
  #L4566ac.  return @kind void;
  #L4566ae.  if v1 != 0 then goto L4565ec;
  #L4566b2.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4566b6.  goto L4565ec;
  catch `java.lang.Throwable` @[L45662e..L456642] goto L45667c;
  catch `java.lang.Throwable` @[L456658..L456660] goto L45666c;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L4566e0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4566e4.  if v0 == 0 then goto L4566ea;
  #L4566e8.  return @kind void;
  #L4566ea.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4566f0.  v0:= temp @kind object;
  #L4566f2.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4566f8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4566fc.  if v0 == 0 then goto L456702;
  #L456700.  return @kind void;
  #L456702.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L456708.  v0:= temp;
  #L45670a.  if v0 != 0 then goto L4566e0;
  #L45670e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L456714.  return @kind void;
  #L456716.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456718.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45671e.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456724.  return @kind void;
  #L456726.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456728.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45672e.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456734.  return @kind void;
  catch `java.lang.Throwable` @[L4566ea..L4566f2] goto L456726;
  catch `java.lang.Throwable` @[L456702..L45670a] goto L456716;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4564bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L4564c0.  if v0 != 0 then goto L4564c8;
  #L4564c4.  v0:= 1I;
  #L4564c6.  goto L4564ca;
  #L4564c8.  v0:= 0I;
  #L4564ca.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456760.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L456764.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45676a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45677c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L456780.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L456784.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L456788.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45678e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4567a0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4567a4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4567aa.  v0:= temp;
  #L4567ac.  if v0 == 0 then goto L4567be;
  #L4567b0.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4567b4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4567b8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4567be.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4567d0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4567d4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4567da.  v2:= temp @kind object;
  #L4567dc.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L4567e0.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4567e6.  v2:= temp @kind object;
  #L4567e8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4567ee.  v0:= temp;
  #L4567f0.  if v0 != 0 then goto L456800;
  #L4567f4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4567f8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4567fe.  return @kind void;
  #L456800.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L456804.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L45680a.  return @kind void;
  #L45680c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45680e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456814.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L456818.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45681e.  return @kind void;
  catch `java.lang.Throwable` @[L4567d0..L4567f0] goto L45680c;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L456500.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L456504.  v1:= 0I;
  #L456506.  if v0 == 0 then goto L456530;
  #L45650a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L456510.  v2:= temp @kind object;
  #L456512.  v3:= "The iterator returned a null value" @kind object;
  #L456516.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45651c.  v2:= temp @kind object;
  #L45651e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L456524.  v0:= temp;
  #L456526.  if v0 != 0 then goto L45652e;
  #L45652a.  v4.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L45652e.  return v2 @kind object;
  #L456530.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45683c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L456842.  v0:= temp;
  #L456844.  if v0 == 0 then goto L456858;
  #L456848.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45684c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L456852.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L456858.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4564dc.  v0:= 2I;
  #L4564de.  v2:= v2 ^& v0 @kind int;
  #L4564e0.  if v2 == 0 then goto L4564ec;
  #L4564e4.  v2:= 1I;
  #L4564e6.  v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L4564ea.  return v0;
  #L4564ec.  v2:= 0I;
  #L4564ee.  return v2;
}
