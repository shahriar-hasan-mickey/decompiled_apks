record `io.reactivex.internal.operators.maybe.MaybeUsing` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.maybe.MaybeUsing.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeUsing.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.maybe.MaybeUsing.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeUsing.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUsing` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45aeb8.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L45aebe.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.a` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L45aec2.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45aec6.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L45aeca.  v0.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` := v4 @kind boolean;
  #L45aece.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeUsing` v5 @kind this, `io.reactivex.MaybeObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45aee0.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L45aee4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L45aeea.  v0:= temp @kind object;
  #L45aeec.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45aef0.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45aef6.  v1:= temp @kind object;
  #L45aef8.  v2:= "The sourceSupplier returned a null MaybeSource" @kind object;
  #L45aefc.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45af02.  v1:= temp @kind object;
  #L45af04.  v1:= (`io.reactivex.MaybeSource`) v1 @kind object;
  #L45af08.  v2:= new `io.reactivex.internal.operators.maybe.MaybeUsing$a`;
  #L45af0c.  v3:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45af10.  v4:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L45af14.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeUsing$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @kind direct;
  #L45af1a.  call `subscribe`(v1, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45af20.  return @kind void;
  #L45af22.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45af24.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45af2a.  v2:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L45af2e.  if v2 == 0 then goto L45af6a;
  #L45af32.  v2:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45af36.  call `accept`(v2, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45af3c.  goto L45af6a;
  #L45af3e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45af40.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45af46.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L45af4a.  v3:= 2I;
  #L45af4c.  v3:= new `java.lang.Throwable`[v3];
  #L45af50.  v4:= 0I;
  #L45af52.  v3[v4]:= v1 @kind object;
  #L45af56.  v1:= 1I;
  #L45af58.  v3[v1]:= v0 @kind object;
  #L45af5c.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L45af62.  call `error`(v2, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45af68.  return @kind void;
  #L45af6a.  call `error`(v1, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45af70.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.d` @type ^`boolean` @kind boolean;
  #L45af74.  if v6 != 0 then goto L45af92;
  #L45af78.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeUsing.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L45af7c.  call `accept`(v6, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L45af82.  goto L45af92;
  #L45af84.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45af86.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45af8c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45af92.  return @kind void;
  #L45af94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45af96.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45af9c.  call `error`(v0, v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/MaybeObserver;)V` @kind static;
  #L45afa2.  return @kind void;
  catch `java.lang.Throwable` @[L45aee0..L45aeec] goto L45af94;
  catch `java.lang.Throwable` @[L45aeec..L45af08] goto L45af22;
  catch `java.lang.Throwable` @[L45af32..L45af3c] goto L45af3e;
  catch `java.lang.Throwable` @[L45af78..L45af82] goto L45af84;
}
