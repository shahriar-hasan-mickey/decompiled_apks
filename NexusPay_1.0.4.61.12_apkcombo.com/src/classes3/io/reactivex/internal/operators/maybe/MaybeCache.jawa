record `io.reactivex.internal.operators.maybe.MaybeCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeCache.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeCache.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeCache.d` @AccessFlag ;
}
global `io.reactivex.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.maybe.MaybeCache$a`[] `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4538b4.  v0:= 0I;
  #L4538b6.  v1:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v0];
  #L4538ba.  `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] := v1 @kind object;
  #L4538be.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v0];
  #L4538c2.  `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] := v0 @kind object;
  #L4538c6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCache` v1 @kind this, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.<init>:(Lio/reactivex/MaybeSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4538d8.  call `<init>`(v1) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L4538de.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4538e2.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4538e8.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4538ec.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4538f0.  v0:= `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4538f4.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4538fa.  v1.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4538fe.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.maybe.MaybeCache` v4 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L453860.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453864.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45386a.  v0:= temp @kind object;
  #L45386c.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L453870.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L453874.  v2:= 0I;
  #L453876.  if v0 != v1 then goto L45387c;
  #L45387a.  return v2;
  #L45387c.  v1:= length @variable v0;
  #L45387e.  v3:= v1 + 1;
  #L453882.  v3:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v3];
  #L453886.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L45388c.  v3[v1]:= v5 @kind object;
  #L453890.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453894.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45389a.  v0:= temp;
  #L45389c.  if v0 == 0 then goto L453860;
  #L4538a0.  v5:= 1I;
  #L4538a2.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeCache` v6 @kind this, `io.reactivex.internal.operators.maybe.MaybeCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L453a1c.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453a20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453a26.  v0:= temp @kind object;
  #L453a28.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L453a2c.  v1:= length @variable v0;
  #L453a2e.  if v1 != 0 then goto L453a34;
  #L453a32.  return @kind void;
  #L453a34.  v2:= -1I;
  #L453a36.  v3:= 0I;
  #L453a38.  v4:= 0I;
  #L453a3a.  if v4 >= v1 then goto L453a50;
  #L453a3e.  v5:= v0[v4] @kind object;
  #L453a42.  if v5 != v7 then goto L453a4a;
  #L453a46.  v2:= v4;
  #L453a48.  goto L453a50;
  #L453a4a.  v4:= v4 + 1;
  #L453a4e.  goto L453a3a;
  #L453a50.  if v2 >= 0 then goto L453a56;
  #L453a54.  return @kind void;
  #L453a56.  v4:= 1I;
  #L453a58.  if v1 != v4 then goto L453a62;
  #L453a5c.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.e` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L453a60.  goto L453a80;
  #L453a62.  v5:= v1 + -1;
  #L453a66.  v5:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`[v5];
  #L453a6a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453a70.  v3:= v2 + 1;
  #L453a74.  v1:= v1 - v2 @kind int;
  #L453a76.  v1:= v1 - v4 @kind int;
  #L453a78.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L453a7e.  v1:= v5 @kind object;
  #L453a80.  v2:= v6.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453a84.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L453a8a.  v0:= temp;
  #L453a8c.  if v0 == 0 then goto L453a1c;
  #L453a90.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L453910.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453914.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L453918.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45391e.  v0:= temp @kind object;
  #L453920.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L453924.  v1:= length @variable v0;
  #L453926.  v2:= 0I;
  #L453928.  if v2 >= v1 then goto L45394c;
  #L45392c.  v3:= v0[v2] @kind object;
  #L453930.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L453936.  v4:= temp;
  #L453938.  if v4 != 0 then goto L453946;
  #L45393c.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L453940.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L453946.  v2:= v2 + 1;
  #L45394a.  goto L453928;
  #L45394c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L453960.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L453964.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453968.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L45396c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L453972.  v0:= temp @kind object;
  #L453974.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L453978.  v1:= length @variable v0;
  #L45397a.  v2:= 0I;
  #L45397c.  if v2 >= v1 then goto L4539a0;
  #L453980.  v3:= v0[v2] @kind object;
  #L453984.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L45398a.  v4:= temp;
  #L45398c.  if v4 != 0 then goto L45399a;
  #L453990.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L453994.  call `onError`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45399a.  v2:= v2 + 1;
  #L45399e.  goto L45397c;
  #L4539a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4539b4.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4539c8.  v5.`io.reactivex.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` := v6 @kind object;
  #L4539cc.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4539d0.  v1:= `@@io.reactivex.internal.operators.maybe.MaybeCache.f` @type ^`io.reactivex.internal.operators.maybe.MaybeCache$a`[] @kind object;
  #L4539d4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4539da.  v0:= temp @kind object;
  #L4539dc.  v0:= (`io.reactivex.internal.operators.maybe.MaybeCache$a`[]) v0 @kind object;
  #L4539e0.  v1:= length @variable v0;
  #L4539e2.  v2:= 0I;
  #L4539e4.  if v2 >= v1 then goto L453a08;
  #L4539e8.  v3:= v0[v2] @kind object;
  #L4539ec.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L4539f2.  v4:= temp;
  #L4539f4.  if v4 != 0 then goto L453a02;
  #L4539f8.  v3:= v3.`io.reactivex.internal.operators.maybe.MaybeCache$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4539fc.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L453a02.  v2:= v2 + 1;
  #L453a06.  goto L4539e4;
  #L453a08.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeCache` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L453aa4.  v0:= new `io.reactivex.internal.operators.maybe.MaybeCache$a`;
  #L453aa8.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/internal/operators/maybe/MaybeCache;)V` @kind direct;
  #L453aae.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L453ab4.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.a:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)Z` @kind virtual;
  #L453aba.  v1:= temp;
  #L453abc.  if v1 == 0 then goto L453af2;
  #L453ac0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L453ac6.  v3:= temp;
  #L453ac8.  if v3 == 0 then goto L453ad4;
  #L453acc.  call `b`(v2, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache;.b:(Lio/reactivex/internal/operators/maybe/MaybeCache$a;)V` @kind virtual;
  #L453ad2.  return @kind void;
  #L453ad4.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453ad8.  v0:= 0I;
  #L453ada.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L453ae0.  v3:= temp @kind object;
  #L453ae2.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L453ae6.  if v3 == 0 then goto L453af0;
  #L453aea.  call `subscribe`(v3, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L453af0.  return @kind void;
  #L453af2.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeCache$a;.isDisposed:()Z` @kind virtual;
  #L453af8.  v0:= temp;
  #L453afa.  if v0 != 0 then goto L453b24;
  #L453afe.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.d` @type ^`java.lang.Throwable` @kind object;
  #L453b02.  if v0 == 0 then goto L453b0e;
  #L453b06.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453b0c.  goto L453b24;
  #L453b0e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeCache.c` @type ^`java.lang.Object` @kind object;
  #L453b12.  if v0 == 0 then goto L453b1e;
  #L453b16.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L453b1c.  goto L453b24;
  #L453b1e.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L453b24.  return @kind void;
}
