record `io.reactivex.internal.operators.maybe.MaybeObserveOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L458a48.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L458a4e.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L458a52.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L458a56.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L458a68.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L458a6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458a20.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458a26.  v0:= temp @kind object;
  #L458a28.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L458a2c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458a32.  v0:= temp;
  #L458a34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458a80.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L458a84.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L458a8a.  v0:= temp @kind object;
  #L458a8c.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458a92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L458aa4.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L458aa8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L458aac.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L458ab2.  v1:= temp @kind object;
  #L458ab4.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458aba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L458acc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458ad2.  v1:= temp;
  #L458ad4.  if v1 == 0 then goto L458ae2;
  #L458ad8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458adc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L458ae2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L458af4.  v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L458af8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L458afc.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L458b02.  v1:= temp @kind object;
  #L458b04.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458b0a.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeObserveOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458b1c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` @kind object;
  #L458b20.  v1:= 0I;
  #L458b22.  if v0 == 0 then goto L458b36;
  #L458b26.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L458b2a.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458b2e.  call `onError`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458b34.  goto L458b58;
  #L458b36.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` @kind object;
  #L458b3a.  if v0 == 0 then goto L458b4e;
  #L458b3e.  v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L458b42.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458b46.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L458b4c.  goto L458b58;
  #L458b4e.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeObserveOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458b52.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L458b58.  return @kind void;
}
