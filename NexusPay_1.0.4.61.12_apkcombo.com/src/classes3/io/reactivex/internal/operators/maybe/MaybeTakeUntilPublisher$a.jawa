record `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L459c80.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L459c86.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L459c8a.  v1:= new `io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a`;
  #L459c8e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;)V` @kind direct;
  #L459c94.  v0.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` := v1 @kind object;
  #L459c98.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L459da4.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459daa.  v0:= temp;
  #L459dac.  if v0 == 0 then goto L459dba;
  #L459db0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459db4.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L459dba.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L459dcc.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459dd2.  v0:= temp;
  #L459dd4.  if v0 == 0 then goto L459de4;
  #L459dd8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459ddc.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L459de2.  goto L459dea;
  #L459de4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459dea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459cac.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459cb2.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L459cb6.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459cbc.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L459c58.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L459c5e.  v0:= temp @kind object;
  #L459c60.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L459c64.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L459c6a.  v0:= temp;
  #L459c6c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459cd0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L459cd4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459cda.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459cde.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459ce4.  v0:= temp @kind object;
  #L459ce6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459cea.  if v0 == v1 then goto L459cf8;
  #L459cee.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459cf2.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L459cf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459d0c.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L459d10.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459d16.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459d1a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459d20.  v0:= temp @kind object;
  #L459d22.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459d26.  if v0 == v1 then goto L459d36;
  #L459d2a.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459d2e.  call `onError`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L459d34.  goto L459d3c;
  #L459d36.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L459d3c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L459d50.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L459d56.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTakeUntilPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L459d68.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.b` @type ^`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a$a` @kind object;
  #L459d6c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L459d72.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459d76.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L459d7c.  v0:= temp @kind object;
  #L459d7e.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L459d82.  if v0 == v1 then goto L459d90;
  #L459d86.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeTakeUntilPublisher$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L459d8a.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L459d90.  return @kind void;
}
