record `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45ab2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45ab32.  v0.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L45ab36.  v0.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L45ab3a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45ab4c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ab50.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ab56.  v0:= temp @kind object;
  #L45ab58.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45ab5c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45ab60.  if v0 == v1 then goto L45ab72;
  #L45ab64.  v2.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45ab68.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L45ab6c.  call temp:= `scheduleDirect`(v0, v2) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L45ab72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ab04.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ab0a.  v0:= temp @kind object;
  #L45ab0c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45ab10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45ab16.  v0:= temp;
  #L45ab18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ab84.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45ab88.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L45ab8e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45aba0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45aba4.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45abaa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45abbc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45abc2.  v1:= temp;
  #L45abc4.  if v1 == 0 then goto L45abd2;
  #L45abc8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45abcc.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45abd2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45abe4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45abe8.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45abee.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeUnsubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ac00.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ac04.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ac0a.  return @kind void;
}
