record `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L458dec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L458df2.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L458df6.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L458dfa.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @type ^`boolean` := v3 @kind boolean;
  #L458dfe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L458e10.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L458e16.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458dc4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458dca.  v0:= temp @kind object;
  #L458dcc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L458dd0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458dd6.  v0:= temp;
  #L458dd8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458e28.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458e2c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L458e32.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L458e44.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.c` @type ^`boolean` @kind boolean;
  #L458e48.  if v0 != 0 then goto L458e60;
  #L458e4c.  v0:= instanceof @variable v6 @type ^`java.lang.Exception` @kind boolean;
  #L458e50.  if v0 != 0 then goto L458e60;
  #L458e54.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458e58.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458e5e.  return @kind void;
  #L458e60.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L458e64.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L458e6a.  v0:= temp @kind object;
  #L458e6c.  v1:= "The resumeFunction returned a null MaybeSource" @kind object;
  #L458e70.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L458e76.  v0:= temp @kind object;
  #L458e78.  v0:= (`io.reactivex.MaybeSource`) v0 @kind object;
  #L458e7c.  v6:= 0I;
  #L458e7e.  call temp:= `replace`(v5, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458e84.  v6:= new `io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a$a`;
  #L458e88.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458e8c.  call `<init>`(v6, v1, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a$a;.<init>:(Lio/reactivex/MaybeObserver;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L458e92.  call `subscribe`(v0, v6) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L458e98.  return @kind void;
  #L458e9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L458e9c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L458ea2.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458ea6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L458eaa.  v3:= 2I;
  #L458eac.  v3:= new `java.lang.Throwable`[v3];
  #L458eb0.  v4:= 0I;
  #L458eb2.  v3[v4]:= v6 @kind object;
  #L458eb6.  v6:= 1I;
  #L458eb8.  v3[v6]:= v0 @kind object;
  #L458ebc.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L458ec2.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458ec8.  return @kind void;
  catch `java.lang.Throwable` @[L458e60..L458e7c] goto L458e9a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L458ee8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458eee.  v1:= temp;
  #L458ef0.  if v1 == 0 then goto L458efe;
  #L458ef4.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458ef8.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L458efe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorNext$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458f10.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorNext$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458f14.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L458f1a.  return @kind void;
}
