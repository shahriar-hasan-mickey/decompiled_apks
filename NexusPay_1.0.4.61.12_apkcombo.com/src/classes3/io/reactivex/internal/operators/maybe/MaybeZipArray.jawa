record `io.reactivex.internal.operators.maybe.MaybeZipArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeZipArray.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeZipArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeZipArray` v0 @kind this, `io.reactivex.MaybeSource`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.<init>:([Lio/reactivex/MaybeSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45b2ac.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L45b2b2.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray.a` @type ^`io.reactivex.MaybeSource`[] := v1 @kind object;
  #L45b2b6.  v0.`io.reactivex.internal.operators.maybe.MaybeZipArray.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45b2ba.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeZipArray` v5 @kind this, `io.reactivex.MaybeObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45b2cc.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeZipArray.a` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L45b2d0.  v1:= length @variable v0;
  #L45b2d2.  v2:= 0I;
  #L45b2d4.  v3:= 1I;
  #L45b2d6.  if v1 != v3 then goto L45b2fa;
  #L45b2da.  v0:= v0[v2] @kind object;
  #L45b2de.  v1:= new `io.reactivex.internal.operators.maybe.MaybeMap$a`;
  #L45b2e2.  v2:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$a`;
  #L45b2e6.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$a;.<init>:(Lio/reactivex/internal/operators/maybe/MaybeZipArray;)V` @kind direct;
  #L45b2ec.  call `<init>`(v1, v6, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L45b2f2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45b2f8.  return @kind void;
  #L45b2fa.  v3:= new `io.reactivex.internal.operators.maybe.MaybeZipArray$b`;
  #L45b2fe.  v4:= v5.`io.reactivex.internal.operators.maybe.MaybeZipArray.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45b302.  call `<init>`(v3, v6, v1, v4) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.<init>:(Lio/reactivex/MaybeObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L45b308.  call `onSubscribe`(v6, v3) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45b30e.  if v2 >= v1 then goto L45b352;
  #L45b312.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.isDisposed:()Z` @kind virtual;
  #L45b318.  v6:= temp;
  #L45b31a.  if v6 == 0 then goto L45b320;
  #L45b31e.  return @kind void;
  #L45b320.  v6:= v0[v2] @kind object;
  #L45b324.  if v6 != 0 then goto L45b33e;
  #L45b328.  v6:= new `java.lang.NullPointerException`;
  #L45b32c.  v0:= "One of the sources is null" @kind object;
  #L45b330.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45b336.  call `c`(v3, v6, v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeZipArray$b;.c:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L45b33c.  return @kind void;
  #L45b33e.  v4:= v3.`io.reactivex.internal.operators.maybe.MaybeZipArray$b.c` @type ^`io.reactivex.internal.operators.maybe.MaybeZipArray$c`[] @kind object;
  #L45b342.  v4:= v4[v2] @kind object;
  #L45b346.  call `subscribe`(v6, v4) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45b34c.  v2:= v2 + 1;
  #L45b350.  goto L45b30e;
  #L45b352.  return @kind void;
}
