record `io.reactivex.internal.operators.maybe.MaybeMergeArray$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReferenceArray` @kind class, `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4588b4.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4588ba.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4588be.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4588c4.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4588c8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458908.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L45890c.  v1:= 0I;
  #L45890e.  call `lazySet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L458914.  v0:= v0 + 1;
  #L458918.  v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v0;
  #L45891c.  return @kind void;
}
procedure `int` `c`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4587f8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L4587fc.  return v0;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4588dc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4588e2.  v0:= temp @kind object;
  #L4588e4.  if v0 == 0 then goto L4588f6;
  #L4588e8.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @kind virtual;
  #L4588ee.  v0:= temp;
  #L4588f0.  if v0 != 0 then goto L4588f6;
  #L4588f4.  goto L4588dc;
  #L4588f6.  return @kind void;
}
procedure `int` `d`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458810.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L458814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45881a.  v0:= temp;
  #L45881c.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458774.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L458778.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.d:()I` @kind virtual;
  #L45877e.  v1:= temp;
  #L458780.  if v0 != v1 then goto L458788;
  #L458784.  v0:= 1I;
  #L458786.  goto L45878a;
  #L458788.  v0:= 0I;
  #L45878a.  return v0;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45879c.  v0:= "value is null" @kind object;
  #L4587a0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4587a6.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4587aa.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4587b0.  v0:= temp;
  #L4587b2.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L4587b8.  v1:= temp;
  #L4587ba.  if v0 >= v1 then goto L4587c8;
  #L4587be.  call `lazySet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L4587c4.  v3:= 1I;
  #L4587c6.  return v3;
  #L4587c8.  v3:= 0I;
  #L4587ca.  return v3;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4587dc.  v1:= new `java.lang.UnsupportedOperationException`;
  #L4587e0.  call `<init>`(v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:()V` @kind direct;
  #L4587e6.  throw v1;
}
procedure `java.lang.Object` `peek`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.peek:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458830.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L458834.  call temp:= `length`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L45883a.  v1:= temp;
  #L45883c.  if v0 != v1 then goto L458844;
  #L458840.  v0:= 0I;
  #L458842.  return v0 @kind object;
  #L458844.  call temp:= `get`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L45884a.  v0:= temp @kind object;
  #L45884c.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L458860.  v0:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int`;
  #L458864.  call temp:= `length`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L45886a.  v1:= temp;
  #L45886c.  v2:= 0I;
  #L45886e.  if v0 != v1 then goto L458874;
  #L458872.  return v2 @kind object;
  #L458874.  v1:= v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.a` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L458878.  call temp:= `get`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L45887e.  v3:= temp @kind object;
  #L458880.  if v3 == 0 then goto L458894;
  #L458884.  v1:= v0 + 1;
  #L458888.  v4.`io.reactivex.internal.operators.maybe.MaybeMergeArray$c.b` @type ^`int` := v1;
  #L45888c.  call `lazySet`(v4, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.lazySet:(ILjava/lang/Object;)V` @kind virtual;
  #L458892.  return v3 @kind object;
  #L458894.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L45889a.  v3:= temp;
  #L45889c.  if v3 != v0 then goto L458878;
  #L4588a0.  return v2 @kind object;
}
