record `io.reactivex.internal.operators.maybe.MaybeCount$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeCount$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4545f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4545fa.  v0.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4545fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454610.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L454614.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45461a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45461e.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L454622.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4545d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4545d8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4545de.  v0:= temp;
  #L4545e0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L454634.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L454638.  v3.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45463c.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L454640.  v1:= 0L;
  #L454644.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L45464a.  v1:= temp @kind object;
  #L45464c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L454652.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454664.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L454668.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L45466c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L454670.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L454676.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L454688.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45468c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L454692.  v0:= temp;
  #L454694.  if v0 == 0 then goto L4546a6;
  #L454698.  v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45469c.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4546a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4546a6.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeCount$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeCount$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4546b8.  v3:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4546bc.  v2.`io.reactivex.internal.operators.maybe.MaybeCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L4546c0.  v3:= v2.`io.reactivex.internal.operators.maybe.MaybeCount$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4546c4.  v0:= 1L;
  #L4546c8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4546ce.  v0:= temp @kind object;
  #L4546d0.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4546d6.  return @kind void;
}
