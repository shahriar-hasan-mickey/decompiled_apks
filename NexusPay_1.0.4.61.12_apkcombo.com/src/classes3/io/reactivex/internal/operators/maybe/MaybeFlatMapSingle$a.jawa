record `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L456e60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L456e66.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L456e6a.  v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L456e6e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L456e80.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L456e86.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456e38.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L456e3e.  v0:= temp @kind object;
  #L456e40.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L456e44.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L456e4a.  v0:= temp;
  #L456e4c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456e98.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L456e9c.  v1:= new `java.util.NoSuchElementException`;
  #L456ea0.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L456ea6.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456eac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L456ec0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L456ec4.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L456eca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L456edc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L456ee2.  v1:= temp;
  #L456ee4.  if v1 == 0 then goto L456ef2;
  #L456ee8.  v1:= v0.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L456eec.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L456ef2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L456f04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L456f08.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L456f0e.  v3:= temp @kind object;
  #L456f10.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L456f14.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L456f1a.  v3:= temp @kind object;
  #L456f1c.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L456f20.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.isDisposed:()Z` @kind virtual;
  #L456f26.  v0:= temp;
  #L456f28.  if v0 != 0 then goto L456f40;
  #L456f2c.  v0:= new `io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$b`;
  #L456f30.  v1:= v2.`io.reactivex.internal.operators.maybe.MaybeFlatMapSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L456f34.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/SingleObserver;)V` @kind direct;
  #L456f3a.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L456f40.  return @kind void;
  #L456f42.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L456f44.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L456f4a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/maybe/MaybeFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L456f50.  return @kind void;
  catch `java.lang.Throwable` @[L456f04..L456f20] goto L456f42;
}
