record `io.reactivex.internal.operators.maybe.MaybeConcatArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.MaybeObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.d` @AccessFlag FINAL;
  `io.reactivex.MaybeSource`[] `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.f` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeConcatArray$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.MaybeSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.<init>:(Lorg/reactivestreams/Subscriber;[Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L453cc0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L453cc6.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L453cca.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.MaybeSource`[] := v2 @kind object;
  #L453cce.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L453cd2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L453cd8.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L453cdc.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L453ce0.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L453ce6.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L453cea.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L453cee.  v2:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L453cf2.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L453cf8.  v0.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L453cfc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L453d2c.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L453d32.  v0:= temp;
  #L453d34.  if v0 == 0 then goto L453d3a;
  #L453d38.  return @kind void;
  #L453d3a.  v0:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453d3e.  v1:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L453d42.  v2:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L453d46.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L453d4c.  v3:= temp;
  #L453d4e.  v4:= 0I;
  #L453d50.  if v3 == 0 then goto L453d5c;
  #L453d54.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453d5a.  return @kind void;
  #L453d5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L453d62.  v3:= temp @kind object;
  #L453d64.  if v3 == 0 then goto L453de6;
  #L453d68.  v5:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L453d6c.  v6:= 1I;
  #L453d6e.  if v3 == v5 then goto L453da8;
  #L453d72.  v7:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` @kind wide;
  #L453d76.  v5:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L453d7a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L453d80.  v9:= temp @kind wide;
  #L453d82.  v5:= lcmp(v7, v9);
  #L453d86.  if v5 == 0 then goto L453da2;
  #L453d8a.  v9:= 1L;
  #L453d8e.  v7:= v7 + v9 @kind long;
  #L453d90.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.g` @type ^`long` := v7 @kind wide;
  #L453d94.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453d9a.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L453da0.  goto L453dae;
  #L453da2.  v3:= 0I;
  #L453da4.  v6:= 0I;
  #L453da6.  goto L453dae;
  #L453da8.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453dae.  if v6 == 0 then goto L453de6;
  #L453db2.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L453db8.  v3:= temp;
  #L453dba.  if v3 != 0 then goto L453de6;
  #L453dbe.  v3:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int`;
  #L453dc2.  v4:= v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.e` @type ^`io.reactivex.MaybeSource`[] @kind object;
  #L453dc6.  v5:= length @variable v4;
  #L453dc8.  if v3 != v5 then goto L453dd4;
  #L453dcc.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L453dd2.  return @kind void;
  #L453dd4.  v5:= v3 + 1;
  #L453dd8.  v11.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.f` @type ^`int` := v5;
  #L453ddc.  v3:= v4[v3] @kind object;
  #L453de0.  call `subscribe`(v3, v11) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L453de6.  call temp:= `decrementAndGet`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L453dec.  v3:= temp;
  #L453dee.  if v3 != 0 then goto L453d46;
  #L453df2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453d10.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L453d14.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L453d1a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L453e04.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453e08.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L453e0c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453e12.  call `a`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L453e18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453e2c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L453e30.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453e36.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453e48.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L453e4c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L453e52.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453e64.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L453e68.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L453e6e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L453e74.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeConcatArray$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453e88.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L453e8e.  v0:= temp;
  #L453e90.  if v0 == 0 then goto L453ea4;
  #L453e94.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeConcatArray$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L453e98.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L453e9e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeConcatArray$a;.a:()V` @kind virtual;
  #L453ea4.  return @kind void;
}
