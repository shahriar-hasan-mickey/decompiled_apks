record `io.reactivex.internal.operators.maybe.MaybeMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.maybe.MaybeMap$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeMap$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L458104.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45810a.  v0.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L45810e.  v0.`io.reactivex.internal.operators.maybe.MaybeMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L458112.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458124.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458128.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L45812c.  v2.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L458130.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L458136.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4580e4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4580e8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4580ee.  v0:= temp;
  #L4580f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458148.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45814c.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L458152.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458164.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458168.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45816e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458180.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458184.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45818a.  v0:= temp;
  #L45818c.  if v0 == 0 then goto L45819e;
  #L458190.  v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L458194.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458198.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45819e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMap$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4581b0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4581b4.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4581ba.  v2:= temp @kind object;
  #L4581bc.  v0:= "The mapper returned a null item" @kind object;
  #L4581c0.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4581c6.  v2:= temp @kind object;
  #L4581c8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4581cc.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4581d2.  return @kind void;
  #L4581d4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4581d6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4581dc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMap$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4581e0.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4581e6.  return @kind void;
  catch `java.lang.Throwable` @[L4581b0..L4581c8] goto L4581d4;
}
