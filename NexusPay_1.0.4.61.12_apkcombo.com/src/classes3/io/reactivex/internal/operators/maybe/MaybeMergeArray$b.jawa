record `io.reactivex.internal.operators.maybe.MaybeMergeArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @AccessFlag ;
  `long` `io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeMergeArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.operators.maybe.MaybeMergeArray$d` v3 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/operators/maybe/MaybeMergeArray$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4583f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4583fe.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L458402.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int` := v2;
  #L458406.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L45840a.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L458410.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L458414.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L458418.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45841e.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L458422.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L458426.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45842c.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L458430.  v0.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` := v3 @kind object;
  #L458434.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458448.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L45844c.  if v0 != 0 then goto L458476;
  #L458450.  v0:= 1I;
  #L458452.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` := v0 @kind boolean;
  #L458456.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L45845a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L458460.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L458466.  v0:= temp;
  #L458468.  if v0 != 0 then goto L458476;
  #L45846c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L458470.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L458476.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458488.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L45848c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L458492.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L4584a4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4584aa.  v0:= temp;
  #L4584ac.  if v0 == 0 then goto L4584b2;
  #L4584b0.  return @kind void;
  #L4584b2.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` @kind boolean;
  #L4584b6.  if v0 == 0 then goto L4584c2;
  #L4584ba.  call `e`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @kind virtual;
  #L4584c0.  goto L4584c8;
  #L4584c2.  call `f`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @kind virtual;
  #L4584c8.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v6 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4584dc.  v0:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4584e0.  v1:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4584e4.  v2:= 1I;
  #L4584e6.  v3:= 1I;
  #L4584e8.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L4584ec.  if v4 == 0 then goto L4584f8;
  #L4584f0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4584f6.  return @kind void;
  #L4584f8.  v4:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4584fc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L458502.  v4:= temp @kind object;
  #L458504.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L458508.  if v4 == 0 then goto L45851a;
  #L45850c.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L458512.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458518.  return @kind void;
  #L45851a.  call temp:= `d`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.d:()I` @kind interface;
  #L458520.  v4:= temp;
  #L458522.  v5:= v6.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L458526.  if v4 != v5 then goto L45852e;
  #L45852a.  v4:= 1I;
  #L45852c.  goto L458530;
  #L45852e.  v4:= 0I;
  #L458530.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L458536.  v5:= temp;
  #L458538.  if v5 != 0 then goto L458544;
  #L45853c.  v5:= 0I;
  #L45853e.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L458544.  if v4 == 0 then goto L458550;
  #L458548.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45854e.  return @kind void;
  #L458550.  v3:= -v3 @kind int;
  #L458552.  call temp:= `addAndGet`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L458558.  v3:= temp;
  #L45855a.  if v3 != 0 then goto L4584e8;
  #L45855e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L458570.  v0:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L458574.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L458578.  v2:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` @kind wide;
  #L45857c.  v4:= 1I;
  #L45857e.  v5:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L458582.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L458588.  v5:= temp @kind wide;
  #L45858a.  v7:= lcmp(v2, v5);
  #L45858e.  if v7 == 0 then goto L45860c;
  #L458592.  v8:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L458596.  if v8 == 0 then goto L4585a2;
  #L45859a.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4585a0.  return @kind void;
  #L4585a2.  v8:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4585a6.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4585ac.  v8:= temp @kind object;
  #L4585ae.  v8:= (`java.lang.Throwable`) v8 @kind object;
  #L4585b2.  if v8 == 0 then goto L4585d0;
  #L4585b6.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4585bc.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4585c0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4585c6.  v1:= temp @kind object;
  #L4585c8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4585ce.  return @kind void;
  #L4585d0.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L4585d6.  v8:= temp;
  #L4585d8.  v9:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L4585dc.  if v8 != v9 then goto L4585e8;
  #L4585e0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4585e6.  return @kind void;
  #L4585e8.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4585ee.  v8:= temp @kind object;
  #L4585f0.  if v8 != 0 then goto L4585f6;
  #L4585f4.  goto L45860c;
  #L4585f6.  v7:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4585fa.  if v8 == v7 then goto L45858a;
  #L4585fe.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L458604.  v7:= 1L;
  #L458608.  v2:= v2 + v7 @kind long;
  #L45860a.  goto L45858a;
  #L45860c.  if v7 != 0 then goto L45866e;
  #L458610.  v5:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L458614.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45861a.  v5:= temp @kind object;
  #L45861c.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L458620.  if v5 == 0 then goto L45863e;
  #L458624.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45862a.  v1:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45862e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L458634.  v1:= temp @kind object;
  #L458636.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45863c.  return @kind void;
  #L45863e.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.peek:()Ljava/lang/Object;` @kind interface;
  #L458644.  v5:= temp @kind object;
  #L458646.  v6:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L45864a.  if v5 != v6 then goto L458656;
  #L45864e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.b:()V` @kind interface;
  #L458654.  goto L45863e;
  #L458656.  call temp:= `c`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.c:()I` @kind interface;
  #L45865c.  v5:= temp;
  #L45865e.  v6:= v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.f` @type ^`int`;
  #L458662.  if v5 != v6 then goto L45866e;
  #L458666.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45866c.  return @kind void;
  #L45866e.  v10.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.i` @type ^`long` := v2 @kind wide;
  #L458672.  v4:= -v4 @kind int;
  #L458674.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45867a.  v4:= temp;
  #L45867c.  if v4 != 0 then goto L45857e;
  #L458680.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.isCancelled:()Z` @AccessFlag  {
    temp;
    v0;

  #L458374.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.g` @type ^`boolean` @kind boolean;
  #L458378.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45838c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L458390.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L458396.  v0:= temp;
  #L458398.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L458694.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L458698.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L45869c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4586a2.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4586a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4586bc.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4586c0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4586c6.  v0:= temp;
  #L4586c8.  if v0 == 0 then goto L4586ec;
  #L4586cc.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4586d0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4586d6.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4586da.  v0:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4586de.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4586e4.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L4586ea.  goto L4586f2;
  #L4586ec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4586f2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458704.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.b` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L458708.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45870e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458720.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L458724.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45872a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L458730.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4583d0.  v0:= v2.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.d` @type ^`io.reactivex.internal.operators.maybe.MaybeMergeArray$d` @kind object;
  #L4583d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$d;.poll:()Ljava/lang/Object;` @kind interface;
  #L4583da.  v0:= temp @kind object;
  #L4583dc.  v1:= `@@io.reactivex.internal.util.NotificationLite.COMPLETE` @type ^`io.reactivex.internal.util.NotificationLite` @kind object;
  #L4583e0.  if v0 == v1 then goto L4583d0;
  #L4583e4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458744.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L45874a.  v0:= temp;
  #L45874c.  if v0 == 0 then goto L458760;
  #L458750.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L458754.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45875a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.drain:()V` @kind virtual;
  #L458760.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.maybe.MaybeMergeArray$b` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/maybe/MaybeMergeArray$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4583ac.  v0:= 2I;
  #L4583ae.  v2:= v2 ^& v0 @kind int;
  #L4583b0.  if v2 == 0 then goto L4583bc;
  #L4583b4.  v2:= 1I;
  #L4583b6.  v1.`io.reactivex.internal.operators.maybe.MaybeMergeArray$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4583ba.  return v0;
  #L4583bc.  v2:= 0I;
  #L4583be.  return v2;
}
