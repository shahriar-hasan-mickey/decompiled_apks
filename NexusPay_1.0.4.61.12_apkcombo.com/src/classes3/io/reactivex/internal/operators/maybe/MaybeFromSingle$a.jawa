record `io.reactivex.internal.operators.maybe.MaybeFromSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45788c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L457892.  v0.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L457896.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4578a8.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4578ac.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4578b2.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4578b6.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4578ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45786c.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L457870.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L457876.  v0:= temp;
  #L457878.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4578cc.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4578d0.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4578d4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4578d8.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4578de.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4578f0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4578f4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4578fa.  v0:= temp;
  #L4578fc.  if v0 == 0 then goto L45790e;
  #L457900.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L457904.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L457908.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45790e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeFromSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeFromSingle$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L457920.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L457924.  v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L457928.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeFromSingle$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45792c.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L457932.  return @kind void;
}
