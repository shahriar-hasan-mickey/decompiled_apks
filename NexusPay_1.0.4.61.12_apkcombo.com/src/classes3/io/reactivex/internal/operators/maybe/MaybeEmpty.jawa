record `io.reactivex.internal.operators.maybe.MaybeEmpty` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.internal.fuseable.ScalarCallable` @kind interface {
}
global `io.reactivex.internal.operators.maybe.MaybeEmpty` `@@io.reactivex.internal.operators.maybe.MaybeEmpty.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/maybe/MaybeEmpty;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L455a80.  v0:= new `io.reactivex.internal.operators.maybe.MaybeEmpty`;
  #L455a84.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/maybe/MaybeEmpty;.<init>:()V` @kind direct;
  #L455a8a.  `@@io.reactivex.internal.operators.maybe.MaybeEmpty.INSTANCE` @type ^`io.reactivex.internal.operators.maybe.MaybeEmpty` := v0 @kind object;
  #L455a8e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeEmpty` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEmpty;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L455aa0.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L455aa6.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.maybe.MaybeEmpty` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeEmpty;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L455a6c.  v0:= 0I;
  #L455a6e.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeEmpty` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeEmpty;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;

  #L455ab8.  call `complete`(v1) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/MaybeObserver;)V` @kind static;
  #L455abe.  return @kind void;
}
