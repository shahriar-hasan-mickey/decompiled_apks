record `io.reactivex.internal.operators.maybe.MaybeTimer$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeTimer$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.maybe.MaybeTimer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeTimer$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45a54c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45a552.  v0.`io.reactivex.internal.operators.maybe.MaybeTimer$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L45a556.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.maybe.MaybeTimer$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L45a5a8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45a5ae.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeTimer$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L45a568.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45a56e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeTimer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45a524.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45a52a.  v0:= temp @kind object;
  #L45a52c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45a530.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45a536.  v0:= temp;
  #L45a538.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.maybe.MaybeTimer$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeTimer$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45a580.  v0:= v3.`io.reactivex.internal.operators.maybe.MaybeTimer$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L45a584.  v1:= 0L;
  #L45a588.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L45a58e.  v1:= temp @kind object;
  #L45a590.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L45a596.  return @kind void;
}
