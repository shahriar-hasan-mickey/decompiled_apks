record `io.reactivex.internal.operators.maybe.MaybeError` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `java.lang.Throwable` `io.reactivex.internal.operators.maybe.MaybeError.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeError` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeError;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L455de0.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L455de6.  v0.`io.reactivex.internal.operators.maybe.MaybeError.a` @type ^`java.lang.Throwable` := v1 @kind object;
  #L455dea.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.maybe.MaybeError` v1 @kind this, `io.reactivex.MaybeObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeError;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L455dfc.  call temp:= `disposed`() @signature `Lio/reactivex/disposables/Disposables;.disposed:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L455e02.  v0:= temp @kind object;
  #L455e04.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L455e0a.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeError.a` @type ^`java.lang.Throwable` @kind object;
  #L455e0e.  call `onError`(v2, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L455e14.  return @kind void;
}
