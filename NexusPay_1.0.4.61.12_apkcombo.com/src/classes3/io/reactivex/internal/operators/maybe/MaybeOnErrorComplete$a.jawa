record `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` @kind class @AccessFlag FINAL extends `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L458bd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L458bda.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L458bde.  v0.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L458be2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458bf4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458bf8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L458bfe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458bb4.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458bb8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L458bbe.  v0:= temp;
  #L458bc0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458c10.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458c14.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L458c1a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L458c2c.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L458c30.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L458c36.  v0:= temp;
  #L458c38.  if v0 == 0 then goto L458c48;
  #L458c3c.  v6:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458c40.  call `onComplete`(v6) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L458c46.  goto L458c52;
  #L458c48.  v0:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458c4c.  call `onError`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458c52.  return @kind void;
  #L458c54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L458c56.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L458c5c.  v1:= v5.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458c60.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L458c64.  v3:= 2I;
  #L458c66.  v3:= new `java.lang.Throwable`[v3];
  #L458c6a.  v4:= 0I;
  #L458c6c.  v3[v4]:= v6 @kind object;
  #L458c70.  v6:= 1I;
  #L458c72.  v3[v6]:= v0 @kind object;
  #L458c76.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L458c7c.  call `onError`(v1, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L458c82.  return @kind void;
  catch `java.lang.Throwable` @[L458c2c..L458c38] goto L458c54;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458ca0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L458ca4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L458caa.  v0:= temp;
  #L458cac.  if v0 == 0 then goto L458cbe;
  #L458cb0.  v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L458cb4.  v2:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458cb8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L458cbe.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/maybe/MaybeOnErrorComplete$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L458cd0.  v0:= v1.`io.reactivex.internal.operators.maybe.MaybeOnErrorComplete$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L458cd4.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L458cda.  return @kind void;
}
