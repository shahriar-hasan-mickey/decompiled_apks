record `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45ed5c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L45ed62.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L45ed66.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45ed6a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`boolean` := v3 @kind boolean;
  #L45ed6e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45ed80.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.Observable` @kind object;
  #L45ed84.  v1:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45ed88.  call temp:= `b`(v0, v1, v5) @signature `Lio/reactivex/internal/operators/mixed/a;.b:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/Observer;)Z` @kind static;
  #L45ed8e.  v0:= temp;
  #L45ed90.  if v0 != 0 then goto L45edb0;
  #L45ed94.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.a` @type ^`io.reactivex.Observable` @kind object;
  #L45ed98.  v1:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a`;
  #L45ed9c.  v2:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45eda0.  v3:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe.c` @type ^`boolean` @kind boolean;
  #L45eda4.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L45edaa.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L45edb0.  return @kind void;
}
