record `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45cf84.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L45cf88.  v1:= 0I;
  #L45cf8a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L45cf90.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` := v0 @kind object;
  #L45cf94.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45cfa8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45cfae.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45cfb2.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45cfb6.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45cfba.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45cfbe.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45cfc4.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45cfc8.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45cfcc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45cfd2.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L45cfd6.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45cfda.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45cfe0.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45cfe4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45d020.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d024.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L45d028.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45d02e.  v0:= temp @kind object;
  #L45d030.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L45d034.  if v0 == 0 then goto L45d046;
  #L45d038.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L45d03c.  if v0 == v1 then goto L45d046;
  #L45d040.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L45d046.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L45d058.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45d05e.  v0:= temp;
  #L45d060.  if v0 == 0 then goto L45d066;
  #L45d064.  return @kind void;
  #L45d066.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45d06a.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45d06e.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d072.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45d076.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` @kind wide;
  #L45d07a.  v6:= 1I;
  #L45d07c.  v7:= 1I;
  #L45d07e.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L45d082.  if v8 == 0 then goto L45d088;
  #L45d086.  return @kind void;
  #L45d088.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d08e.  v8:= temp @kind object;
  #L45d090.  if v8 == 0 then goto L45d0ac;
  #L45d094.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45d098.  if v8 != 0 then goto L45d0ac;
  #L45d09c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45d0a2.  v1:= temp @kind object;
  #L45d0a4.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d0aa.  return @kind void;
  #L45d0ac.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L45d0b0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d0b6.  v9:= temp @kind object;
  #L45d0b8.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v9 @kind object;
  #L45d0bc.  if v9 != 0 then goto L45d0c4;
  #L45d0c0.  v10:= 1I;
  #L45d0c2.  goto L45d0c6;
  #L45d0c4.  v10:= 0I;
  #L45d0c6.  if v8 == 0 then goto L45d0ea;
  #L45d0ca.  if v10 == 0 then goto L45d0ea;
  #L45d0ce.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45d0d4.  v1:= temp @kind object;
  #L45d0d6.  if v1 == 0 then goto L45d0e2;
  #L45d0da.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d0e0.  goto L45d0e8;
  #L45d0e2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45d0e8.  return @kind void;
  #L45d0ea.  if v10 != 0 then goto L45d122;
  #L45d0ee.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45d0f2.  if v8 == 0 then goto L45d122;
  #L45d0f6.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45d0fc.  v10:= temp @kind wide;
  #L45d0fe.  v8:= lcmp(v4, v10);
  #L45d102.  if v8 != 0 then goto L45d108;
  #L45d106.  goto L45d122;
  #L45d108.  v8:= 0I;
  #L45d10a.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45d110.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45d114.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45d11a.  v8:= 1L;
  #L45d11e.  v4:= v4 + v8 @kind long;
  #L45d120.  goto L45d07e;
  #L45d122.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.j` @type ^`long` := v4 @kind wide;
  #L45d126.  v7:= -v7 @kind int;
  #L45d128.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45d12e.  v7:= temp;
  #L45d130.  if v7 != 0 then goto L45d07e;
  #L45d134.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.c:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45d148.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d14c.  v1:= 0I;
  #L45d14e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45d154.  v3:= temp;
  #L45d156.  if v3 == 0 then goto L45d18a;
  #L45d15a.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45d15e.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45d164.  v3:= temp;
  #L45d166.  if v3 == 0 then goto L45d18a;
  #L45d16a.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45d16e.  if v3 != 0 then goto L45d182;
  #L45d172.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45d176.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45d17c.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45d182.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45d188.  return @kind void;
  #L45d18a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45d190.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45cff8.  v0:= 1I;
  #L45cffa.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45cffe.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45d002.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45d008.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45d00e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d1a4.  v0:= 1I;
  #L45d1a6.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45d1aa.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45d1b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d1c4.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45d1c8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45d1ce.  v0:= temp;
  #L45d1d0.  if v0 == 0 then goto L45d1f0;
  #L45d1d4.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45d1d8.  if v2 != 0 then goto L45d1e2;
  #L45d1dc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45d1e2.  v2:= 1I;
  #L45d1e4.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L45d1e8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45d1ee.  goto L45d1f6;
  #L45d1f0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45d1f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45d208.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d20c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d212.  v0:= temp @kind object;
  #L45d214.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v0 @kind object;
  #L45d218.  if v0 == 0 then goto L45d222;
  #L45d21c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L45d222.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45d226.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45d22c.  v4:= temp @kind object;
  #L45d22e.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L45d232.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45d238.  v4:= temp @kind object;
  #L45d23a.  v4:= (`io.reactivex.SingleSource`) v4 @kind object;
  #L45d23e.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`;
  #L45d242.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;)V` @kind direct;
  #L45d248.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d24c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d252.  v1:= temp @kind object;
  #L45d254.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a`) v1 @kind object;
  #L45d258.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L45d25c.  if v1 != v2 then goto L45d262;
  #L45d260.  goto L45d278;
  #L45d262.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d266.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45d26c.  v1:= temp;
  #L45d26e.  if v1 == 0 then goto L45d248;
  #L45d272.  call `subscribe`(v4, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L45d278.  return @kind void;
  #L45d27a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45d27c.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45d282.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45d286.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45d28c.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45d290.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a$a` @kind object;
  #L45d294.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45d29a.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45d2a0.  return @kind void;
  catch `java.lang.Throwable` @[L45d222..L45d23e] goto L45d27a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45d2c0.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45d2c4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45d2ca.  v0:= temp;
  #L45d2cc.  if v0 == 0 then goto L45d2ee;
  #L45d2d0.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45d2d4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45d2d8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45d2de.  v0:= 9223372036854775807L;
  #L45d2e8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45d2ee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d300.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45d304.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45d30a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45d310.  return @kind void;
}
