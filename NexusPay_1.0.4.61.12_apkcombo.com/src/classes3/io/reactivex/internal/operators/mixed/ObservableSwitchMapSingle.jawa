record `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.Observable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle;.<init>:(Lio/reactivex/Observable;Lio/reactivex/functions/Function;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L45f19c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L45f1a2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.a` @type ^`io.reactivex.Observable` := v1 @kind object;
  #L45f1a6.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45f1aa.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.c` @type ^`boolean` := v3 @kind boolean;
  #L45f1ae.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45f1c0.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.a` @type ^`io.reactivex.Observable` @kind object;
  #L45f1c4.  v1:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45f1c8.  call temp:= `c`(v0, v1, v5) @signature `Lio/reactivex/internal/operators/mixed/a;.c:(Ljava/lang/Object;Lio/reactivex/functions/Function;Lio/reactivex/Observer;)Z` @kind static;
  #L45f1ce.  v0:= temp;
  #L45f1d0.  if v0 != 0 then goto L45f1f0;
  #L45f1d4.  v0:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.a` @type ^`io.reactivex.Observable` @kind object;
  #L45f1d8.  v1:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a`;
  #L45f1dc.  v2:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45f1e0.  v3:= v4.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle.c` @type ^`boolean` @kind boolean;
  #L45f1e4.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @kind direct;
  #L45f1ea.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L45f1f0.  return @kind void;
}
