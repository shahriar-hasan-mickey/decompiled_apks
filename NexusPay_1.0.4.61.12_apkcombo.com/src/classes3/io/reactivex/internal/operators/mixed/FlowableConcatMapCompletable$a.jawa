record `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45b82c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45b832.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L45b836.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45b83a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L45b83e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int` := v4;
  #L45b842.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45b846.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45b84c.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45b850.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a`;
  #L45b854.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;)V` @kind direct;
  #L45b85a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a` := v1 @kind object;
  #L45b85e.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L45b862.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L45b868.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L45b86c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45b8c4.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45b8ca.  v0:= temp;
  #L45b8cc.  if v0 == 0 then goto L45b8d2;
  #L45b8d0.  return @kind void;
  #L45b8d2.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L45b8d6.  if v0 == 0 then goto L45b8e6;
  #L45b8da.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45b8de.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45b8e4.  return @kind void;
  #L45b8e6.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` @kind boolean;
  #L45b8ea.  if v0 != 0 then goto L45ba12;
  #L45b8ee.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45b8f2.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45b8f6.  if v0 != v1 then goto L45b92c;
  #L45b8fa.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45b8fe.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45b904.  v0:= temp @kind object;
  #L45b906.  if v0 == 0 then goto L45b92c;
  #L45b90a.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45b90e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45b914.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45b918.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45b91e.  v0:= temp @kind object;
  #L45b920.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45b924.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45b92a.  return @kind void;
  #L45b92c.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` @kind boolean;
  #L45b930.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45b934.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45b93a.  v1:= temp @kind object;
  #L45b93c.  v2:= 0I;
  #L45b93e.  v3:= 1I;
  #L45b940.  if v1 != 0 then goto L45b948;
  #L45b944.  v4:= 1I;
  #L45b946.  goto L45b94a;
  #L45b948.  v4:= 0I;
  #L45b94a.  if v0 == 0 then goto L45b97a;
  #L45b94e.  if v4 == 0 then goto L45b97a;
  #L45b952.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45b956.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45b95c.  v0:= temp @kind object;
  #L45b95e.  if v0 == 0 then goto L45b96e;
  #L45b962.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45b966.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45b96c.  goto L45b978;
  #L45b96e.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45b972.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45b978.  return @kind void;
  #L45b97a.  if v4 != 0 then goto L45ba12;
  #L45b97e.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L45b982.  v4:= v0 ^> 1;
  #L45b986.  v0:= v0 - v4 @kind int;
  #L45b988.  v4:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int`;
  #L45b98c.  v4:= v4 + v3 @kind int;
  #L45b98e.  if v4 != v0 then goto L45b9a4;
  #L45b992.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v2;
  #L45b996.  v2:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45b99a.  v4:= (`long`) v0 @kind i2l;
  #L45b99c.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45b9a2.  goto L45b9a8;
  #L45b9a4.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.l` @type ^`int` := v4;
  #L45b9a8.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45b9ac.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45b9b2.  v0:= temp @kind object;
  #L45b9b4.  v1:= "The mapper returned a null CompletableSource" @kind object;
  #L45b9b8.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45b9be.  v0:= temp @kind object;
  #L45b9c0.  v0:= (`io.reactivex.CompletableSource`) v0 @kind object;
  #L45b9c4.  v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v3 @kind boolean;
  #L45b9c8.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L45b9cc.  call `subscribe`(v0, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L45b9d2.  goto L45ba12;
  #L45b9d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45b9d6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45b9dc.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45b9e0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45b9e6.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45b9ea.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45b9f0.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45b9f4.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45b9fa.  v0:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45b9fe.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45ba04.  v0:= temp @kind object;
  #L45ba06.  v1:= v6.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45ba0a.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ba10.  return @kind void;
  #L45ba12.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L45ba18.  v0:= temp;
  #L45ba1a.  if v0 != 0 then goto L45b8d2;
  #L45ba1e.  return @kind void;
  catch `java.lang.Throwable` @[L45b9a8..L45b9c4] goto L45b9d4;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L45ba3c.  v0:= 0I;
  #L45ba3e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45ba42.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45ba48.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45ba5c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ba60.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45ba66.  v0:= temp;
  #L45ba68.  if v0 == 0 then goto L45bac6;
  #L45ba6c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45ba70.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45ba74.  if v2 != v0 then goto L45bab8;
  #L45ba78.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45ba7c.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45ba82.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ba86.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45ba8c.  v2:= temp @kind object;
  #L45ba8e.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45ba92.  if v2 == v0 then goto L45baa0;
  #L45ba96.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45ba9a.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45baa0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45baa6.  v2:= temp;
  #L45baa8.  if v2 != 0 then goto L45bacc;
  #L45baac.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45bab0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45bab6.  goto L45bacc;
  #L45bab8.  v2:= 0I;
  #L45baba.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L45babe.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45bac4.  goto L45bacc;
  #L45bac6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45bacc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b880.  v0:= 1I;
  #L45b882.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` := v0 @kind boolean;
  #L45b886.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45b88a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45b890.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L45b894.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L45b89a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45b8a0.  v0:= temp;
  #L45b8a2.  if v0 != 0 then goto L45b8b0;
  #L45b8a6.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45b8aa.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45b8b0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b814.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L45b818.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bae0.  v0:= 1I;
  #L45bae2.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v0 @kind boolean;
  #L45bae6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45baec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bb00.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45bb04.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45bb0a.  v0:= temp;
  #L45bb0c.  if v0 == 0 then goto L45bb6a;
  #L45bb10.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45bb14.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45bb18.  if v2 != v0 then goto L45bb5c;
  #L45bb1c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a$a` @kind object;
  #L45bb20.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L45bb26.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45bb2a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45bb30.  v2:= temp @kind object;
  #L45bb32.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45bb36.  if v2 == v0 then goto L45bb44;
  #L45bb3a.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45bb3e.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45bb44.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45bb4a.  v2:= temp;
  #L45bb4c.  if v2 != 0 then goto L45bb70;
  #L45bb50.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45bb54.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45bb5a.  goto L45bb70;
  #L45bb5c.  v2:= 1I;
  #L45bb5e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.j` @type ^`boolean` := v2 @kind boolean;
  #L45bb62.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45bb68.  goto L45bb70;
  #L45bb6a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45bb70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bb84.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45bb88.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45bb8e.  v2:= temp;
  #L45bb90.  if v2 == 0 then goto L45bb9c;
  #L45bb94.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45bb9a.  goto L45bbba;
  #L45bb9c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45bba0.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45bba6.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45bbaa.  v0:= "Queue full?!" @kind object;
  #L45bbae.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45bbb4.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45bbba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45bbcc.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45bbd0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45bbd6.  v0:= temp;
  #L45bbd8.  if v0 == 0 then goto L45bbf6;
  #L45bbdc.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45bbe0.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45bbe4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45bbea.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapCompletable$a.f` @type ^`int`;
  #L45bbee.  v0:= (`long`) v0 @kind i2l;
  #L45bbf0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45bbf6.  return @kind void;
}
