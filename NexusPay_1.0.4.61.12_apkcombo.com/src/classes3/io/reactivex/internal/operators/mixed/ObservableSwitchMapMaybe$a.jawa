record `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45e9f8.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L45e9fc.  v1:= 0I;
  #L45e9fe.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L45ea04.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` := v0 @kind object;
  #L45ea08.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45ea1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45ea22.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L45ea26.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45ea2a.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45ea2e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45ea32.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45ea38.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45ea3c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45ea40.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45ea46.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45ea4a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45ea84.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ea88.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L45ea8c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ea92.  v0:= temp @kind object;
  #L45ea94.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L45ea98.  if v0 == 0 then goto L45eaaa;
  #L45ea9c.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L45eaa0.  if v0 == v1 then goto L45eaaa;
  #L45eaa4.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L45eaaa.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L45eabc.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45eac2.  v0:= temp;
  #L45eac4.  if v0 == 0 then goto L45eaca;
  #L45eac8.  return @kind void;
  #L45eaca.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45eace.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ead2.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ead6.  v3:= 1I;
  #L45ead8.  v4:= 1I;
  #L45eada.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L45eade.  if v5 == 0 then goto L45eae4;
  #L45eae2.  return @kind void;
  #L45eae4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45eaea.  v5:= temp @kind object;
  #L45eaec.  if v5 == 0 then goto L45eb08;
  #L45eaf0.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45eaf4.  if v5 != 0 then goto L45eb08;
  #L45eaf8.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45eafe.  v1:= temp @kind object;
  #L45eb00.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45eb06.  return @kind void;
  #L45eb08.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` @kind boolean;
  #L45eb0c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45eb12.  v6:= temp @kind object;
  #L45eb14.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v6 @kind object;
  #L45eb18.  if v6 != 0 then goto L45eb20;
  #L45eb1c.  v7:= 1I;
  #L45eb1e.  goto L45eb22;
  #L45eb20.  v7:= 0I;
  #L45eb22.  if v5 == 0 then goto L45eb46;
  #L45eb26.  if v7 == 0 then goto L45eb46;
  #L45eb2a.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45eb30.  v1:= temp @kind object;
  #L45eb32.  if v1 == 0 then goto L45eb3e;
  #L45eb36.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45eb3c.  goto L45eb44;
  #L45eb3e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45eb44.  return @kind void;
  #L45eb46.  if v7 != 0 then goto L45eb68;
  #L45eb4a.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45eb4e.  if v5 != 0 then goto L45eb54;
  #L45eb52.  goto L45eb68;
  #L45eb54.  v5:= 0I;
  #L45eb56.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45eb5c.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45eb60.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45eb66.  goto L45eada;
  #L45eb68.  v4:= -v4 @kind int;
  #L45eb6a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45eb70.  v4:= temp;
  #L45eb72.  if v4 != 0 then goto L45eada;
  #L45eb76.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.c:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45eb88.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45eb8c.  v1:= 0I;
  #L45eb8e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45eb94.  v3:= temp;
  #L45eb96.  if v3 == 0 then goto L45eba0;
  #L45eb9a.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45eba0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.d:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45ebb4.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ebb8.  v1:= 0I;
  #L45ebba.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45ebc0.  v3:= temp;
  #L45ebc2.  if v3 == 0 then goto L45ebf6;
  #L45ebc6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ebca.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45ebd0.  v3:= temp;
  #L45ebd2.  if v3 == 0 then goto L45ebf6;
  #L45ebd6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45ebda.  if v3 != 0 then goto L45ebee;
  #L45ebde.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ebe2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ebe8.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45ebee.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45ebf4.  return @kind void;
  #L45ebf6.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45ebfc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ea5c.  v0:= 1I;
  #L45ea5e.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45ea62.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ea66.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ea6c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45ea72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e9e0.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L45e9e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ec10.  v0:= 1I;
  #L45ec12.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L45ec16.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45ec1c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ec30.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ec34.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45ec3a.  v0:= temp;
  #L45ec3c.  if v0 == 0 then goto L45ec5c;
  #L45ec40.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45ec44.  if v2 != 0 then goto L45ec4e;
  #L45ec48.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45ec4e.  v2:= 1I;
  #L45ec50.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.g` @type ^`boolean` := v2 @kind boolean;
  #L45ec54.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45ec5a.  goto L45ec62;
  #L45ec5c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45ec62.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45ec74.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ec78.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ec7e.  v0:= temp @kind object;
  #L45ec80.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v0 @kind object;
  #L45ec84.  if v0 == 0 then goto L45ec8e;
  #L45ec88.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L45ec8e.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45ec92.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45ec98.  v4:= temp @kind object;
  #L45ec9a.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L45ec9e.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45eca4.  v4:= temp @kind object;
  #L45eca6.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L45ecaa.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`;
  #L45ecae.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;)V` @kind direct;
  #L45ecb4.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ecb8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ecbe.  v1:= temp @kind object;
  #L45ecc0.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a`) v1 @kind object;
  #L45ecc4.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L45ecc8.  if v1 != v2 then goto L45ecce;
  #L45eccc.  goto L45ece4;
  #L45ecce.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ecd2.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45ecd8.  v1:= temp;
  #L45ecda.  if v1 == 0 then goto L45ecb4;
  #L45ecde.  call `subscribe`(v4, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45ece4.  return @kind void;
  #L45ece6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ece8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45ecee.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ecf2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45ecf8.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ecfc.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a$a` @kind object;
  #L45ed00.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ed06.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45ed0c.  return @kind void;
  catch `java.lang.Throwable` @[L45ec8e..L45ecaa] goto L45ece6;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ed2c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45ed30.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45ed36.  v0:= temp;
  #L45ed38.  if v0 == 0 then goto L45ed4a;
  #L45ed3c.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45ed40.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45ed44.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45ed4a.  return @kind void;
}
