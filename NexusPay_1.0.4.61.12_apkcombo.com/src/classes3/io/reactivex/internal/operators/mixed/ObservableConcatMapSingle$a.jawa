record `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45e17c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45e182.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L45e186.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45e18a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L45e18e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45e192.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45e198.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45e19c.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a`;
  #L45e1a0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;)V` @kind direct;
  #L45e1a6.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a` := v1 @kind object;
  #L45e1aa.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L45e1ae.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L45e1b4.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L45e1b8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L45e214.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45e21a.  v0:= temp;
  #L45e21c.  if v0 == 0 then goto L45e222;
  #L45e220.  return @kind void;
  #L45e222.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45e226.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e22a.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45e22e.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e232.  v4:= 1I;
  #L45e234.  v5:= 1I;
  #L45e236.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L45e23a.  v7:= 0I;
  #L45e23c.  if v6 == 0 then goto L45e24e;
  #L45e240.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45e246.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45e24a.  goto L45e344;
  #L45e24e.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int`;
  #L45e252.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45e258.  v8:= temp @kind object;
  #L45e25a.  if v8 == 0 then goto L45e28c;
  #L45e25e.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e262.  if v1 == v8 then goto L45e272;
  #L45e266.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e26a.  if v1 != v8 then goto L45e28c;
  #L45e26e.  if v6 != 0 then goto L45e28c;
  #L45e272.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45e278.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45e27c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e282.  v1:= temp @kind object;
  #L45e284.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e28a.  return @kind void;
  #L45e28c.  v8:= 0I;
  #L45e28e.  if v6 != 0 then goto L45e328;
  #L45e292.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L45e296.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45e29c.  v7:= temp @kind object;
  #L45e29e.  if v7 != 0 then goto L45e2a4;
  #L45e2a2.  v8:= 1I;
  #L45e2a4.  if v6 == 0 then goto L45e2c8;
  #L45e2a8.  if v8 == 0 then goto L45e2c8;
  #L45e2ac.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e2b2.  v1:= temp @kind object;
  #L45e2b4.  if v1 != 0 then goto L45e2c0;
  #L45e2b8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45e2be.  goto L45e2c6;
  #L45e2c0.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e2c6.  return @kind void;
  #L45e2c8.  if v8 == 0 then goto L45e2ce;
  #L45e2cc.  goto L45e344;
  #L45e2ce.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45e2d2.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45e2d8.  v6:= temp @kind object;
  #L45e2da.  v7:= "The mapper returned a null SingleSource" @kind object;
  #L45e2de.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e2e4.  v6:= temp @kind object;
  #L45e2e6.  v6:= (`io.reactivex.SingleSource`) v6 @kind object;
  #L45e2ea.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v4;
  #L45e2ee.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L45e2f2.  call `subscribe`(v6, v7) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L45e2f8.  goto L45e344;
  #L45e2fa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45e2fc.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45e302.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e306.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45e30c.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45e312.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45e318.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e31e.  v1:= temp @kind object;
  #L45e320.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e326.  return @kind void;
  #L45e328.  v9:= 2I;
  #L45e32a.  if v6 != v9 then goto L45e344;
  #L45e32e.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` @kind object;
  #L45e332.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45e336.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45e33c.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v8;
  #L45e340.  goto L45e236;
  #L45e344.  v5:= -v5 @kind int;
  #L45e346.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45e34c.  v5:= temp;
  #L45e34e.  if v5 != 0 then goto L45e236;
  #L45e352.  return @kind void;
  catch `java.lang.Throwable` @[L45e2ce..L45e2ea] goto L45e2fa;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45e370.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e374.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45e37a.  v0:= temp;
  #L45e37c.  if v0 == 0 then goto L45e3a4;
  #L45e380.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e384.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e388.  if v2 == v0 then goto L45e396;
  #L45e38c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e390.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45e396.  v2:= 0I;
  #L45e398.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v2;
  #L45e39c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45e3a2.  goto L45e3aa;
  #L45e3a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45e3aa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L45e3bc.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L45e3c0.  v1:= 2I;
  #L45e3c2.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.k` @type ^`int` := v1;
  #L45e3c6.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45e3cc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e1cc.  v0:= 1I;
  #L45e1ce.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45e1d2.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e1d6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45e1dc.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L45e1e0.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L45e1e6.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45e1ec.  v0:= temp;
  #L45e1ee.  if v0 != 0 then goto L45e202;
  #L45e1f2.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45e1f6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45e1fc.  v0:= 0I;
  #L45e1fe.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L45e202.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e164.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L45e168.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e3e0.  v0:= 1I;
  #L45e3e2.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45e3e6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45e3ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e400.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e404.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45e40a.  v0:= temp;
  #L45e40c.  if v0 == 0 then goto L45e434;
  #L45e410.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e414.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45e418.  if v2 != v0 then goto L45e426;
  #L45e41c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a$a` @kind object;
  #L45e420.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L45e426.  v2:= 1I;
  #L45e428.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.h` @type ^`boolean` := v2 @kind boolean;
  #L45e42c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45e432.  goto L45e43a;
  #L45e434.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45e43a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e44c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45e450.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45e456.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45e45c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e470.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e474.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45e47a.  v0:= temp;
  #L45e47c.  if v0 == 0 then goto L45e48e;
  #L45e480.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45e484.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45e488.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45e48e.  return @kind void;
}
