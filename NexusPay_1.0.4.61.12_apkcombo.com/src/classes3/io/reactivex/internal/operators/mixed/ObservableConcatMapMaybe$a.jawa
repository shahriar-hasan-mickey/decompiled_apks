record `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45dd2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45dd32.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L45dd36.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45dd3a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L45dd3e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45dd42.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45dd48.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45dd4c.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a`;
  #L45dd50.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;)V` @kind direct;
  #L45dd56.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a` := v1 @kind object;
  #L45dd5a.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L45dd5e.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L45dd64.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L45dd68.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L45ddc4.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45ddca.  v0:= temp;
  #L45ddcc.  if v0 == 0 then goto L45ddd2;
  #L45ddd0.  return @kind void;
  #L45ddd2.  v0:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45ddd6.  v1:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45ddda.  v2:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45ddde.  v3:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45dde2.  v4:= 1I;
  #L45dde4.  v5:= 1I;
  #L45dde6.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L45ddea.  v7:= 0I;
  #L45ddec.  if v6 == 0 then goto L45ddfe;
  #L45ddf0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45ddf6.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45ddfa.  goto L45def4;
  #L45ddfe.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int`;
  #L45de02.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45de08.  v8:= temp @kind object;
  #L45de0a.  if v8 == 0 then goto L45de3c;
  #L45de0e.  v8:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45de12.  if v1 == v8 then goto L45de22;
  #L45de16.  v8:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45de1a.  if v1 != v8 then goto L45de3c;
  #L45de1e.  if v6 != 0 then goto L45de3c;
  #L45de22.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45de28.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45de2c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45de32.  v1:= temp @kind object;
  #L45de34.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45de3a.  return @kind void;
  #L45de3c.  v8:= 0I;
  #L45de3e.  if v6 != 0 then goto L45ded8;
  #L45de42.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L45de46.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45de4c.  v7:= temp @kind object;
  #L45de4e.  if v7 != 0 then goto L45de54;
  #L45de52.  v8:= 1I;
  #L45de54.  if v6 == 0 then goto L45de78;
  #L45de58.  if v8 == 0 then goto L45de78;
  #L45de5c.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45de62.  v1:= temp @kind object;
  #L45de64.  if v1 != 0 then goto L45de70;
  #L45de68.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45de6e.  goto L45de76;
  #L45de70.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45de76.  return @kind void;
  #L45de78.  if v8 == 0 then goto L45de7e;
  #L45de7c.  goto L45def4;
  #L45de7e.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45de82.  call temp:= `apply`(v6, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45de88.  v6:= temp @kind object;
  #L45de8a.  v7:= "The mapper returned a null MaybeSource" @kind object;
  #L45de8e.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45de94.  v6:= temp @kind object;
  #L45de96.  v6:= (`io.reactivex.MaybeSource`) v6 @kind object;
  #L45de9a.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v4;
  #L45de9e.  v7:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L45dea2.  call `subscribe`(v6, v7) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45dea8.  goto L45def4;
  #L45deaa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45deac.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45deb2.  v4:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45deb6.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45debc.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45dec2.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45dec8.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45dece.  v1:= temp @kind object;
  #L45ded0.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ded6.  return @kind void;
  #L45ded8.  v9:= 2I;
  #L45deda.  if v6 != v9 then goto L45def4;
  #L45dede.  v6:= v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` @kind object;
  #L45dee2.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v7 @kind object;
  #L45dee6.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45deec.  v10.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v8;
  #L45def0.  goto L45dde6;
  #L45def4.  v5:= -v5 @kind int;
  #L45def6.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45defc.  v5:= temp;
  #L45defe.  if v5 != 0 then goto L45dde6;
  #L45df02.  return @kind void;
  catch `java.lang.Throwable` @[L45de7e..L45de9a] goto L45deaa;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L45df20.  v0:= 0I;
  #L45df22.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v0;
  #L45df26.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45df2c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45df40.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45df44.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45df4a.  v0:= temp;
  #L45df4c.  if v0 == 0 then goto L45df74;
  #L45df50.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45df54.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45df58.  if v2 == v0 then goto L45df66;
  #L45df5c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45df60.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45df66.  v2:= 0I;
  #L45df68.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v2;
  #L45df6c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45df72.  goto L45df7a;
  #L45df74.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45df7a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L45df8c.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v1 @kind object;
  #L45df90.  v1:= 2I;
  #L45df92.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.k` @type ^`int` := v1;
  #L45df96.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45df9c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45dd7c.  v0:= 1I;
  #L45dd7e.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45dd82.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45dd86.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45dd8c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L45dd90.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L45dd96.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45dd9c.  v0:= temp;
  #L45dd9e.  if v0 != 0 then goto L45ddb2;
  #L45dda2.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45dda6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45ddac.  v0:= 0I;
  #L45ddae.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.j` @type ^`java.lang.Object` := v0 @kind object;
  #L45ddb2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45dd14.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L45dd18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45dfb0.  v0:= 1I;
  #L45dfb2.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45dfb6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45dfbc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45dfd0.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45dfd4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45dfda.  v0:= temp;
  #L45dfdc.  if v0 == 0 then goto L45e004;
  #L45dfe0.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45dfe4.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45dfe8.  if v2 != v0 then goto L45dff6;
  #L45dfec.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.d` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a$a` @kind object;
  #L45dff0.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L45dff6.  v2:= 1I;
  #L45dff8.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L45dffc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45e002.  goto L45e00a;
  #L45e004.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45e00a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e01c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45e020.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45e026.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45e02c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e040.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e044.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45e04a.  v0:= temp;
  #L45e04c.  if v0 == 0 then goto L45e05e;
  #L45e050.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45e054.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45e058.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45e05e.  return @kind void;
}
