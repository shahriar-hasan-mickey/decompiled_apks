record `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.internal.util.ErrorMode` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Lio/reactivex/internal/util/ErrorMode;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45d828.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45d82e.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L45d832.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45d836.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` := v3 @kind object;
  #L45d83a.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @type ^`int` := v4;
  #L45d83e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45d842.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45d848.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45d84c.  v1:= new `io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a`;
  #L45d850.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;)V` @kind direct;
  #L45d856.  v0.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a` := v1 @kind object;
  #L45d85a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L45d8b0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45d8b6.  v0:= temp;
  #L45d8b8.  if v0 == 0 then goto L45d8be;
  #L45d8bc.  return @kind void;
  #L45d8be.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45d8c2.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45d8c6.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L45d8ca.  if v2 == 0 then goto L45d8da;
  #L45d8ce.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45d8d2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45d8d8.  return @kind void;
  #L45d8da.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` @kind boolean;
  #L45d8de.  if v2 != 0 then goto L45d9d0;
  #L45d8e2.  v2:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45d8e6.  v3:= 1I;
  #L45d8e8.  if v1 != v2 then goto L45d91a;
  #L45d8ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d8f2.  v2:= temp @kind object;
  #L45d8f4.  if v2 == 0 then goto L45d91a;
  #L45d8f8.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L45d8fc.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45d900.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45d906.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45d90c.  v0:= temp @kind object;
  #L45d90e.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45d912.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d918.  return @kind void;
  #L45d91a.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` @kind boolean;
  #L45d91e.  v4:= 0I;
  #L45d920.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45d924.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45d92a.  v5:= temp @kind object;
  #L45d92c.  if v5 == 0 then goto L45d950;
  #L45d930.  v4:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45d934.  call temp:= `apply`(v4, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45d93a.  v4:= temp @kind object;
  #L45d93c.  v5:= "The mapper returned a null CompletableSource" @kind object;
  #L45d940.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45d946.  v4:= temp @kind object;
  #L45d948.  v4:= (`io.reactivex.CompletableSource`) v4 @kind object;
  #L45d94c.  v5:= 0I;
  #L45d94e.  goto L45d952;
  #L45d950.  v5:= 1I;
  #L45d952.  if v2 == 0 then goto L45d982;
  #L45d956.  if v5 == 0 then goto L45d982;
  #L45d95a.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L45d95e.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45d964.  v0:= temp @kind object;
  #L45d966.  if v0 == 0 then goto L45d976;
  #L45d96a.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45d96e.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d974.  goto L45d980;
  #L45d976.  v0:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45d97a.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45d980.  return @kind void;
  #L45d982.  if v5 != 0 then goto L45d9d0;
  #L45d986.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v3 @kind boolean;
  #L45d98a.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L45d98e.  call `subscribe`(v4, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L45d994.  goto L45d9d0;
  #L45d996.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45d998.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45d99e.  v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v3 @kind boolean;
  #L45d9a2.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45d9a6.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45d9ac.  v2:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45d9b0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45d9b6.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45d9bc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45d9c2.  v0:= temp @kind object;
  #L45d9c4.  v1:= v6.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45d9c8.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d9ce.  return @kind void;
  #L45d9d0.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L45d9d6.  v2:= temp;
  #L45d9d8.  if v2 != 0 then goto L45d8c6;
  #L45d9dc.  return @kind void;
  catch `java.lang.Throwable` @[L45d920..L45d94c] goto L45d996;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L45d9fc.  v0:= 0I;
  #L45d9fe.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45da02.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45da08.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45da1c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45da20.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45da26.  v0:= temp;
  #L45da28.  if v0 == 0 then goto L45da8c;
  #L45da2c.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45da30.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45da34.  if v2 != v0 then goto L45da7e;
  #L45da38.  v2:= 1I;
  #L45da3a.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v2 @kind boolean;
  #L45da3e.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45da42.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45da48.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45da4c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45da52.  v2:= temp @kind object;
  #L45da54.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45da58.  if v2 == v0 then goto L45da66;
  #L45da5c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45da60.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45da66.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45da6c.  v2:= temp;
  #L45da6e.  if v2 != 0 then goto L45da92;
  #L45da72.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45da76.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45da7c.  goto L45da92;
  #L45da7e.  v2:= 0I;
  #L45da80.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.i` @type ^`boolean` := v2 @kind boolean;
  #L45da84.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45da8a.  goto L45da92;
  #L45da8c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45da92.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d86c.  v0:= 1I;
  #L45d86e.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v0 @kind boolean;
  #L45d872.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45d876.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45d87c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L45d880.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L45d886.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45d88c.  v0:= temp;
  #L45d88e.  if v0 != 0 then goto L45d89c;
  #L45d892.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45d896.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45d89c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d810.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` @kind boolean;
  #L45d814.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45daa4.  v0:= 1I;
  #L45daa6.  v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v0 @kind boolean;
  #L45daaa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45dab0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45dac4.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45dac8.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45dace.  v0:= temp;
  #L45dad0.  if v0 == 0 then goto L45db32;
  #L45dad4.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45dad8.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45dadc.  v1:= 1I;
  #L45dade.  if v3 != v0 then goto L45db26;
  #L45dae2.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.k` @type ^`boolean` := v1 @kind boolean;
  #L45dae6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.e` @type ^`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a$a` @kind object;
  #L45daea.  call `a`(v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a$a;.a:()V` @kind virtual;
  #L45daf0.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45daf4.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45dafa.  v3:= temp @kind object;
  #L45dafc.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45db00.  if v3 == v0 then goto L45db0e;
  #L45db04.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45db08.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45db0e.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45db14.  v3:= temp;
  #L45db16.  if v3 != 0 then goto L45db38;
  #L45db1a.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45db1e.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45db24.  goto L45db38;
  #L45db26.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v1 @kind boolean;
  #L45db2a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45db30.  goto L45db38;
  #L45db32.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45db38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45db4c.  if v2 == 0 then goto L45db5a;
  #L45db50.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L45db54.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45db5a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45db60.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45db74.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45db78.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45db7e.  v0:= temp;
  #L45db80.  if v0 == 0 then goto L45dbf0;
  #L45db84.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.h` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L45db88.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L45db8c.  if v0 == 0 then goto L45dbd4;
  #L45db90.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L45db94.  v0:= 3I;
  #L45db96.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L45db9c.  v0:= temp;
  #L45db9e.  v1:= 1I;
  #L45dba0.  if v0 != v1 then goto L45dbbe;
  #L45dba4.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L45dba8.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.j` @type ^`boolean` := v1 @kind boolean;
  #L45dbac.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45dbb0.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45dbb6.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableConcatMapCompletable$a;.a:()V` @kind virtual;
  #L45dbbc.  return @kind void;
  #L45dbbe.  v1:= 2I;
  #L45dbc0.  if v0 != v1 then goto L45dbd4;
  #L45dbc4.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L45dbc8.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45dbcc.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45dbd2.  return @kind void;
  #L45dbd4.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L45dbd8.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.f` @type ^`int`;
  #L45dbdc.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L45dbe2.  v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L45dbe6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableConcatMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45dbea.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45dbf0.  return @kind void;
}
