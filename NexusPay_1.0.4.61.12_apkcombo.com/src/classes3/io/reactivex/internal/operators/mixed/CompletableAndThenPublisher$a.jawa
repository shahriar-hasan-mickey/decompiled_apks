record `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45b61c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45b622.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45b626.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L45b62a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45b62e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45b634.  v0.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L45b638.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b64c.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45b650.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45b656.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45b65c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45b670.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L45b674.  if v0 != 0 then goto L45b684;
  #L45b678.  v0:= v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45b67c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45b682.  goto L45b690;
  #L45b684.  v1:= 0I;
  #L45b686.  v2.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L45b68a.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L45b690.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b6a4.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45b6a8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45b6ae.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b6c0.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45b6c4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45b6ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b6dc.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45b6e0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45b6e6.  v0:= temp;
  #L45b6e8.  if v0 == 0 then goto L45b6fa;
  #L45b6ec.  v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45b6f0.  v2:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45b6f4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45b6fa.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b70c.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45b710.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45b716.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/CompletableAndThenPublisher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45b728.  v0:= v1.`io.reactivex.internal.operators.mixed.CompletableAndThenPublisher$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45b72c.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L45b732.  return @kind void;
}
