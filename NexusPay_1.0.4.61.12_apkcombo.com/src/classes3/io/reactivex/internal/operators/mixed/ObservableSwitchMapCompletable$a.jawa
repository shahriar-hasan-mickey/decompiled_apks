record `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45e5c0.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L45e5c4.  v1:= 0I;
  #L45e5c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L45e5cc.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` := v0 @kind object;
  #L45e5d0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45e5e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45e5ea.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L45e5ee.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45e5f2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45e5f6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45e5fa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45e600.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45e604.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45e608.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45e60e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45e612.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45e648.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e64c.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L45e650.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45e656.  v0:= temp @kind object;
  #L45e658.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v0 @kind object;
  #L45e65c.  if v0 == 0 then goto L45e66e;
  #L45e660.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L45e664.  if v0 == v1 then goto L45e66e;
  #L45e668.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L45e66e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.b:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45e680.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e684.  v1:= 0I;
  #L45e686.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45e68c.  v3:= temp;
  #L45e68e.  if v3 == 0 then goto L45e6c0;
  #L45e692.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L45e696.  if v3 == 0 then goto L45e6c0;
  #L45e69a.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e69e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e6a4.  v3:= temp @kind object;
  #L45e6a6.  if v3 != 0 then goto L45e6b6;
  #L45e6aa.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e6ae.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45e6b4.  goto L45e6c0;
  #L45e6b6.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e6ba.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e6c0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.c:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45e6d4.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e6d8.  v1:= 0I;
  #L45e6da.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45e6e0.  v3:= temp;
  #L45e6e2.  if v3 == 0 then goto L45e744;
  #L45e6e6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e6ea.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45e6f0.  v3:= temp;
  #L45e6f2.  if v3 == 0 then goto L45e744;
  #L45e6f6.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L45e6fa.  if v3 == 0 then goto L45e71e;
  #L45e6fe.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L45e702.  if v3 == 0 then goto L45e742;
  #L45e706.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e70a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e710.  v3:= temp @kind object;
  #L45e712.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e716.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e71c.  goto L45e742;
  #L45e71e.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.dispose:()V` @kind virtual;
  #L45e724.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e728.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e72e.  v3:= temp @kind object;
  #L45e730.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45e734.  if v3 == v4 then goto L45e742;
  #L45e738.  v4:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e73c.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e742.  return @kind void;
  #L45e744.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45e74a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e624.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e628.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45e62e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L45e634.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45e594.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e598.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45e59e.  v0:= temp @kind object;
  #L45e5a0.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L45e5a4.  if v0 != v1 then goto L45e5ac;
  #L45e5a8.  v0:= 1I;
  #L45e5aa.  goto L45e5ae;
  #L45e5ac.  v0:= 0I;
  #L45e5ae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45e75c.  v0:= 1I;
  #L45e75e.  v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L45e762.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e766.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45e76c.  v0:= temp @kind object;
  #L45e76e.  if v0 != 0 then goto L45e798;
  #L45e772.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e776.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e77c.  v0:= temp @kind object;
  #L45e77e.  if v0 != 0 then goto L45e78e;
  #L45e782.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e786.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45e78c.  goto L45e798;
  #L45e78e.  v1:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e792.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e798.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e7ac.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e7b0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45e7b6.  v0:= temp;
  #L45e7b8.  if v0 == 0 then goto L45e7f2;
  #L45e7bc.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L45e7c0.  if v2 == 0 then goto L45e7cc;
  #L45e7c4.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L45e7ca.  goto L45e7f8;
  #L45e7cc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L45e7d2.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45e7d6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45e7dc.  v2:= temp @kind object;
  #L45e7de.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45e7e2.  if v2 == v0 then goto L45e7f8;
  #L45e7e6.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e7ea.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45e7f0.  goto L45e7f8;
  #L45e7f2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45e7f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45e80c.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45e810.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45e816.  v4:= temp @kind object;
  #L45e818.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L45e81c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45e822.  v4:= temp @kind object;
  #L45e824.  v4:= (`io.reactivex.CompletableSource`) v4 @kind object;
  #L45e828.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`;
  #L45e82c.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;)V` @kind direct;
  #L45e832.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e836.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45e83c.  v1:= temp @kind object;
  #L45e83e.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a`) v1 @kind object;
  #L45e842.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a$a` @kind object;
  #L45e846.  if v1 != v2 then goto L45e84c;
  #L45e84a.  goto L45e86c;
  #L45e84c.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45e850.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45e856.  v2:= temp;
  #L45e858.  if v2 == 0 then goto L45e832;
  #L45e85c.  if v1 == 0 then goto L45e866;
  #L45e860.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L45e866.  call `subscribe`(v4, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L45e86c.  return @kind void;
  #L45e86e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45e870.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45e876.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e87a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45e880.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45e886.  return @kind void;
  catch `java.lang.Throwable` @[L45e80c..L45e828] goto L45e86e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45e8a4.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45e8a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45e8ae.  v0:= temp;
  #L45e8b0.  if v0 == 0 then goto L45e8c2;
  #L45e8b4.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45e8b8.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45e8bc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45e8c2.  return @kind void;
}
