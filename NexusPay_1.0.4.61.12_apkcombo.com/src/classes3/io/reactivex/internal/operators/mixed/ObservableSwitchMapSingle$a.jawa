record `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45ee64.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L45ee68.  v1:= 0I;
  #L45ee6a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L45ee70.  `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` := v0 @kind object;
  #L45ee74.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45ee88.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45ee8e.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L45ee92.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45ee96.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45ee9a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45ee9e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45eea4.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45eea8.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45eeac.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45eeb2.  v0.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45eeb6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45eef0.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45eef4.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L45eef8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45eefe.  v0:= temp @kind object;
  #L45ef00.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L45ef04.  if v0 == 0 then goto L45ef16;
  #L45ef08.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L45ef0c.  if v0 == v1 then goto L45ef16;
  #L45ef10.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L45ef16.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L45ef28.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45ef2e.  v0:= temp;
  #L45ef30.  if v0 == 0 then goto L45ef36;
  #L45ef34.  return @kind void;
  #L45ef36.  v0:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45ef3a.  v1:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45ef3e.  v2:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ef42.  v3:= 1I;
  #L45ef44.  v4:= 1I;
  #L45ef46.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L45ef4a.  if v5 == 0 then goto L45ef50;
  #L45ef4e.  return @kind void;
  #L45ef50.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ef56.  v5:= temp @kind object;
  #L45ef58.  if v5 == 0 then goto L45ef74;
  #L45ef5c.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45ef60.  if v5 != 0 then goto L45ef74;
  #L45ef64.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45ef6a.  v1:= temp @kind object;
  #L45ef6c.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45ef72.  return @kind void;
  #L45ef74.  v5:= v8.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` @kind boolean;
  #L45ef78.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45ef7e.  v6:= temp @kind object;
  #L45ef80.  v6:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v6 @kind object;
  #L45ef84.  if v6 != 0 then goto L45ef8c;
  #L45ef88.  v7:= 1I;
  #L45ef8a.  goto L45ef8e;
  #L45ef8c.  v7:= 0I;
  #L45ef8e.  if v5 == 0 then goto L45efb2;
  #L45ef92.  if v7 == 0 then goto L45efb2;
  #L45ef96.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45ef9c.  v1:= temp @kind object;
  #L45ef9e.  if v1 == 0 then goto L45efaa;
  #L45efa2.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45efa8.  goto L45efb0;
  #L45efaa.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45efb0.  return @kind void;
  #L45efb2.  if v7 != 0 then goto L45efd4;
  #L45efb6.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45efba.  if v5 != 0 then goto L45efc0;
  #L45efbe.  goto L45efd4;
  #L45efc0.  v5:= 0I;
  #L45efc2.  call temp:= `compareAndSet`(v2, v6, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45efc8.  v5:= v6.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45efcc.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45efd2.  goto L45ef46;
  #L45efd4.  v4:= -v4 @kind int;
  #L45efd6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45efdc.  v4:= temp;
  #L45efde.  if v4 != 0 then goto L45ef46;
  #L45efe2.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.c:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45eff4.  v0:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45eff8.  v1:= 0I;
  #L45effa.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45f000.  v3:= temp;
  #L45f002.  if v3 == 0 then goto L45f036;
  #L45f006.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45f00a.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45f010.  v3:= temp;
  #L45f012.  if v3 == 0 then goto L45f036;
  #L45f016.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45f01a.  if v3 != 0 then goto L45f02e;
  #L45f01e.  v3:= v2.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45f022.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45f028.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45f02e.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45f034.  return @kind void;
  #L45f036.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45f03c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45eec8.  v0:= 1I;
  #L45eeca.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45eece.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45eed2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45eed8.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45eede.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ee4c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.h` @type ^`boolean` @kind boolean;
  #L45ee50.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f050.  v0:= 1I;
  #L45f052.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L45f056.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45f05c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f070.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45f074.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45f07a.  v0:= temp;
  #L45f07c.  if v0 == 0 then goto L45f09c;
  #L45f080.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.c` @type ^`boolean` @kind boolean;
  #L45f084.  if v2 != 0 then goto L45f08e;
  #L45f088.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.a:()V` @kind virtual;
  #L45f08e.  v2:= 1I;
  #L45f090.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.g` @type ^`boolean` := v2 @kind boolean;
  #L45f094.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.b:()V` @kind virtual;
  #L45f09a.  goto L45f0a2;
  #L45f09c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45f0a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f0b4.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f0b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45f0be.  v0:= temp @kind object;
  #L45f0c0.  v0:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v0 @kind object;
  #L45f0c4.  if v0 == 0 then goto L45f0ce;
  #L45f0c8.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.a:()V` @kind virtual;
  #L45f0ce.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45f0d2.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45f0d8.  v4:= temp @kind object;
  #L45f0da.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L45f0de.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45f0e4.  v4:= temp @kind object;
  #L45f0e6.  v4:= (`io.reactivex.SingleSource`) v4 @kind object;
  #L45f0ea.  v0:= new `io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`;
  #L45f0ee.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;)V` @kind direct;
  #L45f0f4.  v1:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f0f8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45f0fe.  v1:= temp @kind object;
  #L45f100.  v1:= (`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a`) v1 @kind object;
  #L45f104.  v2:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L45f108.  if v1 != v2 then goto L45f10e;
  #L45f10c.  goto L45f124;
  #L45f10e.  v2:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f112.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45f118.  v1:= temp;
  #L45f11a.  if v1 == 0 then goto L45f0f4;
  #L45f11e.  call `subscribe`(v4, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L45f124.  return @kind void;
  #L45f126.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45f128.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45f12e.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45f132.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45f138.  v0:= v3.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f13c.  v1:= `@@io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.i` @type ^`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a$a` @kind object;
  #L45f140.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45f146.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45f14c.  return @kind void;
  catch `java.lang.Throwable` @[L45f0ce..L45f0ea] goto L45f126;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/ObservableSwitchMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f16c.  v0:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L45f170.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45f176.  v0:= temp;
  #L45f178.  if v0 == 0 then goto L45f18a;
  #L45f17c.  v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L45f180.  v2:= v1.`io.reactivex.internal.operators.mixed.ObservableSwitchMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45f184.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45f18a.  return @kind void;
}
