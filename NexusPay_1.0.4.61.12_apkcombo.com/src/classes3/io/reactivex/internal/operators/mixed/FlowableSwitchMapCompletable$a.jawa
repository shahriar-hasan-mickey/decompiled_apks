record `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45c6c0.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L45c6c4.  v1:= 0I;
  #L45c6c6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L45c6cc.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` := v0 @kind object;
  #L45c6d0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45c6e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45c6ea.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L45c6ee.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45c6f2.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45c6f6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45c6fa.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45c700.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45c704.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45c708.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45c70e.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45c712.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45c748.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c74c.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L45c750.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45c756.  v0:= temp @kind object;
  #L45c758.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v0 @kind object;
  #L45c75c.  if v0 == 0 then goto L45c76e;
  #L45c760.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L45c764.  if v0 == v1 then goto L45c76e;
  #L45c768.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L45c76e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.b:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45c780.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c784.  v1:= 0I;
  #L45c786.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45c78c.  v3:= temp;
  #L45c78e.  if v3 == 0 then goto L45c7c0;
  #L45c792.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L45c796.  if v3 == 0 then goto L45c7c0;
  #L45c79a.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c79e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c7a4.  v3:= temp @kind object;
  #L45c7a6.  if v3 != 0 then goto L45c7b6;
  #L45c7aa.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c7ae.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45c7b4.  goto L45c7c0;
  #L45c7b6.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c7ba.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c7c0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.c:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45c7d4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c7d8.  v1:= 0I;
  #L45c7da.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45c7e0.  v3:= temp;
  #L45c7e2.  if v3 == 0 then goto L45c844;
  #L45c7e6.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c7ea.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c7f0.  v3:= temp;
  #L45c7f2.  if v3 == 0 then goto L45c844;
  #L45c7f6.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L45c7fa.  if v3 == 0 then goto L45c81e;
  #L45c7fe.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` @kind boolean;
  #L45c802.  if v3 == 0 then goto L45c842;
  #L45c806.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c80a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c810.  v3:= temp @kind object;
  #L45c812.  v4:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c816.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c81c.  goto L45c842;
  #L45c81e.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.dispose:()V` @kind virtual;
  #L45c824.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c828.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c82e.  v3:= temp @kind object;
  #L45c830.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45c834.  if v3 == v4 then goto L45c842;
  #L45c838.  v4:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c83c.  call `onError`(v4, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c842.  return @kind void;
  #L45c844.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45c84a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c724.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c728.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c72e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L45c734.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c694.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c698.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45c69e.  v0:= temp @kind object;
  #L45c6a0.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L45c6a4.  if v0 != v1 then goto L45c6ac;
  #L45c6a8.  v0:= 1I;
  #L45c6aa.  goto L45c6ae;
  #L45c6ac.  v0:= 0I;
  #L45c6ae.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c85c.  v0:= 1I;
  #L45c85e.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L45c862.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c866.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45c86c.  v0:= temp @kind object;
  #L45c86e.  if v0 != 0 then goto L45c898;
  #L45c872.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c876.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c87c.  v0:= temp @kind object;
  #L45c87e.  if v0 != 0 then goto L45c88e;
  #L45c882.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c886.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L45c88c.  goto L45c898;
  #L45c88e.  v1:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c892.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c898.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c8ac.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c8b0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c8b6.  v0:= temp;
  #L45c8b8.  if v0 == 0 then goto L45c8f2;
  #L45c8bc.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.c` @type ^`boolean` @kind boolean;
  #L45c8c0.  if v2 == 0 then goto L45c8cc;
  #L45c8c4.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onComplete:()V` @kind virtual;
  #L45c8ca.  goto L45c8f8;
  #L45c8cc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.a:()V` @kind virtual;
  #L45c8d2.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c8d6.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c8dc.  v2:= temp @kind object;
  #L45c8de.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L45c8e2.  if v2 == v0 then goto L45c8f8;
  #L45c8e6.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c8ea.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c8f0.  goto L45c8f8;
  #L45c8f2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45c8f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45c90c.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45c910.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45c916.  v4:= temp @kind object;
  #L45c918.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L45c91c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45c922.  v4:= temp @kind object;
  #L45c924.  v4:= (`io.reactivex.CompletableSource`) v4 @kind object;
  #L45c928.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`;
  #L45c92c.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;)V` @kind direct;
  #L45c932.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c936.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45c93c.  v1:= temp @kind object;
  #L45c93e.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a`) v1 @kind object;
  #L45c942.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.h` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a$a` @kind object;
  #L45c946.  if v1 != v2 then goto L45c94c;
  #L45c94a.  goto L45c96c;
  #L45c94c.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45c950.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45c956.  v2:= temp;
  #L45c958.  if v2 == 0 then goto L45c932;
  #L45c95c.  if v1 == 0 then goto L45c966;
  #L45c960.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a$a;.a:()V` @kind virtual;
  #L45c966.  call `subscribe`(v4, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L45c96c.  return @kind void;
  #L45c96e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45c970.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45c976.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c97a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c980.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45c986.  return @kind void;
  catch `java.lang.Throwable` @[L45c90c..L45c928] goto L45c96e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c9a4.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c9a8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45c9ae.  v0:= temp;
  #L45c9b0.  if v0 == 0 then goto L45c9d2;
  #L45c9b4.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45c9b8.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L45c9bc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L45c9c2.  v0:= 9223372036854775807L;
  #L45c9cc.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45c9d2.  return @kind void;
}
