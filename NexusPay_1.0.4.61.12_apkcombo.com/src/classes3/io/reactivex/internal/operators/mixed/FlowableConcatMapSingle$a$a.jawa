record `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` v0 @kind this, `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45c158.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45c15e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a.a` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` := v1 @kind object;
  #L45c162.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @AccessFlag  {
    temp;

  #L45c174.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45c17a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c18c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a.a` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` @kind object;
  #L45c190.  call `b`(v0, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45c196.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45c1a8.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45c1ae.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c1c0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a.a` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` @kind object;
  #L45c1c4.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L45c1ca.  return @kind void;
}
