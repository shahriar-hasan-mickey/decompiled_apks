record `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @AccessFlag ;
}
global `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45cadc.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L45cae0.  v1:= 0I;
  #L45cae2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L45cae8.  `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` := v0 @kind object;
  #L45caec.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45cb00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45cb06.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45cb0a.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45cb0e.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L45cb12.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45cb16.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45cb1c.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45cb20.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45cb24.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45cb2a.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L45cb2e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45cb32.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45cb38.  v0.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L45cb3c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45cb78.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cb7c.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L45cb80.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45cb86.  v0:= temp @kind object;
  #L45cb88.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L45cb8c.  if v0 == 0 then goto L45cb9e;
  #L45cb90.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L45cb94.  if v0 == v1 then goto L45cb9e;
  #L45cb98.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L45cb9e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L45cbb0.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45cbb6.  v0:= temp;
  #L45cbb8.  if v0 == 0 then goto L45cbbe;
  #L45cbbc.  return @kind void;
  #L45cbbe.  v0:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45cbc2.  v1:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45cbc6.  v2:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cbca.  v3:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45cbce.  v4:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` @kind wide;
  #L45cbd2.  v6:= 1I;
  #L45cbd4.  v7:= 1I;
  #L45cbd6.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L45cbda.  if v8 == 0 then goto L45cbe0;
  #L45cbde.  return @kind void;
  #L45cbe0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45cbe6.  v8:= temp @kind object;
  #L45cbe8.  if v8 == 0 then goto L45cc04;
  #L45cbec.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45cbf0.  if v8 != 0 then goto L45cc04;
  #L45cbf4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45cbfa.  v1:= temp @kind object;
  #L45cbfc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45cc02.  return @kind void;
  #L45cc04.  v8:= v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` @kind boolean;
  #L45cc08.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45cc0e.  v9:= temp @kind object;
  #L45cc10.  v9:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v9 @kind object;
  #L45cc14.  if v9 != 0 then goto L45cc1c;
  #L45cc18.  v10:= 1I;
  #L45cc1a.  goto L45cc1e;
  #L45cc1c.  v10:= 0I;
  #L45cc1e.  if v8 == 0 then goto L45cc42;
  #L45cc22.  if v10 == 0 then goto L45cc42;
  #L45cc26.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45cc2c.  v1:= temp @kind object;
  #L45cc2e.  if v1 == 0 then goto L45cc3a;
  #L45cc32.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45cc38.  goto L45cc40;
  #L45cc3a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45cc40.  return @kind void;
  #L45cc42.  if v10 != 0 then goto L45cc7a;
  #L45cc46.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45cc4a.  if v8 == 0 then goto L45cc7a;
  #L45cc4e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45cc54.  v10:= temp @kind wide;
  #L45cc56.  v8:= lcmp(v4, v10);
  #L45cc5a.  if v8 != 0 then goto L45cc60;
  #L45cc5e.  goto L45cc7a;
  #L45cc60.  v8:= 0I;
  #L45cc62.  call temp:= `compareAndSet`(v2, v9, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45cc68.  v8:= v9.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a.b` @type ^`java.lang.Object` @kind object;
  #L45cc6c.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45cc72.  v8:= 1L;
  #L45cc76.  v4:= v4 + v8 @kind long;
  #L45cc78.  goto L45cbd6;
  #L45cc7a.  v12.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.j` @type ^`long` := v4 @kind wide;
  #L45cc7e.  v7:= -v7 @kind int;
  #L45cc80.  call temp:= `addAndGet`(v12, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45cc86.  v7:= temp;
  #L45cc88.  if v7 != 0 then goto L45cbd6;
  #L45cc8c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.c:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45cca0.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cca4.  v1:= 0I;
  #L45cca6.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45ccac.  v3:= temp;
  #L45ccae.  if v3 == 0 then goto L45ccb8;
  #L45ccb2.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45ccb8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45cb50.  v0:= 1I;
  #L45cb52.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L45cb56.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45cb5a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45cb60.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45cb66.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.d:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45cccc.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ccd0.  v1:= 0I;
  #L45ccd2.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45ccd8.  v3:= temp;
  #L45ccda.  if v3 == 0 then goto L45cd0e;
  #L45ccde.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45cce2.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45cce8.  v3:= temp;
  #L45ccea.  if v3 == 0 then goto L45cd0e;
  #L45ccee.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45ccf2.  if v3 != 0 then goto L45cd06;
  #L45ccf6.  v3:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45ccfa.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45cd00.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45cd06.  call `b`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45cd0c.  return @kind void;
  #L45cd0e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45cd14.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45cd28.  v0:= 1I;
  #L45cd2a.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L45cd2e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45cd34.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45cd48.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45cd4c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45cd52.  v0:= temp;
  #L45cd54.  if v0 == 0 then goto L45cd74;
  #L45cd58.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.c` @type ^`boolean` @kind boolean;
  #L45cd5c.  if v2 != 0 then goto L45cd66;
  #L45cd60.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.a:()V` @kind virtual;
  #L45cd66.  v2:= 1I;
  #L45cd68.  v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.h` @type ^`boolean` := v2 @kind boolean;
  #L45cd6c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45cd72.  goto L45cd7a;
  #L45cd74.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45cd7a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45cd8c.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cd90.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45cd96.  v0:= temp @kind object;
  #L45cd98.  v0:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v0 @kind object;
  #L45cd9c.  if v0 == 0 then goto L45cda6;
  #L45cda0.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.a:()V` @kind virtual;
  #L45cda6.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45cdaa.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45cdb0.  v4:= temp @kind object;
  #L45cdb2.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L45cdb6.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45cdbc.  v4:= temp @kind object;
  #L45cdbe.  v4:= (`io.reactivex.MaybeSource`) v4 @kind object;
  #L45cdc2.  v0:= new `io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`;
  #L45cdc6.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;)V` @kind direct;
  #L45cdcc.  v1:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cdd0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45cdd6.  v1:= temp @kind object;
  #L45cdd8.  v1:= (`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a`) v1 @kind object;
  #L45cddc.  v2:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L45cde0.  if v1 != v2 then goto L45cde6;
  #L45cde4.  goto L45cdfc;
  #L45cde6.  v2:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45cdea.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45cdf0.  v1:= temp;
  #L45cdf2.  if v1 == 0 then goto L45cdcc;
  #L45cdf6.  call `subscribe`(v4, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45cdfc.  return @kind void;
  #L45cdfe.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45ce00.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45ce06.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45ce0a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45ce10.  v0:= v3.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45ce14.  v1:= `@@io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.k` @type ^`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a$a` @kind object;
  #L45ce18.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45ce1e.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45ce24.  return @kind void;
  catch `java.lang.Throwable` @[L45cda6..L45cdc2] goto L45cdfe;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45ce44.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45ce48.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45ce4e.  v0:= temp;
  #L45ce50.  if v0 == 0 then goto L45ce72;
  #L45ce54.  v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45ce58.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45ce5c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45ce62.  v0:= 9223372036854775807L;
  #L45ce6c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45ce72.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45ce84.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableSwitchMapMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45ce88.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45ce8e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableSwitchMapMaybe$a;.b:()V` @kind virtual;
  #L45ce94.  return @kind void;
}
