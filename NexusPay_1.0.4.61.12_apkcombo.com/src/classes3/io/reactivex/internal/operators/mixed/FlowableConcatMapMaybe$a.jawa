record `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45bd04.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45bd0a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45bd0e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45bd12.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int` := v3;
  #L45bd16.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L45bd1a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45bd1e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45bd24.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L45bd28.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45bd2c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45bd32.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45bd36.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a`;
  #L45bd3a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;)V` @kind direct;
  #L45bd40.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a` := v1 @kind object;
  #L45bd44.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L45bd48.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L45bd4e.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L45bd52.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L45bdac.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45bdb2.  v0:= temp;
  #L45bdb4.  if v0 == 0 then goto L45bdba;
  #L45bdb8.  return @kind void;
  #L45bdba.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45bdbe.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45bdc2.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45bdc6.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45bdca.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45bdce.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L45bdd2.  v6:= v5 ^> 1;
  #L45bdd6.  v5:= v5 - v6 @kind int;
  #L45bdd8.  v6:= 1I;
  #L45bdda.  v7:= 1I;
  #L45bddc.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L45bde0.  v9:= 0I;
  #L45bde2.  if v8 == 0 then goto L45bdf4;
  #L45bde6.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45bdec.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45bdf0.  goto L45bf2c;
  #L45bdf4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int`;
  #L45bdf8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45bdfe.  v10:= temp @kind object;
  #L45be00.  if v10 == 0 then goto L45be32;
  #L45be04.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45be08.  if v1 == v10 then goto L45be18;
  #L45be0c.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45be10.  if v1 != v10 then goto L45be32;
  #L45be14.  if v8 != 0 then goto L45be32;
  #L45be18.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45be1e.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45be22.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45be28.  v1:= temp @kind object;
  #L45be2a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45be30.  return @kind void;
  #L45be32.  v10:= 0I;
  #L45be34.  if v8 != 0 then goto L45bef2;
  #L45be38.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` @kind boolean;
  #L45be3c.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45be42.  v9:= temp @kind object;
  #L45be44.  if v9 != 0 then goto L45be4c;
  #L45be48.  v11:= 1I;
  #L45be4a.  goto L45be4e;
  #L45be4c.  v11:= 0I;
  #L45be4e.  if v8 == 0 then goto L45be72;
  #L45be52.  if v11 == 0 then goto L45be72;
  #L45be56.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45be5c.  v1:= temp @kind object;
  #L45be5e.  if v1 != 0 then goto L45be6a;
  #L45be62.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45be68.  goto L45be70;
  #L45be6a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45be70.  return @kind void;
  #L45be72.  if v11 == 0 then goto L45be78;
  #L45be76.  goto L45bf2c;
  #L45be78.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int`;
  #L45be7c.  v8:= v8 + v6 @kind int;
  #L45be7e.  if v8 != v5 then goto L45be94;
  #L45be82.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v10;
  #L45be86.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45be8a.  v10:= (`long`) v5 @kind i2l;
  #L45be8c.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45be92.  goto L45be98;
  #L45be94.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.m` @type ^`int` := v8;
  #L45be98.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45be9c.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45bea2.  v8:= temp @kind object;
  #L45bea4.  v9:= "The mapper returned a null MaybeSource" @kind object;
  #L45bea8.  call temp:= `requireNonNull`(v8, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45beae.  v8:= temp @kind object;
  #L45beb0.  v8:= (`io.reactivex.MaybeSource`) v8 @kind object;
  #L45beb4.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v6;
  #L45beb8.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L45bebc.  call `subscribe`(v8, v9) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L45bec2.  goto L45bf2c;
  #L45bec4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45bec6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45becc.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45bed0.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45bed6.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45bedc.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45bee2.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45bee8.  v1:= temp @kind object;
  #L45beea.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45bef0.  return @kind void;
  #L45bef2.  v11:= 2I;
  #L45bef4.  if v8 != v11 then goto L45bf2c;
  #L45bef8.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` @kind wide;
  #L45befc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45bf02.  v13:= temp @kind wide;
  #L45bf04.  v8:= lcmp(v11, v13);
  #L45bf08.  if v8 == 0 then goto L45bf2c;
  #L45bf0c.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` @kind object;
  #L45bf10.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45bf14.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45bf1a.  v8:= 1L;
  #L45bf1e.  v11:= v11 + v8 @kind long;
  #L45bf20.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.l` @type ^`long` := v11 @kind wide;
  #L45bf24.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v10;
  #L45bf28.  goto L45bddc;
  #L45bf2c.  v7:= -v7 @kind int;
  #L45bf2e.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45bf34.  v7:= temp;
  #L45bf36.  if v7 != 0 then goto L45bddc;
  #L45bf3a.  return @kind void;
  catch `java.lang.Throwable` @[L45be98..L45beb4] goto L45bec4;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L45bf58.  v0:= 0I;
  #L45bf5a.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v0;
  #L45bf5e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45bf64.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45bf78.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45bf7c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45bf82.  v0:= temp;
  #L45bf84.  if v0 == 0 then goto L45bfac;
  #L45bf88.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45bf8c.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45bf90.  if v2 == v0 then goto L45bf9e;
  #L45bf94.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45bf98.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45bf9e.  v2:= 0I;
  #L45bfa0.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v2;
  #L45bfa4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45bfaa.  goto L45bfb2;
  #L45bfac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45bfb2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bd64.  v0:= 1I;
  #L45bd66.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L45bd6a.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45bd6e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45bd74.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L45bd78.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L45bd7e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45bd84.  v0:= temp;
  #L45bd86.  if v0 != 0 then goto L45bd9a;
  #L45bd8a.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45bd8e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45bd94.  v0:= 0I;
  #L45bd96.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L45bd9a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L45bfc4.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L45bfc8.  v1:= 2I;
  #L45bfca.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.o` @type ^`int` := v1;
  #L45bfce.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45bfd4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45bfe8.  v0:= 1I;
  #L45bfea.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L45bfee.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45bff4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c008.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c00c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c012.  v0:= temp;
  #L45c014.  if v0 == 0 then goto L45c03c;
  #L45c018.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c01c.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c020.  if v2 != v0 then goto L45c02e;
  #L45c024.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a$a` @kind object;
  #L45c028.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a$a;.a:()V` @kind virtual;
  #L45c02e.  v2:= 1I;
  #L45c030.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.j` @type ^`boolean` := v2 @kind boolean;
  #L45c034.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45c03a.  goto L45c042;
  #L45c03c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45c042.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c054.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45c058.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45c05e.  v2:= temp;
  #L45c060.  if v2 != 0 then goto L45c084;
  #L45c064.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c068.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c06e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45c072.  v0:= "queue full?!" @kind object;
  #L45c076.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c07c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45c082.  return @kind void;
  #L45c084.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45c08a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c09c.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c0a0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45c0a6.  v0:= temp;
  #L45c0a8.  if v0 == 0 then goto L45c0c6;
  #L45c0ac.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45c0b0.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45c0b4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45c0ba.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.c` @type ^`int`;
  #L45c0be.  v0:= (`long`) v0 @kind i2l;
  #L45c0c0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45c0c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c0d8.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45c0dc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45c0e2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapMaybe$a;.a:()V` @kind virtual;
  #L45c0e8.  return @kind void;
}
