record `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.m` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @AccessFlag ;
  `int` `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45c1dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45c1e2.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L45c1e6.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45c1ea.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int` := v3;
  #L45c1ee.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L45c1f2.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L45c1f6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45c1fc.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L45c200.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45c204.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L45c20a.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L45c20e.  v1:= new `io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a`;
  #L45c212.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;)V` @kind direct;
  #L45c218.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` := v1 @kind object;
  #L45c21c.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L45c220.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L45c226.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L45c22a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v15 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L45c284.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45c28a.  v0:= temp;
  #L45c28c.  if v0 == 0 then goto L45c292;
  #L45c290.  return @kind void;
  #L45c292.  v0:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45c296.  v1:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c29a.  v2:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45c29e.  v3:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c2a2.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45c2a6.  v5:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L45c2aa.  v6:= v5 ^> 1;
  #L45c2ae.  v5:= v5 - v6 @kind int;
  #L45c2b0.  v6:= 1I;
  #L45c2b2.  v7:= 1I;
  #L45c2b4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L45c2b8.  v9:= 0I;
  #L45c2ba.  if v8 == 0 then goto L45c2cc;
  #L45c2be.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45c2c4.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45c2c8.  goto L45c404;
  #L45c2cc.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int`;
  #L45c2d0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45c2d6.  v10:= temp @kind object;
  #L45c2d8.  if v10 == 0 then goto L45c30a;
  #L45c2dc.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c2e0.  if v1 == v10 then goto L45c2f0;
  #L45c2e4.  v10:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c2e8.  if v1 != v10 then goto L45c30a;
  #L45c2ec.  if v8 != 0 then goto L45c30a;
  #L45c2f0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45c2f6.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45c2fa.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c300.  v1:= temp @kind object;
  #L45c302.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c308.  return @kind void;
  #L45c30a.  v10:= 0I;
  #L45c30c.  if v8 != 0 then goto L45c3ca;
  #L45c310.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` @kind boolean;
  #L45c314.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45c31a.  v9:= temp @kind object;
  #L45c31c.  if v9 != 0 then goto L45c324;
  #L45c320.  v11:= 1I;
  #L45c322.  goto L45c326;
  #L45c324.  v11:= 0I;
  #L45c326.  if v8 == 0 then goto L45c34a;
  #L45c32a.  if v11 == 0 then goto L45c34a;
  #L45c32e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c334.  v1:= temp @kind object;
  #L45c336.  if v1 != 0 then goto L45c342;
  #L45c33a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L45c340.  goto L45c348;
  #L45c342.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c348.  return @kind void;
  #L45c34a.  if v11 == 0 then goto L45c350;
  #L45c34e.  goto L45c404;
  #L45c350.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int`;
  #L45c354.  v8:= v8 + v6 @kind int;
  #L45c356.  if v8 != v5 then goto L45c36c;
  #L45c35a.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v10;
  #L45c35e.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c362.  v10:= (`long`) v5 @kind i2l;
  #L45c364.  call `request`(v8, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45c36a.  goto L45c370;
  #L45c36c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.m` @type ^`int` := v8;
  #L45c370.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45c374.  call temp:= `apply`(v8, v9) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45c37a.  v8:= temp @kind object;
  #L45c37c.  v9:= "The mapper returned a null SingleSource" @kind object;
  #L45c380.  call temp:= `requireNonNull`(v8, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45c386.  v8:= temp @kind object;
  #L45c388.  v8:= (`io.reactivex.SingleSource`) v8 @kind object;
  #L45c38c.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v6;
  #L45c390.  v9:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L45c394.  call `subscribe`(v8, v9) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L45c39a.  goto L45c404;
  #L45c39c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45c39e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45c3a4.  v4:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c3a8.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c3ae.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45c3b4.  call temp:= `addThrowable`(v3, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c3ba.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45c3c0.  v1:= temp @kind object;
  #L45c3c2.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45c3c8.  return @kind void;
  #L45c3ca.  v11:= 2I;
  #L45c3cc.  if v8 != v11 then goto L45c404;
  #L45c3d0.  v11:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` @kind wide;
  #L45c3d4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L45c3da.  v13:= temp @kind wide;
  #L45c3dc.  v8:= lcmp(v11, v13);
  #L45c3e0.  if v8 == 0 then goto L45c404;
  #L45c3e4.  v8:= v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` @kind object;
  #L45c3e8.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v9 @kind object;
  #L45c3ec.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45c3f2.  v8:= 1L;
  #L45c3f6.  v11:= v11 + v8 @kind long;
  #L45c3f8.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.l` @type ^`long` := v11 @kind wide;
  #L45c3fc.  v15.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v10;
  #L45c400.  goto L45c2b4;
  #L45c404.  v7:= -v7 @kind int;
  #L45c406.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45c40c.  v7:= temp;
  #L45c40e.  if v7 != 0 then goto L45c2b4;
  #L45c412.  return @kind void;
  catch `java.lang.Throwable` @[L45c370..L45c38c] goto L45c39c;
}
procedure `void` `b`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45c430.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c434.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c43a.  v0:= temp;
  #L45c43c.  if v0 == 0 then goto L45c464;
  #L45c440.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c444.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c448.  if v2 == v0 then goto L45c456;
  #L45c44c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c450.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c456.  v2:= 0I;
  #L45c458.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v2;
  #L45c45c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c462.  goto L45c46a;
  #L45c464.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45c46a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.c:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;

  #L45c47c.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v1 @kind object;
  #L45c480.  v1:= 2I;
  #L45c482.  v0.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.o` @type ^`int` := v1;
  #L45c486.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c48c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c23c.  v0:= 1I;
  #L45c23e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L45c242.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c246.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c24c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L45c250.  call `a`(v0) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L45c256.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L45c25c.  v0:= temp;
  #L45c25e.  if v0 != 0 then goto L45c272;
  #L45c262.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45c266.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45c26c.  v0:= 0I;
  #L45c26e.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.n` @type ^`java.lang.Object` := v0 @kind object;
  #L45c272.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c4a0.  v0:= 1I;
  #L45c4a2.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L45c4a6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c4ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c4c0.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45c4c4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45c4ca.  v0:= temp;
  #L45c4cc.  if v0 == 0 then goto L45c4f4;
  #L45c4d0.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.h` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c4d4.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L45c4d8.  if v2 != v0 then goto L45c4e6;
  #L45c4dc.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.f` @type ^`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a$a` @kind object;
  #L45c4e0.  call `a`(v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a$a;.a:()V` @kind virtual;
  #L45c4e6.  v2:= 1I;
  #L45c4e8.  v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.j` @type ^`boolean` := v2 @kind boolean;
  #L45c4ec.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c4f2.  goto L45c4fa;
  #L45c4f4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45c4fa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c50c.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.g` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45c510.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45c516.  v2:= temp;
  #L45c518.  if v2 != 0 then goto L45c53c;
  #L45c51c.  v2:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c520.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45c526.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45c52a.  v0:= "queue full?!" @kind object;
  #L45c52e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45c534.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45c53a.  return @kind void;
  #L45c53c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c542.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45c554.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45c558.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45c55e.  v0:= temp;
  #L45c560.  if v0 == 0 then goto L45c57e;
  #L45c564.  v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45c568.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45c56c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L45c572.  v0:= v2.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.c` @type ^`int`;
  #L45c576.  v0:= (`long`) v0 @kind i2l;
  #L45c578.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45c57e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45c590.  v0:= v1.`io.reactivex.internal.operators.mixed.FlowableConcatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45c594.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L45c59a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/mixed/FlowableConcatMapSingle$a;.a:()V` @kind virtual;
  #L45c5a0.  return @kind void;
}
