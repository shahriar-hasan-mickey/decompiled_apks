record `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L45d494.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45d49a.  v0.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L45d49e.  v0.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L45d4a2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L45d4b4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45d4ba.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d46c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45d472.  v0:= temp @kind object;
  #L45d474.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45d478.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45d47e.  v0:= temp;
  #L45d480.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d4cc.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45d4d0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L45d4d6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d4e8.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45d4ec.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d4f2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d504.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45d508.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45d50e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45d520.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45d526.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/mixed/MaybeFlatMapObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45d538.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L45d53c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L45d542.  v2:= temp @kind object;
  #L45d544.  v0:= "The mapper returned a null Publisher" @kind object;
  #L45d548.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45d54e.  v2:= temp @kind object;
  #L45d550.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L45d554.  call `subscribe`(v2, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L45d55a.  return @kind void;
  #L45d55c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45d55e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45d564.  v0:= v1.`io.reactivex.internal.operators.mixed.MaybeFlatMapObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L45d568.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45d56e.  return @kind void;
  catch `java.lang.Throwable` @[L45d538..L45d554] goto L45d55c;
}
