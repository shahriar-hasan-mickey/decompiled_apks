record `io.reactivex.internal.operators.observable.ObservableIntervalRange` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableIntervalRange.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableIntervalRange.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableIntervalRange.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableIntervalRange` v0 @kind this, `long` v1 , `long` v3 , `long` v5 , `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange;.<init>:(JJJJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46ba58.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L46ba5e.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` := v5 @kind wide;
  #L46ba62.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` := v7 @kind wide;
  #L46ba66.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` := v9 @kind object;
  #L46ba6a.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.Scheduler` := v10 @kind object;
  #L46ba6e.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` := v1 @kind wide;
  #L46ba72.  v0.`io.reactivex.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` := v3 @kind wide;
  #L46ba76.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableIntervalRange` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46ba88.  v7:= new `io.reactivex.internal.operators.observable.ObservableIntervalRange$a`;
  #L46ba8c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.b` @type ^`long` @kind wide;
  #L46ba90.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.c` @type ^`long` @kind wide;
  #L46ba94.  v0:= v7 @kind object;
  #L46ba96.  v1:= v9 @kind object;
  #L46ba98.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$a;.<init>:(Lio/reactivex/Observer;JJ)V` @kind direct;
  #L46ba9e.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46baa4.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.a` @type ^`io.reactivex.Scheduler` @kind object;
  #L46baa8.  v9:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L46baac.  if v9 == 0 then goto L46bad4;
  #L46bab0.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L46bab6.  v0:= temp @kind object;
  #L46bab8.  call `a`(v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46babe.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L46bac2.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L46bac6.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46baca.  v1:= v7 @kind object;
  #L46bacc.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46bad2.  goto L46baf0;
  #L46bad4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.d` @type ^`long` @kind wide;
  #L46bad8.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.e` @type ^`long` @kind wide;
  #L46badc.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableIntervalRange.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46bae0.  v1:= v7 @kind object;
  #L46bae2.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46bae8.  v9:= temp @kind object;
  #L46baea.  call `a`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableIntervalRange$a;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46baf0.  return @kind void;
}
