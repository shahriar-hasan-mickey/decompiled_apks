record `io.reactivex.internal.operators.observable.ObservableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableWindow$b.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$b.g` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$b.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$b.i` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindow$b.j` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.<init>:(Lio/reactivex/Observer;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L476bbc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L476bc2.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L476bc6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L476bcc.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L476bd0.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L476bd4.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.b` @type ^`long` := v3 @kind wide;
  #L476bd8.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.c` @type ^`long` := v5 @kind wide;
  #L476bdc.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.d` @type ^`int` := v7;
  #L476be0.  v2:= new `java.util.ArrayDeque`;
  #L476be4.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L476bea.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L476bee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476c00.  v0:= 1I;
  #L476c02.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` := v0 @kind boolean;
  #L476c06.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476ba4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L476ba8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L476c18.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L476c1c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L476c22.  v1:= temp;
  #L476c24.  if v1 != 0 then goto L476c3c;
  #L476c28.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L476c2e.  v1:= temp @kind object;
  #L476c30.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L476c34.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L476c3a.  goto L476c1c;
  #L476c3c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L476c40.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L476c46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L476c58.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L476c5c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L476c62.  v1:= temp;
  #L476c64.  if v1 != 0 then goto L476c7c;
  #L476c68.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L476c6e.  v1:= temp @kind object;
  #L476c70.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L476c74.  call `onError`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L476c7a.  goto L476c5c;
  #L476c7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L476c80.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L476c86.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v11 @kind this, `java.lang.Object` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L476c98.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L476c9c.  v1:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.f` @type ^`long` @kind wide;
  #L476ca0.  v3:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.c` @type ^`long` @kind wide;
  #L476ca4.  v5:= v1 %% v3 @kind long;
  #L476ca8.  v7:= 0L;
  #L476cac.  v9:= lcmp(v5, v7);
  #L476cb0.  if v9 != 0 then goto L476ce2;
  #L476cb4.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L476cb8.  if v5 != 0 then goto L476ce2;
  #L476cbc.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L476cc0.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L476cc6.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.d` @type ^`int`;
  #L476cca.  call temp:= `create`(v5, v11) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L476cd0.  v5:= temp @kind object;
  #L476cd2.  call temp:= `offer`(v0, v5) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L476cd8.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L476cdc.  call `onNext`(v6, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L476ce2.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` @kind wide;
  #L476ce6.  v7:= 1L;
  #L476cea.  v5:= v5 + v7 @kind long;
  #L476cec.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L476cf2.  v9:= temp @kind object;
  #L476cf4.  call temp:= `hasNext`(v9) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L476cfa.  v10:= temp;
  #L476cfc.  if v10 == 0 then goto L476d14;
  #L476d00.  call temp:= `next`(v9) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L476d06.  v10:= temp @kind object;
  #L476d08.  v10:= (`io.reactivex.subjects.UnicastSubject`) v10 @kind object;
  #L476d0c.  call `onNext`(v10, v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L476d12.  goto L476cf4;
  #L476d14.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.b` @type ^`long` @kind wide;
  #L476d18.  v12:= lcmp(v5, v9);
  #L476d1c.  if v12 < 0 then goto L476d5a;
  #L476d20.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L476d26.  v12:= temp @kind object;
  #L476d28.  v12:= (`io.reactivex.subjects.UnicastSubject`) v12 @kind object;
  #L476d2c.  call `onComplete`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L476d32.  call temp:= `isEmpty`(v0) @signature `Ljava/util/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L476d38.  v12:= temp;
  #L476d3a.  if v12 == 0 then goto L476d52;
  #L476d3e.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L476d42.  if v12 == 0 then goto L476d52;
  #L476d46.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476d4a.  call `dispose`(v12) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476d50.  return @kind void;
  #L476d52.  v5:= v5 - v3 @kind long;
  #L476d54.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v5 @kind wide;
  #L476d58.  goto L476d5e;
  #L476d5a.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.h` @type ^`long` := v5 @kind wide;
  #L476d5e.  v1:= v1 + v7 @kind long;
  #L476d60.  v11.`io.reactivex.internal.operators.observable.ObservableWindow$b.f` @type ^`long` := v1 @kind wide;
  #L476d64.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476d78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476d7c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L476d82.  v0:= temp;
  #L476d84.  if v0 == 0 then goto L476d96;
  #L476d88.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L476d8c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L476d90.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L476d96.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476da8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L476dac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L476db2.  v0:= temp;
  #L476db4.  if v0 != 0 then goto L476dca;
  #L476db8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.g` @type ^`boolean` @kind boolean;
  #L476dbc.  if v0 == 0 then goto L476dca;
  #L476dc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476dc4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476dca.  return @kind void;
}
