record `io.reactivex.internal.operators.observable.ObservableWindow$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindow$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindow$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindow$a.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindow$a.e` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindow$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindow$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindow$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.<init>:(Lio/reactivex/Observer;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L476a2c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L476a32.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L476a36.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.b` @type ^`long` := v2 @kind wide;
  #L476a3a.  v0.`io.reactivex.internal.operators.observable.ObservableWindow$a.c` @type ^`int` := v4;
  #L476a3e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476a50.  v0:= 1I;
  #L476a52.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` := v0 @kind boolean;
  #L476a56.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476a14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L476a18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L476a68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L476a6c.  if v0 == 0 then goto L476a7c;
  #L476a70.  v1:= 0I;
  #L476a72.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L476a76.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L476a7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476a80.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L476a86.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L476a98.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L476a9c.  if v0 == 0 then goto L476aac;
  #L476aa0.  v1:= 0I;
  #L476aa2.  v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L476aa6.  call `onError`(v0, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L476aac.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476ab0.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L476ab6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L476ac8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L476acc.  if v0 != 0 then goto L476af2;
  #L476ad0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L476ad4.  if v1 != 0 then goto L476af2;
  #L476ad8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.c` @type ^`int`;
  #L476adc.  call temp:= `create`(v0, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L476ae2.  v0:= temp @kind object;
  #L476ae4.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L476ae8.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476aec.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L476af2.  if v0 == 0 then goto L476b3c;
  #L476af6.  call `onNext`(v0, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L476afc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` @kind wide;
  #L476b00.  v3:= 1L;
  #L476b04.  v1:= v1 + v3 @kind long;
  #L476b06.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` := v1 @kind wide;
  #L476b0a.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.b` @type ^`long` @kind wide;
  #L476b0e.  v6:= lcmp(v1, v3);
  #L476b12.  if v6 < 0 then goto L476b3c;
  #L476b16.  v1:= 0L;
  #L476b1a.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.d` @type ^`long` := v1 @kind wide;
  #L476b1e.  v6:= 0I;
  #L476b20.  v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.f` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L476b24.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L476b2a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L476b2e.  if v6 == 0 then goto L476b3c;
  #L476b32.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476b36.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476b3c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476b50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476b54.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L476b5a.  v0:= temp;
  #L476b5c.  if v0 == 0 then goto L476b6e;
  #L476b60.  v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L476b64.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476b68.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L476b6e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindow$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476b80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.g` @type ^`boolean` @kind boolean;
  #L476b84.  if v0 == 0 then goto L476b92;
  #L476b88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindow$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476b8c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476b92.  return @kind void;
}
