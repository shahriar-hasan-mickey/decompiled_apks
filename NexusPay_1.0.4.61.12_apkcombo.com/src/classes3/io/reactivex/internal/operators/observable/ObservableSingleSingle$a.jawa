record `io.reactivex.internal.operators.observable.ObservableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L472bbc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L472bc2.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L472bc6.  v0.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L472bca.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472bdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472be0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472be6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472b9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472ba0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L472ba6.  v0:= temp;
  #L472ba8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L472bf8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L472bfc.  if v0 == 0 then goto L472c02;
  #L472c00.  return @kind void;
  #L472c02.  v0:= 1I;
  #L472c04.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L472c08.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L472c0c.  v1:= 0I;
  #L472c0e.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L472c12.  if v0 != 0 then goto L472c1a;
  #L472c16.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L472c1a.  if v0 == 0 then goto L472c2a;
  #L472c1e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472c22.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L472c28.  goto L472c3e;
  #L472c2a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472c2e.  v1:= new `java.util.NoSuchElementException`;
  #L472c32.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L472c38.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472c3e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472c50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L472c54.  if v0 == 0 then goto L472c60;
  #L472c58.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L472c5e.  return @kind void;
  #L472c60.  v0:= 1I;
  #L472c62.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L472c66.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472c6a.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472c70.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L472c84.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` @kind boolean;
  #L472c88.  if v0 == 0 then goto L472c8e;
  #L472c8c.  return @kind void;
  #L472c8e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` @kind object;
  #L472c92.  if v0 == 0 then goto L472cc0;
  #L472c96.  v3:= 1I;
  #L472c98.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.e` @type ^`boolean` := v3 @kind boolean;
  #L472c9c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472ca0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472ca6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472caa.  v0:= new `java.lang.IllegalArgumentException`;
  #L472cae.  v1:= "Sequence contains more than one element!" @kind object;
  #L472cb2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L472cb8.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472cbe.  return @kind void;
  #L472cc0.  v2.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L472cc4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472cd8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472cdc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L472ce2.  v0:= temp;
  #L472ce4.  if v0 == 0 then goto L472cf6;
  #L472ce8.  v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L472cec.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472cf0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L472cf6.  return @kind void;
}
