record `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L478d28.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L478d2e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L478d32.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L478d38.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L478d3c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L478d40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L478d46.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L478d4a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L478d4e.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.b` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L478d52.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478e60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478e64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478e6a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L478e6e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L478e74.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.b:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478d08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478d0c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478d12.  v2:= temp;
  #L478d14.  return v2;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478d64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478d68.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478d6e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478d72.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478d78.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478cdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478ce0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L478ce6.  v0:= temp @kind object;
  #L478ce8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L478cec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478cf2.  v0:= temp;
  #L478cf4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478d8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478d90.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478d96.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L478d9a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L478da0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478db4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478db8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478dbe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L478dc2.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L478dc8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L478ddc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L478de2.  v0:= temp @kind object;
  #L478de4.  if v0 == 0 then goto L478e24;
  #L478de8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L478dec.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L478df2.  v3:= temp @kind object;
  #L478df4.  v0:= "The combiner returned a null value" @kind object;
  #L478df8.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L478dfe.  v3:= temp @kind object;
  #L478e00.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L478e04.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478e0a.  goto L478e24;
  #L478e0c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L478e0e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L478e14.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.dispose:()V` @kind virtual;
  #L478e1a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L478e1e.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L478e24.  return @kind void;
  catch `java.lang.Throwable` @[L478de8..L478e00] goto L478e0c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFrom$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478e44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFrom$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478e48.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478e4e.  return @kind void;
}
