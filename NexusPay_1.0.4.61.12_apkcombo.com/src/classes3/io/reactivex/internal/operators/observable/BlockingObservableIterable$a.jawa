record `io.reactivex.internal.operators.observable.BlockingObservableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `java.util.Iterator` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.BlockingObservableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45f684.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45f68a.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L45f68e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L45f694.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L45f698.  v2:= new `java.util.concurrent.locks.ReentrantLock`;
  #L45f69c.  call `<init>`(v2) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L45f6a2.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` := v2 @kind object;
  #L45f6a6.  call temp:= `newCondition`(v2) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L45f6ac.  v2:= temp @kind object;
  #L45f6ae.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` := v2 @kind object;
  #L45f6b2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45f784.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f788.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L45f78e.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L45f792.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L45f798.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f79c.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L45f7a2.  return @kind void;
  #L45f7a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45f7a6.  v1:= v2.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f7aa.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L45f7b0.  throw v0;
  catch `java.lang.Throwable` @[L45f78e..L45f798] goto L45f7a4;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L45f6c4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45f6ca.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L45f6d0.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L45f52c.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L45f532.  v0:= temp;
  #L45f534.  v1:= 0I;
  #L45f536.  if v0 == 0 then goto L45f54e;
  #L45f53a.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L45f53e.  if v0 != 0 then goto L45f544;
  #L45f542.  return v1;
  #L45f544.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f54a.  v0:= temp @kind object;
  #L45f54c.  throw v0;
  #L45f54e.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L45f552.  v2:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45f556.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L45f55c.  v2:= temp;
  #L45f55e.  if v0 == 0 then goto L45f57a;
  #L45f562.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` @kind object;
  #L45f566.  if v0 != 0 then goto L45f570;
  #L45f56a.  if v2 == 0 then goto L45f57a;
  #L45f56e.  return v1;
  #L45f570.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f576.  v0:= temp @kind object;
  #L45f578.  throw v0;
  #L45f57a.  if v2 == 0 then goto L45f5f0;
  #L45f57e.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L45f584.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f588.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L45f58e.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` @kind boolean;
  #L45f592.  if v0 != 0 then goto L45f5be;
  #L45f596.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45f59a.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L45f5a0.  v0:= temp;
  #L45f5a2.  if v0 == 0 then goto L45f5be;
  #L45f5a6.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @kind virtual;
  #L45f5ac.  v0:= temp;
  #L45f5ae.  if v0 != 0 then goto L45f5be;
  #L45f5b2.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.c` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L45f5b6.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L45f5bc.  goto L45f58e;
  #L45f5be.  v0:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f5c2.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L45f5c8.  goto L45f52c;
  #L45f5ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45f5cc.  v1:= v3.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.b` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L45f5d0.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L45f5d6.  throw v0;
  #L45f5d8.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L45f5da.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45f5e0.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L45f5e6.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f5ec.  v0:= temp @kind object;
  #L45f5ee.  throw v0;
  #L45f5f0.  v0:= 1I;
  #L45f5f2.  return v0;
  catch `java.lang.InterruptedException` @[L45f57e..L45f58e] goto L45f5d8;
  catch `java.lang.Throwable` @[L45f58e..L45f5bc] goto L45f5ca;
  catch `java.lang.InterruptedException` @[L45f5be..L45f5d8] goto L45f5d8;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f624.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45f62a.  v0:= temp @kind object;
  #L45f62c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L45f630.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45f636.  v0:= temp;
  #L45f638.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f64c.  call temp:= `hasNext`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.hasNext:()Z` @kind virtual;
  #L45f652.  v0:= temp;
  #L45f654.  if v0 == 0 then goto L45f666;
  #L45f658.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45f65c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L45f662.  v0:= temp @kind object;
  #L45f664.  return v0 @kind object;
  #L45f666.  v0:= new `java.util.NoSuchElementException`;
  #L45f66a.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L45f670.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f6e4.  v0:= 1I;
  #L45f6e6.  v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L45f6ea.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L45f6f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L45f704.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.e` @type ^`java.lang.Throwable` := v1 @kind object;
  #L45f708.  v1:= 1I;
  #L45f70a.  v0.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.d` @type ^`boolean` := v1 @kind boolean;
  #L45f70e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L45f714.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f728.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L45f72c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L45f732.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.a:()V` @kind virtual;
  #L45f738.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L45f74c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L45f752.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f764.  v0:= new `java.lang.UnsupportedOperationException`;
  #L45f768.  v1:= "remove" @kind object;
  #L45f76c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45f772.  throw v0;
}
