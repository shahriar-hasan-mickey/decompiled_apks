record `io.reactivex.internal.operators.observable.ObservableInterval` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableInterval.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableInterval.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableInterval.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableInterval.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableInterval` v0 @kind this, `long` v1 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval;.<init>:(JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46bb04.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L46bb0a.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.b` @type ^`long` := v1 @kind wide;
  #L46bb0e.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.c` @type ^`long` := v3 @kind wide;
  #L46bb12.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L46bb16.  v0.`io.reactivex.internal.operators.observable.ObservableInterval.a` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L46bb1a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableInterval` v8 @kind this, `io.reactivex.Observer` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46bb2c.  v7:= new `io.reactivex.internal.operators.observable.ObservableInterval$a`;
  #L46bb30.  call `<init>`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L46bb36.  call `onSubscribe`(v9, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46bb3c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.a` @type ^`io.reactivex.Scheduler` @kind object;
  #L46bb40.  v9:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L46bb44.  if v9 == 0 then goto L46bb6c;
  #L46bb48.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L46bb4e.  v0:= temp @kind object;
  #L46bb50.  call `a`(v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46bb56.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.b` @type ^`long` @kind wide;
  #L46bb5a.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.c` @type ^`long` @kind wide;
  #L46bb5e.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46bb62.  v1:= v7 @kind object;
  #L46bb64.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46bb6a.  goto L46bb88;
  #L46bb6c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.b` @type ^`long` @kind wide;
  #L46bb70.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.c` @type ^`long` @kind wide;
  #L46bb74.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableInterval.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46bb78.  v1:= v7 @kind object;
  #L46bb7a.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46bb80.  v9:= temp @kind object;
  #L46bb82.  call `a`(v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableInterval$a;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46bb88.  return @kind void;
}
