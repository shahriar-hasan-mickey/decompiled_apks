record `io.reactivex.internal.operators.observable.ObservableJust` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class, `io.reactivex.internal.fuseable.ScalarCallable` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableJust.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableJust` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJust;.<init>:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46c254.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L46c25a.  v0.`io.reactivex.internal.operators.observable.ObservableJust.a` @type ^`java.lang.Object` := v1 @kind object;
  #L46c25e.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.observable.ObservableJust` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJust;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c23c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJust.a` @type ^`java.lang.Object` @kind object;
  #L46c240.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableJust` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJust;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L46c270.  v0:= new `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable`;
  #L46c274.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJust.a` @type ^`java.lang.Object` @kind object;
  #L46c278.  call `<init>`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @kind direct;
  #L46c27e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46c284.  call `run`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @kind virtual;
  #L46c28a.  return @kind void;
}
