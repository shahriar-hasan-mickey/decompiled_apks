record `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46daa8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46daae.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46dab2.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L46dab6.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`boolean` := v3 @kind boolean;
  #L46daba.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L46dabe.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L46dac4.  v0.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L46dac8.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46dadc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L46dae0.  if v0 == 0 then goto L46dae6;
  #L46dae4.  return @kind void;
  #L46dae6.  v0:= 1I;
  #L46dae8.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` := v0 @kind boolean;
  #L46daec.  v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L46daf0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46daf4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46dafa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46db0c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` @kind boolean;
  #L46db10.  if v0 == 0 then goto L46db30;
  #L46db14.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L46db18.  if v0 == 0 then goto L46db24;
  #L46db1c.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46db22.  return @kind void;
  #L46db24.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46db28.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46db2e.  return @kind void;
  #L46db30.  v0:= 1I;
  #L46db32.  v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L46db36.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.c` @type ^`boolean` @kind boolean;
  #L46db3a.  if v1 == 0 then goto L46db52;
  #L46db3e.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L46db42.  if v1 != 0 then goto L46db52;
  #L46db46.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46db4a.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46db50.  return @kind void;
  #L46db52.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L46db56.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46db5c.  v1:= temp @kind object;
  #L46db5e.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L46db62.  if v1 != 0 then goto L46db86;
  #L46db66.  v0:= new `java.lang.NullPointerException`;
  #L46db6a.  v1:= "Observable is null" @kind object;
  #L46db6e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46db74.  call temp:= `initCause`(v0, v7) @signature `Ljava/lang/NullPointerException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L46db7a.  v7:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46db7e.  call `onError`(v7, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46db84.  return @kind void;
  #L46db86.  call `subscribe`(v1, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46db8c.  return @kind void;
  #L46db8e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46db90.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46db96.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46db9a.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L46db9e.  v4:= 2I;
  #L46dba0.  v4:= new `java.lang.Throwable`[v4];
  #L46dba4.  v5:= 0I;
  #L46dba6.  v4[v5]:= v7 @kind object;
  #L46dbaa.  v4[v0]:= v1 @kind object;
  #L46dbae.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L46dbb4.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46dbba.  return @kind void;
  catch `java.lang.Throwable` @[L46db52..L46db62] goto L46db8e;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46dbd8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.f` @type ^`boolean` @kind boolean;
  #L46dbdc.  if v0 == 0 then goto L46dbe2;
  #L46dbe0.  return @kind void;
  #L46dbe2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46dbe6.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46dbec.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableOnErrorNext$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46dc00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableOnErrorNext$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L46dc04.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46dc0a.  return @kind void;
}
