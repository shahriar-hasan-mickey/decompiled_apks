record `io.reactivex.internal.operators.observable.ObservableCollectSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableCollectSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.observable.ObservableCollectSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableCollectSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L463264.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46326a.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L46326e.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L463272.  v0.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L463276.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463288.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46328c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463292.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463244.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463248.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L46324e.  v0:= temp;
  #L463250.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4632a4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L4632a8.  if v0 == 0 then goto L4632ae;
  #L4632ac.  return @kind void;
  #L4632ae.  v0:= 1I;
  #L4632b0.  v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4632b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4632b8.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L4632bc.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4632c2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4632d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L4632d8.  if v0 == 0 then goto L4632e4;
  #L4632dc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4632e2.  return @kind void;
  #L4632e4.  v0:= 1I;
  #L4632e6.  v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4632ea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4632ee.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4632f4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463308.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L46330c.  if v0 == 0 then goto L463312;
  #L463310.  return @kind void;
  #L463312.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L463316.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L46331a.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L463320.  goto L463334;
  #L463322.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463324.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463328.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46332e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L463334.  return @kind void;
  catch `java.lang.Throwable` @[L463312..L463320] goto L463322;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCollectSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollectSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463354.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463358.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46335e.  v0:= temp;
  #L463360.  if v0 == 0 then goto L463372;
  #L463364.  v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L463368.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L46336c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463372.  return @kind void;
}
