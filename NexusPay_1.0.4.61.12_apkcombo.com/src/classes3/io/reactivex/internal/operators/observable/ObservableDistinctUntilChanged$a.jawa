record `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4665fc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L466602.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L466606.  v0.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L46660a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46661c.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L466620.  if v0 == 0 then goto L466626;
  #L466624.  return @kind void;
  #L466626.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L46662a.  if v0 == 0 then goto L46663a;
  #L46662e.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L466632.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L466638.  return @kind void;
  #L46663a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L46663e.  call temp:= `apply`(v0, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L466644.  v0:= temp @kind object;
  #L466646.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L46664a.  if v1 == 0 then goto L466668;
  #L46664e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L466652.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L466656.  call temp:= `test`(v1, v2, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L46665c.  v1:= temp;
  #L46665e.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L466662.  if v1 == 0 then goto L466672;
  #L466666.  return @kind void;
  #L466668.  v1:= 1I;
  #L46666a.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v1 @kind boolean;
  #L46666e.  v3.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L466672.  v0:= v3.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L466676.  call `onNext`(v0, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46667c.  return @kind void;
  #L46667e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466680.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L466686.  return @kind void;
  catch `java.lang.Throwable` @[L46663a..L466672] goto L46667e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L466598.  v0:= v4.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L46659c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4665a2.  v0:= temp @kind object;
  #L4665a4.  if v0 != 0 then goto L4665ac;
  #L4665a8.  v0:= 0I;
  #L4665aa.  return v0 @kind object;
  #L4665ac.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4665b0.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4665b6.  v1:= temp @kind object;
  #L4665b8.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4665bc.  if v2 != 0 then goto L4665cc;
  #L4665c0.  v2:= 1I;
  #L4665c2.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4665c6.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4665ca.  return v0 @kind object;
  #L4665cc.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4665d0.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4665d4.  call temp:= `test`(v2, v3, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4665da.  v2:= temp;
  #L4665dc.  if v2 != 0 then goto L4665e6;
  #L4665e0.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4665e4.  return v0 @kind object;
  #L4665e6.  v4.`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4665ea.  goto L466598;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L46657c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L466582.  v1:= temp;
  #L466584.  return v1;
}
