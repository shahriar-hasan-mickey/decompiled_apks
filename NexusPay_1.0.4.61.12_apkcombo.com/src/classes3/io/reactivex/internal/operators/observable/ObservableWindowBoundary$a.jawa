record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L476ddc.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L476de2.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` := v1 @kind object;
  #L476de6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476df8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L476dfc.  if v0 == 0 then goto L476e02;
  #L476e00.  return @kind void;
  #L476e02.  v0:= 1I;
  #L476e04.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L476e08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L476e0c.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @kind virtual;
  #L476e12.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476e24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L476e28.  if v0 == 0 then goto L476e34;
  #L476e2c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L476e32.  return @kind void;
  #L476e34.  v0:= 1I;
  #L476e36.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` := v0 @kind boolean;
  #L476e3a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L476e3e.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L476e44.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L476e58.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.c` @type ^`boolean` @kind boolean;
  #L476e5c.  if v1 == 0 then goto L476e62;
  #L476e60.  return @kind void;
  #L476e62.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind object;
  #L476e66.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @kind virtual;
  #L476e6c.  return @kind void;
}
