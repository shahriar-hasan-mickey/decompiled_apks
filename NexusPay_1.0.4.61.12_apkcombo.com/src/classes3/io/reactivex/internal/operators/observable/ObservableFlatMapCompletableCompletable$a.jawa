record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.Observer` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L468308.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46830e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L468312.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L468316.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L46831a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46831e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L468324.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L468328.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L46832c.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L468332.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L468336.  v1:= 1I;
  #L468338.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46833e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L46837c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468380.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468386.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @kind virtual;
  #L46838c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.b:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4683a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4683a4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4683aa.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4683b0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468350.  v0:= 1I;
  #L468352.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L468356.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46835a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L468360.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468364.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46836a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4682e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4682ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4682f2.  v0:= temp;
  #L4682f4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4683c4.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4683ca.  v0:= temp;
  #L4683cc.  if v0 != 0 then goto L4683f6;
  #L4683d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4683d4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4683da.  v0:= temp @kind object;
  #L4683dc.  if v0 == 0 then goto L4683ec;
  #L4683e0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4683e4.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4683ea.  goto L4683f6;
  #L4683ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L4683f0.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L4683f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468408.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46840c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L468412.  v0:= temp;
  #L468414.  if v0 == 0 then goto L468470;
  #L468418.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.d` @type ^`boolean` @kind boolean;
  #L46841c.  if v2 == 0 then goto L468444;
  #L468420.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468426.  v2:= temp;
  #L468428.  if v2 != 0 then goto L468476;
  #L46842c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468430.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468436.  v2:= temp @kind object;
  #L468438.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L46843c.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L468442.  goto L468476;
  #L468444.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.dispose:()V` @kind virtual;
  #L46844a.  v2:= 0I;
  #L46844c.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L468452.  v2:= temp;
  #L468454.  if v2 <= 0 then goto L468476;
  #L468458.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46845c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468462.  v2:= temp @kind object;
  #L468464.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L468468.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46846e.  goto L468476;
  #L468470.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L468476.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L468488.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L46848c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L468492.  v3:= temp @kind object;
  #L468494.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L468498.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46849e.  v3:= temp @kind object;
  #L4684a0.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L4684a4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4684aa.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a$a`;
  #L4684ae.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;)V` @kind direct;
  #L4684b4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.g` @type ^`boolean` @kind boolean;
  #L4684b8.  if v1 != 0 then goto L4684d2;
  #L4684bc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4684c0.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4684c6.  v1:= temp;
  #L4684c8.  if v1 == 0 then goto L4684d2;
  #L4684cc.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L4684d2.  return @kind void;
  #L4684d4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4684d6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4684dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4684e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4684e6.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4684ec.  return @kind void;
  catch `java.lang.Throwable` @[L468488..L4684a4] goto L4684d4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletableCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46850c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468510.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L468516.  v0:= temp;
  #L468518.  if v0 == 0 then goto L46852a;
  #L46851c.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L468520.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L468524.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46852a.  return @kind void;
}
