record `io.reactivex.internal.operators.observable.ObservableTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableTimeout$d` `io.reactivex.internal.operators.observable.ObservableTimeout$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeout$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.observable.ObservableTimeout$d` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$d;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4752dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4752e2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` := v1 @kind wide;
  #L4752e6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$d` := v3 @kind object;
  #L4752ea.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4752fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475302.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4752b4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4752ba.  v0:= temp @kind object;
  #L4752bc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4752c0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4752c6.  v0:= temp;
  #L4752c8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L475314.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47531a.  v0:= temp @kind object;
  #L47531c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L475320.  if v0 == v1 then goto L475338;
  #L475324.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L47532a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L47532e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L475332.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L475338.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47534c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475352.  v0:= temp @kind object;
  #L475354.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L475358.  if v0 == v1 then goto L475372;
  #L47535c.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L475362.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L475366.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L47536a.  call `a`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$d;.a:(JLjava/lang/Throwable;)V` @kind interface;
  #L475370.  goto L475378;
  #L475372.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L475378.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47538c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475392.  v3:= temp @kind object;
  #L475394.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L475398.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L47539c.  if v3 == v0 then goto L4753be;
  #L4753a0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4753a6.  v3:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4753aa.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4753b0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTimeout$d` @kind object;
  #L4753b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$a.b` @type ^`long` @kind wide;
  #L4753b8.  call `b`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L4753be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4753d0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4753d6.  return @kind void;
}
