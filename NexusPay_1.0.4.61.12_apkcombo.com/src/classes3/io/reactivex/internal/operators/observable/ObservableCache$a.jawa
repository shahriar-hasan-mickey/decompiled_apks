record `io.reactivex.internal.operators.observable.ObservableCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCache$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache` `io.reactivex.internal.operators.observable.ObservableCache$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache$b` `io.reactivex.internal.operators.observable.ObservableCache$a.c` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableCache$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L462ce0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L462ce6.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L462cea.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache` := v2 @kind object;
  #L462cee.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCache.e` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` @kind object;
  #L462cf2.  v0.`io.reactivex.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L462cf6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462d08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` @kind boolean;
  #L462d0c.  if v0 != 0 then goto L462d20;
  #L462d10.  v0:= 1I;
  #L462d12.  v1.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` := v0 @kind boolean;
  #L462d16.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache` @kind object;
  #L462d1a.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.e:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L462d20.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462cc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` @kind boolean;
  #L462ccc.  return v0;
}
