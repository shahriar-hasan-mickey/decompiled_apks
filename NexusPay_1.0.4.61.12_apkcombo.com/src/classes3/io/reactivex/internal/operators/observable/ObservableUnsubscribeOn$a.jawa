record `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4765b0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4765b6.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4765ba.  v0.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L4765be.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4765d0.  v0:= 0I;
  #L4765d2.  v1:= 1I;
  #L4765d4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4765da.  v0:= temp;
  #L4765dc.  if v0 == 0 then goto L4765f4;
  #L4765e0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L4765e4.  v1:= new `io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a$a`;
  #L4765e8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;)V` @kind direct;
  #L4765ee.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4765f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476594.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L47659a.  v0:= temp;
  #L47659c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476608.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L47660e.  v0:= temp;
  #L476610.  if v0 != 0 then goto L47661e;
  #L476614.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476618.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47661e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476630.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L476636.  v0:= temp;
  #L476638.  if v0 == 0 then goto L476644;
  #L47663c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L476642.  return @kind void;
  #L476644.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476648.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47664e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476660.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L476666.  v0:= temp;
  #L476668.  if v0 != 0 then goto L476676;
  #L47666c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476670.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L476676.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476688.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47668c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L476692.  v0:= temp;
  #L476694.  if v0 == 0 then goto L4766a6;
  #L476698.  v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L47669c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUnsubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4766a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4766a6.  return @kind void;
}
