record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L477364.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L477368.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L47736e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L477374.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L477378.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47737e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L477382.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L477386.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47738c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L477390.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L477394.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L47739a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L47739e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L4773a2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L4773a6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @type ^`int` := v5;
  #L4773aa.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L4773ae.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L4773b4.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L4773b8.  v2:= new `java.util.ArrayList`;
  #L4773bc.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4773c2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` := v2 @kind object;
  #L4773c6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4773ca.  v3:= 1L;
  #L4773ce.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L4773d4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4773fc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L477400.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L477406.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47740a.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`;
  #L47740e.  v4:= v4.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a.c` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L477412.  v2:= 0I;
  #L477414.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$d;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L47741a.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L477420.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L477426.  v4:= temp;
  #L477428.  if v4 == 0 then goto L477432;
  #L47742c.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L477432.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4773e8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L477498.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L47749c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4774a2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4774a6.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4774ac.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4774c0.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4774c4.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L4774c8.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4774cc.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` @kind object;
  #L4774d0.  v3:= 1I;
  #L4774d2.  v4:= 1I;
  #L4774d4.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4774d8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4774de.  v6:= temp @kind object;
  #L4774e0.  if v6 != 0 then goto L4774e8;
  #L4774e4.  v7:= 1I;
  #L4774e6.  goto L4774ea;
  #L4774e8.  v7:= 0I;
  #L4774ea.  if v5 == 0 then goto L477558;
  #L4774ee.  if v7 == 0 then goto L477558;
  #L4774f2.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L4774f8.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4774fc.  if v0 == 0 then goto L477528;
  #L477500.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L477506.  v1:= temp @kind object;
  #L477508.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L47750e.  v3:= temp;
  #L477510.  if v3 == 0 then goto L477550;
  #L477514.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47751a.  v3:= temp @kind object;
  #L47751c.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L477520.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L477526.  goto L477508;
  #L477528.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L47752e.  v0:= temp @kind object;
  #L477530.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L477536.  v1:= temp;
  #L477538.  if v1 == 0 then goto L477550;
  #L47753c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L477542.  v1:= temp @kind object;
  #L477544.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L477548.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L47754e.  goto L477530;
  #L477550.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L477556.  return @kind void;
  #L477558.  if v7 == 0 then goto L47756c;
  #L47755c.  v4:= -v4 @kind int;
  #L47755e.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L477564.  v4:= temp;
  #L477566.  if v4 != 0 then goto L4774d4;
  #L47756a.  return @kind void;
  #L47756c.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d` @kind boolean;
  #L477570.  if v5 == 0 then goto L47764a;
  #L477574.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`) v6 @kind object;
  #L477578.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L47757c.  if v5 == 0 then goto L4775b6;
  #L477580.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L477586.  v5:= temp;
  #L477588.  if v5 == 0 then goto L4774d4;
  #L47758c.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L477590.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L477596.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47759a.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4775a0.  v5:= temp @kind wide;
  #L4775a2.  v7:= 0L;
  #L4775a6.  v9:= lcmp(v5, v7);
  #L4775aa.  if v9 != 0 then goto L4774d4;
  #L4775ae.  call `b`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L4775b4.  return @kind void;
  #L4775b6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4775ba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4775c0.  v5:= temp;
  #L4775c2.  if v5 == 0 then goto L4775c8;
  #L4775c6.  goto L4774d4;
  #L4775c8.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.d` @type ^`int`;
  #L4775cc.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4775d2.  v5:= temp @kind object;
  #L4775d4.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4775da.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4775e0.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L4775e4.  v6:= v6.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d.b` @type ^`java.lang.Object` @kind object;
  #L4775e8.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4775ee.  v6:= temp @kind object;
  #L4775f0.  v7:= "The ObservableSource supplied is null" @kind object;
  #L4775f4.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4775fa.  v6:= temp @kind object;
  #L4775fc.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L477600.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$a`;
  #L477604.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L47760a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L47760e.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L477614.  v5:= temp;
  #L477616.  if v5 == 0 then goto L4774d4;
  #L47761a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47761e.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L477624.  call `subscribe`(v6, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L47762a.  goto L4774d4;
  #L47762e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L477630.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L477636.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L47763a.  call `set`(v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L477640.  call `onError`(v1, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L477646.  goto L4774d4;
  #L47764a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L477650.  v5:= temp @kind object;
  #L477652.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L477658.  v7:= temp;
  #L47765a.  if v7 == 0 then goto L4774d4;
  #L47765e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L477664.  v7:= temp @kind object;
  #L477666.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L47766a.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L477670.  v8:= temp @kind object;
  #L477672.  call `onNext`(v7, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L477678.  goto L477652;
  catch `java.lang.Throwable` @[L4775e0..L477600] goto L47762e;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L477698.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47769c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4776a2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4776a6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4776ac.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4776b2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L477444.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477448.  v1:= 0I;
  #L47744a.  v2:= 1I;
  #L47744c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L477452.  v0:= temp;
  #L477454.  if v0 == 0 then goto L477484;
  #L477458.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47745c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L477462.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L477466.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L47746c.  v0:= temp @kind wide;
  #L47746e.  v2:= 0L;
  #L477472.  v4:= lcmp(v0, v2);
  #L477476.  if v4 != 0 then goto L477484;
  #L47747a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47747e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477484.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L477878.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47787c.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$d`;
  #L477880.  v2:= 0I;
  #L477882.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$d;.<init>:(Lio/reactivex/subjects/UnicastSubject;Ljava/lang/Object;)V` @kind direct;
  #L477888.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47788e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L477894.  v4:= temp;
  #L477896.  if v4 == 0 then goto L4778a0;
  #L47789a.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L4778a0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477344.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477348.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L47734e.  v0:= temp;
  #L477350.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4776c4.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4776c8.  if v0 == 0 then goto L4776ce;
  #L4776cc.  return @kind void;
  #L4776ce.  v0:= 1I;
  #L4776d0.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4776d4.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4776da.  v0:= temp;
  #L4776dc.  if v0 == 0 then goto L4776e6;
  #L4776e0.  call `c`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L4776e6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4776ea.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4776f0.  v0:= temp @kind wide;
  #L4776f2.  v2:= 0L;
  #L4776f6.  v4:= lcmp(v0, v2);
  #L4776fa.  if v4 != 0 then goto L477708;
  #L4776fe.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L477702.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L477708.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L47770c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L477712.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L477724.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L477728.  if v0 == 0 then goto L477734;
  #L47772c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L477732.  return @kind void;
  #L477734.  v5.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L477738.  v0:= 1I;
  #L47773a.  v5.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L47773e.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L477744.  v0:= temp;
  #L477746.  if v0 == 0 then goto L477750;
  #L47774a.  call `c`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L477750.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L477754.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L47775a.  v0:= temp @kind wide;
  #L47775c.  v2:= 0L;
  #L477760.  v4:= lcmp(v0, v2);
  #L477764.  if v4 != 0 then goto L477772;
  #L477768.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L47776c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L477772.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L477776.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47777c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L477790.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L477796.  v0:= temp;
  #L477798.  if v0 == 0 then goto L4777d8;
  #L47779c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.h` @type ^`java.util.List` @kind object;
  #L4777a0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4777a6.  v0:= temp @kind object;
  #L4777a8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4777ae.  v1:= temp;
  #L4777b0.  if v1 == 0 then goto L4777c8;
  #L4777b4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4777ba.  v1:= temp @kind object;
  #L4777bc.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L4777c0.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4777c6.  goto L4777a8;
  #L4777c8.  v3:= -1I;
  #L4777ca.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4777d0.  v3:= temp;
  #L4777d2.  if v3 != 0 then goto L4777f8;
  #L4777d6.  return @kind void;
  #L4777d8.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4777dc.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4777e2.  v3:= temp @kind object;
  #L4777e4.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4777ea.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4777f0.  v3:= temp;
  #L4777f2.  if v3 != 0 then goto L4777f8;
  #L4777f6.  return @kind void;
  #L4777f8.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.c:()V` @kind virtual;
  #L4777fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L477810.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477814.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47781a.  v0:= temp;
  #L47781c.  if v0 == 0 then goto L477866;
  #L477820.  v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L477824.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L477828.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47782e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477832.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L477838.  v3:= temp;
  #L47783a.  if v3 == 0 then goto L477840;
  #L47783e.  return @kind void;
  #L477840.  v3:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b`;
  #L477844.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;)V` @kind direct;
  #L47784a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47784e.  v1:= 0I;
  #L477850.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L477856.  v0:= temp;
  #L477858.  if v0 == 0 then goto L477866;
  #L47785c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L477860.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L477866.  return @kind void;
}
