record `io.reactivex.internal.operators.observable.BlockingObservableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.internal.operators.observable.BlockingObservableNext$b` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v1 @kind this, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.internal.operators.observable.BlockingObservableNext$b` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45fd94.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L45fd9a.  v0:= 1I;
  #L45fd9c.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L45fda0.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L45fda4.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L45fda8.  v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` := v3 @kind object;
  #L45fdac.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L45fc88.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` @kind boolean;
  #L45fc8c.  v1:= 1I;
  #L45fc8e.  if v0 != 0 then goto L45fcb8;
  #L45fc92.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L45fc96.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L45fc9a.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L45fca0.  v0:= new `io.reactivex.internal.operators.observable.ObservableMaterialize`;
  #L45fca4.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L45fca8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMaterialize;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L45fcae.  v2:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L45fcb2.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L45fcb8.  v0:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L45fcbc.  call temp:= `c`(v0) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/Notification;` @kind virtual;
  #L45fcc2.  v0:= temp @kind object;
  #L45fcc4.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L45fcca.  v2:= temp;
  #L45fccc.  v3:= 0I;
  #L45fcce.  if v2 == 0 then goto L45fce4;
  #L45fcd2.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L45fcd6.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L45fcdc.  v0:= temp @kind object;
  #L45fcde.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L45fce2.  return v1;
  #L45fce4.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L45fce8.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L45fcee.  v1:= temp;
  #L45fcf0.  if v1 == 0 then goto L45fcf6;
  #L45fcf4.  return v3;
  #L45fcf6.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L45fcfc.  v0:= temp @kind object;
  #L45fcfe.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L45fd02.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45fd08.  v0:= temp @kind object;
  #L45fd0a.  throw v0;
  #L45fd0c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L45fd0e.  v1:= v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.a` @type ^`io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind object;
  #L45fd12.  call `dispose`(v1) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L45fd18.  v4.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L45fd1c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45fd22.  v0:= temp @kind object;
  #L45fd24.  throw v0;
  catch `java.lang.InterruptedException` @[L45fcb8..L45fcc4] goto L45fd0c;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fc40.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L45fc44.  if v0 != 0 then goto L45fc6c;
  #L45fc48.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.d` @type ^`boolean` @kind boolean;
  #L45fc4c.  v1:= 0I;
  #L45fc4e.  if v0 != 0 then goto L45fc54;
  #L45fc52.  return v1;
  #L45fc54.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` @kind boolean;
  #L45fc58.  if v0 == 0 then goto L45fc68;
  #L45fc5c.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.a:()Z` @kind direct;
  #L45fc62.  v0:= temp;
  #L45fc64.  if v0 == 0 then goto L45fc6a;
  #L45fc68.  v1:= 1I;
  #L45fc6a.  return v1;
  #L45fc6c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45fc72.  v0:= temp @kind object;
  #L45fc74.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fd48.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L45fd4c.  if v0 != 0 then goto L45fd78;
  #L45fd50.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.hasNext:()Z` @kind virtual;
  #L45fd56.  v0:= temp;
  #L45fd58.  if v0 == 0 then goto L45fd68;
  #L45fd5c.  v0:= 1I;
  #L45fd5e.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L45fd62.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L45fd66.  return v0 @kind object;
  #L45fd68.  v0:= new `java.util.NoSuchElementException`;
  #L45fd6c.  v1:= "No more elements" @kind object;
  #L45fd70.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fd76.  throw v0;
  #L45fd78.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45fd7e.  v0:= temp @kind object;
  #L45fd80.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fdc0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L45fdc4.  v1:= "Read only iterator" @kind object;
  #L45fdc8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45fdce.  throw v0;
}
