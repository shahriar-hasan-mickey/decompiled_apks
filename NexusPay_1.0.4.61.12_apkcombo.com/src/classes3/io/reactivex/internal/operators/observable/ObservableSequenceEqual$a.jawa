record `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.<init>:(Lio/reactivex/Observer;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47218c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L472192.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L472196.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L47219a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L47219e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L4721a2.  v1:= 2I;
  #L4721a4.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[v1];
  #L4721a8.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] := v3 @kind object;
  #L4721ac.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4721b0.  v5:= 0I;
  #L4721b2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4721b8.  v3[v5]:= v4 @kind object;
  #L4721bc.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`;
  #L4721c0.  v5:= 1I;
  #L4721c2.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;II)V` @kind direct;
  #L4721c8.  v3[v5]:= v4 @kind object;
  #L4721cc.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L4721d0.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L4721d6.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4721da.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4721ec.  v0:= 1I;
  #L4721ee.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4721f2.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4721f8.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4721fe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L472268.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47226e.  v0:= temp;
  #L472270.  if v0 == 0 then goto L472276;
  #L472274.  return @kind void;
  #L472276.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L47227a.  v1:= 0I;
  #L47227c.  v2:= v0[v1] @kind object;
  #L472280.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472284.  v4:= 1I;
  #L472286.  v0:= v0[v4] @kind object;
  #L47228a.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L47228e.  v6:= 1I;
  #L472290.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L472294.  if v7 == 0 then goto L4722a6;
  #L472298.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L47229e.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4722a4.  return @kind void;
  #L4722a6.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4722aa.  if v7 == 0 then goto L4722c8;
  #L4722ae.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4722b2.  if v8 == 0 then goto L4722c8;
  #L4722b6.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4722bc.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4722c0.  call `onError`(v0, v8) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4722c6.  return @kind void;
  #L4722c8.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.d` @type ^`boolean` @kind boolean;
  #L4722cc.  if v8 == 0 then goto L4722ea;
  #L4722d0.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.e` @type ^`java.lang.Throwable` @kind object;
  #L4722d4.  if v9 == 0 then goto L4722ea;
  #L4722d8.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4722de.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4722e2.  call `onError`(v0, v9) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4722e8.  return @kind void;
  #L4722ea.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L4722ee.  if v9 != 0 then goto L4722fe;
  #L4722f2.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4722f8.  v9:= temp @kind object;
  #L4722fa.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4722fe.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L472302.  if v9 != 0 then goto L47230a;
  #L472306.  v9:= 1I;
  #L472308.  goto L47230c;
  #L47230a.  v9:= 0I;
  #L47230c.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L472310.  if v10 != 0 then goto L472320;
  #L472314.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47231a.  v10:= temp @kind object;
  #L47231c.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L472320.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L472324.  if v10 != 0 then goto L47232c;
  #L472328.  v10:= 1I;
  #L47232a.  goto L47232e;
  #L47232c.  v10:= 0I;
  #L47232e.  if v7 == 0 then goto L472358;
  #L472332.  if v8 == 0 then goto L472358;
  #L472336.  if v9 == 0 then goto L472358;
  #L47233a.  if v10 == 0 then goto L472358;
  #L47233e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472342.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L472346.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47234c.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472350.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L472356.  return @kind void;
  #L472358.  if v7 == 0 then goto L472384;
  #L47235c.  if v8 == 0 then goto L472384;
  #L472360.  if v9 == v10 then goto L472384;
  #L472364.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L47236a.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47236e.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L472372.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L472378.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47237c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L472382.  return @kind void;
  #L472384.  if v9 != 0 then goto L4723ea;
  #L472388.  if v10 != 0 then goto L4723ea;
  #L47238c.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L472390.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` @kind object;
  #L472394.  v11:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` @kind object;
  #L472398.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L47239e.  v7:= temp;
  #L4723a0.  if v7 != 0 then goto L4723c4;
  #L4723a4.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4723aa.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4723ae.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L4723b2.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4723b8.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4723bc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4723c2.  return @kind void;
  #L4723c4.  v7:= 0I;
  #L4723c6.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L4723ca.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4723ce.  goto L4723ea;
  #L4723d0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4723d2.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4723d8.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4723de.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4723e2.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4723e8.  return @kind void;
  #L4723ea.  if v9 != 0 then goto L4723f2;
  #L4723ee.  if v10 == 0 then goto L472290;
  #L4723f2.  v6:= -v6 @kind int;
  #L4723f4.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4723fa.  v6:= temp;
  #L4723fc.  if v6 != 0 then goto L472290;
  #L472400.  return @kind void;
  catch `java.lang.Throwable` @[L47238c..L4723a0] goto L4723d0;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.c:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L47216c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L472170.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L472176.  v2:= temp;
  #L472178.  return v2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L472420.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L472424.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L472428.  v2:= 0I;
  #L47242a.  v2:= v0[v2] @kind object;
  #L47242e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L472434.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.e` @type ^`io.reactivex.ObservableSource` @kind object;
  #L472438.  v2:= 1I;
  #L47243a.  v0:= v0[v2] @kind object;
  #L47243e.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L472444.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L472210.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L472214.  if v0 != 0 then goto L472256;
  #L472218.  v0:= 1I;
  #L47221a.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` := v0 @kind boolean;
  #L47221e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L472222.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L472228.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47222e.  v1:= temp;
  #L472230.  if v1 != 0 then goto L472256;
  #L472234.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b`[] @kind object;
  #L472238.  v2:= 0I;
  #L47223a.  v2:= v1[v2] @kind object;
  #L47223e.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472242.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L472248.  v0:= v1[v0] @kind object;
  #L47224c.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472250.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L472256.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqual$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472154.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqual$a.g` @type ^`boolean` @kind boolean;
  #L472158.  return v0;
}
