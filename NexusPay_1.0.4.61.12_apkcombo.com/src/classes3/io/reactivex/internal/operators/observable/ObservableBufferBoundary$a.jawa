record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @AccessFlag VOLATILE;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.k` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4610d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4610de.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4610e2.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L4610e6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L4610ea.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L4610ee.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4610f2.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L4610f8.  v2:= temp;
  #L4610fa.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L461100.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L461104.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L461108.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L46110e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L461112.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L461116.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46111c.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L461120.  v1:= new `java.util.LinkedHashMap`;
  #L461124.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L46112a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v1 @kind object;
  #L46112e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L461132.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L461138.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46113c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L461150.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461154.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46115a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46115e.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L461164.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46116a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L46117c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L461180.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L461186.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46118a.  call temp:= `size`(v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L461190.  v4:= temp;
  #L461192.  v0:= 1I;
  #L461194.  if v4 != 0 then goto L4611a6;
  #L461198.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46119c.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4611a2.  v4:= 1I;
  #L4611a4.  goto L4611a8;
  #L4611a6.  v4:= 0I;
  #L4611a8.  @monitorenter v3
  #L4611aa.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4611ae.  if v1 != 0 then goto L4611b6;
  #L4611b2.  @monitorexit v3
  #L4611b4.  return @kind void;
  #L4611b6.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4611ba.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L4611be.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4611c4.  v5:= temp @kind object;
  #L4611c6.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4611cc.  v5:= temp @kind object;
  #L4611ce.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4611d4.  @monitorexit v3
  #L4611d6.  if v4 == 0 then goto L4611de;
  #L4611da.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4611de.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4611e4.  return @kind void;
  #L4611e6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4611e8.  @monitorexit v3
  #L4611ea.  throw v4;
  catch `java.lang.Throwable` @[L4611aa..L4611d6] goto L4611e6;
  catch `java.lang.Throwable` @[L4611e8..L4611ea] goto L4611e6;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L461280.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L461286.  v0:= temp;
  #L461288.  if v0 == 0 then goto L46128e;
  #L46128c.  return @kind void;
  #L46128e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L461292.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L461296.  v2:= 1I;
  #L461298.  v3:= 1I;
  #L46129a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` @kind boolean;
  #L46129e.  if v4 == 0 then goto L4612aa;
  #L4612a2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4612a8.  return @kind void;
  #L4612aa.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` @kind boolean;
  #L4612ae.  if v4 == 0 then goto L4612dc;
  #L4612b2.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4612b6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4612bc.  v5:= temp @kind object;
  #L4612be.  if v5 == 0 then goto L4612dc;
  #L4612c2.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4612c8.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4612cc.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4612d2.  v1:= temp @kind object;
  #L4612d4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4612da.  return @kind void;
  #L4612dc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4612e2.  v5:= temp @kind object;
  #L4612e4.  v5:= (`java.util.Collection`) v5 @kind object;
  #L4612e8.  if v5 != 0 then goto L4612f0;
  #L4612ec.  v6:= 1I;
  #L4612ee.  goto L4612f2;
  #L4612f0.  v6:= 0I;
  #L4612f2.  if v4 == 0 then goto L461302;
  #L4612f6.  if v6 == 0 then goto L461302;
  #L4612fa.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L461300.  return @kind void;
  #L461302.  if v6 == 0 then goto L461316;
  #L461306.  v3:= -v3 @kind int;
  #L461308.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46130e.  v3:= temp;
  #L461310.  if v3 != 0 then goto L46129a;
  #L461314.  return @kind void;
  #L461316.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46131c.  goto L46129a;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4614c4.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4614c8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4614ce.  v0:= temp @kind object;
  #L4614d0.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L4614d4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4614da.  v0:= temp @kind object;
  #L4614dc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4614e0.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L4614e4.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4614ea.  v6:= temp @kind object;
  #L4614ec.  v1:= "The bufferClose returned a null ObservableSource" @kind object;
  #L4614f0.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4614f6.  v6:= temp @kind object;
  #L4614f8.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L4614fc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` @kind wide;
  #L461500.  v3:= 1L;
  #L461504.  v3:= v3 + v1 @kind long;
  #L461506.  v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.k` @type ^`long` := v3 @kind wide;
  #L46150a.  @monitorenter v5
  #L46150c.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L461510.  if v3 != 0 then goto L461518;
  #L461514.  @monitorexit v5
  #L461516.  return @kind void;
  #L461518.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L46151e.  v4:= temp @kind object;
  #L461520.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L461526.  @monitorexit v5
  #L461528.  v0:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b`;
  #L46152c.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;J)V` @kind direct;
  #L461532.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L461536.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46153c.  call `subscribe`(v6, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L461542.  return @kind void;
  #L461544.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461546.  @monitorexit v5
  #L461548.  throw v6;
  #L46154a.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46154c.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461552.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461556.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46155c.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L461562.  return @kind void;
  catch `java.lang.Throwable` @[L4614c4..L4614fc] goto L46154a;
  catch `java.lang.Throwable` @[L46150c..L461528] goto L461544;
  catch `java.lang.Throwable` @[L461546..L461548] goto L461544;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461210.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461214.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46121a.  v0:= temp;
  #L46121c.  if v0 == 0 then goto L461258;
  #L461220.  v0:= 1I;
  #L461222.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.j` @type ^`boolean` := v0 @kind boolean;
  #L461226.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46122a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L461230.  @monitorenter v1
  #L461232.  v0:= 0I;
  #L461234.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L461238.  @monitorexit v1
  #L46123a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L461240.  v0:= temp;
  #L461242.  if v0 == 0 then goto L461258;
  #L461246.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46124a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L461250.  goto L461258;
  #L461252.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461254.  @monitorexit v1
  #L461256.  throw v0;
  #L461258.  return @kind void;
  catch `java.lang.Throwable` @[L461234..L46123a] goto L461252;
  catch `java.lang.Throwable` @[L461254..L461256] goto L461252;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.e:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L461594.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L461598.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46159e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4615a2.  call temp:= `size`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L4615a8.  v2:= temp;
  #L4615aa.  if v2 != 0 then goto L4615c4;
  #L4615ae.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4615b2.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4615b8.  v2:= 1I;
  #L4615ba.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4615be.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4615c4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4610ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4610b0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4610b6.  v0:= temp @kind object;
  #L4610b8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4610bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4610c2.  v0:= temp;
  #L4610c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461330.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L461334.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46133a.  @monitorenter v3
  #L46133c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L461340.  if v0 != 0 then goto L461348;
  #L461344.  @monitorexit v3
  #L461346.  return @kind void;
  #L461348.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46134e.  v0:= temp @kind object;
  #L461350.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L461356.  v0:= temp @kind object;
  #L461358.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46135e.  v1:= temp;
  #L461360.  if v1 == 0 then goto L46137c;
  #L461364.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46136a.  v1:= temp @kind object;
  #L46136c.  v1:= (`java.util.Collection`) v1 @kind object;
  #L461370.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.i` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L461374.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L46137a.  goto L461358;
  #L46137c.  v0:= 0I;
  #L46137e.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v0 @kind object;
  #L461382.  @monitorexit v3
  #L461384.  v0:= 1I;
  #L461386.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46138a.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L461390.  return @kind void;
  #L461392.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461394.  @monitorexit v3
  #L461396.  throw v0;
  catch `java.lang.Throwable` @[L46133c..L461384] goto L461392;
  catch `java.lang.Throwable` @[L461394..L461396] goto L461392;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4613bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4613c0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4613c6.  v0:= temp;
  #L4613c8.  if v0 == 0 then goto L4613f4;
  #L4613cc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4613d0.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4613d6.  @monitorenter v1
  #L4613d8.  v2:= 0I;
  #L4613da.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` := v2 @kind object;
  #L4613de.  @monitorexit v1
  #L4613e0.  v2:= 1I;
  #L4613e2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.h` @type ^`boolean` := v2 @kind boolean;
  #L4613e6.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.c:()V` @kind virtual;
  #L4613ec.  goto L4613fa;
  #L4613ee.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4613f0.  @monitorexit v1
  #L4613f2.  throw v2;
  #L4613f4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4613fa.  return @kind void;
  catch `java.lang.Throwable` @[L4613da..L4613e0] goto L4613ee;
  catch `java.lang.Throwable` @[L4613f0..L4613f2] goto L4613ee;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461420.  @monitorenter v2
  #L461422.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.l` @type ^`java.util.Map` @kind object;
  #L461426.  if v0 != 0 then goto L46142e;
  #L46142a.  @monitorexit v2
  #L46142c.  return @kind void;
  #L46142e.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L461434.  v0:= temp @kind object;
  #L461436.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46143c.  v0:= temp @kind object;
  #L46143e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L461444.  v1:= temp;
  #L461446.  if v1 == 0 then goto L46145e;
  #L46144a.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L461450.  v1:= temp @kind object;
  #L461452.  v1:= (`java.util.Collection`) v1 @kind object;
  #L461456.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46145c.  goto L46143e;
  #L46145e.  @monitorexit v2
  #L461460.  return @kind void;
  #L461462.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461464.  @monitorexit v2
  #L461466.  throw v3;
  catch `java.lang.Throwable` @[L461422..L461466] goto L461462;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461484.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461488.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46148e.  v2:= temp;
  #L461490.  if v2 == 0 then goto L4614b2;
  #L461494.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a$a`;
  #L461498.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;)V` @kind direct;
  #L46149e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4614a2.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4614a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4614ac.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4614b2.  return @kind void;
}
