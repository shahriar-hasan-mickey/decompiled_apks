record `io.reactivex.internal.operators.observable.ObservablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface, `io.reactivex.internal.operators.observable.ObservablePublishClassic` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublish.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L46e924.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L46e92a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L46e92e.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L46e932.  v0.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L46e936.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.create:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L46e8ec.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46e8f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46e8f6.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$c`;
  #L46e8fa.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e900.  v2:= new `io.reactivex.internal.operators.observable.ObservablePublish`;
  #L46e904.  call `<init>`(v2, v1, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e90a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L46e910.  v3:= temp @kind object;
  #L46e912.  return v3 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservablePublish` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e948.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e94c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e952.  v0:= temp @kind object;
  #L46e954.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L46e958.  if v0 == 0 then goto L46e968;
  #L46e95c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L46e962.  v1:= temp;
  #L46e964.  if v1 == 0 then goto L46e98a;
  #L46e968.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$b`;
  #L46e96c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e970.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e976.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e97a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e980.  v0:= temp;
  #L46e982.  if v0 != 0 then goto L46e988;
  #L46e986.  goto L46e948;
  #L46e988.  v0:= v1 @kind object;
  #L46e98a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46e98e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46e994.  v1:= temp;
  #L46e996.  v2:= 1I;
  #L46e998.  v3:= 0I;
  #L46e99a.  if v1 != 0 then goto L46e9b0;
  #L46e99e.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46e9a2.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46e9a8.  v1:= temp;
  #L46e9aa.  if v1 == 0 then goto L46e9b0;
  #L46e9ae.  goto L46e9b2;
  #L46e9b0.  v2:= 0I;
  #L46e9b2.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L46e9b8.  if v2 == 0 then goto L46e9c6;
  #L46e9bc.  v5:= v4.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e9c0.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46e9c6.  return @kind void;
  #L46e9c8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46e9ca.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46e9d0.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L46e9d6.  v5:= temp @kind object;
  #L46e9d8.  throw v5;
  catch `java.lang.Throwable` @[L46e9b2..L46e9b8] goto L46e9c8;
}
procedure `io.reactivex.ObservableSource` `publishSource`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.publishSource:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e8bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e8c0.  return v0 @kind object;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e8d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e8d8.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublish` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L46e9f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e9fc.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46ea02.  return @kind void;
}
