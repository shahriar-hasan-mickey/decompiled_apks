record `io.reactivex.internal.operators.observable.ObservableTimer$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimer$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimer$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L476100.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L476106.  v0.`io.reactivex.internal.operators.observable.ObservableTimer$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L47610a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTimer$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L47617c.  call temp:= `trySet`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.trySet:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L476182.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimer$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L47611c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L476122.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4760d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4760de.  v0:= temp @kind object;
  #L4760e0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4760e4.  if v0 != v1 then goto L4760ec;
  #L4760e8.  v0:= 1I;
  #L4760ea.  goto L4760ee;
  #L4760ec.  v0:= 0I;
  #L4760ee.  return v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableTimer$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L476134.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimer$a;.isDisposed:()Z` @kind virtual;
  #L47613a.  v0:= temp;
  #L47613c.  if v0 != 0 then goto L47616a;
  #L476140.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476144.  v1:= 0L;
  #L476148.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47614e.  v1:= temp @kind object;
  #L476150.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L476156.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.INSTANCE` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L47615a.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L476160.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476164.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47616a.  return @kind void;
}
