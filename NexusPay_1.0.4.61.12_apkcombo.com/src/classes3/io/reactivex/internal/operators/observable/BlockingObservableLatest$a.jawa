record `io.reactivex.internal.operators.observable.BlockingObservableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class, `java.util.Iterator` @kind interface {
  `io.reactivex.Notification` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @AccessFlag ;
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45f920.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L45f926.  v0:= new `java.util.concurrent.Semaphore`;
  #L45f92a.  v1:= 0I;
  #L45f92c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L45f932.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L45f936.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45f93a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45f940.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L45f944.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45f984.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f988.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45f98e.  v2:= temp @kind object;
  #L45f990.  if v2 != 0 then goto L45f998;
  #L45f994.  v2:= 1I;
  #L45f996.  goto L45f99a;
  #L45f998.  v2:= 0I;
  #L45f99a.  if v2 == 0 then goto L45f9a8;
  #L45f99e.  v2:= v1.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L45f9a2.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L45f9a8.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f81c.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L45f820.  if v0 == 0 then goto L45f848;
  #L45f824.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L45f82a.  v0:= temp;
  #L45f82c.  if v0 != 0 then goto L45f832;
  #L45f830.  goto L45f848;
  #L45f832.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L45f836.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L45f83c.  v0:= temp @kind object;
  #L45f83e.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f844.  v0:= temp @kind object;
  #L45f846.  throw v0;
  #L45f848.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L45f84c.  if v0 != 0 then goto L45f8b4;
  #L45f850.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L45f856.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.c` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L45f85a.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L45f860.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45f864.  v1:= 0I;
  #L45f866.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L45f86c.  v0:= temp @kind object;
  #L45f86e.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L45f872.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L45f876.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L45f87c.  v1:= temp;
  #L45f87e.  if v1 != 0 then goto L45f884;
  #L45f882.  goto L45f8b4;
  #L45f884.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L45f88a.  v0:= temp @kind object;
  #L45f88c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f892.  v0:= temp @kind object;
  #L45f894.  throw v0;
  #L45f896.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L45f898.  call `dispose`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L45f89e.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L45f8a4.  v1:= temp @kind object;
  #L45f8a6.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L45f8aa.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L45f8b0.  v0:= temp @kind object;
  #L45f8b2.  throw v0;
  #L45f8b4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L45f8b8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L45f8be.  v0:= temp;
  #L45f8c0.  return v0;
  catch `java.lang.InterruptedException` @[L45f850..L45f860] goto L45f896;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f8e4.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.hasNext:()Z` @kind virtual;
  #L45f8ea.  v0:= temp;
  #L45f8ec.  if v0 == 0 then goto L45f904;
  #L45f8f0.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` @kind object;
  #L45f8f4.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L45f8fa.  v0:= temp @kind object;
  #L45f8fc.  v1:= 0I;
  #L45f8fe.  v2.`io.reactivex.internal.operators.observable.BlockingObservableLatest$a.b` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L45f902.  return v0 @kind object;
  #L45f904.  v0:= new `java.util.NoSuchElementException`;
  #L45f908.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L45f90e.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L45f958.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L45f96c.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45f972.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45f9bc.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L45f9c0.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L45f9c6.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.observable.BlockingObservableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45f9d8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L45f9dc.  v1:= "Read-only iterator." @kind object;
  #L45f9e0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L45f9e6.  throw v0;
}
