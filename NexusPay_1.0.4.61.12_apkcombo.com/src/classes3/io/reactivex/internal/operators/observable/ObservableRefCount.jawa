record `io.reactivex.internal.operators.observable.ObservableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.observables.ConnectableObservable` `io.reactivex.internal.operators.observable.ObservableRefCount.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRefCount.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRefCount.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableRefCount.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount$a` `io.reactivex.internal.operators.observable.ObservableRefCount.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.observables.ConnectableObservable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46f3e0.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46f3e4.  v2:= 1I;
  #L46f3e6.  v3:= 0L;
  #L46f3ea.  v6:= 0I;
  #L46f3ec.  v0:= v7 @kind object;
  #L46f3ee.  v1:= v8 @kind object;
  #L46f3f0.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L46f3f6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount` v0 @kind this, `io.reactivex.observables.ConnectableObservable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46f408.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L46f40e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` := v1 @kind object;
  #L46f412.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`int` := v2;
  #L46f416.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`long` := v3 @kind wide;
  #L46f41a.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L46f41e.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L46f422.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46f434.  @monitorenter v5
  #L46f436.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f43a.  if v0 == 0 then goto L46f4b2;
  #L46f43e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f442.  if v0 == v6 then goto L46f448;
  #L46f446.  goto L46f4b2;
  #L46f448.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L46f44c.  v2:= 1L;
  #L46f450.  v0:= v0 - v2 @kind long;
  #L46f452.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L46f456.  v2:= 0L;
  #L46f45a.  v4:= lcmp(v0, v2);
  #L46f45e.  if v4 != 0 then goto L46f4ae;
  #L46f462.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L46f466.  if v0 != 0 then goto L46f46c;
  #L46f46a.  goto L46f4ae;
  #L46f46c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L46f470.  v4:= lcmp(v0, v2);
  #L46f474.  if v4 != 0 then goto L46f482;
  #L46f478.  call `h`(v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.h:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f47e.  @monitorexit v5
  #L46f480.  return @kind void;
  #L46f482.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L46f486.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L46f48c.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L46f490.  @monitorexit v5
  #L46f492.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L46f496.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.c` @type ^`long` @kind wide;
  #L46f49a.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46f49e.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46f4a4.  v6:= temp @kind object;
  #L46f4a6.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46f4ac.  return @kind void;
  #L46f4ae.  @monitorexit v5
  #L46f4b0.  return @kind void;
  #L46f4b2.  @monitorexit v5
  #L46f4b4.  return @kind void;
  #L46f4b6.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46f4b8.  @monitorexit v5
  #L46f4ba.  throw v6;
  catch `java.lang.Throwable` @[L46f436..L46f492] goto L46f4b6;
  catch `java.lang.Throwable` @[L46f4ae..L46f4ba] goto L46f4b6;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableRefCount` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;

  #L46f4e0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f4e4.  if v0 == 0 then goto L46f4f4;
  #L46f4e8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46f4ee.  v0:= 0I;
  #L46f4f0.  v2.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L46f4f4.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46f508.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f50c.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L46f510.  if v1 == 0 then goto L46f520;
  #L46f514.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46f518.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46f51e.  goto L46f53e;
  #L46f520.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L46f524.  if v1 == 0 then goto L46f53e;
  #L46f528.  v0:= (`io.reactivex.internal.disposables.ResettableConnectable`) v0 @kind object;
  #L46f52c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46f532.  v3:= temp @kind object;
  #L46f534.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L46f538.  call `resetIf`(v0, v3) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46f53e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableRefCount` v8 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.g:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46f604.  @monitorenter v8
  #L46f606.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f60a.  v0:= instanceof @variable v0 @type ^`io.reactivex.internal.operators.observable.ObservablePublishClassic` @kind boolean;
  #L46f60e.  v1:= 0I;
  #L46f610.  v2:= 0L;
  #L46f614.  v4:= 1L;
  #L46f618.  if v0 == 0 then goto L46f650;
  #L46f61c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f620.  if v0 == 0 then goto L46f636;
  #L46f624.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f628.  if v0 != v9 then goto L46f636;
  #L46f62c.  v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` := v1 @kind object;
  #L46f630.  call `e`(v8, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f636.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L46f63a.  v0:= v0 - v4 @kind long;
  #L46f63c.  v9.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L46f640.  v4:= lcmp(v0, v2);
  #L46f644.  if v4 != 0 then goto L46f682;
  #L46f648.  call `f`(v8, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f64e.  goto L46f682;
  #L46f650.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f654.  if v0 == 0 then goto L46f682;
  #L46f658.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f65c.  if v0 != v9 then goto L46f682;
  #L46f660.  call `e`(v8, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.e:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f666.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L46f66a.  v6:= v6 - v4 @kind long;
  #L46f66c.  v9.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v6 @kind wide;
  #L46f670.  v0:= lcmp(v6, v2);
  #L46f674.  if v0 != 0 then goto L46f682;
  #L46f678.  v8.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` := v1 @kind object;
  #L46f67c.  call `f`(v8, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.f:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f682.  @monitorexit v8
  #L46f684.  return @kind void;
  #L46f686.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46f688.  @monitorexit v8
  #L46f68a.  throw v9;
  catch `java.lang.Throwable` @[L46f606..L46f68a] goto L46f686;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableRefCount` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.h:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46f6a8.  @monitorenter v5
  #L46f6aa.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L46f6ae.  v2:= 0L;
  #L46f6b2.  v4:= lcmp(v0, v2);
  #L46f6b6.  if v4 != 0 then goto L46f71c;
  #L46f6ba.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f6be.  if v6 != v0 then goto L46f71c;
  #L46f6c2.  v0:= 0I;
  #L46f6c4.  v5.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L46f6c8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46f6ce.  v0:= temp @kind object;
  #L46f6d0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46f6d4.  call temp:= `dispose`(v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46f6da.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f6de.  v1:= instanceof @variable v1 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L46f6e2.  if v1 == 0 then goto L46f6f6;
  #L46f6e6.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f6ea.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L46f6ee.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46f6f4.  goto L46f71c;
  #L46f6f6.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f6fa.  v1:= instanceof @variable v1 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L46f6fe.  if v1 == 0 then goto L46f71c;
  #L46f702.  if v0 != 0 then goto L46f70e;
  #L46f706.  v0:= 1I;
  #L46f708.  v6.`io.reactivex.internal.operators.observable.ObservableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L46f70c.  goto L46f71c;
  #L46f70e.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f712.  v6:= (`io.reactivex.internal.disposables.ResettableConnectable`) v6 @kind object;
  #L46f716.  call `resetIf`(v6, v0) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46f71c.  @monitorexit v5
  #L46f71e.  return @kind void;
  #L46f720.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46f722.  @monitorexit v5
  #L46f724.  throw v6;
  catch `java.lang.Throwable` @[L46f6aa..L46f724] goto L46f720;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableRefCount` v7 @kind this, `io.reactivex.Observer` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46f550.  @monitorenter v7
  #L46f552.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f556.  if v0 != 0 then goto L46f568;
  #L46f55a.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount$a`;
  #L46f55e.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRefCount;)V` @kind direct;
  #L46f564.  v7.`io.reactivex.internal.operators.observable.ObservableRefCount.f` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` := v0 @kind object;
  #L46f568.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` @kind wide;
  #L46f56c.  v3:= 0L;
  #L46f570.  v5:= lcmp(v1, v3);
  #L46f574.  if v5 != 0 then goto L46f58a;
  #L46f578.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f57c.  if v3 == 0 then goto L46f58a;
  #L46f580.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f584.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46f58a.  v3:= 1L;
  #L46f58e.  v1:= v1 + v3 @kind long;
  #L46f590.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L46f594.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L46f598.  v4:= 1I;
  #L46f59a.  if v3 != 0 then goto L46f5b2;
  #L46f59e.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.b` @type ^`int`;
  #L46f5a2.  v5:= (`long`) v3 @kind i2l;
  #L46f5a4.  v3:= lcmp(v1, v5);
  #L46f5a8.  if v3 != 0 then goto L46f5b2;
  #L46f5ac.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L46f5b0.  goto L46f5b4;
  #L46f5b2.  v4:= 0I;
  #L46f5b4.  @monitorexit v7
  #L46f5b6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f5ba.  v2:= new `io.reactivex.internal.operators.observable.ObservableRefCount$b`;
  #L46f5be.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind direct;
  #L46f5c4.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46f5ca.  if v4 == 0 then goto L46f5d8;
  #L46f5ce.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableRefCount.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L46f5d2.  call `connect`(v8, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L46f5d8.  return @kind void;
  #L46f5da.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46f5dc.  @monitorexit v7
  #L46f5de.  throw v8;
  catch `java.lang.Throwable` @[L46f552..L46f5b6] goto L46f5da;
  catch `java.lang.Throwable` @[L46f5dc..L46f5de] goto L46f5da;
}
