record `io.reactivex.internal.operators.observable.ObservableFromIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4698bc.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L4698c2.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4698c6.  v0.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4698ca.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46990c.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L469912.  v0:= temp;
  #L469914.  if v0 == 0 then goto L46991a;
  #L469918.  return @kind void;
  #L46991a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L46991e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L469924.  v0:= temp @kind object;
  #L469926.  v1:= "The iterator returned a null value" @kind object;
  #L46992a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L469930.  v0:= temp @kind object;
  #L469932.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469936.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46993c.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L469942.  v0:= temp;
  #L469944.  if v0 == 0 then goto L46994a;
  #L469948.  return @kind void;
  #L46994a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L46994e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L469954.  v0:= temp;
  #L469956.  if v0 != 0 then goto L46990c;
  #L46995a.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @kind virtual;
  #L469960.  v0:= temp;
  #L469962.  if v0 != 0 then goto L469970;
  #L469966.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46996a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L469970.  return @kind void;
  #L469972.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L469974.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46997a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46997e.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L469984.  return @kind void;
  #L469986.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L469988.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46998e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469992.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L469998.  return @kind void;
  catch `java.lang.Throwable` @[L46991a..L469932] goto L469986;
  catch `java.lang.Throwable` @[L46994a..L469956] goto L469972;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4698dc.  v0:= 1I;
  #L4698de.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4698e2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4698f4.  v0:= 1I;
  #L4698f6.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4698fa.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46980c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L469810.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469824.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L469828.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L469860.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` @kind boolean;
  #L469864.  v1:= 0I;
  #L469866.  if v0 == 0 then goto L46986c;
  #L46986a.  return v1 @kind object;
  #L46986c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` @kind boolean;
  #L469870.  v2:= 1I;
  #L469872.  if v0 == 0 then goto L46988c;
  #L469876.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L46987a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L469880.  v0:= temp;
  #L469882.  if v0 != 0 then goto L469890;
  #L469886.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.e` @type ^`boolean` := v2 @kind boolean;
  #L46988a.  return v1 @kind object;
  #L46988c.  v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L469890.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L469894.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46989a.  v0:= temp @kind object;
  #L46989c.  v1:= "The iterator returned a null value" @kind object;
  #L4698a0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4698a6.  v0:= temp @kind object;
  #L4698a8.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46983c.  v0:= 1I;
  #L46983e.  v2:= v2 ^& v0 @kind int;
  #L469840.  if v2 == 0 then goto L46984a;
  #L469844.  v1.`io.reactivex.internal.operators.observable.ObservableFromIterable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L469848.  return v0;
  #L46984a.  v2:= 0I;
  #L46984c.  return v2;
}
