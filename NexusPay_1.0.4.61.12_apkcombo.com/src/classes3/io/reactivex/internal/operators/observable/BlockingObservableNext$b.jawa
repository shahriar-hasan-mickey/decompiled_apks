record `io.reactivex.internal.operators.observable.BlockingObservableNext$b` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `java.util.concurrent.BlockingQueue` `io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L45fe10.  call `<init>`(v2) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L45fe16.  v0:= new `java.util.concurrent.ArrayBlockingQueue`;
  #L45fe1a.  v1:= 1I;
  #L45fe1c.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ArrayBlockingQueue;.<init>:(I)V` @kind direct;
  #L45fe22.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` := v0 @kind object;
  #L45fe26.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L45fe2a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L45fe30.  v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L45fe34.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this, `io.reactivex.Notification` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45fe74.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L45fe78.  v1:= 0I;
  #L45fe7a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L45fe80.  v0:= temp;
  #L45fe82.  v1:= 1I;
  #L45fe84.  if v0 == v1 then goto L45fe94;
  #L45fe88.  call temp:= `isOnNext`(v3) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L45fe8e.  v0:= temp;
  #L45fe90.  if v0 != 0 then goto L45fec8;
  #L45fe94.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L45fe98.  call temp:= `offer`(v0, v3) @signature `Ljava/util/concurrent/BlockingQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45fe9e.  v0:= temp;
  #L45fea0.  if v0 != 0 then goto L45fec8;
  #L45fea4.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L45fea8.  call temp:= `poll`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45feae.  v0:= temp @kind object;
  #L45feb0.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L45feb4.  if v0 == 0 then goto L45fe94;
  #L45feb8.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L45febe.  v1:= temp;
  #L45fec0.  if v1 != 0 then goto L45fe94;
  #L45fec4.  v3:= v0 @kind object;
  #L45fec6.  goto L45fe94;
  #L45fec8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45fef8.  v0:= v2.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L45fefc.  v1:= 1I;
  #L45fefe.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L45ff04.  return @kind void;
}
procedure `io.reactivex.Notification` `c`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.c:()Lio/reactivex/Notification;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45fde0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.b:()V` @kind virtual;
  #L45fde6.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L45fdec.  v0:= v1.`io.reactivex.internal.operators.observable.BlockingObservableNext$b.b` @type ^`java.util.concurrent.BlockingQueue` @kind object;
  #L45fdf0.  call temp:= `take`(v0) @signature `Ljava/util/concurrent/BlockingQueue;.take:()Ljava/lang/Object;` @kind interface;
  #L45fdf6.  v0:= temp @kind object;
  #L45fdf8.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L45fdfc.  return v0 @kind object;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L45fe48.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L45fe5c.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45fe62.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.BlockingObservableNext$b` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L45fedc.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L45fee0.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/BlockingObservableNext$b;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L45fee6.  return @kind void;
}
