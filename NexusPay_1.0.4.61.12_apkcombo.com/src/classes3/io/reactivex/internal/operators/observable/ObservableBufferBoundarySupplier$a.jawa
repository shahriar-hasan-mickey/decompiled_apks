record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L461704.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L46170a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` := v1 @kind object;
  #L46170e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461720.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L461724.  if v0 == 0 then goto L46172a;
  #L461728.  return @kind void;
  #L46172a.  v0:= 1I;
  #L46172c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L461730.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L461734.  call `c`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L46173a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46174c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L461750.  if v0 == 0 then goto L46175c;
  #L461754.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46175a.  return @kind void;
  #L46175c.  v0:= 1I;
  #L46175e.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L461762.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L461766.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46176c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L461780.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L461784.  if v1 == 0 then goto L46178a;
  #L461788.  return @kind void;
  #L46178a.  v1:= 1I;
  #L46178c.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L461790.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L461796.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind object;
  #L46179a.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L4617a0.  return @kind void;
}
