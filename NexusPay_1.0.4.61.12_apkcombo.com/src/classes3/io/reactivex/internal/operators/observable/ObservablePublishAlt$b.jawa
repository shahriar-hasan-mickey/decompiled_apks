record `io.reactivex.internal.operators.observable.ObservablePublishAlt$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservablePublishAlt$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublishAlt$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservablePublishAlt$b.d` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46e2f0.  v0:= 0I;
  #L46e2f2.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[v0];
  #L46e2f6.  `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] := v1 @kind object;
  #L46e2fa.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[v0];
  #L46e2fe.  `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] := v0 @kind object;
  #L46e302.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v1 @kind this, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46e314.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46e31a.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L46e31e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L46e324.  v1.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L46e328.  v1.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L46e32c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46e330.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46e336.  v1.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L46e33a.  v2:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e33e.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46e344.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v4 @kind this, `io.reactivex.internal.operators.observable.ObservablePublishAlt$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e27c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e282.  v0:= temp @kind object;
  #L46e284.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[]) v0 @kind object;
  #L46e288.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e28c.  v2:= 0I;
  #L46e28e.  if v0 != v1 then goto L46e294;
  #L46e292.  return v2;
  #L46e294.  v1:= length @variable v0;
  #L46e296.  v3:= v1 + 1;
  #L46e29a.  v3:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[v3];
  #L46e29e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46e2a4.  v3[v1]:= v5 @kind object;
  #L46e2a8.  call temp:= `compareAndSet`(v4, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e2ae.  v0:= temp;
  #L46e2b0.  if v0 == 0 then goto L46e27c;
  #L46e2b4.  v5:= 1I;
  #L46e2b6.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v6 @kind this, `io.reactivex.internal.operators.observable.ObservablePublishAlt$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46e480.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e486.  v0:= temp @kind object;
  #L46e488.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[]) v0 @kind object;
  #L46e48c.  v1:= length @variable v0;
  #L46e48e.  if v1 != 0 then goto L46e494;
  #L46e492.  return @kind void;
  #L46e494.  v2:= -1I;
  #L46e496.  v3:= 0I;
  #L46e498.  v4:= 0I;
  #L46e49a.  if v4 >= v1 then goto L46e4b0;
  #L46e49e.  v5:= v0[v4] @kind object;
  #L46e4a2.  if v5 != v7 then goto L46e4aa;
  #L46e4a6.  v2:= v4;
  #L46e4a8.  goto L46e4b0;
  #L46e4aa.  v4:= v4 + 1;
  #L46e4ae.  goto L46e49a;
  #L46e4b0.  if v2 >= 0 then goto L46e4b6;
  #L46e4b4.  return @kind void;
  #L46e4b6.  v4:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e4ba.  v5:= 1I;
  #L46e4bc.  if v1 == v5 then goto L46e4dc;
  #L46e4c0.  v4:= v1 + -1;
  #L46e4c4.  v4:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[v4];
  #L46e4c8.  call `arraycopy`(v0, v3, v4, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46e4ce.  v3:= v2 + 1;
  #L46e4d2.  v1:= v1 - v2 @kind int;
  #L46e4d4.  v1:= v1 - v5 @kind int;
  #L46e4d6.  call `arraycopy`(v0, v3, v4, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46e4dc.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e4e2.  v0:= temp;
  #L46e4e4.  if v0 == 0 then goto L46e480;
  #L46e4e8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46e358.  v0:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e35c.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46e362.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e366.  v1:= 0I;
  #L46e368.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e36e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e372.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46e378.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46e2c8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e2ce.  v0:= temp @kind object;
  #L46e2d0.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e2d4.  if v0 != v1 then goto L46e2dc;
  #L46e2d8.  v0:= 1I;
  #L46e2da.  goto L46e2de;
  #L46e2dc.  v0:= 0I;
  #L46e2de.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e38c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e390.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L46e394.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46e39a.  v0:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e39e.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46e3a4.  v0:= temp @kind object;
  #L46e3a6.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[]) v0 @kind object;
  #L46e3aa.  v1:= length @variable v0;
  #L46e3ac.  v2:= 0I;
  #L46e3ae.  if v2 >= v1 then goto L46e3c6;
  #L46e3b2.  v3:= v0[v2] @kind object;
  #L46e3b6.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e3ba.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46e3c0.  v2:= v2 + 1;
  #L46e3c4.  goto L46e3ae;
  #L46e3c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e3d8.  v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L46e3dc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e3e0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L46e3e4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46e3ea.  v0:= `@@io.reactivex.internal.operators.observable.ObservablePublishAlt$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[] @kind object;
  #L46e3ee.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46e3f4.  v0:= temp @kind object;
  #L46e3f6.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[]) v0 @kind object;
  #L46e3fa.  v1:= length @variable v0;
  #L46e3fc.  v2:= 0I;
  #L46e3fe.  if v2 >= v1 then goto L46e416;
  #L46e402.  v3:= v0[v2] @kind object;
  #L46e406.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e40a.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46e410.  v2:= v2 + 1;
  #L46e414.  goto L46e3fe;
  #L46e416.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e428.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e42e.  v0:= temp @kind object;
  #L46e430.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$a`[]) v0 @kind object;
  #L46e434.  v1:= length @variable v0;
  #L46e436.  v2:= 0I;
  #L46e438.  if v2 >= v1 then goto L46e450;
  #L46e43c.  v3:= v0[v2] @kind object;
  #L46e440.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e444.  call `onNext`(v3, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46e44a.  v2:= v2 + 1;
  #L46e44e.  goto L46e438;
  #L46e450.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublishAlt$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e464.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e468.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46e46e.  return @kind void;
}
