record `io.reactivex.internal.operators.observable.ObservablePublishSelector$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.subjects.PublishSubject` `io.reactivex.internal.operators.observable.ObservablePublishSelector$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublishSelector$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$a` v0 @kind this, `io.reactivex.subjects.PublishSubject` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$a;.<init>:(Lio/reactivex/subjects/PublishSubject;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46e6a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46e6aa.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.a` @type ^`io.reactivex.subjects.PublishSubject` := v1 @kind object;
  #L46e6ae.  v0.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L46e6b2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e6c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.a` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L46e6c8.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @kind virtual;
  #L46e6ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e6e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.a` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L46e6e4.  call `onError`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46e6ea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e6fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.a` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L46e700.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L46e706.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublishSelector$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishSelector$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e718.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishSelector$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e71c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46e722.  return @kind void;
}
