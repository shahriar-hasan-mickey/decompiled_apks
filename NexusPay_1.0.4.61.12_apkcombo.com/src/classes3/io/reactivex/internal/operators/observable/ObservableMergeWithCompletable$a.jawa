record `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a$a` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46cb6c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46cb72.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46cb76.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46cb7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46cb80.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46cb84.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a$a`;
  #L46cb88.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;)V` @kind direct;
  #L46cb8e.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a$a` := v1 @kind object;
  #L46cb92.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46cb96.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L46cb9c.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46cba0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46cc74.  v0:= 1I;
  #L46cc76.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L46cc7a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.e` @type ^`boolean` @kind boolean;
  #L46cc7e.  if v0 == 0 then goto L46cc90;
  #L46cc82.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cc86.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cc8a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46cc90.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46cca4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46cca8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46ccae.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46ccb2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46ccb6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46ccbc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cbb4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46cbb8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46cbbe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a$a` @kind object;
  #L46cbc2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46cbc8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cb40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46cb44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46cb4a.  v0:= temp @kind object;
  #L46cb4c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46cb50.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46cb56.  v0:= temp;
  #L46cb58.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46cbdc.  v0:= 1I;
  #L46cbde.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L46cbe2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.f` @type ^`boolean` @kind boolean;
  #L46cbe6.  if v0 == 0 then goto L46cbf8;
  #L46cbea.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cbee.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cbf2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46cbf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46cc0c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a$a` @kind object;
  #L46cc10.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46cc16.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cc1a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cc1e.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46cc24.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46cc38.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cc3c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cc40.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46cc46.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cc58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46cc5c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46cc62.  return @kind void;
}
