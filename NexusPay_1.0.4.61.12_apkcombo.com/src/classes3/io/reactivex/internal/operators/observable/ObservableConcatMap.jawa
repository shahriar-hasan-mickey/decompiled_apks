record `io.reactivex.internal.operators.observable.ObservableConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMap.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L464838.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L46483e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L464842.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.c` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L464846.  v1:= 8I;
  #L46484a.  call temp:= `max`(v1, v3) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L464850.  v1:= temp;
  #L464852.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap.b` @type ^`int` := v1;
  #L464856.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableConcatMap` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L464868.  v0:= v6.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46486c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L464870.  call temp:= `tryScalarXMapSubscribe`(v0, v7, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap;.tryScalarXMapSubscribe:(Lio/reactivex/ObservableSource;Lio/reactivex/Observer;Lio/reactivex/functions/Function;)Z` @kind static;
  #L464876.  v0:= temp;
  #L464878.  if v0 == 0 then goto L46487e;
  #L46487c.  return @kind void;
  #L46487e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464882.  v1:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464886.  if v0 != v1 then goto L4648b2;
  #L46488a.  v0:= new `io.reactivex.observers.SerializedObserver`;
  #L46488e.  call `<init>`(v0, v7) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L464894.  v7:= v6.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L464898.  v1:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$b`;
  #L46489c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4648a0.  v3:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.b` @type ^`int`;
  #L4648a4.  call `<init>`(v1, v0, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L4648aa.  call `subscribe`(v7, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4648b0.  goto L4648e0;
  #L4648b2.  v0:= v6.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4648b6.  v1:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$a`;
  #L4648ba.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4648be.  v3:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.b` @type ^`int`;
  #L4648c2.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableConcatMap.c` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4648c6.  v5:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4648ca.  if v4 != v5 then goto L4648d2;
  #L4648ce.  v4:= 1I;
  #L4648d0.  goto L4648d4;
  #L4648d2.  v4:= 0I;
  #L4648d4.  call `<init>`(v1, v7, v2, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L4648da.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4648e0.  return @kind void;
}
