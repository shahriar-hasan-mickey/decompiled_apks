record `io.reactivex.internal.operators.observable.ObservableScanSeed$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L471f40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L471f46.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L471f4a.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L471f4e.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L471f52.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471f64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L471f68.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L471f6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471f20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L471f24.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L471f2a.  v0:= temp;
  #L471f2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471f80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L471f84.  if v0 == 0 then goto L471f8a;
  #L471f88.  return @kind void;
  #L471f8a.  v0:= 1I;
  #L471f8c.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L471f90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L471f94.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L471f9a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471fac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L471fb0.  if v0 == 0 then goto L471fbc;
  #L471fb4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L471fba.  return @kind void;
  #L471fbc.  v0:= 1I;
  #L471fbe.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` := v0 @kind boolean;
  #L471fc2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L471fc6.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L471fcc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471fe0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.e` @type ^`boolean` @kind boolean;
  #L471fe4.  if v0 == 0 then goto L471fea;
  #L471fe8.  return @kind void;
  #L471fea.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L471fee.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L471ff2.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L471ff8.  v3:= temp @kind object;
  #L471ffa.  v0:= "The accumulator returned a null value" @kind object;
  #L471ffe.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L472004.  v3:= temp @kind object;
  #L472006.  v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L47200a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47200e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L472014.  return @kind void;
  #L472016.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L472018.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47201e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472022.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472028.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47202e.  return @kind void;
  catch `java.lang.Throwable` @[L471fee..L472006] goto L472016;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableScanSeed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47204c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472050.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L472056.  v0:= temp;
  #L472058.  if v0 == 0 then goto L472078;
  #L47205c.  v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L472060.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472064.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47206a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47206e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableScanSeed$a.c` @type ^`java.lang.Object` @kind object;
  #L472072.  call `onNext`(v2, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L472078.  return @kind void;
}
