record `io.reactivex.internal.operators.observable.ObservableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableUsing$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47671c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L476722.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L476726.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L47672a.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L47672e.  v0.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L476732.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L476768.  v0:= 0I;
  #L47676a.  v1:= 1I;
  #L47676c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L476772.  v0:= temp;
  #L476774.  if v0 == 0 then goto L476796;
  #L476778.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47677c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L476780.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L476786.  goto L476796;
  #L476788.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47678a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L476790.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L476796.  return @kind void;
  catch `java.lang.Throwable` @[L476778..L476786] goto L476788;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476744.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L47674a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47674e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476754.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476700.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L476706.  v0:= temp;
  #L476708.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4767b4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` @kind boolean;
  #L4767b8.  if v0 == 0 then goto L476806;
  #L4767bc.  v0:= 0I;
  #L4767be.  v1:= 1I;
  #L4767c0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4767c6.  v0:= temp;
  #L4767c8.  if v0 == 0 then goto L4767f0;
  #L4767cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4767d0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L4767d4.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4767da.  goto L4767f0;
  #L4767dc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4767de.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4767e4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4767e8.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4767ee.  return @kind void;
  #L4767f0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4767f4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4767fa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4767fe.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L476804.  goto L476820;
  #L476806.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47680a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L476810.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L476814.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47681a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L476820.  return @kind void;
  catch `java.lang.Throwable` @[L4767cc..L4767da] goto L4767dc;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L476840.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.d` @type ^`boolean` @kind boolean;
  #L476844.  if v0 == 0 then goto L4768a0;
  #L476848.  v0:= 0I;
  #L47684a.  v1:= 1I;
  #L47684c.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L476852.  v2:= temp;
  #L476854.  if v2 == 0 then goto L47688a;
  #L476858.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47685c.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L476860.  call `accept`(v2, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L476866.  goto L47688a;
  #L476868.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47686a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L476870.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L476874.  v4:= 2I;
  #L476876.  v4:= new `java.lang.Throwable`[v4];
  #L47687a.  v4[v0]:= v6 @kind object;
  #L47687e.  v4[v1]:= v2 @kind object;
  #L476882.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L476888.  v6:= v3 @kind object;
  #L47688a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47688e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L476894.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L476898.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47689e.  goto L4768ba;
  #L4768a0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4768a4.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4768aa.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4768ae.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4768b4.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.a:()V` @kind virtual;
  #L4768ba.  return @kind void;
  catch `java.lang.Throwable` @[L476858..L476866] goto L476868;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4768d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4768dc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4768e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4768f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4768f8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4768fe.  v0:= temp;
  #L476900.  if v0 == 0 then goto L476912;
  #L476904.  v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L476908.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableUsing$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47690c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L476912.  return @kind void;
}
