record `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `io.reactivex.functions.Predicate` v4 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v5 @kind object, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.<init>:(Lio/reactivex/Observer;JLio/reactivex/functions/Predicate;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L470e60.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L470e66.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L470e6a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v5 @kind object;
  #L470e6e.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.ObservableSource` := v6 @kind object;
  #L470e72.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.functions.Predicate` := v4 @kind object;
  #L470e76.  v0.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L470e7a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L470f8c.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L470f92.  v0:= temp;
  #L470f94.  if v0 != 0 then goto L470fc4;
  #L470f98.  v0:= 1I;
  #L470f9a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L470f9e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L470fa4.  v1:= temp;
  #L470fa6.  if v1 == 0 then goto L470fac;
  #L470faa.  return @kind void;
  #L470fac.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L470fb0.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L470fb6.  v0:= -v0 @kind int;
  #L470fb8.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L470fbe.  v0:= temp;
  #L470fc0.  if v0 != 0 then goto L470f9a;
  #L470fc4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470e8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470e90.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L470e96.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L470ea8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` @kind wide;
  #L470eac.  v2:= 9223372036854775807L;
  #L470eb6.  v4:= lcmp(v0, v2);
  #L470eba.  if v4 == 0 then goto L470eca;
  #L470ebe.  v2:= 1L;
  #L470ec2.  v2:= v0 - v2 @kind long;
  #L470ec6.  v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.e` @type ^`long` := v2 @kind wide;
  #L470eca.  v2:= 0L;
  #L470ece.  v4:= lcmp(v0, v2);
  #L470ed2.  if v4 != 0 then goto L470ee2;
  #L470ed6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470eda.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L470ee0.  goto L470f04;
  #L470ee2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.d` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L470ee6.  call temp:= `test`(v0, v6) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L470eec.  v0:= temp;
  #L470eee.  if v0 != 0 then goto L470efe;
  #L470ef2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470ef6.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L470efc.  return @kind void;
  #L470efe.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.a:()V` @kind virtual;
  #L470f04.  return @kind void;
  #L470f06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470f08.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L470f0e.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470f12.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L470f16.  v3:= 2I;
  #L470f18.  v3:= new `java.lang.Throwable`[v3];
  #L470f1c.  v4:= 0I;
  #L470f1e.  v3[v4]:= v6 @kind object;
  #L470f22.  v6:= 1I;
  #L470f24.  v3[v6]:= v0 @kind object;
  #L470f28.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L470f2e.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L470f34.  return @kind void;
  catch `java.lang.Throwable` @[L470ee2..L470eee] goto L470f06;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470f54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470f58.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L470f5e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryPredicate$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470f70.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L470f74.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L470f7a.  return @kind void;
}
