record `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$a` `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableConcatMap$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L463a4c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L463a52.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L463a56.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a` := v2 @kind object;
  #L463a5a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.a:()V` @AccessFlag  {
    temp;

  #L463a6c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L463a72.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463a84.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a` @kind object;
  #L463a88.  v1:= 0I;
  #L463a8a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v1 @kind boolean;
  #L463a8e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463a94.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463aa8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a` @kind object;
  #L463aac.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463ab0.  call temp:= `addThrowable`(v1, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463ab6.  v1:= temp;
  #L463ab8.  if v1 == 0 then goto L463adc;
  #L463abc.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` @kind boolean;
  #L463ac0.  if v3 != 0 then goto L463ace;
  #L463ac4.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463ac8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463ace.  v3:= 0I;
  #L463ad0.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v3 @kind boolean;
  #L463ad4.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463ada.  goto L463ae2;
  #L463adc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L463ae2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463af4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L463af8.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L463afe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L463b10.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L463b16.  return @kind void;
}
