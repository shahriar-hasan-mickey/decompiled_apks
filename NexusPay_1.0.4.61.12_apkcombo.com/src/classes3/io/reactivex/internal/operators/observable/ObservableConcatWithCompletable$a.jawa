record `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46491c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L464922.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L464926.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.b` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L46492a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L46493c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L464942.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4648f4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4648fa.  v0:= temp @kind object;
  #L4648fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L464900.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464906.  v0:= temp;
  #L464908.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L464954.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.c` @type ^`boolean` @kind boolean;
  #L464958.  if v0 == 0 then goto L464968;
  #L46495c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464960.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L464966.  goto L464984;
  #L464968.  v0:= 1I;
  #L46496a.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L46496e.  v0:= 0I;
  #L464970.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464976.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.b` @type ^`io.reactivex.CompletableSource` @kind object;
  #L46497a.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.b` @type ^`io.reactivex.CompletableSource` := v0 @kind object;
  #L46497e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L464984.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464998.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46499c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4649a2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4649b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4649b8.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4649be.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4649d0.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4649d6.  v1:= temp;
  #L4649d8.  if v1 == 0 then goto L4649ee;
  #L4649dc.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.c` @type ^`boolean` @kind boolean;
  #L4649e0.  if v1 != 0 then goto L4649ee;
  #L4649e4.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4649e8.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4649ee.  return @kind void;
}
