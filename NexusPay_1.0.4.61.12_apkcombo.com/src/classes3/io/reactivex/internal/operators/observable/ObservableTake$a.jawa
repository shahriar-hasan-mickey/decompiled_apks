record `io.reactivex.internal.operators.observable.ObservableTake$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTake$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTake$a.b` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTake$a.c` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableTake$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTake$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.<init>:(Lio/reactivex/Observer;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L473f74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L473f7a.  v0.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L473f7e.  v0.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` := v2 @kind wide;
  #L473f82.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473f94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473f98.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473f9e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473f54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473f58.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L473f5e.  v0:= temp;
  #L473f60.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473fb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L473fb4.  if v0 != 0 then goto L473fd2;
  #L473fb8.  v0:= 1I;
  #L473fba.  v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L473fbe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473fc2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473fc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L473fcc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L473fd2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTake$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473fe4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L473fe8.  if v0 == 0 then goto L473ff4;
  #L473fec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L473ff2.  return @kind void;
  #L473ff4.  v0:= 1I;
  #L473ff6.  v1.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L473ffa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473ffe.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474004.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474008.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47400e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTake$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L474020.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` @kind boolean;
  #L474024.  if v0 != 0 then goto L474066;
  #L474028.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` @kind wide;
  #L47402c.  v2:= 1L;
  #L474030.  v2:= v0 - v2 @kind long;
  #L474034.  v7.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` := v2 @kind wide;
  #L474038.  v4:= 0L;
  #L47403c.  v6:= lcmp(v0, v4);
  #L474040.  if v6 <= 0 then goto L474066;
  #L474044.  v0:= lcmp(v2, v4);
  #L474048.  if v0 != 0 then goto L474050;
  #L47404c.  v0:= 1I;
  #L47404e.  goto L474052;
  #L474050.  v0:= 0I;
  #L474052.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474056.  call `onNext`(v1, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47405c.  if v0 == 0 then goto L474066;
  #L474060.  call `onComplete`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onComplete:()V` @kind virtual;
  #L474066.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTake$a` v5 @kind this, `io.reactivex.disposables.Disposable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTake$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L474078.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47407c.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L474082.  v0:= temp;
  #L474084.  if v0 == 0 then goto L4740be;
  #L474088.  v5.`io.reactivex.internal.operators.observable.ObservableTake$a.c` @type ^`io.reactivex.disposables.Disposable` := v6 @kind object;
  #L47408c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.d` @type ^`long` @kind wide;
  #L474090.  v2:= 0L;
  #L474094.  v4:= lcmp(v0, v2);
  #L474098.  if v4 != 0 then goto L4740b4;
  #L47409c.  v0:= 1I;
  #L47409e.  v5.`io.reactivex.internal.operators.observable.ObservableTake$a.b` @type ^`boolean` := v0 @kind boolean;
  #L4740a2.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4740a8.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4740ac.  call `complete`(v6) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.complete:(Lio/reactivex/Observer;)V` @kind static;
  #L4740b2.  goto L4740be;
  #L4740b4.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTake$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4740b8.  call `onSubscribe`(v6, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4740be.  return @kind void;
}
