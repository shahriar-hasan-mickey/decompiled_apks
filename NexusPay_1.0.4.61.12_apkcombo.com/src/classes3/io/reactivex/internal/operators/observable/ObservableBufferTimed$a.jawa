record `io.reactivex.internal.operators.observable.ObservableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L461f94.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L461f98.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L461f9e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L461fa4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L461fa8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` := v4 @kind wide;
  #L461fac.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L461fb0.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int` := v7;
  #L461fb4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` := v8 @kind boolean;
  #L461fb8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L461fbc.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L461fec.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L461ff2.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L461fd0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L461fd4.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L461fda.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462004.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L462008.  if v0 != 0 then goto L462038;
  #L46200c.  v0:= 1I;
  #L46200e.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L462012.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462016.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46201c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462020.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462026.  @monitorenter v1
  #L462028.  v0:= 0I;
  #L46202a.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L46202e.  @monitorexit v1
  #L462030.  goto L462038;
  #L462032.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462034.  @monitorexit v1
  #L462036.  throw v0;
  #L462038.  return @kind void;
  catch `java.lang.Throwable` @[L46202a..L462036] goto L462032;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461f7c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461f80.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L462058.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46205c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462062.  @monitorenter v3
  #L462064.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L462068.  v1:= 0I;
  #L46206a.  v3.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v1 @kind object;
  #L46206e.  @monitorexit v3
  #L462070.  if v0 == 0 then goto L4620a0;
  #L462074.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L462078.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46207e.  v0:= 1I;
  #L462080.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L462084.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L46208a.  v0:= temp;
  #L46208c.  if v0 == 0 then goto L4620a0;
  #L462090.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L462094.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462098.  v2:= 0I;
  #L46209a.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4620a0.  return @kind void;
  #L4620a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4620a4.  @monitorexit v3
  #L4620a6.  throw v0;
  catch `java.lang.Throwable` @[L462064..L462070] goto L4620a2;
  catch `java.lang.Throwable` @[L4620a4..L4620a6] goto L4620a2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4620cc.  @monitorenter v1
  #L4620ce.  v0:= 0I;
  #L4620d0.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4620d4.  @monitorexit v1
  #L4620d6.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4620da.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4620e0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4620e4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4620ea.  return @kind void;
  #L4620ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4620ee.  @monitorexit v1
  #L4620f0.  throw v2;
  catch `java.lang.Throwable` @[L4620d0..L4620d6] goto L4620ec;
  catch `java.lang.Throwable` @[L4620ee..L4620f0] goto L4620ec;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L462118.  @monitorenter v7
  #L46211a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L46211e.  if v0 != 0 then goto L462126;
  #L462122.  @monitorexit v7
  #L462124.  return @kind void;
  #L462126.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L46212c.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L462132.  v8:= temp;
  #L462134.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.e` @type ^`int`;
  #L462138.  if v8 >= v1 then goto L462140;
  #L46213c.  @monitorexit v7
  #L46213e.  return @kind void;
  #L462140.  v8:= 0I;
  #L462142.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v8 @kind object;
  #L462146.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L46214a.  v3:= 1L;
  #L46214e.  v1:= v1 + v3 @kind long;
  #L462150.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` := v1 @kind wide;
  #L462154.  @monitorexit v7
  #L462156.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L46215a.  if v8 == 0 then goto L462168;
  #L46215e.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462162.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462168.  v8:= 0I;
  #L46216a.  call `fastPathOrderedEmit`(v7, v0, v8, v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L462170.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L462174.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L46217a.  v8:= temp @kind object;
  #L46217c.  v0:= "The buffer supplied is null" @kind object;
  #L462180.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L462186.  v8:= temp @kind object;
  #L462188.  v8:= (`java.util.Collection`) v8 @kind object;
  #L46218c.  @monitorenter v7
  #L46218e.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v8 @kind object;
  #L462192.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L462196.  v0:= v0 + v3 @kind long;
  #L462198.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` := v0 @kind wide;
  #L46219c.  @monitorexit v7
  #L46219e.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.f` @type ^`boolean` @kind boolean;
  #L4621a2.  if v8 == 0 then goto L4621c2;
  #L4621a6.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4621aa.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L4621ae.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4621b2.  v1:= v7 @kind object;
  #L4621b4.  v2:= v4 @kind wide;
  #L4621b6.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4621bc.  v8:= temp @kind object;
  #L4621be.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L4621c2.  return @kind void;
  #L4621c4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4621c6.  @monitorexit v7
  #L4621c8.  throw v8;
  #L4621ca.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4621cc.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4621d2.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4621d6.  call `onError`(v0, v8) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4621dc.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4621e2.  return @kind void;
  #L4621e4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4621e6.  @monitorexit v7
  #L4621e8.  throw v8;
  catch `java.lang.Throwable` @[L46211a..L462156] goto L4621e4;
  catch `java.lang.Throwable` @[L462170..L46218c] goto L4621ca;
  catch `java.lang.Throwable` @[L46218e..L46219e] goto L4621c4;
  catch `java.lang.Throwable` @[L4621c6..L4621c8] goto L4621c4;
  catch `java.lang.Throwable` @[L4621e6..L4621e8] goto L4621e4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46222c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462230.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L462236.  v0:= temp;
  #L462238.  if v0 == 0 then goto L4622aa;
  #L46223c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L462240.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L462244.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L46224a.  v0:= temp @kind object;
  #L46224c.  v1:= "The buffer supplied is null" @kind object;
  #L462250.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L462256.  v0:= temp @kind object;
  #L462258.  v0:= (`java.util.Collection`) v0 @kind object;
  #L46225c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L462260.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462264.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46226a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46226e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.c` @type ^`long` @kind wide;
  #L462272.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L462276.  v1:= v7 @kind object;
  #L462278.  v2:= v4 @kind wide;
  #L46227a.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L462280.  v8:= temp @kind object;
  #L462282.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.i` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L462286.  goto L4622aa;
  #L462288.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46228a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L462290.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462296.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L46229a.  call `error`(v0, v8) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L4622a0.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4622a4.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4622aa.  return @kind void;
  catch `java.lang.Throwable` @[L462240..L46225c] goto L462288;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4622c8.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4622cc.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4622d2.  v0:= temp @kind object;
  #L4622d4.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4622d8.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4622de.  v0:= temp @kind object;
  #L4622e0.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4622e4.  @monitorenter v7
  #L4622e6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` @kind object;
  #L4622ea.  if v1 == 0 then goto L462310;
  #L4622ee.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.k` @type ^`long` @kind wide;
  #L4622f2.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.l` @type ^`long` @kind wide;
  #L4622f6.  v6:= lcmp(v2, v4);
  #L4622fa.  if v6 == 0 then goto L462300;
  #L4622fe.  goto L462310;
  #L462300.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$a.h` @type ^`java.util.Collection` := v0 @kind object;
  #L462304.  @monitorexit v7
  #L462306.  v0:= 0I;
  #L462308.  call `fastPathOrderedEmit`(v7, v1, v0, v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46230e.  return @kind void;
  #L462310.  @monitorexit v7
  #L462312.  return @kind void;
  #L462314.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462316.  @monitorexit v7
  #L462318.  throw v0;
  #L46231a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46231c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L462322.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$a;.dispose:()V` @kind virtual;
  #L462328.  v1:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L46232c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L462332.  return @kind void;
  catch `java.lang.Throwable` @[L4622c8..L4622e4] goto L46231a;
  catch `java.lang.Throwable` @[L4622e6..L462306] goto L462314;
  catch `java.lang.Throwable` @[L462310..L462318] goto L462314;
}
