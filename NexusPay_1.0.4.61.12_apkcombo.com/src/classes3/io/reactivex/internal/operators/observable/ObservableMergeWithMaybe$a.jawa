record `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46ce0c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46ce12.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46ce16.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46ce1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46ce20.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46ce24.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a`;
  #L46ce28.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;)V` @kind direct;
  #L46ce2e.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` := v1 @kind object;
  #L46ce32.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46ce36.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L46ce3c.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46ce40.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L46ce98.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46ce9e.  v0:= temp;
  #L46cea0.  if v0 != 0 then goto L46ceaa;
  #L46cea4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L46ceaa.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L46cebc.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cec0.  v1:= 1I;
  #L46cec2.  v2:= 1I;
  #L46cec4.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` @kind boolean;
  #L46cec8.  v4:= 0I;
  #L46ceca.  if v3 == 0 then goto L46ced8;
  #L46cece.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46ced2.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46ced6.  return @kind void;
  #L46ced8.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cedc.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46cee2.  v3:= temp @kind object;
  #L46cee4.  if v3 == 0 then goto L46cf04;
  #L46cee8.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46ceec.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46cef0.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cef4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L46cefa.  v1:= temp @kind object;
  #L46cefc.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46cf02.  return @kind void;
  #L46cf04.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int`;
  #L46cf08.  v5:= 2I;
  #L46cf0a.  if v3 != v1 then goto L46cf22;
  #L46cf0e.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` @kind object;
  #L46cf12.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46cf16.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v5;
  #L46cf1a.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46cf20.  v3:= 2I;
  #L46cf22.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` @kind boolean;
  #L46cf26.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L46cf2a.  if v7 == 0 then goto L46cf38;
  #L46cf2e.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46cf34.  v7:= temp @kind object;
  #L46cf36.  goto L46cf3a;
  #L46cf38.  v7:= v4 @kind object;
  #L46cf3a.  if v7 != 0 then goto L46cf42;
  #L46cf3e.  v8:= 1I;
  #L46cf40.  goto L46cf44;
  #L46cf42.  v8:= 0I;
  #L46cf44.  if v6 == 0 then goto L46cf5c;
  #L46cf48.  if v8 == 0 then goto L46cf5c;
  #L46cf4c.  if v3 != v5 then goto L46cf5c;
  #L46cf50.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46cf54.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46cf5a.  return @kind void;
  #L46cf5c.  if v8 == 0 then goto L46cf70;
  #L46cf60.  v2:= -v2 @kind int;
  #L46cf62.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46cf68.  v2:= temp;
  #L46cf6a.  if v2 != 0 then goto L46cec4;
  #L46cf6e.  return @kind void;
  #L46cf70.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46cf76.  goto L46cec4;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46cddc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L46cde0.  if v0 != 0 then goto L46cdfa;
  #L46cde4.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46cde8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L46cdee.  v1:= temp;
  #L46cdf0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46cdf6.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L46cdfa.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L46d05c.  v0:= 2I;
  #L46d05e.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v0;
  #L46d062.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L46d068.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ce54.  v0:= 1I;
  #L46ce56.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.g` @type ^`boolean` := v0 @kind boolean;
  #L46ce5a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46ce5e.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46ce64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L46ce68.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46ce6e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46ce74.  v0:= temp;
  #L46ce76.  if v0 != 0 then goto L46ce84;
  #L46ce7a.  v0:= 0I;
  #L46ce7c.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L46ce80.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L46ce84.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L46d07c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46d080.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46d086.  v0:= temp;
  #L46d088.  if v0 == 0 then goto L46d09e;
  #L46d08c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d090.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46d096.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L46d09c.  goto L46d0a4;
  #L46d09e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46d0a4.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46d0b8.  v0:= 0I;
  #L46d0ba.  v1:= 1I;
  #L46d0bc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L46d0c2.  v0:= temp;
  #L46d0c4.  if v0 == 0 then goto L46d0da;
  #L46d0c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d0cc.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d0d2.  v3:= 2I;
  #L46d0d4.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v3;
  #L46d0d8.  goto L46d0f0;
  #L46d0da.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L46d0de.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.i` @type ^`int` := v1;
  #L46d0e2.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d0e8.  v3:= temp;
  #L46d0ea.  if v3 == 0 then goto L46d0f0;
  #L46d0ee.  return @kind void;
  #L46d0f0.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L46d0f6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cdb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46cdb4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46cdba.  v0:= temp @kind object;
  #L46cdbc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46cdc0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46cdc6.  v0:= temp;
  #L46cdc8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cf88.  v0:= 1I;
  #L46cf8a.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46cf8e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L46cf94.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cfa8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46cfac.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46cfb2.  v0:= temp;
  #L46cfb4.  if v0 == 0 then goto L46cfca;
  #L46cfb8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind object;
  #L46cfbc.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46cfc2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L46cfc8.  goto L46cfd0;
  #L46cfca.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46cfd0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46cfe4.  v0:= 0I;
  #L46cfe6.  v1:= 1I;
  #L46cfe8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L46cfee.  v0:= temp;
  #L46cff0.  if v0 == 0 then goto L46d00c;
  #L46cff4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46cff8.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46cffe.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46d004.  v3:= temp;
  #L46d006.  if v3 != 0 then goto L46d028;
  #L46d00a.  return @kind void;
  #L46d00c.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L46d012.  v0:= temp @kind object;
  #L46d014.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46d01a.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d020.  v3:= temp;
  #L46d022.  if v3 == 0 then goto L46d028;
  #L46d026.  return @kind void;
  #L46d028.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L46d02e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d040.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d044.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46d04a.  return @kind void;
}
