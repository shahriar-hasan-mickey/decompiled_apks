record `io.reactivex.internal.operators.observable.ObservableRetryWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4710f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4710f6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4710fa.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L4710fe.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L471102.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L471106.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47110c.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L471110.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L471114.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L47111a.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L47111e.  v1:= new `io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a`;
  #L471122.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;)V` @kind direct;
  #L471128.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` := v1 @kind object;
  #L47112c.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L471130.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L471136.  v0.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L47113a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L471174.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471178.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47117e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L471182.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L471186.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L47118c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4711a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4711a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4711aa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4711ae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4711b2.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4711b8.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L4711cc.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @kind virtual;
  #L4711d2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L47127c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L471280.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L471286.  v0:= temp;
  #L471288.  if v0 != 0 then goto L4712c2;
  #L47128c.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @kind virtual;
  #L471292.  v0:= temp;
  #L471294.  if v0 == 0 then goto L47129a;
  #L471298.  return @kind void;
  #L47129a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` @kind boolean;
  #L47129e.  if v0 != 0 then goto L4712b2;
  #L4712a2.  v0:= 1I;
  #L4712a4.  v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4712a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.g` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4712ac.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4712b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4712b6.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4712bc.  v0:= temp;
  #L4712be.  if v0 != 0 then goto L47128c;
  #L4712c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47114c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471150.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L471156.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L47115a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L471160.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4710c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4710c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4710ce.  v0:= temp @kind object;
  #L4710d0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4710d4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4710da.  v0:= temp;
  #L4710dc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4711e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRetryWhen$a$a` @kind object;
  #L4711e8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4711ee.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4711f2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4711f6.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4711fc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471210.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471214.  v1:= 0I;
  #L471216.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47121c.  v0:= 0I;
  #L47121e.  v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L471222.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.d` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L471226.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47122c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471240.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L471244.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L471248.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L47124e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryWhen$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryWhen$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471260.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471264.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47126a.  return @kind void;
}
