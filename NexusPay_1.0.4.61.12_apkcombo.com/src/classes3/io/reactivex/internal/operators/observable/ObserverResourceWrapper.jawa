record `io.reactivex.internal.operators.observable.ObserverResourceWrapper` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObserverResourceWrapper.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObserverResourceWrapper.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L479c6c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L479c72.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L479c76.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L479c7c.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L479c80.  v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L479c84.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479c98.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479c9c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L479ca2.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L479ca8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479c40.  v0:= v2.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479c44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L479c4a.  v0:= temp @kind object;
  #L479c4c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L479c50.  if v0 != v1 then goto L479c58;
  #L479c54.  v0:= 1I;
  #L479c56.  goto L479c5a;
  #L479c58.  v0:= 0I;
  #L479c5a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479cbc.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L479cc2.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @type ^`io.reactivex.Observer` @kind object;
  #L479cc6.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L479ccc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479ce0.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.dispose:()V` @kind virtual;
  #L479ce6.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @type ^`io.reactivex.Observer` @kind object;
  #L479cea.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L479cf0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479d04.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @type ^`io.reactivex.Observer` @kind object;
  #L479d08.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L479d0e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479d20.  v0:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479d24.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L479d2a.  v2:= temp;
  #L479d2c.  if v2 == 0 then goto L479d3a;
  #L479d30.  v2:= v1.`io.reactivex.internal.operators.observable.ObserverResourceWrapper.a` @type ^`io.reactivex.Observer` @kind object;
  #L479d34.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L479d3a.  return @kind void;
}
procedure `void` `setResource`(`io.reactivex.internal.operators.observable.ObserverResourceWrapper` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObserverResourceWrapper;.setResource:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L479d4c.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L479d52.  return @kind void;
}
