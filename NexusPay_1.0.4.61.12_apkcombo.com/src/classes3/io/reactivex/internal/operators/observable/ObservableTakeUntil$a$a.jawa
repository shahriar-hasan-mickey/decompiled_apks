record `io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableTakeUntil$a` `io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L474674.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` := v1 @kind object;
  #L474678.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47467e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474690.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` @kind object;
  #L474694.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.a:()V` @kind virtual;
  #L47469a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4746ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` @kind object;
  #L4746b0.  call `b`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4746b6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4746c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4746ce.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` @kind object;
  #L4746d2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.a:()V` @kind virtual;
  #L4746d8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4746ec.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4746f2.  return @kind void;
}
