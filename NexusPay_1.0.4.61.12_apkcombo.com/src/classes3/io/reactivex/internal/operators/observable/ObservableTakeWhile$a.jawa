record `io.reactivex.internal.operators.observable.ObservableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L474aac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L474ab2.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L474ab6.  v0.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L474aba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474acc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474ad0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474ad6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474a8c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474a90.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L474a96.  v0:= temp;
  #L474a98.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474ae8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L474aec.  if v0 == 0 then goto L474af2;
  #L474af0.  return @kind void;
  #L474af2.  v0:= 1I;
  #L474af4.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L474af8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474afc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474b02.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474b14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L474b18.  if v0 == 0 then goto L474b24;
  #L474b1c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L474b22.  return @kind void;
  #L474b24.  v0:= 1I;
  #L474b26.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L474b2a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474b2e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L474b34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474b48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L474b4c.  if v0 == 0 then goto L474b52;
  #L474b50.  return @kind void;
  #L474b52.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L474b56.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L474b5c.  v0:= temp;
  #L474b5e.  if v0 != 0 then goto L474b7e;
  #L474b62.  v2:= 1I;
  #L474b64.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L474b68.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474b6c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474b72.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474b76.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474b7c.  return @kind void;
  #L474b7e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474b82.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L474b88.  return @kind void;
  #L474b8a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L474b8c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L474b92.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474b96.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474b9c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L474ba2.  return @kind void;
  catch `java.lang.Throwable` @[L474b52..L474b5e] goto L474b8a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeWhile$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeWhile$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474bc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474bc4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L474bca.  v0:= temp;
  #L474bcc.  if v0 == 0 then goto L474bde;
  #L474bd0.  v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L474bd4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeWhile$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474bd8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L474bde.  return @kind void;
}
