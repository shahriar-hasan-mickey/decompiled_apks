record `io.reactivex.internal.operators.observable.ObservableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @AccessFlag VOLATILE;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L478424.  v0:= new `java.lang.Object`;
  #L478428.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47842e.  `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` := v0 @kind object;
  #L478432.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L478444.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L478448.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L47844e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L478454.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L478458.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L47845e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L478462.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @type ^`long` := v3 @kind wide;
  #L478466.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L47846a.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L47846e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int` := v7;
  #L478472.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47849c.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4784a0.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L4784a4.  v1:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4784a8.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4784ac.  v3:= 1I;
  #L4784ae.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` @kind boolean;
  #L4784b2.  v5:= v7.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L4784b6.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4784bc.  v6:= temp @kind object;
  #L4784be.  if v5 == 0 then goto L4784fc;
  #L4784c2.  if v6 == 0 then goto L4784ce;
  #L4784c6.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L4784ca.  if v6 != v5 then goto L4784fc;
  #L4784ce.  v1:= 0I;
  #L4784d0.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4784d4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4784da.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4784de.  if v0 == 0 then goto L4784ea;
  #L4784e2.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4784e8.  goto L4784f0;
  #L4784ea.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4784f0.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4784f4.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4784fa.  return @kind void;
  #L4784fc.  if v6 != 0 then goto L478510;
  #L478500.  v3:= -v3 @kind int;
  #L478502.  call temp:= `leave`(v7, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L478508.  v3:= temp;
  #L47850a.  if v3 != 0 then goto L4784ae;
  #L47850e.  return @kind void;
  #L478510.  v5:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L478514.  if v6 != v5 then goto L478546;
  #L478518.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L47851e.  if v4 != 0 then goto L47853a;
  #L478522.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int`;
  #L478526.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L47852c.  v2:= temp @kind object;
  #L47852e.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L478532.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478538.  goto L4784ae;
  #L47853a.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47853e.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L478544.  goto L4784ae;
  #L478546.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L47854c.  v4:= temp @kind object;
  #L47854e.  call `onNext`(v2, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L478554.  goto L4784ae;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478484.  v0:= 1I;
  #L478486.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L47848a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47840c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L478410.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478568.  v0:= 1I;
  #L47856a.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L47856e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L478574.  v0:= temp;
  #L478576.  if v0 == 0 then goto L478580;
  #L47857a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L478580.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478584.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47858a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47859c.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4785a0.  v0:= 1I;
  #L4785a2.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4785a6.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4785ac.  v0:= temp;
  #L4785ae.  if v0 == 0 then goto L4785b8;
  #L4785b2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4785b8.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4785bc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4785c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4785d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` @kind boolean;
  #L4785d8.  if v0 == 0 then goto L4785de;
  #L4785dc.  return @kind void;
  #L4785de.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L4785e4.  v0:= temp;
  #L4785e6.  if v0 == 0 then goto L478604;
  #L4785ea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L4785ee.  call `onNext`(v0, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4785f4.  v2:= -1I;
  #L4785f6.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4785fc.  v2:= temp;
  #L4785fe.  if v2 != 0 then goto L478624;
  #L478602.  return @kind void;
  #L478604.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L478608.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L47860e.  v2:= temp @kind object;
  #L478610.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L478616.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L47861c.  v2:= temp;
  #L47861e.  if v2 != 0 then goto L478624;
  #L478622.  return @kind void;
  #L478624.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L47862a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47863c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L478640.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478646.  v0:= temp;
  #L478648.  if v0 == 0 then goto L47869e;
  #L47864c.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.f` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L478650.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.e` @type ^`int`;
  #L478654.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L47865a.  v8:= temp @kind object;
  #L47865c.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L478660.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478664.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47866a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.g` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L47866e.  call `onNext`(v8, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478674.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L478678.  if v8 != 0 then goto L47869e;
  #L47867c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L478680.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.b` @type ^`long` @kind wide;
  #L478684.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478688.  v1:= v7 @kind object;
  #L47868a.  v2:= v4 @kind wide;
  #L47868c.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L478692.  v8:= temp @kind object;
  #L478694.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.h` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L478698.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L47869e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4786b0.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4786b4.  if v0 == 0 then goto L4786be;
  #L4786b8.  v0:= 1I;
  #L4786ba.  v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4786be.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4786c2.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowTimed$b.j` @type ^`java.lang.Object` @kind object;
  #L4786c6.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4786cc.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4786d2.  v0:= temp;
  #L4786d4.  if v0 == 0 then goto L4786de;
  #L4786d8.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.a:()V` @kind virtual;
  #L4786de.  return @kind void;
}
