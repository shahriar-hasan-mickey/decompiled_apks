record `io.reactivex.internal.operators.observable.ObservableAmb$a` @kind class @AccessFlag FINAL extends `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableAmb$b`[] `io.reactivex.internal.operators.observable.ObservableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L460388.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46038e.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L460392.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L460398.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L46039c.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4603a0.  v2:= new `io.reactivex.internal.operators.observable.ObservableAmb$b`[v3];
  #L4603a4.  v1.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] := v2 @kind object;
  #L4603a8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v7 @kind this, `io.reactivex.ObservableSource`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.a:([Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L460408.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L46040c.  v1:= length @variable v0;
  #L46040e.  v2:= 0I;
  #L460410.  v3:= 0I;
  #L460412.  if v3 >= v1 then goto L460430;
  #L460416.  v4:= new `io.reactivex.internal.operators.observable.ObservableAmb$b`;
  #L46041a.  v5:= v3 + 1;
  #L46041e.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460422.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/Observer;)V` @kind direct;
  #L460428.  v0[v3]:= v4 @kind object;
  #L46042c.  v3:= v5;
  #L46042e.  goto L460412;
  #L460430.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L460434.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46043a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46043e.  call `onSubscribe`(v3, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L460444.  if v2 >= v1 then goto L46046e;
  #L460448.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46044c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L460452.  v3:= temp;
  #L460454.  if v3 == 0 then goto L46045a;
  #L460458.  return @kind void;
  #L46045a.  v3:= v8[v2] @kind object;
  #L46045e.  v4:= v0[v2] @kind object;
  #L460462.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L460468.  v2:= v2 + 1;
  #L46046c.  goto L460444;
  #L46046e.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v5 @kind this, `int` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L460324.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L460328.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46032e.  v0:= temp;
  #L460330.  v1:= 1I;
  #L460332.  v2:= 0I;
  #L460334.  if v0 != 0 then goto L46036c;
  #L460338.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46033c.  call temp:= `compareAndSet`(v0, v2, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L460342.  v0:= temp;
  #L460344.  if v0 == 0 then goto L46036a;
  #L460348.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L46034c.  v3:= length @variable v0;
  #L46034e.  if v2 >= v3 then goto L460368;
  #L460352.  v4:= v2 + 1;
  #L460356.  if v4 == v6 then goto L460364;
  #L46035a.  v2:= v0[v2] @kind object;
  #L46035e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L460364.  v2:= v4;
  #L460366.  goto L46034e;
  #L460368.  return v1;
  #L46036a.  return v2;
  #L46036c.  if v0 != v6 then goto L460372;
  #L460370.  goto L460374;
  #L460372.  v1:= 0I;
  #L460374.  return v1;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4603bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4603c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4603c6.  v0:= temp;
  #L4603c8.  v1:= -1I;
  #L4603ca.  if v0 == v1 then goto L4603f4;
  #L4603ce.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4603d2.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4603d8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableAmb$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$b`[] @kind object;
  #L4603dc.  v1:= length @variable v0;
  #L4603de.  v2:= 0I;
  #L4603e0.  if v2 >= v1 then goto L4603f4;
  #L4603e4.  v3:= v0[v2] @kind object;
  #L4603e8.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @kind virtual;
  #L4603ee.  v2:= v2 + 1;
  #L4603f2.  goto L4603e0;
  #L4603f4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableAmb$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4602f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4602fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L460302.  v0:= temp;
  #L460304.  v1:= -1I;
  #L460306.  if v0 != v1 then goto L46030e;
  #L46030a.  v0:= 1I;
  #L46030c.  goto L460310;
  #L46030e.  v0:= 0I;
  #L460310.  return v0;
}
