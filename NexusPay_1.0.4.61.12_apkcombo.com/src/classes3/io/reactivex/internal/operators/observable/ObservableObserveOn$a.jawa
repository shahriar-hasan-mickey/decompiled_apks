record `io.reactivex.internal.operators.observable.ObservableObserveOn$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46d6cc.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L46d6d2.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46d6d6.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L46d6da.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` := v3 @kind boolean;
  #L46d6de.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int` := v4;
  #L46d6e2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46d5b0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L46d5b4.  v1:= 1I;
  #L46d5b6.  if v0 == 0 then goto L46d5c6;
  #L46d5ba.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d5be.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46d5c4.  return v1;
  #L46d5c6.  if v3 == 0 then goto L46d63a;
  #L46d5ca.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L46d5ce.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L46d5d2.  if v0 == 0 then goto L46d5fc;
  #L46d5d6.  if v4 == 0 then goto L46d63a;
  #L46d5da.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L46d5de.  if v3 == 0 then goto L46d5ea;
  #L46d5e2.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d5e8.  goto L46d5f0;
  #L46d5ea.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46d5f0.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d5f4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d5fa.  return v1;
  #L46d5fc.  if v3 == 0 then goto L46d620;
  #L46d600.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L46d604.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d608.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46d60e.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d614.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d618.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d61e.  return v1;
  #L46d620.  if v4 == 0 then goto L46d63a;
  #L46d624.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v1 @kind boolean;
  #L46d628.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46d62e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d632.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d638.  return v1;
  #L46d63a.  v3:= 0I;
  #L46d63c.  return v3;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d6f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d6f8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46d6fe.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d710.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L46d714.  if v0 != 0 then goto L46d750;
  #L46d718.  v0:= 1I;
  #L46d71a.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L46d71e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46d722.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d728.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d72c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d732.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L46d736.  if v0 != 0 then goto L46d750;
  #L46d73a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d740.  v0:= temp;
  #L46d742.  if v0 != 0 then goto L46d750;
  #L46d746.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d74a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46d750.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46d764.  v0:= 1I;
  #L46d766.  v1:= 1I;
  #L46d768.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L46d76c.  if v2 == 0 then goto L46d772;
  #L46d770.  return @kind void;
  #L46d772.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d776.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L46d77a.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.c` @type ^`boolean` @kind boolean;
  #L46d77e.  if v4 != 0 then goto L46d7a8;
  #L46d782.  if v2 == 0 then goto L46d7a8;
  #L46d786.  if v3 == 0 then goto L46d7a8;
  #L46d78a.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L46d78e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d792.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L46d796.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d79c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d7a0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d7a6.  return @kind void;
  #L46d7a8.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d7ac.  v4:= 0I;
  #L46d7ae.  call `onNext`(v3, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d7b4.  if v2 == 0 then goto L46d7e6;
  #L46d7b8.  v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L46d7bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L46d7c0.  if v0 == 0 then goto L46d7d0;
  #L46d7c4.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d7c8.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d7ce.  goto L46d7da;
  #L46d7d0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d7d4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46d7da.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d7de.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d7e4.  return @kind void;
  #L46d7e6.  v1:= -v1 @kind int;
  #L46d7e8.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46d7ee.  v1:= temp;
  #L46d7f0.  if v1 != 0 then goto L46d768;
  #L46d7f4.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46d808.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d80c.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d810.  v2:= 1I;
  #L46d812.  v3:= 1I;
  #L46d814.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d818.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L46d81e.  v5:= temp;
  #L46d820.  call temp:= `a`(v7, v4, v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L46d826.  v4:= temp;
  #L46d828.  if v4 == 0 then goto L46d82e;
  #L46d82c.  return @kind void;
  #L46d82e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d832.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46d838.  v5:= temp @kind object;
  #L46d83a.  if v5 != 0 then goto L46d842;
  #L46d83e.  v6:= 1I;
  #L46d840.  goto L46d844;
  #L46d842.  v6:= 0I;
  #L46d844.  call temp:= `a`(v7, v4, v6, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.a:(ZZLio/reactivex/Observer;)Z` @kind virtual;
  #L46d84a.  v4:= temp;
  #L46d84c.  if v4 == 0 then goto L46d852;
  #L46d850.  return @kind void;
  #L46d852.  if v6 == 0 then goto L46d866;
  #L46d856.  v3:= -v3 @kind int;
  #L46d858.  call temp:= `addAndGet`(v7, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46d85e.  v3:= temp;
  #L46d860.  if v3 != 0 then goto L46d814;
  #L46d864.  return @kind void;
  #L46d866.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d86c.  goto L46d82e;
  #L46d86e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46d870.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46d876.  v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L46d87a.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46d87e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d884.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46d88a.  call `onError`(v1, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d890.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46d894.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46d89a.  return @kind void;
  catch `java.lang.Throwable` @[L46d832..L46d83a] goto L46d86e;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @AccessFlag  {
    temp;
    v0;

  #L46da0c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46da12.  v0:= temp;
  #L46da14.  if v0 != 0 then goto L46da22;
  #L46da18.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L46da1c.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L46da22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d650.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L46d654.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d668.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d66c.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L46d672.  v0:= temp;
  #L46d674.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d8b8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d8bc.  if v0 == 0 then goto L46d8c2;
  #L46d8c0.  return @kind void;
  #L46d8c2.  v0:= 1I;
  #L46d8c4.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46d8c8.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L46d8ce.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d8e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d8e4.  if v0 == 0 then goto L46d8f0;
  #L46d8e8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46d8ee.  return @kind void;
  #L46d8f0.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L46d8f4.  v2:= 1I;
  #L46d8f6.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v2 @kind boolean;
  #L46d8fa.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L46d900.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46d914.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L46d918.  if v0 == 0 then goto L46d91e;
  #L46d91c.  return @kind void;
  #L46d91e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int`;
  #L46d922.  v1:= 2I;
  #L46d924.  if v0 == v1 then goto L46d932;
  #L46d928.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d92c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46d932.  call `g`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L46d938.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46d94c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46d950.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46d956.  v0:= temp;
  #L46d958.  if v0 == 0 then goto L46d9d0;
  #L46d95c.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L46d960.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L46d964.  if v0 == 0 then goto L46d9b4;
  #L46d968.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L46d96c.  v0:= 7I;
  #L46d96e.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L46d974.  v0:= temp;
  #L46d976.  v1:= 1I;
  #L46d978.  if v0 != v1 then goto L46d99a;
  #L46d97c.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L46d980.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L46d984.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L46d988.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d98c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46d992.  call `g`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.g:()V` @kind virtual;
  #L46d998.  return @kind void;
  #L46d99a.  v1:= 2I;
  #L46d99c.  if v0 != v1 then goto L46d9b4;
  #L46d9a0.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.j` @type ^`int` := v0;
  #L46d9a4.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L46d9a8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d9ac.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46d9b2.  return @kind void;
  #L46d9b4.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46d9b8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.d` @type ^`int`;
  #L46d9bc.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46d9c2.  v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L46d9c6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d9ca.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46d9d0.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d6ac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46d6b0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46d6b6.  v0:= temp @kind object;
  #L46d6b8.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d688.  v0:= 2I;
  #L46d68a.  v2:= v2 ^& v0 @kind int;
  #L46d68c.  if v2 == 0 then goto L46d698;
  #L46d690.  v2:= 1I;
  #L46d692.  v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` := v2 @kind boolean;
  #L46d696.  return v0;
  #L46d698.  v2:= 0I;
  #L46d69a.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d9e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableObserveOn$a.k` @type ^`boolean` @kind boolean;
  #L46d9e8.  if v0 == 0 then goto L46d9f4;
  #L46d9ec.  call `e`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.e:()V` @kind virtual;
  #L46d9f2.  goto L46d9fa;
  #L46d9f4.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.f:()V` @kind virtual;
  #L46d9fa.  return @kind void;
}
