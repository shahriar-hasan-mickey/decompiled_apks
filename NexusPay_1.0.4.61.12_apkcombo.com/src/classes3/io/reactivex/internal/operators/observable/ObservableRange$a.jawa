record `io.reactivex.internal.operators.observable.ObservableRange$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRange$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRange$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRange$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRange$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46eae4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L46eaea.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46eaee.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L46eaf2.  v0.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` := v4 @kind wide;
  #L46eaf6.  return @kind void;
}
procedure `java.lang.Integer` `a`(`io.reactivex.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46ea84.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L46ea88.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L46ea8c.  v4:= lcmp(v0, v2);
  #L46ea90.  if v4 == 0 then goto L46eaaa;
  #L46ea94.  v2:= 1L;
  #L46ea98.  v2:= v2 + v0 @kind long;
  #L46ea9a.  v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v2 @kind wide;
  #L46ea9e.  v1:= (`int`) v0 @kind l2i;
  #L46eaa0.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46eaa6.  v0:= temp @kind object;
  #L46eaa8.  return v0 @kind object;
  #L46eaaa.  v0:= 1I;
  #L46eaac.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46eab2.  v0:= 0I;
  #L46eab4.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRange$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46eb08.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L46eb0c.  v2.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` := v0 @kind wide;
  #L46eb10.  v0:= 1I;
  #L46eb12.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46eb18.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46eb2c.  v0:= 1I;
  #L46eb2e.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L46eb34.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ea14.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46ea1a.  v0:= temp;
  #L46ea1c.  if v0 == 0 then goto L46ea24;
  #L46ea20.  v0:= 1I;
  #L46ea22.  goto L46ea26;
  #L46ea24.  v0:= 0I;
  #L46ea26.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRange$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46ea38.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L46ea3c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L46ea40.  v4:= lcmp(v0, v2);
  #L46ea44.  if v4 != 0 then goto L46ea4c;
  #L46ea48.  v0:= 1I;
  #L46ea4a.  goto L46ea4e;
  #L46ea4c.  v0:= 0I;
  #L46ea4e.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L46eac8.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.a:()Ljava/lang/Integer;` @kind virtual;
  #L46eace.  v0:= temp @kind object;
  #L46ead0.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRange$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ea60.  v0:= 1I;
  #L46ea62.  v2:= v2 ^& v0 @kind int;
  #L46ea64.  if v2 == 0 then goto L46ea6e;
  #L46ea68.  v1.`io.reactivex.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` := v0 @kind boolean;
  #L46ea6c.  return v0;
  #L46ea6e.  v2:= 0I;
  #L46ea70.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRange$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRange$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46eb48.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.d` @type ^`boolean` @kind boolean;
  #L46eb4c.  if v0 == 0 then goto L46eb52;
  #L46eb50.  return @kind void;
  #L46eb52.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46eb56.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.b` @type ^`long` @kind wide;
  #L46eb5a.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRange$a.c` @type ^`long` @kind wide;
  #L46eb5e.  v5:= lcmp(v3, v1);
  #L46eb62.  if v5 == 0 then goto L46eb8a;
  #L46eb66.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46eb6c.  v5:= temp;
  #L46eb6e.  if v5 != 0 then goto L46eb8a;
  #L46eb72.  v5:= (`int`) v3 @kind l2i;
  #L46eb74.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46eb7a.  v5:= temp @kind object;
  #L46eb7c.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46eb82.  v5:= 1L;
  #L46eb86.  v3:= v3 + v5 @kind long;
  #L46eb88.  goto L46eb5e;
  #L46eb8a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46eb90.  v1:= temp;
  #L46eb92.  if v1 != 0 then goto L46eba4;
  #L46eb96.  v1:= 1I;
  #L46eb98.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46eb9e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46eba4.  return @kind void;
}
