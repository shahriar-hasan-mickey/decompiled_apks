record `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$h` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$f` `io.reactivex.internal.operators.observable.ObservableReplay$a.a` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$a.b` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46fdb8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46fdbe.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L46fdc2.  v1:= 0I;
  #L46fdc4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46fdca.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` := v0 @kind object;
  #L46fdce.  call `set`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L46fdd4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L46fe4c.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L46fe52.  v2:= temp @kind object;
  #L46fe54.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46fe5a.  v2:= temp @kind object;
  #L46fe5c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L46fe60.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46fe66.  call `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L46fe6c.  call `l`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L46fe72.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L46fe84.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L46fe8a.  v2:= temp @kind object;
  #L46fe8c.  call temp:= `e`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46fe92.  v2:= temp @kind object;
  #L46fe94.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L46fe98.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46fe9e.  call `d`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L46fea4.  call `k`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.k:()V` @kind virtual;
  #L46feaa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46fef8.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46fefe.  v0:= temp;
  #L46ff00.  if v0 == 0 then goto L46ff06;
  #L46ff04.  return @kind void;
  #L46ff06.  v0:= 1I;
  #L46ff08.  call temp:= `a`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L46ff0e.  v1:= temp @kind object;
  #L46ff10.  v1:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v1 @kind object;
  #L46ff14.  if v1 != 0 then goto L46ff24;
  #L46ff18.  call temp:= `f`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @kind virtual;
  #L46ff1e.  v1:= temp @kind object;
  #L46ff20.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L46ff24.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L46ff2a.  v2:= temp;
  #L46ff2c.  v3:= 0I;
  #L46ff2e.  if v2 == 0 then goto L46ff38;
  #L46ff32.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L46ff36.  return @kind void;
  #L46ff38.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46ff3e.  v2:= temp @kind object;
  #L46ff40.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L46ff44.  if v2 == 0 then goto L46ff6e;
  #L46ff48.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L46ff4c.  call temp:= `g`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46ff52.  v1:= temp @kind object;
  #L46ff54.  v4:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.Observer` @kind object;
  #L46ff58.  call temp:= `accept`(v1, v4) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L46ff5e.  v1:= temp;
  #L46ff60.  if v1 == 0 then goto L46ff6a;
  #L46ff64.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v3 @kind object;
  #L46ff68.  return @kind void;
  #L46ff6a.  v1:= v2 @kind object;
  #L46ff6c.  goto L46ff24;
  #L46ff6e.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L46ff72.  v0:= -v0 @kind int;
  #L46ff74.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46ff7a.  v0:= temp;
  #L46ff7c.  if v0 != 0 then goto L46ff08;
  #L46ff80.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.complete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L46fe14.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L46fe1a.  v0:= temp @kind object;
  #L46fe1c.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46fe22.  v0:= temp @kind object;
  #L46fe24.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L46fe28.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46fe2e.  call `d`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L46fe34.  call `l`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.l:()V` @kind virtual;
  #L46fe3a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$f` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.d:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;
    v0;

  #L46fde8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` @kind object;
  #L46fdec.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L46fdf2.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$f` := v2 @kind object;
  #L46fdf6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L46fdfa.  v2:= v2 + 1;
  #L46fdfe.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v2;
  #L46fe02.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L46fd90.  return v1 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;

  #L46fd70.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46fd76.  v0:= temp @kind object;
  #L46fd78.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L46fd7c.  return v0 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L46fda4.  return v1 @kind object;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.h:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L46febc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46fec2.  v0:= temp @kind object;
  #L46fec4.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L46fec8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46fece.  v0:= temp @kind object;
  #L46fed0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L46fed4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L46fed8.  v1:= v1 + -1;
  #L46fedc.  v2.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v1;
  #L46fee0.  call `i`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L46fee6.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$f` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @AccessFlag FINAL {
    temp;

  #L46ff94.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L46ff9a.  return @kind void;
}
procedure `void` `j`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.j:()V` @AccessFlag FINAL {
    temp;
    v0;
    v1;
    v2;

  #L46ffac.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46ffb2.  v0:= temp @kind object;
  #L46ffb4.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v0 @kind object;
  #L46ffb8.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L46ffbc.  if v1 == 0 then goto L46ffe0;
  #L46ffc0.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$f`;
  #L46ffc4.  v2:= 0I;
  #L46ffc6.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$f;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46ffcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46ffd2.  v0:= temp @kind object;
  #L46ffd4.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46ffda.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L46ffe0.  return @kind void;
}
procedure `void` `k`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.k:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `l`(`io.reactivex.internal.operators.observable.ObservableReplay$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.l:()V` @AccessFlag  {
    temp;

  #L46fff4.  call `j`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.j:()V` @kind virtual;
  #L46fffa.  return @kind void;
}
