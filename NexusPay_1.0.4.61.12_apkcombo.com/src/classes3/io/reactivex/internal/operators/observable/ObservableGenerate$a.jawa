record `io.reactivex.internal.operators.observable.ObservableGenerate$a` @kind class @AccessFlag FINAL extends `io.reactivex.Emitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L469bf4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L469bfa.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L469bfe.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L469c02.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L469c06.  v0.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L469c0a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L469c34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L469c38.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L469c3e.  goto L469c4e;
  #L469c40.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L469c42.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L469c48.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L469c4e.  return @kind void;
  catch `java.lang.Throwable` @[L469c34..L469c3e] goto L469c40;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L469d40.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L469d44.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L469d48.  v2:= 0I;
  #L469d4a.  if v1 == 0 then goto L469d5a;
  #L469d4e.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L469d52.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L469d58.  return @kind void;
  #L469d5a.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L469d5e.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L469d62.  if v3 == 0 then goto L469d72;
  #L469d66.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L469d6a.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L469d70.  return @kind void;
  #L469d72.  v3:= 0I;
  #L469d74.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` := v3 @kind boolean;
  #L469d78.  v3:= 1I;
  #L469d7a.  call temp:= `apply`(v1, v0, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L469d80.  v0:= temp @kind object;
  #L469d82.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L469d86.  if v4 == 0 then goto L469d5e;
  #L469d8a.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v3 @kind boolean;
  #L469d8e.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L469d92.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L469d98.  return @kind void;
  #L469d9a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L469d9c.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L469da2.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.d` @type ^`java.lang.Object` := v2 @kind object;
  #L469da6.  v5.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v3 @kind boolean;
  #L469daa.  call `onError`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L469db0.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L469db6.  return @kind void;
  catch `java.lang.Throwable` @[L469d7a..L469d82] goto L469d9a;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469c1c.  v0:= 1I;
  #L469c1e.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L469c22.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469bdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L469be0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469c6c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L469c70.  if v0 != 0 then goto L469c84;
  #L469c74.  v0:= 1I;
  #L469c76.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L469c7a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469c7e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L469c84.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469c98.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L469c9c.  if v0 == 0 then goto L469ca8;
  #L469ca0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L469ca6.  goto L469cca;
  #L469ca8.  if v2 != 0 then goto L469cba;
  #L469cac.  v2:= new `java.lang.NullPointerException`;
  #L469cb0.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L469cb4.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L469cba.  v0:= 1I;
  #L469cbc.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L469cc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469cc4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L469cca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469cdc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L469ce0.  if v0 != 0 then goto L469d2c;
  #L469ce4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L469ce8.  if v0 == 0 then goto L469d02;
  #L469cec.  v2:= new `java.lang.IllegalStateException`;
  #L469cf0.  v0:= "onNext already called in this generate turn" @kind object;
  #L469cf4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L469cfa.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L469d00.  goto L469d2c;
  #L469d02.  if v2 != 0 then goto L469d1c;
  #L469d06.  v2:= new `java.lang.NullPointerException`;
  #L469d0a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L469d0e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L469d14.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L469d1a.  goto L469d2c;
  #L469d1c.  v0:= 1I;
  #L469d1e.  v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L469d22.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGenerate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469d26.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L469d2c.  return @kind void;
}
