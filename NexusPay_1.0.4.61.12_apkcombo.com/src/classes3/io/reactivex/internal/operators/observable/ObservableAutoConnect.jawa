record `io.reactivex.internal.operators.observable.ObservableAutoConnect` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.observables.ConnectableObservable` `io.reactivex.internal.operators.observable.ObservableAutoConnect.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAutoConnect.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableAutoConnect.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableAutoConnect.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAutoConnect` v0 @kind this, `io.reactivex.observables.ConnectableObservable` v1 @kind object, `int` v2 , `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.<init>:(Lio/reactivex/observables/ConnectableObservable;ILio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L460a5c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L460a62.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.a` @type ^`io.reactivex.observables.ConnectableObservable` := v1 @kind object;
  #L460a66.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.b` @type ^`int` := v2;
  #L460a6a.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L460a6e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L460a72.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L460a78.  v0.`io.reactivex.internal.operators.observable.ObservableAutoConnect.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L460a7c.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableAutoConnect` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460a90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L460a94.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L460a9a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L460a9e.  call temp:= `incrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L460aa4.  v2:= temp;
  #L460aa6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.b` @type ^`int`;
  #L460aaa.  if v2 != v0 then goto L460abc;
  #L460aae.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.a` @type ^`io.reactivex.observables.ConnectableObservable` @kind object;
  #L460ab2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableAutoConnect.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L460ab6.  call `connect`(v2, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L460abc.  return @kind void;
}
