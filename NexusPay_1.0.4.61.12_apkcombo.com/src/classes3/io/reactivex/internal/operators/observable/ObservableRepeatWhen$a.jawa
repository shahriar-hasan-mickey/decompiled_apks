record `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @AccessFlag FINAL;
  `io.reactivex.subjects.Subject` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.Subject` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/Subject;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46fa74.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46fa7a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46fa7e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.subjects.Subject` := v2 @kind object;
  #L46fa82.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L46fa86.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L46fa8a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46fa90.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L46fa94.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46fa98.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L46fa9e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46faa2.  v1:= new `io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a`;
  #L46faa6.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;)V` @kind direct;
  #L46faac.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` := v1 @kind object;
  #L46fab0.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46fab4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46faba.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46fabe.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46faf8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fafc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46fb02.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46fb06.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46fb0a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46fb10.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46fb24.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fb28.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46fb2e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46fb32.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46fb36.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46fb3c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.c:()V` @AccessFlag  {
    temp;

  #L46fb50.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @kind virtual;
  #L46fb56.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L46fc08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46fc0c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46fc12.  v0:= temp;
  #L46fc14.  if v0 != 0 then goto L46fc4e;
  #L46fc18.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @kind virtual;
  #L46fc1e.  v0:= temp;
  #L46fc20.  if v0 == 0 then goto L46fc26;
  #L46fc24.  return @kind void;
  #L46fc26.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` @kind boolean;
  #L46fc2a.  if v0 != 0 then goto L46fc3e;
  #L46fc2e.  v0:= 1I;
  #L46fc30.  v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46fc34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.g` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46fc38.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46fc3e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46fc42.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46fc48.  v0:= temp;
  #L46fc4a.  if v0 != 0 then goto L46fc18;
  #L46fc4e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46fad0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fad4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46fada.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L46fade.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46fae4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46fa48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fa4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46fa52.  v0:= temp @kind object;
  #L46fa54.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46fa58.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46fa5e.  v0:= temp;
  #L46fa60.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46fb68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fb6c.  v1:= 0I;
  #L46fb6e.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46fb74.  v0:= 0I;
  #L46fb76.  v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46fb7a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.d` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L46fb7e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46fb84.  v0:= temp @kind object;
  #L46fb86.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46fb8c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46fba0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a$a` @kind object;
  #L46fba4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46fbaa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46fbae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46fbb2.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46fbb8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46fbcc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46fbd0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46fbd4.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L46fbda.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatWhen$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46fbec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatWhen$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46fbf0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46fbf6.  return @kind void;
}
