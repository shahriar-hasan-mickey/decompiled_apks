record `io.reactivex.internal.operators.observable.ObservableBufferBoundary` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L461b98.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L461b9e.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L461ba2.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L461ba6.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L461baa.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461bbc.  v0:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a`;
  #L461bc0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L461bc4.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L461bc8.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundary.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L461bcc.  call `<init>`(v0, v5, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L461bd2.  call `onSubscribe`(v5, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L461bd8.  v5:= v4.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L461bdc.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L461be2.  return @kind void;
}
