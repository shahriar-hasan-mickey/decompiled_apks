record `io.reactivex.internal.operators.observable.ObservableCount$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCount$a.b` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableCount$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCount$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L464d4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L464d52.  v0.`io.reactivex.internal.operators.observable.ObservableCount$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L464d56.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464d68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464d6c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L464d72.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464d2c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464d30.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L464d36.  v0:= temp;
  #L464d38.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCount$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L464d84.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464d88.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableCount$a.c` @type ^`long` @kind wide;
  #L464d8c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L464d92.  v1:= temp @kind object;
  #L464d94.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L464d9a.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464d9e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L464da4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCount$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464db8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464dbc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L464dc2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCount$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L464dd4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCount$a.c` @type ^`long` @kind wide;
  #L464dd8.  v2:= 1L;
  #L464ddc.  v0:= v0 + v2 @kind long;
  #L464dde.  v4.`io.reactivex.internal.operators.observable.ObservableCount$a.c` @type ^`long` := v0 @kind wide;
  #L464de2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCount$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCount$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464df4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464df8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464dfe.  v0:= temp;
  #L464e00.  if v0 == 0 then goto L464e12;
  #L464e04.  v1.`io.reactivex.internal.operators.observable.ObservableCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L464e08.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCount$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464e0c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L464e12.  return @kind void;
}
