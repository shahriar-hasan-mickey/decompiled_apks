record `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @AccessFlag VOLATILE;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L473a3c.  v0:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$a`;
  #L473a40.  v1:= 0I;
  #L473a42.  v2:= -1L;
  #L473a46.  v4:= 1I;
  #L473a48.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L473a4e.  `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` := v0 @kind object;
  #L473a52.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L473a58.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L473a6c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L473a72.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L473a76.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L473a7c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L473a80.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L473a84.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L473a88.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int` := v4;
  #L473a8c.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L473a90.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L473a94.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L473a9a.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L473a9e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L473ae0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473ae4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473aea.  v0:= temp @kind object;
  #L473aec.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L473af0.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L473af4.  if v0 == v1 then goto L473b1a;
  #L473af8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473afc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L473b02.  v0:= temp @kind object;
  #L473b04.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L473b08.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L473b0c.  if v0 == v1 then goto L473b1a;
  #L473b10.  if v0 == 0 then goto L473b1a;
  #L473b14.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L473b1a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L473b2c.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L473b32.  v0:= temp;
  #L473b34.  if v0 == 0 then goto L473b3a;
  #L473b38.  return @kind void;
  #L473b3a.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L473b3e.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473b42.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L473b46.  v3:= 1I;
  #L473b48.  v4:= 1I;
  #L473b4a.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L473b4e.  if v5 == 0 then goto L473b54;
  #L473b52.  return @kind void;
  #L473b54.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L473b58.  v6:= 0I;
  #L473b5a.  if v5 == 0 then goto L473bd0;
  #L473b5e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473b64.  v5:= temp @kind object;
  #L473b66.  if v5 != 0 then goto L473b6e;
  #L473b6a.  v5:= 1I;
  #L473b6c.  goto L473b70;
  #L473b6e.  v5:= 0I;
  #L473b70.  if v2 == 0 then goto L473b9c;
  #L473b74.  if v5 == 0 then goto L473bd0;
  #L473b78.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473b7c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473b82.  v1:= temp @kind object;
  #L473b84.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L473b88.  if v1 == 0 then goto L473b94;
  #L473b8c.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L473b92.  goto L473b9a;
  #L473b94.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L473b9a.  return @kind void;
  #L473b9c.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473ba0.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473ba6.  v7:= temp @kind object;
  #L473ba8.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L473bac.  if v7 == 0 then goto L473bc4;
  #L473bb0.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473bb4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L473bba.  v1:= temp @kind object;
  #L473bbc.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L473bc2.  return @kind void;
  #L473bc4.  if v5 == 0 then goto L473bd0;
  #L473bc8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L473bce.  return @kind void;
  #L473bd0.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473bd6.  v5:= temp @kind object;
  #L473bd8.  v5:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v5 @kind object;
  #L473bdc.  if v5 == 0 then goto L473cfe;
  #L473be0.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L473be4.  if v7 == 0 then goto L473cfe;
  #L473be8.  v8:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L473bec.  v9:= 0I;
  #L473bee.  if v8 == 0 then goto L473c3e;
  #L473bf2.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L473bf8.  v8:= temp;
  #L473bfa.  if v2 == 0 then goto L473c0a;
  #L473bfe.  if v8 == 0 then goto L473c3e;
  #L473c02.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L473c08.  goto L473b4a;
  #L473c0a.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473c0e.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473c14.  v10:= temp @kind object;
  #L473c16.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L473c1a.  if v10 == 0 then goto L473c32;
  #L473c1e.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473c22.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L473c28.  v1:= temp @kind object;
  #L473c2a.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L473c30.  return @kind void;
  #L473c32.  if v8 == 0 then goto L473c3e;
  #L473c36.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L473c3c.  goto L473b4a;
  #L473c3e.  v8:= 0I;
  #L473c40.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L473c44.  if v10 == 0 then goto L473c4a;
  #L473c48.  return @kind void;
  #L473c4a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473c50.  v10:= temp @kind object;
  #L473c52.  if v5 == v10 then goto L473c5a;
  #L473c56.  v8:= 1I;
  #L473c58.  goto L473cee;
  #L473c5a.  if v2 != 0 then goto L473c86;
  #L473c5e.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473c62.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473c68.  v10:= temp @kind object;
  #L473c6a.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L473c6e.  if v10 == 0 then goto L473c86;
  #L473c72.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473c76.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L473c7c.  v1:= temp @kind object;
  #L473c7e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L473c84.  return @kind void;
  #L473c86.  v10:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L473c8a.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L473c90.  v11:= temp @kind object;
  #L473c92.  goto L473cd0;
  #L473c94.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L473c96.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L473c9c.  v11:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473ca0.  call temp:= `addThrowable`(v11, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L473ca6.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L473cac.  if v2 != 0 then goto L473cc6;
  #L473cb0.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L473cb6.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473cba.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473cc0.  v13.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v3 @kind boolean;
  #L473cc4.  goto L473ccc;
  #L473cc6.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L473ccc.  v11:= v9 @kind object;
  #L473cce.  v8:= 1I;
  #L473cd0.  if v11 != 0 then goto L473cd8;
  #L473cd4.  v12:= 1I;
  #L473cd6.  goto L473cda;
  #L473cd8.  v12:= 0I;
  #L473cda.  if v10 == 0 then goto L473cea;
  #L473cde.  if v12 == 0 then goto L473cea;
  #L473ce2.  call temp:= `compareAndSet`(v1, v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L473ce8.  goto L473c56;
  #L473cea.  if v12 == 0 then goto L473cf6;
  #L473cee.  if v8 == 0 then goto L473cfe;
  #L473cf2.  goto L473b4a;
  #L473cf6.  call `onNext`(v0, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L473cfc.  goto L473c40;
  #L473cfe.  v4:= -v4 @kind int;
  #L473d00.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L473d06.  v4:= temp;
  #L473d08.  if v4 != 0 then goto L473b4a;
  #L473d0c.  return @kind void;
  catch `java.lang.Throwable` @[L473c8a..L473c92] goto L473c94;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v6 @kind object, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L473d2c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L473d30.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L473d34.  v4:= lcmp(v0, v2);
  #L473d38.  if v4 != 0 then goto L473d70;
  #L473d3c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473d40.  call temp:= `addThrowable`(v0, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L473d46.  v0:= temp;
  #L473d48.  if v0 == 0 then goto L473d70;
  #L473d4c.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L473d50.  v0:= 1I;
  #L473d52.  if v7 != 0 then goto L473d64;
  #L473d56.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473d5a.  call `dispose`(v7) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473d60.  v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L473d64.  v6.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L473d68.  call `b`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L473d6e.  goto L473d76;
  #L473d70.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L473d76.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473ab0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L473ab4.  if v0 != 0 then goto L473ace;
  #L473ab8.  v0:= 1I;
  #L473aba.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L473abe.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473ac2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473ac8.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L473ace.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473a24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L473a28.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473d88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L473d8c.  if v0 != 0 then goto L473d9c;
  #L473d90.  v0:= 1I;
  #L473d92.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v0 @kind boolean;
  #L473d96.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L473d9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473db0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` @kind boolean;
  #L473db4.  if v0 != 0 then goto L473de4;
  #L473db8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L473dbc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L473dc2.  v0:= temp;
  #L473dc4.  if v0 == 0 then goto L473de4;
  #L473dc8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L473dcc.  if v2 != 0 then goto L473dd6;
  #L473dd0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.a:()V` @kind virtual;
  #L473dd6.  v2:= 1I;
  #L473dd8.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.f` @type ^`boolean` := v2 @kind boolean;
  #L473ddc.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L473de2.  goto L473dea;
  #L473de4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L473dea.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L473dfc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L473e00.  v2:= 1L;
  #L473e04.  v0:= v0 + v2 @kind long;
  #L473e06.  v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` := v0 @kind wide;
  #L473e0a.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473e0e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473e14.  v2:= temp @kind object;
  #L473e16.  v2:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v2 @kind object;
  #L473e1a.  if v2 == 0 then goto L473e24;
  #L473e1e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @kind virtual;
  #L473e24.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L473e28.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L473e2e.  v5:= temp @kind object;
  #L473e30.  v2:= "The ObservableSource returned is null" @kind object;
  #L473e34.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L473e3a.  v5:= temp @kind object;
  #L473e3c.  v5:= (`io.reactivex.ObservableSource`) v5 @kind object;
  #L473e40.  v2:= new `io.reactivex.internal.operators.observable.ObservableSwitchMap$a`;
  #L473e44.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.c` @type ^`int`;
  #L473e48.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @kind direct;
  #L473e4e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473e52.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L473e58.  v0:= temp @kind object;
  #L473e5a.  v0:= (`io.reactivex.internal.operators.observable.ObservableSwitchMap$a`) v0 @kind object;
  #L473e5e.  v1:= `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$b.k` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind object;
  #L473e62.  if v0 != v1 then goto L473e68;
  #L473e66.  goto L473e7e;
  #L473e68.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473e6c.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L473e72.  v0:= temp;
  #L473e74.  if v0 == 0 then goto L473e4e;
  #L473e78.  call `subscribe`(v5, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L473e7e.  return @kind void;
  #L473e80.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L473e82.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L473e88.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473e8c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L473e92.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L473e98.  return @kind void;
  catch `java.lang.Throwable` @[L473e24..L473e40] goto L473e80;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473eb8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473ebc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L473ec2.  v0:= temp;
  #L473ec4.  if v0 == 0 then goto L473ed6;
  #L473ec8.  v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L473ecc.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L473ed0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L473ed6.  return @kind void;
}
