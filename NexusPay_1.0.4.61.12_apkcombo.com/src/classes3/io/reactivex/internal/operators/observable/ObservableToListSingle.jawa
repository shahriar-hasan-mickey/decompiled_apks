record `io.reactivex.internal.operators.observable.ObservableToListSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToObservable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableToListSingle.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableToListSingle.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableToListSingle` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle;.<init>:(Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L476410.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L476416.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle.a` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L47641a.  call temp:= `createArrayList`(v2) @signature `Lio/reactivex/internal/functions/Functions;.createArrayList:(I)Ljava/util/concurrent/Callable;` @kind static;
  #L476420.  v1:= temp @kind object;
  #L476422.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle.b` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L476426.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableToListSingle` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle;.<init>:(Lio/reactivex/ObservableSource;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L476438.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L47643e.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle.a` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L476442.  v0.`io.reactivex.internal.operators.observable.ObservableToListSingle.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L476446.  return @kind void;
}
procedure `io.reactivex.Observable` `fuseToObservable`(`io.reactivex.internal.operators.observable.ObservableToListSingle` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle;.fuseToObservable:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4763e4.  v0:= new `io.reactivex.internal.operators.observable.ObservableToList`;
  #L4763e8.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableToListSingle.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4763ec.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableToListSingle.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4763f0.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableToList;.<init>:(Lio/reactivex/ObservableSource;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L4763f6.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L4763fc.  v0:= temp @kind object;
  #L4763fe.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableToListSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L476458.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableToListSingle.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L47645c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L476462.  v0:= temp @kind object;
  #L476464.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L476468.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47646e.  v0:= temp @kind object;
  #L476470.  v0:= (`java.util.Collection`) v0 @kind object;
  #L476474.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableToListSingle.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L476478.  v2:= new `io.reactivex.internal.operators.observable.ObservableToListSingle$a`;
  #L47647c.  call `<init>`(v2, v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableToListSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @kind direct;
  #L476482.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L476488.  return @kind void;
  #L47648a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47648c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L476492.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L476498.  return @kind void;
  catch `java.lang.Throwable` @[L476458..L476474] goto L47648a;
}
