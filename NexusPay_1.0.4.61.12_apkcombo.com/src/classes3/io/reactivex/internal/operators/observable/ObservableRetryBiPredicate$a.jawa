record `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BiPredicate` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiPredicate;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L470cbc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L470cc2.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L470cc6.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L470cca.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.c` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L470cce.  v0.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` := v2 @kind object;
  #L470cd2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L470dbc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L470dc2.  v0:= temp;
  #L470dc4.  if v0 != 0 then goto L470df4;
  #L470dc8.  v0:= 1I;
  #L470dca.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L470dce.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L470dd4.  v1:= temp;
  #L470dd6.  if v1 == 0 then goto L470ddc;
  #L470dda.  return @kind void;
  #L470ddc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L470de0.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L470de6.  v0:= -v0 @kind int;
  #L470de8.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L470dee.  v0:= temp;
  #L470df0.  if v0 != 0 then goto L470dca;
  #L470df4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470ce4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470ce8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L470cee.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L470d00.  v0:= 1I;
  #L470d02.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L470d06.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.e` @type ^`int`;
  #L470d0a.  v2:= v2 + v0 @kind int;
  #L470d0c.  v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.e` @type ^`int` := v2;
  #L470d10.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L470d16.  v2:= temp @kind object;
  #L470d18.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L470d1e.  v0:= temp;
  #L470d20.  if v0 != 0 then goto L470d30;
  #L470d24.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470d28.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L470d2e.  return @kind void;
  #L470d30.  call `a`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.a:()V` @kind virtual;
  #L470d36.  return @kind void;
  #L470d38.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470d3a.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L470d40.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470d44.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L470d48.  v4:= 2I;
  #L470d4a.  v4:= new `java.lang.Throwable`[v4];
  #L470d4e.  v5:= 0I;
  #L470d50.  v4[v5]:= v7 @kind object;
  #L470d54.  v4[v0]:= v1 @kind object;
  #L470d58.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L470d5e.  call `onError`(v2, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L470d64.  return @kind void;
  catch `java.lang.Throwable` @[L470d02..L470d20] goto L470d38;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470d84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L470d88.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L470d8e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRetryBiPredicate$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470da0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L470da4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L470daa.  return @kind void;
}
