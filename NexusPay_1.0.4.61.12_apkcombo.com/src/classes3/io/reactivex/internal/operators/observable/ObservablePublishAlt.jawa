record `io.reactivex.internal.operators.observable.ObservablePublishAlt` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservablePublishAlt.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublishAlt` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.<init>:(Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46e514.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L46e51a.  v0.`io.reactivex.internal.operators.observable.ObservablePublishAlt.a` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L46e51e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46e522.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46e528.  v0.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46e52c.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservablePublishAlt` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e540.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e544.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e54a.  v0:= temp @kind object;
  #L46e54c.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$b`) v0 @kind object;
  #L46e550.  if v0 == 0 then goto L46e560;
  #L46e554.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.isDisposed:()Z` @kind virtual;
  #L46e55a.  v1:= temp;
  #L46e55c.  if v1 == 0 then goto L46e582;
  #L46e560.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$b`;
  #L46e564.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e568.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e56e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e572.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e578.  v0:= temp;
  #L46e57a.  if v0 != 0 then goto L46e580;
  #L46e57e.  goto L46e540;
  #L46e580.  v0:= v1 @kind object;
  #L46e582.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46e586.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46e58c.  v1:= temp;
  #L46e58e.  v2:= 1I;
  #L46e590.  v3:= 0I;
  #L46e592.  if v1 != 0 then goto L46e5a8;
  #L46e596.  v1:= v0.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46e59a.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46e5a0.  v1:= temp;
  #L46e5a2.  if v1 == 0 then goto L46e5a8;
  #L46e5a6.  goto L46e5aa;
  #L46e5a8.  v2:= 0I;
  #L46e5aa.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L46e5b0.  if v2 == 0 then goto L46e5be;
  #L46e5b4.  v5:= v4.`io.reactivex.internal.operators.observable.ObservablePublishAlt.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e5b8.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46e5be.  return @kind void;
  #L46e5c0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46e5c2.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46e5c8.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L46e5ce.  v5:= temp @kind object;
  #L46e5d0.  throw v5;
  catch `java.lang.Throwable` @[L46e5aa..L46e5b0] goto L46e5c0;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.observable.ObservablePublishAlt` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46e5f0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e5f4.  v3:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$b`) v3 @kind object;
  #L46e5f8.  v1:= 0I;
  #L46e5fa.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e600.  return @kind void;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservablePublishAlt` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e4fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublishAlt.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46e500.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservablePublishAlt` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L46e614.  v0:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e618.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e61e.  v0:= temp @kind object;
  #L46e620.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublishAlt$b`) v0 @kind object;
  #L46e624.  if v0 != 0 then goto L46e64a;
  #L46e628.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$b`;
  #L46e62c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e630.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e636.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublishAlt.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e63a.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e640.  v0:= temp;
  #L46e642.  if v0 != 0 then goto L46e648;
  #L46e646.  goto L46e614;
  #L46e648.  v0:= v1 @kind object;
  #L46e64a.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt$a`;
  #L46e64e.  call `<init>`(v1, v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;)V` @kind direct;
  #L46e654.  call `onSubscribe`(v4, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46e65a.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;)Z` @kind virtual;
  #L46e660.  v2:= temp;
  #L46e662.  if v2 == 0 then goto L46e67a;
  #L46e666.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;.isDisposed:()Z` @kind virtual;
  #L46e66c.  v4:= temp;
  #L46e66e.  if v4 == 0 then goto L46e678;
  #L46e672.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublishAlt$a;)V` @kind virtual;
  #L46e678.  return @kind void;
  #L46e67a.  v0:= v0.`io.reactivex.internal.operators.observable.ObservablePublishAlt$b.d` @type ^`java.lang.Throwable` @kind object;
  #L46e67e.  if v0 == 0 then goto L46e68a;
  #L46e682.  call `onError`(v4, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46e688.  goto L46e690;
  #L46e68a.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46e690.  return @kind void;
}
