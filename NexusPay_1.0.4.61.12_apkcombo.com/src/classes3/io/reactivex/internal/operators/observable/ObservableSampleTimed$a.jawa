record `io.reactivex.internal.operators.observable.ObservableSampleTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleTimed$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleTimed$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L471370.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L471376.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47137a.  v2:= 1I;
  #L47137c.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L471382.  v0.`io.reactivex.internal.operators.observable.ObservableSampleTimed$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L471386.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L471398.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.c:()V` @kind virtual;
  #L47139e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4713a2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4713a8.  v0:= temp;
  #L4713aa.  if v0 != 0 then goto L4713b8;
  #L4713ae.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4713b2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4713b8.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4713cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4713d0.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L4713d6.  v0:= temp;
  #L4713d8.  v1:= 2I;
  #L4713da.  if v0 != v1 then goto L4713fe;
  #L4713de.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.c:()V` @kind virtual;
  #L4713e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4713e8.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4713ee.  v0:= temp;
  #L4713f0.  if v0 != 0 then goto L4713fe;
  #L4713f4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4713f8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4713fe.  return @kind void;
}
