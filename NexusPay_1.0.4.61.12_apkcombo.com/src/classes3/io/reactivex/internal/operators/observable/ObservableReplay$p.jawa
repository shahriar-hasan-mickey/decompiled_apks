record `io.reactivex.internal.operators.observable.ObservableReplay$p` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.observable.ObservableReplay$h` @kind interface {
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$p.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$p.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$p` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$p;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4708e4.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4708ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableReplay$p` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$p;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L470928.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L47092e.  v1:= temp @kind object;
  #L470930.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L470936.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int`;
  #L47093a.  v1:= v1 + 1;
  #L47093e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int` := v1;
  #L470942.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableReplay$p` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$p;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L470954.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L47095a.  v1:= temp @kind object;
  #L47095c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L470962.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int`;
  #L470966.  v1:= v1 + 1;
  #L47096a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int` := v1;
  #L47096e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableReplay$p` v5 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$p;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L470980.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L470986.  v0:= temp;
  #L470988.  if v0 == 0 then goto L47098e;
  #L47098c.  return @kind void;
  #L47098e.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.b` @type ^`io.reactivex.Observer` @kind object;
  #L470992.  v1:= 1I;
  #L470994.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L47099a.  v2:= temp;
  #L47099c.  if v2 == 0 then goto L4709a2;
  #L4709a0.  return @kind void;
  #L4709a2.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int`;
  #L4709a6.  call temp:= `a`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L4709ac.  v3:= temp @kind object;
  #L4709ae.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L4709b2.  if v3 == 0 then goto L4709c0;
  #L4709b6.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L4709bc.  v3:= temp;
  #L4709be.  goto L4709c2;
  #L4709c0.  v3:= 0I;
  #L4709c2.  if v3 >= v2 then goto L4709f0;
  #L4709c6.  call temp:= `get`(v5, v3) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L4709cc.  v4:= temp @kind object;
  #L4709ce.  call temp:= `accept`(v4, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L4709d4.  v4:= temp;
  #L4709d6.  if v4 == 0 then goto L4709dc;
  #L4709da.  return @kind void;
  #L4709dc.  call temp:= `isDisposed`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4709e2.  v4:= temp;
  #L4709e4.  if v4 == 0 then goto L4709ea;
  #L4709e8.  return @kind void;
  #L4709ea.  v3:= v3 + 1;
  #L4709ee.  goto L4709c2;
  #L4709f0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4709f6.  v2:= temp @kind object;
  #L4709f8.  v6.`io.reactivex.internal.operators.observable.ObservableReplay$d.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4709fc.  v1:= -v1 @kind int;
  #L4709fe.  call temp:= `addAndGet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L470a04.  v1:= temp;
  #L470a06.  if v1 != 0 then goto L470994;
  #L470a0a.  return @kind void;
}
procedure `void` `complete`(`io.reactivex.internal.operators.observable.ObservableReplay$p` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$p;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4708fc.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L470902.  v0:= temp @kind object;
  #L470904.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L47090a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int`;
  #L47090e.  v0:= v0 + 1;
  #L470912.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$p.a` @type ^`int` := v0;
  #L470916.  return @kind void;
}
