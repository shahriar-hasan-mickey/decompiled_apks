record `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L467ff4.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L467ffa.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L467ffe.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L468002.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L468006.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46800a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L468010.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L468014.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L468018.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L46801e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L468022.  v1:= 1I;
  #L468024.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46802a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.a:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L46807c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468080.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468086.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L46808c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L46803c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468050.  v0:= 1I;
  #L468052.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L468056.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46805a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L468060.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468064.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46806a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4680a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4680a4.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4680aa.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4680b0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L467f94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L467f98.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L467f9e.  v0:= temp;
  #L467fa0.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L467fb4.  v0:= 1I;
  #L467fb6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4680c4.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4680ca.  v0:= temp;
  #L4680cc.  if v0 != 0 then goto L4680f6;
  #L4680d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4680d4.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4680da.  v0:= temp @kind object;
  #L4680dc.  if v0 == 0 then goto L4680ec;
  #L4680e0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4680e4.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4680ea.  goto L4680f6;
  #L4680ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4680f0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4680f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468108.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46810c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L468112.  v0:= temp;
  #L468114.  if v0 == 0 then goto L468170;
  #L468118.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L46811c.  if v2 == 0 then goto L468144;
  #L468120.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468126.  v2:= temp;
  #L468128.  if v2 != 0 then goto L468176;
  #L46812c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468130.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468136.  v2:= temp @kind object;
  #L468138.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46813c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L468142.  goto L468176;
  #L468144.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.dispose:()V` @kind virtual;
  #L46814a.  v2:= 0I;
  #L46814c.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L468152.  v2:= temp;
  #L468154.  if v2 <= 0 then goto L468176;
  #L468158.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46815c.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468162.  v2:= temp @kind object;
  #L468164.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468168.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46816e.  goto L468176;
  #L468170.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L468176.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L468188.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L46818c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L468192.  v3:= temp @kind object;
  #L468194.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L468198.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46819e.  v3:= temp @kind object;
  #L4681a0.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L4681a4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4681aa.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a$a`;
  #L4681ae.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;)V` @kind direct;
  #L4681b4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.g` @type ^`boolean` @kind boolean;
  #L4681b8.  if v1 != 0 then goto L4681d2;
  #L4681bc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4681c0.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4681c6.  v1:= temp;
  #L4681c8.  if v1 == 0 then goto L4681d2;
  #L4681cc.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L4681d2.  return @kind void;
  #L4681d4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4681d6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4681dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4681e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4681e6.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4681ec.  return @kind void;
  catch `java.lang.Throwable` @[L468188..L4681a4] goto L4681d4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46820c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468210.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L468216.  v0:= temp;
  #L468218.  if v0 == 0 then goto L46822a;
  #L46821c.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L468220.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468224.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46822a.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L467fe0.  v0:= 0I;
  #L467fe2.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L467fc8.  v1:= v1 ^& 2;
  #L467fcc.  return v1;
}
