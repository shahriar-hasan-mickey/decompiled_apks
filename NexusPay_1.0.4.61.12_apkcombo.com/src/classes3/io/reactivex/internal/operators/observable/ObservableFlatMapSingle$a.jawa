record `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L468d94.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L468d9a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L468d9e.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L468da2.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L468da6.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L468daa.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L468db0.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L468db4.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L468db8.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L468dbe.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L468dc2.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L468dc6.  v2:= 1I;
  #L468dc8.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L468dce.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L468dd2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L468dd6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L468ddc.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L468de0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L468df4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468df8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468dfe.  v0:= temp @kind object;
  #L468e00.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L468e04.  if v0 == 0 then goto L468e0e;
  #L468e08.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L468e0e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L468e4c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L468e52.  v0:= temp;
  #L468e54.  if v0 != 0 then goto L468e5e;
  #L468e58.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L468e5e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L468e70.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468e74.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468e78.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468e7c.  v3:= 1I;
  #L468e7e.  v4:= 1I;
  #L468e80.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L468e84.  if v5 == 0 then goto L468e90;
  #L468e88.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L468e8e.  return @kind void;
  #L468e90.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L468e94.  if v5 != 0 then goto L468ec6;
  #L468e98.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468e9c.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468ea2.  v5:= temp @kind object;
  #L468ea4.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L468ea8.  if v5 == 0 then goto L468ec6;
  #L468eac.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468eb0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468eb6.  v1:= temp @kind object;
  #L468eb8.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.a:()V` @kind virtual;
  #L468ebe.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L468ec4.  return @kind void;
  #L468ec6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L468ecc.  v5:= temp;
  #L468ece.  v6:= 0I;
  #L468ed0.  if v5 != 0 then goto L468ed8;
  #L468ed4.  v5:= 1I;
  #L468ed6.  goto L468eda;
  #L468ed8.  v5:= 0I;
  #L468eda.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468ee0.  v7:= temp @kind object;
  #L468ee2.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L468ee6.  if v7 == 0 then goto L468ef4;
  #L468eea.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L468ef0.  v7:= temp @kind object;
  #L468ef2.  goto L468ef6;
  #L468ef4.  v7:= 0I;
  #L468ef6.  if v7 != 0 then goto L468efc;
  #L468efa.  v6:= 1I;
  #L468efc.  if v5 == 0 then goto L468f24;
  #L468f00.  if v6 == 0 then goto L468f24;
  #L468f04.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468f08.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468f0e.  v1:= temp @kind object;
  #L468f10.  if v1 == 0 then goto L468f1c;
  #L468f14.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L468f1a.  goto L468f22;
  #L468f1c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L468f22.  return @kind void;
  #L468f24.  if v6 == 0 then goto L468f38;
  #L468f28.  v4:= -v4 @kind int;
  #L468f2a.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L468f30.  v4:= temp;
  #L468f32.  if v4 != 0 then goto L468e80;
  #L468f36.  return @kind void;
  #L468f38.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L468f3e.  goto L468e80;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L468d48.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468d4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468d52.  v0:= temp @kind object;
  #L468d54.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L468d58.  if v0 == 0 then goto L468d5e;
  #L468d5c.  return v0 @kind object;
  #L468d5e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L468d62.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L468d68.  v1:= temp;
  #L468d6a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L468d70.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468d74.  v2:= 0I;
  #L468d76.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L468d7c.  v1:= temp;
  #L468d7e.  if v1 == 0 then goto L468d48;
  #L468d82.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468e20.  v0:= 1I;
  #L468e22.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` := v0 @kind boolean;
  #L468e26.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468e2a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L468e30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468e34.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L468e3a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L468f50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468f54.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468f5a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468f5e.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L468f64.  v2:= temp;
  #L468f66.  if v2 == 0 then goto L468f98;
  #L468f6a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L468f6e.  if v2 != 0 then goto L468f86;
  #L468f72.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468f76.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L468f7c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468f80.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L468f86.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468f8a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468f90.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L468f96.  goto L468f9e;
  #L468f98.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L468f9e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L468fb0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468fb4.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468fba.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L468fc0.  v3:= temp;
  #L468fc2.  if v3 != 0 then goto L46904c;
  #L468fc6.  v3:= 0I;
  #L468fc8.  v0:= 1I;
  #L468fca.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L468fd0.  v1:= temp;
  #L468fd2.  if v1 == 0 then goto L46904c;
  #L468fd6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468fda.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L468fe0.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468fe4.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468fea.  v4:= temp;
  #L468fec.  if v4 != 0 then goto L468ff2;
  #L468ff0.  v3:= 1I;
  #L468ff2.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468ff6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468ffc.  v4:= temp @kind object;
  #L468ffe.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L469002.  if v3 == 0 then goto L46903e;
  #L469006.  if v4 == 0 then goto L469016;
  #L46900a.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L469010.  v3:= temp;
  #L469012.  if v3 == 0 then goto L46903e;
  #L469016.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46901a.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L469020.  v3:= temp @kind object;
  #L469022.  if v3 == 0 then goto L469032;
  #L469026.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46902a.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L469030.  goto L46903c;
  #L469032.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469036.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46903c.  return @kind void;
  #L46903e.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L469044.  v3:= temp;
  #L469046.  if v3 != 0 then goto L469076;
  #L46904a.  return @kind void;
  #L46904c.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L469052.  v3:= temp @kind object;
  #L469054.  @monitorenter v3
  #L469056.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L46905c.  @monitorexit v3
  #L46905e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L469062.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L469068.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46906e.  v3:= temp;
  #L469070.  if v3 == 0 then goto L469076;
  #L469074.  return @kind void;
  #L469076.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.c:()V` @kind virtual;
  #L46907c.  return @kind void;
  #L46907e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L469080.  @monitorexit v3
  #L469082.  throw v4;
  catch `java.lang.Throwable` @[L469056..L46905e] goto L46907e;
  catch `java.lang.Throwable` @[L469080..L469082] goto L46907e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468d30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L468d34.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4690a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4690ac.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4690b2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4690b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4690cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4690d0.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4690d6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4690da.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4690e0.  v0:= temp;
  #L4690e2.  if v0 == 0 then goto L469100;
  #L4690e6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L4690ea.  if v2 != 0 then goto L4690f8;
  #L4690ee.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4690f2.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4690f8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.b:()V` @kind virtual;
  #L4690fe.  goto L469106;
  #L469100.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L469106.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L469118.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L46911c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L469122.  v3:= temp @kind object;
  #L469124.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L469128.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46912e.  v3:= temp @kind object;
  #L469130.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L469134.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L469138.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46913e.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a$a`;
  #L469142.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;)V` @kind direct;
  #L469148.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.i` @type ^`boolean` @kind boolean;
  #L46914c.  if v1 != 0 then goto L469166;
  #L469150.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L469154.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46915a.  v1:= temp;
  #L46915c.  if v1 == 0 then goto L469166;
  #L469160.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L469166.  return @kind void;
  #L469168.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46916a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L469170.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L469174.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46917a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L469180.  return @kind void;
  catch `java.lang.Throwable` @[L469118..L469134] goto L469168;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4691a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4691a4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4691aa.  v0:= temp;
  #L4691ac.  if v0 == 0 then goto L4691be;
  #L4691b0.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4691b4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4691b8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4691be.  return @kind void;
}
