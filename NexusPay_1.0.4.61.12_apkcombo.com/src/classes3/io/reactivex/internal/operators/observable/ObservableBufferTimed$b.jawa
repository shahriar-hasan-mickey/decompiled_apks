record `io.reactivex.internal.operators.observable.ObservableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L462390.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L462394.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L46239a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4623a0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4623a4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4623aa.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4623ae.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L4623b2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` := v4 @kind wide;
  #L4623b6.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4623ba.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L4623be.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4623ec.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4623f0.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4623f6.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4623d0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4623d4.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4623da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462408.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46240c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L462412.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462416.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46241c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L462364.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462368.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46236e.  v0:= temp @kind object;
  #L462370.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L462374.  if v0 != v1 then goto L46237c;
  #L462378.  v0:= 1I;
  #L46237a.  goto L46237e;
  #L46237c.  v0:= 0I;
  #L46237e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462430.  @monitorenter v4
  #L462432.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L462436.  v1:= 0I;
  #L462438.  v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L46243c.  @monitorexit v4
  #L46243e.  if v0 == 0 then goto L46246e;
  #L462442.  v2:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L462446.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46244c.  v0:= 1I;
  #L46244e.  v4.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L462452.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L462458.  v0:= temp;
  #L46245a.  if v0 == 0 then goto L46246e;
  #L46245e.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L462462.  v2:= v4.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462466.  v3:= 0I;
  #L462468.  call `drainLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L46246e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462472.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L462478.  return @kind void;
  #L46247a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46247c.  @monitorexit v4
  #L46247e.  throw v0;
  catch `java.lang.Throwable` @[L462432..L46243e] goto L46247a;
  catch `java.lang.Throwable` @[L46247c..L46247e] goto L46247a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4624a4.  @monitorenter v1
  #L4624a6.  v0:= 0I;
  #L4624a8.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L4624ac.  @monitorexit v1
  #L4624ae.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4624b2.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4624b8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4624bc.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4624c2.  return @kind void;
  #L4624c4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4624c6.  @monitorexit v1
  #L4624c8.  throw v2;
  catch `java.lang.Throwable` @[L4624a8..L4624ae] goto L4624c4;
  catch `java.lang.Throwable` @[L4624c6..L4624c8] goto L4624c4;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4624f0.  @monitorenter v1
  #L4624f2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4624f6.  if v0 != 0 then goto L4624fe;
  #L4624fa.  @monitorexit v1
  #L4624fc.  return @kind void;
  #L4624fe.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L462504.  @monitorexit v1
  #L462506.  return @kind void;
  #L462508.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46250a.  @monitorexit v1
  #L46250c.  throw v2;
  catch `java.lang.Throwable` @[L4624f2..L46250c] goto L462508;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46252c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462530.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L462536.  v0:= temp;
  #L462538.  if v0 == 0 then goto L4625bc;
  #L46253c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.f` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L462540.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L462544.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L46254a.  v8:= temp @kind object;
  #L46254c.  v0:= "The buffer supplied is null" @kind object;
  #L462550.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L462556.  v8:= temp @kind object;
  #L462558.  v8:= (`java.util.Collection`) v8 @kind object;
  #L46255c.  v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v8 @kind object;
  #L462560.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462564.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46256a.  v8:= v7.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L46256e.  if v8 != 0 then goto L4625bc;
  #L462572.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L462576.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.c` @type ^`long` @kind wide;
  #L46257a.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L46257e.  v1:= v7 @kind object;
  #L462580.  v2:= v4 @kind wide;
  #L462582.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L462588.  v8:= temp @kind object;
  #L46258a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46258e.  v1:= 0I;
  #L462590.  call temp:= `compareAndSet`(v0, v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L462596.  v0:= temp;
  #L462598.  if v0 != 0 then goto L4625bc;
  #L46259c.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4625a2.  goto L4625bc;
  #L4625a4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4625a6.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4625ac.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L4625b2.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4625b6.  call `error`(v8, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L4625bc.  return @kind void;
  catch `java.lang.Throwable` @[L462540..L46255c] goto L4625a4;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4625dc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4625e0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4625e6.  v0:= temp @kind object;
  #L4625e8.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L4625ec.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4625f2.  v0:= temp @kind object;
  #L4625f4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4625f8.  @monitorenter v2
  #L4625fa.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` @kind object;
  #L4625fe.  if v1 == 0 then goto L462606;
  #L462602.  v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L462606.  @monitorexit v2
  #L462608.  if v1 != 0 then goto L462618;
  #L46260c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$b.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462610.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L462616.  return @kind void;
  #L462618.  v0:= 0I;
  #L46261a.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L462620.  return @kind void;
  #L462622.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462624.  @monitorexit v2
  #L462626.  throw v0;
  #L462628.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46262a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L462630.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462634.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46263a.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$b;.dispose:()V` @kind virtual;
  #L462640.  return @kind void;
  catch `java.lang.Throwable` @[L4625dc..L4625f8] goto L462628;
  catch `java.lang.Throwable` @[L4625fa..L462608] goto L462622;
  catch `java.lang.Throwable` @[L462624..L462626] goto L462622;
}
