record `io.reactivex.internal.operators.observable.ObservableGroupBy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.ObservableSource` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.<init>:(ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46a2bc.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46a2c2.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L46a2c6.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L46a2cc.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L46a2d0.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L46a2d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L46a2da.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L46a2de.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46a2e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46a2e8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L46a2ec.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46a2f0.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46a2f6.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L46a2fa.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` := v3 @kind object;
  #L46a2fe.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` := v4 @kind object;
  #L46a302.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` := v5 @kind boolean;
  #L46a306.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `boolean` v4 , `boolean` v5 , `io.reactivex.Observer` v6 @kind object, `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.a:(ZZLio/reactivex/Observer;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L46a1e8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a1ec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46a1f2.  v0:= temp;
  #L46a1f4.  v1:= 1I;
  #L46a1f6.  v2:= 0I;
  #L46a1f8.  if v0 == 0 then goto L46a220;
  #L46a1fc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a200.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a206.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L46a20a.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L46a20e.  call `cancel`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L46a214.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a218.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a21e.  return v1;
  #L46a220.  if v4 == 0 then goto L46a288;
  #L46a224.  if v7 == 0 then goto L46a24e;
  #L46a228.  if v5 == 0 then goto L46a288;
  #L46a22c.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L46a230.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a234.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a23a.  if v4 == 0 then goto L46a246;
  #L46a23e.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46a244.  goto L46a24c;
  #L46a246.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46a24c.  return v1;
  #L46a24e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` @kind object;
  #L46a252.  if v4 == 0 then goto L46a272;
  #L46a256.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a25a.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a260.  v5:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a264.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a26a.  call `onError`(v6, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46a270.  return v1;
  #L46a272.  if v5 == 0 then goto L46a288;
  #L46a276.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a27a.  call `lazySet`(v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a280.  call `onComplete`(v6) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46a286.  return v1;
  #L46a288.  v4:= 0I;
  #L46a28a.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L46a364.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46a36a.  v0:= temp;
  #L46a36c.  if v0 == 0 then goto L46a372;
  #L46a370.  return @kind void;
  #L46a372.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a376.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.d` @type ^`boolean` @kind boolean;
  #L46a37a.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a37e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46a384.  v2:= temp @kind object;
  #L46a386.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L46a38a.  v3:= 1I;
  #L46a38c.  v4:= 1I;
  #L46a38e.  if v2 == 0 then goto L46a3c4;
  #L46a392.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` @kind boolean;
  #L46a396.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46a39c.  v6:= temp @kind object;
  #L46a39e.  if v6 != 0 then goto L46a3a6;
  #L46a3a2.  v7:= 1I;
  #L46a3a4.  goto L46a3a8;
  #L46a3a6.  v7:= 0I;
  #L46a3a8.  call temp:= `a`(v8, v5, v7, v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.a:(ZZLio/reactivex/Observer;Z)Z` @kind virtual;
  #L46a3ae.  v5:= temp;
  #L46a3b0.  if v5 == 0 then goto L46a3b6;
  #L46a3b4.  return @kind void;
  #L46a3b6.  if v7 == 0 then goto L46a3bc;
  #L46a3ba.  goto L46a3c4;
  #L46a3bc.  call `onNext`(v2, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46a3c2.  goto L46a392;
  #L46a3c4.  v4:= -v4 @kind int;
  #L46a3c6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46a3cc.  v4:= temp;
  #L46a3ce.  if v4 != 0 then goto L46a3d4;
  #L46a3d2.  return @kind void;
  #L46a3d4.  if v2 != 0 then goto L46a38e;
  #L46a3d8.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a3dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46a3e2.  v2:= temp @kind object;
  #L46a3e4.  v2:= (`io.reactivex.Observer`) v2 @kind object;
  #L46a3e8.  goto L46a38e;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a3fc.  v0:= 1I;
  #L46a3fe.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v0 @kind boolean;
  #L46a402.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L46a408.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L46a41c.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.f` @type ^`java.lang.Throwable` := v1 @kind object;
  #L46a420.  v1:= 1I;
  #L46a422.  v0.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.e` @type ^`boolean` := v1 @kind boolean;
  #L46a426.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L46a42c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46a318.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a31c.  v1:= 0I;
  #L46a31e.  v2:= 1I;
  #L46a320.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46a326.  v0:= temp;
  #L46a328.  if v0 == 0 then goto L46a352;
  #L46a32c.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46a332.  v0:= temp;
  #L46a334.  if v0 != 0 then goto L46a352;
  #L46a338.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a33c.  v1:= 0I;
  #L46a33e.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a344.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind object;
  #L46a348.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.a` @type ^`java.lang.Object` @kind object;
  #L46a34c.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L46a352.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a440.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a444.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L46a44a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L46a450.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a29c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a2a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46a2a6.  v0:= temp;
  #L46a2a8.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$b` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46a464.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a468.  v1:= 0I;
  #L46a46a.  v2:= 1I;
  #L46a46c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46a472.  v0:= temp;
  #L46a474.  if v0 == 0 then goto L46a4ae;
  #L46a478.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46a47e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a482.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a488.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a48c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46a492.  v4:= temp;
  #L46a494.  if v4 == 0 then goto L46a4a6;
  #L46a498.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a49c.  v0:= 0I;
  #L46a49e.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46a4a4.  goto L46a4c2;
  #L46a4a6.  call `b`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$b;.b:()V` @kind virtual;
  #L46a4ac.  goto L46a4c2;
  #L46a4ae.  v0:= new `java.lang.IllegalStateException`;
  #L46a4b2.  v1:= "Only one Observer allowed!" @kind object;
  #L46a4b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46a4bc.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L46a4c2.  return @kind void;
}
