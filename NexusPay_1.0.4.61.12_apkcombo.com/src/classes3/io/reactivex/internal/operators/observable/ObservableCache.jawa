record `io.reactivex.internal.operators.observable.ObservableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class, `io.reactivex.Observer` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableCache.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableCache.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableCache.d` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.observable.ObservableCache$b` `io.reactivex.internal.operators.observable.ObservableCache.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCache$b` `io.reactivex.internal.operators.observable.ObservableCache.f` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCache.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableCache.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCache.i` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.internal.operators.observable.ObservableCache.j` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableCache$a`[] `@@io.reactivex.internal.operators.observable.ObservableCache.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L462d54.  v0:= 0I;
  #L462d56.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$a`[v0];
  #L462d5a.  `@@io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] := v1 @kind object;
  #L462d5e.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$a`[v0];
  #L462d62.  `@@io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] := v0 @kind object;
  #L462d66.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.Observable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.<init>:(Lio/reactivex/Observable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L462d78.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L462d7e.  v0.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`int` := v2;
  #L462d82.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L462d86.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L462d8c.  v0.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L462d90.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$b`;
  #L462d94.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L462d9a.  v0.`io.reactivex.internal.operators.observable.ObservableCache.e` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L462d9e.  v0.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L462da2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L462da6.  v2:= `@@io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L462daa.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L462db0.  v0.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L462db4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableCache` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.d:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462dc8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462dcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L462dd2.  v0:= temp @kind object;
  #L462dd4.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L462dd8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L462ddc.  if v0 != v1 then goto L462de2;
  #L462de0.  return @kind void;
  #L462de2.  v1:= length @variable v0;
  #L462de4.  v2:= v1 + 1;
  #L462de8.  v2:= new `io.reactivex.internal.operators.observable.ObservableCache$a`[v2];
  #L462dec.  v3:= 0I;
  #L462dee.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L462df4.  v2[v1]:= v5 @kind object;
  #L462df8.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462dfc.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L462e02.  v0:= temp;
  #L462e04.  if v0 == 0 then goto L462dc8;
  #L462e08.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableCache` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.e:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L462f48.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462f4c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L462f52.  v0:= temp @kind object;
  #L462f54.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L462f58.  v1:= length @variable v0;
  #L462f5a.  if v1 != 0 then goto L462f60;
  #L462f5e.  return @kind void;
  #L462f60.  v2:= -1I;
  #L462f62.  v3:= 0I;
  #L462f64.  v4:= 0I;
  #L462f66.  if v4 >= v1 then goto L462f7c;
  #L462f6a.  v5:= v0[v4] @kind object;
  #L462f6e.  if v5 != v7 then goto L462f76;
  #L462f72.  v2:= v4;
  #L462f74.  goto L462f7c;
  #L462f76.  v4:= v4 + 1;
  #L462f7a.  goto L462f66;
  #L462f7c.  if v2 >= 0 then goto L462f82;
  #L462f80.  return @kind void;
  #L462f82.  v4:= 1I;
  #L462f84.  if v1 != v4 then goto L462f8e;
  #L462f88.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.j` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L462f8c.  goto L462fac;
  #L462f8e.  v5:= v1 + -1;
  #L462f92.  v5:= new `io.reactivex.internal.operators.observable.ObservableCache$a`[v5];
  #L462f96.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L462f9c.  v3:= v2 + 1;
  #L462fa0.  v1:= v1 - v2 @kind int;
  #L462fa2.  v1:= v1 - v4 @kind int;
  #L462fa4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L462faa.  v1:= v5 @kind object;
  #L462fac.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462fb0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L462fb6.  v0:= temp;
  #L462fb8.  if v0 == 0 then goto L462f48;
  #L462fbc.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableCache` v14 @kind this, `io.reactivex.internal.operators.observable.ObservableCache$a` v15 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L462fd0.  call temp:= `getAndIncrement`(v15) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L462fd6.  v0:= temp;
  #L462fd8.  if v0 == 0 then goto L462fde;
  #L462fdc.  return @kind void;
  #L462fde.  v0:= v15.`io.reactivex.internal.operators.observable.ObservableCache$a.e` @type ^`long` @kind wide;
  #L462fe2.  v2:= v15.`io.reactivex.internal.operators.observable.ObservableCache$a.d` @type ^`int`;
  #L462fe6.  v3:= v15.`io.reactivex.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` @kind object;
  #L462fea.  v4:= v15.`io.reactivex.internal.operators.observable.ObservableCache$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L462fee.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L462ff2.  v6:= 1I;
  #L462ff4.  v7:= 1I;
  #L462ff6.  v8:= v15.`io.reactivex.internal.operators.observable.ObservableCache$a.f` @type ^`boolean` @kind boolean;
  #L462ffa.  v9:= 0I;
  #L462ffc.  if v8 == 0 then goto L463006;
  #L463000.  v15.`io.reactivex.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L463004.  return @kind void;
  #L463006.  v8:= v14.`io.reactivex.internal.operators.observable.ObservableCache.i` @type ^`boolean` @kind boolean;
  #L46300a.  v10:= v14.`io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L46300e.  v12:= 0I;
  #L463010.  v13:= lcmp(v10, v0);
  #L463014.  if v13 != 0 then goto L46301c;
  #L463018.  v10:= 1I;
  #L46301a.  goto L46301e;
  #L46301c.  v10:= 0I;
  #L46301e.  if v8 == 0 then goto L463042;
  #L463022.  if v10 == 0 then goto L463042;
  #L463026.  v15.`io.reactivex.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v9 @kind object;
  #L46302a.  v15:= v14.`io.reactivex.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` @kind object;
  #L46302e.  if v15 == 0 then goto L46303a;
  #L463032.  call `onError`(v4, v15) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463038.  goto L463040;
  #L46303a.  call `onComplete`(v4) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L463040.  return @kind void;
  #L463042.  if v10 != 0 then goto L46306a;
  #L463046.  if v2 != v5 then goto L463052;
  #L46304a.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` @kind object;
  #L46304e.  v3:= v2 @kind object;
  #L463050.  v2:= 0I;
  #L463052.  v8:= v3.`io.reactivex.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L463056.  v8:= v8[v2] @kind object;
  #L46305a.  call `onNext`(v4, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L463060.  v2:= v2 + v6 @kind int;
  #L463062.  v8:= 1L;
  #L463066.  v0:= v0 + v8 @kind long;
  #L463068.  goto L462ff6;
  #L46306a.  v15.`io.reactivex.internal.operators.observable.ObservableCache$a.e` @type ^`long` := v0 @kind wide;
  #L46306e.  v15.`io.reactivex.internal.operators.observable.ObservableCache$a.d` @type ^`int` := v2;
  #L463072.  v15.`io.reactivex.internal.operators.observable.ObservableCache$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v3 @kind object;
  #L463076.  v7:= -v7 @kind int;
  #L463078.  call temp:= `addAndGet`(v15, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46307e.  v7:= temp;
  #L463080.  if v7 != 0 then goto L462ff6;
  #L463084.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCache` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L462e1c.  v0:= 1I;
  #L462e1e.  v4.`io.reactivex.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v0 @kind boolean;
  #L462e22.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462e26.  v1:= `@@io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L462e2a.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L462e30.  v0:= temp @kind object;
  #L462e32.  v0:= (`io.reactivex.internal.operators.observable.ObservableCache$a`[]) v0 @kind object;
  #L462e36.  v1:= length @variable v0;
  #L462e38.  v2:= 0I;
  #L462e3a.  if v2 >= v1 then goto L462e4e;
  #L462e3e.  v3:= v0[v2] @kind object;
  #L462e42.  call `f`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L462e48.  v2:= v2 + 1;
  #L462e4c.  goto L462e3a;
  #L462e4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L462e60.  v3.`io.reactivex.internal.operators.observable.ObservableCache.h` @type ^`java.lang.Throwable` := v4 @kind object;
  #L462e64.  v4:= 1I;
  #L462e66.  v3.`io.reactivex.internal.operators.observable.ObservableCache.i` @type ^`boolean` := v4 @kind boolean;
  #L462e6a.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462e6e.  v0:= `@@io.reactivex.internal.operators.observable.ObservableCache.k` @type ^`io.reactivex.internal.operators.observable.ObservableCache$a`[] @kind object;
  #L462e72.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L462e78.  v4:= temp @kind object;
  #L462e7a.  v4:= (`io.reactivex.internal.operators.observable.ObservableCache$a`[]) v4 @kind object;
  #L462e7e.  v0:= length @variable v4;
  #L462e80.  v1:= 0I;
  #L462e82.  if v1 >= v0 then goto L462e96;
  #L462e86.  v2:= v4[v1] @kind object;
  #L462e8a.  call `f`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L462e90.  v1:= v1 + 1;
  #L462e94.  goto L462e82;
  #L462e96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L462ea8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`int`;
  #L462eac.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableCache.b` @type ^`int`;
  #L462eb0.  v2:= 0I;
  #L462eb2.  v3:= 1I;
  #L462eb4.  if v0 != v1 then goto L462edc;
  #L462eb8.  v1:= new `io.reactivex.internal.operators.observable.ObservableCache$b`;
  #L462ebc.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$b;.<init>:(I)V` @kind direct;
  #L462ec2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L462ec6.  v0[v2]:= v6 @kind object;
  #L462eca.  v5.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`int` := v3;
  #L462ece.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` @kind object;
  #L462ed2.  v6.`io.reactivex.internal.operators.observable.ObservableCache$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L462ed6.  v5.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` := v1 @kind object;
  #L462eda.  goto L462eee;
  #L462edc.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableCache.f` @type ^`io.reactivex.internal.operators.observable.ObservableCache$b` @kind object;
  #L462ee0.  v1:= v1.`io.reactivex.internal.operators.observable.ObservableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L462ee4.  v1[v0]:= v6 @kind object;
  #L462ee8.  v0:= v0 + v3 @kind int;
  #L462eea.  v5.`io.reactivex.internal.operators.observable.ObservableCache.g` @type ^`int` := v0;
  #L462eee.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`long` @kind wide;
  #L462ef2.  v3:= 1L;
  #L462ef6.  v0:= v0 + v3 @kind long;
  #L462ef8.  v5.`io.reactivex.internal.operators.observable.ObservableCache.d` @type ^`long` := v0 @kind wide;
  #L462efc.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L462f00.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L462f06.  v6:= temp @kind object;
  #L462f08.  v6:= (`io.reactivex.internal.operators.observable.ObservableCache$a`[]) v6 @kind object;
  #L462f0c.  v0:= length @variable v6;
  #L462f0e.  if v2 >= v0 then goto L462f22;
  #L462f12.  v1:= v6[v2] @kind object;
  #L462f16.  call `f`(v5, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L462f1c.  v2:= v2 + 1;
  #L462f20.  goto L462f0e;
  #L462f22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L462f34.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableCache` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L463098.  v0:= new `io.reactivex.internal.operators.observable.ObservableCache$a`;
  #L46309c.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCache$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableCache;)V` @kind direct;
  #L4630a2.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4630a8.  call `d`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.d:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4630ae.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4630b2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4630b8.  v4:= temp;
  #L4630ba.  if v4 != 0 then goto L4630de;
  #L4630be.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCache.a` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4630c2.  v1:= 0I;
  #L4630c4.  v2:= 1I;
  #L4630c6.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4630cc.  v4:= temp;
  #L4630ce.  if v4 == 0 then goto L4630de;
  #L4630d2.  v4:= v3.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4630d6.  call `subscribe`(v4, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4630dc.  goto L4630e4;
  #L4630de.  call `f`(v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCache;.f:(Lio/reactivex/internal/operators/observable/ObservableCache$a;)V` @kind virtual;
  #L4630e4.  return @kind void;
}
