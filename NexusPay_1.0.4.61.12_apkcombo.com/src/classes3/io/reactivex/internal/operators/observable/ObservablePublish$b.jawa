record `io.reactivex.internal.operators.observable.ObservablePublish$b` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservablePublish$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$b.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservablePublish$a`[] `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46df28.  v0:= 0I;
  #L46df2a.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v0];
  #L46df2e.  `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] := v1 @kind object;
  #L46df32.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v0];
  #L46df36.  `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] := v0 @kind object;
  #L46df3a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L46df4c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46df52.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46df56.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46df5c.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L46df60.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46df64.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46df68.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L46df6e.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L46df72.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L46df76.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L46df7a.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L46df80.  v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L46df84.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46dea8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46deac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46deb2.  v0:= temp @kind object;
  #L46deb4.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46deb8.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46debc.  v2:= 0I;
  #L46debe.  if v0 != v1 then goto L46dec4;
  #L46dec2.  return v2;
  #L46dec4.  v1:= length @variable v0;
  #L46dec6.  v3:= v1 + 1;
  #L46deca.  v3:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v3];
  #L46dece.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46ded4.  v3[v1]:= v5 @kind object;
  #L46ded8.  v1:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46dedc.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46dee2.  v0:= temp;
  #L46dee4.  if v0 == 0 then goto L46dea8;
  #L46dee8.  v5:= 1I;
  #L46deea.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v6 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L46e0e4.  v0:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e0e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e0ee.  v0:= temp @kind object;
  #L46e0f0.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46e0f4.  v1:= length @variable v0;
  #L46e0f6.  if v1 != 0 then goto L46e0fc;
  #L46e0fa.  return @kind void;
  #L46e0fc.  v2:= -1I;
  #L46e0fe.  v3:= 0I;
  #L46e100.  v4:= 0I;
  #L46e102.  if v4 >= v1 then goto L46e120;
  #L46e106.  v5:= v0[v4] @kind object;
  #L46e10a.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L46e110.  v5:= temp;
  #L46e112.  if v5 == 0 then goto L46e11a;
  #L46e116.  v2:= v4;
  #L46e118.  goto L46e120;
  #L46e11a.  v4:= v4 + 1;
  #L46e11e.  goto L46e102;
  #L46e120.  if v2 >= 0 then goto L46e126;
  #L46e124.  return @kind void;
  #L46e126.  v4:= 1I;
  #L46e128.  if v1 != v4 then goto L46e132;
  #L46e12c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.e` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46e130.  goto L46e150;
  #L46e132.  v5:= v1 + -1;
  #L46e136.  v5:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`[v5];
  #L46e13a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46e140.  v3:= v2 + 1;
  #L46e144.  v1:= v1 - v2 @kind int;
  #L46e146.  v1:= v1 - v4 @kind int;
  #L46e148.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L46e14e.  v1:= v5 @kind object;
  #L46e150.  v2:= v6.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e154.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e15a.  v0:= temp;
  #L46e15c.  if v0 == 0 then goto L46e0e4;
  #L46e160.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46df98.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46df9c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46dfa0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46dfa6.  v0:= temp @kind object;
  #L46dfa8.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46dfac.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46dfb0.  if v0 == v1 then goto L46dfca;
  #L46dfb4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46dfb8.  v1:= 0I;
  #L46dfba.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46dfc0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46dfc4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46dfca.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46defc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46df00.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46df06.  v0:= temp @kind object;
  #L46df08.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46df0c.  if v0 != v1 then goto L46df14;
  #L46df10.  v0:= 1I;
  #L46df12.  goto L46df16;
  #L46df14.  v0:= 0I;
  #L46df16.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46dfdc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46dfe0.  v1:= 0I;
  #L46dfe2.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46dfe8.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46dfec.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46dff0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46dff6.  v0:= temp @kind object;
  #L46dff8.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46dffc.  v1:= length @variable v0;
  #L46dffe.  v2:= 0I;
  #L46e000.  if v2 >= v1 then goto L46e018;
  #L46e004.  v3:= v0[v2] @kind object;
  #L46e008.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e00c.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46e012.  v2:= v2 + 1;
  #L46e016.  goto L46e000;
  #L46e018.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e02c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e030.  v1:= 0I;
  #L46e032.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e038.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e03c.  v1:= `@@io.reactivex.internal.operators.observable.ObservablePublish$b.f` @type ^`io.reactivex.internal.operators.observable.ObservablePublish$a`[] @kind object;
  #L46e040.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46e046.  v0:= temp @kind object;
  #L46e048.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46e04c.  v1:= length @variable v0;
  #L46e04e.  if v1 == 0 then goto L46e06e;
  #L46e052.  v1:= length @variable v0;
  #L46e054.  v2:= 0I;
  #L46e056.  if v2 >= v1 then goto L46e074;
  #L46e05a.  v3:= v0[v2] @kind object;
  #L46e05e.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e062.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46e068.  v2:= v2 + 1;
  #L46e06c.  goto L46e056;
  #L46e06e.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46e074.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46e088.  v0:= v4.`io.reactivex.internal.operators.observable.ObservablePublish$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e08c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e092.  v0:= temp @kind object;
  #L46e094.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$a`[]) v0 @kind object;
  #L46e098.  v1:= length @variable v0;
  #L46e09a.  v2:= 0I;
  #L46e09c.  if v2 >= v1 then goto L46e0b4;
  #L46e0a0.  v3:= v0[v2] @kind object;
  #L46e0a4.  v3:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46e0a8.  call `onNext`(v3, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46e0ae.  v2:= v2 + 1;
  #L46e0b2.  goto L46e09c;
  #L46e0b4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46e0c8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservablePublish$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e0cc.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46e0d2.  return @kind void;
}
