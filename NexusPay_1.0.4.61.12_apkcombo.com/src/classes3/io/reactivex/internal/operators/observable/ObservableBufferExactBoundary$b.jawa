record `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L461c7c.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L461c80.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L461c86.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L461c8c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L461c90.  v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L461c94.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L461cc4.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461cc8.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L461cce.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L461ca8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L461cac.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L461cb2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L461d2c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L461d30.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L461d36.  v0:= temp @kind object;
  #L461d38.  v1:= "The buffer supplied is null" @kind object;
  #L461d3c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L461d42.  v0:= temp @kind object;
  #L461d44.  v0:= (`java.util.Collection`) v0 @kind object;
  #L461d48.  @monitorenter v2
  #L461d4a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L461d4e.  if v1 != 0 then goto L461d56;
  #L461d52.  @monitorexit v2
  #L461d54.  return @kind void;
  #L461d56.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L461d5a.  @monitorexit v2
  #L461d5c.  v0:= 0I;
  #L461d5e.  call `fastPathEmit`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L461d64.  return @kind void;
  #L461d66.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461d68.  @monitorexit v2
  #L461d6a.  throw v0;
  #L461d6c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461d6e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461d74.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L461d7a.  v1:= v2.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461d7e.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L461d84.  return @kind void;
  catch `java.lang.Throwable` @[L461d2c..L461d48] goto L461d6c;
  catch `java.lang.Throwable` @[L461d4a..L461d5c] goto L461d66;
  catch `java.lang.Throwable` @[L461d68..L461d6a] goto L461d66;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461ce0.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461ce4.  if v0 != 0 then goto L461d18;
  #L461ce8.  v0:= 1I;
  #L461cea.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L461cee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L461cf2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461cf8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L461cfc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461d02.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L461d08.  v0:= temp;
  #L461d0a.  if v0 == 0 then goto L461d18;
  #L461d0e.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L461d12.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L461d18.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461c64.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461c68.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461db8.  @monitorenter v3
  #L461dba.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L461dbe.  if v0 != 0 then goto L461dc6;
  #L461dc2.  @monitorexit v3
  #L461dc4.  return @kind void;
  #L461dc6.  v1:= 0I;
  #L461dc8.  v3.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v1 @kind object;
  #L461dcc.  @monitorexit v3
  #L461dce.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L461dd2.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L461dd8.  v0:= 1I;
  #L461dda.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L461dde.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L461de4.  v0:= temp;
  #L461de6.  if v0 == 0 then goto L461dfa;
  #L461dea.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L461dee.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461df2.  v2:= 0I;
  #L461df4.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L461dfa.  return @kind void;
  #L461dfc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461dfe.  @monitorexit v3
  #L461e00.  throw v0;
  catch `java.lang.Throwable` @[L461dba..L461dce] goto L461dfc;
  catch `java.lang.Throwable` @[L461dfe..L461e00] goto L461dfc;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461e28.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.dispose:()V` @kind virtual;
  #L461e2e.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461e32.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L461e38.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461e4c.  @monitorenter v1
  #L461e4e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` @kind object;
  #L461e52.  if v0 != 0 then goto L461e5a;
  #L461e56.  @monitorexit v1
  #L461e58.  return @kind void;
  #L461e5a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L461e60.  @monitorexit v1
  #L461e62.  return @kind void;
  #L461e64.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461e66.  @monitorexit v1
  #L461e68.  throw v2;
  catch `java.lang.Throwable` @[L461e4e..L461e68] goto L461e64;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461e88.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L461e8c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L461e92.  v0:= temp;
  #L461e94.  if v0 == 0 then goto L461f06;
  #L461e98.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.d` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L461e9c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L461ea0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L461ea6.  v0:= temp @kind object;
  #L461ea8.  v1:= "The buffer supplied is null" @kind object;
  #L461eac.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L461eb2.  v0:= temp @kind object;
  #L461eb4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L461eb8.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L461ebc.  v3:= new `io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$a`;
  #L461ec0.  call `<init>`(v3, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferExactBoundary$b;)V` @kind direct;
  #L461ec6.  v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.e` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L461eca.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461ece.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L461ed4.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461ed8.  if v0 != 0 then goto L461f06;
  #L461edc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferExactBoundary$b.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L461ee0.  call `subscribe`(v0, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L461ee6.  goto L461f06;
  #L461ee8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461eea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461ef0.  v1:= 1I;
  #L461ef2.  v2.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L461ef6.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461efc.  v3:= v2.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461f00.  call `error`(v0, v3) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L461f06.  return @kind void;
  catch `java.lang.Throwable` @[L461e9c..L461eb8] goto L461ee8;
}
