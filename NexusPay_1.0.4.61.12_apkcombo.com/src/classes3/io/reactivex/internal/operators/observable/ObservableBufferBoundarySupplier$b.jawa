record `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4617cc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4617d0.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4617d6.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4617dc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4617e0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4617e6.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4617ea.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L4617ee.  v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L4617f2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L461820.  v1:= v0.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461824.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46182a.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L461804.  v2:= (`java.util.Collection`) v2 @kind object;
  #L461808.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L46180e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L461884.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461888.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46188e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4618a0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4618a4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4618aa.  v0:= temp @kind object;
  #L4618ac.  v1:= "The buffer supplied is null" @kind object;
  #L4618b0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4618b6.  v0:= temp @kind object;
  #L4618b8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4618bc.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L4618c0.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4618c6.  v1:= temp @kind object;
  #L4618c8.  v2:= "The boundary ObservableSource supplied is null" @kind object;
  #L4618cc.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4618d2.  v1:= temp @kind object;
  #L4618d4.  v1:= (`io.reactivex.ObservableSource`) v1 @kind object;
  #L4618d8.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a`;
  #L4618dc.  call `<init>`(v2, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @kind direct;
  #L4618e2.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4618e6.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4618ec.  v3:= temp;
  #L4618ee.  if v3 == 0 then goto L46191c;
  #L4618f2.  @monitorenter v4
  #L4618f4.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L4618f8.  if v3 != 0 then goto L461900;
  #L4618fc.  @monitorexit v4
  #L4618fe.  return @kind void;
  #L461900.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v0 @kind object;
  #L461904.  @monitorexit v4
  #L461906.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46190c.  v0:= 0I;
  #L46190e.  call `fastPathEmit`(v4, v3, v0, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L461914.  goto L46191c;
  #L461916.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461918.  @monitorexit v4
  #L46191a.  throw v0;
  #L46191c.  return @kind void;
  #L46191e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461920.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461926.  v1:= 1I;
  #L461928.  v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L46192c.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L461930.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461936.  v1:= v4.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L46193a.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L461940.  return @kind void;
  #L461942.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461944.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46194a.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @kind virtual;
  #L461950.  v1:= v4.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461954.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46195a.  return @kind void;
  catch `java.lang.Throwable` @[L4618a0..L4618bc] goto L461942;
  catch `java.lang.Throwable` @[L4618bc..L4618d8] goto L46191e;
  catch `java.lang.Throwable` @[L4618f4..L461906] goto L461916;
  catch `java.lang.Throwable` @[L461918..L46191a] goto L461916;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46183c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461840.  if v0 != 0 then goto L461870;
  #L461844.  v0:= 1I;
  #L461846.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L46184a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46184e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461854.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L46185a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L461860.  v0:= temp;
  #L461862.  if v0 == 0 then goto L461870;
  #L461866.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L46186a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L461870.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4617b4.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4617b8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461994.  @monitorenter v3
  #L461996.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L46199a.  if v0 != 0 then goto L4619a2;
  #L46199e.  @monitorexit v3
  #L4619a0.  return @kind void;
  #L4619a2.  v1:= 0I;
  #L4619a4.  v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v1 @kind object;
  #L4619a8.  @monitorexit v3
  #L4619aa.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4619ae.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4619b4.  v0:= 1I;
  #L4619b6.  v3.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4619ba.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4619c0.  v0:= temp;
  #L4619c2.  if v0 == 0 then goto L4619d6;
  #L4619c6.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4619ca.  v1:= v3.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4619ce.  v2:= 0I;
  #L4619d0.  call `drainLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L4619d6.  return @kind void;
  #L4619d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4619da.  @monitorexit v3
  #L4619dc.  throw v0;
  catch `java.lang.Throwable` @[L461996..L4619aa] goto L4619d8;
  catch `java.lang.Throwable` @[L4619da..L4619dc] goto L4619d8;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461a04.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.dispose:()V` @kind virtual;
  #L461a0a.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461a0e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L461a14.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L461a28.  @monitorenter v1
  #L461a2a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` @kind object;
  #L461a2e.  if v0 != 0 then goto L461a36;
  #L461a32.  @monitorexit v1
  #L461a34.  return @kind void;
  #L461a36.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L461a3c.  @monitorexit v1
  #L461a3e.  return @kind void;
  #L461a40.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461a42.  @monitorexit v1
  #L461a44.  throw v2;
  catch `java.lang.Throwable` @[L461a2a..L461a44] goto L461a40;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b` v4 @kind this, `io.reactivex.disposables.Disposable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L461a64.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L461a68.  call temp:= `validate`(v0, v5) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L461a6e.  v0:= temp;
  #L461a70.  if v0 == 0 then goto L461b16;
  #L461a74.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.d` @type ^`io.reactivex.disposables.Disposable` := v5 @kind object;
  #L461a78.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L461a7c.  v1:= 1I;
  #L461a7e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L461a82.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L461a88.  v2:= temp @kind object;
  #L461a8a.  v3:= "The buffer supplied is null" @kind object;
  #L461a8e.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L461a94.  v2:= temp @kind object;
  #L461a96.  v2:= (`java.util.Collection`) v2 @kind object;
  #L461a9a.  v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.f` @type ^`java.util.Collection` := v2 @kind object;
  #L461a9e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L461aa2.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L461aa8.  v2:= temp @kind object;
  #L461aaa.  v3:= "The boundary ObservableSource supplied is null" @kind object;
  #L461aae.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L461ab4.  v2:= temp @kind object;
  #L461ab6.  v2:= (`io.reactivex.ObservableSource`) v2 @kind object;
  #L461aba.  v5:= new `io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$a`;
  #L461abe.  call `<init>`(v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundarySupplier$b;)V` @kind direct;
  #L461ac4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferBoundarySupplier$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L461ac8.  call `set`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L461ace.  call `onSubscribe`(v0, v4) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L461ad4.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L461ad8.  if v0 != 0 then goto L461b16;
  #L461adc.  call `subscribe`(v2, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L461ae2.  goto L461b16;
  #L461ae4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461ae6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461aec.  v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L461af0.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461af6.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L461afc.  return @kind void;
  #L461afe.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L461b00.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L461b06.  v4.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L461b0a.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L461b10.  call `error`(v2, v0) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L461b16.  return @kind void;
  catch `java.lang.Throwable` @[L461a7e..L461a9a] goto L461afe;
  catch `java.lang.Throwable` @[L461a9e..L461aba] goto L461ae4;
}
