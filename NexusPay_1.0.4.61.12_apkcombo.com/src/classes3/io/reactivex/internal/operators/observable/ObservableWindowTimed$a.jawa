record `io.reactivex.internal.operators.observable.ObservableWindowTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @AccessFlag ;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @AccessFlag VOLATILE;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L477fb4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L477fb8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L477fbe.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L477fc4.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L477fc8.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L477fce.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L477fd2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` := v3 @kind wide;
  #L477fd6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L477fda.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L477fde.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int` := v7;
  #L477fe2.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` := v8 @kind wide;
  #L477fe6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` := v10 @kind boolean;
  #L477fea.  if v10 == 0 then goto L477ffc;
  #L477fee.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L477ff4.  v2:= temp @kind object;
  #L477ff6.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L477ffa.  goto L478002;
  #L477ffc.  v2:= 0I;
  #L477ffe.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L478002.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L477f6c.  v0:= v0.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L477f70.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.b:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L477f9c.  v0:= v0.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L477fa0.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L47802c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L478030.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L478036.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47803a.  if v0 == 0 then goto L478044;
  #L47803e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L478044.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L478058.  v0:= v14.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47805c.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L478060.  v1:= v14.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478064.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L478068.  v3:= 1I;
  #L47806a.  v4:= 1I;
  #L47806c.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @type ^`boolean` @kind boolean;
  #L478070.  if v5 == 0 then goto L47808c;
  #L478074.  v1:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L478078.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47807e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L478084.  call `c`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L47808a.  return @kind void;
  #L47808c.  v5:= v14.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L478090.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L478096.  v6:= temp @kind object;
  #L478098.  if v6 != 0 then goto L4780a0;
  #L47809c.  v7:= 1I;
  #L47809e.  goto L4780a2;
  #L4780a0.  v7:= 0I;
  #L4780a2.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a` @kind boolean;
  #L4780a6.  if v5 == 0 then goto L4780dc;
  #L4780aa.  if v7 != 0 then goto L4780b2;
  #L4780ae.  if v8 == 0 then goto L4780dc;
  #L4780b2.  v1:= 0I;
  #L4780b4.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L4780b8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4780be.  v0:= v14.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L4780c2.  if v0 == 0 then goto L4780ce;
  #L4780c6.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4780cc.  goto L4780d4;
  #L4780ce.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4780d4.  call `c`(v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.c:()V` @kind virtual;
  #L4780da.  return @kind void;
  #L4780dc.  if v7 == 0 then goto L4780f0;
  #L4780e0.  v4:= -v4 @kind int;
  #L4780e2.  call temp:= `leave`(v14, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4780e8.  v4:= temp;
  #L4780ea.  if v4 != 0 then goto L47806c;
  #L4780ee.  return @kind void;
  #L4780f0.  v9:= 0L;
  #L4780f4.  if v8 == 0 then goto L478136;
  #L4780f8.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`) v6 @kind object;
  #L4780fc.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L478100.  if v5 == 0 then goto L478114;
  #L478104.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L478108.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.a` @type ^`long` @kind wide;
  #L47810c.  v11:= lcmp(v7, v5);
  #L478110.  if v11 != 0 then goto L47806c;
  #L478114.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L47811a.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v9 @kind wide;
  #L47811e.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L478122.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L478128.  v2:= temp @kind object;
  #L47812a.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L47812e.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478134.  goto L47806c;
  #L478136.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L47813c.  v5:= temp @kind object;
  #L47813e.  call `onNext`(v2, v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L478144.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` @kind wide;
  #L478148.  v7:= 1L;
  #L47814c.  v5:= v5 + v7 @kind long;
  #L47814e.  v11:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` @kind wide;
  #L478152.  v13:= lcmp(v5, v11);
  #L478156.  if v13 < 0 then goto L4781e4;
  #L47815a.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L47815e.  v5:= v5 + v7 @kind long;
  #L478160.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` := v5 @kind wide;
  #L478164.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v9 @kind wide;
  #L478168.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L47816e.  v2:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L478172.  call temp:= `create`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L478178.  v2:= temp @kind object;
  #L47817a.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v2 @kind object;
  #L47817e.  v5:= v14.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478182.  call `onNext`(v5, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478188.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L47818c.  if v5 == 0 then goto L47806c;
  #L478190.  v5:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L478194.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47819a.  v5:= temp @kind object;
  #L47819c.  v5:= (`io.reactivex.disposables.Disposable`) v5 @kind object;
  #L4781a0.  call `dispose`(v5) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4781a6.  v6:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4781aa.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L4781ae.  v8:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4781b2.  call `<init>`(v7, v8, v14) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L4781b8.  v10:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L4781bc.  v12:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4781c0.  v8:= v10 @kind wide;
  #L4781c2.  call temp:= `schedulePeriodically`(v6, v7, v8, v10, v12) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4781c8.  v6:= temp @kind object;
  #L4781ca.  v7:= v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4781ce.  call temp:= `compareAndSet`(v7, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4781d4.  v5:= temp;
  #L4781d6.  if v5 != 0 then goto L47806c;
  #L4781da.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4781e0.  goto L47806c;
  #L4781e4.  v14.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v5 @kind wide;
  #L4781e8.  goto L47806c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478014.  v0:= 1I;
  #L478016.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L47801a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477f84.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L477f88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4781fc.  v0:= 1I;
  #L4781fe.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L478202.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L478208.  v0:= temp;
  #L47820a.  if v0 == 0 then goto L478214;
  #L47820e.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L478214.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478218.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47821e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478230.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L478234.  v0:= 1I;
  #L478236.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L47823a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L478240.  v0:= temp;
  #L478242.  if v0 == 0 then goto L47824c;
  #L478246.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L47824c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478250.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L478256.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L478268.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @type ^`boolean` @kind boolean;
  #L47826c.  if v0 == 0 then goto L478272;
  #L478270.  return @kind void;
  #L478272.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L478278.  v0:= temp;
  #L47827a.  if v0 == 0 then goto L478332;
  #L47827e.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L478282.  call `onNext`(v0, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L478288.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` @kind wide;
  #L47828c.  v3:= 1L;
  #L478290.  v1:= v1 + v3 @kind long;
  #L478292.  v5:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.g` @type ^`long` @kind wide;
  #L478296.  v8:= lcmp(v1, v5);
  #L47829a.  if v8 < 0 then goto L47831e;
  #L47829e.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4782a2.  v1:= v1 + v3 @kind long;
  #L4782a4.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L4782a8.  v1:= 0L;
  #L4782ac.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v1 @kind wide;
  #L4782b0.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4782b6.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L4782ba.  call temp:= `create`(v8) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L4782c0.  v8:= temp @kind object;
  #L4782c2.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v8 @kind object;
  #L4782c6.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4782ca.  call `onNext`(v0, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4782d0.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L4782d4.  if v8 == 0 then goto L478322;
  #L4782d8.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4782dc.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4782e2.  v8:= temp @kind object;
  #L4782e4.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L4782e8.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4782ee.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4782f2.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L4782f6.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4782fa.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L478300.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L478304.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478308.  v2:= v4 @kind wide;
  #L47830a.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L478310.  v8:= temp @kind object;
  #L478312.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L478316.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47831c.  goto L478322;
  #L47831e.  v7.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.i` @type ^`long` := v1 @kind wide;
  #L478322.  v8:= -1I;
  #L478324.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L47832a.  v8:= temp;
  #L47832c.  if v8 != 0 then goto L478352;
  #L478330.  return @kind void;
  #L478332.  v0:= v7.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L478336.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L47833c.  v8:= temp @kind object;
  #L47833e.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L478344.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L47834a.  v8:= temp;
  #L47834c.  if v8 != 0 then goto L478352;
  #L478350.  return @kind void;
  #L478352.  call `d`(v7) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L478358.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L47836c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L478370.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478376.  v0:= temp;
  #L478378.  if v0 == 0 then goto L4783f8;
  #L47837c.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.k` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L478380.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478384.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47838a.  v0:= v8.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L47838e.  if v0 == 0 then goto L478394;
  #L478392.  return @kind void;
  #L478394.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.e` @type ^`int`;
  #L478398.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L47839e.  v0:= temp @kind object;
  #L4783a0.  v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.l` @type ^`io.reactivex.subjects.UnicastSubject` := v0 @kind object;
  #L4783a4.  call `onNext`(v9, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4783aa.  v2:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a`;
  #L4783ae.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4783b2.  call `<init>`(v2, v0, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @kind direct;
  #L4783b8.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.f` @type ^`boolean` @kind boolean;
  #L4783bc.  if v9 == 0 then goto L4783d8;
  #L4783c0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4783c4.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L4783c8.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4783cc.  v3:= v5 @kind wide;
  #L4783ce.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4783d4.  v9:= temp @kind object;
  #L4783d6.  goto L4783ee;
  #L4783d8.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L4783dc.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.b` @type ^`long` @kind wide;
  #L4783e0.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4783e4.  v3:= v5 @kind wide;
  #L4783e6.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4783ec.  v9:= temp @kind object;
  #L4783ee.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.n` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4783f2.  call temp:= `replace`(v0, v9) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4783f8.  return @kind void;
}
