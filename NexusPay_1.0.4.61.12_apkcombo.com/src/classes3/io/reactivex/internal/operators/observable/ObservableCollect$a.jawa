record `io.reactivex.internal.operators.observable.ObservableCollect$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCollect$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.observable.ObservableCollect$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableCollect$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableCollect$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCollect$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L463118.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46311e.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L463122.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.b` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L463126.  v0.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L46312a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46313c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463140.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463146.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4630f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4630fc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L463102.  v0:= temp;
  #L463104.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463158.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L46315c.  if v0 == 0 then goto L463162;
  #L463160.  return @kind void;
  #L463162.  v0:= 1I;
  #L463164.  v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` := v0 @kind boolean;
  #L463168.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46316c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` @kind object;
  #L463170.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L463176.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46317a.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L463180.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463194.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L463198.  if v0 == 0 then goto L4631a4;
  #L46319c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4631a2.  return @kind void;
  #L4631a4.  v0:= 1I;
  #L4631a6.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4631aa.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4631ae.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4631b4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4631c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.e` @type ^`boolean` @kind boolean;
  #L4631cc.  if v0 == 0 then goto L4631d2;
  #L4631d0.  return @kind void;
  #L4631d2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.b` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L4631d6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.c` @type ^`java.lang.Object` @kind object;
  #L4631da.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4631e0.  goto L4631f4;
  #L4631e2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4631e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4631e8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4631ee.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4631f4.  return @kind void;
  catch `java.lang.Throwable` @[L4631d2..L4631e0] goto L4631e2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableCollect$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCollect$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463214.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463218.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46321e.  v0:= temp;
  #L463220.  if v0 == 0 then goto L463232;
  #L463224.  v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L463228.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableCollect$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46322c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463232.  return @kind void;
}
