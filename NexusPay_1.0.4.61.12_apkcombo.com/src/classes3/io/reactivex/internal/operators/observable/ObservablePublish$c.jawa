record `io.reactivex.internal.operators.observable.ObservablePublish$c` @kind class @AccessFlag FINAL extends `io.reactivex.ObservableSource` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservablePublish$c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$c` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46e174.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46e17a.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46e17e.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.observable.ObservablePublish$c` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$c;.subscribe:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46e190.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublish$a`;
  #L46e194.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L46e19a.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46e1a0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e1a4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46e1aa.  v4:= temp @kind object;
  #L46e1ac.  v4:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v4 @kind object;
  #L46e1b0.  if v4 == 0 then goto L46e1c0;
  #L46e1b4.  call temp:= `isDisposed`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.isDisposed:()Z` @kind virtual;
  #L46e1ba.  v1:= temp;
  #L46e1bc.  if v1 == 0 then goto L46e1e2;
  #L46e1c0.  v1:= new `io.reactivex.internal.operators.observable.ObservablePublish$b`;
  #L46e1c4.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e1c8.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L46e1ce.  v2:= v3.`io.reactivex.internal.operators.observable.ObservablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46e1d2.  call temp:= `compareAndSet`(v2, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46e1d8.  v4:= temp;
  #L46e1da.  if v4 != 0 then goto L46e1e0;
  #L46e1de.  goto L46e1a0;
  #L46e1e0.  v4:= v1 @kind object;
  #L46e1e2.  call temp:= `a`(v4, v0) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)Z` @kind virtual;
  #L46e1e8.  v1:= temp;
  #L46e1ea.  if v1 == 0 then goto L46e1a0;
  #L46e1ee.  call `a`(v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$b;)V` @kind virtual;
  #L46e1f4.  return @kind void;
}
