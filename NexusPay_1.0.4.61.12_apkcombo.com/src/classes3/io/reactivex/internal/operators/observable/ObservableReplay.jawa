record `io.reactivex.internal.operators.observable.ObservableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.observables.ConnectableObservable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamObservableSource` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableReplay$b` `io.reactivex.internal.operators.observable.ObservableReplay.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableReplay.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$b` `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L470b6c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$o`;
  #L470b70.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$o;.<init>:()V` @kind direct;
  #L470b76.  `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` := v0 @kind object;
  #L470b7a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L470b8c.  call `<init>`(v0) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @kind direct;
  #L470b92.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.ObservableSource` := v1 @kind object;
  #L470b96.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L470b9a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L470b9e.  v0.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` := v4 @kind object;
  #L470ba2.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L470a58.  v0:= 2147483647I;
  #L470a5e.  if v2 != v0 then goto L470a6c;
  #L470a62.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470a68.  v1:= temp @kind object;
  #L470a6a.  return v1 @kind object;
  #L470a6c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$i`;
  #L470a70.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$i;.<init>:(I)V` @kind direct;
  #L470a76.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.e:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470a7c.  v1:= temp @kind object;
  #L470a7e.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L470ac8.  v5:= 2147483647I;
  #L470ace.  v0:= v6 @kind object;
  #L470ad0.  v1:= v7 @kind wide;
  #L470ad2.  v3:= v9 @kind object;
  #L470ad4.  v4:= v10 @kind object;
  #L470ad6.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470adc.  v6:= temp @kind object;
  #L470ade.  return v6 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `create`(`io.reactivex.ObservableSource` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.create:(Lio/reactivex/ObservableSource;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L470af0.  v6:= new `io.reactivex.internal.operators.observable.ObservableReplay$l`;
  #L470af4.  v0:= v6 @kind object;
  #L470af6.  v1:= v12;
  #L470af8.  v2:= v8 @kind wide;
  #L470afa.  v4:= v10 @kind object;
  #L470afc.  v5:= v11 @kind object;
  #L470afe.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L470b04.  call temp:= `e`(v7, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.e:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470b0a.  v7:= temp @kind object;
  #L470b0c.  return v7 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `createFrom`(`io.reactivex.ObservableSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.createFrom:(Lio/reactivex/ObservableSource;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L470b20.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` @kind object;
  #L470b24.  call temp:= `e`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.e:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470b2a.  v1:= temp @kind object;
  #L470b2c.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `e`(`io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.internal.operators.observable.ObservableReplay$b` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.e:(Lio/reactivex/ObservableSource;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L470a90.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L470a94.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L470a9a.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$k`;
  #L470a9e.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$k;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L470aa4.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay`;
  #L470aa8.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/internal/operators/observable/ObservableReplay$b;)V` @kind direct;
  #L470aae.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470ab4.  v3:= temp @kind object;
  #L470ab6.  return v3 @kind object;
}
procedure `io.reactivex.Observable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L470a1c.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$e`;
  #L470a20.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$e;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L470a26.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L470a2c.  v1:= temp @kind object;
  #L470a2e.  return v1 @kind object;
}
procedure `io.reactivex.observables.ConnectableObservable` `observeOn`(`io.reactivex.observables.ConnectableObservable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.observeOn:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Scheduler;)Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L470b40.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/Observable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L470b46.  v2:= temp @kind object;
  #L470b48.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$g`;
  #L470b4c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$g;.<init>:(Lio/reactivex/observables/ConnectableObservable;Lio/reactivex/Observable;)V` @kind direct;
  #L470b52.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L470b58.  v1:= temp @kind object;
  #L470b5a.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.observable.ObservableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L470bb4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470bb8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470bbe.  v0:= temp @kind object;
  #L470bc0.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$j`) v0 @kind object;
  #L470bc4.  if v0 == 0 then goto L470bd4;
  #L470bc8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.isDisposed:()Z` @kind virtual;
  #L470bce.  v1:= temp;
  #L470bd0.  if v1 == 0 then goto L470bfe;
  #L470bd4.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.c` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$b` @kind object;
  #L470bd8.  call temp:= `call`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$b;.call:()Lio/reactivex/internal/operators/observable/ObservableReplay$h;` @kind interface;
  #L470bde.  v1:= temp @kind object;
  #L470be0.  v2:= new `io.reactivex.internal.operators.observable.ObservableReplay$j`;
  #L470be4.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$h;)V` @kind direct;
  #L470bea.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470bee.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L470bf4.  v0:= temp;
  #L470bf6.  if v0 != 0 then goto L470bfc;
  #L470bfa.  goto L470bb4;
  #L470bfc.  v0:= v2 @kind object;
  #L470bfe.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L470c02.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L470c08.  v1:= temp;
  #L470c0a.  v2:= 1I;
  #L470c0c.  v3:= 0I;
  #L470c0e.  if v1 != 0 then goto L470c26;
  #L470c12.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L470c16.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L470c1c.  v1:= temp;
  #L470c1e.  if v1 == 0 then goto L470c26;
  #L470c22.  v1:= 1I;
  #L470c24.  goto L470c28;
  #L470c26.  v1:= 0I;
  #L470c28.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L470c2e.  if v1 == 0 then goto L470c3c;
  #L470c32.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L470c36.  call `subscribe`(v5, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L470c3c.  return @kind void;
  #L470c3e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L470c40.  if v1 == 0 then goto L470c4e;
  #L470c44.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L470c48.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L470c4e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L470c54.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L470c5a.  v5:= temp @kind object;
  #L470c5c.  throw v5;
  catch `java.lang.Throwable` @[L470c28..L470c2e] goto L470c3e;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.observable.ObservableReplay` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470c7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470c80.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$j`) v3 @kind object;
  #L470c84.  v1:= 0I;
  #L470c86.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L470c8c.  return @kind void;
}
procedure `io.reactivex.ObservableSource` `source`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.source:()Lio/reactivex/ObservableSource;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470a40.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L470a44.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableReplay` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L470ca0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L470ca4.  call `subscribe`(v0, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L470caa.  return @kind void;
}
