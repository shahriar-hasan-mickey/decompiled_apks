record `io.reactivex.internal.operators.observable.ObservableRangeLong$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRangeLong$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.<init>:(Lio/reactivex/Observer;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46ec84.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L46ec8a.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46ec8e.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L46ec92.  v0.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` := v4 @kind wide;
  #L46ec96.  return @kind void;
}
procedure `java.lang.Long` `a`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46ec28.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L46ec2c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L46ec30.  v4:= lcmp(v0, v2);
  #L46ec34.  if v4 == 0 then goto L46ec4c;
  #L46ec38.  v2:= 1L;
  #L46ec3c.  v2:= v2 + v0 @kind long;
  #L46ec3e.  v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v2 @kind wide;
  #L46ec42.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L46ec48.  v0:= temp @kind object;
  #L46ec4a.  return v0 @kind object;
  #L46ec4c.  v0:= 1I;
  #L46ec4e.  call `lazySet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46ec54.  v0:= 0I;
  #L46ec56.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46eca8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L46ecac.  v2.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` := v0 @kind wide;
  #L46ecb0.  v0:= 1I;
  #L46ecb2.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46ecb8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46eccc.  v0:= 1I;
  #L46ecce.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L46ecd4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ebb8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46ebbe.  v0:= temp;
  #L46ebc0.  if v0 == 0 then goto L46ebc8;
  #L46ebc4.  v0:= 1I;
  #L46ebc6.  goto L46ebca;
  #L46ebc8.  v0:= 0I;
  #L46ebca.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46ebdc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L46ebe0.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L46ebe4.  v4:= lcmp(v0, v2);
  #L46ebe8.  if v4 != 0 then goto L46ebf0;
  #L46ebec.  v0:= 1I;
  #L46ebee.  goto L46ebf2;
  #L46ebf0.  v0:= 0I;
  #L46ebf2.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L46ec68.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.a:()Ljava/lang/Long;` @kind virtual;
  #L46ec6e.  v0:= temp @kind object;
  #L46ec70.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ec04.  v0:= 1I;
  #L46ec06.  v2:= v2 ^& v0 @kind int;
  #L46ec08.  if v2 == 0 then goto L46ec12;
  #L46ec0c.  v1.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` := v0 @kind boolean;
  #L46ec10.  return v0;
  #L46ec12.  v2:= 0I;
  #L46ec14.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableRangeLong$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRangeLong$a;.run:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L46ece8.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.d` @type ^`boolean` @kind boolean;
  #L46ecec.  if v0 == 0 then goto L46ecf2;
  #L46ecf0.  return @kind void;
  #L46ecf2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46ecf6.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.b` @type ^`long` @kind wide;
  #L46ecfa.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableRangeLong$a.c` @type ^`long` @kind wide;
  #L46ecfe.  v5:= lcmp(v3, v1);
  #L46ed02.  if v5 == 0 then goto L46ed28;
  #L46ed06.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46ed0c.  v5:= temp;
  #L46ed0e.  if v5 != 0 then goto L46ed28;
  #L46ed12.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L46ed18.  v5:= temp @kind object;
  #L46ed1a.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46ed20.  v5:= 1L;
  #L46ed24.  v3:= v3 + v5 @kind long;
  #L46ed26.  goto L46ecfe;
  #L46ed28.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46ed2e.  v1:= temp;
  #L46ed30.  if v1 != 0 then goto L46ed42;
  #L46ed34.  v1:= 1I;
  #L46ed36.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L46ed3c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46ed42.  return @kind void;
}
