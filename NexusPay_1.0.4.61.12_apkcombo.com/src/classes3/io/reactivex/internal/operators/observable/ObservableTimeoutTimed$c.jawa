record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$d` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L475d1c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L475d22.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L475d26.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L475d2a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L475d2e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L475d32.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L475d36.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L475d3c.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L475d40.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L475d44.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L475d4a.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L475d4e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L475eac.  v0:= 9223372036854775807L;
  #L475eb6.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L475ebc.  v4:= temp;
  #L475ebe.  if v4 == 0 then goto L475efa;
  #L475ec2.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475ec6.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475ecc.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475ed0.  v5:= new `java.util.concurrent.TimeoutException`;
  #L475ed4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L475ed8.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L475edc.  call temp:= `timeoutMessage`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L475ee2.  v0:= temp @kind object;
  #L475ee4.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L475eea.  call `onError`(v4, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L475ef0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475ef4.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475efa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L475f0c.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475f10.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475f14.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$e`;
  #L475f18.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$e;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$d;)V` @kind direct;
  #L475f1e.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L475f22.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L475f26.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L475f2c.  v5:= temp @kind object;
  #L475f2e.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L475f34.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475d60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475d64.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475d6a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475d6e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475d74.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475cf0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475cf4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475cfa.  v0:= temp @kind object;
  #L475cfc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L475d00.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475d06.  v0:= temp;
  #L475d08.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475d88.  v0:= 9223372036854775807L;
  #L475d92.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L475d98.  v2:= temp @kind wide;
  #L475d9a.  v4:= lcmp(v2, v0);
  #L475d9e.  if v4 == 0 then goto L475dc0;
  #L475da2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475da6.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475dac.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475db0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L475db6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475dba.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475dc0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475dd4.  v0:= 9223372036854775807L;
  #L475dde.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L475de4.  v2:= temp @kind wide;
  #L475de6.  v4:= lcmp(v2, v0);
  #L475dea.  if v4 == 0 then goto L475e0e;
  #L475dee.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475df2.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475df8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475dfc.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L475e02.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475e06.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475e0c.  goto L475e14;
  #L475e0e.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L475e14.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475e28.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L475e2e.  v0:= temp @kind wide;
  #L475e30.  v2:= 9223372036854775807L;
  #L475e3a.  v4:= lcmp(v0, v2);
  #L475e3e.  if v4 == 0 then goto L475e7c;
  #L475e42.  v2:= 1L;
  #L475e46.  v2:= v2 + v0 @kind long;
  #L475e48.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L475e4e.  v0:= temp;
  #L475e50.  if v0 != 0 then goto L475e56;
  #L475e54.  goto L475e7c;
  #L475e56.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475e5a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475e60.  v0:= temp @kind object;
  #L475e62.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L475e66.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475e6c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475e70.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L475e76.  call `c`(v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L475e7c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475e90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475e94.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475e9a.  return @kind void;
}
