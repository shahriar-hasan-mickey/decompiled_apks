record `io.reactivex.internal.operators.observable.ObservableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L46bbb4.  v0:= 1I;
  #L46bbb6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bbbc.  v0:= temp @kind object;
  #L46bbbe.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L46bbc2.  v0:= 2I;
  #L46bbc4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bbca.  v0:= temp @kind object;
  #L46bbcc.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L46bbd0.  v0:= 3I;
  #L46bbd2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bbd8.  v0:= temp @kind object;
  #L46bbda.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L46bbde.  v0:= 4I;
  #L46bbe0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bbe6.  v0:= temp @kind object;
  #L46bbe8.  `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L46bbec.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46bc00.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46bc06.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L46bc0a.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L46bc0e.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L46bc14.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L46bc18.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46bc1c.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L46bc22.  v0:= temp;
  #L46bc24.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46bc2a.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L46bc2e.  v2:= new `java.util.LinkedHashMap`;
  #L46bc32.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L46bc38.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L46bc3c.  v2:= new `java.util.LinkedHashMap`;
  #L46bc40.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L46bc46.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L46bc4a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46bc4e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46bc54.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L46bc58.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L46bc5c.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L46bc60.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L46bc64.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L46bc68.  v3:= 2I;
  #L46bc6a.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L46bc70.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L46bc74.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c118.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46c11c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46c122.  v0:= temp;
  #L46c124.  if v0 == 0 then goto L46c13a;
  #L46c128.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46c12c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46c132.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L46c138.  goto L46c140;
  #L46c13a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46c140.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c154.  @monitorenter v1
  #L46c156.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46c15a.  if v2 == 0 then goto L46c164;
  #L46c15e.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L46c162.  goto L46c168;
  #L46c164.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L46c168.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46c16e.  @monitorexit v1
  #L46c170.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L46c176.  return @kind void;
  #L46c178.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46c17a.  @monitorexit v1
  #L46c17c.  throw v2;
  catch `java.lang.Throwable` @[L46c156..L46c170] goto L46c178;
  catch `java.lang.Throwable` @[L46c17a..L46c17c] goto L46c178;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c0bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46c0c0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46c0c6.  v0:= temp;
  #L46c0c8.  if v0 == 0 then goto L46c0d4;
  #L46c0cc.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L46c0d2.  goto L46c0da;
  #L46c0d4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46c0da.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c06c.  @monitorenter v1
  #L46c06e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46c072.  if v2 == 0 then goto L46c07c;
  #L46c076.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L46c07a.  goto L46c080;
  #L46c07c.  v2:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L46c080.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46c086.  @monitorexit v1
  #L46c088.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L46c08e.  return @kind void;
  #L46c090.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46c092.  @monitorexit v1
  #L46c094.  throw v2;
  catch `java.lang.Throwable` @[L46c06e..L46c088] goto L46c090;
  catch `java.lang.Throwable` @[L46c092..L46c094] goto L46c090;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46bca4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L46bca8.  if v0 != 0 then goto L46bcce;
  #L46bcac.  v0:= 1I;
  #L46bcae.  v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L46bcb2.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L46bcb8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46bcbe.  v0:= temp;
  #L46bcc0.  if v0 != 0 then goto L46bcce;
  #L46bcc4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46bcc8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46bcce.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.e:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46c0ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46c0f0.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46c0f6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46c0fa.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46c100.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @kind virtual;
  #L46c106.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L46bc88.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46bc8c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46bc92.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L46bce0.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46bce6.  v0:= temp;
  #L46bce8.  if v0 == 0 then goto L46bcee;
  #L46bcec.  return @kind void;
  #L46bcee.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46bcf2.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46bcf6.  v2:= 1I;
  #L46bcf8.  v3:= 1I;
  #L46bcfa.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L46bcfe.  if v4 == 0 then goto L46bd0a;
  #L46bd02.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46bd08.  return @kind void;
  #L46bd0a.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46bd0e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46bd14.  v4:= temp @kind object;
  #L46bd16.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L46bd1a.  if v4 == 0 then goto L46bd32;
  #L46bd1e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46bd24.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L46bd2a.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46bd30.  return @kind void;
  #L46bd32.  v4:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46bd36.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46bd3c.  v4:= temp;
  #L46bd3e.  v5:= 0I;
  #L46bd40.  if v4 != 0 then goto L46bd48;
  #L46bd44.  v4:= 1I;
  #L46bd46.  goto L46bd4a;
  #L46bd48.  v4:= 0I;
  #L46bd4a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46bd50.  v6:= temp @kind object;
  #L46bd52.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L46bd56.  if v6 != 0 then goto L46bd5e;
  #L46bd5a.  v7:= 1I;
  #L46bd5c.  goto L46bd60;
  #L46bd5e.  v7:= 0I;
  #L46bd60.  if v4 == 0 then goto L46bd8e;
  #L46bd64.  if v7 == 0 then goto L46bd8e;
  #L46bd68.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46bd6c.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46bd72.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46bd76.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46bd7c.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46bd80.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46bd86.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46bd8c.  return @kind void;
  #L46bd8e.  if v7 == 0 then goto L46bda2;
  #L46bd92.  v3:= -v3 @kind int;
  #L46bd94.  call temp:= `addAndGet`(v10, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46bd9a.  v3:= temp;
  #L46bd9c.  if v3 != 0 then goto L46bcfa;
  #L46bda0.  return @kind void;
  #L46bda2.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46bda8.  v4:= temp @kind object;
  #L46bdaa.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L46bdae.  v8:= "The resultSelector returned a null value" @kind object;
  #L46bdb2.  if v6 != v7 then goto L46be8a;
  #L46bdb6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.k` @type ^`int`;
  #L46bdba.  v6:= v5 + 1;
  #L46bdbe.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.k` @type ^`int` := v6;
  #L46bdc2.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46bdc6.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bdcc.  v7:= temp @kind object;
  #L46bdce.  call temp:= `put`(v6, v7, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46bdd4.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.g` @type ^`io.reactivex.functions.Function` @kind object;
  #L46bdd8.  call temp:= `apply`(v6, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46bdde.  v6:= temp @kind object;
  #L46bde0.  v7:= "The leftEnd returned a null ObservableSource" @kind object;
  #L46bde4.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46bdea.  v6:= temp @kind object;
  #L46bdec.  v6:= (`io.reactivex.ObservableSource`) v6 @kind object;
  #L46bdf0.  v7:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L46bdf4.  call `<init>`(v7, v10, v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L46bdfa.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46bdfe.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46be04.  call `subscribe`(v6, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46be0a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46be0e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46be14.  v5:= temp @kind object;
  #L46be16.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L46be1a.  if v5 == 0 then goto L46be32;
  #L46be1e.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46be24.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L46be2a.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46be30.  return @kind void;
  #L46be32.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46be36.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46be3c.  v5:= temp @kind object;
  #L46be3e.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46be44.  v5:= temp @kind object;
  #L46be46.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46be4c.  v6:= temp;
  #L46be4e.  if v6 == 0 then goto L46bcfa;
  #L46be52.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46be58.  v6:= temp @kind object;
  #L46be5a.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L46be5e.  call temp:= `apply`(v7, v4, v6) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46be64.  v6:= temp @kind object;
  #L46be66.  call temp:= `requireNonNull`(v6, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46be6c.  v6:= temp @kind object;
  #L46be6e.  call `onNext`(v1, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46be74.  goto L46be46;
  #L46be76.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46be78.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46be7e.  return @kind void;
  #L46be80.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46be82.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46be88.  return @kind void;
  #L46be8a.  v7:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L46be8e.  if v6 != v7 then goto L46bf66;
  #L46be92.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.l` @type ^`int`;
  #L46be96.  v7:= v6 + 1;
  #L46be9a.  v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.l` @type ^`int` := v7;
  #L46be9e.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46bea2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bea8.  v9:= temp @kind object;
  #L46beaa.  call temp:= `put`(v7, v9, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46beb0.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L46beb4.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46beba.  v7:= temp @kind object;
  #L46bebc.  v9:= "The rightEnd returned a null ObservableSource" @kind object;
  #L46bec0.  call temp:= `requireNonNull`(v7, v9) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46bec6.  v7:= temp @kind object;
  #L46bec8.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L46becc.  v9:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L46bed0.  call `<init>`(v9, v10, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L46bed6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46beda.  call temp:= `add`(v5, v9) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46bee0.  call `subscribe`(v7, v9) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46bee6.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46beea.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46bef0.  v5:= temp @kind object;
  #L46bef2.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L46bef6.  if v5 == 0 then goto L46bf0e;
  #L46befa.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46bf00.  call `f`(v10) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L46bf06.  call `h`(v10, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46bf0c.  return @kind void;
  #L46bf0e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46bf12.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46bf18.  v5:= temp @kind object;
  #L46bf1a.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46bf20.  v5:= temp @kind object;
  #L46bf22.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46bf28.  v6:= temp;
  #L46bf2a.  if v6 == 0 then goto L46bcfa;
  #L46bf2e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46bf34.  v6:= temp @kind object;
  #L46bf36.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L46bf3a.  call temp:= `apply`(v7, v6, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46bf40.  v6:= temp @kind object;
  #L46bf42.  call temp:= `requireNonNull`(v6, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46bf48.  v6:= temp @kind object;
  #L46bf4a.  call `onNext`(v1, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46bf50.  goto L46bf22;
  #L46bf52.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46bf54.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46bf5a.  return @kind void;
  #L46bf5c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46bf5e.  call `i`(v10, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46bf64.  return @kind void;
  #L46bf66.  v5:= `@@io.reactivex.internal.operators.observable.ObservableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L46bf6a.  if v6 != v5 then goto L46bf96;
  #L46bf6e.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L46bf72.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46bf76.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L46bf7a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bf80.  v6:= temp @kind object;
  #L46bf82.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46bf88.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46bf8c.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46bf92.  goto L46bcfa;
  #L46bf96.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L46bf9a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46bf9e.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L46bfa2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46bfa8.  v6:= temp @kind object;
  #L46bfaa.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46bfb0.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46bfb4.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46bfba.  goto L46bcfa;
  catch `java.lang.Throwable` @[L46bdd4..L46bdf0] goto L46be80;
  catch `java.lang.Throwable` @[L46be5a..L46be6e] goto L46be76;
  catch `java.lang.Throwable` @[L46beb0..L46becc] goto L46bf5c;
  catch `java.lang.Throwable` @[L46bf36..L46bf4a] goto L46bf52;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46c000.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46c004.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L46c00a.  v0:= temp @kind object;
  #L46c00c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46c010.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46c016.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46c01a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46c020.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46c026.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.Observer` v3 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L46c038.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46c03e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46c042.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46c048.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46c04e.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.f:()V` @kind virtual;
  #L46c054.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46c05a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46bb9c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableJoin$a.m` @type ^`boolean` @kind boolean;
  #L46bba0.  return v0;
}
