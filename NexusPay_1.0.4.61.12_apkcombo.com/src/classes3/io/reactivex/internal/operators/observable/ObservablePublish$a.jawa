record `io.reactivex.internal.operators.observable.ObservablePublish$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservablePublish$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservablePublish$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46de38.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46de3e.  v0.`io.reactivex.internal.operators.observable.ObservablePublish$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46de42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservablePublish$b` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.a:(Lio/reactivex/internal/operators/observable/ObservablePublish$b;)V` @AccessFlag  {
    temp;
    v0;

  #L46de80.  v0:= 0I;
  #L46de82.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46de88.  v0:= temp;
  #L46de8a.  if v0 != 0 then goto L46de94;
  #L46de8e.  call `b`(v2, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L46de94.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46de54.  call temp:= `getAndSet`(v1, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L46de5a.  v0:= temp @kind object;
  #L46de5c.  if v0 == 0 then goto L46de6e;
  #L46de60.  if v0 == v1 then goto L46de6e;
  #L46de64.  v0:= (`io.reactivex.internal.operators.observable.ObservablePublish$b`) v0 @kind object;
  #L46de68.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$b;.b:(Lio/reactivex/internal/operators/observable/ObservablePublish$a;)V` @kind virtual;
  #L46de6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservablePublish$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservablePublish$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46de14.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46de1a.  v0:= temp @kind object;
  #L46de1c.  if v0 != v1 then goto L46de24;
  #L46de20.  v0:= 1I;
  #L46de22.  goto L46de26;
  #L46de24.  v0:= 0I;
  #L46de26.  return v0;
}
