record `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L473650.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L473656.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L47365a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47365e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L473664.  v0.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L473668.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag  {
    temp;

  #L473710.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L473716.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47367c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L473680.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L473686.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47368c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473628.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47362e.  v0:= temp @kind object;
  #L473630.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L473634.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47363a.  v0:= temp;
  #L47363c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4736a0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4736a4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4736aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4736bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4736c0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4736c6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4736d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4736dc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4736e2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4736f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSubscribeOn$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4736f8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4736fe.  return @kind void;
}
