record `io.reactivex.internal.operators.observable.ObservableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.observable.ObservableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableZipIterable$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.<init>:(Lio/reactivex/Observer;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4798f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4798fe.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L479902.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L479906.  v0.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47990a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L479938.  v0:= 1I;
  #L47993a.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L47993e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L479942.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L479948.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47994c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L479952.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47991c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L479920.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L479926.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4798d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4798dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L4798e2.  v0:= temp;
  #L4798e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479964.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L479968.  if v0 == 0 then goto L47996e;
  #L47996c.  return @kind void;
  #L47996e.  v0:= 1I;
  #L479970.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L479974.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L479978.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47997e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479990.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L479994.  if v0 == 0 then goto L4799a0;
  #L479998.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47999e.  return @kind void;
  #L4799a0.  v0:= 1I;
  #L4799a2.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4799a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4799aa.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4799b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4799c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4799c8.  if v0 == 0 then goto L4799ce;
  #L4799cc.  return @kind void;
  #L4799ce.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4799d2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4799d8.  v0:= temp @kind object;
  #L4799da.  v1:= "The iterator returned a null value" @kind object;
  #L4799de.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4799e4.  v0:= temp @kind object;
  #L4799e6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4799ea.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4799f0.  v3:= temp @kind object;
  #L4799f2.  v0:= "The zipper function returned a null value" @kind object;
  #L4799f6.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4799fc.  v3:= temp @kind object;
  #L4799fe.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L479a02.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L479a08.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L479a0c.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L479a12.  v3:= temp;
  #L479a14.  if v3 != 0 then goto L479a32;
  #L479a18.  v3:= 1I;
  #L479a1a.  v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L479a1e.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L479a22.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L479a28.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L479a2c.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L479a32.  return @kind void;
  #L479a34.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L479a36.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L479a3c.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L479a42.  return @kind void;
  #L479a44.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L479a46.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L479a4c.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L479a52.  return @kind void;
  #L479a54.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L479a56.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L479a5c.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L479a62.  return @kind void;
  catch `java.lang.Throwable` @[L4799ce..L4799e6] goto L479a54;
  catch `java.lang.Throwable` @[L4799e6..L4799fe] goto L479a44;
  catch `java.lang.Throwable` @[L479a08..L479a14] goto L479a34;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableZipIterable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZipIterable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479a94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L479a98.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L479a9e.  v0:= temp;
  #L479aa0.  if v0 == 0 then goto L479ab2;
  #L479aa4.  v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L479aa8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableZipIterable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L479aac.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L479ab2.  return @kind void;
}
