record `io.reactivex.internal.operators.observable.ObservableTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` `io.reactivex.internal.operators.observable.ObservableTakeUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L474730.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L474736.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L47473a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47473e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L474744.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L474748.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a`;
  #L47474c.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;)V` @kind direct;
  #L474752.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` := v1 @kind object;
  #L474756.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L47475a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L474760.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L474764.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L474834.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L474838.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47483e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474842.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L474846.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L47484c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L474860.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L474864.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47486a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47486e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L474872.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L474878.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474778.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47477c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L474782.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` @kind object;
  #L474786.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47478c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474704.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L474708.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47470e.  v0:= temp @kind object;
  #L474710.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L474714.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47471a.  v0:= temp;
  #L47471c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4747a0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` @kind object;
  #L4747a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4747aa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4747ae.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4747b2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4747b8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4747cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableTakeUntil$a$a` @kind object;
  #L4747d0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4747d6.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4747da.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4747de.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4747e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4747f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4747fc.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L474800.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L474806.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntil$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntil$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474818.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47481c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L474822.  return @kind void;
}
