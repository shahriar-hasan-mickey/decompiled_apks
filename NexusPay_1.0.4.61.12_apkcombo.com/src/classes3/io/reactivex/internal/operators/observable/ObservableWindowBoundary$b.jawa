record `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @AccessFlag VOLATILE;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.k` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L476ea0.  v0:= new `java.lang.Object`;
  #L476ea4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L476eaa.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` := v0 @kind object;
  #L476eae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L476ec0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L476ec6.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L476eca.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int` := v2;
  #L476ece.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundary$a`;
  #L476ed2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;)V` @kind direct;
  #L476ed8.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` := v1 @kind object;
  #L476edc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L476ee0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L476ee6.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L476eea.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L476eee.  v2:= 1I;
  #L476ef0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L476ef6.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L476efa.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L476efe.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L476f04.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L476f08.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L476f0c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L476f12.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L476f16.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L476f1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L476f20.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L476f24.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L476f84.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L476f8a.  v0:= temp;
  #L476f8c.  if v0 == 0 then goto L476f92;
  #L476f90.  return @kind void;
  #L476f92.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L476f96.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L476f9a.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L476f9e.  v3:= 1I;
  #L476fa0.  v4:= 1I;
  #L476fa2.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L476fa6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L476fac.  v5:= temp;
  #L476fae.  v6:= 0I;
  #L476fb0.  if v5 != 0 then goto L476fc0;
  #L476fb4.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L476fba.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L476fbe.  return @kind void;
  #L476fc0.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L476fc4.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` @kind boolean;
  #L476fc8.  if v7 == 0 then goto L476ffc;
  #L476fcc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L476fd2.  v8:= temp @kind object;
  #L476fd4.  if v8 == 0 then goto L476ffc;
  #L476fd8.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L476fde.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L476fe4.  v1:= temp @kind object;
  #L476fe6.  if v5 == 0 then goto L476ff4;
  #L476fea.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L476fee.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L476ff4.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L476ffa.  return @kind void;
  #L476ffc.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L477002.  v8:= temp @kind object;
  #L477004.  if v8 != 0 then goto L47700c;
  #L477008.  v9:= 1I;
  #L47700a.  goto L47700e;
  #L47700c.  v9:= 0I;
  #L47700e.  if v7 == 0 then goto L47704e;
  #L477012.  if v9 == 0 then goto L47704e;
  #L477016.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L47701c.  v1:= temp @kind object;
  #L47701e.  if v1 != 0 then goto L477038;
  #L477022.  if v5 == 0 then goto L477030;
  #L477026.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L47702a.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L477030.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L477036.  goto L47704c;
  #L477038.  if v5 == 0 then goto L477046;
  #L47703c.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477040.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L477046.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47704c.  return @kind void;
  #L47704e.  if v9 == 0 then goto L477062;
  #L477052.  v4:= -v4 @kind int;
  #L477054.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47705a.  v4:= temp;
  #L47705c.  if v4 != 0 then goto L476fa2;
  #L477060.  return @kind void;
  #L477062.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L477066.  if v8 == v7 then goto L477072;
  #L47706a.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L477070.  goto L476fa2;
  #L477072.  if v5 == 0 then goto L477080;
  #L477076.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L47707a.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L477080.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477084.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L47708a.  v5:= temp;
  #L47708c.  if v5 != 0 then goto L476fa2;
  #L477090.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.b` @type ^`int`;
  #L477094.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L47709a.  v5:= temp @kind object;
  #L47709c.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.j` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L4770a0.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4770a4.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4770aa.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4770b0.  goto L476fa2;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4770c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4770c8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4770ce.  v0:= 1I;
  #L4770d0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4770d4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4770da.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4770ec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4770f0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4770f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4770fa.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L477100.  v0:= temp;
  #L477102.  if v0 == 0 then goto L477114;
  #L477106.  v2:= 1I;
  #L477108.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L47710c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L477112.  goto L47711a;
  #L477114.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47711a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47712c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L477130.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.k` @type ^`java.lang.Object` @kind object;
  #L477134.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L47713a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L477140.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L476f38.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L476f3c.  v1:= 0I;
  #L476f3e.  v2:= 1I;
  #L476f40.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L476f46.  v0:= temp;
  #L476f48.  if v0 == 0 then goto L476f70;
  #L476f4c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L476f50.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L476f56.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L476f5a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L476f60.  v0:= temp;
  #L476f62.  if v0 != 0 then goto L476f70;
  #L476f66.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L476f6a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L476f70.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L476e80.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L476e84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L476e8a.  v0:= temp;
  #L476e8c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477154.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L477158.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L47715e.  v0:= 1I;
  #L477160.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v0 @kind boolean;
  #L477164.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L47716a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47717c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundary$a` @kind object;
  #L477180.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L477186.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47718a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L477190.  v0:= temp;
  #L477192.  if v0 == 0 then goto L4771a4;
  #L477196.  v2:= 1I;
  #L477198.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.i` @type ^`boolean` := v2 @kind boolean;
  #L47719c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4771a2.  goto L4771aa;
  #L4771a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4771aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4771bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4771c0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4771c6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.a:()V` @kind virtual;
  #L4771cc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4771e0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4771e4.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4771ea.  v2:= temp;
  #L4771ec.  if v2 == 0 then goto L4771f6;
  #L4771f0.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.d:()V` @kind virtual;
  #L4771f6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477208.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47720c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L477212.  v0:= temp;
  #L477214.  if v0 != 0 then goto L477222;
  #L477218.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47721c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L477222.  return @kind void;
}
