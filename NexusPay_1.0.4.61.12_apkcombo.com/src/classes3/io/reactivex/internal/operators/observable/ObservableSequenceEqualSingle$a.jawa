record `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.ArrayCompositeDisposable` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.ObservableSource` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object, `io.reactivex.functions.BiPredicate` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L472554.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47255a.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L47255e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L472562.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L472566.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` := v5 @kind object;
  #L47256a.  v1:= 2I;
  #L47256c.  v3:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[v1];
  #L472570.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] := v3 @kind object;
  #L472574.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L472578.  v5:= 0I;
  #L47257a.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L472580.  v3[v5]:= v4 @kind object;
  #L472584.  v4:= new `io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`;
  #L472588.  v5:= 1I;
  #L47258a.  call `<init>`(v4, v0, v5, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;II)V` @kind direct;
  #L472590.  v3[v5]:= v4 @kind object;
  #L472594.  v2:= new `io.reactivex.internal.disposables.ArrayCompositeDisposable`;
  #L472598.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.<init>:(I)V` @kind direct;
  #L47259e.  v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` := v2 @kind object;
  #L4725a2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L4725b4.  v0:= 1I;
  #L4725b6.  v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4725ba.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4725c0.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4725c6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L472630.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L472636.  v0:= temp;
  #L472638.  if v0 == 0 then goto L47263e;
  #L47263c.  return @kind void;
  #L47263e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L472642.  v1:= 0I;
  #L472644.  v2:= v0[v1] @kind object;
  #L472648.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L47264c.  v4:= 1I;
  #L47264e.  v0:= v0[v4] @kind object;
  #L472652.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472656.  v6:= 1I;
  #L472658.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L47265c.  if v7 == 0 then goto L47266e;
  #L472660.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L472666.  call `clear`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L47266c.  return @kind void;
  #L47266e.  v7:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L472672.  if v7 == 0 then goto L472690;
  #L472676.  v8:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L47267a.  if v8 == 0 then goto L472690;
  #L47267e.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L472684.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472688.  call `onError`(v0, v8) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47268e.  return @kind void;
  #L472690.  v8:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.d` @type ^`boolean` @kind boolean;
  #L472694.  if v8 == 0 then goto L4726b2;
  #L472698.  v9:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.e` @type ^`java.lang.Throwable` @kind object;
  #L47269c.  if v9 == 0 then goto L4726b2;
  #L4726a0.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4726a6.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4726aa.  call `onError`(v0, v9) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4726b0.  return @kind void;
  #L4726b2.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4726b6.  if v9 != 0 then goto L4726c6;
  #L4726ba.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4726c0.  v9:= temp @kind object;
  #L4726c2.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v9 @kind object;
  #L4726c6.  v9:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L4726ca.  if v9 != 0 then goto L4726d2;
  #L4726ce.  v9:= 1I;
  #L4726d0.  goto L4726d4;
  #L4726d2.  v9:= 0I;
  #L4726d4.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4726d8.  if v10 != 0 then goto L4726e8;
  #L4726dc.  call temp:= `poll`(v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4726e2.  v10:= temp @kind object;
  #L4726e4.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v10 @kind object;
  #L4726e8.  v10:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L4726ec.  if v10 != 0 then goto L4726f4;
  #L4726f0.  v10:= 1I;
  #L4726f2.  goto L4726f6;
  #L4726f4.  v10:= 0I;
  #L4726f6.  if v7 == 0 then goto L472716;
  #L4726fa.  if v8 == 0 then goto L472716;
  #L4726fe.  if v9 == 0 then goto L472716;
  #L472702.  if v10 == 0 then goto L472716;
  #L472706.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47270a.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L47270e.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L472714.  return @kind void;
  #L472716.  if v7 == 0 then goto L472738;
  #L47271a.  if v8 == 0 then goto L472738;
  #L47271e.  if v9 == v10 then goto L472738;
  #L472722.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L472728.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47272c.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L472730.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L472736.  return @kind void;
  #L472738.  if v9 != 0 then goto L472794;
  #L47273c.  if v10 != 0 then goto L472794;
  #L472740.  v7:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L472744.  v8:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` @kind object;
  #L472748.  v11:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L47274c.  call temp:= `test`(v7, v8, v11) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L472752.  v7:= temp;
  #L472754.  if v7 != 0 then goto L47276e;
  #L472758.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L47275e.  v0:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L472762.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L472766.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L47276c.  return @kind void;
  #L47276e.  v7:= 0I;
  #L472770.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.h` @type ^`java.lang.Object` := v7 @kind object;
  #L472774.  v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L472778.  goto L472794;
  #L47277a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47277c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L472782.  call `a`(v12, v3, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.a:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L472788.  v1:= v12.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47278c.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472792.  return @kind void;
  #L472794.  if v9 != 0 then goto L47279c;
  #L472798.  if v10 == 0 then goto L472658;
  #L47279c.  v6:= -v6 @kind int;
  #L47279e.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4727a4.  v6:= temp;
  #L4727a6.  if v6 != 0 then goto L472658;
  #L4727aa.  return @kind void;
  catch `java.lang.Throwable` @[L472740..L472754] goto L47277a;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.c:(Lio/reactivex/disposables/Disposable;I)Z` @AccessFlag  {
    temp;
    v0;

  #L472534.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L472538.  call temp:= `setResource`(v0, v3, v2) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.setResource:(ILio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L47253e.  v2:= temp;
  #L472540.  return v2;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4727c8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L4727cc.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.d` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4727d0.  v2:= 0I;
  #L4727d2.  v2:= v0[v2] @kind object;
  #L4727d6.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4727dc.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.e` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4727e0.  v2:= 1I;
  #L4727e2.  v0:= v0[v2] @kind object;
  #L4727e6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4727ec.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4725d8.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L4725dc.  if v0 != 0 then goto L47261e;
  #L4725e0.  v0:= 1I;
  #L4725e2.  v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4725e6.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.disposables.ArrayCompositeDisposable` @kind object;
  #L4725ea.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/ArrayCompositeDisposable;.dispose:()V` @kind virtual;
  #L4725f0.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4725f6.  v1:= temp;
  #L4725f8.  if v1 != 0 then goto L47261e;
  #L4725fc.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.f` @type ^`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b`[] @kind object;
  #L472600.  v2:= 0I;
  #L472602.  v2:= v1[v2] @kind object;
  #L472606.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L47260a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L472610.  v0:= v1[v0] @kind object;
  #L472614.  v0:= v0.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472618.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L47261e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47251c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSequenceEqualSingle$a.g` @type ^`boolean` @kind boolean;
  #L472520.  return v0;
}
