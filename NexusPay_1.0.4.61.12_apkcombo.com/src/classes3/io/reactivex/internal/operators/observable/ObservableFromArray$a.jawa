record `io.reactivex.internal.operators.observable.ObservableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.<init>:(Lio/reactivex/Observer;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L469548.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L46954e.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L469552.  v0.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] := v2 @kind object;
  #L469556.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46959c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L4695a0.  v1:= length @variable v0;
  #L4695a2.  v2:= 0I;
  #L4695a4.  if v2 >= v1 then goto L46960e;
  #L4695a8.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @kind virtual;
  #L4695ae.  v3:= temp;
  #L4695b0.  if v3 != 0 then goto L46960e;
  #L4695b4.  v3:= v0[v2] @kind object;
  #L4695b8.  if v3 != 0 then goto L4695fe;
  #L4695bc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4695c0.  v1:= new `java.lang.NullPointerException`;
  #L4695c4.  v3:= new `java.lang.StringBuilder`;
  #L4695c8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4695ce.  v4:= "The element at index " @kind object;
  #L4695d2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4695d8.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4695de.  v2:= " is null" @kind object;
  #L4695e2.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4695e8.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4695ee.  v2:= temp @kind object;
  #L4695f0.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4695f6.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4695fc.  return @kind void;
  #L4695fe.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L469602.  call `onNext`(v4, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L469608.  v2:= v2 + 1;
  #L46960c.  goto L4695a4;
  #L46960e.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @kind virtual;
  #L469614.  v0:= temp;
  #L469616.  if v0 != 0 then goto L469624;
  #L46961a.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableFromArray$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46961e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L469624.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469568.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L46956c.  v0:= length @variable v0;
  #L46956e.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int` := v0;
  #L469572.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469584.  v0:= 1I;
  #L469586.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @type ^`boolean` := v0 @kind boolean;
  #L46958a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4694a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.e` @type ^`boolean` @kind boolean;
  #L4694ac.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4694c0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int`;
  #L4694c4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L4694c8.  v1:= length @variable v1;
  #L4694ca.  if v0 != v1 then goto L4694d2;
  #L4694ce.  v0:= 1I;
  #L4694d0.  goto L4694d4;
  #L4694d2.  v0:= 0I;
  #L4694d4.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L46950c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int`;
  #L469510.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.b` @type ^`java.lang.Object`[] @kind object;
  #L469514.  v2:= length @variable v1;
  #L469516.  if v0 == v2 then goto L469534;
  #L46951a.  v2:= v0 + 1;
  #L46951e.  v3.`io.reactivex.internal.operators.observable.ObservableFromArray$a.c` @type ^`int` := v2;
  #L469522.  v0:= v1[v0] @kind object;
  #L469526.  v1:= "The array element is null" @kind object;
  #L46952a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L469530.  v0:= temp @kind object;
  #L469532.  return v0 @kind object;
  #L469534.  v0:= 0I;
  #L469536.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableFromArray$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFromArray$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4694e8.  v0:= 1I;
  #L4694ea.  v2:= v2 ^& v0 @kind int;
  #L4694ec.  if v2 == 0 then goto L4694f6;
  #L4694f0.  v1.`io.reactivex.internal.operators.observable.ObservableFromArray$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4694f4.  return v0;
  #L4694f6.  v2:= 0I;
  #L4694f8.  return v2;
}
