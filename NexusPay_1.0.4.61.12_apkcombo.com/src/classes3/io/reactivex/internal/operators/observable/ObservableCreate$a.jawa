record `io.reactivex.internal.operators.observable.ObservableCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.ObservableEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4650b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4650be.  v0.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4650c2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L4650d4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4650da.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464fd4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464fda.  v0:= temp @kind object;
  #L464fdc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L464fe0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464fe6.  v0:= temp;
  #L464fe8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4650ec.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L4650f2.  v0:= temp;
  #L4650f4.  if v0 != 0 then goto L465114;
  #L4650f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4650fc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L465102.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L465108.  goto L465114;
  #L46510a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46510c.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L465112.  throw v0;
  #L465114.  return @kind void;
  catch `java.lang.Throwable` @[L4650f8..L465102] goto L46510a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465134.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46513a.  v0:= temp;
  #L46513c.  if v0 != 0 then goto L465146;
  #L465140.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L465146.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465158.  if v2 != 0 then goto L465172;
  #L46515c.  v2:= new `java.lang.NullPointerException`;
  #L465160.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L465164.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46516a.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L465170.  return @kind void;
  #L465172.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L465178.  v0:= temp;
  #L46517a.  if v0 != 0 then goto L465188;
  #L46517e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L465182.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L465188.  return @kind void;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465058.  v0:= new `io.reactivex.internal.operators.observable.ObservableCreate$b`;
  #L46505c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/ObservableEmitter;)V` @kind direct;
  #L465062.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46519c.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L4651a0.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L4651a6.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4651ac.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4651c0.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4651c6.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L465074.  v0:= 2I;
  #L465076.  v0:= new `java.lang.Object`[v0];
  #L46507a.  v1:= constclass @type ^`io.reactivex.internal.operators.observable.ObservableCreate$a` @kind object;
  #L46507e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L465084.  v1:= temp @kind object;
  #L465086.  v2:= 0I;
  #L465088.  v0[v2]:= v1 @kind object;
  #L46508c.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L465092.  v1:= temp @kind object;
  #L465094.  v2:= 1I;
  #L465096.  v0[v2]:= v1 @kind object;
  #L46509a.  v1:= "%s{%s}" @kind object;
  #L46509e.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L4650a4.  v0:= temp @kind object;
  #L4650a6.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464ffc.  if v2 != 0 then goto L46500e;
  #L465000.  v2:= new `java.lang.NullPointerException`;
  #L465004.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L465008.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46500e.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.isDisposed:()Z` @kind virtual;
  #L465014.  v0:= temp;
  #L465016.  if v0 != 0 then goto L465038;
  #L46501a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46501e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L465024.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L46502a.  v2:= 1I;
  #L46502c.  return v2;
  #L46502e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L465030.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$a;.dispose:()V` @kind virtual;
  #L465036.  throw v2;
  #L465038.  v2:= 0I;
  #L46503a.  return v2;
  catch `java.lang.Throwable` @[L46501a..L465024] goto L46502e;
}
