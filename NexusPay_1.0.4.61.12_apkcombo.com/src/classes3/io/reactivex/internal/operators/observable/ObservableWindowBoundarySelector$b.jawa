record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4772d4.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L4772da.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` := v1 @kind object;
  #L4772de.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4772f0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L4772f4.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.onComplete:()V` @kind virtual;
  #L4772fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47730c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L477310.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L477316.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477328.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySelector$c` @kind object;
  #L47732c.  call `e`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySelector$c;.e:(Ljava/lang/Object;)V` @kind virtual;
  #L477332.  return @kind void;
}
