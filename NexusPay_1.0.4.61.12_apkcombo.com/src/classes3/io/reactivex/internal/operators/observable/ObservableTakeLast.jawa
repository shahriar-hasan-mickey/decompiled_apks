record `io.reactivex.internal.operators.observable.ObservableTakeLast` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `int` `io.reactivex.internal.operators.observable.ObservableTakeLast.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLast` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast;.<init>:(Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47462c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L474632.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLast.a` @type ^`int` := v2;
  #L474636.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableTakeLast` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L474648.  v0:= v3.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L47464c.  v1:= new `io.reactivex.internal.operators.observable.ObservableTakeLast$a`;
  #L474650.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableTakeLast.a` @type ^`int`;
  #L474654.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLast$a;.<init>:(Lio/reactivex/Observer;I)V` @kind direct;
  #L47465a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L474660.  return @kind void;
}
