record `io.reactivex.internal.operators.observable.ObservableZip$b` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableZip$a` `io.reactivex.internal.operators.observable.ObservableZip$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableZip$b.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$b.c` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableZip$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableZip$b.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$b` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableZip$a` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$a;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4797f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4797fa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4797fe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L479804.  v1.`io.reactivex.internal.operators.observable.ObservableZip$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L479808.  v1.`io.reactivex.internal.operators.observable.ObservableZip$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a` := v2 @kind object;
  #L47980c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L479810.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L479816.  v1.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L47981a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableZip$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47982c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479830.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L479836.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableZip$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479848.  v0:= 1I;
  #L47984a.  v1.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` := v0 @kind boolean;
  #L47984e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a` @kind object;
  #L479852.  call `e`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.e:()V` @kind virtual;
  #L479858.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableZip$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L47986c.  v0.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L479870.  v1:= 1I;
  #L479872.  v0.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` := v1 @kind boolean;
  #L479876.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableZip$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a` @kind object;
  #L47987a.  call `e`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.e:()V` @kind virtual;
  #L479880.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableZip$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479894.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L479898.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L47989e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableZip$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableZip$a` @kind object;
  #L4798a2.  call `e`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.e:()V` @kind virtual;
  #L4798a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableZip$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4798bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4798c0.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4798c6.  return @kind void;
}
