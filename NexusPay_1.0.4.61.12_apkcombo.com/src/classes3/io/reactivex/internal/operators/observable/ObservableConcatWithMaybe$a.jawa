record `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.MaybeObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.MaybeSource` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.MaybeSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/MaybeSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L464a70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L464a76.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L464a7a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.MaybeSource` := v2 @kind object;
  #L464a7e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L464a90.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L464a96.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464a48.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464a4e.  v0:= temp @kind object;
  #L464a50.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L464a54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464a5a.  v0:= temp;
  #L464a5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L464aa8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L464aac.  if v0 == 0 then goto L464abc;
  #L464ab0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464ab4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L464aba.  goto L464ad8;
  #L464abc.  v0:= 1I;
  #L464abe.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L464ac2.  v0:= 0I;
  #L464ac4.  call temp:= `replace`(v2, v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464aca.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.MaybeSource` @kind object;
  #L464ace.  v2.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.b` @type ^`io.reactivex.MaybeSource` := v0 @kind object;
  #L464ad2.  call `subscribe`(v1, v2) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L464ad8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464aec.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464af0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L464af6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464b08.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464b0c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L464b12.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L464b24.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464b2a.  v1:= temp;
  #L464b2c.  if v1 == 0 then goto L464b42;
  #L464b30.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.c` @type ^`boolean` @kind boolean;
  #L464b34.  if v1 != 0 then goto L464b42;
  #L464b38.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464b3c.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L464b42.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatWithMaybe$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464b54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464b58.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L464b5e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableConcatWithMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L464b62.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L464b68.  return @kind void;
}
