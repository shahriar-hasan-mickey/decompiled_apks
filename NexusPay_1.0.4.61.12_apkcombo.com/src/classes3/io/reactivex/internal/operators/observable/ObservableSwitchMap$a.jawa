record `io.reactivex.internal.operators.observable.ObservableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4738e8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4738ee.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` := v1 @kind object;
  #L4738f2.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L4738f6.  v0.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`int` := v4;
  #L4738fa.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L47390c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L473912.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L473924.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L473928.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L47392c.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L473930.  v4:= lcmp(v0, v2);
  #L473934.  if v4 != 0 then goto L473948;
  #L473938.  v0:= 1I;
  #L47393a.  v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L47393e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L473942.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L473948.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47395c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L473960.  call `c`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.c:(Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L473966.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L473978.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.b` @type ^`long` @kind wide;
  #L47397c.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L473980.  v2:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$b.j` @type ^`long` @kind wide;
  #L473984.  v4:= lcmp(v0, v2);
  #L473988.  if v4 != 0 then goto L4739a4;
  #L47398c.  if v6 == 0 then goto L47399a;
  #L473990.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L473994.  call temp:= `offer`(v0, v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47399a.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L47399e.  call `b`(v6) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4739a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSwitchMap$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4739b8.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4739be.  v0:= temp;
  #L4739c0.  if v0 == 0 then goto L473a12;
  #L4739c4.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L4739c8.  if v0 == 0 then goto L473a00;
  #L4739cc.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L4739d0.  v0:= 7I;
  #L4739d2.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4739d8.  v0:= temp;
  #L4739da.  v1:= 1I;
  #L4739dc.  if v0 != v1 then goto L4739f4;
  #L4739e0.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4739e4.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L4739e8.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableSwitchMap$b` @kind object;
  #L4739ec.  call `b`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSwitchMap$b;.b:()V` @kind virtual;
  #L4739f2.  return @kind void;
  #L4739f4.  v1:= 2I;
  #L4739f6.  if v0 != v1 then goto L473a00;
  #L4739fa.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4739fe.  return @kind void;
  #L473a00.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L473a04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.c` @type ^`int`;
  #L473a08.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L473a0e.  v2.`io.reactivex.internal.operators.observable.ObservableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L473a12.  return @kind void;
}
