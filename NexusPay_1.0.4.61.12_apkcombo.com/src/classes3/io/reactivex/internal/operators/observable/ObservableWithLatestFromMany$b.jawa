record `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L478f90.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L478f96.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L478f9a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L478f9e.  v2:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[v4];
  #L478fa2.  v3:= 0I;
  #L478fa4.  if v3 >= v4 then goto L478fbc;
  #L478fa8.  v0:= new `io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`;
  #L478fac.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;I)V` @kind direct;
  #L478fb2.  v2[v3]:= v0 @kind object;
  #L478fb6.  v3:= v3 + 1;
  #L478fba.  goto L478fa4;
  #L478fbc.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] := v2 @kind object;
  #L478fc0.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L478fc4.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L478fca.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L478fce.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L478fd2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L478fd8.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L478fdc.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L478fe0.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L478fe6.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L478fea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L478ffc.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L479000.  v1:= 0I;
  #L479002.  v2:= length @variable v0;
  #L479004.  if v1 >= v2 then goto L47901c;
  #L479008.  if v1 == v4 then goto L479016;
  #L47900c.  v2:= v0[v1] @kind object;
  #L479010.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L479016.  v1:= v1 + 1;
  #L47901a.  goto L479002;
  #L47901c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L479068.  if v2 != 0 then goto L479086;
  #L47906c.  v2:= 1I;
  #L47906e.  v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v2 @kind boolean;
  #L479072.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L479078.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L47907c.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L479080.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L479086.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L479098.  v0:= 1I;
  #L47909a.  v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L47909e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4790a2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4790a8.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4790ae.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4790b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4790b6.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4790bc.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4790d0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4790d4.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L4790da.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L479030.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479034.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47903a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L47903e.  v1:= length @variable v0;
  #L479040.  v2:= 0I;
  #L479042.  if v2 >= v1 then goto L479056;
  #L479046.  v3:= v0[v2] @kind object;
  #L47904a.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L479050.  v2:= v2 + 1;
  #L479054.  goto L479042;
  #L479056.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.e:([Lio/reactivex/ObservableSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47921c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$c`[] @kind object;
  #L479220.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479224.  v2:= 0I;
  #L479226.  if v2 >= v7 then goto L479260;
  #L47922a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L479230.  v3:= temp @kind object;
  #L479232.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L479236.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47923c.  v3:= temp;
  #L47923e.  if v3 != 0 then goto L479260;
  #L479242.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L479246.  if v3 == 0 then goto L47924c;
  #L47924a.  goto L479260;
  #L47924c.  v3:= v6[v2] @kind object;
  #L479250.  v4:= v0[v2] @kind object;
  #L479254.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L47925a.  v2:= v2 + 1;
  #L47925e.  goto L479226;
  #L479260.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478f64.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L478f68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L478f6e.  v0:= temp @kind object;
  #L478f70.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L478f74.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478f7a.  v0:= temp;
  #L478f7c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4790ec.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L4790f0.  if v0 != 0 then goto L479110;
  #L4790f4.  v0:= 1I;
  #L4790f6.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4790fa.  v0:= -1I;
  #L4790fc.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L479102.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L479106.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47910a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L479110.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L479124.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L479128.  if v0 == 0 then goto L479134;
  #L47912c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L479132.  return @kind void;
  #L479134.  v0:= 1I;
  #L479136.  v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` := v0 @kind boolean;
  #L47913a.  v0:= -1I;
  #L47913c.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L479142.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L479146.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47914a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lio/reactivex/Observer;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L479150.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L479164.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.g` @type ^`boolean` @kind boolean;
  #L479168.  if v0 == 0 then goto L47916e;
  #L47916c.  return @kind void;
  #L47916e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L479172.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L479178.  v1:= temp;
  #L47917a.  v2:= v1 + 1;
  #L47917e.  v2:= new `java.lang.Object`[v2];
  #L479182.  v3:= 0I;
  #L479184.  v2[v3]:= v5 @kind object;
  #L479188.  if v3 >= v1 then goto L4791a4;
  #L47918c.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L479192.  v5:= temp @kind object;
  #L479194.  if v5 != 0 then goto L47919a;
  #L479198.  return @kind void;
  #L47919a.  v3:= v3 + 1;
  #L47919e.  v2[v3]:= v5 @kind object;
  #L4791a2.  goto L479188;
  #L4791a4.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4791a8.  call temp:= `apply`(v5, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4791ae.  v5:= temp @kind object;
  #L4791b0.  v0:= "combiner returned a null value" @kind object;
  #L4791b4.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4791ba.  v5:= temp @kind object;
  #L4791bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4791c0.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4791c4.  call `onNext`(v0, v5, v4, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lio/reactivex/Observer;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4791ca.  return @kind void;
  #L4791cc.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4791ce.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4791d4.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.dispose:()V` @kind virtual;
  #L4791da.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4791e0.  return @kind void;
  catch `java.lang.Throwable` @[L4791a4..L4791bc] goto L4791cc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWithLatestFromMany$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479200.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L479204.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47920a.  return @kind void;
}
