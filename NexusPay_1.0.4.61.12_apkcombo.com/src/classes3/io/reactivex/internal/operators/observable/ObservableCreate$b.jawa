record `io.reactivex.internal.operators.observable.ObservableCreate$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.ObservableEmitter` @kind interface {
  `io.reactivex.ObservableEmitter` `io.reactivex.internal.operators.observable.ObservableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCreate$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableCreate$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCreate$b.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.ObservableEmitter` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.<init>:(Lio/reactivex/ObservableEmitter;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46528c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L465292.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` := v2 @kind object;
  #L465296.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46529a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L4652a0.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L4652a4.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4652a8.  v0:= 16I;
  #L4652ac.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4652b2.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4652b6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4652c8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4652ce.  v0:= temp;
  #L4652d0.  if v0 != 0 then goto L4652da;
  #L4652d4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L4652da.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4652ec.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4652f0.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4652f4.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4652f8.  v3:= 1I;
  #L4652fa.  v4:= 1I;
  #L4652fc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L465302.  v5:= temp;
  #L465304.  if v5 == 0 then goto L465310;
  #L465308.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46530e.  return @kind void;
  #L465310.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L465316.  v5:= temp @kind object;
  #L465318.  if v5 == 0 then goto L465332;
  #L46531c.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L465322.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L465328.  v1:= temp @kind object;
  #L46532a.  call `onError`(v0, v1) @signature `Lio/reactivex/Emitter;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L465330.  return @kind void;
  #L465332.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L465336.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46533c.  v6:= temp @kind object;
  #L46533e.  if v6 != 0 then goto L465346;
  #L465342.  v7:= 1I;
  #L465344.  goto L465348;
  #L465346.  v7:= 0I;
  #L465348.  if v5 == 0 then goto L465358;
  #L46534c.  if v7 == 0 then goto L465358;
  #L465350.  call `onComplete`(v0) @signature `Lio/reactivex/Emitter;.onComplete:()V` @kind interface;
  #L465356.  return @kind void;
  #L465358.  if v7 == 0 then goto L46536c;
  #L46535c.  v4:= -v4 @kind int;
  #L46535e.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L465364.  v4:= temp;
  #L465366.  if v4 != 0 then goto L4652fc;
  #L46536a.  return @kind void;
  #L46536c.  call `onNext`(v0, v6) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L465372.  goto L4652fc;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4651d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4651dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4651e2.  v0:= temp;
  #L4651e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465384.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L465388.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L46538e.  v0:= temp;
  #L465390.  if v0 != 0 then goto L4653aa;
  #L465394.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L465398.  if v0 == 0 then goto L46539e;
  #L46539c.  goto L4653aa;
  #L46539e.  v0:= 1I;
  #L4653a0.  v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4653a4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L4653aa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4653bc.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4653c2.  v0:= temp;
  #L4653c4.  if v0 != 0 then goto L4653ce;
  #L4653c8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4653ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4653e0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4653e4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L4653ea.  v0:= temp;
  #L4653ec.  if v0 != 0 then goto L465472;
  #L4653f0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L4653f4.  if v0 == 0 then goto L4653fa;
  #L4653f8.  goto L465472;
  #L4653fa.  if v3 != 0 then goto L465414;
  #L4653fe.  v3:= new `java.lang.NullPointerException`;
  #L465402.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L465406.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L46540c.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L465412.  return @kind void;
  #L465414.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46541a.  v0:= temp;
  #L46541c.  if v0 != 0 then goto L465448;
  #L465420.  v0:= 0I;
  #L465422.  v1:= 1I;
  #L465424.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L46542a.  v0:= temp;
  #L46542c.  if v0 == 0 then goto L465448;
  #L465430.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L465434.  call `onNext`(v0, v3) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46543a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L465440.  v3:= temp;
  #L465442.  if v3 != 0 then goto L465464;
  #L465446.  return @kind void;
  #L465448.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46544c.  @monitorenter v0
  #L46544e.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L465454.  @monitorexit v0
  #L465456.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46545c.  v3:= temp;
  #L46545e.  if v3 == 0 then goto L465464;
  #L465462.  return @kind void;
  #L465464.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.b:()V` @kind virtual;
  #L46546a.  return @kind void;
  #L46546c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46546e.  @monitorexit v0
  #L465470.  throw v3;
  #L465472.  return @kind void;
  catch `java.lang.Throwable` @[L46544e..L465456] goto L46546c;
  catch `java.lang.Throwable` @[L46546e..L465470] goto L46546c;
}
procedure `io.reactivex.ObservableEmitter` `serialize`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.serialize:()Lio/reactivex/ObservableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L465258.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L465498.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L46549c.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind interface;
  #L4654a2.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4654b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4654b8.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/ObservableEmitter;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4654be.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46526c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L465270.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L465276.  v0:= temp @kind object;
  #L465278.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.observable.ObservableCreate$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4651f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.a` @type ^`io.reactivex.ObservableEmitter` @kind object;
  #L4651fc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/ObservableEmitter;.isDisposed:()Z` @kind interface;
  #L465202.  v0:= temp;
  #L465204.  v1:= 0I;
  #L465206.  if v0 != 0 then goto L465244;
  #L46520a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` @kind boolean;
  #L46520e.  if v0 == 0 then goto L465214;
  #L465212.  goto L465244;
  #L465214.  if v3 != 0 then goto L465226;
  #L465218.  v3:= new `java.lang.NullPointerException`;
  #L46521c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L465220.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L465226.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46522a.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L465230.  v3:= temp;
  #L465232.  if v3 == 0 then goto L465244;
  #L465236.  v3:= 1I;
  #L465238.  v2.`io.reactivex.internal.operators.observable.ObservableCreate$b.d` @type ^`boolean` := v3 @kind boolean;
  #L46523c.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCreate$b;.a:()V` @kind virtual;
  #L465242.  return v3;
  #L465244.  return v1;
}
