record `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46cd28.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46cd2e.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` := v1 @kind object;
  #L46cd32.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cd44.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` @kind object;
  #L46cd48.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.d:()V` @kind virtual;
  #L46cd4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cd60.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` @kind object;
  #L46cd64.  call `e`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46cd6a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L46cd7c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46cd82.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46cd94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a$a.a` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithMaybe$a` @kind object;
  #L46cd98.  call `f`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L46cd9e.  return @kind void;
}
