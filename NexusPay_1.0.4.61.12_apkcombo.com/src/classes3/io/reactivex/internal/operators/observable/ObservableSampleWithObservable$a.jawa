record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L471664.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L47166a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47166e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L471674.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L471678.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L47168c.  v0:= 1I;
  #L47168e.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L471692.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L471696.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47169c.  v0:= temp;
  #L47169e.  if v0 != 0 then goto L4716b2;
  #L4716a2.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4716a8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4716ac.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4716b2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L4716c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4716c8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4716ce.  v0:= temp;
  #L4716d0.  if v0 != 0 then goto L4716fe;
  #L4716d4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.f` @type ^`boolean` @kind boolean;
  #L4716d8.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @kind virtual;
  #L4716de.  if v0 == 0 then goto L4716ee;
  #L4716e2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4716e6.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4716ec.  return @kind void;
  #L4716ee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4716f2.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4716f8.  v0:= temp;
  #L4716fa.  if v0 != 0 then goto L4716d4;
  #L4716fe.  return @kind void;
}
