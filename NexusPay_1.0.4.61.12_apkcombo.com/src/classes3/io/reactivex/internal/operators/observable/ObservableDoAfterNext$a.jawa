record `io.reactivex.internal.operators.observable.ObservableDoAfterNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableDoAfterNext$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoAfterNext$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4667c0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L4667c6.  v0.`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4667ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoAfterNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4667dc.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4667e0.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4667e6.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L4667ea.  if v0 != 0 then goto L466802;
  #L4667ee.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4667f2.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4667f8.  goto L466802;
  #L4667fa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4667fc.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L466802.  return @kind void;
  catch `java.lang.Throwable` @[L4667ee..L4667f8] goto L4667fa;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoAfterNext$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L466794.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L466798.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46679e.  v0:= temp @kind object;
  #L4667a0.  if v0 == 0 then goto L4667ae;
  #L4667a4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4667a8.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4667ae.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDoAfterNext$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDoAfterNext$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L466778.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L46677e.  v1:= temp;
  #L466780.  return v1;
}
