record `io.reactivex.internal.operators.observable.ObservableScanSeed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableScanSeed.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableScanSeed.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScanSeed` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed;.<init>:(Lio/reactivex/ObservableSource;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47208c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L472092.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed.a` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L472096.  v0.`io.reactivex.internal.operators.observable.ObservableScanSeed.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L47209a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableScanSeed` v4 @kind this, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4720ac.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableScanSeed.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4720b0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4720b6.  v0:= temp @kind object;
  #L4720b8.  v1:= "The seed supplied is null" @kind object;
  #L4720bc.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4720c2.  v0:= temp @kind object;
  #L4720c4.  v1:= v4.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4720c8.  v2:= new `io.reactivex.internal.operators.observable.ObservableScanSeed$a`;
  #L4720cc.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableScanSeed.a` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4720d0.  call `<init>`(v2, v5, v3, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableScanSeed$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @kind direct;
  #L4720d6.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4720dc.  return @kind void;
  #L4720de.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4720e0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4720e6.  call `error`(v0, v5) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L4720ec.  return @kind void;
  catch `java.lang.Throwable` @[L4720ac..L4720c4] goto L4720de;
}
