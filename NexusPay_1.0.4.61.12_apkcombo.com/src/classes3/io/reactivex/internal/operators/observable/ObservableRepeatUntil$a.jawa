record `io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BooleanSupplier` `io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.BooleanSupplier` v2 @kind object, `io.reactivex.internal.disposables.SequentialDisposable` v3 @kind object, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/BooleanSupplier;Lio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46f860.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46f866.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46f86a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v3 @kind object;
  #L46f86e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.c` @type ^`io.reactivex.ObservableSource` := v4 @kind object;
  #L46f872.  v0.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` := v2 @kind object;
  #L46f876.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46f930.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46f936.  v0:= temp;
  #L46f938.  if v0 != 0 then goto L46f956;
  #L46f93c.  v0:= 1I;
  #L46f93e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46f942.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46f948.  v0:= -v0 @kind int;
  #L46f94a.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46f950.  v0:= temp;
  #L46f952.  if v0 != 0 then goto L46f93e;
  #L46f956.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46f888.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L46f88c.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L46f892.  v0:= temp;
  #L46f894.  if v0 == 0 then goto L46f8a4;
  #L46f898.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f89c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46f8a2.  goto L46f8aa;
  #L46f8a4.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.a:()V` @kind virtual;
  #L46f8aa.  return @kind void;
  #L46f8ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46f8ae.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46f8b4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f8b8.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46f8be.  return @kind void;
  catch `java.lang.Throwable` @[L46f888..L46f894] goto L46f8ac;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f8dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f8e0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46f8e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f8f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f8fc.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46f902.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeatUntil$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f914.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeatUntil$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L46f918.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46f91e.  return @kind void;
}
