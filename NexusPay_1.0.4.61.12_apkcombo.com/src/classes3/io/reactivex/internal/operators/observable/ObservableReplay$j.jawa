record `io.reactivex.internal.operators.observable.ObservableReplay$j` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableReplay$h` `io.reactivex.internal.operators.observable.ObservableReplay$j.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReplay$j.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableReplay$j.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableReplay$j.d` @AccessFlag FINAL;
}
global `io.reactivex.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.observable.ObservableReplay$d`[] `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$j.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L470260.  v0:= 0I;
  #L470262.  v1:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v0];
  #L470266.  `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] := v1 @kind object;
  #L47026a.  v0:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v0];
  #L47026e.  `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] := v0 @kind object;
  #L470272.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$h` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.<init>:(Lio/reactivex/internal/operators/observable/ObservableReplay$h;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L470284.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47028a.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` := v2 @kind object;
  #L47028e.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L470292.  v0:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L470296.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L47029c.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4702a0.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4702a4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4702aa.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4702ae.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v4 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.a:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4701e0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4701e4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4701ea.  v0:= temp @kind object;
  #L4701ec.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4701f0.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4701f4.  v2:= 0I;
  #L4701f6.  if v0 != v1 then goto L4701fc;
  #L4701fa.  return v2;
  #L4701fc.  v1:= length @variable v0;
  #L4701fe.  v3:= v1 + 1;
  #L470202.  v3:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v3];
  #L470206.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47020c.  v3[v1]:= v5 @kind object;
  #L470210.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470214.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47021a.  v0:= temp;
  #L47021c.  if v0 == 0 then goto L4701e0;
  #L470220.  v5:= 1I;
  #L470222.  return v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v6 @kind this, `io.reactivex.internal.operators.observable.ObservableReplay$d` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.b:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4703a0.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4703a4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4703aa.  v0:= temp @kind object;
  #L4703ac.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L4703b0.  v1:= length @variable v0;
  #L4703b2.  if v1 != 0 then goto L4703b8;
  #L4703b6.  return @kind void;
  #L4703b8.  v2:= -1I;
  #L4703ba.  v3:= 0I;
  #L4703bc.  v4:= 0I;
  #L4703be.  if v4 >= v1 then goto L4703dc;
  #L4703c2.  v5:= v0[v4] @kind object;
  #L4703c6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4703cc.  v5:= temp;
  #L4703ce.  if v5 == 0 then goto L4703d6;
  #L4703d2.  v2:= v4;
  #L4703d4.  goto L4703dc;
  #L4703d6.  v4:= v4 + 1;
  #L4703da.  goto L4703be;
  #L4703dc.  if v2 >= 0 then goto L4703e2;
  #L4703e0.  return @kind void;
  #L4703e2.  v4:= 1I;
  #L4703e4.  if v1 != v4 then goto L4703ee;
  #L4703e8.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.e` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4703ec.  goto L47040c;
  #L4703ee.  v5:= v1 + -1;
  #L4703f2.  v5:= new `io.reactivex.internal.operators.observable.ObservableReplay$d`[v5];
  #L4703f6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4703fc.  v3:= v2 + 1;
  #L470400.  v1:= v1 - v2 @kind int;
  #L470402.  v1:= v1 - v4 @kind int;
  #L470404.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47040a.  v1:= v5 @kind object;
  #L47040c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470410.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L470416.  v0:= temp;
  #L470418.  if v0 == 0 then goto L4703a0;
  #L47041c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L470430.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470434.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47043a.  v0:= temp @kind object;
  #L47043c.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L470440.  v1:= length @variable v0;
  #L470442.  v2:= 0I;
  #L470444.  if v2 >= v1 then goto L47045c;
  #L470448.  v3:= v0[v2] @kind object;
  #L47044c.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L470450.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L470456.  v2:= v2 + 1;
  #L47045a.  goto L470444;
  #L47045c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L470470.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470474.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L470478.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47047e.  v0:= temp @kind object;
  #L470480.  v0:= (`io.reactivex.internal.operators.observable.ObservableReplay$d`[]) v0 @kind object;
  #L470484.  v1:= length @variable v0;
  #L470486.  v2:= 0I;
  #L470488.  if v2 >= v1 then goto L4704a0;
  #L47048c.  v3:= v0[v2] @kind object;
  #L470490.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L470494.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.c:(Lio/reactivex/internal/operators/observable/ObservableReplay$d;)V` @kind interface;
  #L47049a.  v2:= v2 + 1;
  #L47049e.  goto L470488;
  #L4704a0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4702c0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4702c4.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L4702c8.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4702ce.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4702d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L470234.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L470238.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47023e.  v0:= temp @kind object;
  #L470240.  v1:= `@@io.reactivex.internal.operators.observable.ObservableReplay$j.f` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$d`[] @kind object;
  #L470244.  if v0 != v1 then goto L47024c;
  #L470248.  v0:= 1I;
  #L47024a.  goto L47024e;
  #L47024c.  v0:= 0I;
  #L47024e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4702e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L4702ec.  if v0 != 0 then goto L470306;
  #L4702f0.  v0:= 1I;
  #L4702f2.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L4702f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L4702fa.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.complete:()V` @kind interface;
  #L470300.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @kind virtual;
  #L470306.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470318.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L47031c.  if v0 != 0 then goto L470338;
  #L470320.  v0:= 1I;
  #L470322.  v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L470326.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L47032a.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L470330.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.d:()V` @kind virtual;
  #L470336.  goto L47033e;
  #L470338.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47033e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L470350.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.b` @type ^`boolean` @kind boolean;
  #L470354.  if v0 != 0 then goto L470368;
  #L470358.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReplay$j.a` @type ^`io.reactivex.internal.operators.observable.ObservableReplay$h` @kind object;
  #L47035c.  call `b`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$h;.b:(Ljava/lang/Object;)V` @kind interface;
  #L470362.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @kind virtual;
  #L470368.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReplay$j` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L47037c.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L470382.  v1:= temp;
  #L470384.  if v1 == 0 then goto L47038e;
  #L470388.  call `c`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$j;.c:()V` @kind virtual;
  #L47038e.  return @kind void;
}
