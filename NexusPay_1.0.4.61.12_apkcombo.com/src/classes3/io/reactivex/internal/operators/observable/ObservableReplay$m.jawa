record `io.reactivex.internal.operators.observable.ObservableReplay$m` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.observable.ObservableReplay$a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableReplay$m.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableReplay$m.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableReplay$m.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableReplay$m.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableReplay$m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4706f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.<init>:()V` @kind direct;
  #L4706fe.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L470702.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.f` @type ^`int` := v1;
  #L470706.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` := v2 @kind wide;
  #L47070a.  v0.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L47070e.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4706a8.  v0:= new `io.reactivex.schedulers.Timed`;
  #L4706ac.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L4706b0.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4706b4.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4706ba.  v1:= temp @kind wide;
  #L4706bc.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4706c0.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L4706c6.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.observable.ObservableReplay$f` `f`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.f:()Lio/reactivex/internal/operators/observable/ObservableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L47060c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L470610.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L470614.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L47061a.  v0:= temp @kind wide;
  #L47061c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L470620.  v0:= v0 - v2 @kind long;
  #L470622.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470628.  v2:= temp @kind object;
  #L47062a.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L47062e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470634.  v3:= temp @kind object;
  #L470636.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L47063a.  v7:= v3 @kind object;
  #L47063c.  v3:= v2 @kind object;
  #L47063e.  v2:= v7 @kind object;
  #L470640.  if v2 != 0 then goto L470646;
  #L470644.  goto L470696;
  #L470646.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L47064a.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L47064e.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L470654.  v5:= temp @kind object;
  #L470656.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L47065c.  v5:= temp;
  #L47065e.  if v5 != 0 then goto L470696;
  #L470662.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L470668.  v5:= temp @kind object;
  #L47066a.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L470670.  v5:= temp;
  #L470672.  if v5 == 0 then goto L470678;
  #L470676.  goto L470696;
  #L470678.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L47067e.  v4:= temp @kind wide;
  #L470680.  v6:= lcmp(v4, v0);
  #L470684.  if v6 > 0 then goto L470696;
  #L470688.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47068e.  v3:= temp @kind object;
  #L470690.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L470694.  goto L47063a;
  #L470696.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L4706d8.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L4706dc.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4706e2.  v1:= temp @kind object;
  #L4706e4.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L470720.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L470724.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L470728.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L47072e.  v0:= temp @kind wide;
  #L470730.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L470734.  v0:= v0 - v2 @kind long;
  #L470736.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47073c.  v2:= temp @kind object;
  #L47073e.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L470742.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470748.  v3:= temp @kind object;
  #L47074a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L47074e.  v4:= 0I;
  #L470750.  v9:= v3 @kind object;
  #L470752.  v3:= v2 @kind object;
  #L470754.  v2:= v9 @kind object;
  #L470756.  if v2 == 0 then goto L4707ba;
  #L47075a.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L47075e.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.f` @type ^`int`;
  #L470762.  v7:= 1I;
  #L470764.  if v5 <= v6 then goto L470786;
  #L470768.  if v5 <= v7 then goto L470786;
  #L47076c.  v4:= v4 + 1;
  #L470770.  v5:= v5 + -1;
  #L470774.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v5;
  #L470778.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47077e.  v3:= temp @kind object;
  #L470780.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L470784.  goto L470750;
  #L470786.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L47078a.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L47078e.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L470794.  v5:= temp @kind wide;
  #L470796.  v8:= lcmp(v5, v0);
  #L47079a.  if v8 > 0 then goto L4707ba;
  #L47079e.  v4:= v4 + 1;
  #L4707a2.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L4707a6.  v3:= v3 - v7 @kind int;
  #L4707a8.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L4707ac.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4707b2.  v3:= temp @kind object;
  #L4707b4.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L4707b8.  goto L470750;
  #L4707ba.  if v4 == 0 then goto L4707c4;
  #L4707be.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L4707c4.  return @kind void;
}
procedure `void` `l`(`io.reactivex.internal.operators.observable.ObservableReplay$m` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$m;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4707d8.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.c` @type ^`io.reactivex.Scheduler` @kind object;
  #L4707dc.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4707e0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4707e6.  v0:= temp @kind wide;
  #L4707e8.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$m.d` @type ^`long` @kind wide;
  #L4707ec.  v0:= v0 - v2 @kind long;
  #L4707ee.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4707f4.  v2:= temp @kind object;
  #L4707f6.  v2:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v2 @kind object;
  #L4707fa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470800.  v3:= temp @kind object;
  #L470802.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L470806.  v4:= 0I;
  #L470808.  v9:= v3 @kind object;
  #L47080a.  v3:= v2 @kind object;
  #L47080c.  v2:= v9 @kind object;
  #L47080e.  if v2 == 0 then goto L470850;
  #L470812.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L470816.  v6:= 1I;
  #L470818.  if v5 <= v6 then goto L470850;
  #L47081c.  v5:= v2.`io.reactivex.internal.operators.observable.ObservableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L470820.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L470824.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L47082a.  v7:= temp @kind wide;
  #L47082c.  v5:= lcmp(v7, v0);
  #L470830.  if v5 > 0 then goto L470850;
  #L470834.  v4:= v4 + 1;
  #L470838.  v3:= v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int`;
  #L47083c.  v3:= v3 - v6 @kind int;
  #L47083e.  v10.`io.reactivex.internal.operators.observable.ObservableReplay$a.b` @type ^`int` := v3;
  #L470842.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L470848.  v3:= temp @kind object;
  #L47084a.  v3:= (`io.reactivex.internal.operators.observable.ObservableReplay$f`) v3 @kind object;
  #L47084e.  goto L470808;
  #L470850.  if v4 == 0 then goto L47085a;
  #L470854.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReplay$a;.i:(Lio/reactivex/internal/operators/observable/ObservableReplay$f;)V` @kind virtual;
  #L47085a.  return @kind void;
}
