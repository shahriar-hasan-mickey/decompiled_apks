record `io.reactivex.internal.operators.observable.ObservableConcatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L463b40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L463b46.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L463b4a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L463b4e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int` := v3;
  #L463b52.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` := v4 @kind boolean;
  #L463b56.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L463b5a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L463b60.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L463b64.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$a$a`;
  #L463b68.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;)V` @kind direct;
  #L463b6e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` := v2 @kind object;
  #L463b72.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L463bb0.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L463bb6.  v0:= temp;
  #L463bb8.  if v0 == 0 then goto L463bbe;
  #L463bbc.  return @kind void;
  #L463bbe.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L463bc2.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L463bc6.  v2:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463bca.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` @kind boolean;
  #L463bce.  if v3 != 0 then goto L463d1a;
  #L463bd2.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L463bd6.  if v3 == 0 then goto L463be2;
  #L463bda.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L463be0.  return @kind void;
  #L463be2.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.f` @type ^`boolean` @kind boolean;
  #L463be6.  v4:= 1I;
  #L463be8.  if v3 != 0 then goto L463c16;
  #L463bec.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L463bf2.  v3:= temp @kind object;
  #L463bf4.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L463bf8.  if v3 == 0 then goto L463c16;
  #L463bfc.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L463c02.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L463c06.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L463c0c.  v1:= temp @kind object;
  #L463c0e.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463c14.  return @kind void;
  #L463c16.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` @kind boolean;
  #L463c1a.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L463c20.  v5:= temp @kind object;
  #L463c22.  if v5 != 0 then goto L463c2a;
  #L463c26.  v6:= 1I;
  #L463c28.  goto L463c2c;
  #L463c2a.  v6:= 0I;
  #L463c2c.  if v3 == 0 then goto L463c54;
  #L463c30.  if v6 == 0 then goto L463c54;
  #L463c34.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L463c38.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L463c3e.  v1:= temp @kind object;
  #L463c40.  if v1 == 0 then goto L463c4c;
  #L463c44.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463c4a.  goto L463c52;
  #L463c4c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L463c52.  return @kind void;
  #L463c54.  if v6 != 0 then goto L463d1a;
  #L463c58.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L463c5c.  call temp:= `apply`(v3, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L463c62.  v3:= temp @kind object;
  #L463c64.  v5:= "The mapper returned a null ObservableSource" @kind object;
  #L463c68.  call temp:= `requireNonNull`(v3, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L463c6e.  v3:= temp @kind object;
  #L463c70.  v3:= (`io.reactivex.ObservableSource`) v3 @kind object;
  #L463c74.  v5:= instanceof @variable v3 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L463c78.  if v5 == 0 then goto L463cac;
  #L463c7c.  v3:= (`java.util.concurrent.Callable`) v3 @kind object;
  #L463c80.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L463c86.  v3:= temp @kind object;
  #L463c88.  if v3 == 0 then goto L463bca;
  #L463c8c.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L463c90.  if v4 != 0 then goto L463bca;
  #L463c94.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L463c9a.  goto L463bca;
  #L463c9c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463c9e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L463ca4.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463caa.  goto L463bca;
  #L463cac.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.i` @type ^`boolean` := v4 @kind boolean;
  #L463cb0.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L463cb4.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L463cba.  goto L463d1a;
  #L463cbc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463cbe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L463cc4.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L463cc8.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463ccc.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463cd2.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L463cd8.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463cde.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L463ce4.  v1:= temp @kind object;
  #L463ce6.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463cec.  return @kind void;
  #L463cee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463cf0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L463cf6.  v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v4 @kind boolean;
  #L463cfa.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463cfe.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463d04.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463d0a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L463d10.  v1:= temp @kind object;
  #L463d12.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463d18.  return @kind void;
  #L463d1a.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L463d20.  v3:= temp;
  #L463d22.  if v3 != 0 then goto L463bca;
  #L463d26.  return @kind void;
  catch `java.lang.Throwable` @[L463c1a..L463c22] goto L463cee;
  catch `java.lang.Throwable` @[L463c58..L463c74] goto L463cbc;
  catch `java.lang.Throwable` @[L463c7c..L463c88] goto L463c9c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463b84.  v0:= 1I;
  #L463b86.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` := v0 @kind boolean;
  #L463b8a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463b8e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463b94.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.e` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$a$a` @kind object;
  #L463b98.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a$a;.a:()V` @kind virtual;
  #L463b9e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463b28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.k` @type ^`boolean` @kind boolean;
  #L463b2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463d5c.  v0:= 1I;
  #L463d5e.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v0 @kind boolean;
  #L463d62.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463d68.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463d7c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463d80.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463d86.  v0:= temp;
  #L463d88.  if v0 == 0 then goto L463d9a;
  #L463d8c.  v2:= 1I;
  #L463d8e.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v2 @kind boolean;
  #L463d92.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463d98.  goto L463da0;
  #L463d9a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L463da0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463db4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int`;
  #L463db8.  if v0 != 0 then goto L463dc6;
  #L463dbc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L463dc0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L463dc6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463dcc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L463de0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463de4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L463dea.  v0:= temp;
  #L463dec.  if v0 == 0 then goto L463e64;
  #L463df0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.h` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L463df4.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L463df8.  if v0 == 0 then goto L463e48;
  #L463dfc.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L463e00.  v0:= 3I;
  #L463e02.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L463e08.  v0:= temp;
  #L463e0a.  v1:= 1I;
  #L463e0c.  if v0 != v1 then goto L463e2e;
  #L463e10.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L463e14.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L463e18.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.j` @type ^`boolean` := v1 @kind boolean;
  #L463e1c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L463e20.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463e26.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$a;.a:()V` @kind virtual;
  #L463e2c.  return @kind void;
  #L463e2e.  v1:= 2I;
  #L463e30.  if v0 != v1 then goto L463e48;
  #L463e34.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.l` @type ^`int` := v0;
  #L463e38.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L463e3c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L463e40.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463e46.  return @kind void;
  #L463e48.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L463e4c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.c` @type ^`int`;
  #L463e50.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L463e56.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L463e5a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L463e5e.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463e64.  return @kind void;
}
