record `io.reactivex.internal.operators.observable.ObservableZip$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableZip$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableZip$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableZip$b`[] `io.reactivex.internal.operators.observable.ObservableZip$a.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableZip$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableZip$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableZip$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableZip$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L479568.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47956e.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L479572.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L479576.  v1:= new `io.reactivex.internal.operators.observable.ObservableZip$b`[v3];
  #L47957a.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] := v1 @kind object;
  #L47957e.  v1:= new `java.lang.Object`[v3];
  #L479582.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] := v1 @kind object;
  #L479586.  v0.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` := v4 @kind boolean;
  #L47958a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableZip$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @AccessFlag  {
    temp;

  #L47959c.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L4795a2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L4795a8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4795bc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4795c0.  v1:= length @variable v0;
  #L4795c2.  v2:= 0I;
  #L4795c4.  if v2 >= v1 then goto L4795d8;
  #L4795c8.  v3:= v0[v2] @kind object;
  #L4795cc.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.a:()V` @kind virtual;
  #L4795d2.  v2:= v2 + 1;
  #L4795d6.  goto L4795c4;
  #L4795d8.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.observable.ObservableZip$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `io.reactivex.Observer` v5 @kind object, `boolean` v6 , `io.reactivex.internal.operators.observable.ObservableZip$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4794cc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4794d0.  v1:= 1I;
  #L4794d2.  if v0 == 0 then goto L4794de;
  #L4794d6.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4794dc.  return v1;
  #L4794de.  if v3 == 0 then goto L47953c;
  #L4794e2.  if v6 == 0 then goto L47950c;
  #L4794e6.  if v4 == 0 then goto L47953c;
  #L4794ea.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4794ee.  v2.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L4794f2.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L4794f8.  if v3 == 0 then goto L479504;
  #L4794fc.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L479502.  goto L47950a;
  #L479504.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47950a.  return v1;
  #L47950c.  v3:= v7.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L479510.  if v3 == 0 then goto L479526;
  #L479514.  v2.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L479518.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L47951e.  call `onError`(v5, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L479524.  return v1;
  #L479526.  if v4 == 0 then goto L47953c;
  #L47952a.  v2.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v1 @kind boolean;
  #L47952e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L479534.  call `onComplete`(v5) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L47953a.  return v1;
  #L47953c.  v3:= 0I;
  #L47953e.  return v3;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableZip$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4795ec.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L4795f0.  v1:= length @variable v0;
  #L4795f2.  v2:= 0I;
  #L4795f4.  if v2 >= v1 then goto L47960c;
  #L4795f8.  v3:= v0[v2] @kind object;
  #L4795fc.  v3:= v3.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L479600.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L479606.  v2:= v2 + 1;
  #L47960a.  goto L4795f4;
  #L47960c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479620.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L479624.  if v0 != 0 then goto L479646;
  #L479628.  v0:= 1I;
  #L47962a.  v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v0 @kind boolean;
  #L47962e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.b:()V` @kind virtual;
  #L479634.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47963a.  v0:= temp;
  #L47963c.  if v0 != 0 then goto L479646;
  #L479640.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.d:()V` @kind virtual;
  #L479646.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableZip$a` v20 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.e:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L479658.  v7:= v20 @kind object;
  #L47965c.  call temp:= `getAndIncrement`(v20) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L479662.  v0:= temp;
  #L479664.  if v0 == 0 then goto L47966a;
  #L479668.  return @kind void;
  #L47966a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L47966e.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L479672.  v9:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.d` @type ^`java.lang.Object`[] @kind object;
  #L479676.  v10:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.e` @type ^`boolean` @kind boolean;
  #L47967a.  v11:= 1I;
  #L47967c.  v12:= 1I;
  #L47967e.  v13:= length @variable v0;
  #L479680.  v14:= 0I;
  #L479682.  v15:= 0I;
  #L479684.  v16:= 0I;
  #L479688.  v17:= 0I;
  #L47968c.  if v15 >= v13 then goto L479714;
  #L479690.  v6:= v0[v15] @kind object;
  #L479694.  v1:= v9[v17] @kind object;
  #L479698.  if v1 != 0 then goto L4796e4;
  #L47969c.  v2:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L4796a0.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4796a4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4796aa.  v18:= temp @kind object;
  #L4796ac.  if v18 != 0 then goto L4796b6;
  #L4796b0.  v19:= 1I;
  #L4796b4.  goto L4796ba;
  #L4796b6.  v19:= 0I;
  #L4796ba.  v1:= v20 @kind object;
  #L4796be.  v3:= v19;
  #L4796c2.  v4:= v8 @kind object;
  #L4796c4.  v5:= v10;
  #L4796c6.  call temp:= `c`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.c:(ZZLio/reactivex/Observer;ZLio/reactivex/internal/operators/observable/ObservableZip$b;)Z` @kind virtual;
  #L4796cc.  v1:= temp;
  #L4796ce.  if v1 == 0 then goto L4796d4;
  #L4796d2.  return @kind void;
  #L4796d4.  if v19 != 0 then goto L4796de;
  #L4796d8.  v9[v17]:= v18 @kind object;
  #L4796dc.  goto L47970a;
  #L4796de.  v16:= v16 + 1;
  #L4796e2.  goto L47970a;
  #L4796e4.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.c` @type ^`boolean` @kind boolean;
  #L4796e8.  if v1 == 0 then goto L47970a;
  #L4796ec.  if v10 != 0 then goto L47970a;
  #L4796f0.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableZip$b.d` @type ^`java.lang.Throwable` @kind object;
  #L4796f4.  if v1 == 0 then goto L47970a;
  #L4796f8.  v7.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` := v11 @kind boolean;
  #L4796fc.  call `a`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L479702.  call `onError`(v8, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L479708.  return @kind void;
  #L47970a.  v17:= v17 + 1;
  #L47970e.  v15:= v15 + 1;
  #L479712.  goto L47968c;
  #L479714.  if v16 == 0 then goto L479728;
  #L479718.  v1:= -v12 @kind int;
  #L47971a.  call temp:= `addAndGet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L479720.  v12:= temp;
  #L479722.  if v12 != 0 then goto L47967e;
  #L479726.  return @kind void;
  #L479728.  v1:= v7.`io.reactivex.internal.operators.observable.ObservableZip$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47972c.  call temp:= `clone`(v9) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L479732.  v2:= temp @kind object;
  #L479734.  call temp:= `apply`(v1, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47973a.  v1:= temp @kind object;
  #L47973c.  v2:= "The zipper returned a null value" @kind object;
  #L479740.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L479746.  v1:= temp @kind object;
  #L479748.  call `onNext`(v8, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47974e.  v1:= 0I;
  #L479750.  call `fill`(v9, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L479756.  goto L47967e;
  #L479758.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47975a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L479760.  call `a`(v20) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.a:()V` @kind virtual;
  #L479766.  call `onError`(v8, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47976c.  return @kind void;
  catch `java.lang.Throwable` @[L479728..L479748] goto L479758;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableZip$a` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.f:([Lio/reactivex/ObservableSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47978c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableZip$b`[] @kind object;
  #L479790.  v1:= length @variable v0;
  #L479792.  v2:= 0I;
  #L479794.  v3:= 0I;
  #L479796.  if v3 >= v1 then goto L4797ae;
  #L47979a.  v4:= new `io.reactivex.internal.operators.observable.ObservableZip$b`;
  #L47979e.  call `<init>`(v4, v5, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableZip$a;I)V` @kind direct;
  #L4797a4.  v0[v3]:= v4 @kind object;
  #L4797a8.  v3:= v3 + 1;
  #L4797ac.  goto L479796;
  #L4797ae.  call `lazySet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L4797b4.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4797b8.  call `onSubscribe`(v7, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4797be.  if v2 >= v1 then goto L4797e0;
  #L4797c2.  v7:= v5.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L4797c6.  if v7 == 0 then goto L4797cc;
  #L4797ca.  return @kind void;
  #L4797cc.  v7:= v6[v2] @kind object;
  #L4797d0.  v3:= v0[v2] @kind object;
  #L4797d4.  call `subscribe`(v7, v3) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4797da.  v2:= v2 + 1;
  #L4797de.  goto L4797be;
  #L4797e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableZip$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableZip$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479550.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableZip$a.f` @type ^`boolean` @kind boolean;
  #L479554.  return v0;
}
