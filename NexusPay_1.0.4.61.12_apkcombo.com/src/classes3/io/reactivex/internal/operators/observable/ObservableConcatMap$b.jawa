record `io.reactivex.internal.operators.observable.ObservableConcatMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableConcatMap$b$a` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L463f40.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L463f46.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L463f4a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L463f4e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int` := v3;
  #L463f52.  v2:= new `io.reactivex.internal.operators.observable.ObservableConcatMap$b$a`;
  #L463f56.  call `<init>`(v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;)V` @kind direct;
  #L463f5c.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$b$a` := v2 @kind object;
  #L463f60.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L463fb8.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L463fbe.  v0:= temp;
  #L463fc0.  if v0 == 0 then goto L463fc6;
  #L463fc4.  return @kind void;
  #L463fc6.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L463fca.  if v0 == 0 then goto L463fda;
  #L463fce.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L463fd2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L463fd8.  return @kind void;
  #L463fda.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` @kind boolean;
  #L463fde.  if v0 != 0 then goto L46408e;
  #L463fe2.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L463fe6.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L463fea.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L463ff0.  v1:= temp @kind object;
  #L463ff2.  v2:= 1I;
  #L463ff4.  if v1 != 0 then goto L463ffc;
  #L463ff8.  v3:= 1I;
  #L463ffa.  goto L463ffe;
  #L463ffc.  v3:= 0I;
  #L463ffe.  if v0 == 0 then goto L464016;
  #L464002.  if v3 == 0 then goto L464016;
  #L464006.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L46400a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46400e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L464014.  return @kind void;
  #L464016.  if v3 != 0 then goto L46408e;
  #L46401a.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L46401e.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L464024.  v0:= temp @kind object;
  #L464026.  v1:= "The mapper returned a null ObservableSource" @kind object;
  #L46402a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L464030.  v0:= temp @kind object;
  #L464032.  v0:= (`io.reactivex.ObservableSource`) v0 @kind object;
  #L464036.  v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v2 @kind boolean;
  #L46403a.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L46403e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L464044.  goto L46408e;
  #L464046.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L464048.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46404e.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L464054.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L464058.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46405e.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L464062.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L464068.  return @kind void;
  #L46406a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46406c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L464072.  call `dispose`(v4) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L464078.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46407c.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464082.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L464086.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46408c.  return @kind void;
  #L46408e.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L464094.  v0:= temp;
  #L464096.  if v0 != 0 then goto L463fc6;
  #L46409a.  return @kind void;
  catch `java.lang.Throwable` @[L463fe6..L463ff2] goto L46406a;
  catch `java.lang.Throwable` @[L46401a..L464036] goto L464046;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4640c4.  v0:= 0I;
  #L4640c6.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L4640ca.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4640d0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463f74.  v0:= 1I;
  #L463f76.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` := v0 @kind boolean;
  #L463f7a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableConcatMap$b$a` @kind object;
  #L463f7e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b$a;.a:()V` @kind virtual;
  #L463f84.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L463f88.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L463f8e.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L463f94.  v0:= temp;
  #L463f96.  if v0 != 0 then goto L463fa4;
  #L463f9a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L463f9e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L463fa4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463f28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L463f2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4640e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4640e8.  if v0 == 0 then goto L4640ee;
  #L4640ec.  return @kind void;
  #L4640ee.  v0:= 1I;
  #L4640f0.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4640f4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4640fa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46410c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L464110.  if v0 == 0 then goto L46411c;
  #L464114.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46411a.  return @kind void;
  #L46411c.  v0:= 1I;
  #L46411e.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L464122.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.dispose:()V` @kind virtual;
  #L464128.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46412c.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L464132.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464144.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L464148.  if v0 == 0 then goto L46414e;
  #L46414c.  return @kind void;
  #L46414e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int`;
  #L464152.  if v0 != 0 then goto L464160;
  #L464156.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46415a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L464160.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L464166.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMap$b` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L464178.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46417c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464182.  v0:= temp;
  #L464184.  if v0 == 0 then goto L4641fc;
  #L464188.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.f` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L46418c.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L464190.  if v0 == 0 then goto L4641e0;
  #L464194.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L464198.  v0:= 3I;
  #L46419a.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4641a0.  v0:= temp;
  #L4641a2.  v1:= 1I;
  #L4641a4.  if v0 != v1 then goto L4641c6;
  #L4641a8.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4641ac.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4641b0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.i` @type ^`boolean` := v1 @kind boolean;
  #L4641b4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4641b8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4641be.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMap$b;.a:()V` @kind virtual;
  #L4641c4.  return @kind void;
  #L4641c6.  v1:= 2I;
  #L4641c8.  if v0 != v1 then goto L4641e0;
  #L4641cc.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.j` @type ^`int` := v0;
  #L4641d0.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4641d4.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4641d8.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4641de.  return @kind void;
  #L4641e0.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4641e4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.d` @type ^`int`;
  #L4641e8.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4641ee.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4641f2.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMap$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L4641f6.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4641fc.  return @kind void;
}
