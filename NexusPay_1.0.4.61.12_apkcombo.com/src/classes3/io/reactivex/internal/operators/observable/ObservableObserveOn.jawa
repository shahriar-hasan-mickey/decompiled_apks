record `io.reactivex.internal.operators.observable.ObservableObserveOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableObserveOn.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableObserveOn.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableObserveOn.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableObserveOn` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/Scheduler;ZI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L46da34.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L46da3a.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.a` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L46da3e.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.b` @type ^`boolean` := v3 @kind boolean;
  #L46da42.  v0.`io.reactivex.internal.operators.observable.ObservableObserveOn.c` @type ^`int` := v4;
  #L46da46.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableObserveOn` v5 @kind this, `io.reactivex.Observer` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46da58.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.a` @type ^`io.reactivex.Scheduler` @kind object;
  #L46da5c.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.schedulers.TrampolineScheduler` @kind boolean;
  #L46da60.  if v1 == 0 then goto L46da70;
  #L46da64.  v0:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46da68.  call `subscribe`(v0, v6) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46da6e.  goto L46da94;
  #L46da70.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L46da76.  v0:= temp @kind object;
  #L46da78.  v1:= v5.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46da7c.  v2:= new `io.reactivex.internal.operators.observable.ObservableObserveOn$a`;
  #L46da80.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.b` @type ^`boolean` @kind boolean;
  #L46da84.  v4:= v5.`io.reactivex.internal.operators.observable.ObservableObserveOn.c` @type ^`int`;
  #L46da88.  call `<init>`(v2, v6, v0, v3, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableObserveOn$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L46da8e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46da94.  return @kind void;
}
