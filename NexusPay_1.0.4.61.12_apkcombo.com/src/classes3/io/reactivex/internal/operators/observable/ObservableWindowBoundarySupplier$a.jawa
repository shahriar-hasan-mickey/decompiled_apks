record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.observers.DisposableObserver` @kind class {
  `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L477934.  call `<init>`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.<init>:()V` @kind direct;
  #L47793a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` := v1 @kind object;
  #L47793e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477950.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L477954.  if v0 == 0 then goto L47795a;
  #L477958.  return @kind void;
  #L47795a.  v0:= 1I;
  #L47795c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L477960.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L477964.  call `c`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.c:()V` @kind virtual;
  #L47796a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47797c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L477980.  if v0 == 0 then goto L47798c;
  #L477984.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47798a.  return @kind void;
  #L47798c.  v0:= 1I;
  #L47798e.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L477992.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L477996.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47799c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4779b0.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L4779b4.  if v1 == 0 then goto L4779ba;
  #L4779b8.  return @kind void;
  #L4779ba.  v1:= 1I;
  #L4779bc.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4779c0.  call `dispose`(v0) @signature `Lio/reactivex/observers/DisposableObserver;.dispose:()V` @kind virtual;
  #L4779c6.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind object;
  #L4779ca.  call `e`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.e:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;)V` @kind virtual;
  #L4779d0.  return @kind void;
}
