record `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.QueueDisposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.<init>:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L471b14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L471b1a.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L471b1e.  v0.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` := v2 @kind object;
  #L471b22.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471b34.  v0:= 3I;
  #L471b36.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L471b3c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471b50.  v0:= 3I;
  #L471b52.  call `set`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.set:(I)V` @kind virtual;
  #L471b58.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471a34.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L471a3a.  v0:= temp;
  #L471a3c.  v1:= 3I;
  #L471a3e.  if v0 != v1 then goto L471a46;
  #L471a42.  v0:= 1I;
  #L471a44.  goto L471a48;
  #L471a46.  v0:= 0I;
  #L471a48.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471a5c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L471a62.  v0:= temp;
  #L471a64.  v1:= 1I;
  #L471a66.  if v0 == v1 then goto L471a6c;
  #L471a6a.  goto L471a6e;
  #L471a6c.  v1:= 0I;
  #L471a6e.  return v1;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471a80.  v2:= new `java.lang.UnsupportedOperationException`;
  #L471a84.  v0:= "Should not be called!" @kind object;
  #L471a88.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L471a8e.  throw v2;
}
procedure `boolean` `offer`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L471aa0.  v1:= new `java.lang.UnsupportedOperationException`;
  #L471aa4.  v2:= "Should not be called!" @kind object;
  #L471aa8.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L471aae.  throw v1;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L471ae4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L471aea.  v0:= temp;
  #L471aec.  v1:= 1I;
  #L471aee.  if v0 != v1 then goto L471b00;
  #L471af2.  v0:= 3I;
  #L471af4.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L471afa.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L471afe.  return v0 @kind object;
  #L471b00.  v0:= 0I;
  #L471b02.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471ac0.  v0:= 1I;
  #L471ac2.  v2:= v2 ^& v0 @kind int;
  #L471ac4.  if v2 == 0 then goto L471ad0;
  #L471ac8.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L471ace.  return v0;
  #L471ad0.  v2:= 0I;
  #L471ad2.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableScalarXMap$ScalarDisposable;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L471b6c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L471b72.  v0:= temp;
  #L471b74.  if v0 != 0 then goto L471bb4;
  #L471b78.  v0:= 0I;
  #L471b7a.  v1:= 2I;
  #L471b7c.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L471b82.  v0:= temp;
  #L471b84.  if v0 == 0 then goto L471bb4;
  #L471b88.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` @kind object;
  #L471b8c.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.b` @type ^`java.lang.Object` @kind object;
  #L471b90.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L471b96.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L471b9c.  v0:= temp;
  #L471b9e.  if v0 != v1 then goto L471bb4;
  #L471ba2.  v0:= 3I;
  #L471ba4.  call `lazySet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L471baa.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableScalarXMap$ScalarDisposable.a` @type ^`io.reactivex.Observer` @kind object;
  #L471bae.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L471bb4.  return @kind void;
}
