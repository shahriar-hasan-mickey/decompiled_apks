record `io.reactivex.internal.operators.observable.ObservableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount` `io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableRefCount$a` `io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount` v2 @kind object, `io.reactivex.internal.operators.observable.ObservableRefCount$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/operators/observable/ObservableRefCount;Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46f2b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L46f2ba.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46f2be.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` := v2 @kind object;
  #L46f2c2.  v0.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` := v3 @kind object;
  #L46f2c6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46f2d8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f2dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46f2e2.  v0:= 0I;
  #L46f2e4.  v1:= 1I;
  #L46f2e6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46f2ec.  v0:= temp;
  #L46f2ee.  if v0 == 0 then goto L46f300;
  #L46f2f2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L46f2f6.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f2fa.  call `d`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.d:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f300.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f294.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f298.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L46f29e.  v0:= temp;
  #L46f2a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46f314.  v0:= 0I;
  #L46f316.  v1:= 1I;
  #L46f318.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46f31e.  v0:= temp;
  #L46f320.  if v0 == 0 then goto L46f33c;
  #L46f324.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L46f328.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f32c.  call `g`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.g:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f332.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f336.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46f33c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46f350.  v0:= 0I;
  #L46f352.  v1:= 1I;
  #L46f354.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L46f35a.  v0:= temp;
  #L46f35c.  if v0 == 0 then goto L46f37a;
  #L46f360.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.b` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount` @kind object;
  #L46f364.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableRefCount$a` @kind object;
  #L46f368.  call `g`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.g:(Lio/reactivex/internal/operators/observable/ObservableRefCount$a;)V` @kind virtual;
  #L46f36e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f372.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46f378.  goto L46f380;
  #L46f37a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46f380.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f394.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f398.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46f39e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRefCount$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f3b0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46f3b4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46f3ba.  v0:= temp;
  #L46f3bc.  if v0 == 0 then goto L46f3ce;
  #L46f3c0.  v1.`io.reactivex.internal.operators.observable.ObservableRefCount$b.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L46f3c4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableRefCount$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f3c8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46f3ce.  return @kind void;
}
