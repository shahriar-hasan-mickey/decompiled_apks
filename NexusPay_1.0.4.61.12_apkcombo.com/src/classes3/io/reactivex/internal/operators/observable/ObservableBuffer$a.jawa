record `io.reactivex.internal.operators.observable.ObservableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L460cc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L460cca.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L460cce.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @type ^`int` := v2;
  #L460cd2.  v0.`io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L460cd6.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L460c2c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L460c30.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L460c36.  v0:= temp @kind object;
  #L460c38.  v1:= "Empty buffer supplied" @kind object;
  #L460c3c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L460c42.  v0:= temp @kind object;
  #L460c44.  v0:= (`java.util.Collection`) v0 @kind object;
  #L460c48.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L460c4c.  v0:= 1I;
  #L460c4e.  return v0;
  #L460c50.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L460c52.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L460c58.  v1:= 0I;
  #L460c5a.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L460c5e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L460c62.  if v1 != 0 then goto L460c72;
  #L460c66.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460c6a.  call `error`(v0, v1) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L460c70.  goto L460c82;
  #L460c72.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L460c78.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460c7c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L460c82.  v0:= 0I;
  #L460c84.  return v0;
  catch `java.lang.Throwable` @[L460c2c..L460c48] goto L460c50;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460ce8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L460cec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L460cf2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460ca4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L460ca8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L460cae.  v0:= temp;
  #L460cb0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460d04.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L460d08.  if v0 == 0 then goto L460d32;
  #L460d0c.  v1:= 0I;
  #L460d0e.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v1 @kind object;
  #L460d12.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L460d18.  v1:= temp;
  #L460d1a.  if v1 != 0 then goto L460d28;
  #L460d1e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460d22.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L460d28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460d2c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L460d32.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460d44.  v0:= 0I;
  #L460d46.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L460d4a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460d4e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L460d54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460d68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L460d6c.  if v0 == 0 then goto L460da0;
  #L460d70.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L460d76.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int`;
  #L460d7a.  v3:= v3 + 1;
  #L460d7e.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int` := v3;
  #L460d82.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.b` @type ^`int`;
  #L460d86.  if v3 < v1 then goto L460da0;
  #L460d8a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460d8e.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L460d94.  v3:= 0I;
  #L460d96.  v2.`io.reactivex.internal.operators.observable.ObservableBuffer$a.e` @type ^`int` := v3;
  #L460d9a.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.a:()Z` @kind virtual;
  #L460da0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBuffer$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBuffer$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L460db4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L460db8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L460dbe.  v0:= temp;
  #L460dc0.  if v0 == 0 then goto L460dd2;
  #L460dc4.  v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L460dc8.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBuffer$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L460dcc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L460dd2.  return @kind void;
}
