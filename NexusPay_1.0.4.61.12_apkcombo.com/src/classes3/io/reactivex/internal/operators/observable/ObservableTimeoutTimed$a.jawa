record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.concurrent.atomic.AtomicReference` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicReference;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4759e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4759ea.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4759ee.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4759f2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475a04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L475a08.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L475a0e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475a20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L475a24.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L475a2a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475a3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L475a40.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L475a46.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475a58.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475a5c.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475a62.  return @kind void;
}
