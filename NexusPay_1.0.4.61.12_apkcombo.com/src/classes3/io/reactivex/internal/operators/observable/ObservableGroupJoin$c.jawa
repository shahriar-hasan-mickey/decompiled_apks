record `io.reactivex.internal.operators.observable.ObservableGroupJoin$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` `io.reactivex.internal.operators.observable.ObservableGroupJoin$c.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46abd4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46abda.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$b` := v1 @kind object;
  #L46abde.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.b` @type ^`boolean` := v2 @kind boolean;
  #L46abe2.  v0.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int` := v3;
  #L46abe6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L46abf8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46abfe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46abac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46abb2.  v0:= temp @kind object;
  #L46abb4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46abb8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46abbe.  v0:= temp;
  #L46abc0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46ac10.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind object;
  #L46ac14.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L46ac18.  call `d`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @kind interface;
  #L46ac1e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ac30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind object;
  #L46ac34.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;.c:(Ljava/lang/Throwable;)V` @kind interface;
  #L46ac3a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ac4c.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46ac52.  v2:= temp;
  #L46ac54.  if v2 == 0 then goto L46ac66;
  #L46ac58.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.a` @type ^`io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind object;
  #L46ac5c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.b` @type ^`boolean` @kind boolean;
  #L46ac60.  call `d`(v2, v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @kind interface;
  #L46ac66.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L46ac78.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46ac7e.  return @kind void;
}
