record `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @AccessFlag FINAL;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L469e70.  v0:= new `java.lang.Object`;
  #L469e74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L469e7a.  `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` := v0 @kind object;
  #L469e7e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L469e90.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L469e96.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L469e9a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L469ea0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L469ea4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L469ea8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L469eac.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L469eb0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int` := v5;
  #L469eb4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` := v6 @kind boolean;
  #L469eb8.  v2:= new `java.util.concurrent.ConcurrentHashMap`;
  #L469ebc.  call `<init>`(v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L469ec2.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` := v2 @kind object;
  #L469ec6.  v2:= 1I;
  #L469ec8.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L469ece.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469ee0.  if v2 == 0 then goto L469ee6;
  #L469ee4.  goto L469eea;
  #L469ee6.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L469eea.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L469eee.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L469ef4.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L469efa.  v2:= temp;
  #L469efc.  if v2 != 0 then goto L469f0a;
  #L469f00.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L469f04.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L469f0a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L469f1c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L469f20.  v1:= 0I;
  #L469f22.  v2:= 1I;
  #L469f24.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L469f2a.  v0:= temp;
  #L469f2c.  if v0 == 0 then goto L469f46;
  #L469f30.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L469f36.  v0:= temp;
  #L469f38.  if v0 != 0 then goto L469f46;
  #L469f3c.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L469f40.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L469f46.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L469e50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L469e54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L469e5a.  v0:= temp;
  #L469e5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L469f58.  v0:= new `java.util.ArrayList`;
  #L469f5c.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L469f60.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L469f66.  v1:= temp @kind object;
  #L469f68.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L469f6e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L469f72.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L469f78.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L469f7e.  v0:= temp @kind object;
  #L469f80.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L469f86.  v1:= temp;
  #L469f88.  if v1 == 0 then goto L469fa0;
  #L469f8c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L469f92.  v1:= temp @kind object;
  #L469f94.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L469f98.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onComplete:()V` @kind virtual;
  #L469f9e.  goto L469f80;
  #L469fa0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L469fa4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L469faa.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L469fbc.  v0:= new `java.util.ArrayList`;
  #L469fc0.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L469fc4.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L469fca.  v1:= temp @kind object;
  #L469fcc.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L469fd2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L469fd6.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L469fdc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L469fe2.  v0:= temp @kind object;
  #L469fe4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L469fea.  v1:= temp;
  #L469fec.  if v1 == 0 then goto L46a004;
  #L469ff0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L469ff6.  v1:= temp @kind object;
  #L469ff8.  v1:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v1 @kind object;
  #L469ffc.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46a002.  goto L469fe4;
  #L46a004.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L46a008.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46a00e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46a020.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L46a024.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a02a.  v0:= temp @kind object;
  #L46a02c.  if v0 == 0 then goto L46a034;
  #L46a030.  v1:= v0 @kind object;
  #L46a032.  goto L46a038;
  #L46a034.  v1:= `@@io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.i` @type ^`java.lang.Object` @kind object;
  #L46a038.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L46a03c.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a042.  v2:= temp @kind object;
  #L46a044.  v2:= (`io.reactivex.internal.operators.observable.ObservableGroupBy$a`) v2 @kind object;
  #L46a048.  if v2 != 0 then goto L46a088;
  #L46a04c.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L46a050.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L46a056.  v2:= temp;
  #L46a058.  if v2 == 0 then goto L46a05e;
  #L46a05c.  return @kind void;
  #L46a05e.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.d` @type ^`int`;
  #L46a062.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.e` @type ^`boolean` @kind boolean;
  #L46a066.  call temp:= `d`(v0, v2, v4, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.d:(Ljava/lang/Object;ILio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;Z)Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;` @kind static;
  #L46a06c.  v2:= temp @kind object;
  #L46a06e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.f` @type ^`java.util.Map` @kind object;
  #L46a072.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a078.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46a07e.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L46a082.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46a088.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L46a08c.  call temp:= `apply`(v0, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a092.  v5:= temp @kind object;
  #L46a094.  v0:= "The value supplied is null" @kind object;
  #L46a098.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46a09e.  v5:= temp @kind object;
  #L46a0a0.  call `onNext`(v2, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$a;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L46a0a6.  return @kind void;
  #L46a0a8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a0aa.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46a0b0.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46a0b4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46a0ba.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46a0c0.  return @kind void;
  #L46a0c2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a0c4.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46a0ca.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46a0ce.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46a0d4.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46a0da.  return @kind void;
  catch `java.lang.Throwable` @[L46a020..L46a02c] goto L46a0c2;
  catch `java.lang.Throwable` @[L46a088..L46a0a0] goto L46a0a8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupBy$GroupByObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a104.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46a108.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46a10e.  v0:= temp;
  #L46a110.  if v0 == 0 then goto L46a122;
  #L46a114.  v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L46a118.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupBy$GroupByObserver.a` @type ^`io.reactivex.Observer` @kind object;
  #L46a11c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46a122.  return @kind void;
}
