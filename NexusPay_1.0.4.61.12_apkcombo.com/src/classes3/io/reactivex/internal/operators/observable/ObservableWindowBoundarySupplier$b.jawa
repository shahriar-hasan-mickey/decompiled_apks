record `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @AccessFlag VOLATILE;
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @AccessFlag ;
}
global `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.l` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.m` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L477a04.  v0:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L477a08.  v1:= 0I;
  #L477a0a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @kind direct;
  #L477a10.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.l` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` := v0 @kind object;
  #L477a14.  v0:= new `java.lang.Object`;
  #L477a18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L477a1e.  `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.m` @type ^`java.lang.Object` := v0 @kind object;
  #L477a22.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.<init>:(Lio/reactivex/Observer;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L477a34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L477a3a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L477a3e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @type ^`int` := v2;
  #L477a42.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L477a46.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L477a4c.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L477a50.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L477a54.  v2:= 1I;
  #L477a56.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L477a5c.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L477a60.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L477a64.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L477a6a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L477a6e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L477a72.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L477a78.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L477a7c.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L477a80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L477a86.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L477a8a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L477a8e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L477ae8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L477aec.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.l` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind object;
  #L477af0.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L477af6.  v0:= temp @kind object;
  #L477af8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L477afc.  if v0 == 0 then goto L477b0e;
  #L477b00.  v1:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.l` @type ^`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` @kind object;
  #L477b04.  if v0 == v1 then goto L477b0e;
  #L477b08.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477b0e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L477b20.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L477b26.  v0:= temp;
  #L477b28.  if v0 == 0 then goto L477b2e;
  #L477b2c.  return @kind void;
  #L477b2e.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L477b32.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L477b36.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L477b3a.  v3:= 1I;
  #L477b3c.  v4:= 1I;
  #L477b3e.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L477b42.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L477b48.  v5:= temp;
  #L477b4a.  v6:= 0I;
  #L477b4c.  if v5 != 0 then goto L477b5c;
  #L477b50.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L477b56.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477b5a.  return @kind void;
  #L477b5c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L477b60.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` @kind boolean;
  #L477b64.  if v7 == 0 then goto L477b98;
  #L477b68.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L477b6e.  v8:= temp @kind object;
  #L477b70.  if v8 == 0 then goto L477b98;
  #L477b74.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L477b7a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L477b80.  v1:= temp @kind object;
  #L477b82.  if v5 == 0 then goto L477b90;
  #L477b86.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477b8a.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L477b90.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L477b96.  return @kind void;
  #L477b98.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L477b9e.  v8:= temp @kind object;
  #L477ba0.  if v8 != 0 then goto L477ba8;
  #L477ba4.  v9:= 1I;
  #L477ba6.  goto L477baa;
  #L477ba8.  v9:= 0I;
  #L477baa.  if v7 == 0 then goto L477bea;
  #L477bae.  if v9 == 0 then goto L477bea;
  #L477bb2.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L477bb8.  v1:= temp @kind object;
  #L477bba.  if v1 != 0 then goto L477bd4;
  #L477bbe.  if v5 == 0 then goto L477bcc;
  #L477bc2.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477bc6.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L477bcc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L477bd2.  goto L477be8;
  #L477bd4.  if v5 == 0 then goto L477be2;
  #L477bd8.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477bdc.  call `onError`(v5, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L477be2.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L477be8.  return @kind void;
  #L477bea.  if v9 == 0 then goto L477bfe;
  #L477bee.  v4:= -v4 @kind int;
  #L477bf0.  call temp:= `addAndGet`(v10, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L477bf6.  v4:= temp;
  #L477bf8.  if v4 != 0 then goto L477b3e;
  #L477bfc.  return @kind void;
  #L477bfe.  v7:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.m` @type ^`java.lang.Object` @kind object;
  #L477c02.  if v8 == v7 then goto L477c0e;
  #L477c06.  call `onNext`(v5, v8) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L477c0c.  goto L477b3e;
  #L477c0e.  if v5 == 0 then goto L477c1c;
  #L477c12.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v6 @kind object;
  #L477c16.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L477c1c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477c20.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L477c26.  v5:= temp;
  #L477c28.  if v5 != 0 then goto L477b3e;
  #L477c2c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.b` @type ^`int`;
  #L477c30.  call temp:= `create`(v5, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L477c36.  v5:= temp @kind object;
  #L477c38.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.k` @type ^`io.reactivex.subjects.UnicastSubject` := v5 @kind object;
  #L477c3c.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L477c40.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L477c46.  v7:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.Callable` @kind object;
  #L477c4a.  call temp:= `call`(v7) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L477c50.  v7:= temp @kind object;
  #L477c52.  v8:= "The other Callable returned a null ObservableSource" @kind object;
  #L477c56.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L477c5c.  v7:= temp @kind object;
  #L477c5e.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L477c62.  v8:= new `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a`;
  #L477c66.  call `<init>`(v8, v10) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;)V` @kind direct;
  #L477c6c.  v9:= v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L477c70.  call temp:= `compareAndSet`(v9, v6, v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L477c76.  v6:= temp;
  #L477c78.  if v6 == 0 then goto L477b3e;
  #L477c7c.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L477c82.  call `onNext`(v0, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L477c88.  goto L477b3e;
  #L477c8c.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L477c8e.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L477c94.  call temp:= `addThrowable`(v2, v5) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L477c9a.  v10.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` := v3 @kind boolean;
  #L477c9e.  goto L477b3e;
  catch `java.lang.Throwable` @[L477c46..L477c62] goto L477c8c;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L477cc0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477cc4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477cca.  v0:= 1I;
  #L477ccc.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` := v0 @kind boolean;
  #L477cd0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477cd6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L477ce8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477cec.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477cf2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L477cf6.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L477cfc.  v0:= temp;
  #L477cfe.  if v0 == 0 then goto L477d10;
  #L477d02.  v2:= 1I;
  #L477d04.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` := v2 @kind boolean;
  #L477d08.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477d0e.  goto L477d16;
  #L477d10.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L477d16.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L477aa0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L477aa4.  v1:= 0I;
  #L477aa6.  v2:= 1I;
  #L477aa8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L477aae.  v0:= temp;
  #L477ab0.  if v0 == 0 then goto L477ad4;
  #L477ab4.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L477aba.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L477abe.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L477ac4.  v0:= temp;
  #L477ac6.  if v0 != 0 then goto L477ad4;
  #L477aca.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477ace.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477ad4.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.e:(Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L477d28.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L477d2c.  v1:= 0I;
  #L477d2e.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L477d34.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L477d38.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.m` @type ^`java.lang.Object` @kind object;
  #L477d3c.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L477d42.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477d48.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4779e4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4779e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4779ee.  v0:= temp;
  #L4779f0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477d5c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L477d62.  v0:= 1I;
  #L477d64.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` := v0 @kind boolean;
  #L477d68.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477d6e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477d80.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L477d86.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L477d8a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L477d90.  v0:= temp;
  #L477d92.  if v0 == 0 then goto L477da4;
  #L477d96.  v2:= 1I;
  #L477d98.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.j` @type ^`boolean` := v2 @kind boolean;
  #L477d9c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477da2.  goto L477daa;
  #L477da4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L477daa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477dbc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L477dc0.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L477dc6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477dcc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477de0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477de4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L477dea.  v0:= temp;
  #L477dec.  if v0 == 0 then goto L477e12;
  #L477df0.  v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L477df4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L477df8.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L477dfe.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L477e02.  v0:= `@@io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.m` @type ^`java.lang.Object` @kind object;
  #L477e06.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L477e0c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L477e12.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowBoundarySupplier$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L477e24.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L477e28.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L477e2e.  v0:= temp;
  #L477e30.  if v0 != 0 then goto L477e3e;
  #L477e34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableWindowBoundarySupplier$b.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L477e38.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L477e3e.  return @kind void;
}
