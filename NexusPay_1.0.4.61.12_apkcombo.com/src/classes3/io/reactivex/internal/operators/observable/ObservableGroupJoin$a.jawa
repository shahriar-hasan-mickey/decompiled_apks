record `io.reactivex.internal.operators.observable.ObservableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableGroupJoin$b` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L46a550.  v0:= 1I;
  #L46a552.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a558.  v0:= temp @kind object;
  #L46a55a.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` := v0 @kind object;
  #L46a55e.  v0:= 2I;
  #L46a560.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a566.  v0:= temp @kind object;
  #L46a568.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L46a56c.  v0:= 3I;
  #L46a56e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a574.  v0:= temp @kind object;
  #L46a576.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L46a57a.  v0:= 4I;
  #L46a57c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a582.  v0:= temp @kind object;
  #L46a584.  `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L46a588.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L46a59c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46a5a2.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L46a5a6.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L46a5aa.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L46a5b0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L46a5b4.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46a5b8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L46a5be.  v0:= temp;
  #L46a5c0.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46a5c6.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L46a5ca.  v2:= new `java.util.LinkedHashMap`;
  #L46a5ce.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L46a5d4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` := v2 @kind object;
  #L46a5d8.  v2:= new `java.util.LinkedHashMap`;
  #L46a5dc.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L46a5e2.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L46a5e6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46a5ea.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46a5f0.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L46a5f4.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L46a5f8.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L46a5fc.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L46a600.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L46a604.  v3:= 2I;
  #L46a606.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L46a60c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L46a610.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ab20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46ab24.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46ab2a.  v0:= temp;
  #L46ab2c.  if v0 == 0 then goto L46ab42;
  #L46ab30.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46ab34.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46ab3a.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L46ab40.  goto L46ab48;
  #L46ab42.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46ab48.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ab5c.  @monitorenter v1
  #L46ab5e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46ab62.  if v2 == 0 then goto L46ab6c;
  #L46ab66.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L46ab6a.  goto L46ab70;
  #L46ab6c.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L46ab70.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46ab76.  @monitorexit v1
  #L46ab78.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L46ab7e.  return @kind void;
  #L46ab80.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46ab82.  @monitorexit v1
  #L46ab84.  throw v2;
  catch `java.lang.Throwable` @[L46ab5e..L46ab78] goto L46ab80;
  catch `java.lang.Throwable` @[L46ab82..L46ab84] goto L46ab80;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46aac4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46aac8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46aace.  v0:= temp;
  #L46aad0.  if v0 == 0 then goto L46aadc;
  #L46aad4.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L46aada.  goto L46aae2;
  #L46aadc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46aae2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.observable.ObservableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.d:(ZLio/reactivex/internal/operators/observable/ObservableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46aa74.  @monitorenter v1
  #L46aa76.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46aa7a.  if v2 == 0 then goto L46aa84;
  #L46aa7e.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L46aa82.  goto L46aa88;
  #L46aa84.  v2:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L46aa88.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L46aa8e.  @monitorexit v1
  #L46aa90.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L46aa96.  return @kind void;
  #L46aa98.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46aa9a.  @monitorexit v1
  #L46aa9c.  throw v2;
  catch `java.lang.Throwable` @[L46aa76..L46aa90] goto L46aa98;
  catch `java.lang.Throwable` @[L46aa9a..L46aa9c] goto L46aa98;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a640.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L46a644.  if v0 == 0 then goto L46a64a;
  #L46a648.  return @kind void;
  #L46a64a.  v0:= 1I;
  #L46a64c.  v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` := v0 @kind boolean;
  #L46a650.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L46a656.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46a65c.  v0:= temp;
  #L46a65e.  if v0 != 0 then goto L46a66c;
  #L46a662.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a666.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a66c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.e:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46aaf4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46aaf8.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46aafe.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46ab02.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46ab08.  call `g`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @kind virtual;
  #L46ab0e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L46a624.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a628.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46a62e.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L46a680.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46a686.  v0:= temp;
  #L46a688.  if v0 == 0 then goto L46a68e;
  #L46a68c.  return @kind void;
  #L46a68e.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46a692.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46a696.  v2:= 1I;
  #L46a698.  v3:= 1I;
  #L46a69a.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L46a69e.  if v4 == 0 then goto L46a6aa;
  #L46a6a2.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a6a8.  return @kind void;
  #L46a6aa.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a6ae.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46a6b4.  v4:= temp @kind object;
  #L46a6b6.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L46a6ba.  if v4 == 0 then goto L46a6d2;
  #L46a6be.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a6c4.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L46a6ca.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46a6d0.  return @kind void;
  #L46a6d2.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.j` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L46a6d6.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L46a6dc.  v4:= temp;
  #L46a6de.  v5:= 0I;
  #L46a6e0.  if v4 != 0 then goto L46a6e8;
  #L46a6e4.  v4:= 1I;
  #L46a6e6.  goto L46a6ea;
  #L46a6e8.  v4:= 0I;
  #L46a6ea.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46a6f0.  v6:= temp @kind object;
  #L46a6f2.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L46a6f6.  if v6 != 0 then goto L46a6fe;
  #L46a6fa.  v7:= 1I;
  #L46a6fc.  goto L46a700;
  #L46a6fe.  v7:= 0I;
  #L46a700.  if v4 == 0 then goto L46a762;
  #L46a704.  if v7 == 0 then goto L46a762;
  #L46a708.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a70c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46a712.  v0:= temp @kind object;
  #L46a714.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46a71a.  v0:= temp @kind object;
  #L46a71c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46a722.  v2:= temp;
  #L46a724.  if v2 == 0 then goto L46a73c;
  #L46a728.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46a72e.  v2:= temp @kind object;
  #L46a730.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L46a734.  call `onComplete`(v2) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L46a73a.  goto L46a71c;
  #L46a73c.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a740.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46a746.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46a74a.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46a750.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a754.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L46a75a.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46a760.  return @kind void;
  #L46a762.  if v7 == 0 then goto L46a776;
  #L46a766.  v3:= -v3 @kind int;
  #L46a768.  call temp:= `addAndGet`(v9, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46a76e.  v3:= temp;
  #L46a770.  if v3 != 0 then goto L46a69a;
  #L46a774.  return @kind void;
  #L46a776.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46a77c.  v4:= temp @kind object;
  #L46a77e.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.n` @type ^`java.lang.Integer` @kind object;
  #L46a782.  if v6 != v7 then goto L46a86c;
  #L46a786.  call temp:= `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L46a78c.  v5:= temp @kind object;
  #L46a78e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int`;
  #L46a792.  v7:= v6 + 1;
  #L46a796.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.k` @type ^`int` := v7;
  #L46a79a.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a79e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a7a4.  v8:= temp @kind object;
  #L46a7a6.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a7ac.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.g` @type ^`io.reactivex.functions.Function` @kind object;
  #L46a7b0.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a7b6.  v7:= temp @kind object;
  #L46a7b8.  v8:= "The leftEnd returned a null ObservableSource" @kind object;
  #L46a7bc.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46a7c2.  v7:= temp @kind object;
  #L46a7c4.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L46a7c8.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L46a7cc.  call `<init>`(v8, v9, v2, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L46a7d2.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a7d6.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46a7dc.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46a7e2.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a7e6.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46a7ec.  v6:= temp @kind object;
  #L46a7ee.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L46a7f2.  if v6 == 0 then goto L46a80a;
  #L46a7f6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a7fc.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L46a802.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46a808.  return @kind void;
  #L46a80a.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.i` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L46a80e.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a814.  v4:= temp @kind object;
  #L46a816.  v6:= "The resultSelector returned a null value" @kind object;
  #L46a81a.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46a820.  v4:= temp @kind object;
  #L46a822.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46a828.  v4:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46a82c.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46a832.  v4:= temp @kind object;
  #L46a834.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46a83a.  v4:= temp @kind object;
  #L46a83c.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46a842.  v6:= temp;
  #L46a844.  if v6 == 0 then goto L46a69a;
  #L46a848.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46a84e.  v6:= temp @kind object;
  #L46a850.  call `onNext`(v5, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L46a856.  goto L46a83c;
  #L46a858.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a85a.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46a860.  return @kind void;
  #L46a862.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a864.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46a86a.  return @kind void;
  #L46a86c.  v7:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L46a870.  if v6 != v7 then goto L46a92e;
  #L46a874.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int`;
  #L46a878.  v7:= v6 + 1;
  #L46a87c.  v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.l` @type ^`int` := v7;
  #L46a880.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46a884.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a88a.  v8:= temp @kind object;
  #L46a88c.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a892.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L46a896.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a89c.  v7:= temp @kind object;
  #L46a89e.  v8:= "The rightEnd returned a null ObservableSource" @kind object;
  #L46a8a2.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46a8a8.  v7:= temp @kind object;
  #L46a8aa.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L46a8ae.  v8:= new `io.reactivex.internal.operators.observable.ObservableGroupJoin$c`;
  #L46a8b2.  call `<init>`(v8, v9, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/observable/ObservableGroupJoin$b;ZI)V` @kind direct;
  #L46a8b8.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a8bc.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46a8c2.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46a8c8.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a8cc.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46a8d2.  v5:= temp @kind object;
  #L46a8d4.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L46a8d8.  if v5 == 0 then goto L46a8f0;
  #L46a8dc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46a8e2.  call `f`(v9) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L46a8e8.  call `h`(v9, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46a8ee.  return @kind void;
  #L46a8f0.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a8f4.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46a8fa.  v5:= temp @kind object;
  #L46a8fc.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46a902.  v5:= temp @kind object;
  #L46a904.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46a90a.  v6:= temp;
  #L46a90c.  if v6 == 0 then goto L46a69a;
  #L46a910.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46a916.  v6:= temp @kind object;
  #L46a918.  v6:= (`io.reactivex.subjects.UnicastSubject`) v6 @kind object;
  #L46a91c.  call `onNext`(v6, v4) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L46a922.  goto L46a904;
  #L46a924.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46a926.  call `i`(v9, v2, v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46a92c.  return @kind void;
  #L46a92e.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L46a932.  if v6 != v5 then goto L46a96e;
  #L46a936.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L46a93a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a93e.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L46a942.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a948.  v6:= temp @kind object;
  #L46a94a.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a950.  v5:= temp @kind object;
  #L46a952.  v5:= (`io.reactivex.subjects.UnicastSubject`) v5 @kind object;
  #L46a956.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a95a.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46a960.  if v5 == 0 then goto L46a69a;
  #L46a964.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L46a96a.  goto L46a69a;
  #L46a96e.  v5:= `@@io.reactivex.internal.operators.observable.ObservableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L46a972.  if v6 != v5 then goto L46a69a;
  #L46a976.  v4:= (`io.reactivex.internal.operators.observable.ObservableGroupJoin$c`) v4 @kind object;
  #L46a97a.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46a97e.  v6:= v4.`io.reactivex.internal.operators.observable.ObservableGroupJoin$c.c` @type ^`int`;
  #L46a982.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L46a988.  v6:= temp @kind object;
  #L46a98a.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46a990.  v5:= v9.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L46a994.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46a99a.  goto L46a69a;
  catch `java.lang.Throwable` @[L46a7ac..L46a7c8] goto L46a862;
  catch `java.lang.Throwable` @[L46a80a..L46a822] goto L46a858;
  catch `java.lang.Throwable` @[L46a892..L46a8ae] goto L46a924;
}
procedure `void` `h`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L46a9d4.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46a9d8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L46a9de.  v0:= temp @kind object;
  #L46a9e0.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46a9e4.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L46a9ea.  v1:= temp @kind object;
  #L46a9ec.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L46a9f2.  v1:= temp @kind object;
  #L46a9f4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L46a9fa.  v2:= temp;
  #L46a9fc.  if v2 == 0 then goto L46aa14;
  #L46aa00.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46aa06.  v2:= temp @kind object;
  #L46aa08.  v2:= (`io.reactivex.subjects.UnicastSubject`) v2 @kind object;
  #L46aa0c.  call `onError`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46aa12.  goto L46a9f4;
  #L46aa14.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.d` @type ^`java.util.Map` @kind object;
  #L46aa18.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46aa1e.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L46aa22.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L46aa28.  call `onError`(v4, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46aa2e.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `io.reactivex.Observer` v3 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.i:(Ljava/lang/Throwable;Lio/reactivex/Observer;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L46aa40.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46aa46.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46aa4a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L46aa50.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46aa56.  call `f`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.f:()V` @kind virtual;
  #L46aa5c.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L46aa62.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableGroupJoin$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46a538.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableGroupJoin$a.m` @type ^`boolean` @kind boolean;
  #L46a53c.  return v0;
}
