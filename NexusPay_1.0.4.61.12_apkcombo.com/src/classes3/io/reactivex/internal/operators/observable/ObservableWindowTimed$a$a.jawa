record `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a` @kind class @AccessFlag FINAL extends `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableWindowTimed$a` `io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.observable.ObservableWindowTimed$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L477f00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L477f06.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.a` @type ^`long` := v1 @kind wide;
  #L477f0a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` := v3 @kind object;
  #L477f0e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L477f20.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a$a.b` @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$a` @kind object;
  #L477f24.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.a:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Z` @kind static;
  #L477f2a.  v1:= temp;
  #L477f2c.  if v1 != 0 then goto L477f40;
  #L477f30.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.b:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind static;
  #L477f36.  v1:= temp @kind object;
  #L477f38.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L477f3e.  goto L477f46;
  #L477f40.  v1:= 1I;
  #L477f42.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed$a.m` @type ^`boolean` := v1 @kind boolean;
  #L477f46.  call temp:= `enter`(v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L477f4c.  v1:= temp;
  #L477f4e.  if v1 == 0 then goto L477f58;
  #L477f52.  call `d`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.d:()V` @kind virtual;
  #L477f58.  return @kind void;
}
