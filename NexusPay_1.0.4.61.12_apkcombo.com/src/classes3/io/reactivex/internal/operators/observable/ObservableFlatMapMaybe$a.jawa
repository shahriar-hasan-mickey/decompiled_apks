record `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46873c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L468742.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L468746.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L46874a.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L46874e.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L468752.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L468758.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L46875c.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L468760.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L468766.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46876a.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L46876e.  v2:= 1I;
  #L468770.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L468776.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L46877a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46877e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L468784.  v0.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L468788.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L46879c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4687a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4687a6.  v0:= temp @kind object;
  #L4687a8.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L4687ac.  if v0 == 0 then goto L4687b6;
  #L4687b0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4687b6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4687f4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4687fa.  v0:= temp;
  #L4687fc.  if v0 != 0 then goto L468806;
  #L468800.  call `c`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L468806.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L468818.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46881c.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468820.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468824.  v3:= 1I;
  #L468826.  v4:= 1I;
  #L468828.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L46882c.  if v5 == 0 then goto L468838;
  #L468830.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L468836.  return @kind void;
  #L468838.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L46883c.  if v5 != 0 then goto L46886e;
  #L468840.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468844.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46884a.  v5:= temp @kind object;
  #L46884c.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L468850.  if v5 == 0 then goto L46886e;
  #L468854.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468858.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L46885e.  v1:= temp @kind object;
  #L468860.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L468866.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46886c.  return @kind void;
  #L46886e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L468874.  v5:= temp;
  #L468876.  v6:= 0I;
  #L468878.  if v5 != 0 then goto L468880;
  #L46887c.  v5:= 1I;
  #L46887e.  goto L468882;
  #L468880.  v5:= 0I;
  #L468882.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468888.  v7:= temp @kind object;
  #L46888a.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L46888e.  if v7 == 0 then goto L46889c;
  #L468892.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L468898.  v7:= temp @kind object;
  #L46889a.  goto L46889e;
  #L46889c.  v7:= 0I;
  #L46889e.  if v7 != 0 then goto L4688a4;
  #L4688a2.  v6:= 1I;
  #L4688a4.  if v5 == 0 then goto L4688cc;
  #L4688a8.  if v6 == 0 then goto L4688cc;
  #L4688ac.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4688b0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4688b6.  v1:= temp @kind object;
  #L4688b8.  if v1 == 0 then goto L4688c4;
  #L4688bc.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4688c2.  goto L4688ca;
  #L4688c4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4688ca.  return @kind void;
  #L4688cc.  if v6 == 0 then goto L4688e0;
  #L4688d0.  v4:= -v4 @kind int;
  #L4688d2.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4688d8.  v4:= temp;
  #L4688da.  if v4 != 0 then goto L468828;
  #L4688de.  return @kind void;
  #L4688e0.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4688e6.  goto L468828;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4686f0.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4686f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4686fa.  v0:= temp @kind object;
  #L4686fc.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L468700.  if v0 == 0 then goto L468706;
  #L468704.  return v0 @kind object;
  #L468706.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46870a.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L468710.  v1:= temp;
  #L468712.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L468718.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46871c.  v2:= 0I;
  #L46871e.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L468724.  v1:= temp;
  #L468726.  if v1 == 0 then goto L4686f0;
  #L46872a.  return v0 @kind object;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4687c8.  v0:= 1I;
  #L4687ca.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4687ce.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4687d2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4687d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4687dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4687e2.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.e:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4688f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4688fc.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468902.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L468908.  v3:= temp;
  #L46890a.  if v3 != 0 then goto L468992;
  #L46890e.  v3:= 0I;
  #L468910.  v0:= 1I;
  #L468912.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L468918.  v1:= temp;
  #L46891a.  if v1 == 0 then goto L468992;
  #L46891e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468922.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468928.  v1:= temp;
  #L46892a.  if v1 != 0 then goto L468930;
  #L46892e.  v3:= 1I;
  #L468930.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468934.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46893a.  v0:= temp @kind object;
  #L46893c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L468940.  if v3 == 0 then goto L46897c;
  #L468944.  if v0 == 0 then goto L468954;
  #L468948.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L46894e.  v3:= temp;
  #L468950.  if v3 == 0 then goto L46897c;
  #L468954.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468958.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L46895e.  v3:= temp @kind object;
  #L468960.  if v3 == 0 then goto L468970;
  #L468964.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468968.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46896e.  goto L46897a;
  #L468970.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468974.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46897a.  return @kind void;
  #L46897c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468982.  v3:= temp;
  #L468984.  if v3 != 0 then goto L46898a;
  #L468988.  return @kind void;
  #L46898a.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L468990.  goto L4689a2;
  #L468992.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468996.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46899c.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4689a2.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.f:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4689b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4689b8.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4689be.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4689c2.  call temp:= `addThrowable`(v2, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4689c8.  v2:= temp;
  #L4689ca.  if v2 == 0 then goto L4689fc;
  #L4689ce.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L4689d2.  if v2 != 0 then goto L4689ea;
  #L4689d6.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4689da.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4689e0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4689e4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4689ea.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4689ee.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4689f4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L4689fa.  goto L468a02;
  #L4689fc.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L468a02.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.g:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L468a14.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468a18.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468a1e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L468a24.  v3:= temp;
  #L468a26.  if v3 != 0 then goto L468ab0;
  #L468a2a.  v3:= 0I;
  #L468a2c.  v0:= 1I;
  #L468a2e.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L468a34.  v1:= temp;
  #L468a36.  if v1 == 0 then goto L468ab0;
  #L468a3a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468a3e.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L468a44.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468a48.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468a4e.  v4:= temp;
  #L468a50.  if v4 != 0 then goto L468a56;
  #L468a54.  v3:= 1I;
  #L468a56.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L468a5a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L468a60.  v4:= temp @kind object;
  #L468a62.  v4:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v4 @kind object;
  #L468a66.  if v3 == 0 then goto L468aa2;
  #L468a6a.  if v4 == 0 then goto L468a7a;
  #L468a6e.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L468a74.  v3:= temp;
  #L468a76.  if v3 == 0 then goto L468aa2;
  #L468a7a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468a7e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L468a84.  v3:= temp @kind object;
  #L468a86.  if v3 == 0 then goto L468a96;
  #L468a8a.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468a8e.  call `onError`(v4, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L468a94.  goto L468aa0;
  #L468a96.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468a9a.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L468aa0.  return @kind void;
  #L468aa2.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468aa8.  v3:= temp;
  #L468aaa.  if v3 != 0 then goto L468ada;
  #L468aae.  return @kind void;
  #L468ab0.  call temp:= `d`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L468ab6.  v3:= temp @kind object;
  #L468ab8.  @monitorenter v3
  #L468aba.  call temp:= `offer`(v3, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L468ac0.  @monitorexit v3
  #L468ac2.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468ac6.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468acc.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L468ad2.  v3:= temp;
  #L468ad4.  if v3 == 0 then goto L468ada;
  #L468ad8.  return @kind void;
  #L468ada.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L468ae0.  return @kind void;
  #L468ae2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L468ae4.  @monitorexit v3
  #L468ae6.  throw v4;
  catch `java.lang.Throwable` @[L468aba..L468ac2] goto L468ae2;
  catch `java.lang.Throwable` @[L468ae4..L468ae6] goto L468ae2;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4686d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L4686dc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468b0c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468b10.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468b16.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L468b1c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468b30.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468b34.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L468b3a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L468b3e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L468b44.  v0:= temp;
  #L468b46.  if v0 == 0 then goto L468b64;
  #L468b4a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L468b4e.  if v2 != 0 then goto L468b5c;
  #L468b52.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468b56.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L468b5c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L468b62.  goto L468b6a;
  #L468b64.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L468b6a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L468b7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L468b80.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L468b86.  v3:= temp @kind object;
  #L468b88.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L468b8c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L468b92.  v3:= temp @kind object;
  #L468b94.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L468b98.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L468b9c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L468ba2.  v0:= new `io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a$a`;
  #L468ba6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;)V` @kind direct;
  #L468bac.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.i` @type ^`boolean` @kind boolean;
  #L468bb0.  if v1 != 0 then goto L468bca;
  #L468bb4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L468bb8.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L468bbe.  v1:= temp;
  #L468bc0.  if v1 == 0 then goto L468bca;
  #L468bc4.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L468bca.  return @kind void;
  #L468bcc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L468bce.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L468bd4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468bd8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L468bde.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L468be4.  return @kind void;
  catch `java.lang.Throwable` @[L468b7c..L468b98] goto L468bcc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFlatMapMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L468c04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L468c08.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L468c0e.  v0:= temp;
  #L468c10.  if v0 == 0 then goto L468c22;
  #L468c14.  v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L468c18.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableFlatMapMaybe$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L468c1c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L468c22.  return @kind void;
}
