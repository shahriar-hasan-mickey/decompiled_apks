record `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.observers.InnerQueuedObserverSupport` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @AccessFlag VOLATILE;
  `io.reactivex.internal.observers.InnerQueuedObserver` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L464228.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46422e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L464232.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L464236.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int` := v3;
  #L46423a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int` := v4;
  #L46423e.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L464242.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L464246.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L46424c.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L464250.  v1:= new `java.util.ArrayDeque`;
  #L464254.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L46425a.  v0.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L46425e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4642a4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L4642a8.  if v0 == 0 then goto L4642b2;
  #L4642ac.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4642b2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4642b6.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4642bc.  v0:= temp @kind object;
  #L4642be.  v0:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v0 @kind object;
  #L4642c2.  if v0 != 0 then goto L4642c8;
  #L4642c6.  return @kind void;
  #L4642c8.  call `dispose`(v0) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.dispose:()V` @kind virtual;
  #L4642ce.  goto L4642b2;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4645e8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4645ee.  v0:= temp;
  #L4645f0.  if v0 != 0 then goto L464610;
  #L4645f4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4645f8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4645fe.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L464604.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46460a.  v0:= temp;
  #L46460c.  if v0 != 0 then goto L4645f4;
  #L464610.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464270.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L464274.  if v0 == 0 then goto L46427a;
  #L464278.  return @kind void;
  #L46427a.  v0:= 1I;
  #L46427c.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` := v0 @kind boolean;
  #L464280.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464284.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46428a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.b:()V` @kind virtual;
  #L464290.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4642e0.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4642e6.  v0:= temp;
  #L4642e8.  if v0 == 0 then goto L4642ee;
  #L4642ec.  return @kind void;
  #L4642ee.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4642f2.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.g` @type ^`java.util.ArrayDeque` @kind object;
  #L4642f6.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4642fa.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L4642fe.  v4:= 1I;
  #L464300.  v5:= 1I;
  #L464302.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L464306.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.c` @type ^`int`;
  #L46430a.  if v6 == v7 then goto L4643e6;
  #L46430e.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L464312.  if v7 == 0 then goto L464324;
  #L464316.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L46431c.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L464322.  return @kind void;
  #L464324.  v7:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464328.  if v3 != v7 then goto L464360;
  #L46432c.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464330.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464336.  v7:= temp @kind object;
  #L464338.  v7:= (`java.lang.Throwable`) v7 @kind object;
  #L46433c.  if v7 == 0 then goto L464360;
  #L464340.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464346.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L46434c.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464350.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L464356.  v0:= temp @kind object;
  #L464358.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46435e.  return @kind void;
  #L464360.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L464366.  v7:= temp @kind object;
  #L464368.  if v7 != 0 then goto L46436e;
  #L46436c.  goto L4643e6;
  #L46436e.  v8:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L464372.  call temp:= `apply`(v8, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L464378.  v7:= temp @kind object;
  #L46437a.  v8:= "The mapper returned a null ObservableSource" @kind object;
  #L46437e.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L464384.  v7:= temp @kind object;
  #L464386.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L46438a.  v8:= new `io.reactivex.internal.observers.InnerQueuedObserver`;
  #L46438e.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L464392.  call `<init>`(v8, v13, v9) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.<init>:(Lio/reactivex/internal/observers/InnerQueuedObserverSupport;I)V` @kind direct;
  #L464398.  call temp:= `offer`(v1, v8) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L46439e.  call `subscribe`(v7, v8) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4643a4.  v6:= v6 + 1;
  #L4643a8.  goto L464306;
  #L4643aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4643ac.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4643b2.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4643b6.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4643bc.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4643c2.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4643c8.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4643cc.  call temp:= `addThrowable`(v0, v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4643d2.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4643d6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4643dc.  v0:= temp @kind object;
  #L4643de.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4643e4.  return @kind void;
  #L4643e6.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4643ea.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4643ee.  if v6 == 0 then goto L464400;
  #L4643f2.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4643f8.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4643fe.  return @kind void;
  #L464400.  v6:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464404.  if v3 != v6 then goto L46443c;
  #L464408.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46440c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464412.  v6:= temp @kind object;
  #L464414.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L464418.  if v6 == 0 then goto L46443c;
  #L46441c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464422.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L464428.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46442c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L464432.  v0:= temp @kind object;
  #L464434.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46443a.  return @kind void;
  #L46443c.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` @kind object;
  #L464440.  v7:= 0I;
  #L464442.  if v6 != 0 then goto L4644ea;
  #L464446.  v6:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L46444a.  if v3 != v6 then goto L464482;
  #L46444e.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464452.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464458.  v6:= temp @kind object;
  #L46445a.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L46445e.  if v6 == 0 then goto L464482;
  #L464462.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464468.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L46446e.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464472.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L464478.  v0:= temp @kind object;
  #L46447a.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L464480.  return @kind void;
  #L464482.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L464486.  call temp:= `poll`(v1) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L46448c.  v8:= temp @kind object;
  #L46448e.  v8:= (`io.reactivex.internal.observers.InnerQueuedObserver`) v8 @kind object;
  #L464492.  if v8 != 0 then goto L46449a;
  #L464496.  v9:= 1I;
  #L464498.  goto L46449c;
  #L46449a.  v9:= 0I;
  #L46449c.  if v6 == 0 then goto L4644e0;
  #L4644a0.  if v9 == 0 then goto L4644e0;
  #L4644a4.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4644a8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4644ae.  v1:= temp @kind object;
  #L4644b0.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L4644b4.  if v1 == 0 then goto L4644d8;
  #L4644b8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4644be.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L4644c4.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4644c8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4644ce.  v0:= temp @kind object;
  #L4644d0.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4644d6.  goto L4644de;
  #L4644d8.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4644de.  return @kind void;
  #L4644e0.  if v9 != 0 then goto L4644e8;
  #L4644e4.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v8 @kind object;
  #L4644e8.  v6:= v8 @kind object;
  #L4644ea.  if v6 == 0 then goto L4645b0;
  #L4644ee.  call temp:= `queue`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L4644f4.  v8:= temp @kind object;
  #L4644f6.  v9:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L4644fa.  if v9 == 0 then goto L46450c;
  #L4644fe.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464504.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L46450a.  return @kind void;
  #L46450c.  call temp:= `isDone`(v6) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.isDone:()Z` @kind virtual;
  #L464512.  v9:= temp;
  #L464514.  v10:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464518.  if v3 != v10 then goto L464550;
  #L46451c.  v10:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464520.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L464526.  v10:= temp @kind object;
  #L464528.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L46452c.  if v10 == 0 then goto L464550;
  #L464530.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L464536.  call `a`(v13) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.a:()V` @kind virtual;
  #L46453c.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464540.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L464546.  v0:= temp @kind object;
  #L464548.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46454e.  return @kind void;
  #L464550.  v10:= 0I;
  #L464552.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L464558.  v11:= temp @kind object;
  #L46455a.  if v11 != 0 then goto L464562;
  #L46455e.  v12:= 1I;
  #L464560.  goto L464564;
  #L464562.  v12:= 0I;
  #L464564.  if v9 == 0 then goto L46457e;
  #L464568.  if v12 == 0 then goto L46457e;
  #L46456c.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L464570.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L464574.  v6:= v6 - v4 @kind int;
  #L464576.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L46457a.  goto L464302;
  #L46457e.  if v12 == 0 then goto L464584;
  #L464582.  goto L4645b0;
  #L464584.  call `onNext`(v2, v11) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46458a.  goto L4644f6;
  #L46458c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46458e.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L464594.  v7:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464598.  call temp:= `addThrowable`(v7, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46459e.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.m` @type ^`io.reactivex.internal.observers.InnerQueuedObserver` := v10 @kind object;
  #L4645a2.  v6:= v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int`;
  #L4645a6.  v6:= v6 - v4 @kind int;
  #L4645a8.  v13.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.n` @type ^`int` := v6;
  #L4645ac.  goto L464302;
  #L4645b0.  v5:= -v5 @kind int;
  #L4645b2.  call temp:= `addAndGet`(v13, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4645b8.  v5:= temp;
  #L4645ba.  if v5 != 0 then goto L464302;
  #L4645be.  return @kind void;
  catch `java.lang.Throwable` @[L464360..L46438a] goto L4643aa;
  catch `java.lang.Throwable` @[L464552..L46455a] goto L46458c;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerComplete:(Lio/reactivex/internal/observers/InnerQueuedObserver;)V` @AccessFlag PUBLIC {
    temp;

  #L464624.  call `setDone`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L46462a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L464630.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerError:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464644.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L464648.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46464e.  v0:= temp;
  #L464650.  if v0 == 0 then goto L464678;
  #L464654.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L464658.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L46465c.  if v3 != v0 then goto L46466a;
  #L464660.  v3:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464664.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46466a.  call `setDone`(v2) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.setDone:()V` @kind virtual;
  #L464670.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L464676.  goto L46467e;
  #L464678.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46467e.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.observers.InnerQueuedObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.innerNext:(Lio/reactivex/internal/observers/InnerQueuedObserver;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L464690.  call temp:= `queue`(v1) @signature `Lio/reactivex/internal/observers/InnerQueuedObserver;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L464696.  v1:= temp @kind object;
  #L464698.  call temp:= `offer`(v1, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46469e.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4646a4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464210.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.l` @type ^`boolean` @kind boolean;
  #L464214.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4646b8.  v0:= 1I;
  #L4646ba.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L4646be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4646c4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4646d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4646dc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4646e2.  v0:= temp;
  #L4646e4.  if v0 == 0 then goto L4646f6;
  #L4646e8.  v2:= 1I;
  #L4646ea.  v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4646ee.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L4646f4.  goto L4646fc;
  #L4646f6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4646fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L464710.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int`;
  #L464714.  if v0 != 0 then goto L464722;
  #L464718.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L46471c.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L464722.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L464728.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46473c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L464740.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L464746.  v0:= temp;
  #L464748.  if v0 == 0 then goto L4647c0;
  #L46474c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.i` @type ^`io.reactivex.disposables.Disposable` := v3 @kind object;
  #L464750.  v0:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind boolean;
  #L464754.  if v0 == 0 then goto L4647a4;
  #L464758.  v3:= (`io.reactivex.internal.fuseable.QueueDisposable`) v3 @kind object;
  #L46475c.  v0:= 3I;
  #L46475e.  call temp:= `requestFusion`(v3, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L464764.  v0:= temp;
  #L464766.  v1:= 1I;
  #L464768.  if v0 != v1 then goto L46478a;
  #L46476c.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L464770.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L464774.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.j` @type ^`boolean` := v1 @kind boolean;
  #L464778.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46477c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L464782.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableConcatMapEager$a;.drain:()V` @kind virtual;
  #L464788.  return @kind void;
  #L46478a.  v1:= 2I;
  #L46478c.  if v0 != v1 then goto L4647a4;
  #L464790.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.k` @type ^`int` := v0;
  #L464794.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L464798.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46479c.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4647a2.  return @kind void;
  #L4647a4.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4647a8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.d` @type ^`int`;
  #L4647ac.  call `<init>`(v3, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4647b2.  v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v3 @kind object;
  #L4647b6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableConcatMapEager$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4647ba.  call `onSubscribe`(v3, v2) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4647c0.  return @kind void;
}
