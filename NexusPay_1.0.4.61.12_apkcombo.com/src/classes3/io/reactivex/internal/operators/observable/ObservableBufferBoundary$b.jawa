record `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L461600.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L461606.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` := v1 @kind object;
  #L46160a.  v0.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` := v2 @kind wide;
  #L46160e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L461620.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L461626.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4615d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4615de.  v0:= temp @kind object;
  #L4615e0.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4615e4.  if v0 != v1 then goto L4615ec;
  #L4615e8.  v0:= 1I;
  #L4615ea.  goto L4615ee;
  #L4615ec.  v0:= 0I;
  #L4615ee.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L461638.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46163e.  v0:= temp @kind object;
  #L461640.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L461644.  if v0 == v1 then goto L46165c;
  #L461648.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L46164e.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L461652.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L461656.  call `b`(v0, v3, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;J)V` @kind virtual;
  #L46165c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L461670.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L461676.  v0:= temp @kind object;
  #L461678.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L46167c.  if v0 == v1 then goto L461692;
  #L461680.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L461686.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L46168a.  call `a`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.a:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @kind virtual;
  #L461690.  goto L461698;
  #L461692.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L461698.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4616ac.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4616b2.  v3:= temp @kind object;
  #L4616b4.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L4616b8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4616bc.  if v3 == v0 then goto L4616da;
  #L4616c0.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4616c6.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4616cc.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableBufferBoundary$a` @kind object;
  #L4616d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b.b` @type ^`long` @kind wide;
  #L4616d4.  call `b`(v3, v2, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$a;.b:(Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;J)V` @kind virtual;
  #L4616da.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferBoundary$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferBoundary$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4616ec.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4616f2.  return @kind void;
}
