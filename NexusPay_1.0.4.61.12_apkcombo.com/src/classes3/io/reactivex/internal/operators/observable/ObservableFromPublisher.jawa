record `io.reactivex.internal.operators.observable.ObservableFromPublisher` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.observable.ObservableFromPublisher.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableFromPublisher` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher;.<init>:(Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L469b60.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L469b66.  v0.`io.reactivex.internal.operators.observable.ObservableFromPublisher.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L469b6a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableFromPublisher` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L469b7c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableFromPublisher.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L469b80.  v1:= new `io.reactivex.internal.operators.observable.ObservableFromPublisher$a`;
  #L469b84.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableFromPublisher$a;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L469b8a.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L469b90.  return @kind void;
}
