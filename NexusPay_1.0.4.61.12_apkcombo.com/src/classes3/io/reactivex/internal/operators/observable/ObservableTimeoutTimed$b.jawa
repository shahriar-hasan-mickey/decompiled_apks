record `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$d` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `io.reactivex.ObservableSource` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L475a9c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L475aa2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L475aa6.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @type ^`long` := v2 @kind wide;
  #L475aaa.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L475aae.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L475ab2.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.h` @type ^`io.reactivex.ObservableSource` := v6 @kind object;
  #L475ab6.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L475aba.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L475ac0.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L475ac4.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L475ac8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L475ace.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L475ad2.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L475ad6.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L475adc.  v0.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L475ae0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L475c54.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L475c58.  v1:= 9223372036854775807L;
  #L475c62.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L475c68.  v4:= temp;
  #L475c6a.  if v4 == 0 then goto L475ca0;
  #L475c6e.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475c72.  call temp:= `dispose`(v4) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475c78.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.h` @type ^`io.reactivex.ObservableSource` @kind object;
  #L475c7c.  v5:= 0I;
  #L475c7e.  v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.h` @type ^`io.reactivex.ObservableSource` := v5 @kind object;
  #L475c82.  v5:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$a`;
  #L475c86.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L475c8a.  call `<init>`(v5, v0, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$a;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/atomic/AtomicReference;)V` @kind direct;
  #L475c90.  call `subscribe`(v4, v5) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L475c96.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475c9a.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475ca0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L475cb4.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475cb8.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475cbc.  v2:= new `io.reactivex.internal.operators.observable.ObservableTimeoutTimed$e`;
  #L475cc0.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$e;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeoutTimed$d;)V` @kind direct;
  #L475cc6.  v5:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.b` @type ^`long` @kind wide;
  #L475cca.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L475cce.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L475cd4.  v5:= temp @kind object;
  #L475cd6.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L475cdc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475af4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475af8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475afe.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475b04.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475b08.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475b0e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475a74.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475a7a.  v0:= temp @kind object;
  #L475a7c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L475a80.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475a86.  v0:= temp;
  #L475a88.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475b20.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L475b24.  v1:= 9223372036854775807L;
  #L475b2e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L475b34.  v3:= temp @kind wide;
  #L475b36.  v0:= lcmp(v3, v1);
  #L475b3a.  if v0 == 0 then goto L475b5c;
  #L475b3e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475b42.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475b48.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L475b4c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L475b52.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475b56.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475b5c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475b70.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L475b74.  v1:= 9223372036854775807L;
  #L475b7e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L475b84.  v3:= temp @kind wide;
  #L475b86.  v0:= lcmp(v3, v1);
  #L475b8a.  if v0 == 0 then goto L475bae;
  #L475b8e.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475b92.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475b98.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L475b9c.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L475ba2.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L475ba6.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475bac.  goto L475bb4;
  #L475bae.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L475bb4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L475bc8.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L475bcc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L475bd2.  v0:= temp @kind wide;
  #L475bd4.  v2:= 9223372036854775807L;
  #L475bde.  v4:= lcmp(v0, v2);
  #L475be2.  if v4 == 0 then goto L475c24;
  #L475be6.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L475bea.  v3:= 1L;
  #L475bee.  v3:= v3 + v0 @kind long;
  #L475bf0.  call temp:= `compareAndSet`(v2, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L475bf6.  v0:= temp;
  #L475bf8.  if v0 != 0 then goto L475bfe;
  #L475bfc.  goto L475c24;
  #L475bfe.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475c02.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475c08.  v0:= temp @kind object;
  #L475c0a.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L475c0e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L475c14.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L475c18.  call `onNext`(v0, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L475c1e.  call `c`(v5, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.c:(J)V` @kind virtual;
  #L475c24.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeoutTimed$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475c38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeoutTimed$b.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475c3c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475c42.  return @kind void;
}
