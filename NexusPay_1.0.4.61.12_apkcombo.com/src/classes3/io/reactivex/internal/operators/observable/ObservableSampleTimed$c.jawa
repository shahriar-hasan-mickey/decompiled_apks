record `io.reactivex.internal.operators.observable.ObservableSampleTimed$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSampleTimed$c.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47147c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L471482.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L471486.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47148c.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L471490.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L471494.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.b` @type ^`long` := v3 @kind wide;
  #L471498.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L47149c.  v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L4714a0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4714b4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4714b8.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4714be.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4714f4.  v0:= 0I;
  #L4714f6.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4714fc.  v0:= temp @kind object;
  #L4714fe.  if v0 == 0 then goto L47150c;
  #L471502.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L471506.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47150c.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4714d0.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.a:()V` @kind virtual;
  #L4714d6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4714da.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4714e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47145c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L471460.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L471466.  v0:= temp;
  #L471468.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L471520.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.a:()V` @kind virtual;
  #L471526.  call `b`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.b:()V` @kind virtual;
  #L47152c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471540.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.a:()V` @kind virtual;
  #L471546.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L47154a.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L471550.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L471564.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L47156a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleTimed$c` v7 @kind this, `io.reactivex.disposables.Disposable` v8 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47157c.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L471580.  call temp:= `validate`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L471586.  v0:= temp;
  #L471588.  if v0 == 0 then goto L4715bc;
  #L47158c.  v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.f` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L471590.  v8:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L471594.  call `onSubscribe`(v8, v7) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47159a.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L47159e.  v4:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.b` @type ^`long` @kind wide;
  #L4715a2.  v6:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4715a6.  v1:= v7 @kind object;
  #L4715a8.  v2:= v4 @kind wide;
  #L4715aa.  call temp:= `schedulePeriodicallyDirect`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4715b0.  v8:= temp @kind object;
  #L4715b2.  v0:= v7.`io.reactivex.internal.operators.observable.ObservableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4715b6.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4715bc.  return @kind void;
}
