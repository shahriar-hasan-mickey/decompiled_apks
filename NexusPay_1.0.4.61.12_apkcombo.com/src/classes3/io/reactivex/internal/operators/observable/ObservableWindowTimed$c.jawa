record `io.reactivex.internal.operators.observable.ObservableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler$Worker` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L478768.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L47876c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L478772.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L478778.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` := v3 @kind wide;
  #L47877c.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @type ^`long` := v5 @kind wide;
  #L478780.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L478784.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` := v8 @kind object;
  #L478788.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int` := v9;
  #L47878c.  v2:= new `java.util.LinkedList`;
  #L478790.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L478796.  v1.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` := v2 @kind object;
  #L47879a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v3 @kind this, `io.reactivex.subjects.UnicastSubject` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.a:(Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4787ac.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4787b0.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`;
  #L4787b4.  v2:= 0I;
  #L4787b6.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$b;.<init>:(Lio/reactivex/subjects/UnicastSubject;Z)V` @kind direct;
  #L4787bc.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4787c2.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4787c8.  v4:= temp;
  #L4787ca.  if v4 == 0 then goto L4787d4;
  #L4787ce.  call `b`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L4787d4.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v10 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L478800.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L478804.  v0:= (`io.reactivex.internal.queue.MpscLinkedQueue`) v0 @kind object;
  #L478808.  v1:= v10.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L47880c.  v2:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L478810.  v3:= 1I;
  #L478812.  v4:= 1I;
  #L478814.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @type ^`boolean` @kind boolean;
  #L478818.  if v5 == 0 then goto L47883e;
  #L47881c.  v1:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L478820.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L478826.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L47882c.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L478832.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L478836.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47883c.  return @kind void;
  #L47883e.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` @kind boolean;
  #L478842.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L478848.  v6:= temp @kind object;
  #L47884a.  if v6 != 0 then goto L478852;
  #L47884e.  v7:= 1I;
  #L478850.  goto L478854;
  #L478852.  v7:= 0I;
  #L478854.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b` @kind boolean;
  #L478858.  if v5 == 0 then goto L4788d4;
  #L47885c.  if v7 != 0 then goto L478864;
  #L478860.  if v8 == 0 then goto L4788d4;
  #L478864.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L47886a.  v0:= v10.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` @kind object;
  #L47886e.  if v0 == 0 then goto L47889a;
  #L478872.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L478878.  v1:= temp @kind object;
  #L47887a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L478880.  v3:= temp;
  #L478882.  if v3 == 0 then goto L4788c2;
  #L478886.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L47888c.  v3:= temp @kind object;
  #L47888e.  v3:= (`io.reactivex.subjects.UnicastSubject`) v3 @kind object;
  #L478892.  call `onError`(v3, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L478898.  goto L47887a;
  #L47889a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4788a0.  v0:= temp @kind object;
  #L4788a2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4788a8.  v1:= temp;
  #L4788aa.  if v1 == 0 then goto L4788c2;
  #L4788ae.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4788b4.  v1:= temp @kind object;
  #L4788b6.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L4788ba.  call `onComplete`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L4788c0.  goto L4788a2;
  #L4788c2.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4788c8.  v0:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4788cc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4788d2.  return @kind void;
  #L4788d4.  if v7 == 0 then goto L4788e8;
  #L4788d8.  v4:= -v4 @kind int;
  #L4788da.  call temp:= `leave`(v10, v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L4788e0.  v4:= temp;
  #L4788e2.  if v4 != 0 then goto L478814;
  #L4788e6.  return @kind void;
  #L4788e8.  if v8 == 0 then goto L47896a;
  #L4788ec.  v6:= (`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`) v6 @kind object;
  #L4788f0.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.b` @type ^`boolean` @kind boolean;
  #L4788f4.  if v5 == 0 then goto L47893a;
  #L4788f8.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L4788fc.  if v5 == 0 then goto L478902;
  #L478900.  goto L478814;
  #L478902.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L478906.  call temp:= `create`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L47890c.  v5:= temp @kind object;
  #L47890e.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L478914.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47891a.  v6:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47891e.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L478922.  call `<init>`(v7, v10, v5) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L478928.  v8:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` @kind wide;
  #L47892c.  v5:= v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478930.  call temp:= `schedule`(v6, v7, v8, v5) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L478936.  goto L478814;
  #L47893a.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L47893e.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L478944.  v5:= v6.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L478948.  call `onComplete`(v5) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @kind virtual;
  #L47894e.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L478954.  v5:= temp;
  #L478956.  if v5 == 0 then goto L478814;
  #L47895a.  v5:= v10.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L47895e.  if v5 == 0 then goto L478814;
  #L478962.  v10.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.i` @type ^`boolean` := v3 @kind boolean;
  #L478966.  goto L478814;
  #L47896a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L478970.  v5:= temp @kind object;
  #L478972.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L478978.  v7:= temp;
  #L47897a.  if v7 == 0 then goto L478814;
  #L47897e.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L478984.  v7:= temp @kind object;
  #L478986.  v7:= (`io.reactivex.subjects.UnicastSubject`) v7 @kind object;
  #L47898a.  call `onNext`(v7, v6) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L478990.  goto L478972;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4787e8.  v0:= 1I;
  #L4787ea.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4787ee.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L478750.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L478754.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4789a4.  v0:= 1I;
  #L4789a6.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4789aa.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4789b0.  v0:= temp;
  #L4789b2.  if v0 == 0 then goto L4789bc;
  #L4789b6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L4789bc.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4789c0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4789c6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4789d8.  v1.`io.reactivex.internal.observers.QueueDrainObserver.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4789dc.  v0:= 1I;
  #L4789de.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4789e2.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4789e8.  v0:= temp;
  #L4789ea.  if v0 == 0 then goto L4789f4;
  #L4789ee.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L4789f4.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4789f8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4789fe.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L478a10.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastEnter:()Z` @kind virtual;
  #L478a16.  v0:= temp;
  #L478a18.  if v0 == 0 then goto L478a58;
  #L478a1c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L478a20.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L478a26.  v0:= temp @kind object;
  #L478a28.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L478a2e.  v1:= temp;
  #L478a30.  if v1 == 0 then goto L478a48;
  #L478a34.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L478a3a.  v1:= temp @kind object;
  #L478a3c.  v1:= (`io.reactivex.subjects.UnicastSubject`) v1 @kind object;
  #L478a40.  call `onNext`(v1, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L478a46.  goto L478a28;
  #L478a48.  v3:= -1I;
  #L478a4a.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.leave:(I)I` @kind virtual;
  #L478a50.  v3:= temp;
  #L478a52.  if v3 != 0 then goto L478a70;
  #L478a56.  return @kind void;
  #L478a58.  v0:= v2.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L478a5c.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L478a62.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L478a68.  v3:= temp;
  #L478a6a.  if v3 != 0 then goto L478a70;
  #L478a6e.  return @kind void;
  #L478a70.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L478a76.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v11 @kind this, `io.reactivex.disposables.Disposable` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L478a88.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L478a8c.  call temp:= `validate`(v0, v12) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L478a92.  v0:= temp;
  #L478a94.  if v0 == 0 then goto L478b02;
  #L478a98.  v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.h` @type ^`io.reactivex.disposables.Disposable` := v12 @kind object;
  #L478a9c.  v12:= v11.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478aa0.  call `onSubscribe`(v12, v11) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L478aa6.  v12:= v11.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L478aaa.  if v12 == 0 then goto L478ab0;
  #L478aae.  return @kind void;
  #L478ab0.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L478ab4.  call temp:= `create`(v12) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L478aba.  v12:= temp @kind object;
  #L478abc.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.g` @type ^`java.util.List` @kind object;
  #L478ac0.  call temp:= `add`(v0, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L478ac6.  v0:= v11.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L478aca.  call `onNext`(v0, v12) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L478ad0.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L478ad4.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$a`;
  #L478ad8.  call `<init>`(v1, v11, v12) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L478ade.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.b` @type ^`long` @kind wide;
  #L478ae2.  v12:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478ae6.  call temp:= `schedule`(v0, v1, v2, v12) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L478aec.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.e` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L478af0.  v8:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.c` @type ^`long` @kind wide;
  #L478af4.  v10:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478af8.  v5:= v11 @kind object;
  #L478afa.  v6:= v8 @kind wide;
  #L478afc.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L478b02.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableWindowTimed$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L478b14.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableWindowTimed$c.f` @type ^`int`;
  #L478b18.  call temp:= `create`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @kind static;
  #L478b1e.  v0:= temp @kind object;
  #L478b20.  v1:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c$b`;
  #L478b24.  v2:= 1I;
  #L478b26.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c$b;.<init>:(Lio/reactivex/subjects/UnicastSubject;Z)V` @kind direct;
  #L478b2c.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L478b30.  if v0 != 0 then goto L478b3e;
  #L478b34.  v0:= v3.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L478b38.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L478b3e.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L478b44.  v0:= temp;
  #L478b46.  if v0 == 0 then goto L478b50;
  #L478b4a.  call `b`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.b:()V` @kind virtual;
  #L478b50.  return @kind void;
}
