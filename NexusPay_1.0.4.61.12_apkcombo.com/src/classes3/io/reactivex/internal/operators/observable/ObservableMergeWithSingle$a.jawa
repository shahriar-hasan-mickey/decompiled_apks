record `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a$a` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.i` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46d228.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46d22e.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46d232.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L46d236.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L46d23c.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L46d240.  v1:= new `io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a$a`;
  #L46d244.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;)V` @kind direct;
  #L46d24a.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a$a` := v1 @kind object;
  #L46d24e.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46d252.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L46d258.  v0.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L46d25c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L46d2b4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d2ba.  v0:= temp;
  #L46d2bc.  if v0 != 0 then goto L46d2c6;
  #L46d2c0.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L46d2c6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L46d2d8.  v0:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d2dc.  v1:= 1I;
  #L46d2de.  v2:= 1I;
  #L46d2e0.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` @kind boolean;
  #L46d2e4.  v4:= 0I;
  #L46d2e6.  if v3 == 0 then goto L46d2f4;
  #L46d2ea.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46d2ee.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46d2f2.  return @kind void;
  #L46d2f4.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46d2f8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46d2fe.  v3:= temp @kind object;
  #L46d300.  if v3 == 0 then goto L46d320;
  #L46d304.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46d308.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46d30c.  v1:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46d310.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L46d316.  v1:= temp @kind object;
  #L46d318.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46d31e.  return @kind void;
  #L46d320.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int`;
  #L46d324.  v5:= 2I;
  #L46d326.  if v3 != v1 then goto L46d33e;
  #L46d32a.  v3:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L46d32e.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L46d332.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v5;
  #L46d336.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d33c.  v3:= 2I;
  #L46d33e.  v6:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` @kind boolean;
  #L46d342.  v7:= v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L46d346.  if v7 == 0 then goto L46d354;
  #L46d34a.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46d350.  v7:= temp @kind object;
  #L46d352.  goto L46d356;
  #L46d354.  v7:= v4 @kind object;
  #L46d356.  if v7 != 0 then goto L46d35e;
  #L46d35a.  v8:= 1I;
  #L46d35c.  goto L46d360;
  #L46d35e.  v8:= 0I;
  #L46d360.  if v6 == 0 then goto L46d378;
  #L46d364.  if v8 == 0 then goto L46d378;
  #L46d368.  if v3 != v5 then goto L46d378;
  #L46d36c.  v9.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L46d370.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46d376.  return @kind void;
  #L46d378.  if v8 == 0 then goto L46d38c;
  #L46d37c.  v2:= -v2 @kind int;
  #L46d37e.  call temp:= `addAndGet`(v9, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46d384.  v2:= temp;
  #L46d386.  if v2 != 0 then goto L46d2e0;
  #L46d38a.  return @kind void;
  #L46d38c.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d392.  goto L46d2e0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46d1f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L46d1fc.  if v0 != 0 then goto L46d216;
  #L46d200.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L46d204.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L46d20a.  v1:= temp;
  #L46d20c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L46d212.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L46d216.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L46d478.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46d47c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46d482.  v0:= temp;
  #L46d484.  if v0 == 0 then goto L46d49a;
  #L46d488.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d48c.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46d492.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L46d498.  goto L46d4a0;
  #L46d49a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46d4a0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d270.  v0:= 1I;
  #L46d272.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.g` @type ^`boolean` := v0 @kind boolean;
  #L46d276.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d27a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46d280.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L46d284.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46d28a.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d290.  v0:= temp;
  #L46d292.  if v0 != 0 then goto L46d2a0;
  #L46d296.  v0:= 0I;
  #L46d298.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L46d29c.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v0 @kind object;
  #L46d2a0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46d4b4.  v0:= 0I;
  #L46d4b6.  v1:= 1I;
  #L46d4b8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L46d4be.  v0:= temp;
  #L46d4c0.  if v0 == 0 then goto L46d4d6;
  #L46d4c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d4c8.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d4ce.  v3:= 2I;
  #L46d4d0.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v3;
  #L46d4d4.  goto L46d4ec;
  #L46d4d6.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.f` @type ^`java.lang.Object` := v3 @kind object;
  #L46d4da.  v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.i` @type ^`int` := v1;
  #L46d4de.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d4e4.  v3:= temp;
  #L46d4e6.  if v3 == 0 then goto L46d4ec;
  #L46d4ea.  return @kind void;
  #L46d4ec.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L46d4f2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d1cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d1d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46d1d6.  v0:= temp @kind object;
  #L46d1d8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L46d1dc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46d1e2.  v0:= temp;
  #L46d1e4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d3a4.  v0:= 1I;
  #L46d3a6.  v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.h` @type ^`boolean` := v0 @kind boolean;
  #L46d3aa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L46d3b0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d3c4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46d3c8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46d3ce.  v0:= temp;
  #L46d3d0.  if v0 == 0 then goto L46d3e6;
  #L46d3d4.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a$a` @kind object;
  #L46d3d8.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L46d3de.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.a:()V` @kind virtual;
  #L46d3e4.  goto L46d3ec;
  #L46d3e6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46d3ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46d400.  v0:= 0I;
  #L46d402.  v1:= 1I;
  #L46d404.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L46d40a.  v0:= temp;
  #L46d40c.  if v0 == 0 then goto L46d428;
  #L46d410.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46d414.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46d41a.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L46d420.  v3:= temp;
  #L46d422.  if v3 != 0 then goto L46d444;
  #L46d426.  return @kind void;
  #L46d428.  call temp:= `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L46d42e.  v0:= temp @kind object;
  #L46d430.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L46d436.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46d43c.  v3:= temp;
  #L46d43e.  if v3 == 0 then goto L46d444;
  #L46d442.  return @kind void;
  #L46d444.  call `b`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.b:()V` @kind virtual;
  #L46d44a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableMergeWithSingle$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46d45c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L46d460.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46d466.  return @kind void;
}
