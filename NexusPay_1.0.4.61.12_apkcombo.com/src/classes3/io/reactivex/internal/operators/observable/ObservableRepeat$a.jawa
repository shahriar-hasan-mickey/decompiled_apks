record `io.reactivex.internal.operators.observable.ObservableRepeat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableRepeat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `io.reactivex.internal.disposables.SequentialDisposable` v4 @kind object, `io.reactivex.ObservableSource` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.<init>:(Lio/reactivex/Observer;JLio/reactivex/internal/disposables/SequentialDisposable;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46f744.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L46f74a.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L46f74e.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v4 @kind object;
  #L46f752.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @type ^`io.reactivex.ObservableSource` := v5 @kind object;
  #L46f756.  v0.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L46f75a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L46f814.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46f81a.  v0:= temp;
  #L46f81c.  if v0 != 0 then goto L46f84c;
  #L46f820.  v0:= 1I;
  #L46f822.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L46f826.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L46f82c.  v1:= temp;
  #L46f82e.  if v1 == 0 then goto L46f834;
  #L46f832.  return @kind void;
  #L46f834.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableRepeat$a.c` @type ^`io.reactivex.ObservableSource` @kind object;
  #L46f838.  call `subscribe`(v1, v2) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L46f83e.  v0:= -v0 @kind int;
  #L46f840.  call temp:= `addAndGet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46f846.  v0:= temp;
  #L46f848.  if v0 != 0 then goto L46f822;
  #L46f84c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L46f76c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` @kind wide;
  #L46f770.  v2:= 9223372036854775807L;
  #L46f77a.  v4:= lcmp(v0, v2);
  #L46f77e.  if v4 == 0 then goto L46f78e;
  #L46f782.  v2:= 1L;
  #L46f786.  v2:= v0 - v2 @kind long;
  #L46f78a.  v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L46f78e.  v2:= 0L;
  #L46f792.  v4:= lcmp(v0, v2);
  #L46f796.  if v4 == 0 then goto L46f7a2;
  #L46f79a.  call `a`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.a:()V` @kind virtual;
  #L46f7a0.  goto L46f7ac;
  #L46f7a2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f7a6.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L46f7ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f7c0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f7c4.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46f7ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f7dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46f7e0.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46f7e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableRepeat$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableRepeat$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46f7f8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableRepeat$a.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L46f7fc.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L46f802.  return @kind void;
}
