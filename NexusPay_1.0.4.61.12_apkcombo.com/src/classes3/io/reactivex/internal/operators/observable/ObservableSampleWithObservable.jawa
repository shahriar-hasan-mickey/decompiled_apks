record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `io.reactivex.ObservableSource` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.<init>:(Lio/reactivex/ObservableSource;Lio/reactivex/ObservableSource;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4719bc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L4719c2.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.a` @type ^`io.reactivex.ObservableSource` := v2 @kind object;
  #L4719c6.  v0.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.b` @type ^`boolean` := v3 @kind boolean;
  #L4719ca.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4719dc.  v0:= new `io.reactivex.observers.SerializedObserver`;
  #L4719e0.  call `<init>`(v0, v4) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L4719e6.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.b` @type ^`boolean` @kind boolean;
  #L4719ea.  if v4 == 0 then goto L471a08;
  #L4719ee.  v4:= v3.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4719f2.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$a`;
  #L4719f6.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L4719fa.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L471a00.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L471a06.  goto L471a20;
  #L471a08.  v4:= v3.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L471a0c.  v1:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$b`;
  #L471a10.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable.a` @type ^`io.reactivex.ObservableSource` @kind object;
  #L471a14.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @kind direct;
  #L471a1a.  call `subscribe`(v4, v1) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L471a20.  return @kind void;
}
