record `io.reactivex.internal.operators.observable.ObservableCombineLatest$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @AccessFlag ;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableCombineLatest$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L463570.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L463576.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L46357a.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L463580.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L463584.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L463588.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L46358c.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @type ^`boolean` := v6 @kind boolean;
  #L463590.  v2:= new `java.lang.Object`[v4];
  #L463594.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L463598.  v2:= new `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[v4];
  #L46359c.  v3:= 0I;
  #L46359e.  if v3 >= v4 then goto L4635b6;
  #L4635a2.  v6:= new `io.reactivex.internal.operators.observable.ObservableCombineLatest$a`;
  #L4635a6.  call `<init>`(v6, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;I)V` @kind direct;
  #L4635ac.  v2[v3]:= v6 @kind object;
  #L4635b0.  v3:= v3 + 1;
  #L4635b4.  goto L46359e;
  #L4635b6.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] := v2 @kind object;
  #L4635ba.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4635be.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4635c4.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4635c8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4635dc.  v0:= v4.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] @kind object;
  #L4635e0.  v1:= length @variable v0;
  #L4635e2.  v2:= 0I;
  #L4635e4.  if v2 >= v1 then goto L4635f8;
  #L4635e8.  v3:= v0[v2] @kind object;
  #L4635ec.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$a;.a:()V` @kind virtual;
  #L4635f2.  v2:= v2 + 1;
  #L4635f6.  goto L4635e4;
  #L4635f8.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L46360c.  @monitorenter v1
  #L46360e.  v0:= 0I;
  #L463610.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L463614.  @monitorexit v1
  #L463616.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L46361c.  return @kind void;
  #L46361e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463620.  @monitorexit v1
  #L463622.  throw v2;
  catch `java.lang.Throwable` @[L463610..L463616] goto L46361e;
  catch `java.lang.Throwable` @[L463620..L463622] goto L46361e;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L463684.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L46368a.  v0:= temp;
  #L46368c.  if v0 == 0 then goto L463692;
  #L463690.  return @kind void;
  #L463692.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L463696.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46369a.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @type ^`boolean` @kind boolean;
  #L46369e.  v3:= 1I;
  #L4636a0.  v4:= 1I;
  #L4636a2.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L4636a6.  if v5 == 0 then goto L4636b2;
  #L4636aa.  call `b`(v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4636b0.  return @kind void;
  #L4636b2.  if v2 != 0 then goto L4636e6;
  #L4636b6.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4636ba.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4636c0.  v5:= temp @kind object;
  #L4636c2.  if v5 == 0 then goto L4636e6;
  #L4636c6.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @kind virtual;
  #L4636cc.  call `b`(v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L4636d2.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4636d6.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4636dc.  v0:= temp @kind object;
  #L4636de.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4636e4.  return @kind void;
  #L4636e6.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` @kind boolean;
  #L4636ea.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4636f0.  v6:= temp @kind object;
  #L4636f2.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L4636f6.  if v6 != 0 then goto L4636fe;
  #L4636fa.  v7:= 1I;
  #L4636fc.  goto L463700;
  #L4636fe.  v7:= 0I;
  #L463700.  if v5 == 0 then goto L46372e;
  #L463704.  if v7 == 0 then goto L46372e;
  #L463708.  call `b`(v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L46370e.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463712.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L463718.  v0:= temp @kind object;
  #L46371a.  if v0 != 0 then goto L463726;
  #L46371e.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L463724.  goto L46372c;
  #L463726.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46372c.  return @kind void;
  #L46372e.  if v7 == 0 then goto L463742;
  #L463732.  v4:= -v4 @kind int;
  #L463734.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L46373a.  v4:= temp;
  #L46373c.  if v4 != 0 then goto L4636a2;
  #L463740.  return @kind void;
  #L463742.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L463746.  call temp:= `apply`(v5, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46374c.  v5:= temp @kind object;
  #L46374e.  v6:= "The combiner returned a null value" @kind object;
  #L463752.  call temp:= `requireNonNull`(v5, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L463758.  v5:= temp @kind object;
  #L46375a.  call `onNext`(v1, v5) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L463760.  goto L4636a2;
  #L463762.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463764.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46376a.  v3:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L46376e.  call temp:= `addThrowable`(v3, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L463774.  call `a`(v8) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @kind virtual;
  #L46377a.  call `b`(v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L463780.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463784.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L46378a.  v0:= temp @kind object;
  #L46378c.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L463792.  return @kind void;
  catch `java.lang.Throwable` @[L463742..L46375a] goto L463762;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.d:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4637b0.  @monitorenter v3
  #L4637b2.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4637b6.  if v0 != 0 then goto L4637be;
  #L4637ba.  @monitorexit v3
  #L4637bc.  return @kind void;
  #L4637be.  v4:= v0[v4] @kind object;
  #L4637c2.  v1:= 1I;
  #L4637c4.  if v4 != 0 then goto L4637cc;
  #L4637c8.  v4:= 1I;
  #L4637ca.  goto L4637ce;
  #L4637cc.  v4:= 0I;
  #L4637ce.  if v4 != 0 then goto L4637e2;
  #L4637d2.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int`;
  #L4637d6.  v2:= v2 + v1 @kind int;
  #L4637d8.  v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int` := v2;
  #L4637dc.  v0:= length @variable v0;
  #L4637de.  if v2 != v0 then goto L4637e6;
  #L4637e2.  v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` := v1 @kind boolean;
  #L4637e6.  @monitorexit v3
  #L4637e8.  if v4 == 0 then goto L4637f2;
  #L4637ec.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @kind virtual;
  #L4637f2.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:()V` @kind virtual;
  #L4637f8.  return @kind void;
  #L4637fa.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4637fc.  @monitorexit v3
  #L4637fe.  throw v4;
  catch `java.lang.Throwable` @[L4637b2..L4637e8] goto L4637fa;
  catch `java.lang.Throwable` @[L4637fc..L4637fe] goto L4637fa;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463648.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L46364c.  if v0 != 0 then goto L463672;
  #L463650.  v0:= 1I;
  #L463652.  v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` := v0 @kind boolean;
  #L463656.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @kind virtual;
  #L46365c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L463662.  v0:= temp;
  #L463664.  if v0 != 0 then goto L463672;
  #L463668.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L46366c.  call `b`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.b:(Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L463672.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v2 @kind this, `int` v3 , `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.e:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L463824.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.i` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L463828.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L46382e.  v0:= temp;
  #L463830.  if v0 == 0 then goto L463890;
  #L463834.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.f` @type ^`boolean` @kind boolean;
  #L463838.  v0:= 1I;
  #L46383a.  if v4 == 0 then goto L46387e;
  #L46383e.  @monitorenter v2
  #L463840.  v4:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] @kind object;
  #L463844.  if v4 != 0 then goto L46384c;
  #L463848.  @monitorexit v2
  #L46384a.  return @kind void;
  #L46384c.  v3:= v4[v3] @kind object;
  #L463850.  if v3 != 0 then goto L463858;
  #L463854.  v3:= 1I;
  #L463856.  goto L46385a;
  #L463858.  v3:= 0I;
  #L46385a.  if v3 != 0 then goto L46386e;
  #L46385e.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int`;
  #L463862.  v1:= v1 + v0 @kind int;
  #L463864.  v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.k` @type ^`int` := v1;
  #L463868.  v4:= length @variable v4;
  #L46386a.  if v1 != v4 then goto L463872;
  #L46386e.  v2.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` := v0 @kind boolean;
  #L463872.  @monitorexit v2
  #L463874.  v0:= v3;
  #L463876.  goto L46387e;
  #L463878.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46387a.  @monitorexit v2
  #L46387c.  throw v3;
  #L46387e.  if v0 == 0 then goto L463888;
  #L463882.  call `a`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.a:()V` @kind virtual;
  #L463888.  call `c`(v2) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:()V` @kind virtual;
  #L46388e.  goto L463896;
  #L463890.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L463896.  return @kind void;
  catch `java.lang.Throwable` @[L463840..L46387c] goto L463878;
}
procedure `void` `f`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.f:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4638b4.  @monitorenter v3
  #L4638b6.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4638ba.  if v0 != 0 then goto L4638c2;
  #L4638be.  @monitorexit v3
  #L4638c0.  return @kind void;
  #L4638c2.  v1:= v0[v4] @kind object;
  #L4638c6.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @type ^`int`;
  #L4638ca.  if v1 != 0 then goto L4638d6;
  #L4638ce.  v2:= v2 + 1;
  #L4638d2.  v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.j` @type ^`int` := v2;
  #L4638d6.  v0[v4]:= v5 @kind object;
  #L4638da.  v4:= length @variable v0;
  #L4638dc.  if v2 != v4 then goto L4638f6;
  #L4638e0.  v4:= v3.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4638e4.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4638ea.  v5:= temp @kind object;
  #L4638ec.  call temp:= `offer`(v4, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4638f2.  v4:= 1I;
  #L4638f4.  goto L4638f8;
  #L4638f6.  v4:= 0I;
  #L4638f8.  @monitorexit v3
  #L4638fa.  if v4 == 0 then goto L463904;
  #L4638fe.  call `c`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.c:()V` @kind virtual;
  #L463904.  return @kind void;
  #L463906.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L463908.  @monitorexit v3
  #L46390a.  throw v4;
  catch `java.lang.Throwable` @[L4638b6..L4638fa] goto L463906;
  catch `java.lang.Throwable` @[L463908..L46390a] goto L463906;
}
procedure `void` `g`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v5 @kind this, `io.reactivex.ObservableSource`[] v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.g:([Lio/reactivex/ObservableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L463930.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.c` @type ^`io.reactivex.internal.operators.observable.ObservableCombineLatest$a`[] @kind object;
  #L463934.  v1:= length @variable v0;
  #L463936.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.a` @type ^`io.reactivex.Observer` @kind object;
  #L46393a.  call `onSubscribe`(v2, v5) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L463940.  v2:= 0I;
  #L463942.  if v2 >= v1 then goto L46396c;
  #L463946.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.h` @type ^`boolean` @kind boolean;
  #L46394a.  if v3 != 0 then goto L46396c;
  #L46394e.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L463952.  if v3 == 0 then goto L463958;
  #L463956.  goto L46396c;
  #L463958.  v3:= v6[v2] @kind object;
  #L46395c.  v4:= v0[v2] @kind object;
  #L463960.  call `subscribe`(v3, v4) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L463966.  v2:= v2 + 1;
  #L46396a.  goto L463942;
  #L46396c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableCombineLatest$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableCombineLatest$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L463558.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableCombineLatest$b.g` @type ^`boolean` @kind boolean;
  #L46355c.  return v0;
}
