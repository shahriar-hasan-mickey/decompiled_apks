record `io.reactivex.internal.operators.observable.ObservableNever` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
}
global `io.reactivex.Observable` `@@io.reactivex.internal.operators.observable.ObservableNever.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/observable/ObservableNever;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L46d55c.  v0:= new `io.reactivex.internal.operators.observable.ObservableNever`;
  #L46d560.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableNever;.<init>:()V` @kind direct;
  #L46d566.  `@@io.reactivex.internal.operators.observable.ObservableNever.INSTANCE` @type ^`io.reactivex.Observable` := v0 @kind object;
  #L46d56a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableNever` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableNever;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L46d57c.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L46d582.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableNever` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableNever;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L46d594.  v0:= `@@io.reactivex.internal.disposables.EmptyDisposable.NEVER` @type ^`io.reactivex.internal.disposables.EmptyDisposable` @kind object;
  #L46d598.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46d59e.  return @kind void;
}
