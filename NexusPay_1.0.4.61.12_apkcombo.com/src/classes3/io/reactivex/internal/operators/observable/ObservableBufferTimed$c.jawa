record `io.reactivex.internal.operators.observable.ObservableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.QueueDrainObserver` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.<init>:(Lio/reactivex/Observer;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L462784.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L462788.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L46278e.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.<init>:(Lio/reactivex/Observer;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L462794.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L462798.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` := v4 @kind wide;
  #L46279c.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` := v6 @kind wide;
  #L4627a0.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L4627a4.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L4627a8.  v2:= new `java.util.LinkedList`;
  #L4627ac.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4627b2.  v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` := v2 @kind object;
  #L4627b6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.b:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4627fc.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L462802.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.c:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L462814.  call `fastPathOrderedEmit`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.fastPathOrderedEmit:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L46281a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @AccessFlag PUBLIC {
    temp;

  #L4627e4.  call `onNext`(v1, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4627ea.  return @kind void;
}
procedure `void` `accept`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.accept:(Lio/reactivex/Observer;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4627c8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4627cc.  call `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.a:(Lio/reactivex/Observer;Ljava/util/Collection;)V` @kind virtual;
  #L4627d2.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L46282c.  @monitorenter v1
  #L46282e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L462832.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L462838.  @monitorexit v1
  #L46283a.  return @kind void;
  #L46283c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46283e.  @monitorexit v1
  #L462840.  throw v0;
  catch `java.lang.Throwable` @[L46282e..L462840] goto L46283c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462860.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L462864.  if v0 != 0 then goto L462888;
  #L462868.  v0:= 1I;
  #L46286a.  v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L46286e.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L462874.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L462878.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46287e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462882.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462888.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46276c.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L462770.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L46289c.  @monitorenter v4
  #L46289e.  v0:= new `java.util.ArrayList`;
  #L4628a2.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4628a6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4628ac.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4628b0.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4628b6.  @monitorexit v4
  #L4628b8.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4628be.  v0:= temp @kind object;
  #L4628c0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4628c6.  v1:= temp;
  #L4628c8.  if v1 == 0 then goto L4628e4;
  #L4628cc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4628d2.  v1:= temp @kind object;
  #L4628d4.  v1:= (`java.util.Collection`) v1 @kind object;
  #L4628d8.  v2:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4628dc.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4628e2.  goto L4628c0;
  #L4628e4.  v0:= 1I;
  #L4628e6.  v4.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4628ea.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/observers/QueueDrainObserver;.enter:()Z` @kind virtual;
  #L4628f0.  v0:= temp;
  #L4628f2.  if v0 == 0 then goto L46290a;
  #L4628f6.  v0:= v4.`io.reactivex.internal.observers.QueueDrainObserver.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4628fa.  v1:= v4.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4628fe.  v2:= 0I;
  #L462900.  v3:= v4.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462904.  call `drainLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lio/reactivex/Observer;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/ObservableQueueDrain;)V` @kind static;
  #L46290a.  return @kind void;
  #L46290c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46290e.  @monitorexit v4
  #L462910.  throw v0;
  catch `java.lang.Throwable` @[L46289e..L4628b8] goto L46290c;
  catch `java.lang.Throwable` @[L46290e..L462910] goto L46290c;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L462938.  v0:= 1I;
  #L46293a.  v1.`io.reactivex.internal.observers.QueueDrainObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L46293e.  call `d`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.d:()V` @kind virtual;
  #L462944.  v0:= v1.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462948.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46294e.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462952.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462958.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46296c.  @monitorenter v2
  #L46296e.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L462972.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L462978.  v0:= temp @kind object;
  #L46297a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L462980.  v1:= temp;
  #L462982.  if v1 == 0 then goto L46299a;
  #L462986.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L46298c.  v1:= temp @kind object;
  #L46298e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L462992.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L462998.  goto L46297a;
  #L46299a.  @monitorexit v2
  #L46299c.  return @kind void;
  #L46299e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4629a0.  @monitorexit v2
  #L4629a2.  throw v3;
  catch `java.lang.Throwable` @[L46296e..L4629a2] goto L46299e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v8 @kind this, `io.reactivex.disposables.Disposable` v9 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L4629c0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4629c4.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4629ca.  v0:= temp;
  #L4629cc.  if v0 == 0 then goto L462a5a;
  #L4629d0.  v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.h` @type ^`io.reactivex.disposables.Disposable` := v9 @kind object;
  #L4629d4.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4629d8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4629de.  v0:= temp @kind object;
  #L4629e0.  v1:= "The buffer supplied is null" @kind object;
  #L4629e4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4629ea.  v0:= temp @kind object;
  #L4629ec.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4629f0.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L4629f4.  call temp:= `add`(v9, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4629fa.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4629fe.  call `onSubscribe`(v9, v8) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L462a04.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462a08.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.d` @type ^`long` @kind wide;
  #L462a0c.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L462a10.  v2:= v8 @kind object;
  #L462a12.  v3:= v5 @kind wide;
  #L462a14.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L462a1a.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462a1e.  v1:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$c$b`;
  #L462a22.  call `<init>`(v1, v8, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L462a28.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L462a2c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L462a30.  call temp:= `schedule`(v9, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L462a36.  goto L462a5a;
  #L462a38.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462a3a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L462a40.  call `dispose`(v9) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462a46.  v9:= v8.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462a4a.  call `error`(v0, v9) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L462a50.  v9:= v8.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462a54.  call `dispose`(v9) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L462a5a.  return @kind void;
  catch `java.lang.Throwable` @[L4629d4..L4629f0] goto L462a38;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L462a78.  v0:= v5.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L462a7c.  if v0 == 0 then goto L462a82;
  #L462a80.  return @kind void;
  #L462a82.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L462a86.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L462a8c.  v0:= temp @kind object;
  #L462a8e.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L462a92.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L462a98.  v0:= temp @kind object;
  #L462a9a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L462a9e.  @monitorenter v5
  #L462aa0.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.cancelled` @type ^`boolean` @kind boolean;
  #L462aa4.  if v1 == 0 then goto L462aac;
  #L462aa8.  @monitorexit v5
  #L462aaa.  return @kind void;
  #L462aac.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.g` @type ^`java.util.List` @kind object;
  #L462ab0.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L462ab6.  @monitorexit v5
  #L462ab8.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L462abc.  v2:= new `io.reactivex.internal.operators.observable.ObservableBufferTimed$c$a`;
  #L462ac0.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L462ac6.  v3:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.c` @type ^`long` @kind wide;
  #L462aca.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableBufferTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L462ace.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L462ad4.  return @kind void;
  #L462ad6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462ad8.  @monitorexit v5
  #L462ada.  throw v0;
  #L462adc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L462ade.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L462ae4.  v1:= v5.`io.reactivex.internal.observers.QueueDrainObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L462ae8.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L462aee.  call `dispose`(v5) @signature `Lio/reactivex/internal/operators/observable/ObservableBufferTimed$c;.dispose:()V` @kind virtual;
  #L462af4.  return @kind void;
  catch `java.lang.Throwable` @[L462a82..L462a9e] goto L462adc;
  catch `java.lang.Throwable` @[L462aa0..L462ab8] goto L462ad6;
  catch `java.lang.Throwable` @[L462ad8..L462ada] goto L462ad6;
}
