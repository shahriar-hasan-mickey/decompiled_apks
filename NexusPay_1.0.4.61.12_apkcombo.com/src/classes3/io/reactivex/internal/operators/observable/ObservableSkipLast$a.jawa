record `io.reactivex.internal.operators.observable.ObservableSkipLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableSkipLast$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipLast$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.<init>:(Lio/reactivex/Observer;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L472e70.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayDeque;.<init>:(I)V` @kind direct;
  #L472e76.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L472e7a.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.b` @type ^`int` := v2;
  #L472e7e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472e90.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472e94.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472e9a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472e50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472e54.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L472e5a.  v0:= temp;
  #L472e5c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472eac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472eb0.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L472eb6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472ec8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472ecc.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472ed2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L472ee4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.b` @type ^`int`;
  #L472ee8.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L472eee.  v1:= temp;
  #L472ef0.  if v0 != v1 then goto L472f06;
  #L472ef4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472ef8.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L472efe.  v1:= temp @kind object;
  #L472f00.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L472f06.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L472f0c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLast$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLast$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472f20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472f24.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L472f2a.  v0:= temp;
  #L472f2c.  if v0 == 0 then goto L472f3e;
  #L472f30.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L472f34.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLast$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472f38.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L472f3e.  return @kind void;
}
