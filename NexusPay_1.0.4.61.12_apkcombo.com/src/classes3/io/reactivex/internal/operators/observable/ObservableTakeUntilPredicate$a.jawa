record `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4748ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4748b2.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4748b6.  v0.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4748ba.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4748cc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4748d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4748d6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47488c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474890.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L474896.  v0:= temp;
  #L474898.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4748e8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L4748ec.  if v0 != 0 then goto L474900;
  #L4748f0.  v0:= 1I;
  #L4748f2.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4748f6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4748fa.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474900.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474914.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L474918.  if v0 != 0 then goto L47492e;
  #L47491c.  v0:= 1I;
  #L47491e.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L474922.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474926.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47492c.  goto L474934;
  #L47492e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L474934.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474948.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L47494c.  if v0 != 0 then goto L47499e;
  #L474950.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474954.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47495a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L47495e.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L474964.  v2:= temp;
  #L474966.  if v2 == 0 then goto L47499e;
  #L47496a.  v2:= 1I;
  #L47496c.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L474970.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474974.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47497a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47497e.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474984.  goto L47499e;
  #L474986.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L474988.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47498e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474992.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474998.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47499e.  return @kind void;
  catch `java.lang.Throwable` @[L47495a..L474966] goto L474986;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeUntilPredicate$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4749bc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4749c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4749c6.  v0:= temp;
  #L4749c8.  if v0 == 0 then goto L4749da;
  #L4749cc.  v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4749d0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeUntilPredicate$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4749d4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4749da.  return @kind void;
}
