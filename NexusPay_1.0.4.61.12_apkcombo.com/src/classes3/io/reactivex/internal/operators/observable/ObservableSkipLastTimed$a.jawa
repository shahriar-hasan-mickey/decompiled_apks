record `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `int` v6 , `boolean` v7 ) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L472f68.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L472f6e.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L472f72.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @type ^`long` := v2 @kind wide;
  #L472f76.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L472f7a.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L472f7e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L472f82.  call `<init>`(v1, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L472f88.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L472f8c.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @type ^`boolean` := v7 @kind boolean;
  #L472f90.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L472fe4.  v0:= v17 @kind object;
  #L472fe8.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L472fee.  v1:= temp;
  #L472ff0.  if v1 == 0 then goto L472ff6;
  #L472ff4.  return @kind void;
  #L472ff6.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L472ffa.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472ffe.  v3:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.f` @type ^`boolean` @kind boolean;
  #L473002.  v4:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L473006.  v5:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L47300a.  v6:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.b` @type ^`long` @kind wide;
  #L47300e.  v8:= 1I;
  #L473010.  v9:= 1I;
  #L473012.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L473016.  if v10 == 0 then goto L473026;
  #L47301a.  v1:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L47301e.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L473024.  return @kind void;
  #L473026.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L47302a.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L473030.  v11:= temp @kind object;
  #L473032.  v11:= (`java.lang.Long`) v11 @kind object;
  #L473036.  if v11 != 0 then goto L47303e;
  #L47303a.  v12:= 1I;
  #L47303c.  goto L473040;
  #L47303e.  v12:= 0I;
  #L473040.  call temp:= `now`(v5, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L473046.  v13:= temp @kind wide;
  #L473048.  if v12 != 0 then goto L473060;
  #L47304c.  call temp:= `longValue`(v11) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L473052.  v15:= temp @kind wide;
  #L473054.  v13:= v13 - v6 @kind long;
  #L473056.  v11:= lcmp(v15, v13);
  #L47305a.  if v11 <= 0 then goto L473060;
  #L47305e.  v12:= 1I;
  #L473060.  if v10 == 0 then goto L4730aa;
  #L473064.  if v3 == 0 then goto L473084;
  #L473068.  if v12 == 0 then goto L4730aa;
  #L47306c.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L473070.  if v2 == 0 then goto L47307c;
  #L473074.  call `onError`(v1, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47307a.  goto L473082;
  #L47307c.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L473082.  return @kind void;
  #L473084.  v10:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L473088.  if v10 == 0 then goto L47309e;
  #L47308c.  v2:= v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L473090.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L473096.  call `onError`(v1, v10) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47309c.  return @kind void;
  #L47309e.  if v12 == 0 then goto L4730aa;
  #L4730a2.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4730a8.  return @kind void;
  #L4730aa.  if v12 == 0 then goto L4730be;
  #L4730ae.  v9:= -v9 @kind int;
  #L4730b0.  call temp:= `addAndGet`(v0, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4730b6.  v9:= temp;
  #L4730b8.  if v9 != 0 then goto L473012;
  #L4730bc.  return @kind void;
  #L4730be.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4730c4.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4730ca.  v10:= temp @kind object;
  #L4730cc.  call `onNext`(v1, v10) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4730d2.  goto L473012;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472fa4.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L472fa8.  if v0 != 0 then goto L472fd2;
  #L472fac.  v0:= 1I;
  #L472fae.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L472fb2.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472fb6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472fbc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L472fc2.  v0:= temp;
  #L472fc4.  if v0 != 0 then goto L472fd2;
  #L472fc8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L472fcc.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L472fd2.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472f50.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.h` @type ^`boolean` @kind boolean;
  #L472f54.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4730e4.  v0:= 1I;
  #L4730e6.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4730ea.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L4730f0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L473104.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.j` @type ^`java.lang.Throwable` := v1 @kind object;
  #L473108.  v1:= 1I;
  #L47310a.  v0.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.i` @type ^`boolean` := v1 @kind boolean;
  #L47310e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L473114.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L473128.  v0:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L47312c.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L473130.  v2:= v3.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L473134.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L47313a.  v1:= temp @kind wide;
  #L47313c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L473142.  v1:= temp @kind object;
  #L473144.  call temp:= `offer`(v0, v1, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47314a.  call `a`(v3) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.a:()V` @kind virtual;
  #L473150.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSkipLastTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L473164.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L473168.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47316e.  v0:= temp;
  #L473170.  if v0 == 0 then goto L473182;
  #L473174.  v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L473178.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSkipLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L47317c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L473182.  return @kind void;
}
