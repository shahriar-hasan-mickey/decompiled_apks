record `io.reactivex.internal.operators.observable.ObservableTimeout$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.observable.ObservableTimeout$d` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableTimeout$c.b` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTimeout$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L475738.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47573e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L475742.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$c.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L475746.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L47574a.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L475750.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L475754.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L475758.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47575e.  v0.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L475762.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v2 @kind this, `long` v3 , `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L475964.  v0:= 9223372036854775807L;
  #L47596e.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L475974.  v3:= temp;
  #L475976.  if v3 == 0 then goto L475990;
  #L47597a.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47597e.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L475984.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475988.  call `onError`(v3, v5) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47598e.  goto L475996;
  #L475990.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L475996.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47591c.  v0:= 9223372036854775807L;
  #L475926.  call temp:= `compareAndSet`(v2, v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L47592c.  v3:= temp;
  #L47592e.  if v3 == 0 then goto L475950;
  #L475932.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475936.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47593c.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475940.  v4:= new `java.util.concurrent.TimeoutException`;
  #L475944.  call `<init>`(v4) @signature `Ljava/util/concurrent/TimeoutException;.<init>:()V` @kind direct;
  #L47594a.  call `onError`(v3, v4) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L475950.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v3 @kind this, `io.reactivex.ObservableSource` v4 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.c:(Lio/reactivex/ObservableSource;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4759a8.  if v4 == 0 then goto L4759d0;
  #L4759ac.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$a`;
  #L4759b0.  v1:= 0L;
  #L4759b4.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$d;)V` @kind direct;
  #L4759ba.  v1:= v3.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4759be.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4759c4.  v1:= temp;
  #L4759c6.  if v1 == 0 then goto L4759d0;
  #L4759ca.  call `subscribe`(v4, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4759d0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475774.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475778.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47577e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475782.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475788.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47570c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475710.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L475716.  v0:= temp @kind object;
  #L475718.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L47571c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475722.  v0:= temp;
  #L475724.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47579c.  v0:= 9223372036854775807L;
  #L4757a6.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4757ac.  v2:= temp @kind wide;
  #L4757ae.  v4:= lcmp(v2, v0);
  #L4757b2.  if v4 == 0 then goto L4757ca;
  #L4757b6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4757ba.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L4757c0.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4757c4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4757ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4757dc.  v0:= 9223372036854775807L;
  #L4757e6.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4757ec.  v2:= temp @kind wide;
  #L4757ee.  v4:= lcmp(v2, v0);
  #L4757f2.  if v4 == 0 then goto L47580c;
  #L4757f6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4757fa.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L475800.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475804.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47580a.  goto L475812;
  #L47580c.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L475812.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L475824.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47582a.  v0:= temp @kind wide;
  #L47582c.  v2:= 9223372036854775807L;
  #L475836.  v4:= lcmp(v0, v2);
  #L47583a.  if v4 == 0 then goto L4758e2;
  #L47583e.  v4:= 1L;
  #L475842.  v4:= v4 + v0 @kind long;
  #L475844.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L47584a.  v0:= temp;
  #L47584c.  if v0 != 0 then goto L475852;
  #L475850.  goto L4758e2;
  #L475852.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L475856.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47585c.  v0:= temp @kind object;
  #L47585e.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L475862.  if v0 == 0 then goto L47586c;
  #L475866.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47586c.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L475870.  call `onNext`(v0, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L475876.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47587a.  call temp:= `apply`(v0, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L475880.  v7:= temp @kind object;
  #L475882.  v0:= "The itemTimeoutIndicator returned a null ObservableSource." @kind object;
  #L475886.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47588c.  v7:= temp @kind object;
  #L47588e.  v7:= (`io.reactivex.ObservableSource`) v7 @kind object;
  #L475892.  v0:= new `io.reactivex.internal.operators.observable.ObservableTimeout$a`;
  #L475896.  call `<init>`(v0, v4, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$a;.<init>:(JLio/reactivex/internal/operators/observable/ObservableTimeout$d;)V` @kind direct;
  #L47589c.  v1:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.c` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4758a0.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4758a6.  v1:= temp;
  #L4758a8.  if v1 == 0 then goto L4758b2;
  #L4758ac.  call `subscribe`(v7, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L4758b2.  return @kind void;
  #L4758b4.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4758b6.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4758bc.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4758c0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4758c6.  v0:= temp @kind object;
  #L4758c8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4758cc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4758d2.  call temp:= `getAndSet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4758d8.  v0:= v6.`io.reactivex.internal.operators.observable.ObservableTimeout$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4758dc.  call `onError`(v0, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4758e2.  return @kind void;
  catch `java.lang.Throwable` @[L475876..L475892] goto L4758b4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTimeout$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTimeout$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475900.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTimeout$c.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475904.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L47590a.  return @kind void;
}
