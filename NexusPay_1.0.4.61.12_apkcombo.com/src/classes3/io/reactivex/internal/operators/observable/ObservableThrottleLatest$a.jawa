record `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.f` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L474e90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L474e96.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L474e9a.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` := v2 @kind wide;
  #L474e9e.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L474ea2.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L474ea6.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` := v6 @kind boolean;
  #L474eaa.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L474eae.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L474eb4.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L474eb8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v8 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L474f10.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L474f16.  v0:= temp;
  #L474f18.  if v0 == 0 then goto L474f1e;
  #L474f1c.  return @kind void;
  #L474f1e.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L474f22.  v1:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L474f26.  v2:= 1I;
  #L474f28.  v3:= 1I;
  #L474f2a.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L474f2e.  v5:= 0I;
  #L474f30.  if v4 == 0 then goto L474f3c;
  #L474f34.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L474f3a.  return @kind void;
  #L474f3c.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` @kind boolean;
  #L474f40.  if v4 == 0 then goto L474f68;
  #L474f44.  v6:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L474f48.  if v6 == 0 then goto L474f68;
  #L474f4c.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L474f52.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` @kind object;
  #L474f56.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L474f5c.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L474f60.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474f66.  return @kind void;
  #L474f68.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L474f6e.  v6:= temp @kind object;
  #L474f70.  v7:= 0I;
  #L474f72.  if v6 != 0 then goto L474f7a;
  #L474f76.  v6:= 1I;
  #L474f78.  goto L474f7c;
  #L474f7a.  v6:= 0I;
  #L474f7c.  if v4 == 0 then goto L474fac;
  #L474f80.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L474f86.  v0:= temp @kind object;
  #L474f88.  if v6 != 0 then goto L474f9a;
  #L474f8c.  v2:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.e` @type ^`boolean` @kind boolean;
  #L474f90.  if v2 == 0 then goto L474f9a;
  #L474f94.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L474f9a.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474fa0.  v0:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L474fa4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474faa.  return @kind void;
  #L474fac.  if v6 == 0 then goto L474fc2;
  #L474fb0.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L474fb4.  if v4 == 0 then goto L474fd4;
  #L474fb8.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v7 @kind boolean;
  #L474fbc.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L474fc0.  goto L474fd4;
  #L474fc2.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` @kind boolean;
  #L474fc6.  if v4 == 0 then goto L474fe4;
  #L474fca.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` @kind boolean;
  #L474fce.  if v4 == 0 then goto L474fd4;
  #L474fd2.  goto L474fe4;
  #L474fd4.  v3:= -v3 @kind int;
  #L474fd6.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L474fdc.  v3:= temp;
  #L474fde.  if v3 != 0 then goto L474f2a;
  #L474fe2.  return @kind void;
  #L474fe4.  call temp:= `getAndSet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L474fea.  v4:= temp @kind object;
  #L474fec.  call `onNext`(v1, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L474ff2.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v7 @kind boolean;
  #L474ff6.  v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L474ffa.  v4:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L474ffe.  v5:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.b` @type ^`long` @kind wide;
  #L475002.  v7:= v8.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L475006.  call temp:= `schedule`(v4, v8, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L47500c.  goto L474f2a;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L474ecc.  v0:= 1I;
  #L474ece.  v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L474ed2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L474ed6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474edc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L474ee0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L474ee6.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L474eec.  v0:= temp;
  #L474eee.  if v0 != 0 then goto L474efe;
  #L474ef2.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L474ef6.  v1:= 0I;
  #L474ef8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L474efe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474e78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.j` @type ^`boolean` @kind boolean;
  #L474e7c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475020.  v0:= 1I;
  #L475022.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v0 @kind boolean;
  #L475026.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L47502c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L475040.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.i` @type ^`java.lang.Throwable` := v1 @kind object;
  #L475044.  v1:= 1I;
  #L475046.  v0.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.h` @type ^`boolean` := v1 @kind boolean;
  #L47504a.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L475050.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475064.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L475068.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L47506e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L475074.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L475088.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47508c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L475092.  v0:= temp;
  #L475094.  if v0 == 0 then goto L4750a6;
  #L475098.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.g` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L47509c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4750a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4750a6.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4750b8.  v0:= 1I;
  #L4750ba.  v1.`io.reactivex.internal.operators.observable.ObservableThrottleLatest$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4750be.  call `a`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableThrottleLatest$a;.a:()V` @kind virtual;
  #L4750c4.  return @kind void;
}
