record `io.reactivex.internal.operators.observable.ObservableDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDetach$a.a` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4662ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4662b2.  v0.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4662b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4662c8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4662cc.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L4662d0.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L4662d4.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L4662da.  v1:= temp @kind object;
  #L4662dc.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L4662e0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4662e6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46628c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466290.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L466296.  v0:= temp;
  #L466298.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4662f8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4662fc.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L466300.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L466304.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L46630a.  v1:= temp @kind object;
  #L46630c.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L466310.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L466316.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L466328.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46632c.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L466330.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L466334.  call temp:= `asObserver`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asObserver:()Lio/reactivex/Observer;` @kind static;
  #L46633a.  v1:= temp @kind object;
  #L46633c.  v2.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L466340.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L466346.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466358.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46635c.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L466362.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDetach$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDetach$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466374.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466378.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46637e.  v0:= temp;
  #L466380.  if v0 == 0 then goto L466392;
  #L466384.  v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L466388.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDetach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L46638c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L466392.  return @kind void;
}
