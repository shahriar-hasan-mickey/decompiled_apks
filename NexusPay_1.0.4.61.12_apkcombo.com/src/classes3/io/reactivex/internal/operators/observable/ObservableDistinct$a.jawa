record `io.reactivex.internal.operators.observable.ObservableDistinct$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicFuseableObserver` @kind class {
  `java.util.Collection` `io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `java.util.Collection` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46644c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L466452.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L466456.  v0.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` := v3 @kind object;
  #L46645a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46646c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L466470.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L466476.  call `clear`(v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.clear:()V` @kind super;
  #L46647c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466490.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L466494.  if v0 != 0 then goto L4664b2;
  #L466498.  v0:= 1I;
  #L46649a.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L46649e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4664a2.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4664a8.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4664ac.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4664b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4664c4.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L4664c8.  if v0 == 0 then goto L4664d4;
  #L4664cc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4664d2.  goto L4664ee;
  #L4664d4.  v0:= 1I;
  #L4664d6.  v1.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` := v0 @kind boolean;
  #L4664da.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L4664de.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L4664e4.  v0:= v1.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L4664e8.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4664ee.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L466500.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.done` @type ^`boolean` @kind boolean;
  #L466504.  if v0 == 0 then goto L46650a;
  #L466508.  return @kind void;
  #L46650a.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.sourceMode` @type ^`int`;
  #L46650e.  if v0 != 0 then goto L466550;
  #L466512.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L466516.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46651c.  v0:= temp @kind object;
  #L46651e.  v1:= "The keySelector returned a null key" @kind object;
  #L466522.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L466528.  v0:= temp @kind object;
  #L46652a.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L46652e.  call temp:= `add`(v1, v0) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L466534.  v0:= temp;
  #L466536.  if v0 == 0 then goto L46655c;
  #L46653a.  v0:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L46653e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L466544.  goto L46655c;
  #L466546.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466548.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46654e.  return @kind void;
  #L466550.  v3:= v2.`io.reactivex.internal.observers.BasicFuseableObserver.downstream` @type ^`io.reactivex.Observer` @kind object;
  #L466554.  v0:= 0I;
  #L466556.  call `onNext`(v3, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46655c.  return @kind void;
  catch `java.lang.Throwable` @[L466512..L466536] goto L466546;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L466400.  v0:= v4.`io.reactivex.internal.observers.BasicFuseableObserver.qd` @type ^`io.reactivex.internal.fuseable.QueueDisposable` @kind object;
  #L466404.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L46640a.  v0:= temp @kind object;
  #L46640c.  if v0 == 0 then goto L466438;
  #L466410.  v1:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$a.a` @type ^`java.util.Collection` @kind object;
  #L466414.  v2:= v4.`io.reactivex.internal.operators.observable.ObservableDistinct$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L466418.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46641e.  v2:= temp @kind object;
  #L466420.  v3:= "The keySelector returned a null key" @kind object;
  #L466424.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46642a.  v2:= temp @kind object;
  #L46642c.  call temp:= `add`(v1, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L466432.  v1:= temp;
  #L466434.  if v1 == 0 then goto L466400;
  #L466438.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.observable.ObservableDistinct$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/observable/ObservableDistinct$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4663e4.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/observers/BasicFuseableObserver;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4663ea.  v1:= temp;
  #L4663ec.  return v1;
}
