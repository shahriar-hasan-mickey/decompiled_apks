record `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `int` v8 , `boolean` v9 ) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.<init>:(Lio/reactivex/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L474364.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L47436a.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L47436e.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.b` @type ^`long` := v2 @kind wide;
  #L474372.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.c` @type ^`long` := v4 @kind wide;
  #L474376.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L47437a.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L47437e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L474382.  call `<init>`(v1, v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L474388.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L47438c.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.g` @type ^`boolean` := v9 @kind boolean;
  #L474390.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4743e8.  v0:= 0I;
  #L4743ea.  v1:= 1I;
  #L4743ec.  call temp:= `compareAndSet`(v11, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4743f2.  v2:= temp;
  #L4743f4.  if v2 != 0 then goto L4743fa;
  #L4743f8.  return @kind void;
  #L4743fa.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4743fe.  v3:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L474402.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L474406.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L47440a.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L47440e.  call temp:= `now`(v5, v6) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L474414.  v5:= temp @kind wide;
  #L474416.  v7:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L47441a.  v5:= v5 - v7 @kind long;
  #L47441c.  v7:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L474420.  if v7 == 0 then goto L47442c;
  #L474424.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L47442a.  return @kind void;
  #L47442c.  if v4 != 0 then goto L474446;
  #L474430.  v7:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L474434.  if v7 == 0 then goto L474446;
  #L474438.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L47443e.  call `onError`(v2, v7) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L474444.  return @kind void;
  #L474446.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47444c.  v7:= temp @kind object;
  #L47444e.  if v7 != 0 then goto L474456;
  #L474452.  v8:= 1I;
  #L474454.  goto L474458;
  #L474456.  v8:= 0I;
  #L474458.  if v8 == 0 then goto L474474;
  #L47445c.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.j` @type ^`java.lang.Throwable` @kind object;
  #L474460.  if v0 == 0 then goto L47446c;
  #L474464.  call `onError`(v2, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47446a.  goto L474472;
  #L47446c.  call `onComplete`(v2) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L474472.  return @kind void;
  #L474474.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47447a.  v8:= temp @kind object;
  #L47447c.  v7:= (`java.lang.Long`) v7 @kind object;
  #L474480.  call temp:= `longValue`(v7) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L474486.  v9:= temp @kind wide;
  #L474488.  v7:= lcmp(v9, v5);
  #L47448c.  if v7 >= 0 then goto L474492;
  #L474490.  goto L47441c;
  #L474492.  call `onNext`(v2, v8) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L474498.  goto L47441c;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4743a4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L4743a8.  if v0 != 0 then goto L4743d4;
  #L4743ac.  v0:= 1I;
  #L4743ae.  v2.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4743b2.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4743b6.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4743bc.  v1:= 0I;
  #L4743be.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4743c4.  v0:= temp;
  #L4743c6.  if v0 == 0 then goto L4743d4;
  #L4743ca.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4743ce.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4743d4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47434c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L474350.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L4744ac.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.a:()V` @kind virtual;
  #L4744b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4744c4.  v0.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.j` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4744c8.  call `a`(v0) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.a:()V` @kind virtual;
  #L4744ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L4744e0.  v0:= v13.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4744e4.  v1:= v13.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L4744e8.  v2:= v13.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4744ec.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4744f2.  v1:= temp @kind wide;
  #L4744f4.  v3:= v13.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L4744f8.  v5:= v13.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.b` @type ^`long` @kind wide;
  #L4744fc.  v7:= 1I;
  #L4744fe.  v8:= 9223372036854775807L;
  #L474508.  v10:= lcmp(v5, v8);
  #L47450c.  if v10 != 0 then goto L474514;
  #L474510.  v8:= 1I;
  #L474512.  goto L474516;
  #L474514.  v8:= 0I;
  #L474516.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47451c.  v9:= temp @kind object;
  #L47451e.  call temp:= `offer`(v0, v9, v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L474524.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L47452a.  v14:= temp;
  #L47452c.  if v14 != 0 then goto L474576;
  #L474530.  call temp:= `peek`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L474536.  v14:= temp @kind object;
  #L474538.  v14:= (`java.lang.Long`) v14 @kind object;
  #L47453c.  call temp:= `longValue`(v14) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L474542.  v9:= temp @kind wide;
  #L474544.  v11:= v1 - v3 @kind long;
  #L474548.  v14:= lcmp(v9, v11);
  #L47454c.  if v14 <= 0 then goto L474568;
  #L474550.  if v8 != 0 then goto L474576;
  #L474554.  call temp:= `size`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L47455a.  v14:= temp;
  #L47455c.  v14:= v14 ^> v7 @kind int;
  #L47455e.  v9:= (`long`) v14 @kind i2l;
  #L474560.  v14:= lcmp(v9, v5);
  #L474564.  if v14 <= 0 then goto L474576;
  #L474568.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47456e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L474574.  goto L474524;
  #L474576.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableTakeLastTimed$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L474588.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.h` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47458c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L474592.  v0:= temp;
  #L474594.  if v0 == 0 then goto L4745a6;
  #L474598.  v1.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.h` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L47459c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableTakeLastTimed$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4745a0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4745a6.  return @kind void;
}
