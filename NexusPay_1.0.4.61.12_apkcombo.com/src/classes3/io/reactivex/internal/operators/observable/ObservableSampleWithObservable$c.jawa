record `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @AccessFlag FINAL;
  `io.reactivex.ObservableSource` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.Observer` v2 @kind object, `io.reactivex.ObservableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/ObservableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4717a8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4717ae.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4717b2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4717b8.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4717bc.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` := v2 @kind object;
  #L4717c0.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.ObservableSource` := v3 @kind object;
  #L4717c4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4717d8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4717dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4717e2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L4717e8.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L471824.  v0:= 0I;
  #L471826.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47182c.  v0:= temp @kind object;
  #L47182e.  if v0 == 0 then goto L47183c;
  #L471832.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L471836.  call `onNext`(v1, v0) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47183c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.d:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471850.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L471854.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47185a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L47185e.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L471864.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4717fc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471800.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L471806.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L47180a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L471810.  return @kind void;
}
procedure `void` `e`() @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.e:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `f`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.f:(Lio/reactivex/disposables/Disposable;)Z` @AccessFlag  {
    temp;
    v0;

  #L471788.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47178c.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L471792.  v2:= temp;
  #L471794.  return v2;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47175c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L471760.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L471766.  v0:= temp @kind object;
  #L471768.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L47176c.  if v0 != v1 then goto L471774;
  #L471770.  v0:= 1I;
  #L471772.  goto L471776;
  #L471774.  v0:= 0I;
  #L471776.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L471878.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47187c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L471882.  call `b`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.b:()V` @kind virtual;
  #L471888.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47189c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4718a0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4718a6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4718aa.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4718b0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4718c4.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L4718ca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4718dc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4718e0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4718e6.  v0:= temp;
  #L4718e8.  if v0 == 0 then goto L47191e;
  #L4718ec.  v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L4718f0.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L4718f4.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4718fa.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4718fe.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L471904.  v2:= temp @kind object;
  #L471906.  if v2 != 0 then goto L47191e;
  #L47190a.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSampleWithObservable$c.b` @type ^`io.reactivex.ObservableSource` @kind object;
  #L47190e.  v0:= new `io.reactivex.internal.operators.observable.ObservableSampleWithObservable$d`;
  #L471912.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$d;.<init>:(Lio/reactivex/internal/operators/observable/ObservableSampleWithObservable$c;)V` @kind direct;
  #L471918.  call `subscribe`(v2, v0) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L47191e.  return @kind void;
}
