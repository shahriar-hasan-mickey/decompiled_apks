record `io.reactivex.internal.operators.observable.ObservableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.Observer` @kind interface {
  `io.reactivex.internal.operators.observable.ObservableAmb$a` `io.reactivex.internal.operators.observable.ObservableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableAmb$b.b` @AccessFlag FINAL;
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableAmb$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.observable.ObservableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.internal.operators.observable.ObservableAmb$a` v1 @kind object, `int` v2 , `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.<init>:(Lio/reactivex/internal/operators/observable/ObservableAmb$a;ILio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L460480.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L460486.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` := v1 @kind object;
  #L46048a.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int` := v2;
  #L46048e.  v0.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` := v3 @kind object;
  #L460492.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L4604a4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4604aa.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4604bc.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4604c0.  if v0 == 0 then goto L4604d0;
  #L4604c4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L4604c8.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4604ce.  goto L4604f4;
  #L4604d0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L4604d4.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L4604d8.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L4604de.  v0:= temp;
  #L4604e0.  if v0 == 0 then goto L4604f4;
  #L4604e4.  v0:= 1I;
  #L4604e6.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4604ea.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L4604ee.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4604f4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L460508.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L46050c.  if v0 == 0 then goto L46051c;
  #L460510.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L460514.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46051a.  goto L460548;
  #L46051c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L460520.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L460524.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L46052a.  v0:= temp;
  #L46052c.  if v0 == 0 then goto L460542;
  #L460530.  v0:= 1I;
  #L460532.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L460536.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L46053a.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L460540.  goto L460548;
  #L460542.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L460548.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46055c.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` @kind boolean;
  #L460560.  if v0 == 0 then goto L460570;
  #L460564.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L460568.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L46056e.  goto L4605a8;
  #L460570.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.a` @type ^`io.reactivex.internal.operators.observable.ObservableAmb$a` @kind object;
  #L460574.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.b` @type ^`int`;
  #L460578.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$a;.b:(I)Z` @kind virtual;
  #L46057e.  v0:= temp;
  #L460580.  if v0 == 0 then goto L460596;
  #L460584.  v0:= 1I;
  #L460586.  v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L46058a.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableAmb$b.c` @type ^`io.reactivex.Observer` @kind object;
  #L46058e.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L460594.  goto L4605a8;
  #L460596.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L46059c.  v3:= temp @kind object;
  #L46059e.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L4605a2.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4605a8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableAmb$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableAmb$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4605bc.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4605c2.  return @kind void;
}
