record `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L46ee2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L46ee32.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L46ee36.  v0.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L46ee3a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ee4c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46ee50.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46ee56.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ee0c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46ee10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L46ee16.  v0:= temp;
  #L46ee18.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46ee68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L46ee6c.  if v0 == 0 then goto L46ee72;
  #L46ee70.  return @kind void;
  #L46ee72.  v0:= 1I;
  #L46ee74.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L46ee78.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L46ee7c.  v1:= 0I;
  #L46ee7e.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L46ee82.  if v0 == 0 then goto L46ee92;
  #L46ee86.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L46ee8a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L46ee90.  goto L46ee9c;
  #L46ee92.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L46ee96.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L46ee9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46eeb0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L46eeb4.  if v0 == 0 then goto L46eec0;
  #L46eeb8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L46eebe.  return @kind void;
  #L46eec0.  v0:= 1I;
  #L46eec2.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L46eec6.  v0:= 0I;
  #L46eec8.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L46eecc.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L46eed0.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L46eed6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L46eee8.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.c` @type ^`boolean` @kind boolean;
  #L46eeec.  if v0 != 0 then goto L46ef34;
  #L46eef0.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L46eef4.  if v0 != 0 then goto L46eefe;
  #L46eef8.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L46eefc.  goto L46ef34;
  #L46eefe.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L46ef02.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L46ef08.  v3:= temp @kind object;
  #L46ef0a.  v0:= "The reducer returned a null value" @kind object;
  #L46ef0e.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L46ef14.  v3:= temp @kind object;
  #L46ef16.  v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L46ef1a.  goto L46ef34;
  #L46ef1c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L46ef1e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L46ef24.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46ef28.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L46ef2e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L46ef34.  return @kind void;
  catch `java.lang.Throwable` @[L46eefe..L46ef1a] goto L46ef1c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableReduceMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L46ef54.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L46ef58.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L46ef5e.  v0:= temp;
  #L46ef60.  if v0 == 0 then goto L46ef72;
  #L46ef64.  v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.e` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L46ef68.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L46ef6c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46ef72.  return @kind void;
}
