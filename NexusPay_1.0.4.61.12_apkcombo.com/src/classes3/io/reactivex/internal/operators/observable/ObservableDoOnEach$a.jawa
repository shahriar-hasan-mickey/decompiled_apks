record `io.reactivex.internal.operators.observable.ObservableDoOnEach$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.d` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.e` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L466acc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L466ad2.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L466ad6.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L466ada.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L466ade.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L466ae2.  v0.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.e` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L466ae6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466af8.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466afc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L466b02.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466aac.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466ab0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L466ab6.  v0:= temp;
  #L466ab8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466b14.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @type ^`boolean` @kind boolean;
  #L466b18.  if v0 == 0 then goto L466b1e;
  #L466b1c.  return @kind void;
  #L466b1e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L466b22.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L466b28.  v0:= 1I;
  #L466b2a.  v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @type ^`boolean` := v0 @kind boolean;
  #L466b2e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L466b32.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L466b38.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.e` @type ^`io.reactivex.functions.Action` @kind object;
  #L466b3c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L466b42.  goto L466b52;
  #L466b44.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466b46.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L466b4c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L466b52.  return @kind void;
  #L466b54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466b56.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L466b5c.  call `onError`(v1, v0) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L466b62.  return @kind void;
  catch `java.lang.Throwable` @[L466b1e..L466b28] goto L466b54;
  catch `java.lang.Throwable` @[L466b38..L466b42] goto L466b44;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L466b8c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @type ^`boolean` @kind boolean;
  #L466b90.  if v0 == 0 then goto L466b9c;
  #L466b94.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L466b9a.  return @kind void;
  #L466b9c.  v0:= 1I;
  #L466b9e.  v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @type ^`boolean` := v0 @kind boolean;
  #L466ba2.  v1:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L466ba6.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L466bac.  goto L466bd2;
  #L466bae.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466bb0.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L466bb6.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L466bba.  v3:= 2I;
  #L466bbc.  v3:= new `java.lang.Throwable`[v3];
  #L466bc0.  v4:= 0I;
  #L466bc2.  v3[v4]:= v6 @kind object;
  #L466bc6.  v3[v0]:= v1 @kind object;
  #L466bca.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L466bd0.  v6:= v2 @kind object;
  #L466bd2.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L466bd6.  call `onError`(v0, v6) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L466bdc.  v6:= v5.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.e` @type ^`io.reactivex.functions.Action` @kind object;
  #L466be0.  call `run`(v6) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L466be6.  goto L466bf6;
  #L466be8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466bea.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L466bf0.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L466bf6.  return @kind void;
  catch `java.lang.Throwable` @[L466ba2..L466bac] goto L466bae;
  catch `java.lang.Throwable` @[L466bdc..L466be6] goto L466be8;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466c20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.g` @type ^`boolean` @kind boolean;
  #L466c24.  if v0 == 0 then goto L466c2a;
  #L466c28.  return @kind void;
  #L466c2a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L466c2e.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L466c34.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L466c38.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L466c3e.  return @kind void;
  #L466c40.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L466c42.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L466c48.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466c4c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L466c52.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L466c58.  return @kind void;
  catch `java.lang.Throwable` @[L466c2a..L466c34] goto L466c40;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableDoOnEach$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableDoOnEach$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466c78.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466c7c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L466c82.  v0:= temp;
  #L466c84.  if v0 == 0 then goto L466c96;
  #L466c88.  v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L466c8c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableDoOnEach$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L466c90.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L466c96.  return @kind void;
}
