record `io.reactivex.internal.operators.observable.ObservableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.observable.a` @kind class {
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableWindowTimed` v0 @kind this, `io.reactivex.ObservableSource` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed;.<init>:(Lio/reactivex/ObservableSource;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L478b64.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/a;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L478b6a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` := v2 @kind wide;
  #L478b6e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @type ^`long` := v4 @kind wide;
  #L478b72.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L478b76.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L478b7a.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @type ^`long` := v8 @kind wide;
  #L478b7e.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int` := v10;
  #L478b82.  v0.`io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @type ^`boolean` := v11 @kind boolean;
  #L478b86.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.observable.ObservableWindowTimed` v11 @kind this, `io.reactivex.Observer` v12 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L478b98.  v1:= new `io.reactivex.observers.SerializedObserver`;
  #L478b9c.  call `<init>`(v1, v12) @signature `Lio/reactivex/observers/SerializedObserver;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L478ba2.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` @kind wide;
  #L478ba6.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.b` @type ^`long` @kind wide;
  #L478baa.  v12:= lcmp(v2, v4);
  #L478bae.  if v12 != 0 then goto L478c18;
  #L478bb2.  v7:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.e` @type ^`long` @kind wide;
  #L478bb6.  v4:= 9223372036854775807L;
  #L478bc0.  v12:= lcmp(v7, v4);
  #L478bc4.  if v12 != 0 then goto L478bf0;
  #L478bc8.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L478bcc.  v7:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$b`;
  #L478bd0.  v2:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.a` @type ^`long` @kind wide;
  #L478bd4.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478bd8.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L478bdc.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L478be0.  v0:= v7 @kind object;
  #L478be2.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$b;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L478be8.  call `subscribe`(v12, v7) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L478bee.  return @kind void;
  #L478bf0.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L478bf4.  v10:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$a`;
  #L478bf8.  v4:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478bfc.  v5:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L478c00.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L478c04.  v9:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.g` @type ^`boolean` @kind boolean;
  #L478c08.  v0:= v10 @kind object;
  #L478c0a.  call `<init>`(v0, v1, v2, v4, v5, v6, v7, v9) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$a;.<init>:(Lio/reactivex/Observer;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @kind direct;
  #L478c10.  call `subscribe`(v12, v10) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L478c16.  return @kind void;
  #L478c18.  v12:= v11.`io.reactivex.internal.operators.observable.a.source` @type ^`io.reactivex.ObservableSource` @kind object;
  #L478c1c.  v9:= new `io.reactivex.internal.operators.observable.ObservableWindowTimed$c`;
  #L478c20.  v6:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L478c24.  v0:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L478c28.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L478c2e.  v7:= temp @kind object;
  #L478c30.  v8:= v11.`io.reactivex.internal.operators.observable.ObservableWindowTimed.f` @type ^`int`;
  #L478c34.  v0:= v9 @kind object;
  #L478c36.  call `<init>`(v0, v1, v2, v4, v6, v7, v8) @signature `Lio/reactivex/internal/operators/observable/ObservableWindowTimed$c;.<init>:(Lio/reactivex/Observer;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @kind direct;
  #L478c3c.  call `subscribe`(v12, v9) @signature `Lio/reactivex/ObservableSource;.subscribe:(Lio/reactivex/Observer;)V` @kind interface;
  #L478c42.  return @kind void;
}
