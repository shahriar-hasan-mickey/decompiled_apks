record `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L472a20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L472a26.  v0.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L472a2a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472a3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472a40.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472a46.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472a00.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472a04.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L472a0a.  v0:= temp;
  #L472a0c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L472a58.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L472a5c.  if v0 == 0 then goto L472a62;
  #L472a60.  return @kind void;
  #L472a62.  v0:= 1I;
  #L472a64.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L472a68.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L472a6c.  v1:= 0I;
  #L472a6e.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L472a72.  if v0 != 0 then goto L472a82;
  #L472a76.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L472a7a.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L472a80.  goto L472a8c;
  #L472a82.  v1:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L472a86.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L472a8c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472aa0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L472aa4.  if v0 == 0 then goto L472ab0;
  #L472aa8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L472aae.  return @kind void;
  #L472ab0.  v0:= 1I;
  #L472ab2.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v0 @kind boolean;
  #L472ab6.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L472aba.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472ac0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L472ad4.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` @kind boolean;
  #L472ad8.  if v0 == 0 then goto L472ade;
  #L472adc.  return @kind void;
  #L472ade.  v0:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L472ae2.  if v0 == 0 then goto L472b10;
  #L472ae6.  v3:= 1I;
  #L472ae8.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.d` @type ^`boolean` := v3 @kind boolean;
  #L472aec.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472af0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L472af6.  v3:= v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L472afa.  v0:= new `java.lang.IllegalArgumentException`;
  #L472afe.  v1:= "Sequence contains more than one element!" @kind object;
  #L472b02.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L472b08.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L472b0e.  return @kind void;
  #L472b10.  v2.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L472b14.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableSingleMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L472b28.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L472b2c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L472b32.  v0:= temp;
  #L472b34.  if v0 == 0 then goto L472b46;
  #L472b38.  v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L472b3c.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L472b40.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L472b46.  return @kind void;
}
