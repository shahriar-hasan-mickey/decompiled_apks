record `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @AccessFlag ;
  `long` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L466f00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L466f06.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L466f0a.  v0.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @type ^`long` := v2 @kind wide;
  #L466f0e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466f20.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466f24.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L466f2a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466ee0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466ee4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L466eea.  v0:= temp;
  #L466eec.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466f3c.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L466f40.  if v0 != 0 then goto L466f54;
  #L466f44.  v0:= 1I;
  #L466f46.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L466f4a.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L466f4e.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L466f54.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466f68.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L466f6c.  if v0 == 0 then goto L466f78;
  #L466f70.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L466f76.  return @kind void;
  #L466f78.  v0:= 1I;
  #L466f7a.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L466f7e.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L466f82.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L466f88.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L466f9c.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` @kind boolean;
  #L466fa0.  if v0 == 0 then goto L466fa6;
  #L466fa4.  return @kind void;
  #L466fa6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @type ^`long` @kind wide;
  #L466faa.  v2:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.b` @type ^`long` @kind wide;
  #L466fae.  v4:= lcmp(v0, v2);
  #L466fb2.  if v4 != 0 then goto L466fd2;
  #L466fb6.  v0:= 1I;
  #L466fb8.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L466fbc.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466fc0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L466fc6.  v0:= v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L466fca.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L466fd0.  return @kind void;
  #L466fd2.  v2:= 1L;
  #L466fd6.  v0:= v0 + v2 @kind long;
  #L466fd8.  v5.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.d` @type ^`long` := v0 @kind wide;
  #L466fdc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/observable/ObservableElementAtMaybe$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L466ff0.  v0:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L466ff4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L466ffa.  v0:= temp;
  #L466ffc.  if v0 == 0 then goto L46700e;
  #L467000.  v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L467004.  v2:= v1.`io.reactivex.internal.operators.observable.ObservableElementAtMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L467008.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L46700e.  return @kind void;
}
