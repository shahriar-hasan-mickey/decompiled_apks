record `io.reactivex.internal.operators.completable.CompletableAndThenCompletable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable.a` @AccessFlag FINAL;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable` v0 @kind this, `io.reactivex.CompletableSource` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable;.<init>:(Lio/reactivex/CompletableSource;Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c5cc.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L42c5d2.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable.a` @type ^`io.reactivex.CompletableSource` := v1 @kind object;
  #L42c5d6.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable.b` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L42c5da.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable` v3 @kind this, `io.reactivex.CompletableObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L42c5ec.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable.a` @type ^`io.reactivex.CompletableSource` @kind object;
  #L42c5f0.  v1:= new `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b`;
  #L42c5f4.  v2:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable.b` @type ^`io.reactivex.CompletableSource` @kind object;
  #L42c5f8.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/CompletableSource;)V` @kind direct;
  #L42c5fe.  call `subscribe`(v0, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42c604.  return @kind void;
}
