record `io.reactivex.internal.operators.completable.CompletableToObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicQueueDisposable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.completable.CompletableToObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.completable.CompletableToObservable$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.<init>:(Lio/reactivex/Observer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42fa64.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicQueueDisposable;.<init>:()V` @kind direct;
  #L42fa6a.  v0.`io.reactivex.internal.operators.completable.CompletableToObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L42fa6e.  return @kind void;
}
procedure `java.lang.Void` `a`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.a:()Ljava/lang/Void;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa50.  v0:= 0I;
  #L42fa52.  return v0 @kind object;
}
procedure `void` `clear`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L42fa80.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa94.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42fa98.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42fa9e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f9e8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42f9ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42f9f2.  v0:= temp;
  #L42f9f4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fa08.  v0:= 1I;
  #L42fa0a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fab0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42fab4.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L42faba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42facc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42fad0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42fad6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42fae8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L42faec.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42faf2.  v0:= temp;
  #L42faf4.  if v0 == 0 then goto L42fb06;
  #L42faf8.  v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.b` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L42fafc.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableToObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L42fb00.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42fb06.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L42fa34.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.a:()Ljava/lang/Void;` @kind virtual;
  #L42fa3a.  v0:= temp @kind object;
  #L42fa3c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.completable.CompletableToObservable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/completable/CompletableToObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L42fa1c.  v1:= v1 ^& 2;
  #L42fa20.  return v1;
}
