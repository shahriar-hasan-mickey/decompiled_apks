record `io.reactivex.internal.operators.completable.CompletableAmb` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `io.reactivex.CompletableSource`[] `io.reactivex.internal.operators.completable.CompletableAmb.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Iterable` `io.reactivex.internal.operators.completable.CompletableAmb.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableAmb` v0 @kind this, `io.reactivex.CompletableSource`[] v1 @kind object, `java.lang.Iterable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAmb;.<init>:([Lio/reactivex/CompletableSource;Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42c33c.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L42c342.  v0.`io.reactivex.internal.operators.completable.CompletableAmb.a` @type ^`io.reactivex.CompletableSource`[] := v1 @kind object;
  #L42c346.  v0.`io.reactivex.internal.operators.completable.CompletableAmb.b` @type ^`java.lang.Iterable` := v2 @kind object;
  #L42c34a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableAmb` v9 @kind this, `io.reactivex.CompletableObserver` v10 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAmb;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L42c35c.  v0:= v9.`io.reactivex.internal.operators.completable.CompletableAmb.a` @type ^`io.reactivex.CompletableSource`[] @kind object;
  #L42c360.  v1:= "One of the sources is null" @kind object;
  #L42c364.  v2:= 0I;
  #L42c366.  if v0 != 0 then goto L42c3e2;
  #L42c36a.  v0:= 8I;
  #L42c36e.  v0:= new `io.reactivex.CompletableSource`[v0];
  #L42c372.  v3:= v9.`io.reactivex.internal.operators.completable.CompletableAmb.b` @type ^`java.lang.Iterable` @kind object;
  #L42c376.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L42c37c.  v3:= temp @kind object;
  #L42c37e.  v4:= 0I;
  #L42c380.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L42c386.  v5:= temp;
  #L42c388.  if v5 == 0 then goto L42c3e4;
  #L42c38c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L42c392.  v5:= temp @kind object;
  #L42c394.  v5:= (`io.reactivex.CompletableSource`) v5 @kind object;
  #L42c398.  if v5 != 0 then goto L42c3ae;
  #L42c39c.  v0:= new `java.lang.NullPointerException`;
  #L42c3a0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c3a6.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/CompletableObserver;)V` @kind static;
  #L42c3ac.  return @kind void;
  #L42c3ae.  v6:= length @variable v0;
  #L42c3b0.  if v4 != v6 then goto L42c3c6;
  #L42c3b4.  v6:= v4 ^> 2;
  #L42c3b8.  v6:= v6 + v4 @kind int;
  #L42c3ba.  v6:= new `io.reactivex.CompletableSource`[v6];
  #L42c3be.  call `arraycopy`(v0, v2, v6, v2, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c3c4.  v0:= v6 @kind object;
  #L42c3c6.  v6:= v4 + 1;
  #L42c3ca.  v0[v4]:= v5 @kind object;
  #L42c3ce.  v4:= v6;
  #L42c3d0.  goto L42c380;
  #L42c3d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42c3d4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42c3da.  call `error`(v0, v10) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/CompletableObserver;)V` @kind static;
  #L42c3e0.  return @kind void;
  #L42c3e2.  v4:= length @variable v0;
  #L42c3e4.  v3:= new `io.reactivex.disposables.CompositeDisposable`;
  #L42c3e8.  call `<init>`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L42c3ee.  call `onSubscribe`(v10, v3) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42c3f4.  v5:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42c3f8.  call `<init>`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42c3fe.  v6:= 0I;
  #L42c400.  if v6 >= v4 then goto L42c45e;
  #L42c404.  v7:= v0[v6] @kind object;
  #L42c408.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L42c40e.  v8:= temp;
  #L42c410.  if v8 == 0 then goto L42c416;
  #L42c414.  return @kind void;
  #L42c416.  if v7 != 0 then goto L42c448;
  #L42c41a.  v0:= new `java.lang.NullPointerException`;
  #L42c41e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42c424.  v1:= 1I;
  #L42c426.  call temp:= `compareAndSet`(v5, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42c42c.  v1:= temp;
  #L42c42e.  if v1 == 0 then goto L42c440;
  #L42c432.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42c438.  call `onError`(v10, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c43e.  goto L42c446;
  #L42c440.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42c446.  return @kind void;
  #L42c448.  v8:= new `io.reactivex.internal.operators.completable.CompletableAmb$a`;
  #L42c44c.  call `<init>`(v8, v5, v3, v10) @signature `Lio/reactivex/internal/operators/completable/CompletableAmb$a;.<init>:(Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L42c452.  call `subscribe`(v7, v8) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42c458.  v6:= v6 + 1;
  #L42c45c.  goto L42c400;
  #L42c45e.  if v4 != 0 then goto L42c468;
  #L42c462.  call `onComplete`(v10) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42c468.  return @kind void;
  catch `java.lang.Throwable` @[L42c372..L42c3ce] goto L42c3d2;
}
