record `io.reactivex.internal.operators.completable.CompletableConcatArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcatArray$a.a` @AccessFlag FINAL;
  `io.reactivex.CompletableSource`[] `io.reactivex.internal.operators.completable.CompletableConcatArray$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcatArray$a.c` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.completable.CompletableConcatArray$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcatArray$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.CompletableSource`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.<init>:(Lio/reactivex/CompletableObserver;[Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42cd00.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42cd06.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42cd0a.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.b` @type ^`io.reactivex.CompletableSource`[] := v2 @kind object;
  #L42cd0e.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L42cd12.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L42cd18.  v0.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L42cd1c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableConcatArray$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42cd30.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42cd34.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L42cd3a.  v0:= temp;
  #L42cd3c.  if v0 == 0 then goto L42cd42;
  #L42cd40.  return @kind void;
  #L42cd42.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42cd48.  v0:= temp;
  #L42cd4a.  if v0 == 0 then goto L42cd50;
  #L42cd4e.  return @kind void;
  #L42cd50.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.b` @type ^`io.reactivex.CompletableSource`[] @kind object;
  #L42cd54.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42cd58.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L42cd5e.  v1:= temp;
  #L42cd60.  if v1 == 0 then goto L42cd66;
  #L42cd64.  return @kind void;
  #L42cd66.  v1:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.c` @type ^`int`;
  #L42cd6a.  v2:= v1 + 1;
  #L42cd6e.  v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.c` @type ^`int` := v2;
  #L42cd72.  v2:= length @variable v0;
  #L42cd74.  if v1 != v2 then goto L42cd84;
  #L42cd78.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cd7c.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42cd82.  return @kind void;
  #L42cd84.  v1:= v0[v1] @kind object;
  #L42cd88.  call `subscribe`(v1, v3) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42cd8e.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42cd94.  v1:= temp;
  #L42cd96.  if v1 != 0 then goto L42cd54;
  #L42cd9a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcatArray$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L42cdac.  call `a`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.a:()V` @kind virtual;
  #L42cdb2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcatArray$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cdc4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cdc8.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cdce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcatArray$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcatArray$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cde0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcatArray$a.d` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L42cde4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42cdea.  return @kind void;
}
