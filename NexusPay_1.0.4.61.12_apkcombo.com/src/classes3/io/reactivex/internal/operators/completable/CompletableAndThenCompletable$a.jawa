record `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.CompletableObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c488.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L42c48e.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L42c492.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.b` @type ^`io.reactivex.CompletableObserver` := v2 @kind object;
  #L42c496.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4a8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.b` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c4ac.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42c4b2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4c4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.b` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c4c8.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c4ce.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4e0.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c4e4.  call temp:= `replace`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c4ea.  return @kind void;
}
