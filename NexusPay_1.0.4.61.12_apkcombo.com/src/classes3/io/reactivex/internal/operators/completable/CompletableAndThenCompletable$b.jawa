record `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.a` @AccessFlag FINAL;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c524.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42c52a.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42c52e.  v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.b` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L42c532.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42c544.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42c54a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c4fc.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c502.  v0:= temp @kind object;
  #L42c504.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42c508.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c50e.  v0:= temp;
  #L42c510.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42c55c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.b` @type ^`io.reactivex.CompletableSource` @kind object;
  #L42c560.  v1:= new `io.reactivex.internal.operators.completable.CompletableAndThenCompletable$a`;
  #L42c564.  v2:= v3.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c568.  call `<init>`(v1, v3, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L42c56e.  call `subscribe`(v0, v1) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42c574.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c588.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c58c.  call `onError`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c592.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableAndThenCompletable$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42c5a4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c5aa.  v1:= temp;
  #L42c5ac.  if v1 == 0 then goto L42c5ba;
  #L42c5b0.  v1:= v0.`io.reactivex.internal.operators.completable.CompletableAndThenCompletable$b.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c5b4.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42c5ba.  return @kind void;
}
