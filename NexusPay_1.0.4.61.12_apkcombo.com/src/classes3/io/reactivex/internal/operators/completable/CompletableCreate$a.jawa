record `io.reactivex.internal.operators.completable.CompletableCreate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableEmitter` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableCreate$a.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableCreate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.<init>:(Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42d148.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42d14e.  v0.`io.reactivex.internal.operators.completable.CompletableCreate$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42d152.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L42d164.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42d16a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d060.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d066.  v0:= temp @kind object;
  #L42d068.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d06c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d072.  v0:= temp;
  #L42d074.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d17c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d182.  v0:= temp @kind object;
  #L42d184.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42d188.  if v0 == v1 then goto L42d1c4;
  #L42d18c.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42d192.  v0:= temp @kind object;
  #L42d194.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d198.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42d19c.  if v0 == v1 then goto L42d1c4;
  #L42d1a0.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableCreate$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42d1a4.  call `onComplete`(v1) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42d1aa.  if v0 == 0 then goto L42d1c4;
  #L42d1ae.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d1b4.  goto L42d1c4;
  #L42d1b6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d1b8.  if v0 == 0 then goto L42d1c2;
  #L42d1bc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d1c2.  throw v1;
  #L42d1c4.  return @kind void;
  catch `java.lang.Throwable` @[L42d1a0..L42d1aa] goto L42d1b6;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d1e4.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42d1ea.  v0:= temp;
  #L42d1ec.  if v0 != 0 then goto L42d1f6;
  #L42d1f0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42d1f6.  return @kind void;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42d208.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L42d20c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L42d212.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L42d218.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42d22c.  call temp:= `set`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.set:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42d232.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42d104.  v0:= 2I;
  #L42d106.  v0:= new `java.lang.Object`[v0];
  #L42d10a.  v1:= constclass @type ^`io.reactivex.internal.operators.completable.CompletableCreate$a` @kind object;
  #L42d10e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L42d114.  v1:= temp @kind object;
  #L42d116.  v2:= 0I;
  #L42d118.  v0[v2]:= v1 @kind object;
  #L42d11c.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.toString:()Ljava/lang/String;` @kind super;
  #L42d122.  v1:= temp @kind object;
  #L42d124.  v2:= 1I;
  #L42d126.  v0[v2]:= v1 @kind object;
  #L42d12a.  v1:= "%s{%s}" @kind object;
  #L42d12e.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L42d134.  v0:= temp @kind object;
  #L42d136.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.completable.CompletableCreate$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCreate$a;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42d088.  if v3 != 0 then goto L42d09a;
  #L42d08c.  v3:= new `java.lang.NullPointerException`;
  #L42d090.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L42d094.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42d09a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42d0a0.  v0:= temp @kind object;
  #L42d0a2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42d0a6.  if v0 == v1 then goto L42d0e4;
  #L42d0aa.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42d0b0.  v0:= temp @kind object;
  #L42d0b2.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42d0b6.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L42d0ba.  if v0 == v1 then goto L42d0e4;
  #L42d0be.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableCreate$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42d0c2.  call `onError`(v1, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42d0c8.  if v0 == 0 then goto L42d0d2;
  #L42d0cc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d0d2.  v3:= 1I;
  #L42d0d4.  return v3;
  #L42d0d6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42d0d8.  if v0 == 0 then goto L42d0e2;
  #L42d0dc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L42d0e2.  throw v3;
  #L42d0e4.  v3:= 0I;
  #L42d0e6.  return v3;
  catch `java.lang.Throwable` @[L42d0be..L42d0c8] goto L42d0d6;
}
