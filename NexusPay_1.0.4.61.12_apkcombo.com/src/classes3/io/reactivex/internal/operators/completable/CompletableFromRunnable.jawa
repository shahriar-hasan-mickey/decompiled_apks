record `io.reactivex.internal.operators.completable.CompletableFromRunnable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `java.lang.Runnable` `io.reactivex.internal.operators.completable.CompletableFromRunnable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableFromRunnable` v0 @kind this, `java.lang.Runnable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableFromRunnable;.<init>:(Ljava/lang/Runnable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42dddc.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L42dde2.  v0.`io.reactivex.internal.operators.completable.CompletableFromRunnable.a` @type ^`java.lang.Runnable` := v1 @kind object;
  #L42dde6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableFromRunnable` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableFromRunnable;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42ddf8.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L42ddfe.  v0:= temp @kind object;
  #L42de00.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42de06.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableFromRunnable.a` @type ^`java.lang.Runnable` @kind object;
  #L42de0a.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L42de10.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de16.  v0:= temp;
  #L42de18.  if v0 != 0 then goto L42de22;
  #L42de1c.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42de22.  return @kind void;
  #L42de24.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42de26.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42de2c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L42de32.  v0:= temp;
  #L42de34.  if v0 != 0 then goto L42de40;
  #L42de38.  call `onError`(v3, v1) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42de3e.  goto L42de46;
  #L42de40.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42de46.  return @kind void;
  catch `java.lang.Throwable` @[L42de06..L42de10] goto L42de24;
}
