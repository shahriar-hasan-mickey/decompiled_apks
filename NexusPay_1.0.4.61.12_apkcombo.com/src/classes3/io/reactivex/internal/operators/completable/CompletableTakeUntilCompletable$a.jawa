record `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.CompletableObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42f44c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L42f452.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42f456.  v1:= new `io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a`;
  #L42f45a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;)V` @kind direct;
  #L42f460.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a` := v1 @kind object;
  #L42f464.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42f468.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42f46e.  v0.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L42f472.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42f4bc.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f4c0.  v1:= 0I;
  #L42f4c2.  v2:= 1I;
  #L42f4c4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42f4ca.  v0:= temp;
  #L42f4cc.  if v0 == 0 then goto L42f4e0;
  #L42f4d0.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f4d6.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42f4da.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42f4e0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42f4f4.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f4f8.  v1:= 0I;
  #L42f4fa.  v2:= 1I;
  #L42f4fc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42f502.  v0:= temp;
  #L42f504.  if v0 == 0 then goto L42f51a;
  #L42f508.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f50e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42f512.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f518.  goto L42f520;
  #L42f51a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42f520.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f484.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f488.  v1:= 0I;
  #L42f48a.  v2:= 1I;
  #L42f48c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42f492.  v0:= temp;
  #L42f494.  if v0 == 0 then goto L42f4a8;
  #L42f498.  call temp:= `dispose`(v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f49e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L42f4a2.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f4a8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42f42c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f430.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42f436.  v0:= temp;
  #L42f438.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f534.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f538.  v1:= 0I;
  #L42f53a.  v2:= 1I;
  #L42f53c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42f542.  v0:= temp;
  #L42f544.  if v0 == 0 then goto L42f55c;
  #L42f548.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L42f54c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f552.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42f556.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42f55c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42f570.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42f574.  v1:= 0I;
  #L42f576.  v2:= 1I;
  #L42f578.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42f57e.  v0:= temp;
  #L42f580.  if v0 == 0 then goto L42f59a;
  #L42f584.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a$a` @kind object;
  #L42f588.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42f58e.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42f592.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42f598.  goto L42f5a0;
  #L42f59a.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42f5a0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableTakeUntilCompletable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableTakeUntilCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42f5b4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42f5ba.  return @kind void;
}
