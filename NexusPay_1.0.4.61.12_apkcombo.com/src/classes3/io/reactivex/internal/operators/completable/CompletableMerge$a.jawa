record `io.reactivex.internal.operators.completable.CompletableMerge$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMerge$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableMerge$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.completable.CompletableMerge$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.completable.CompletableMerge$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMerge$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableMerge$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMerge$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.<init>:(Lio/reactivex/CompletableObserver;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e1d8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42e1de.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42e1e2.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int` := v2;
  #L42e1e6.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` := v3 @kind boolean;
  #L42e1ea.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L42e1ee.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L42e1f4.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L42e1f8.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42e1fc.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42e202.  v0.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L42e206.  v1:= 1I;
  #L42e208.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42e20e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$a$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.a:(Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42e248.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e24c.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e252.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e258.  v3:= temp;
  #L42e25a.  if v3 != 0 then goto L42e28a;
  #L42e25e.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e262.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42e268.  v3:= temp @kind object;
  #L42e26a.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L42e26e.  if v3 == 0 then goto L42e27e;
  #L42e272.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e276.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e27c.  goto L42e2a6;
  #L42e27e.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e282.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42e288.  goto L42e2a6;
  #L42e28a.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L42e28e.  v0:= 2147483647I;
  #L42e294.  if v3 == v0 then goto L42e2a6;
  #L42e298.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42e29c.  v0:= 1L;
  #L42e2a0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42e2a6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.internal.operators.completable.CompletableMerge$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.b:(Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L42e2b8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e2bc.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e2c2.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` @kind boolean;
  #L42e2c6.  if v3 != 0 then goto L42e31c;
  #L42e2ca.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42e2ce.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42e2d4.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e2d8.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42e2de.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e2e2.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42e2e8.  v3:= temp;
  #L42e2ea.  if v3 == 0 then goto L42e314;
  #L42e2ee.  v3:= 0I;
  #L42e2f0.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L42e2f6.  v3:= temp;
  #L42e2f8.  if v3 <= 0 then goto L42e374;
  #L42e2fc.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e300.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e304.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e30a.  v4:= temp @kind object;
  #L42e30c.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e312.  goto L42e374;
  #L42e314.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e31a.  goto L42e374;
  #L42e31c.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e320.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42e326.  v3:= temp;
  #L42e328.  if v3 == 0 then goto L42e36e;
  #L42e32c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e332.  v3:= temp;
  #L42e334.  if v3 != 0 then goto L42e350;
  #L42e338.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e33c.  v4:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e340.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e346.  v4:= temp @kind object;
  #L42e348.  call `onError`(v3, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e34e.  goto L42e374;
  #L42e350.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L42e354.  v4:= 2147483647I;
  #L42e35a.  if v3 == v4 then goto L42e374;
  #L42e35e.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42e362.  v0:= 1L;
  #L42e366.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42e36c.  goto L42e374;
  #L42e36e.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e374.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `io.reactivex.CompletableSource` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.c:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e478.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42e47e.  v0:= new `io.reactivex.internal.operators.completable.CompletableMerge$a$a`;
  #L42e482.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableMerge$a;)V` @kind direct;
  #L42e488.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e48c.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e492.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42e498.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e220.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42e224.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42e22a.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e22e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42e234.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e1b8.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e1bc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L42e1c2.  v0:= temp;
  #L42e1c4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e388.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e38e.  v0:= temp;
  #L42e390.  if v0 != 0 then goto L42e3ca;
  #L42e394.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e398.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42e39e.  v0:= temp @kind object;
  #L42e3a0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L42e3a4.  if v0 == 0 then goto L42e3c0;
  #L42e3a8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e3ac.  v1:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e3b0.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e3b6.  v1:= temp @kind object;
  #L42e3b8.  call `onError`(v0, v1) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e3be.  goto L42e3ca;
  #L42e3c0.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e3c4.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42e3ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e3dc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.c` @type ^`boolean` @kind boolean;
  #L42e3e0.  if v0 != 0 then goto L42e42c;
  #L42e3e4.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e3e8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42e3ee.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e3f2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42e3f8.  v0:= temp;
  #L42e3fa.  if v0 == 0 then goto L42e424;
  #L42e3fe.  v2:= 0I;
  #L42e400.  call temp:= `getAndSet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L42e406.  v2:= temp;
  #L42e408.  if v2 <= 0 then goto L42e466;
  #L42e40c.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e410.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e414.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e41a.  v0:= temp @kind object;
  #L42e41c.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e422.  goto L42e466;
  #L42e424.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e42a.  goto L42e466;
  #L42e42c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e430.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42e436.  v0:= temp;
  #L42e438.  if v0 == 0 then goto L42e460;
  #L42e43c.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e442.  v2:= temp;
  #L42e444.  if v2 != 0 then goto L42e466;
  #L42e448.  v2:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e44c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMerge$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L42e450.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e456.  v0:= temp @kind object;
  #L42e458.  call `onError`(v2, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e45e.  goto L42e466;
  #L42e460.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e466.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42e4ac.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L42e4b0.  call `c`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.c:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L42e4b6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMerge$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMerge$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42e4c8.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42e4cc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42e4d2.  v0:= temp;
  #L42e4d4.  if v0 == 0 then goto L42e50e;
  #L42e4d8.  v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.f` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L42e4dc.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e4e0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e4e6.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableMerge$a.b` @type ^`int`;
  #L42e4ea.  v1:= 2147483647I;
  #L42e4f0.  if v0 != v1 then goto L42e506;
  #L42e4f4.  v0:= 9223372036854775807L;
  #L42e4fe.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42e504.  goto L42e50e;
  #L42e506.  v0:= (`long`) v0 @kind i2l;
  #L42e508.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42e50e.  return @kind void;
}
