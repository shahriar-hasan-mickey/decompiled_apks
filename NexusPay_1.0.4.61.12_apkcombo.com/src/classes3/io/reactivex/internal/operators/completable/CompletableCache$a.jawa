record `io.reactivex.internal.operators.completable.CompletableCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableCache$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableCache` `io.reactivex.internal.operators.completable.CompletableCache$a.b` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache$a` v0 @kind this, `io.reactivex.internal.operators.completable.CompletableCache` v1 @kind object, `io.reactivex.CompletableObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/CompletableObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c634.  v0.`io.reactivex.internal.operators.completable.CompletableCache$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableCache` := v1 @kind object;
  #L42c638.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42c63e.  v0.`io.reactivex.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.CompletableObserver` := v2 @kind object;
  #L42c642.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableCache$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L42c654.  v0:= 0I;
  #L42c656.  v1:= 1I;
  #L42c658.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42c65e.  v0:= temp;
  #L42c660.  if v0 == 0 then goto L42c66e;
  #L42c664.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableCache$a.b` @type ^`io.reactivex.internal.operators.completable.CompletableCache` @kind object;
  #L42c668.  call `f`(v0, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)V` @kind virtual;
  #L42c66e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c618.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42c61e.  v0:= temp;
  #L42c620.  return v0;
}
