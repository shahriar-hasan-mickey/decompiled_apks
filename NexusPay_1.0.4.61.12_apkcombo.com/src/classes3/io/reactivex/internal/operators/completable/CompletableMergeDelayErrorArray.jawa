record `io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class {
  `io.reactivex.CompletableSource`[] `io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray` v0 @kind this, `io.reactivex.CompletableSource`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeDelayErrorArray;.<init>:([Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L42e768.  call `<init>`(v0) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L42e76e.  v0.`io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray.a` @type ^`io.reactivex.CompletableSource`[] := v1 @kind object;
  #L42e772.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray` v8 @kind this, `io.reactivex.CompletableObserver` v9 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeDelayErrorArray;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L42e784.  v0:= new `io.reactivex.disposables.CompositeDisposable`;
  #L42e788.  call `<init>`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L42e78e.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L42e792.  v2:= v8.`io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray.a` @type ^`io.reactivex.CompletableSource`[] @kind object;
  #L42e796.  v2:= length @variable v2;
  #L42e798.  v2:= v2 + 1;
  #L42e79c.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L42e7a2.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L42e7a6.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L42e7ac.  call `onSubscribe`(v9, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42e7b2.  v3:= v8.`io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray.a` @type ^`io.reactivex.CompletableSource`[] @kind object;
  #L42e7b6.  v4:= length @variable v3;
  #L42e7b8.  v5:= 0I;
  #L42e7ba.  if v5 >= v4 then goto L42e806;
  #L42e7be.  v6:= v3[v5] @kind object;
  #L42e7c2.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L42e7c8.  v7:= temp;
  #L42e7ca.  if v7 == 0 then goto L42e7d0;
  #L42e7ce.  return @kind void;
  #L42e7d0.  if v6 != 0 then goto L42e7f0;
  #L42e7d4.  v6:= new `java.lang.NullPointerException`;
  #L42e7d8.  v7:= "A completable source is null" @kind object;
  #L42e7dc.  call `<init>`(v6, v7) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L42e7e2.  call temp:= `addThrowable`(v2, v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L42e7e8.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e7ee.  goto L42e800;
  #L42e7f0.  v7:= new `io.reactivex.internal.operators.completable.CompletableMergeDelayErrorArray$a`;
  #L42e7f4.  call `<init>`(v7, v9, v0, v2, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeDelayErrorArray$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/disposables/CompositeDisposable;Lio/reactivex/internal/util/AtomicThrowable;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L42e7fa.  call `subscribe`(v6, v7) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42e800.  v5:= v5 + 1;
  #L42e804.  goto L42e7ba;
  #L42e806.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e80c.  v0:= temp;
  #L42e80e.  if v0 != 0 then goto L42e82c;
  #L42e812.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L42e818.  v0:= temp @kind object;
  #L42e81a.  if v0 != 0 then goto L42e826;
  #L42e81e.  call `onComplete`(v9) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42e824.  goto L42e82c;
  #L42e826.  call `onError`(v9, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e82c.  return @kind void;
}
