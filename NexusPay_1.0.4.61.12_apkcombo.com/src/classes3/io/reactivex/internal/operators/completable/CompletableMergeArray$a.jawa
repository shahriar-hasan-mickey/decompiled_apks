record `io.reactivex.internal.operators.completable.CompletableMergeArray$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableMergeArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `java.util.concurrent.atomic.AtomicBoolean` v2 @kind object, `io.reactivex.disposables.CompositeDisposable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.<init>:(Lio/reactivex/CompletableObserver;Ljava/util/concurrent/atomic/AtomicBoolean;Lio/reactivex/disposables/CompositeDisposable;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42e520.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42e526.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42e52a.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L42e52e.  v0.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` := v3 @kind object;
  #L42e532.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L42e538.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e54c.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42e552.  v0:= temp;
  #L42e554.  if v0 != 0 then goto L42e576;
  #L42e558.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42e55c.  v1:= 0I;
  #L42e55e.  v2:= 1I;
  #L42e560.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42e566.  v0:= temp;
  #L42e568.  if v0 == 0 then goto L42e576;
  #L42e56c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e570.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42e576.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42e588.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e58c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L42e592.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42e596.  v1:= 0I;
  #L42e598.  v2:= 1I;
  #L42e59a.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42e5a0.  v0:= temp;
  #L42e5a2.  if v0 == 0 then goto L42e5b2;
  #L42e5a6.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42e5aa.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42e5b0.  goto L42e5b8;
  #L42e5b2.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42e5b8.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableMergeArray$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableMergeArray$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42e5cc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableMergeArray$a.c` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L42e5d0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L42e5d6.  return @kind void;
}
