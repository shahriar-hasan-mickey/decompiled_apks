record `io.reactivex.internal.operators.completable.CompletableConcat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.completable.CompletableConcat$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.completable.CompletableConcat$a$a` `io.reactivex.internal.operators.completable.CompletableConcat$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.f` @AccessFlag ;
  `int` `io.reactivex.internal.operators.completable.CompletableConcat$a.g` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.completable.CompletableConcat$a.h` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.completable.CompletableConcat$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.completable.CompletableConcat$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.completable.CompletableConcat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.<init>:(Lio/reactivex/CompletableObserver;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L42c984.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L42c98a.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L42c98e.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int` := v2;
  #L42c992.  v1:= new `io.reactivex.internal.operators.completable.CompletableConcat$a$a`;
  #L42c996.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableConcat$a;)V` @kind direct;
  #L42c99c.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` := v1 @kind object;
  #L42c9a0.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42c9a4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42c9aa.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L42c9ae.  v1:= v2 ^> 2;
  #L42c9b2.  v2:= v2 - v1 @kind int;
  #L42c9b4.  v0.`io.reactivex.internal.operators.completable.CompletableConcat$a.c` @type ^`int` := v2;
  #L42c9b8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c9f4.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L42c9fa.  v0:= temp;
  #L42c9fc.  if v0 == 0 then goto L42ca02;
  #L42ca00.  return @kind void;
  #L42ca02.  call temp:= `isDisposed`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.isDisposed:()Z` @kind virtual;
  #L42ca08.  v0:= temp;
  #L42ca0a.  if v0 == 0 then goto L42ca10;
  #L42ca0e.  return @kind void;
  #L42ca10.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` @kind boolean;
  #L42ca14.  if v0 != 0 then goto L42ca88;
  #L42ca18.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` @kind boolean;
  #L42ca1c.  v1:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42ca20.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L42ca26.  v1:= temp @kind object;
  #L42ca28.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L42ca2c.  v2:= 0I;
  #L42ca2e.  v3:= 1I;
  #L42ca30.  if v1 != 0 then goto L42ca38;
  #L42ca34.  v4:= 1I;
  #L42ca36.  goto L42ca3a;
  #L42ca38.  v4:= 0I;
  #L42ca3a.  if v0 == 0 then goto L42ca5e;
  #L42ca3e.  if v4 == 0 then goto L42ca5e;
  #L42ca42.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42ca46.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42ca4c.  v0:= temp;
  #L42ca4e.  if v0 == 0 then goto L42ca5c;
  #L42ca52.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42ca56.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42ca5c.  return @kind void;
  #L42ca5e.  if v4 != 0 then goto L42ca88;
  #L42ca62.  v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` := v3 @kind boolean;
  #L42ca66.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L42ca6a.  call `subscribe`(v1, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42ca70.  call `e`(v5) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.e:()V` @kind virtual;
  #L42ca76.  goto L42ca88;
  #L42ca78.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42ca7a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L42ca80.  call `c`(v5, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42ca86.  return @kind void;
  #L42ca88.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L42ca8e.  v0:= temp;
  #L42ca90.  if v0 != 0 then goto L42ca02;
  #L42ca94.  return @kind void;
  catch `java.lang.Throwable` @[L42ca1c..L42ca2c] goto L42ca78;
}
procedure `void` `b`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L42cab4.  v0:= 0I;
  #L42cab6.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.k` @type ^`boolean` := v0 @kind boolean;
  #L42caba.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L42cac0.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L42cad4.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42cad8.  v1:= 0I;
  #L42cada.  v2:= 1I;
  #L42cadc.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42cae2.  v0:= temp;
  #L42cae4.  if v0 == 0 then goto L42cafe;
  #L42cae8.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42caec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42caf2.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42caf6.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cafc.  goto L42cb04;
  #L42cafe.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42cb04.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.d:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb7c.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int`;
  #L42cb80.  if v0 != 0 then goto L42cba6;
  #L42cb84.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L42cb88.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L42cb8e.  v2:= temp;
  #L42cb90.  if v2 != 0 then goto L42cba6;
  #L42cb94.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L42cb98.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L42cb9e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L42cba4.  return @kind void;
  #L42cba6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L42cbac.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c9cc.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42c9d0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L42c9d6.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L42c9da.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42c9e0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42ccbc.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int`;
  #L42ccc0.  v1:= 1I;
  #L42ccc2.  if v0 == v1 then goto L42ccec;
  #L42ccc6.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int`;
  #L42ccca.  v0:= v0 + v1 @kind int;
  #L42cccc.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.c` @type ^`int`;
  #L42ccd0.  if v0 != v1 then goto L42cce8;
  #L42ccd4.  v1:= 0I;
  #L42ccd6.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int` := v1;
  #L42ccda.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42ccde.  v2:= (`long`) v0 @kind i2l;
  #L42cce0.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42cce6.  goto L42ccec;
  #L42cce8.  v4.`io.reactivex.internal.operators.completable.CompletableConcat$a.g` @type ^`int` := v0;
  #L42ccec.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42c958.  v0:= v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L42c95c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c962.  v0:= temp @kind object;
  #L42c964.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L42c968.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L42c96e.  v0:= temp;
  #L42c970.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L42cb18.  v0:= 1I;
  #L42cb1a.  v1.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` := v0 @kind boolean;
  #L42cb1e.  call `a`(v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L42cb24.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42cb38.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42cb3c.  v1:= 0I;
  #L42cb3e.  v2:= 1I;
  #L42cb40.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42cb46.  v0:= temp;
  #L42cb48.  if v0 == 0 then goto L42cb62;
  #L42cb4c.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.d` @type ^`io.reactivex.internal.operators.completable.CompletableConcat$a$a` @kind object;
  #L42cb50.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L42cb56.  v0:= v3.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cb5a.  call `onError`(v0, v4) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42cb60.  goto L42cb68;
  #L42cb62.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L42cb68.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L42cbc0.  v1:= (`io.reactivex.CompletableSource`) v1 @kind object;
  #L42cbc4.  call `d`(v0, v1) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.d:(Lio/reactivex/CompletableSource;)V` @kind virtual;
  #L42cbca.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableConcat$a` v6 @kind this, `org.reactivestreams.Subscription` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42cbdc.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L42cbe0.  call temp:= `validate`(v0, v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L42cbe6.  v0:= temp;
  #L42cbe8.  if v0 == 0 then goto L42ccaa;
  #L42cbec.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.i` @type ^`org.reactivestreams.Subscription` := v7 @kind object;
  #L42cbf0.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L42cbf4.  v1:= 2147483647I;
  #L42cbfa.  if v0 != v1 then goto L42cc0a;
  #L42cbfe.  v2:= 9223372036854775807L;
  #L42cc08.  goto L42cc0c;
  #L42cc0a.  v2:= (`long`) v0 @kind i2l;
  #L42cc0c.  v0:= instanceof @variable v7 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L42cc10.  if v0 == 0 then goto L42cc68;
  #L42cc14.  v0:= v7 @kind object;
  #L42cc16.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L42cc1a.  v4:= 3I;
  #L42cc1c.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L42cc22.  v4:= temp;
  #L42cc24.  v5:= 1I;
  #L42cc26.  if v4 != v5 then goto L42cc48;
  #L42cc2a.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int` := v4;
  #L42cc2e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L42cc32.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.j` @type ^`boolean` := v5 @kind boolean;
  #L42cc36.  v7:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cc3a.  call `onSubscribe`(v7, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42cc40.  call `a`(v6) @signature `Lio/reactivex/internal/operators/completable/CompletableConcat$a;.a:()V` @kind virtual;
  #L42cc46.  return @kind void;
  #L42cc48.  v5:= 2I;
  #L42cc4a.  if v4 != v5 then goto L42cc68;
  #L42cc4e.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.f` @type ^`int` := v4;
  #L42cc52.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L42cc56.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cc5a.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42cc60.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42cc66.  return @kind void;
  #L42cc68.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L42cc6c.  if v0 != v1 then goto L42cc88;
  #L42cc70.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L42cc74.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L42cc7a.  v1:= temp;
  #L42cc7c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L42cc82.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L42cc86.  goto L42cc9a;
  #L42cc88.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L42cc8c.  v1:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.b` @type ^`int`;
  #L42cc90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L42cc96.  v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L42cc9a.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableConcat$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42cc9e.  call `onSubscribe`(v0, v6) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42cca4.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L42ccaa.  return @kind void;
}
