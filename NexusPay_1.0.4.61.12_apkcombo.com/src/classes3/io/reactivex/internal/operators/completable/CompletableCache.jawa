record `io.reactivex.internal.operators.completable.CompletableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.completable.CompletableCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.completable.CompletableCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.completable.CompletableCache.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.completable.CompletableCache.d` @AccessFlag ;
}
global `io.reactivex.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.internal.operators.completable.CompletableCache.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.completable.CompletableCache$a`[] `@@io.reactivex.internal.operators.completable.CompletableCache.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L42c6d4.  v0:= 0I;
  #L42c6d6.  v1:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v0];
  #L42c6da.  `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] := v1 @kind object;
  #L42c6de.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v0];
  #L42c6e2.  `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] := v0 @kind object;
  #L42c6e6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.completable.CompletableCache` v1 @kind this, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.<init>:(Lio/reactivex/CompletableSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L42c6f8.  call `<init>`(v1) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L42c6fe.  v1.`io.reactivex.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L42c702.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L42c706.  v0:= `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L42c70a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L42c710.  v1.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L42c714.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L42c718.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L42c71e.  v1.`io.reactivex.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L42c722.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.completable.CompletableCache` v4 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L42c680.  v0:= v4.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c684.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c68a.  v0:= temp @kind object;
  #L42c68c.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L42c690.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L42c694.  v2:= 0I;
  #L42c696.  if v0 != v1 then goto L42c69c;
  #L42c69a.  return v2;
  #L42c69c.  v1:= length @variable v0;
  #L42c69e.  v3:= v1 + 1;
  #L42c6a2.  v3:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v3];
  #L42c6a6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c6ac.  v3[v1]:= v5 @kind object;
  #L42c6b0.  v1:= v4.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c6b4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42c6ba.  v0:= temp;
  #L42c6bc.  if v0 == 0 then goto L42c680;
  #L42c6c0.  v5:= 1I;
  #L42c6c2.  return v5;
}
procedure `void` `f`(`io.reactivex.internal.operators.completable.CompletableCache` v6 @kind this, `io.reactivex.internal.operators.completable.CompletableCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L42c7ec.  v0:= v6.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c7f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L42c7f6.  v0:= temp @kind object;
  #L42c7f8.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L42c7fc.  v1:= length @variable v0;
  #L42c7fe.  if v1 != 0 then goto L42c804;
  #L42c802.  return @kind void;
  #L42c804.  v2:= -1I;
  #L42c806.  v3:= 0I;
  #L42c808.  v4:= 0I;
  #L42c80a.  if v4 >= v1 then goto L42c820;
  #L42c80e.  v5:= v0[v4] @kind object;
  #L42c812.  if v5 != v7 then goto L42c81a;
  #L42c816.  v2:= v4;
  #L42c818.  goto L42c820;
  #L42c81a.  v4:= v4 + 1;
  #L42c81e.  goto L42c80a;
  #L42c820.  if v2 >= 0 then goto L42c826;
  #L42c824.  return @kind void;
  #L42c826.  v4:= 1I;
  #L42c828.  if v1 != v4 then goto L42c832;
  #L42c82c.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.e` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L42c830.  goto L42c850;
  #L42c832.  v5:= v1 + -1;
  #L42c836.  v5:= new `io.reactivex.internal.operators.completable.CompletableCache$a`[v5];
  #L42c83a.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c840.  v3:= v2 + 1;
  #L42c844.  v1:= v1 - v2 @kind int;
  #L42c846.  v1:= v1 - v4 @kind int;
  #L42c848.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L42c84e.  v1:= v5 @kind object;
  #L42c850.  v2:= v6.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c854.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L42c85a.  v0:= temp;
  #L42c85c.  if v0 == 0 then goto L42c7ec;
  #L42c860.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c734.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c738.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L42c73c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c742.  v0:= temp @kind object;
  #L42c744.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L42c748.  v1:= length @variable v0;
  #L42c74a.  v2:= 0I;
  #L42c74c.  if v2 >= v1 then goto L42c770;
  #L42c750.  v3:= v0[v2] @kind object;
  #L42c754.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42c75a.  v4:= temp;
  #L42c75c.  if v4 != 0 then goto L42c76a;
  #L42c760.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c764.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42c76a.  v2:= v2 + 1;
  #L42c76e.  goto L42c74c;
  #L42c770.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.completable.CompletableCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L42c784.  v5.`io.reactivex.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` := v6 @kind object;
  #L42c788.  v0:= v5.`io.reactivex.internal.operators.completable.CompletableCache.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L42c78c.  v1:= `@@io.reactivex.internal.operators.completable.CompletableCache.f` @type ^`io.reactivex.internal.operators.completable.CompletableCache$a`[] @kind object;
  #L42c790.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L42c796.  v0:= temp @kind object;
  #L42c798.  v0:= (`io.reactivex.internal.operators.completable.CompletableCache$a`[]) v0 @kind object;
  #L42c79c.  v1:= length @variable v0;
  #L42c79e.  v2:= 0I;
  #L42c7a0.  if v2 >= v1 then goto L42c7c4;
  #L42c7a4.  v3:= v0[v2] @kind object;
  #L42c7a8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L42c7ae.  v4:= temp;
  #L42c7b0.  if v4 != 0 then goto L42c7be;
  #L42c7b4.  v3:= v3.`io.reactivex.internal.operators.completable.CompletableCache$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L42c7b8.  call `onError`(v3, v6) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c7be.  v2:= v2 + 1;
  #L42c7c2.  goto L42c7a0;
  #L42c7c4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.completable.CompletableCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L42c7d8.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.completable.CompletableCache` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L42c874.  v0:= new `io.reactivex.internal.operators.completable.CompletableCache$a`;
  #L42c878.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.<init>:(Lio/reactivex/internal/operators/completable/CompletableCache;Lio/reactivex/CompletableObserver;)V` @kind direct;
  #L42c87e.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L42c884.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.e:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)Z` @kind virtual;
  #L42c88a.  v1:= temp;
  #L42c88c.  if v1 == 0 then goto L42c8c2;
  #L42c890.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache$a;.isDisposed:()Z` @kind virtual;
  #L42c896.  v3:= temp;
  #L42c898.  if v3 == 0 then goto L42c8a2;
  #L42c89c.  call `f`(v2, v0) @signature `Lio/reactivex/internal/operators/completable/CompletableCache;.f:(Lio/reactivex/internal/operators/completable/CompletableCache$a;)V` @kind virtual;
  #L42c8a2.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L42c8a6.  v0:= 0I;
  #L42c8a8.  v1:= 1I;
  #L42c8aa.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L42c8b0.  v3:= temp;
  #L42c8b2.  if v3 == 0 then goto L42c8d8;
  #L42c8b6.  v3:= v2.`io.reactivex.internal.operators.completable.CompletableCache.a` @type ^`io.reactivex.CompletableSource` @kind object;
  #L42c8ba.  call `subscribe`(v3, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L42c8c0.  goto L42c8d8;
  #L42c8c2.  v0:= v2.`io.reactivex.internal.operators.completable.CompletableCache.d` @type ^`java.lang.Throwable` @kind object;
  #L42c8c6.  if v0 == 0 then goto L42c8d2;
  #L42c8ca.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L42c8d0.  goto L42c8d8;
  #L42c8d2.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L42c8d8.  return @kind void;
}
