record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L432838.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L43283c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L432842.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L432848.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43284c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L432852.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L432856.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43285a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L43285e.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4327ec.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4327f0.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4327f6.  v1:= 1I;
  #L4327f8.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4327cc.  v2:= (`java.util.Collection`) v2 @kind object;
  #L4327d0.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L4327d6.  v1:= temp;
  #L4327d8.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L4328dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4328e0.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4328e6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4328f8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L4328fc.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432902.  v0:= temp @kind object;
  #L432904.  v1:= "The buffer supplied is null" @kind object;
  #L432908.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43290e.  v0:= temp @kind object;
  #L432910.  v0:= (`java.util.Collection`) v0 @kind object;
  #L432914.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L432918.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43291e.  v1:= temp @kind object;
  #L432920.  v2:= "The boundary publisher supplied is null" @kind object;
  #L432924.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43292a.  v1:= temp @kind object;
  #L43292c.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L432930.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a`;
  #L432934.  call `<init>`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @kind direct;
  #L43293a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43293e.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L432944.  v3:= temp;
  #L432946.  if v3 == 0 then goto L432974;
  #L43294a.  @monitorenter v4
  #L43294c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L432950.  if v3 != 0 then goto L432958;
  #L432954.  @monitorexit v4
  #L432956.  return @kind void;
  #L432958.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L43295c.  @monitorexit v4
  #L43295e.  call `subscribe`(v1, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L432964.  v0:= 0I;
  #L432966.  call `fastPathEmitMax`(v4, v3, v0, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43296c.  goto L432974;
  #L43296e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432970.  @monitorexit v4
  #L432972.  throw v0;
  #L432974.  return @kind void;
  #L432976.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432978.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43297e.  v1:= 1I;
  #L432980.  v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L432984.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L432988.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43298e.  v1:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432992.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432998.  return @kind void;
  #L43299a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43299c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4329a2.  call `cancel`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @kind virtual;
  #L4329a8.  v1:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4329ac.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4329b2.  return @kind void;
  catch `java.lang.Throwable` @[L4328f8..L432914] goto L43299a;
  catch `java.lang.Throwable` @[L432914..L432930] goto L432976;
  catch `java.lang.Throwable` @[L43294c..L43295e] goto L43296e;
  catch `java.lang.Throwable` @[L432970..L432972] goto L43296e;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432870.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L432874.  if v0 != 0 then goto L4328a4;
  #L432878.  v0:= 1I;
  #L43287a.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L43287e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L432882.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L432888.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L43288e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L432894.  v0:= temp;
  #L432896.  if v0 == 0 then goto L4328a4;
  #L43289a.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43289e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4328a4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4328b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4328bc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4328c2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.b:()V` @kind virtual;
  #L4328c8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43280c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432810.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L432816.  v0:= temp @kind object;
  #L432818.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L43281c.  if v0 != v1 then goto L432824;
  #L432820.  v0:= 1I;
  #L432822.  goto L432826;
  #L432824.  v0:= 0I;
  #L432826.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4329ec.  @monitorenter v3
  #L4329ee.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L4329f2.  if v0 != 0 then goto L4329fa;
  #L4329f6.  @monitorexit v3
  #L4329f8.  return @kind void;
  #L4329fa.  v1:= 0I;
  #L4329fc.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L432a00.  @monitorexit v3
  #L432a02.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L432a06.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L432a0c.  v0:= 1I;
  #L432a0e.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L432a12.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L432a18.  v0:= temp;
  #L432a1a.  if v0 == 0 then goto L432a2e;
  #L432a1e.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L432a22.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432a26.  v2:= 0I;
  #L432a28.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L432a2e.  return @kind void;
  #L432a30.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432a32.  @monitorexit v3
  #L432a34.  throw v0;
  catch `java.lang.Throwable` @[L4329ee..L432a02] goto L432a30;
  catch `java.lang.Throwable` @[L432a32..L432a34] goto L432a30;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432a5c.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.cancel:()V` @kind virtual;
  #L432a62.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432a66.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432a6c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432a80.  @monitorenter v1
  #L432a82.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` @kind object;
  #L432a86.  if v0 != 0 then goto L432a8e;
  #L432a8a.  @monitorexit v1
  #L432a8c.  return @kind void;
  #L432a8e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L432a94.  @monitorexit v1
  #L432a96.  return @kind void;
  #L432a98.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432a9a.  @monitorexit v1
  #L432a9c.  throw v2;
  catch `java.lang.Throwable` @[L432a82..L432a9c] goto L432a98;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L432abc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L432ac0.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L432ac6.  v0:= temp;
  #L432ac8.  if v0 != 0 then goto L432ace;
  #L432acc.  return @kind void;
  #L432ace.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.e` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L432ad2.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432ad6.  v1:= 1I;
  #L432ad8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L432adc.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432ae2.  v2:= temp @kind object;
  #L432ae4.  v3:= "The buffer supplied is null" @kind object;
  #L432ae8.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L432aee.  v2:= temp @kind object;
  #L432af0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L432af4.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.g` @type ^`java.util.Collection` := v2 @kind object;
  #L432af8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L432afc.  call temp:= `call`(v2) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432b02.  v2:= temp @kind object;
  #L432b04.  v3:= "The boundary publisher supplied is null" @kind object;
  #L432b08.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L432b0e.  v2:= temp @kind object;
  #L432b10.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L432b14.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a`;
  #L432b18.  call `<init>`(v1, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @kind direct;
  #L432b1e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432b22.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L432b28.  call `onSubscribe`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L432b2e.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L432b32.  if v0 != 0 then goto L432b4c;
  #L432b36.  v3:= 9223372036854775807L;
  #L432b40.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L432b46.  call `subscribe`(v2, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L432b4c.  return @kind void;
  #L432b4e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432b50.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432b56.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L432b5a.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L432b60.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L432b66.  return @kind void;
  #L432b68.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432b6a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432b70.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L432b74.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L432b7a.  call `error`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L432b80.  return @kind void;
  catch `java.lang.Throwable` @[L432ad8..L432af4] goto L432b68;
  catch `java.lang.Throwable` @[L432af8..L432b14] goto L432b4e;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L432bac.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L432bb2.  return @kind void;
}
