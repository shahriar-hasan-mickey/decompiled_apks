record `io.reactivex.internal.operators.flowable.FlowableFromArray$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.<init>:(Lorg/reactivestreams/Subscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d454.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L43d45a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43d45e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d470.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d474.  v1:= length @variable v0;
  #L43d476.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43d47a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d47e.  if v3 == v1 then goto L43d4de;
  #L43d482.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d486.  if v4 == 0 then goto L43d48c;
  #L43d48a.  return @kind void;
  #L43d48c.  v4:= v0[v3] @kind object;
  #L43d490.  if v4 != 0 then goto L43d4d2;
  #L43d494.  v0:= new `java.lang.NullPointerException`;
  #L43d498.  v1:= new `java.lang.StringBuilder`;
  #L43d49c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43d4a2.  v4:= "The element at index " @kind object;
  #L43d4a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d4ac.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d4b2.  v3:= " is null" @kind object;
  #L43d4b6.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d4bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43d4c2.  v1:= temp @kind object;
  #L43d4c4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d4ca.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d4d0.  return @kind void;
  #L43d4d2.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43d4d8.  v3:= v3 + 1;
  #L43d4dc.  goto L43d47e;
  #L43d4de.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d4e2.  if v0 == 0 then goto L43d4e8;
  #L43d4e6.  return @kind void;
  #L43d4e8.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43d4ee.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromArray$b` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L43d500.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d504.  v1:= length @variable v0;
  #L43d506.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d50a.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$b.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43d50e.  v4:= 0L;
  #L43d512.  v6:= v4 @kind wide;
  #L43d514.  v8:= lcmp(v6, v11);
  #L43d518.  if v8 == 0 then goto L43d582;
  #L43d51c.  if v2 == v1 then goto L43d582;
  #L43d520.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d524.  if v8 == 0 then goto L43d52a;
  #L43d528.  return @kind void;
  #L43d52a.  v8:= v0[v2] @kind object;
  #L43d52e.  if v8 != 0 then goto L43d570;
  #L43d532.  v11:= new `java.lang.NullPointerException`;
  #L43d536.  v12:= new `java.lang.StringBuilder`;
  #L43d53a.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43d540.  v0:= "The element at index " @kind object;
  #L43d544.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d54a.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d550.  v0:= " is null" @kind object;
  #L43d554.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d55a.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43d560.  v12:= temp @kind object;
  #L43d562.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d568.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d56e.  return @kind void;
  #L43d570.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43d576.  v8:= 1L;
  #L43d57a.  v6:= v6 + v8 @kind long;
  #L43d57c.  v2:= v2 + 1;
  #L43d580.  goto L43d514;
  #L43d582.  if v2 != v1 then goto L43d596;
  #L43d586.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d58a.  if v11 != 0 then goto L43d594;
  #L43d58e.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43d594.  return @kind void;
  #L43d596.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43d59c.  v11:= temp @kind wide;
  #L43d59e.  v8:= lcmp(v6, v11);
  #L43d5a2.  if v8 != 0 then goto L43d514;
  #L43d5a6.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L43d5aa.  v11:= -v6 @kind long;
  #L43d5ac.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43d5b2.  v11:= temp @kind wide;
  #L43d5b4.  v6:= lcmp(v11, v4);
  #L43d5b8.  if v6 != 0 then goto L43d512;
  #L43d5bc.  return @kind void;
}
