record `io.reactivex.internal.operators.flowable.FlowableDetach$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4385c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4385ce.  v0.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4385d2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4385e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4385e8.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L4385ec.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L4385f0.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L4385f6.  v1:= temp @kind object;
  #L4385f8.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4385fc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438602.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438614.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438618.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L43861c.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L438620.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L438626.  v1:= temp @kind object;
  #L438628.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43862c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L438632.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438644.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438648.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L43864c.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L438650.  call temp:= `asSubscriber`() @signature `Lio/reactivex/internal/util/EmptyComponent;.asSubscriber:()Lorg/reactivestreams/Subscriber;` @kind static;
  #L438656.  v1:= temp @kind object;
  #L438658.  v2.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43865c.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438662.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438674.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438678.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43867e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438690.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438694.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43869a.  v0:= temp;
  #L43869c.  if v0 == 0 then goto L4386ae;
  #L4386a0.  v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4386a4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4386a8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4386ae.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDetach$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDetach$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4386c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDetach$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4386c4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4386ca.  return @kind void;
}
