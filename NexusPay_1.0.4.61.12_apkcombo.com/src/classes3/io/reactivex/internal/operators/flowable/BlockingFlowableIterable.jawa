record `io.reactivex.internal.operators.flowable.BlockingFlowableIterable` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Iterable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L430310.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430316.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L43031a.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable.b` @type ^`int` := v2;
  #L43031e.  return @kind void;
}
procedure `java.util.Iterator` `iterator`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4302e4.  v0:= new `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a`;
  #L4302e8.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable.b` @type ^`int`;
  #L4302ec.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.<init>:(I)V` @kind direct;
  #L4302f2.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable.a` @type ^`io.reactivex.Flowable` @kind object;
  #L4302f6.  call `subscribe`(v1, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4302fc.  return v0 @kind object;
}
