record `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438d44.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L438d4a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L438d4e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438d60.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438d64.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438d6a.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L438d6e.  if v0 != 0 then goto L438d86;
  #L438d72.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438d76.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438d7c.  goto L438d86;
  #L438d7e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438d80.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438d86.  return @kind void;
  catch `java.lang.Throwable` @[L438d72..L438d7c] goto L438d7e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438d18.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L438d1c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L438d22.  v0:= temp @kind object;
  #L438d24.  if v0 == 0 then goto L438d32;
  #L438d28.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438d2c.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438d32.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L438cfc.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L438d02.  v1:= temp;
  #L438d04.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoAfterNext$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438cbc.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L438cc0.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L438cc6.  v0:= temp;
  #L438cc8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoAfterNext$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L438ccc.  call `accept`(v1, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L438cd2.  goto L438cdc;
  #L438cd4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438cd6.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438cdc.  return v0;
  catch `java.lang.Throwable` @[L438cc8..L438cd2] goto L438cd4;
}
