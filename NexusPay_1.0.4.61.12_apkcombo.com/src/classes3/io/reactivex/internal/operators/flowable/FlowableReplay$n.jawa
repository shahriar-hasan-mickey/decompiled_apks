record `io.reactivex.internal.operators.flowable.FlowableReplay$n` @kind class @AccessFlag FINAL extends `java.util.ArrayList` @kind class, `io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind interface {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$n.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L448b24.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L448b2a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L448b68.  call temp:= `error`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L448b6e.  v1:= temp @kind object;
  #L448b70.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L448b76.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L448b7a.  v1:= v1 + 1;
  #L448b7e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v1;
  #L448b82.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.b:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L448b94.  call temp:= `next`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L448b9a.  v1:= temp @kind object;
  #L448b9c.  call temp:= `add`(v0, v1) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L448ba2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L448ba6.  v1:= v1 + 1;
  #L448baa.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v1;
  #L448bae.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v14 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L448bc0.  @monitorenter v15
  #L448bc2.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` @kind boolean;
  #L448bc6.  v1:= 1I;
  #L448bc8.  if v0 == 0 then goto L448bd4;
  #L448bcc.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v1 @kind boolean;
  #L448bd0.  @monitorexit v15
  #L448bd2.  return @kind void;
  #L448bd4.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v1 @kind boolean;
  #L448bd8.  @monitorexit v15
  #L448bda.  v0:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L448bde.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L448be4.  v1:= temp;
  #L448be6.  if v1 == 0 then goto L448bec;
  #L448bea.  return @kind void;
  #L448bec.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L448bf0.  call temp:= `a`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.a:()Ljava/lang/Object;` @kind virtual;
  #L448bf6.  v2:= temp @kind object;
  #L448bf8.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L448bfc.  v3:= 0I;
  #L448bfe.  if v2 == 0 then goto L448c0c;
  #L448c02.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L448c08.  v2:= temp;
  #L448c0a.  goto L448c0e;
  #L448c0c.  v2:= 0I;
  #L448c0e.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L448c14.  v4:= temp @kind wide;
  #L448c16.  v6:= 0L;
  #L448c1a.  v8:= v4 @kind wide;
  #L448c1c.  v10:= v6 @kind wide;
  #L448c1e.  v12:= lcmp(v8, v6);
  #L448c22.  if v12 == 0 then goto L448c8a;
  #L448c26.  if v2 >= v1 then goto L448c8a;
  #L448c2a.  call temp:= `get`(v14, v2) @signature `Ljava/util/ArrayList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L448c30.  v12:= temp @kind object;
  #L448c32.  call temp:= `accept`(v12, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.accept:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)Z` @kind static;
  #L448c38.  v12:= temp;
  #L448c3a.  if v12 == 0 then goto L448c40;
  #L448c3e.  return @kind void;
  #L448c40.  call temp:= `isDisposed`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L448c46.  v12:= temp;
  #L448c48.  if v12 == 0 then goto L448c4e;
  #L448c4c.  return @kind void;
  #L448c4e.  v2:= v2 + 1;
  #L448c52.  v12:= 1L;
  #L448c56.  v8:= v8 - v12 @kind long;
  #L448c58.  v10:= v10 + v12 @kind long;
  #L448c5a.  goto L448c1e;
  #L448c5c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448c5e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L448c64.  call `dispose`(v15) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @kind virtual;
  #L448c6a.  call temp:= `isError`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L448c70.  v15:= temp;
  #L448c72.  if v15 != 0 then goto L448c88;
  #L448c76.  call temp:= `isComplete`(v12) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L448c7c.  v15:= temp;
  #L448c7e.  if v15 != 0 then goto L448c88;
  #L448c82.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L448c88.  return @kind void;
  #L448c8a.  v1:= lcmp(v10, v6);
  #L448c8e.  if v1 == 0 then goto L448cb6;
  #L448c92.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L448c98.  v1:= temp @kind object;
  #L448c9a.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v1 @kind object;
  #L448c9e.  v1:= 9223372036854775807L;
  #L448ca8.  v6:= lcmp(v4, v1);
  #L448cac.  if v6 == 0 then goto L448cb6;
  #L448cb0.  call temp:= `b`(v15, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.b:(J)J` @kind virtual;
  #L448cb6.  @monitorenter v15
  #L448cb8.  v1:= v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` @kind boolean;
  #L448cbc.  if v1 != 0 then goto L448cc8;
  #L448cc0.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @type ^`boolean` := v3 @kind boolean;
  #L448cc4.  @monitorexit v15
  #L448cc6.  return @kind void;
  #L448cc8.  v15.`io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @type ^`boolean` := v3 @kind boolean;
  #L448ccc.  @monitorexit v15
  #L448cce.  goto L448bde;
  #L448cd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448cd2.  @monitorexit v15
  #L448cd4.  throw v0;
  #L448cd6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448cd8.  @monitorexit v15
  #L448cda.  throw v0;
  catch `java.lang.Throwable` @[L448bc2..L448bda] goto L448cd6;
  catch `java.lang.Throwable` @[L448c32..L448c3a] goto L448c5c;
  catch `java.lang.Throwable` @[L448cb8..L448cd4] goto L448cd0;
  catch `java.lang.Throwable` @[L448cd8..L448cda] goto L448cd6;
}
procedure `void` `complete`(`io.reactivex.internal.operators.flowable.FlowableReplay$n` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$n;.complete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448b3c.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L448b42.  v0:= temp @kind object;
  #L448b44.  call temp:= `add`(v1, v0) @signature `Ljava/util/ArrayList;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L448b4a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int`;
  #L448b4e.  v0:= v0 + 1;
  #L448b52.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$n.a` @type ^`int` := v0;
  #L448b56.  return @kind void;
}
