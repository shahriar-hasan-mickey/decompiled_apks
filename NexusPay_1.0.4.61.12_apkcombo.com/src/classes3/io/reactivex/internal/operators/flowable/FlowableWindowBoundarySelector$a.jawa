record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @AccessFlag FINAL;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind object, `io.reactivex.processors.UnicastProcessor` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4504b0.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L4504b6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` := v1 @kind object;
  #L4504ba.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L4504be.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4504d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L4504d4.  if v0 == 0 then goto L4504da;
  #L4504d8.  return @kind void;
  #L4504da.  v0:= 1I;
  #L4504dc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4504e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L4504e4.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @kind virtual;
  #L4504ea.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4504fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` @kind boolean;
  #L450500.  if v0 == 0 then goto L45050c;
  #L450504.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45050a.  return @kind void;
  #L45050c.  v0:= 1I;
  #L45050e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.d` @type ^`boolean` := v0 @kind boolean;
  #L450512.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind object;
  #L450516.  call `c`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.c:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45051c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L450530.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @kind virtual;
  #L450536.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.onComplete:()V` @kind virtual;
  #L45053c.  return @kind void;
}
