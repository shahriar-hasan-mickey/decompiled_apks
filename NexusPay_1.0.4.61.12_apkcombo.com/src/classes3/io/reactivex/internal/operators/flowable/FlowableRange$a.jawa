record `io.reactivex.internal.operators.flowable.FlowableRange$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableRange$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableRange$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRange$a.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446328.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L44632e.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L446332.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int` := v2;
  #L446336.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L446348.  v0:= 1I;
  #L44634a.  v1.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44634e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L446360.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L446364.  v1.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v0;
  #L446368.  return @kind void;
}
procedure `java.lang.Integer` `e`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.e:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L4462d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4462dc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4462e0.  if v0 != v1 then goto L4462e8;
  #L4462e4.  v0:= 0I;
  #L4462e6.  return v0 @kind object;
  #L4462e8.  v1:= v0 + 1;
  #L4462ec.  v2.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L4462f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4462f6.  v0:= temp @kind object;
  #L4462f8.  return v0 @kind object;
}
procedure `void` `f`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.f:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L44629c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4462a0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4462a4.  if v0 != v1 then goto L4462ac;
  #L4462a8.  v0:= 1I;
  #L4462aa.  goto L4462ae;
  #L4462ac.  v0:= 0I;
  #L4462ae.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L44630c.  call temp:= `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.e:()Ljava/lang/Integer;` @kind virtual;
  #L446312.  v0:= temp @kind object;
  #L446314.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44637c.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L446382.  v0:= temp;
  #L446384.  if v0 == 0 then goto L4463bc;
  #L446388.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44638e.  v0:= temp @kind wide;
  #L446390.  v2:= 0L;
  #L446394.  v4:= lcmp(v0, v2);
  #L446398.  if v4 != 0 then goto L4463bc;
  #L44639c.  v0:= 9223372036854775807L;
  #L4463a6.  v2:= lcmp(v6, v0);
  #L4463aa.  if v2 != 0 then goto L4463b6;
  #L4463ae.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.a:()V` @kind virtual;
  #L4463b4.  goto L4463bc;
  #L4463b6.  call `f`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.f:(J)V` @kind virtual;
  #L4463bc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableRange$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L4462c0.  v1:= v1 ^& 1;
  #L4462c4.  return v1;
}
