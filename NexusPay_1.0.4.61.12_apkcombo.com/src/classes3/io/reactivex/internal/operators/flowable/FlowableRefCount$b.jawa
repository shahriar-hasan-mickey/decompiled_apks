record `io.reactivex.internal.operators.flowable.FlowableRefCount$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableRefCount$b.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind object, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4470c4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4470ca.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4470ce.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v2 @kind object;
  #L4470d2.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` := v3 @kind object;
  #L4470d6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4470e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4470ec.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4470f2.  v0:= 0I;
  #L4470f4.  v1:= 1I;
  #L4470f6.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L4470fc.  v0:= temp;
  #L4470fe.  if v0 == 0 then goto L447110;
  #L447102.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L447106.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L44710a.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L447110.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447124.  v0:= 0I;
  #L447126.  v1:= 1I;
  #L447128.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44712e.  v0:= temp;
  #L447130.  if v0 == 0 then goto L44714c;
  #L447134.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L447138.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L44713c.  call `h`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.h:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L447142.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447146.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44714c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447160.  v0:= 0I;
  #L447162.  v1:= 1I;
  #L447164.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44716a.  v0:= temp;
  #L44716c.  if v0 == 0 then goto L44718a;
  #L447170.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L447174.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447178.  call `h`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.h:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L44717e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447182.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447188.  goto L447190;
  #L44718a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L447190.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4471a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4471a8.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4471ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4471c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4471c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4471ca.  v0:= temp;
  #L4471cc.  if v0 == 0 then goto L4471de;
  #L4471d0.  v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4471d4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4471d8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4471de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableRefCount$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4471f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4471f4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4471fa.  return @kind void;
}
