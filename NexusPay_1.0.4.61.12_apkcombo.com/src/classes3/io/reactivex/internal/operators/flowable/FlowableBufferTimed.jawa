record `io.reactivex.internal.operators.flowable.FlowableBufferTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `java.util.concurrent.Callable` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Ljava/util/concurrent/Callable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L433c14.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L433c1a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` := v2 @kind wide;
  #L433c1e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` := v4 @kind wide;
  #L433c22.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L433c26.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L433c2a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` := v8 @kind object;
  #L433c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int` := v9;
  #L433c32.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @type ^`boolean` := v10 @kind boolean;
  #L433c36.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed` v11 @kind this, `org.reactivestreams.Subscriber` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L433c48.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L433c4c.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L433c50.  v4:= lcmp(v0, v2);
  #L433c54.  if v4 != 0 then goto L433c98;
  #L433c58.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int`;
  #L433c5c.  v1:= 2147483647I;
  #L433c62.  if v0 != v1 then goto L433c98;
  #L433c66.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433c6a.  v8:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b`;
  #L433c6e.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L433c72.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L433c78.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L433c7c.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L433c80.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433c84.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L433c88.  v1:= v8 @kind object;
  #L433c8a.  call `<init>`(v1, v2, v3, v4, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L433c90.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433c96.  return @kind void;
  #L433c98.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L433c9c.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L433ca2.  v9:= temp @kind object;
  #L433ca4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L433ca8.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L433cac.  v4:= lcmp(v0, v2);
  #L433cb0.  if v4 != 0 then goto L433cea;
  #L433cb4.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433cb8.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a`;
  #L433cbc.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L433cc0.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L433cc6.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L433cca.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L433cce.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433cd2.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.g` @type ^`int`;
  #L433cd6.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.h` @type ^`boolean` @kind boolean;
  #L433cda.  v1:= v10 @kind object;
  #L433cdc.  call `<init>`(v1, v2, v3, v4, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L433ce2.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433ce8.  return @kind void;
  #L433cea.  v0:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433cee.  v10:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c`;
  #L433cf2.  v2:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L433cf6.  call `<init>`(v2, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L433cfc.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L433d00.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.b` @type ^`long` @kind wide;
  #L433d04.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.c` @type ^`long` @kind wide;
  #L433d08.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableBufferTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433d0c.  v1:= v10 @kind object;
  #L433d0e.  call `<init>`(v1, v2, v3, v4, v6, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L433d14.  call `subscribe`(v0, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433d1a.  return @kind void;
}
