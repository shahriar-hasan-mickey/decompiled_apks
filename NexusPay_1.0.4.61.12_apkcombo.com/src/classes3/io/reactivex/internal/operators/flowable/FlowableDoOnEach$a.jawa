record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4394b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L4394be.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L4394c2.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L4394c6.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L4394ca.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L4394ce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4394e0.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4394e4.  if v0 == 0 then goto L4394ea;
  #L4394e8.  return @kind void;
  #L4394ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4394ee.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4394f4.  v0:= 1I;
  #L4394f6.  v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4394fa.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4394fe.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L439504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L439508.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L43950e.  goto L43951e;
  #L439510.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439512.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439518.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43951e.  return @kind void;
  #L439520.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439522.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439528.  return @kind void;
  catch `java.lang.Throwable` @[L4394ea..L4394f4] goto L439520;
  catch `java.lang.Throwable` @[L439504..L43950e] goto L439510;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L439554.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L439558.  if v0 == 0 then goto L439564;
  #L43955c.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439562.  return @kind void;
  #L439564.  v0:= 1I;
  #L439566.  v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43956a.  v1:= 0I;
  #L43956c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L439570.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439576.  goto L4395a4;
  #L439578.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43957a.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439580.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L439584.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L439588.  v5:= 2I;
  #L43958a.  v5:= new `java.lang.Throwable`[v5];
  #L43958e.  v5[v1]:= v7 @kind object;
  #L439592.  v5[v0]:= v2 @kind object;
  #L439596.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43959c.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4395a2.  v0:= 0I;
  #L4395a4.  if v0 == 0 then goto L4395b2;
  #L4395a8.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4395ac.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4395b2.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4395b6.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4395bc.  goto L4395cc;
  #L4395be.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4395c0.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4395c6.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4395cc.  return @kind void;
  catch `java.lang.Throwable` @[L43956c..L439576] goto L439578;
  catch `java.lang.Throwable` @[L4395b2..L4395bc] goto L4395be;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4395f8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4395fc.  if v0 == 0 then goto L439602;
  #L439600.  return @kind void;
  #L439602.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L439606.  if v0 == 0 then goto L439618;
  #L43960a.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43960e.  v0:= 0I;
  #L439610.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L439616.  return @kind void;
  #L439618.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43961c.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439622.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L439626.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43962c.  return @kind void;
  #L43962e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439630.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L439636.  return @kind void;
  catch `java.lang.Throwable` @[L439618..L439622] goto L43962e;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4393a8.  v0:= 0I;
  #L4393aa.  v1:= 2I;
  #L4393ac.  v2:= 1I;
  #L4393ae.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4393b2.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4393b8.  v3:= temp @kind object;
  #L4393ba.  if v3 == 0 then goto L439418;
  #L4393be.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4393c2.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4393c8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4393cc.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4393d2.  goto L439434;
  #L4393d4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4393d6.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4393dc.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4393e0.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4393e6.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L4393ec.  v0:= temp @kind object;
  #L4393ee.  throw v0;
  #L4393f0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4393f2.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L4393f6.  v1:= new `java.lang.Throwable`[v1];
  #L4393fa.  v1[v0]:= v3 @kind object;
  #L4393fe.  v1[v2]:= v4 @kind object;
  #L439402.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L439408.  throw v5;
  #L43940a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43940c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L439410.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L439416.  throw v0;
  #L439418.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L43941c.  if v0 != v2 then goto L439434;
  #L439420.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L439424.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L43942a.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L43942e.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L439434.  return v3 @kind object;
  #L439436.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439438.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43943e.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L439442.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439448.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L43944e.  v0:= temp @kind object;
  #L439450.  throw v0;
  #L439452.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439454.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L439458.  v1:= new `java.lang.Throwable`[v1];
  #L43945c.  v1[v0]:= v3 @kind object;
  #L439460.  v1[v2]:= v4 @kind object;
  #L439464.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L43946a.  throw v5;
  catch `java.lang.Throwable` @[L4393ae..L4393ba] goto L439436;
  catch `java.lang.Throwable` @[L4393be..L4393c8] goto L4393d4;
  catch `java.lang.Throwable` @[L4393d6..L4393dc] goto L43940a;
  catch `java.lang.Throwable` @[L4393dc..L4393e6] goto L4393f0;
  catch `java.lang.Throwable` @[L4393e6..L43940a] goto L43940a;
  catch `java.lang.Throwable` @[L43943e..L439448] goto L439452;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43938c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L439392.  v1:= temp;
  #L439394.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439340.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L439344.  v1:= 0I;
  #L439346.  if v0 == 0 then goto L43934c;
  #L43934a.  return v1;
  #L43934c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$a.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L439350.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439356.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43935a.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L439360.  v3:= temp;
  #L439362.  return v3;
  #L439364.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439366.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43936c.  return v1;
  catch `java.lang.Throwable` @[L43934c..L439356] goto L439364;
}
