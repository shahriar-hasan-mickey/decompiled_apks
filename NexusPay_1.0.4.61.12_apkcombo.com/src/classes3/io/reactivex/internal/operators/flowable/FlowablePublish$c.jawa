record `io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowablePublish$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublish$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L444a8c.  v0:= 0I;
  #L444a8e.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v0];
  #L444a92.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] := v1 @kind object;
  #L444a96.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v0];
  #L444a9a.  `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] := v0 @kind object;
  #L444a9e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L444ab0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L444ab6.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L444aba.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L444ac0.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L444ac4.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L444ac8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444acc.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L444ad2.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L444ad6.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L444ada.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L444ade.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L444ae4.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L444ae8.  v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int` := v4;
  #L444aec.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.a:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444958.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44495c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444962.  v0:= temp @kind object;
  #L444964.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L444968.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L44496c.  v2:= 0I;
  #L44496e.  if v0 != v1 then goto L444974;
  #L444972.  return v2;
  #L444974.  v1:= length @variable v0;
  #L444976.  v3:= v1 + 1;
  #L44497a.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v3];
  #L44497e.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L444984.  v3[v1]:= v5 @kind object;
  #L444988.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44498c.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444992.  v0:= temp;
  #L444994.  if v0 == 0 then goto L444958;
  #L444998.  v5:= 1I;
  #L44499a.  return v5;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v4 @kind this, `java.lang.Object` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4449ac.  v0:= 0I;
  #L4449ae.  if v5 == 0 then goto L444a4e;
  #L4449b2.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4449b8.  v1:= temp;
  #L4449ba.  v2:= 0I;
  #L4449bc.  v3:= 1I;
  #L4449be.  if v1 == 0 then goto L444a00;
  #L4449c2.  if v6 == 0 then goto L444a4e;
  #L4449c6.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4449ca.  call temp:= `compareAndSet`(v5, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4449d0.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4449d4.  v6:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L4449d8.  call temp:= `getAndSet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4449de.  v5:= temp @kind object;
  #L4449e0.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v5 @kind object;
  #L4449e4.  v6:= length @variable v5;
  #L4449e6.  if v0 >= v6 then goto L4449fe;
  #L4449ea.  v1:= v5[v0] @kind object;
  #L4449ee.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4449f2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4449f8.  v0:= v0 + 1;
  #L4449fc.  goto L4449e6;
  #L4449fe.  return v3;
  #L444a00.  call temp:= `getError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L444a06.  v5:= temp @kind object;
  #L444a08.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444a0c.  call temp:= `compareAndSet`(v6, v4, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444a12.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444a16.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444a1a.  call temp:= `getAndSet`(v6, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444a20.  v6:= temp @kind object;
  #L444a22.  v6:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v6 @kind object;
  #L444a26.  v1:= length @variable v6;
  #L444a28.  if v1 == 0 then goto L444a46;
  #L444a2c.  v1:= length @variable v6;
  #L444a2e.  if v0 >= v1 then goto L444a4c;
  #L444a32.  v2:= v6[v0] @kind object;
  #L444a36.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444a3a.  call `onError`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444a40.  v0:= v0 + 1;
  #L444a44.  goto L444a2e;
  #L444a46.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L444a4c.  return v3;
  #L444a4e.  return v0;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v25 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;
    v24;

  #L444b00.  v1:= v25 @kind object;
  #L444b04.  call temp:= `getAndIncrement`(v25) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L444b0a.  v0:= temp;
  #L444b0c.  if v0 == 0 then goto L444b12;
  #L444b10.  return @kind void;
  #L444b12.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444b16.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444b1c.  v0:= temp @kind object;
  #L444b1e.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L444b22.  v3:= 1I;
  #L444b24.  v4:= v0 @kind object;
  #L444b26.  v5:= 1I;
  #L444b28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L444b2c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L444b30.  if v6 == 0 then goto L444b46;
  #L444b34.  call temp:= `isEmpty`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L444b3a.  v8:= temp;
  #L444b3c.  if v8 == 0 then goto L444b42;
  #L444b40.  goto L444b46;
  #L444b42.  v8:= 0I;
  #L444b44.  goto L444b48;
  #L444b46.  v8:= 1I;
  #L444b48.  call temp:= `b`(v1, v0, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L444b4e.  v0:= temp;
  #L444b50.  if v0 == 0 then goto L444b56;
  #L444b54.  return @kind void;
  #L444b56.  if v8 != 0 then goto L444da8;
  #L444b5a.  v0:= length @variable v4;
  #L444b5c.  v9:= length @variable v4;
  #L444b5e.  v12:= 0I;
  #L444b60.  v13:= 0I;
  #L444b62.  v14:= 9223372036854775807L;
  #L444b6c.  v16:= -9223372036854775808L;
  #L444b70.  if v12 >= v9 then goto L444ba4;
  #L444b74.  v7:= v4[v12] @kind object;
  #L444b78.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L444b7e.  v18:= temp @kind wide;
  #L444b80.  v20:= lcmp(v18, v16);
  #L444b84.  if v20 == 0 then goto L444b9a;
  #L444b88.  v10:= v7.`io.reactivex.internal.operators.flowable.FlowablePublish$b.c` @type ^`long` @kind wide;
  #L444b8c.  v10:= v18 - v10 @kind long;
  #L444b90.  call temp:= `min`(v14, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L444b96.  v14:= temp @kind wide;
  #L444b98.  goto L444b9e;
  #L444b9a.  v13:= v13 + 1;
  #L444b9e.  v12:= v12 + 1;
  #L444ba2.  goto L444b6c;
  #L444ba4.  v9:= 1L;
  #L444ba8.  if v0 != v13 then goto L444c20;
  #L444bac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L444bb0.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L444bb6.  v7:= temp @kind object;
  #L444bb8.  goto L444be8;
  #L444bba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L444bbc.  v6:= v0 @kind object;
  #L444bbe.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L444bc4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444bc8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444bce.  v0:= temp @kind object;
  #L444bd0.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444bd4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444bda.  call temp:= `error`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L444be0.  v0:= temp @kind object;
  #L444be2.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L444be6.  v7:= 0I;
  #L444be8.  if v7 != 0 then goto L444bf0;
  #L444bec.  v7:= 1I;
  #L444bee.  goto L444bf2;
  #L444bf0.  v7:= 0I;
  #L444bf2.  call temp:= `b`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L444bf8.  v0:= temp;
  #L444bfa.  if v0 == 0 then goto L444c00;
  #L444bfe.  return @kind void;
  #L444c00.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L444c04.  if v0 == v3 then goto L444b28;
  #L444c08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444c0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444c12.  v0:= temp @kind object;
  #L444c14.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444c18.  call `request`(v0, v9) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L444c1e.  goto L444b28;
  #L444c20.  v11:= 0I;
  #L444c22.  v12:= (`long`) v11 @kind i2l;
  #L444c24.  v0:= lcmp(v12, v14);
  #L444c28.  if v0 >= 0 then goto L444d6c;
  #L444c2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L444c30.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L444c36.  v8:= temp @kind object;
  #L444c38.  goto L444c68;
  #L444c3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L444c3c.  v8:= v0 @kind object;
  #L444c3e.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L444c44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444c48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444c4e.  v0:= temp @kind object;
  #L444c50.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444c54.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444c5a.  call temp:= `error`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L444c60.  v0:= temp @kind object;
  #L444c62.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L444c66.  v8:= 0I;
  #L444c68.  if v8 != 0 then goto L444c70;
  #L444c6c.  v7:= 1I;
  #L444c6e.  goto L444c72;
  #L444c70.  v7:= 0I;
  #L444c72.  call temp:= `b`(v1, v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.b:(Ljava/lang/Object;Z)Z` @kind virtual;
  #L444c78.  v0:= temp;
  #L444c7a.  if v0 == 0 then goto L444c80;
  #L444c7e.  return @kind void;
  #L444c80.  if v7 == 0 then goto L444c8a;
  #L444c84.  v8:= v7;
  #L444c86.  goto L444d6c;
  #L444c8a.  call temp:= `getValue`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L444c90.  v0:= temp @kind object;
  #L444c92.  v8:= length @variable v4;
  #L444c94.  v12:= 0I;
  #L444c96.  v13:= 0I;
  #L444c98.  if v12 >= v8 then goto L444d04;
  #L444c9c.  v3:= v4[v12] @kind object;
  #L444ca0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L444ca6.  v22:= temp @kind wide;
  #L444ca8.  v24:= lcmp(v22, v16);
  #L444cac.  if v24 == 0 then goto L444ce0;
  #L444cb0.  v20:= 9223372036854775807L;
  #L444cba.  v24:= lcmp(v22, v20);
  #L444cbe.  v22:= v6 @kind object;
  #L444cc2.  v23:= v7;
  #L444cc6.  if v24 == 0 then goto L444cd4;
  #L444cca.  v6:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$b.c` @type ^`long` @kind wide;
  #L444cce.  v6:= v6 + v9 @kind long;
  #L444cd0.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$b.c` @type ^`long` := v6 @kind wide;
  #L444cd4.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444cd8.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L444cde.  goto L444cf4;
  #L444ce0.  v22:= v6 @kind object;
  #L444ce4.  v23:= v7;
  #L444ce8.  v20:= 9223372036854775807L;
  #L444cf2.  v13:= 1I;
  #L444cf4.  v12:= v12 + 1;
  #L444cf8.  v6:= v22 @kind object;
  #L444cfc.  v7:= v23;
  #L444d00.  v3:= 1I;
  #L444d02.  goto L444c98;
  #L444d04.  v22:= v6 @kind object;
  #L444d08.  v23:= v7;
  #L444d0c.  v20:= 9223372036854775807L;
  #L444d16.  v11:= v11 + 1;
  #L444d1a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444d20.  v0:= temp @kind object;
  #L444d22.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L444d26.  if v13 != 0 then goto L444d3e;
  #L444d2a.  if v0 == v4 then goto L444d30;
  #L444d2e.  goto L444d3e;
  #L444d30.  v6:= v22 @kind object;
  #L444d34.  v8:= v23;
  #L444d38.  v3:= 1I;
  #L444d3a.  goto L444c22;
  #L444d3e.  if v11 == 0 then goto L444d64;
  #L444d42.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L444d46.  v4:= 1I;
  #L444d48.  if v3 == v4 then goto L444d64;
  #L444d4c.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444d50.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444d56.  v3:= temp @kind object;
  #L444d58.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L444d5c.  v6:= (`long`) v11 @kind i2l;
  #L444d5e.  call `request`(v3, v6) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L444d64.  v4:= v0 @kind object;
  #L444d66.  v3:= 1I;
  #L444d68.  goto L444b28;
  #L444d6c.  if v11 == 0 then goto L444d92;
  #L444d70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L444d74.  v3:= 1I;
  #L444d76.  if v0 == v3 then goto L444d94;
  #L444d7a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444d7e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444d84.  v0:= temp @kind object;
  #L444d86.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L444d8a.  call `request`(v0, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L444d90.  goto L444d94;
  #L444d92.  v3:= 1I;
  #L444d94.  v6:= 0L;
  #L444d98.  v0:= lcmp(v14, v6);
  #L444d9c.  if v0 == 0 then goto L444da8;
  #L444da0.  if v8 != 0 then goto L444da8;
  #L444da4.  goto L444b28;
  #L444da8.  v0:= -v5 @kind int;
  #L444daa.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L444db0.  v5:= temp;
  #L444db2.  if v5 != 0 then goto L444db8;
  #L444db6.  return @kind void;
  #L444db8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444dbe.  v0:= temp @kind object;
  #L444dc0.  v4:= v0 @kind object;
  #L444dc2.  v4:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v4 @kind object;
  #L444dc6.  goto L444b28;
  catch `java.lang.Throwable` @[L444bb0..L444bb8] goto L444bba;
  catch `java.lang.Throwable` @[L444c30..L444c38] goto L444c3a;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublish$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L444f88.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444f8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444f92.  v0:= temp @kind object;
  #L444f94.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L444f98.  v1:= length @variable v0;
  #L444f9a.  if v1 != 0 then goto L444fa0;
  #L444f9e.  goto L445004;
  #L444fa0.  v2:= -1I;
  #L444fa2.  v3:= 0I;
  #L444fa4.  v4:= 0I;
  #L444fa6.  if v4 >= v1 then goto L444fc4;
  #L444faa.  v5:= v0[v4] @kind object;
  #L444fae.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L444fb4.  v5:= temp;
  #L444fb6.  if v5 == 0 then goto L444fbe;
  #L444fba.  v2:= v4;
  #L444fbc.  goto L444fc4;
  #L444fbe.  v4:= v4 + 1;
  #L444fc2.  goto L444fa6;
  #L444fc4.  if v2 >= 0 then goto L444fca;
  #L444fc8.  return @kind void;
  #L444fca.  v4:= 1I;
  #L444fcc.  if v1 != v4 then goto L444fd6;
  #L444fd0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.i` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444fd4.  goto L444ff4;
  #L444fd6.  v5:= v1 + -1;
  #L444fda.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublish$b`[v5];
  #L444fde.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L444fe4.  v3:= v2 + 1;
  #L444fe8.  v1:= v1 - v2 @kind int;
  #L444fea.  v1:= v1 - v4 @kind int;
  #L444fec.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L444ff2.  v1:= v5 @kind object;
  #L444ff4.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444ff8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444ffe.  v0:= temp;
  #L445000.  if v0 == 0 then goto L444f88;
  #L445004.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L444df4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444df8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444dfe.  v0:= temp @kind object;
  #L444e00.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444e04.  if v0 == v1 then goto L444e36;
  #L444e08.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444e0c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444e12.  v0:= temp @kind object;
  #L444e14.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$b`[]) v0 @kind object;
  #L444e18.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444e1c.  if v0 == v1 then goto L444e36;
  #L444e20.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444e24.  v1:= 0I;
  #L444e26.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L444e2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444e30.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L444e36.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L444a60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublish$c.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444a64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L444a6a.  v0:= temp @kind object;
  #L444a6c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublish$c.j` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$b`[] @kind object;
  #L444a70.  if v0 != v1 then goto L444a78;
  #L444a74.  v0:= 1I;
  #L444a76.  goto L444a7a;
  #L444a78.  v0:= 0I;
  #L444a7a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444e48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L444e4c.  if v0 != 0 then goto L444e62;
  #L444e50.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L444e56.  v0:= temp @kind object;
  #L444e58.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v0 @kind object;
  #L444e5c.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444e62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444e74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` @kind object;
  #L444e78.  if v0 != 0 then goto L444e90;
  #L444e7c.  call temp:= `error`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L444e82.  v2:= temp @kind object;
  #L444e84.  v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v2 @kind object;
  #L444e88.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444e8e.  goto L444e96;
  #L444e90.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L444e96.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444ea8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int`;
  #L444eac.  if v0 != 0 then goto L444ed6;
  #L444eb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L444eb4.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L444eba.  v2:= temp;
  #L444ebc.  if v2 != 0 then goto L444ed6;
  #L444ec0.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L444ec4.  v0:= "Prefetch queue is full?!" @kind object;
  #L444ec8.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L444ece.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L444ed4.  return @kind void;
  #L444ed6.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444edc.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublish$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L444ef0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444ef4.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L444efa.  v0:= temp;
  #L444efc.  if v0 == 0 then goto L444f74;
  #L444f00.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L444f04.  if v0 == 0 then goto L444f56;
  #L444f08.  v0:= v4 @kind object;
  #L444f0a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L444f0e.  v1:= 7I;
  #L444f10.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L444f16.  v1:= temp;
  #L444f18.  v2:= 1I;
  #L444f1a.  if v1 != v2 then goto L444f3a;
  #L444f1e.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int` := v1;
  #L444f22.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L444f26.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L444f2c.  v4:= temp @kind object;
  #L444f2e.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.f` @type ^`java.lang.Object` := v4 @kind object;
  #L444f32.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444f38.  return @kind void;
  #L444f3a.  v2:= 2I;
  #L444f3c.  if v1 != v2 then goto L444f56;
  #L444f40.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.g` @type ^`int` := v1;
  #L444f44.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L444f48.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L444f4c.  v0:= (`long`) v0 @kind i2l;
  #L444f4e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L444f54.  return @kind void;
  #L444f56.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L444f5a.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L444f5e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L444f64.  v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L444f68.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublish$c.b` @type ^`int`;
  #L444f6c.  v0:= (`long`) v0 @kind i2l;
  #L444f6e.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L444f74.  return @kind void;
}
