record `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableEmitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436ba8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L436bae.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L436bb2.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L436bb6.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L436bbc.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L436bc0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L436bf8.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436bfe.  v0:= temp;
  #L436c00.  if v0 == 0 then goto L436c06;
  #L436c04.  return @kind void;
  #L436c06.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436c0a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L436c10.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436c14.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L436c1a.  return @kind void;
  #L436c1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436c1e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436c22.  call `dispose`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L436c28.  throw v0;
  catch `java.lang.Throwable` @[L436c06..L436c10] goto L436c1c;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L436a88.  if v2 != 0 then goto L436a9a;
  #L436a8c.  v2:= new `java.lang.NullPointerException`;
  #L436a90.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436a94.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436a9a.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436aa0.  v0:= temp;
  #L436aa2.  if v0 == 0 then goto L436aaa;
  #L436aa6.  v2:= 0I;
  #L436aa8.  return v2;
  #L436aaa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436aae.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L436ab4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436ab8.  call `dispose`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L436abe.  v2:= 1I;
  #L436ac0.  return v2;
  #L436ac2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436ac4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436ac8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L436ace.  throw v2;
  catch `java.lang.Throwable` @[L436aaa..L436ab4] goto L436ac2;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.c:()V` @AccessFlag  {
    temp;

  #L436c84.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436bd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436bd8.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L436bde.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.d:()V` @kind virtual;
  #L436be4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.d:()V` @AccessFlag  {
    temp;

  #L436c98.  return @kind void;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436aec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436af0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.isDisposed:()Z` @kind virtual;
  #L436af6.  v0:= temp;
  #L436af8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L436c48.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L436c4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436c60.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L436c66.  v0:= temp;
  #L436c68.  if v0 != 0 then goto L436c72;
  #L436c6c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436c72.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436cac.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L436cb2.  v0:= temp;
  #L436cb4.  if v0 == 0 then goto L436cc4;
  #L436cb8.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L436cbe.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.c:()V` @kind virtual;
  #L436cc4.  return @kind void;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.requested:()J` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L436b8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L436b92.  v0:= temp @kind wide;
  #L436b94.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436b28.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCreate$i`;
  #L436b2c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$b;)V` @kind direct;
  #L436b32.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436cd8.  v0:= new `io.reactivex.internal.disposables.CancellableDisposable`;
  #L436cdc.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/disposables/CancellableDisposable;.<init>:(Lio/reactivex/functions/Cancellable;)V` @kind direct;
  #L436ce2.  call `setDisposable`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L436ce8.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L436cfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$b.b` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L436d00.  call temp:= `update`(v0, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.update:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L436d06.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L436b44.  v0:= 2I;
  #L436b46.  v0:= new `java.lang.Object`[v0];
  #L436b4a.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L436b50.  v1:= temp @kind object;
  #L436b52.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L436b58.  v1:= temp @kind object;
  #L436b5a.  v2:= 0I;
  #L436b5c.  v0[v2]:= v1 @kind object;
  #L436b60.  call temp:= `toString`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.toString:()Ljava/lang/String;` @kind super;
  #L436b66.  v1:= temp @kind object;
  #L436b68.  v2:= 1I;
  #L436b6a.  v0[v2]:= v1 @kind object;
  #L436b6e.  v1:= "%s{%s}" @kind object;
  #L436b72.  call temp:= `format`(v1, v0) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L436b78.  v0:= temp @kind object;
  #L436b7a.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$b` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;

  #L436b0c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L436b12.  v1:= temp;
  #L436b14.  return v1;
}
