record `io.reactivex.internal.operators.flowable.FlowableFilter$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a318.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L43a31e.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L43a322.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a334.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L43a33a.  v3:= temp;
  #L43a33c.  if v3 != 0 then goto L43a34e;
  #L43a340.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43a344.  v0:= 1L;
  #L43a348.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a34e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43a2cc.  v0:= v4.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L43a2d0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43a2d4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43a2da.  v2:= temp @kind object;
  #L43a2dc.  if v2 != 0 then goto L43a2e4;
  #L43a2e0.  v0:= 0I;
  #L43a2e2.  return v0 @kind object;
  #L43a2e4.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L43a2ea.  v3:= temp;
  #L43a2ec.  if v3 == 0 then goto L43a2f2;
  #L43a2f0.  return v2 @kind object;
  #L43a2f2.  v2:= v4.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L43a2f6.  v3:= 2I;
  #L43a2f8.  if v2 != v3 then goto L43a2d4;
  #L43a2fc.  v2:= 1L;
  #L43a300.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a306.  goto L43a2d4;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43a2b0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L43a2b6.  v1:= temp;
  #L43a2b8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43a240.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L43a244.  v1:= 0I;
  #L43a246.  if v0 == 0 then goto L43a24c;
  #L43a24a.  return v1;
  #L43a24c.  v0:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L43a250.  if v0 == 0 then goto L43a264;
  #L43a254.  v4:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43a258.  v0:= 0I;
  #L43a25a.  call temp:= `tryOnNext`(v4, v0) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43a260.  v4:= temp;
  #L43a262.  return v4;
  #L43a264.  v0:= 1I;
  #L43a266.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43a26a.  call temp:= `test`(v2, v4) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L43a270.  v2:= temp;
  #L43a272.  if v2 == 0 then goto L43a288;
  #L43a276.  v2:= v3.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43a27a.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43a280.  v4:= temp;
  #L43a282.  if v4 == 0 then goto L43a288;
  #L43a286.  v1:= 1I;
  #L43a288.  return v1;
  #L43a28a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a28c.  call `fail`(v3, v4) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43a292.  return v0;
  catch `java.lang.Throwable` @[L43a266..L43a272] goto L43a28a;
}
