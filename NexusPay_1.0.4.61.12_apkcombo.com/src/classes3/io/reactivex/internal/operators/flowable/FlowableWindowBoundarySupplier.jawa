record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L451194.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L45119a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L45119e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.c` @type ^`int` := v3;
  #L4511a2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L4511b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b`;
  #L4511b8.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.c` @type ^`int`;
  #L4511bc.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4511c0.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L4511c6.  v4:= v3.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4511ca.  call `subscribe`(v4, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4511d0.  return @kind void;
}
