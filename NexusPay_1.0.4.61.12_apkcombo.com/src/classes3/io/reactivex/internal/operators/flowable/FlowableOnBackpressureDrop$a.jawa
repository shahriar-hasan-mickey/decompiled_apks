record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443edc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L443ee2.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L443ee6.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L443eea.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443efc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443f00.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443f06.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443f18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L443f1c.  if v0 == 0 then goto L443f22;
  #L443f20.  return @kind void;
  #L443f22.  v0:= 1I;
  #L443f24.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` := v0 @kind boolean;
  #L443f28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443f2c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443f32.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443f44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L443f48.  if v0 == 0 then goto L443f54;
  #L443f4c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443f52.  return @kind void;
  #L443f54.  v0:= 1I;
  #L443f56.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` := v0 @kind boolean;
  #L443f5a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443f5e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443f64.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L443f78.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.d` @type ^`boolean` @kind boolean;
  #L443f7c.  if v0 == 0 then goto L443f82;
  #L443f80.  return @kind void;
  #L443f82.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443f88.  v0:= temp @kind wide;
  #L443f8a.  v2:= 0L;
  #L443f8e.  v4:= lcmp(v0, v2);
  #L443f92.  if v4 == 0 then goto L443fac;
  #L443f96.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443f9a.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443fa0.  v0:= 1L;
  #L443fa4.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L443faa.  goto L443fcc;
  #L443fac.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L443fb0.  call `accept`(v0, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L443fb6.  goto L443fcc;
  #L443fb8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443fba.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443fc0.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.cancel:()V` @kind virtual;
  #L443fc6.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443fcc.  return @kind void;
  catch `java.lang.Throwable` @[L443fac..L443fb6] goto L443fb8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443fec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443ff0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L443ff6.  v0:= temp;
  #L443ff8.  if v0 == 0 then goto L44401a;
  #L443ffc.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L444000.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444004.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44400a.  v0:= 9223372036854775807L;
  #L444014.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44401a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureDrop$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureDrop$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44402c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L444032.  v0:= temp;
  #L444034.  if v0 == 0 then goto L44403e;
  #L444038.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44403e.  return @kind void;
}
