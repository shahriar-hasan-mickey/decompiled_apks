record `io.reactivex.internal.operators.flowable.FlowableCollect$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.flowable.FlowableCollect$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollect$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCollect$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCollect$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L434274.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43427a.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$a.a` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L43427e.  v0.`io.reactivex.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L434282.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434294.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L43429a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43429e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4342a4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4342b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L4342bc.  if v0 == 0 then goto L4342c2;
  #L4342c0.  return @kind void;
  #L4342c2.  v0:= 1I;
  #L4342c4.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4342c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L4342cc.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L4342d2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4342e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L4342e8.  if v0 == 0 then goto L4342f4;
  #L4342ec.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4342f2.  return @kind void;
  #L4342f4.  v0:= 1I;
  #L4342f6.  v1.`io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4342fa.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4342fe.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434304.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434318.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.d` @type ^`boolean` @kind boolean;
  #L43431c.  if v0 == 0 then goto L434322;
  #L434320.  return @kind void;
  #L434322.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.a` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L434326.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.b` @type ^`java.lang.Object` @kind object;
  #L43432a.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L434330.  goto L43434a;
  #L434332.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434334.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43433a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43433e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L434344.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43434a.  return @kind void;
  catch `java.lang.Throwable` @[L434322..L434330] goto L434332;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollect$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollect$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434368.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43436c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L434372.  v0:= temp;
  #L434374.  if v0 == 0 then goto L434396;
  #L434378.  v2.`io.reactivex.internal.operators.flowable.FlowableCollect$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43437c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434380.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L434386.  v0:= 9223372036854775807L;
  #L434390.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L434396.  return @kind void;
}
