record `io.reactivex.internal.operators.flowable.FlowableDebounce$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounce$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43780c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L437812.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L437816.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43781c.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L437820.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L437824.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L437828.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.a:(JLjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L437864.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L437868.  v2:= lcmp(v4, v0);
  #L43786c.  if v2 != 0 then goto L4378b8;
  #L437870.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L437876.  v4:= temp @kind wide;
  #L437878.  v0:= 0L;
  #L43787c.  v2:= lcmp(v4, v0);
  #L437880.  if v2 == 0 then goto L43789a;
  #L437884.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437888.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43788e.  v4:= 1L;
  #L437892.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437898.  goto L4378b8;
  #L43789a.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L4378a0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4378a4.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4378a8.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L4378ac.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4378b2.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4378b8.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43783c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437840.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L437846.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43784a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L437850.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4378cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L4378d0.  if v0 == 0 then goto L4378d6;
  #L4378d4.  return @kind void;
  #L4378d6.  v0:= 1I;
  #L4378d8.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4378dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4378e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4378e6.  v0:= temp @kind object;
  #L4378e8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4378ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4378f2.  v1:= temp;
  #L4378f4.  if v1 != 0 then goto L43791a;
  #L4378f8.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounce$a$a`) v0 @kind object;
  #L4378fc.  if v0 == 0 then goto L437906;
  #L437900.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a$a;.a:()V` @kind virtual;
  #L437906.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43790a.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L437910.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437914.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43791a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43792c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L437930.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L437936.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43793a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L437940.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L437954.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.f` @type ^`boolean` @kind boolean;
  #L437958.  if v0 == 0 then goto L43795e;
  #L43795c.  return @kind void;
  #L43795e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` @kind wide;
  #L437962.  v2:= 1L;
  #L437966.  v0:= v0 + v2 @kind long;
  #L437968.  v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.e` @type ^`long` := v0 @kind wide;
  #L43796c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L437970.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L437976.  v2:= temp @kind object;
  #L437978.  v2:= (`io.reactivex.disposables.Disposable`) v2 @kind object;
  #L43797c.  if v2 == 0 then goto L437986;
  #L437980.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437986.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43798a.  call temp:= `apply`(v3, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L437990.  v3:= temp @kind object;
  #L437992.  v4:= "The publisher supplied is null" @kind object;
  #L437996.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43799c.  v3:= temp @kind object;
  #L43799e.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L4379a2.  v4:= new `io.reactivex.internal.operators.flowable.FlowableDebounce$a$a`;
  #L4379a6.  call `<init>`(v4, v5, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;JLjava/lang/Object;)V` @kind direct;
  #L4379ac.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4379b0.  call temp:= `compareAndSet`(v6, v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4379b6.  v6:= temp;
  #L4379b8.  if v6 == 0 then goto L4379c2;
  #L4379bc.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4379c2.  return @kind void;
  #L4379c4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4379c6.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4379cc.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.cancel:()V` @kind virtual;
  #L4379d2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4379d6.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4379dc.  return @kind void;
  catch `java.lang.Throwable` @[L437986..L4379a2] goto L4379c4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4379fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437a00.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L437a06.  v0:= temp;
  #L437a08.  if v0 == 0 then goto L437a2a;
  #L437a0c.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L437a10.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounce$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437a14.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L437a1a.  v0:= 9223372036854775807L;
  #L437a24.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L437a2a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounce$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounce$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437a3c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L437a42.  v0:= temp;
  #L437a44.  if v0 == 0 then goto L437a4e;
  #L437a48.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437a4e.  return @kind void;
}
