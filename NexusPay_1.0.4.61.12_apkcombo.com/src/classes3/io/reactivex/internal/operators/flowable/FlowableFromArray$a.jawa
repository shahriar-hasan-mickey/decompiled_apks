record `io.reactivex.internal.operators.flowable.FlowableFromArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromArray$c` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;[Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d2d4.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @kind direct;
  #L43d2da.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L43d2de.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d2f0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d2f4.  v1:= length @variable v0;
  #L43d2f6.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43d2fa.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d2fe.  if v3 == v1 then goto L43d35e;
  #L43d302.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d306.  if v4 == 0 then goto L43d30c;
  #L43d30a.  return @kind void;
  #L43d30c.  v4:= v0[v3] @kind object;
  #L43d310.  if v4 != 0 then goto L43d352;
  #L43d314.  v0:= new `java.lang.NullPointerException`;
  #L43d318.  v1:= new `java.lang.StringBuilder`;
  #L43d31c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43d322.  v4:= "The element at index " @kind object;
  #L43d326.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d32c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d332.  v3:= " is null" @kind object;
  #L43d336.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d33c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43d342.  v1:= temp @kind object;
  #L43d344.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d34a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d350.  return @kind void;
  #L43d352.  call temp:= `tryOnNext`(v2, v4) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43d358.  v3:= v3 + 1;
  #L43d35c.  goto L43d2fe;
  #L43d35e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d362.  if v0 == 0 then goto L43d368;
  #L43d366.  return @kind void;
  #L43d368.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43d36e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromArray$a` v10 @kind this, `long` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$a;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L43d380.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d384.  v1:= length @variable v0;
  #L43d386.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d38a.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$a.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43d38e.  v4:= 0L;
  #L43d392.  v6:= v4 @kind wide;
  #L43d394.  v8:= lcmp(v6, v11);
  #L43d398.  if v8 == 0 then goto L43d408;
  #L43d39c.  if v2 == v1 then goto L43d408;
  #L43d3a0.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d3a4.  if v8 == 0 then goto L43d3aa;
  #L43d3a8.  return @kind void;
  #L43d3aa.  v8:= v0[v2] @kind object;
  #L43d3ae.  if v8 != 0 then goto L43d3f0;
  #L43d3b2.  v11:= new `java.lang.NullPointerException`;
  #L43d3b6.  v12:= new `java.lang.StringBuilder`;
  #L43d3ba.  call `<init>`(v12) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L43d3c0.  v0:= "The element at index " @kind object;
  #L43d3c4.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d3ca.  call temp:= `append`(v12, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d3d0.  v0:= " is null" @kind object;
  #L43d3d4.  call temp:= `append`(v12, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L43d3da.  call temp:= `toString`(v12) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L43d3e0.  v12:= temp @kind object;
  #L43d3e2.  call `<init>`(v11, v12) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d3e8.  call `onError`(v3, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d3ee.  return @kind void;
  #L43d3f0.  call temp:= `tryOnNext`(v3, v8) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43d3f6.  v8:= temp;
  #L43d3f8.  if v8 == 0 then goto L43d402;
  #L43d3fc.  v8:= 1L;
  #L43d400.  v6:= v6 + v8 @kind long;
  #L43d402.  v2:= v2 + 1;
  #L43d406.  goto L43d394;
  #L43d408.  if v2 != v1 then goto L43d41c;
  #L43d40c.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` @kind boolean;
  #L43d410.  if v11 != 0 then goto L43d41a;
  #L43d414.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43d41a.  return @kind void;
  #L43d41c.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43d422.  v11:= temp @kind wide;
  #L43d424.  v8:= lcmp(v6, v11);
  #L43d428.  if v8 != 0 then goto L43d394;
  #L43d42c.  v10.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L43d430.  v11:= -v6 @kind long;
  #L43d432.  call temp:= `addAndGet`(v10, v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43d438.  v11:= temp @kind wide;
  #L43d43a.  v6:= lcmp(v11, v4);
  #L43d43e.  if v6 != 0 then goto L43d392;
  #L43d442.  return @kind void;
}
