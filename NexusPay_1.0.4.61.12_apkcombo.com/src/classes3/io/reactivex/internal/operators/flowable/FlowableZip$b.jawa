record `io.reactivex.internal.operators.flowable.FlowableZip$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableZip$a` `io.reactivex.internal.operators.flowable.FlowableZip$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.c` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableZip$b.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableZip$b.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZip$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableZip$b.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableZip$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableZip$a` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableZip$a;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L453050.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L453056.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` := v1 @kind object;
  #L45305a.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int` := v2;
  #L45305e.  v1:= v2 ^> 2;
  #L453062.  v2:= v2 - v1 @kind int;
  #L453064.  v0.`io.reactivex.internal.operators.flowable.FlowableZip$b.c` @type ^`int` := v2;
  #L453068.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L45307c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L453082.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453094.  v0:= 1I;
  #L453096.  v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v0 @kind boolean;
  #L45309a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L45309e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4530a4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4530b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4530bc.  call `c`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.c:(Lio/reactivex/internal/operators/flowable/FlowableZip$b;Ljava/lang/Throwable;)V` @kind virtual;
  #L4530c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4530d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L4530d8.  v1:= 2I;
  #L4530da.  if v0 == v1 then goto L4530e8;
  #L4530de.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4530e2.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4530e8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L4530ec.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L4530f2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L453104.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45310a.  v0:= temp;
  #L45310c.  if v0 == 0 then goto L453180;
  #L453110.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L453114.  if v0 == 0 then goto L453162;
  #L453118.  v0:= v4 @kind object;
  #L45311a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L45311e.  v1:= 7I;
  #L453120.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L453126.  v1:= temp;
  #L453128.  v2:= 1I;
  #L45312a.  if v1 != v2 then goto L453146;
  #L45312e.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L453132.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L453136.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.f` @type ^`boolean` := v2 @kind boolean;
  #L45313a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableZip$a` @kind object;
  #L45313e.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$a;.b:()V` @kind virtual;
  #L453144.  return @kind void;
  #L453146.  v2:= 2I;
  #L453148.  if v1 != v2 then goto L453162;
  #L45314c.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int` := v1;
  #L453150.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L453154.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L453158.  v0:= (`long`) v0 @kind i2l;
  #L45315a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L453160.  return @kind void;
  #L453162.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L453166.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L45316a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L453170.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L453174.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.b` @type ^`int`;
  #L453178.  v0:= (`long`) v0 @kind i2l;
  #L45317a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L453180.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZip$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZip$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L453194.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.g` @type ^`int`;
  #L453198.  v1:= 1I;
  #L45319a.  if v0 == v1 then goto L4531d2;
  #L45319e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` @kind wide;
  #L4531a2.  v0:= v0 + v4 @kind long;
  #L4531a4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.c` @type ^`int`;
  #L4531a8.  v4:= (`long`) v4 @kind i2l;
  #L4531aa.  v2:= lcmp(v0, v4);
  #L4531ae.  if v2 < 0 then goto L4531ce;
  #L4531b2.  v4:= 0L;
  #L4531b6.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v4 @kind wide;
  #L4531ba.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4531c0.  v4:= temp @kind object;
  #L4531c2.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4531c6.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4531cc.  goto L4531d2;
  #L4531ce.  v3.`io.reactivex.internal.operators.flowable.FlowableZip$b.e` @type ^`long` := v0 @kind wide;
  #L4531d2.  return @kind void;
}
