record `io.reactivex.internal.operators.flowable.FlowableRange$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRange$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRange$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRange$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4464d0.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$a;.<init>:(II)V` @kind direct;
  #L4464d6.  v0.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4464da.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4464ec.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L4464f0.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4464f4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L4464f8.  if v2 == v0 then goto L44651a;
  #L4464fc.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L446500.  if v3 == 0 then goto L446506;
  #L446504.  return @kind void;
  #L446506.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44650c.  v3:= temp @kind object;
  #L44650e.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L446514.  v2:= v2 + 1;
  #L446518.  goto L4464f8;
  #L44651a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L44651e.  if v0 == 0 then goto L446524;
  #L446522.  return @kind void;
  #L446524.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44652a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRange$c` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRange$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44653c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.a` @type ^`int`;
  #L446540.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int`;
  #L446544.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L446548.  v3:= 0L;
  #L44654c.  v5:= v3 @kind wide;
  #L44654e.  v7:= lcmp(v5, v10);
  #L446552.  if v7 == 0 then goto L44657e;
  #L446556.  if v1 == v0 then goto L44657e;
  #L44655a.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L44655e.  if v7 == 0 then goto L446564;
  #L446562.  return @kind void;
  #L446564.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44656a.  v7:= temp @kind object;
  #L44656c.  call `onNext`(v2, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L446572.  v7:= 1L;
  #L446576.  v5:= v5 + v7 @kind long;
  #L446578.  v1:= v1 + 1;
  #L44657c.  goto L44654e;
  #L44657e.  if v1 != v0 then goto L446592;
  #L446582.  v10:= v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.c` @type ^`boolean` @kind boolean;
  #L446586.  if v10 != 0 then goto L446590;
  #L44658a.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L446590.  return @kind void;
  #L446592.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L446598.  v10:= temp @kind wide;
  #L44659a.  v7:= lcmp(v5, v10);
  #L44659e.  if v7 != 0 then goto L44654e;
  #L4465a2.  v9.`io.reactivex.internal.operators.flowable.FlowableRange$a.b` @type ^`int` := v1;
  #L4465a6.  v10:= -v5 @kind long;
  #L4465a8.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4465ae.  v10:= temp @kind wide;
  #L4465b0.  v5:= lcmp(v10, v3);
  #L4465b4.  if v5 != 0 then goto L44654c;
  #L4465b8.  return @kind void;
}
