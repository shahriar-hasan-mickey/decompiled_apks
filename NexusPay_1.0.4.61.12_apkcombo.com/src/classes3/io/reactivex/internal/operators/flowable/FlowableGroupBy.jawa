record `io.reactivex.internal.operators.flowable.FlowableGroupBy` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy.f` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 , `io.reactivex.functions.Function` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43ef4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L43ef52.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43ef56.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43ef5a.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @type ^`int` := v4;
  #L43ef5e.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @type ^`boolean` := v5 @kind boolean;
  #L43ef62.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy.f` @type ^`io.reactivex.functions.Function` := v6 @kind object;
  #L43ef66.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableGroupBy` v10 @kind this, `org.reactivestreams.Subscriber` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L43ef78.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L43ef7c.  if v0 != 0 then goto L43ef92;
  #L43ef80.  v0:= 0I;
  #L43ef82.  v1:= new `java.util.concurrent.ConcurrentHashMap`;
  #L43ef86.  call `<init>`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L43ef8c.  v9:= v0 @kind object;
  #L43ef8e.  v8:= v1 @kind object;
  #L43ef90.  goto L43efb8;
  #L43ef92.  v0:= new `java.util.concurrent.ConcurrentLinkedQueue`;
  #L43ef96.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentLinkedQueue;.<init>:()V` @kind direct;
  #L43ef9c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy$a`;
  #L43efa0.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$a;.<init>:(Ljava/util/Queue;)V` @kind direct;
  #L43efa6.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.f` @type ^`io.reactivex.functions.Function` @kind object;
  #L43efaa.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43efb0.  v1:= temp @kind object;
  #L43efb2.  v1:= (`java.util.Map`) v1 @kind object;
  #L43efb6.  goto L43ef8c;
  #L43efb8.  v0:= new `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber`;
  #L43efbc.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43efc0.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43efc4.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.d` @type ^`int`;
  #L43efc8.  v7:= v10.`io.reactivex.internal.operators.flowable.FlowableGroupBy.e` @type ^`boolean` @kind boolean;
  #L43efcc.  v2:= v0 @kind object;
  #L43efce.  v3:= v11 @kind object;
  #L43efd0.  call `<init>`(v2, v3, v4, v5, v6, v7, v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLjava/util/Map;Ljava/util/Queue;)V` @kind direct;
  #L43efd6.  v11:= v10.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L43efda.  call `subscribe`(v11, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L43efe0.  return @kind void;
  #L43efe2.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L43efe4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43efea.  v1:= `@@io.reactivex.internal.util.EmptyComponent.INSTANCE` @type ^`io.reactivex.internal.util.EmptyComponent` @kind object;
  #L43efee.  call `onSubscribe`(v11, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43eff4.  call `onError`(v11, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43effa.  return @kind void;
  catch `java.lang.Exception` @[L43ef78..L43efb6] goto L43efe2;
}
