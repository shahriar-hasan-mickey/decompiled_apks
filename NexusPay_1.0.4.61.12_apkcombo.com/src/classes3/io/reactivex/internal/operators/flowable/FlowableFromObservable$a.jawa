record `io.reactivex.internal.operators.flowable.FlowableFromObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.Observer` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableFromObservable$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43de54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43de5a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43de5e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43de70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L43de74.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43de7a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43de8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43de90.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43de96.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43dea8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43deac.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43deb2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43dec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43dec8.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43dece.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L43dee0.  v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.b` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L43dee4.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFromObservable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43dee8.  call `onSubscribe`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43deee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromObservable$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromObservable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L43df00.  return @kind void;
}
