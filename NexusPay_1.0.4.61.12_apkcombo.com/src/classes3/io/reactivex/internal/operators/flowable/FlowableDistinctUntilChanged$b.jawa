record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438b74.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L438b7a.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438b7e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L438b82.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438b94.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L438b9a.  v3:= temp;
  #L438b9c.  if v3 != 0 then goto L438bae;
  #L438ba0.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438ba4.  v0:= 1L;
  #L438ba8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438bae.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438af8.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L438afc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L438b02.  v0:= temp @kind object;
  #L438b04.  if v0 != 0 then goto L438b0c;
  #L438b08.  v0:= 0I;
  #L438b0a.  return v0 @kind object;
  #L438b0c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L438b10.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L438b16.  v1:= temp @kind object;
  #L438b18.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L438b1c.  v3:= 1I;
  #L438b1e.  if v2 != 0 then goto L438b2c;
  #L438b22.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v3 @kind boolean;
  #L438b26.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L438b2a.  return v0 @kind object;
  #L438b2c.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L438b30.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L438b34.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L438b3a.  v2:= temp;
  #L438b3c.  if v2 != 0 then goto L438b46;
  #L438b40.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L438b44.  return v0 @kind object;
  #L438b46.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v1 @kind object;
  #L438b4a.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L438b4e.  if v0 == v3 then goto L438af8;
  #L438b52.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438b56.  v1:= 1L;
  #L438b5a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438b60.  goto L438af8;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L438adc.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L438ae2.  v1:= temp;
  #L438ae4.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438a50.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L438a54.  v1:= 0I;
  #L438a56.  if v0 == 0 then goto L438a5c;
  #L438a5a.  return v1;
  #L438a5c.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L438a60.  v2:= 1I;
  #L438a62.  if v0 == 0 then goto L438a72;
  #L438a66.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438a6a.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438a70.  return v2;
  #L438a72.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L438a76.  call temp:= `apply`(v0, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L438a7c.  v0:= temp @kind object;
  #L438a7e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` @kind boolean;
  #L438a82.  if v3 == 0 then goto L438aa0;
  #L438a86.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L438a8a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` @kind object;
  #L438a8e.  call temp:= `test`(v3, v4, v0) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L438a94.  v3:= temp;
  #L438a96.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L438a9a.  if v3 == 0 then goto L438aa8;
  #L438a9e.  return v1;
  #L438aa0.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.d` @type ^`boolean` := v2 @kind boolean;
  #L438aa4.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L438aa8.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438aac.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438ab2.  return v2;
  #L438ab4.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438ab6.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438abc.  return v2;
  catch `java.lang.Throwable` @[L438a72..L438aa8] goto L438ab4;
}
