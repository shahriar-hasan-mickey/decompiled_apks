record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.g` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `int` v8 , `boolean` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44d1a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L44d1ae.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.b` @type ^`long` := v2 @kind wide;
  #L44d1b2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.c` @type ^`long` := v4 @kind wide;
  #L44d1b6.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L44d1ba.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L44d1be.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.f` @type ^`int` := v8;
  #L44d1c2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.g` @type ^`boolean` := v9 @kind boolean;
  #L44d1c6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed` v12 @kind this, `org.reactivestreams.Subscriber` v13 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44d1d8.  v0:= v12.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L44d1dc.  v11:= new `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a`;
  #L44d1e0.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.b` @type ^`long` @kind wide;
  #L44d1e4.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.c` @type ^`long` @kind wide;
  #L44d1e8.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44d1ec.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L44d1f0.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.f` @type ^`int`;
  #L44d1f4.  v10:= v12.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed.g` @type ^`boolean` @kind boolean;
  #L44d1f8.  v1:= v11 @kind object;
  #L44d1fa.  v2:= v13 @kind object;
  #L44d1fc.  call `<init>`(v1, v2, v3, v5, v7, v8, v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @kind direct;
  #L44d202.  call `subscribe`(v0, v11) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L44d208.  return @kind void;
}
