record `io.reactivex.internal.operators.flowable.FlowableSampleTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSampleTimed.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L449bbc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L449bc2.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.b` @type ^`long` := v2 @kind wide;
  #L449bc6.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L449bca.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L449bce.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.e` @type ^`boolean` := v6 @kind boolean;
  #L449bd2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L449be4.  v1:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L449be8.  call `<init>`(v1, v8) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L449bee.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.e` @type ^`boolean` @kind boolean;
  #L449bf2.  if v8 == 0 then goto L449c1a;
  #L449bf6.  v8:= v7.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L449bfa.  v6:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed$a`;
  #L449bfe.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.b` @type ^`long` @kind wide;
  #L449c02.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449c06.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L449c0a.  v0:= v6 @kind object;
  #L449c0c.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L449c12.  call `subscribe`(v8, v6) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L449c18.  goto L449c3c;
  #L449c1a.  v8:= v7.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L449c1e.  v6:= new `io.reactivex.internal.operators.flowable.FlowableSampleTimed$b`;
  #L449c22.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.b` @type ^`long` @kind wide;
  #L449c26.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449c2a.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableSampleTimed.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L449c2e.  v0:= v6 @kind object;
  #L449c30.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L449c36.  call `subscribe`(v8, v6) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L449c3c.  return @kind void;
}
