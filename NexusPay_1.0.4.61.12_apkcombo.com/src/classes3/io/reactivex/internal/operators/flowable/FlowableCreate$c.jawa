record `io.reactivex.internal.operators.flowable.FlowableCreate$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436d68.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L436d6e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L436d72.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L436d78.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L436d7c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L436d80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L436d86.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L436d8a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.c:()V` @AccessFlag  {
    temp;

  #L436f18.  call `e`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.e:()V` @kind virtual;
  #L436f1e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L436f30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L436f34.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L436f3a.  v0:= temp;
  #L436f3c.  if v0 != 0 then goto L436f4a;
  #L436f40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L436f44.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L436f4a.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L436d9c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L436da0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L436da6.  v0:= temp;
  #L436da8.  if v0 == 0 then goto L436dae;
  #L436dac.  return @kind void;
  #L436dae.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436db2.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L436db6.  v2:= 1I;
  #L436db8.  v3:= 1I;
  #L436dba.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L436dc0.  v4:= temp @kind wide;
  #L436dc2.  v6:= 0L;
  #L436dc6.  v8:= v6 @kind wide;
  #L436dc8.  v10:= lcmp(v8, v4);
  #L436dcc.  if v10 == 0 then goto L436e2e;
  #L436dd0.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436dd6.  v11:= temp;
  #L436dd8.  if v11 == 0 then goto L436de4;
  #L436ddc.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L436de2.  return @kind void;
  #L436de4.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L436de8.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L436dee.  v12:= temp @kind object;
  #L436df0.  if v12 != 0 then goto L436df8;
  #L436df4.  v13:= 1I;
  #L436df6.  goto L436dfa;
  #L436df8.  v13:= 0I;
  #L436dfa.  if v11 == 0 then goto L436e1a;
  #L436dfe.  if v13 == 0 then goto L436e1a;
  #L436e02.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L436e06.  if v0 == 0 then goto L436e12;
  #L436e0a.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L436e10.  goto L436e18;
  #L436e12.  call `a`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L436e18.  return @kind void;
  #L436e1a.  if v13 == 0 then goto L436e20;
  #L436e1e.  goto L436e2e;
  #L436e20.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L436e26.  v10:= 1L;
  #L436e2a.  v8:= v8 + v10 @kind long;
  #L436e2c.  goto L436dc8;
  #L436e2e.  if v10 != 0 then goto L436e72;
  #L436e32.  call temp:= `isCancelled`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436e38.  v4:= temp;
  #L436e3a.  if v4 == 0 then goto L436e46;
  #L436e3e.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L436e44.  return @kind void;
  #L436e46.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L436e4a.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L436e50.  v5:= temp;
  #L436e52.  if v4 == 0 then goto L436e72;
  #L436e56.  if v5 == 0 then goto L436e72;
  #L436e5a.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` @kind object;
  #L436e5e.  if v0 == 0 then goto L436e6a;
  #L436e62.  call temp:= `b`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L436e68.  goto L436e70;
  #L436e6a.  call `a`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L436e70.  return @kind void;
  #L436e72.  v4:= lcmp(v8, v6);
  #L436e76.  if v4 == 0 then goto L436e80;
  #L436e7a.  call temp:= `produced`(v14, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L436e80.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCreate$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L436e84.  v3:= -v3 @kind int;
  #L436e86.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L436e8c.  v3:= temp;
  #L436e8e.  if v3 != 0 then goto L436dba;
  #L436e92.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436ea4.  v0:= 1I;
  #L436ea6.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v0 @kind boolean;
  #L436eaa.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.e:()V` @kind virtual;
  #L436eb0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436ec4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L436ec8.  if v0 != 0 then goto L436f04;
  #L436ecc.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436ed2.  v0:= temp;
  #L436ed4.  if v0 == 0 then goto L436eda;
  #L436ed8.  goto L436f04;
  #L436eda.  if v2 != 0 then goto L436ef4;
  #L436ede.  v2:= new `java.lang.NullPointerException`;
  #L436ee2.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436ee6.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436eec.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436ef2.  return @kind void;
  #L436ef4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L436ef8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L436efe.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.e:()V` @kind virtual;
  #L436f04.  return @kind void;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436d18.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` @kind boolean;
  #L436d1c.  if v0 != 0 then goto L436d52;
  #L436d20.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436d26.  v0:= temp;
  #L436d28.  if v0 == 0 then goto L436d2e;
  #L436d2c.  goto L436d52;
  #L436d2e.  if v2 != 0 then goto L436d40;
  #L436d32.  v2:= new `java.lang.NullPointerException`;
  #L436d36.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436d3a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436d40.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.d` @type ^`java.lang.Throwable` := v2 @kind object;
  #L436d44.  v2:= 1I;
  #L436d46.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$c.e` @type ^`boolean` := v2 @kind boolean;
  #L436d4a.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$c;.e:()V` @kind virtual;
  #L436d50.  return v2;
  #L436d52.  v2:= 0I;
  #L436d54.  return v2;
}
