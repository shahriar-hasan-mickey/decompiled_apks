record `io.reactivex.internal.operators.flowable.FlowableAny$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAny$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAny$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAny$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAny$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4312b0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4312b6.  v0.`io.reactivex.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L4312ba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312cc.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L4312d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4312d6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4312dc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4312f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L4312f4.  if v0 != 0 then goto L431308;
  #L4312f8.  v0:= 1I;
  #L4312fa.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L4312fe.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L431302.  call `complete`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L431308.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43131c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L431320.  if v0 == 0 then goto L43132c;
  #L431324.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43132a.  return @kind void;
  #L43132c.  v0:= 1I;
  #L43132e.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v0 @kind boolean;
  #L431332.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431336.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43133c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431350.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` @kind boolean;
  #L431354.  if v0 == 0 then goto L43135a;
  #L431358.  return @kind void;
  #L43135a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43135e.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L431364.  v2:= temp;
  #L431366.  if v2 == 0 then goto L431384;
  #L43136a.  v2:= 1I;
  #L43136c.  v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.c` @type ^`boolean` := v2 @kind boolean;
  #L431370.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431374.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43137a.  v2:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L43137e.  call `complete`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L431384.  return @kind void;
  #L431386.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431388.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43138e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431392.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L431398.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43139e.  return @kind void;
  catch `java.lang.Throwable` @[L43135a..L431366] goto L431386;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAny$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAny$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4313bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4313c0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4313c6.  v0:= temp;
  #L4313c8.  if v0 == 0 then goto L4313ea;
  #L4313cc.  v2.`io.reactivex.internal.operators.flowable.FlowableAny$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4313d0.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4313d4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4313da.  v0:= 9223372036854775807L;
  #L4313e4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4313ea.  return @kind void;
}
