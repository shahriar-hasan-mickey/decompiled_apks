record `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BooleanSupplier` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BooleanSupplier` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BooleanSupplier;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4476b8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4476be.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4476c2.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L4476c6.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L4476ca.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` := v2 @kind object;
  #L4476ce.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L447798.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44779e.  v0:= temp;
  #L4477a0.  if v0 != 0 then goto L4477ee;
  #L4477a4.  v0:= 1I;
  #L4477a6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4477aa.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4477b0.  v1:= temp;
  #L4477b2.  if v1 == 0 then goto L4477b8;
  #L4477b6.  return @kind void;
  #L4477b8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L4477bc.  v3:= 0L;
  #L4477c0.  v5:= lcmp(v1, v3);
  #L4477c4.  if v5 == 0 then goto L4477d6;
  #L4477c8.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v3 @kind wide;
  #L4477cc.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4477d0.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4477d6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4477da.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4477e0.  v0:= -v0 @kind int;
  #L4477e2.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4477e8.  v0:= temp;
  #L4477ea.  if v0 != 0 then goto L4477a6;
  #L4477ee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4476e0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.d` @type ^`io.reactivex.functions.BooleanSupplier` @kind object;
  #L4476e4.  call temp:= `getAsBoolean`(v0) @signature `Lio/reactivex/functions/BooleanSupplier;.getAsBoolean:()Z` @kind interface;
  #L4476ea.  v0:= temp;
  #L4476ec.  if v0 == 0 then goto L4476fc;
  #L4476f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4476f4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4476fa.  goto L447702;
  #L4476fc.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.a:()V` @kind virtual;
  #L447702.  return @kind void;
  #L447704.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L447706.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44770c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447710.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L447716.  return @kind void;
  catch `java.lang.Throwable` @[L4476e0..L4476ec] goto L447704;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447734.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447738.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44773e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L447750.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` @kind wide;
  #L447754.  v2:= 1L;
  #L447758.  v0:= v0 + v2 @kind long;
  #L44775a.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.e` @type ^`long` := v0 @kind wide;
  #L44775e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447762.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447768.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44777c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatUntil$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L447780.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L447786.  return @kind void;
}
