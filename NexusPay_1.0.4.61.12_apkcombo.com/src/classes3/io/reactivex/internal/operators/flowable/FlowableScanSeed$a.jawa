record `io.reactivex.internal.operators.flowable.FlowableScanSeed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableScanSeed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L449f94.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L449f9a.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L449f9e.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L449fa2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L449fa6.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int` := v4;
  #L449faa.  v1:= v4 ^> 2;
  #L449fae.  v1:= v4 - v1 @kind int;
  #L449fb2.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int` := v1;
  #L449fb6.  v1:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L449fba.  call `<init>`(v1, v4) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L449fc0.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v1 @kind object;
  #L449fc4.  call temp:= `offer`(v1, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L449fca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L449fce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L449fd4.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L449fd8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L44a024.  v0:= v18 @kind object;
  #L44a028.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44a02e.  v1:= temp;
  #L44a030.  if v1 == 0 then goto L44a036;
  #L44a034.  return @kind void;
  #L44a036.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44a03a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44a03e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.f` @type ^`int`;
  #L44a042.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int`;
  #L44a046.  v5:= 1I;
  #L44a048.  v6:= 1I;
  #L44a04a.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44a04e.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44a054.  v7:= temp @kind wide;
  #L44a056.  v9:= 0L;
  #L44a05a.  v11:= v9 @kind wide;
  #L44a05c.  v13:= lcmp(v11, v7);
  #L44a060.  if v13 == 0 then goto L44a0e6;
  #L44a064.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` @kind boolean;
  #L44a068.  if v14 == 0 then goto L44a074;
  #L44a06c.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44a072.  return @kind void;
  #L44a074.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L44a078.  if v14 == 0 then goto L44a092;
  #L44a07c.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L44a080.  if v15 == 0 then goto L44a092;
  #L44a084.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44a08a.  call `onError`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44a090.  return @kind void;
  #L44a092.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44a098.  v15:= temp @kind object;
  #L44a09a.  v16:= 0I;
  #L44a09e.  if v15 != 0 then goto L44a0a8;
  #L44a0a2.  v17:= 1I;
  #L44a0a6.  goto L44a0ac;
  #L44a0a8.  v17:= 0I;
  #L44a0ac.  if v14 == 0 then goto L44a0bc;
  #L44a0b0.  if v17 == 0 then goto L44a0bc;
  #L44a0b4.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44a0ba.  return @kind void;
  #L44a0bc.  if v17 == 0 then goto L44a0c2;
  #L44a0c0.  goto L44a0e6;
  #L44a0c2.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44a0c8.  v13:= 1L;
  #L44a0cc.  v11:= v11 + v13 @kind long;
  #L44a0ce.  v4:= v4 + 1;
  #L44a0d2.  if v4 != v3 then goto L44a05c;
  #L44a0d6.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44a0da.  v13:= (`long`) v3 @kind i2l;
  #L44a0dc.  call `request`(v4, v13) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44a0e2.  v4:= 0I;
  #L44a0e4.  goto L44a05c;
  #L44a0e6.  if v13 != 0 then goto L44a11c;
  #L44a0ea.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L44a0ee.  if v7 == 0 then goto L44a11c;
  #L44a0f2.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` @kind object;
  #L44a0f6.  if v7 == 0 then goto L44a108;
  #L44a0fa.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44a100.  call `onError`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44a106.  return @kind void;
  #L44a108.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44a10e.  v7:= temp;
  #L44a110.  if v7 == 0 then goto L44a11c;
  #L44a114.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44a11a.  return @kind void;
  #L44a11c.  v7:= lcmp(v11, v9);
  #L44a120.  if v7 == 0 then goto L44a12e;
  #L44a124.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44a128.  call temp:= `produced`(v7, v11) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44a12e.  v0.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.l` @type ^`int` := v4;
  #L44a132.  v6:= -v6 @kind int;
  #L44a134.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44a13a.  v6:= temp;
  #L44a13c.  if v6 != 0 then goto L44a04a;
  #L44a140.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449fec.  v0:= 1I;
  #L449fee.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.g` @type ^`boolean` := v0 @kind boolean;
  #L449ff2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449ff6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L449ffc.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44a002.  v0:= temp;
  #L44a004.  if v0 != 0 then goto L44a012;
  #L44a008.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44a00c.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44a012.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a154.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L44a158.  if v0 == 0 then goto L44a15e;
  #L44a15c.  return @kind void;
  #L44a15e.  v0:= 1I;
  #L44a160.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v0 @kind boolean;
  #L44a164.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L44a16a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a17c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L44a180.  if v0 == 0 then goto L44a18c;
  #L44a184.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44a18a.  return @kind void;
  #L44a18c.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L44a190.  v2:= 1I;
  #L44a192.  v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` := v2 @kind boolean;
  #L44a196.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L44a19c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44a1b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.h` @type ^`boolean` @kind boolean;
  #L44a1b4.  if v0 == 0 then goto L44a1ba;
  #L44a1b8.  return @kind void;
  #L44a1ba.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` @kind object;
  #L44a1be.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L44a1c2.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44a1c8.  v3:= temp @kind object;
  #L44a1ca.  v0:= "The accumulator returned a null value" @kind object;
  #L44a1ce.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44a1d4.  v3:= temp @kind object;
  #L44a1d6.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.k` @type ^`java.lang.Object` := v3 @kind object;
  #L44a1da.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44a1de.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44a1e4.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L44a1ea.  return @kind void;
  #L44a1ec.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44a1ee.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44a1f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44a1f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44a1fe.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44a204.  return @kind void;
  catch `java.lang.Throwable` @[L44a1be..L44a1d6] goto L44a1ec;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44a224.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44a228.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44a22e.  v0:= temp;
  #L44a230.  if v0 == 0 then goto L44a252;
  #L44a234.  v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44a238.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44a23c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44a242.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.e` @type ^`int`;
  #L44a246.  v0:= v0 + -1;
  #L44a24a.  v0:= (`long`) v0 @kind i2l;
  #L44a24c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44a252.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScanSeed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a264.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44a26a.  v0:= temp;
  #L44a26c.  if v0 == 0 then goto L44a280;
  #L44a270.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScanSeed$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44a274.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44a27a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScanSeed$a;.a:()V` @kind virtual;
  #L44a280.  return @kind void;
}
