record `io.reactivex.internal.operators.flowable.FlowableBuffer$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431d14.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L431d1a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L431d1e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int` := v2;
  #L431d22.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int` := v3;
  #L431d26.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L431d2a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431d3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431d40.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L431d46.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431d58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L431d5c.  if v0 == 0 then goto L431d62;
  #L431d60.  return @kind void;
  #L431d62.  v0:= 1I;
  #L431d64.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L431d68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L431d6c.  v1:= 0I;
  #L431d6e.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v1 @kind object;
  #L431d72.  if v0 == 0 then goto L431d80;
  #L431d76.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431d7a.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431d80.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431d84.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L431d8a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431d9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L431da0.  if v0 == 0 then goto L431dac;
  #L431da4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431daa.  return @kind void;
  #L431dac.  v0:= 1I;
  #L431dae.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` := v0 @kind boolean;
  #L431db2.  v0:= 0I;
  #L431db4.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L431db8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431dbc.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431dc2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L431dd4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.g` @type ^`boolean` @kind boolean;
  #L431dd8.  if v0 == 0 then goto L431dde;
  #L431ddc.  return @kind void;
  #L431dde.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` @kind object;
  #L431de2.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int`;
  #L431de6.  v2:= v1 + 1;
  #L431dea.  if v1 != 0 then goto L431e26;
  #L431dee.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L431df2.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L431df8.  v0:= temp @kind object;
  #L431dfa.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L431dfe.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L431e04.  v0:= temp @kind object;
  #L431e06.  v0:= (`java.util.Collection`) v0 @kind object;
  #L431e0a.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v0 @kind object;
  #L431e0e.  goto L431e26;
  #L431e10.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431e12.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431e18.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.cancel:()V` @kind virtual;
  #L431e1e.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L431e24.  return @kind void;
  #L431e26.  if v0 == 0 then goto L431e50;
  #L431e2a.  call temp:= `add`(v0, v4) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L431e30.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L431e36.  v4:= temp;
  #L431e38.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L431e3c.  if v4 != v1 then goto L431e50;
  #L431e40.  v4:= 0I;
  #L431e42.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.e` @type ^`java.util.Collection` := v4 @kind object;
  #L431e46.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431e4a.  call `onNext`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431e50.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L431e54.  if v2 != v4 then goto L431e5a;
  #L431e58.  v2:= 0I;
  #L431e5a.  v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.h` @type ^`int` := v2;
  #L431e5e.  return @kind void;
  catch `java.lang.Throwable` @[L431dee..L431e0a] goto L431e10;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431e7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431e80.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L431e86.  v0:= temp;
  #L431e88.  if v0 == 0 then goto L431e9a;
  #L431e8c.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L431e90.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431e94.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L431e9a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L431eac.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L431eb2.  v0:= temp;
  #L431eb4.  if v0 == 0 then goto L431f28;
  #L431eb8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L431ebe.  v0:= temp;
  #L431ec0.  if v0 != 0 then goto L431f10;
  #L431ec4.  v0:= 0I;
  #L431ec6.  v1:= 1I;
  #L431ec8.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L431ece.  v0:= temp;
  #L431ed0.  if v0 == 0 then goto L431f10;
  #L431ed4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L431ed8.  v0:= (`long`) v0 @kind i2l;
  #L431eda.  call temp:= `multiplyCap`(v7, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431ee0.  v0:= temp @kind wide;
  #L431ee2.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L431ee6.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.c` @type ^`int`;
  #L431eea.  v2:= v2 - v3 @kind int;
  #L431eec.  v2:= (`long`) v2 @kind i2l;
  #L431eee.  v4:= 1L;
  #L431ef2.  v7:= v7 - v4 @kind long;
  #L431ef4.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431efa.  v7:= temp @kind wide;
  #L431efc.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431f00.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L431f06.  v7:= temp @kind wide;
  #L431f08.  call `request`(v2, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431f0e.  goto L431f28;
  #L431f10.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431f14.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableBuffer$c.d` @type ^`int`;
  #L431f18.  v1:= (`long`) v1 @kind i2l;
  #L431f1a.  call temp:= `multiplyCap`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431f20.  v7:= temp @kind wide;
  #L431f22.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431f28.  return @kind void;
}
