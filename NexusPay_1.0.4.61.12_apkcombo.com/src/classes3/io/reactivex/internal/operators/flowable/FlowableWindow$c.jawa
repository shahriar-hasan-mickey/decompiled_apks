record `io.reactivex.internal.operators.flowable.FlowableWindow$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44fdbc.  v0:= 1I;
  #L44fdbe.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L44fdc4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44fdc8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` := v3 @kind wide;
  #L44fdcc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` := v5 @kind wide;
  #L44fdd0.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44fdd4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44fdda.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44fdde.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44fde2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44fde8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44fdec.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @type ^`int` := v7;
  #L44fdf0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44fe04.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fe08.  v1:= 0I;
  #L44fe0a.  v2:= 1I;
  #L44fe0c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44fe12.  v0:= temp;
  #L44fe14.  if v0 == 0 then goto L44fe1e;
  #L44fe18.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.run:()V` @kind virtual;
  #L44fe1e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44fe30.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44fe34.  if v0 == 0 then goto L44fe44;
  #L44fe38.  v1:= 0I;
  #L44fe3a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L44fe3e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44fe44.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44fe48.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44fe4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44fe60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44fe64.  if v0 == 0 then goto L44fe74;
  #L44fe68.  v1:= 0I;
  #L44fe6a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L44fe6e.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fe74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44fe78.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fe7e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44fe90.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` @kind wide;
  #L44fe94.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44fe98.  v3:= 0L;
  #L44fe9c.  v5:= lcmp(v0, v3);
  #L44fea0.  if v5 != 0 then goto L44fec4;
  #L44fea4.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44feaa.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.f` @type ^`int`;
  #L44feae.  call temp:= `create`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L44feb4.  v2:= temp @kind object;
  #L44feb6.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L44feba.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44febe.  call `onNext`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44fec4.  v5:= 1L;
  #L44fec8.  v0:= v0 + v5 @kind long;
  #L44feca.  if v2 == 0 then goto L44fed4;
  #L44fece.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44fed4.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L44fed8.  v8:= lcmp(v0, v5);
  #L44fedc.  if v8 != 0 then goto L44feec;
  #L44fee0.  v8:= 0I;
  #L44fee2.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.i` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L44fee6.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L44feec.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L44fef0.  v8:= lcmp(v0, v5);
  #L44fef4.  if v8 != 0 then goto L44fefe;
  #L44fef8.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v3 @kind wide;
  #L44fefc.  goto L44ff02;
  #L44fefe.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$c.g` @type ^`long` := v0 @kind wide;
  #L44ff02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ff14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ff18.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ff1e.  v0:= temp;
  #L44ff20.  if v0 == 0 then goto L44ff32;
  #L44ff24.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44ff28.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ff2c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44ff32.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44ff44.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44ff4a.  v0:= temp;
  #L44ff4c.  if v0 == 0 then goto L44ffc2;
  #L44ff50.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44ff54.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44ff5a.  v0:= temp;
  #L44ff5c.  if v0 != 0 then goto L44ffac;
  #L44ff60.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.e` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44ff64.  v1:= 0I;
  #L44ff66.  v2:= 1I;
  #L44ff68.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44ff6e.  v0:= temp;
  #L44ff70.  if v0 == 0 then goto L44ffac;
  #L44ff74.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L44ff78.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44ff7e.  v0:= temp @kind wide;
  #L44ff80.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L44ff84.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.b` @type ^`long` @kind wide;
  #L44ff88.  v2:= v2 - v4 @kind long;
  #L44ff8a.  v4:= 1L;
  #L44ff8e.  v7:= v7 - v4 @kind long;
  #L44ff90.  call temp:= `multiplyCap`(v2, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44ff96.  v7:= temp @kind wide;
  #L44ff98.  call temp:= `addCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L44ff9e.  v7:= temp @kind wide;
  #L44ffa0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ffa4.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ffaa.  goto L44ffc2;
  #L44ffac.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.c` @type ^`long` @kind wide;
  #L44ffb0.  call temp:= `multiplyCap`(v0, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44ffb6.  v7:= temp @kind wide;
  #L44ffb8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ffbc.  call `request`(v0, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ffc2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ffd4.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44ffda.  v0:= temp;
  #L44ffdc.  if v0 != 0 then goto L44ffea;
  #L44ffe0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$c.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ffe4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ffea.  return @kind void;
}
