record `io.reactivex.internal.operators.flowable.FlowableReplay$l` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$l.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v0 @kind this, `int` v1 , `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L448970.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.<init>:()V` @kind direct;
  #L448976.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L44897a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @type ^`int` := v1;
  #L44897e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` := v2 @kind wide;
  #L448982.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L448986.  return @kind void;
}
procedure `java.lang.Object` `e`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.e:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448920.  v0:= new `io.reactivex.schedulers.Timed`;
  #L448924.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L448928.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44892c.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L448932.  v1:= temp @kind wide;
  #L448934.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448938.  call `<init>`(v0, v5, v1, v3) @signature `Lio/reactivex/schedulers/Timed;.<init>:(Ljava/lang/Object;JLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L44893e.  return v0 @kind object;
}
procedure `io.reactivex.internal.operators.flowable.FlowableReplay$f` `f`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.f:()Lio/reactivex/internal/operators/flowable/FlowableReplay$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L448884.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L448888.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44888c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L448892.  v0:= temp @kind wide;
  #L448894.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L448898.  v0:= v0 - v2 @kind long;
  #L44889a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4488a0.  v2:= temp @kind object;
  #L4488a2.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L4488a6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4488ac.  v3:= temp @kind object;
  #L4488ae.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L4488b2.  v7:= v3 @kind object;
  #L4488b4.  v3:= v2 @kind object;
  #L4488b6.  v2:= v7 @kind object;
  #L4488b8.  if v2 != 0 then goto L4488be;
  #L4488bc.  goto L44890e;
  #L4488be.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L4488c2.  v4:= (`io.reactivex.schedulers.Timed`) v4 @kind object;
  #L4488c6.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4488cc.  v5:= temp @kind object;
  #L4488ce.  call temp:= `isComplete`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L4488d4.  v5:= temp;
  #L4488d6.  if v5 != 0 then goto L44890e;
  #L4488da.  call temp:= `value`(v4) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L4488e0.  v5:= temp @kind object;
  #L4488e2.  call temp:= `isError`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L4488e8.  v5:= temp;
  #L4488ea.  if v5 == 0 then goto L4488f0;
  #L4488ee.  goto L44890e;
  #L4488f0.  call temp:= `time`(v4) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L4488f6.  v4:= temp @kind wide;
  #L4488f8.  v6:= lcmp(v4, v0);
  #L4488fc.  if v6 > 0 then goto L44890e;
  #L448900.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448906.  v3:= temp @kind object;
  #L448908.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L44890c.  goto L4488b2;
  #L44890e.  return v3 @kind object;
}
procedure `java.lang.Object` `g`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.g:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag  {
    temp;

  #L448950.  v1:= (`io.reactivex.schedulers.Timed`) v1 @kind object;
  #L448954.  call temp:= `value`(v1) @signature `Lio/reactivex/schedulers/Timed;.value:()Ljava/lang/Object;` @kind virtual;
  #L44895a.  v1:= temp @kind object;
  #L44895c.  return v1 @kind object;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L448998.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L44899c.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4489a0.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L4489a6.  v0:= temp @kind wide;
  #L4489a8.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L4489ac.  v0:= v0 - v2 @kind long;
  #L4489ae.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4489b4.  v2:= temp @kind object;
  #L4489b6.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L4489ba.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4489c0.  v3:= temp @kind object;
  #L4489c2.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L4489c6.  v4:= 0I;
  #L4489c8.  v9:= v3 @kind object;
  #L4489ca.  v3:= v2 @kind object;
  #L4489cc.  v2:= v9 @kind object;
  #L4489ce.  if v2 == 0 then goto L448a32;
  #L4489d2.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L4489d6.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.g` @type ^`int`;
  #L4489da.  v7:= 1I;
  #L4489dc.  if v5 <= v6 then goto L4489fe;
  #L4489e0.  if v5 <= v7 then goto L4489fe;
  #L4489e4.  v4:= v4 + 1;
  #L4489e8.  v5:= v5 + -1;
  #L4489ec.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v5;
  #L4489f0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4489f6.  v3:= temp @kind object;
  #L4489f8.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L4489fc.  goto L4489c8;
  #L4489fe.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L448a02.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L448a06.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L448a0c.  v5:= temp @kind wide;
  #L448a0e.  v8:= lcmp(v5, v0);
  #L448a12.  if v8 > 0 then goto L448a32;
  #L448a16.  v4:= v4 + 1;
  #L448a1a.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L448a1e.  v3:= v3 - v7 @kind int;
  #L448a20.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v3;
  #L448a24.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448a2a.  v3:= temp @kind object;
  #L448a2c.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L448a30.  goto L4489c8;
  #L448a32.  if v4 == 0 then goto L448a3c;
  #L448a36.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L448a3c.  return @kind void;
}
procedure `void` `l`(`io.reactivex.internal.operators.flowable.FlowableReplay$l` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$l;.l:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L448a50.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L448a54.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L448a58.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L448a5e.  v0:= temp @kind wide;
  #L448a60.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$l.e` @type ^`long` @kind wide;
  #L448a64.  v0:= v0 - v2 @kind long;
  #L448a66.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448a6c.  v2:= temp @kind object;
  #L448a6e.  v2:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v2 @kind object;
  #L448a72.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448a78.  v3:= temp @kind object;
  #L448a7a.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L448a7e.  v4:= 0I;
  #L448a80.  v9:= v3 @kind object;
  #L448a82.  v3:= v2 @kind object;
  #L448a84.  v2:= v9 @kind object;
  #L448a86.  if v2 == 0 then goto L448ac8;
  #L448a8a.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L448a8e.  v6:= 1I;
  #L448a90.  if v5 <= v6 then goto L448ac8;
  #L448a94.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$f.a` @type ^`java.lang.Object` @kind object;
  #L448a98.  v5:= (`io.reactivex.schedulers.Timed`) v5 @kind object;
  #L448a9c.  call temp:= `time`(v5) @signature `Lio/reactivex/schedulers/Timed;.time:()J` @kind virtual;
  #L448aa2.  v7:= temp @kind wide;
  #L448aa4.  v5:= lcmp(v7, v0);
  #L448aa8.  if v5 > 0 then goto L448ac8;
  #L448aac.  v4:= v4 + 1;
  #L448ab0.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L448ab4.  v3:= v3 - v6 @kind int;
  #L448ab6.  v10.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int` := v3;
  #L448aba.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448ac0.  v3:= temp @kind object;
  #L448ac2.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$f`) v3 @kind object;
  #L448ac6.  goto L448a80;
  #L448ac8.  if v4 == 0 then goto L448ad2;
  #L448acc.  call `i`(v10, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.i:(Lio/reactivex/internal/operators/flowable/FlowableReplay$f;)V` @kind virtual;
  #L448ad2.  return @kind void;
}
