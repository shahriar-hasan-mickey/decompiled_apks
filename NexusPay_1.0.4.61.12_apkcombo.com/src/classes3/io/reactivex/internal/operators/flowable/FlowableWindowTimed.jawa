record `io.reactivex.internal.operators.flowable.FlowableWindowTimed` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed.h` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object, `long` v8 , `int` v10 , `boolean` v11 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.<init>:(Lio/reactivex/Flowable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;JIZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L452170.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L452176.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` := v2 @kind wide;
  #L45217a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` := v4 @kind wide;
  #L45217e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L452182.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L452186.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` := v8 @kind wide;
  #L45218a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int` := v10;
  #L45218e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` := v11 @kind boolean;
  #L452192.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed` v11 @kind this, `org.reactivestreams.Subscriber` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4521a4.  v1:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L4521a8.  call `<init>`(v1, v12) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4521ae.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4521b2.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.c` @type ^`long` @kind wide;
  #L4521b6.  v12:= lcmp(v2, v4);
  #L4521ba.  if v12 != 0 then goto L452224;
  #L4521be.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.f` @type ^`long` @kind wide;
  #L4521c2.  v4:= 9223372036854775807L;
  #L4521cc.  v12:= lcmp(v7, v4);
  #L4521d0.  if v12 != 0 then goto L4521fc;
  #L4521d4.  v12:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4521d8.  v7:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b`;
  #L4521dc.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.b` @type ^`long` @kind wide;
  #L4521e0.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4521e4.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L4521e8.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L4521ec.  v0:= v7 @kind object;
  #L4521ee.  call `<init>`(v0, v1, v2, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @kind direct;
  #L4521f4.  call `subscribe`(v12, v7) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4521fa.  return @kind void;
  #L4521fc.  v12:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L452200.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a`;
  #L452204.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L452208.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L45220c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L452210.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.h` @type ^`boolean` @kind boolean;
  #L452214.  v0:= v10 @kind object;
  #L452216.  call `<init>`(v0, v1, v2, v4, v5, v6, v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @kind direct;
  #L45221c.  call `subscribe`(v12, v10) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L452222.  return @kind void;
  #L452224.  v12:= v11.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L452228.  v9:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c`;
  #L45222c.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L452230.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L452234.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L45223a.  v7:= temp @kind object;
  #L45223c.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed.g` @type ^`int`;
  #L452240.  v0:= v9 @kind object;
  #L452242.  call `<init>`(v0, v1, v2, v4, v6, v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @kind direct;
  #L452248.  call `subscribe`(v12, v9) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L45224e.  return @kind void;
}
