record `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44f2fc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f302.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44f306.  v0.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L44f30a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f31c.  v0:= 0I;
  #L44f31e.  v1:= 1I;
  #L44f320.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44f326.  v0:= temp;
  #L44f328.  if v0 == 0 then goto L44f340;
  #L44f32c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L44f330.  v1:= new `io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a$a`;
  #L44f334.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;)V` @kind direct;
  #L44f33a.  call temp:= `scheduleDirect`(v0, v1) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44f340.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f354.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44f35a.  v0:= temp;
  #L44f35c.  if v0 != 0 then goto L44f36a;
  #L44f360.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f364.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f36a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f37c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44f382.  v0:= temp;
  #L44f384.  if v0 == 0 then goto L44f390;
  #L44f388.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44f38e.  return @kind void;
  #L44f390.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f394.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f39a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f3ac.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44f3b2.  v0:= temp;
  #L44f3b4.  if v0 != 0 then goto L44f3c2;
  #L44f3b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f3bc.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44f3c2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f3d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f3d8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44f3de.  v0:= temp;
  #L44f3e0.  if v0 == 0 then goto L44f3f2;
  #L44f3e4.  v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44f3e8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f3ec.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44f3f2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUnsubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f404.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUnsubscribeOn$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f408.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44f40e.  return @kind void;
}
