record `io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind class @AccessFlag FINAL extends `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableAmb$b`[] `io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L430eb8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430ebe.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L430ec2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L430ec8.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L430ecc.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L430ed0.  v2:= new `io.reactivex.internal.operators.flowable.FlowableAmb$b`[v3];
  #L430ed4.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] := v2 @kind object;
  #L430ed8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v7 @kind this, `org.reactivestreams.Publisher`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.a:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L430f9c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L430fa0.  v1:= length @variable v0;
  #L430fa2.  v2:= 0I;
  #L430fa4.  v3:= 0I;
  #L430fa6.  if v3 >= v1 then goto L430fc4;
  #L430faa.  v4:= new `io.reactivex.internal.operators.flowable.FlowableAmb$b`;
  #L430fae.  v5:= v3 + 1;
  #L430fb2.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L430fb6.  call `<init>`(v4, v7, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @kind direct;
  #L430fbc.  v0[v3]:= v4 @kind object;
  #L430fc0.  v3:= v5;
  #L430fc2.  goto L430fa6;
  #L430fc4.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430fc8.  call `lazySet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L430fce.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L430fd2.  call `onSubscribe`(v3, v7) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L430fd8.  if v2 >= v1 then goto L431002;
  #L430fdc.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430fe0.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L430fe6.  v3:= temp;
  #L430fe8.  if v3 == 0 then goto L430fee;
  #L430fec.  return @kind void;
  #L430fee.  v3:= v8[v2] @kind object;
  #L430ff2.  v4:= v0[v2] @kind object;
  #L430ff6.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L430ffc.  v2:= v2 + 1;
  #L431000.  goto L430fd8;
  #L431002.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L430e60.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430e64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L430e6a.  v0:= temp;
  #L430e6c.  v1:= 0I;
  #L430e6e.  if v0 != 0 then goto L430ea6;
  #L430e72.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430e76.  call temp:= `compareAndSet`(v0, v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L430e7c.  v0:= temp;
  #L430e7e.  if v0 == 0 then goto L430ea6;
  #L430e82.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L430e86.  v2:= length @variable v0;
  #L430e88.  if v1 >= v2 then goto L430ea2;
  #L430e8c.  v3:= v1 + 1;
  #L430e90.  if v3 == v5 then goto L430e9e;
  #L430e94.  v1:= v0[v1] @kind object;
  #L430e98.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L430e9e.  v1:= v3;
  #L430ea0.  goto L430e88;
  #L430ea2.  v5:= 1I;
  #L430ea4.  return v5;
  #L430ea6.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L430eec.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430ef0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L430ef6.  v0:= temp;
  #L430ef8.  v1:= -1I;
  #L430efa.  if v0 == v1 then goto L430f24;
  #L430efe.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430f02.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L430f08.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L430f0c.  v1:= length @variable v0;
  #L430f0e.  v2:= 0I;
  #L430f10.  if v2 >= v1 then goto L430f24;
  #L430f14.  v3:= v0[v2] @kind object;
  #L430f18.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @kind virtual;
  #L430f1e.  v2:= v2 + 1;
  #L430f22.  goto L430f10;
  #L430f24.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L430f38.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L430f3e.  v0:= temp;
  #L430f40.  if v0 == 0 then goto L430f88;
  #L430f44.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.c` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L430f48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L430f4e.  v0:= temp;
  #L430f50.  if v0 <= 0 then goto L430f68;
  #L430f54.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L430f58.  v0:= v0 + -1;
  #L430f5c.  v0:= v1[v0] @kind object;
  #L430f60.  call `request`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L430f66.  goto L430f88;
  #L430f68.  if v0 != 0 then goto L430f88;
  #L430f6c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableAmb$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$b`[] @kind object;
  #L430f70.  v1:= length @variable v0;
  #L430f72.  v2:= 0I;
  #L430f74.  if v2 >= v1 then goto L430f88;
  #L430f78.  v3:= v0[v2] @kind object;
  #L430f7c.  call `request`(v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @kind virtual;
  #L430f82.  v2:= v2 + 1;
  #L430f86.  goto L430f74;
  #L430f88.  return @kind void;
}
