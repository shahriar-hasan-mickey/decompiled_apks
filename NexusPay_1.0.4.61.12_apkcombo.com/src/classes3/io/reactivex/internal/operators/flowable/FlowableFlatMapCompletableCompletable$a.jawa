record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.CompletableObserver` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v0 @kind this, `io.reactivex.CompletableObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b708.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43b70e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` := v1 @kind object;
  #L43b712.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43b716.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L43b71a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43b71e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43b724.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43b728.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43b72c.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43b732.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43b736.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int` := v4;
  #L43b73a.  v1:= 1I;
  #L43b73c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43b742.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L43b780.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b784.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b78a.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onComplete:()V` @kind virtual;
  #L43b790.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43b7a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b7a8.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b7ae.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b7b4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b754.  v0:= 1I;
  #L43b756.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L43b75a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b75e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b764.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b768.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43b76e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b6e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b6ec.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.isDisposed:()Z` @kind virtual;
  #L43b6f2.  v0:= temp;
  #L43b6f4.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43b7c8.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43b7ce.  v0:= temp;
  #L43b7d0.  if v0 != 0 then goto L43b7fc;
  #L43b7d4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b7d8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b7de.  v0:= temp @kind object;
  #L43b7e0.  if v0 == 0 then goto L43b7f0;
  #L43b7e4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43b7e8.  call `onError`(v1, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b7ee.  goto L43b818;
  #L43b7f0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43b7f4.  call `onComplete`(v0) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L43b7fa.  goto L43b818;
  #L43b7fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L43b800.  v1:= 2147483647I;
  #L43b806.  if v0 == v1 then goto L43b818;
  #L43b80a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b80e.  v1:= 1L;
  #L43b812.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b818.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b82c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b830.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43b836.  v0:= temp;
  #L43b838.  if v0 == 0 then goto L43b8b2;
  #L43b83c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.d` @type ^`boolean` @kind boolean;
  #L43b840.  if v3 == 0 then goto L43b886;
  #L43b844.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43b84a.  v3:= temp;
  #L43b84c.  if v3 != 0 then goto L43b868;
  #L43b850.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b854.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b85a.  v3:= temp @kind object;
  #L43b85c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43b860.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b866.  goto L43b8b8;
  #L43b868.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L43b86c.  v0:= 2147483647I;
  #L43b872.  if v3 == v0 then goto L43b8b8;
  #L43b876.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b87a.  v0:= 1L;
  #L43b87e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b884.  goto L43b8b8;
  #L43b886.  call `dispose`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.dispose:()V` @kind virtual;
  #L43b88c.  v3:= 0I;
  #L43b88e.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L43b894.  v3:= temp;
  #L43b896.  if v3 <= 0 then goto L43b8b8;
  #L43b89a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b89e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b8a4.  v3:= temp @kind object;
  #L43b8a6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43b8aa.  call `onError`(v0, v3) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b8b0.  goto L43b8b8;
  #L43b8b2.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b8b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b8cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43b8d0.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b8d6.  v3:= temp @kind object;
  #L43b8d8.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L43b8dc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43b8e2.  v3:= temp @kind object;
  #L43b8e4.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L43b8e8.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43b8ee.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a$a`;
  #L43b8f2.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;)V` @kind direct;
  #L43b8f8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.h` @type ^`boolean` @kind boolean;
  #L43b8fc.  if v1 != 0 then goto L43b916;
  #L43b900.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b904.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b90a.  v1:= temp;
  #L43b90c.  if v1 == 0 then goto L43b916;
  #L43b910.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L43b916.  return @kind void;
  #L43b918.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b91a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b920.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b924.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b92a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b930.  return @kind void;
  catch `java.lang.Throwable` @[L43b8cc..L43b8e8] goto L43b918;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletableCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b950.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b954.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43b95a.  v0:= temp;
  #L43b95c.  if v0 == 0 then goto L43b996;
  #L43b960.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43b964.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L43b968.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43b96e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletableCompletable$a.f` @type ^`int`;
  #L43b972.  v1:= 2147483647I;
  #L43b978.  if v0 != v1 then goto L43b98e;
  #L43b97c.  v0:= 9223372036854775807L;
  #L43b986.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b98c.  goto L43b996;
  #L43b98e.  v0:= (`long`) v0 @kind i2l;
  #L43b990.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b996.  return @kind void;
}
