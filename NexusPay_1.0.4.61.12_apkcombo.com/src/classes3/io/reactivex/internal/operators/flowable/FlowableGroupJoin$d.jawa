record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f800.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f806.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` := v1 @kind object;
  #L43f80a.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.b` @type ^`boolean` := v2 @kind boolean;
  #L43f80e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43f820.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43f826.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f7d8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f7de.  v0:= temp @kind object;
  #L43f7e0.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43f7e4.  if v0 != v1 then goto L43f7ec;
  #L43f7e8.  v0:= 1I;
  #L43f7ea.  goto L43f7ee;
  #L43f7ec.  v0:= 0I;
  #L43f7ee.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f838.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L43f83c.  call `e`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.e:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;)V` @kind interface;
  #L43f842.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f854.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L43f858.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f85e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f870.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind object;
  #L43f874.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d.b` @type ^`boolean` @kind boolean;
  #L43f878.  call `b`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;.b:(ZLjava/lang/Object;)V` @kind interface;
  #L43f87e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43f890.  v0:= 9223372036854775807L;
  #L43f89a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L43f8a0.  return @kind void;
}
