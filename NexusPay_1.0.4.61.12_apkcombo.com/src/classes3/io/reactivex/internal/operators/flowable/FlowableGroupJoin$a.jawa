record `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43f01c.  v0:= 1I;
  #L43f01e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f024.  v0:= temp @kind object;
  #L43f026.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L43f02a.  v0:= 2I;
  #L43f02c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f032.  v0:= temp @kind object;
  #L43f034.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L43f038.  v0:= 3I;
  #L43f03a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f040.  v0:= temp @kind object;
  #L43f042.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L43f046.  v0:= 4I;
  #L43f048.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f04e.  v0:= temp @kind object;
  #L43f050.  `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L43f054.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43f068.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43f06e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L43f072.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43f076.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43f07c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L43f080.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43f084.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43f08a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L43f08e.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43f092.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L43f098.  v0:= temp;
  #L43f09a.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43f0a0.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L43f0a4.  v2:= new `java.util.LinkedHashMap`;
  #L43f0a8.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43f0ae.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L43f0b2.  v2:= new `java.util.LinkedHashMap`;
  #L43f0b6.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L43f0bc.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L43f0c0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43f0c4.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43f0ca.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43f0ce.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43f0d2.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43f0d6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L43f0da.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43f0de.  v3:= 2I;
  #L43f0e0.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43f0e6.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L43f0ea.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f634.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f638.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43f63e.  v0:= temp;
  #L43f640.  if v0 == 0 then goto L43f656;
  #L43f644.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43f648.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43f64e.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L43f654.  goto L43f65c;
  #L43f656.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43f65c.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f670.  @monitorenter v1
  #L43f672.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43f676.  if v2 == 0 then goto L43f680;
  #L43f67a.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43f67e.  goto L43f684;
  #L43f680.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43f684.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f68a.  @monitorexit v1
  #L43f68c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L43f692.  return @kind void;
  #L43f694.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f696.  @monitorexit v1
  #L43f698.  throw v2;
  catch `java.lang.Throwable` @[L43f672..L43f68c] goto L43f694;
  catch `java.lang.Throwable` @[L43f696..L43f698] goto L43f694;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f5d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f5dc.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43f5e2.  v0:= temp;
  #L43f5e4.  if v0 == 0 then goto L43f5f0;
  #L43f5e8.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L43f5ee.  goto L43f5f6;
  #L43f5f0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43f5f6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f0fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L43f100.  if v0 == 0 then goto L43f106;
  #L43f104.  return @kind void;
  #L43f106.  v0:= 1I;
  #L43f108.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L43f10c.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L43f112.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43f118.  v0:= temp;
  #L43f11a.  if v0 != 0 then goto L43f128;
  #L43f11e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43f122.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43f128.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f588.  @monitorenter v1
  #L43f58a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43f58e.  if v2 == 0 then goto L43f598;
  #L43f592.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L43f596.  goto L43f59c;
  #L43f598.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L43f59c.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43f5a2.  @monitorexit v1
  #L43f5a4.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L43f5aa.  return @kind void;
  #L43f5ac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f5ae.  @monitorexit v1
  #L43f5b0.  throw v2;
  catch `java.lang.Throwable` @[L43f58a..L43f5a4] goto L43f5ac;
  catch `java.lang.Throwable` @[L43f5ae..L43f5b0] goto L43f5ac;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f608.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f60c.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f612.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43f616.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43f61c.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @kind virtual;
  #L43f622.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L43f13c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f140.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43f146.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L43f158.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43f15e.  v0:= temp;
  #L43f160.  if v0 == 0 then goto L43f166;
  #L43f164.  return @kind void;
  #L43f166.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43f16a.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43f16e.  v2:= 1I;
  #L43f170.  v3:= 1I;
  #L43f172.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.n` @type ^`boolean` @kind boolean;
  #L43f176.  if v4 == 0 then goto L43f182;
  #L43f17a.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43f180.  return @kind void;
  #L43f182.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f186.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f18c.  v4:= temp @kind object;
  #L43f18e.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L43f192.  if v4 == 0 then goto L43f1aa;
  #L43f196.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43f19c.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L43f1a2.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43f1a8.  return @kind void;
  #L43f1aa.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43f1ae.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43f1b4.  v4:= temp;
  #L43f1b6.  v5:= 0I;
  #L43f1b8.  if v4 != 0 then goto L43f1c0;
  #L43f1bc.  v4:= 1I;
  #L43f1be.  goto L43f1c2;
  #L43f1c0.  v4:= 0I;
  #L43f1c2.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43f1c8.  v6:= temp @kind object;
  #L43f1ca.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L43f1ce.  if v6 != 0 then goto L43f1d6;
  #L43f1d2.  v7:= 1I;
  #L43f1d4.  goto L43f1d8;
  #L43f1d6.  v7:= 0I;
  #L43f1d8.  if v4 == 0 then goto L43f23a;
  #L43f1dc.  if v7 == 0 then goto L43f23a;
  #L43f1e0.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f1e4.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43f1ea.  v0:= temp @kind object;
  #L43f1ec.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f1f2.  v0:= temp @kind object;
  #L43f1f4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f1fa.  v2:= temp;
  #L43f1fc.  if v2 == 0 then goto L43f214;
  #L43f200.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f206.  v2:= temp @kind object;
  #L43f208.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L43f20c.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L43f212.  goto L43f1f4;
  #L43f214.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f218.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43f21e.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L43f222.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43f228.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f22c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43f232.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43f238.  return @kind void;
  #L43f23a.  if v7 == 0 then goto L43f24e;
  #L43f23e.  v3:= -v3 @kind int;
  #L43f240.  call temp:= `addAndGet`(v11, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43f246.  v3:= temp;
  #L43f248.  if v3 != 0 then goto L43f172;
  #L43f24c.  return @kind void;
  #L43f24e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43f254.  v4:= temp @kind object;
  #L43f256.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L43f25a.  if v6 != v7 then goto L43f380;
  #L43f25e.  call temp:= `create`() @signature `Lio/reactivex/processors/UnicastProcessor;.create:()Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L43f264.  v5:= temp @kind object;
  #L43f266.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int`;
  #L43f26a.  v7:= v6 + 1;
  #L43f26e.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.l` @type ^`int` := v7;
  #L43f272.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f276.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f27c.  v8:= temp @kind object;
  #L43f27e.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f284.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L43f288.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f28e.  v7:= temp @kind object;
  #L43f290.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L43f294.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43f29a.  v7:= temp @kind object;
  #L43f29c.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L43f2a0.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L43f2a4.  call `<init>`(v8, v11, v2, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L43f2aa.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f2ae.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f2b4.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43f2ba.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f2be.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f2c4.  v6:= temp @kind object;
  #L43f2c6.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L43f2ca.  if v6 == 0 then goto L43f2e2;
  #L43f2ce.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43f2d4.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L43f2da.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43f2e0.  return @kind void;
  #L43f2e2.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43f2e6.  call temp:= `apply`(v6, v4, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f2ec.  v4:= temp @kind object;
  #L43f2ee.  v6:= "The resultSelector returned a null value" @kind object;
  #L43f2f2.  call temp:= `requireNonNull`(v4, v6) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43f2f8.  v4:= temp @kind object;
  #L43f2fa.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f2fe.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43f304.  v6:= temp @kind wide;
  #L43f306.  v8:= 0L;
  #L43f30a.  v10:= lcmp(v6, v8);
  #L43f30e.  if v10 == 0 then goto L43f356;
  #L43f312.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43f318.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f31c.  v6:= 1L;
  #L43f320.  call temp:= `produced`(v4, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43f326.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L43f32a.  call temp:= `values`(v4) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43f330.  v4:= temp @kind object;
  #L43f332.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f338.  v4:= temp @kind object;
  #L43f33a.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f340.  v6:= temp;
  #L43f342.  if v6 == 0 then goto L43f172;
  #L43f346.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f34c.  v6:= temp @kind object;
  #L43f34e.  call `onNext`(v5, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43f354.  goto L43f33a;
  #L43f356.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L43f35a.  v3:= "Could not emit value due to lack of requests" @kind object;
  #L43f35e.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43f364.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L43f36a.  return @kind void;
  #L43f36c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f36e.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L43f374.  return @kind void;
  #L43f376.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f378.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L43f37e.  return @kind void;
  #L43f380.  v7:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L43f384.  if v6 != v7 then goto L43f442;
  #L43f388.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int`;
  #L43f38c.  v7:= v6 + 1;
  #L43f390.  v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.m` @type ^`int` := v7;
  #L43f394.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L43f398.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f39e.  v8:= temp @kind object;
  #L43f3a0.  call temp:= `put`(v7, v8, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f3a6.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L43f3aa.  call temp:= `apply`(v7, v4) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f3b0.  v7:= temp @kind object;
  #L43f3b2.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L43f3b6.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43f3bc.  v7:= temp @kind object;
  #L43f3be.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L43f3c2.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L43f3c6.  call `<init>`(v8, v11, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L43f3cc.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f3d0.  call temp:= `add`(v5, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f3d6.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43f3dc.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f3e0.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43f3e6.  v5:= temp @kind object;
  #L43f3e8.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L43f3ec.  if v5 == 0 then goto L43f404;
  #L43f3f0.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43f3f6.  call `f`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L43f3fc.  call `h`(v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43f402.  return @kind void;
  #L43f404.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f408.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43f40e.  v5:= temp @kind object;
  #L43f410.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f416.  v5:= temp @kind object;
  #L43f418.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f41e.  v6:= temp;
  #L43f420.  if v6 == 0 then goto L43f172;
  #L43f424.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f42a.  v6:= temp @kind object;
  #L43f42c.  v6:= (`io.reactivex.processors.UnicastProcessor`) v6 @kind object;
  #L43f430.  call `onNext`(v6, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43f436.  goto L43f418;
  #L43f438.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43f43a.  call `i`(v11, v2, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L43f440.  return @kind void;
  #L43f442.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L43f446.  if v6 != v5 then goto L43f482;
  #L43f44a.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L43f44e.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f452.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L43f456.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f45c.  v6:= temp @kind object;
  #L43f45e.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f464.  v5:= temp @kind object;
  #L43f466.  v5:= (`io.reactivex.processors.UnicastProcessor`) v5 @kind object;
  #L43f46a.  v6:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f46e.  call temp:= `remove`(v6, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f474.  if v5 == 0 then goto L43f172;
  #L43f478.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L43f47e.  goto L43f172;
  #L43f482.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L43f486.  if v6 != v5 then goto L43f172;
  #L43f48a.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v4 @kind object;
  #L43f48e.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L43f492.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L43f496.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L43f49c.  v6:= temp @kind object;
  #L43f49e.  call temp:= `remove`(v5, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43f4a4.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43f4a8.  call temp:= `remove`(v5, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43f4ae.  goto L43f172;
  catch `java.lang.Throwable` @[L43f284..L43f2a0] goto L43f376;
  catch `java.lang.Throwable` @[L43f2e2..L43f2fa] goto L43f36c;
  catch `java.lang.Throwable` @[L43f3a6..L43f3c2] goto L43f438;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43f4e8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f4ec.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43f4f2.  v0:= temp @kind object;
  #L43f4f4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f4f8.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43f4fe.  v1:= temp @kind object;
  #L43f500.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43f506.  v1:= temp @kind object;
  #L43f508.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43f50e.  v2:= temp;
  #L43f510.  if v2 == 0 then goto L43f528;
  #L43f514.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43f51a.  v2:= temp @kind object;
  #L43f51c.  v2:= (`io.reactivex.processors.UnicastProcessor`) v2 @kind object;
  #L43f520.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43f526.  goto L43f508;
  #L43f528.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.e` @type ^`java.util.Map` @kind object;
  #L43f52c.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43f532.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.f` @type ^`java.util.Map` @kind object;
  #L43f536.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43f53c.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f542.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L43f554.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43f55a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43f55e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43f564.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43f56a.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.f:()V` @kind virtual;
  #L43f570.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L43f576.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f6c0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43f6c6.  v0:= temp;
  #L43f6c8.  if v0 == 0 then goto L43f6d6;
  #L43f6cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43f6d0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43f6d6.  return @kind void;
}
