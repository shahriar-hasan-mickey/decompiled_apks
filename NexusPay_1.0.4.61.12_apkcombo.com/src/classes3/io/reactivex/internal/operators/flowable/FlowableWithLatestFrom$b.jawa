record `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L452440.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L452446.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L45244a.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L452450.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L452454.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L452458.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45245e.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L452462.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L452466.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L45246c.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L452470.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L452474.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L452478.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45255c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452560.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L452566.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45256a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452570.  return @kind void;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.b:(Lorg/reactivestreams/Subscription;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4523b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4523b8.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4523be.  v2:= temp;
  #L4523c0.  return v2;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45248c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452490.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L452496.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45249a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4524a0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4524b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4524b8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4524be.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4524c2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4524c8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4524dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4524e0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4524e6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4524ea.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4524f0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452504.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L45250a.  v3:= temp;
  #L45250c.  if v3 != 0 then goto L45252a;
  #L452510.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452514.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L45251a.  v3:= temp @kind object;
  #L45251c.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L452520.  v0:= 1L;
  #L452524.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45252a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45253c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452540.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L452544.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45254a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452584.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452588.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45258c.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L452592.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4523d4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4523da.  v0:= temp @kind object;
  #L4523dc.  v1:= 0I;
  #L4523de.  if v0 == 0 then goto L452420;
  #L4523e2.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4523e6.  call temp:= `apply`(v2, v4, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4523ec.  v4:= temp @kind object;
  #L4523ee.  v0:= "The combiner returned a null value" @kind object;
  #L4523f2.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4523f8.  v4:= temp @kind object;
  #L4523fa.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4523fe.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L452404.  v4:= 1I;
  #L452406.  return v4;
  #L452408.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45240a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L452410.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFrom$b;.cancel:()V` @kind virtual;
  #L452416.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFrom$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45241a.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L452420.  return v1;
  catch `java.lang.Throwable` @[L4523e2..L4523fa] goto L452408;
}
