record `io.reactivex.internal.operators.flowable.FlowableMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableMap$a.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44182c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L441832.  v0.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L441836.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441848.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L44184c.  if v0 == 0 then goto L441852;
  #L441850.  return @kind void;
  #L441852.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L441856.  if v0 == 0 then goto L441868;
  #L44185a.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44185e.  v0:= 0I;
  #L441860.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L441866.  return @kind void;
  #L441868.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L44186c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L441872.  v2:= temp @kind object;
  #L441874.  v0:= "The mapper function returned a null value." @kind object;
  #L441878.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44187e.  v2:= temp @kind object;
  #L441880.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L441884.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44188a.  return @kind void;
  #L44188c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44188e.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L441894.  return @kind void;
  catch `java.lang.Throwable` @[L441868..L441880] goto L44188c;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4417ec.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4417f0.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4417f6.  v0:= temp @kind object;
  #L4417f8.  if v0 == 0 then goto L441816;
  #L4417fc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L441800.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L441806.  v0:= temp @kind object;
  #L441808.  v1:= "The mapper function returned a null value." @kind object;
  #L44180c.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L441812.  v0:= temp @kind object;
  #L441814.  goto L441818;
  #L441816.  v0:= 0I;
  #L441818.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L4417d0.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L4417d6.  v1:= temp;
  #L4417d8.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441774.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L441778.  if v0 == 0 then goto L441780;
  #L44177c.  v2:= 0I;
  #L44177e.  return v2;
  #L441780.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMap$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L441784.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44178a.  v2:= temp @kind object;
  #L44178c.  v0:= "The mapper function returned a null value." @kind object;
  #L441790.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L441796.  v2:= temp @kind object;
  #L441798.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44179c.  call temp:= `tryOnNext`(v0, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4417a2.  v2:= temp;
  #L4417a4.  return v2;
  #L4417a6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4417a8.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4417ae.  v2:= 1I;
  #L4417b0.  return v2;
  catch `java.lang.Throwable` @[L441780..L441798] goto L4417a6;
}
