record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @AccessFlag ;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @AccessFlag VOLATILE;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4518b8.  v0:= new `java.lang.Object`;
  #L4518bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4518c2.  `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` := v0 @kind object;
  #L4518c6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4518d8.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4518dc.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4518e2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4518e8.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4518ec.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4518f2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L4518f6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @type ^`long` := v3 @kind wide;
  #L4518fa.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L4518fe.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L451902.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int` := v7;
  #L451906.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L451930.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451934.  v1:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451938.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L45193c.  v3:= 1I;
  #L45193e.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` @kind boolean;
  #L451942.  v5:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L451946.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L45194c.  v6:= temp @kind object;
  #L45194e.  v7:= 0I;
  #L451950.  if v5 == 0 then goto L45198c;
  #L451954.  if v6 == 0 then goto L451960;
  #L451958.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L45195c.  if v6 != v5 then goto L45198c;
  #L451960.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L451964.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L45196a.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L45196e.  if v0 == 0 then goto L45197a;
  #L451972.  call `onError`(v2, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L451978.  goto L451980;
  #L45197a.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451980.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L451984.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L45198a.  return @kind void;
  #L45198c.  if v6 != 0 then goto L4519a0;
  #L451990.  v3:= -v3 @kind int;
  #L451992.  call temp:= `leave`(v10, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451998.  v3:= temp;
  #L45199a.  if v3 != 0 then goto L45193e;
  #L45199e.  return @kind void;
  #L4519a0.  v5:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L4519a4.  if v6 != v5 then goto L451a3e;
  #L4519a8.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4519ae.  if v4 != 0 then goto L451a32;
  #L4519b2.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int`;
  #L4519b6.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4519bc.  v2:= temp @kind object;
  #L4519be.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L4519c2.  call temp:= `requested`(v10) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4519c8.  v4:= temp @kind wide;
  #L4519ca.  v8:= 0L;
  #L4519ce.  v6:= lcmp(v4, v8);
  #L4519d2.  if v6 == 0 then goto L4519fa;
  #L4519d6.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4519dc.  v6:= 9223372036854775807L;
  #L4519e6.  v8:= lcmp(v4, v6);
  #L4519ea.  if v8 == 0 then goto L45193e;
  #L4519ee.  v4:= 1L;
  #L4519f2.  call temp:= `produced`(v10, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4519f8.  goto L45193e;
  #L4519fa.  v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L4519fe.  v0:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451a02.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L451a08.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451a0c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451a12.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L451a16.  v2:= "Could not deliver first window due to lack of requests." @kind object;
  #L451a1a.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L451a20.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451a26.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L451a2a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L451a30.  return @kind void;
  #L451a32.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451a36.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451a3c.  goto L45193e;
  #L451a3e.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L451a44.  v4:= temp @kind object;
  #L451a46.  call `onNext`(v2, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L451a4c.  goto L45193e;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451918.  v0:= 1I;
  #L45191a.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L45191e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451a60.  v0:= 1I;
  #L451a62.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L451a66.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451a6c.  v0:= temp;
  #L451a6e.  if v0 == 0 then goto L451a78;
  #L451a72.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L451a78.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451a7c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L451a82.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451a94.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L451a98.  v0:= 1I;
  #L451a9a.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L451a9e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451aa4.  v0:= temp;
  #L451aa6.  if v0 == 0 then goto L451ab0;
  #L451aaa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L451ab0.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451ab4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451aba.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451acc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` @kind boolean;
  #L451ad0.  if v0 == 0 then goto L451ad6;
  #L451ad4.  return @kind void;
  #L451ad6.  call temp:= `fastEnter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L451adc.  v0:= temp;
  #L451ade.  if v0 == 0 then goto L451afc;
  #L451ae2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451ae6.  call `onNext`(v0, v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L451aec.  v2:= -1I;
  #L451aee.  call temp:= `leave`(v1, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451af4.  v2:= temp;
  #L451af6.  if v2 != 0 then goto L451b1c;
  #L451afa.  return @kind void;
  #L451afc.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451b00.  call temp:= `next`(v2) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L451b06.  v2:= temp @kind object;
  #L451b08.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L451b0e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451b14.  v2:= temp;
  #L451b16.  if v2 != 0 then goto L451b1c;
  #L451b1a.  return @kind void;
  #L451b1c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L451b22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v12 @kind this, `org.reactivestreams.Subscription` v13 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L451b34.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451b38.  call temp:= `validate`(v0, v13) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L451b3e.  v0:= temp;
  #L451b40.  if v0 == 0 then goto L451bf4;
  #L451b44.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.g` @type ^`org.reactivestreams.Subscription` := v13 @kind object;
  #L451b48.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.f` @type ^`int`;
  #L451b4c.  call temp:= `create`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L451b52.  v0:= temp @kind object;
  #L451b54.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` := v0 @kind object;
  #L451b58.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451b5c.  call `onSubscribe`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L451b62.  call temp:= `requested`(v12) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L451b68.  v1:= temp @kind wide;
  #L451b6a.  v3:= 0L;
  #L451b6e.  v5:= lcmp(v1, v3);
  #L451b72.  if v5 == 0 then goto L451bd4;
  #L451b76.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.h` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451b7a.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L451b80.  v3:= 9223372036854775807L;
  #L451b8a.  v0:= lcmp(v1, v3);
  #L451b8e.  if v0 == 0 then goto L451b9c;
  #L451b92.  v0:= 1L;
  #L451b96.  call temp:= `produced`(v12, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L451b9c.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L451ba0.  if v0 != 0 then goto L451bf4;
  #L451ba4.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.i` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L451ba8.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L451bac.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.c` @type ^`long` @kind wide;
  #L451bb0.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L451bb4.  v6:= v12 @kind object;
  #L451bb6.  v7:= v9 @kind wide;
  #L451bb8.  call temp:= `schedulePeriodicallyDirect`(v5, v6, v7, v9, v11) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L451bbe.  v1:= temp @kind object;
  #L451bc0.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L451bc6.  v0:= temp;
  #L451bc8.  if v0 == 0 then goto L451bf4;
  #L451bcc.  call `request`(v13, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L451bd2.  goto L451bf4;
  #L451bd4.  v1:= 1I;
  #L451bd6.  v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L451bda.  call `cancel`(v13) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451be0.  v13:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L451be4.  v1:= "Could not deliver first window due to lack of requests." @kind object;
  #L451be8.  call `<init>`(v13, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L451bee.  call `onError`(v0, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451bf4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L451c08.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L451c0e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451c20.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L451c24.  if v0 == 0 then goto L451c2e;
  #L451c28.  v0:= 1I;
  #L451c2a.  v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.j` @type ^`boolean` := v0 @kind boolean;
  #L451c2e.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451c32.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowTimed$b.k` @type ^`java.lang.Object` @kind object;
  #L451c36.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L451c3c.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451c42.  v0:= temp;
  #L451c44.  if v0 == 0 then goto L451c4e;
  #L451c48.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$b;.a:()V` @kind virtual;
  #L451c4e.  return @kind void;
}
