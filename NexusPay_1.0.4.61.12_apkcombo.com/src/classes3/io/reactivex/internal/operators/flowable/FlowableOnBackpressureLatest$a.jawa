record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4442b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4442be.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4442c2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4442c8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4442cc.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4442d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4442d6.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L4442da.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4442de.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `java.util.concurrent.atomic.AtomicReference` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L444268.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L44426c.  v1:= 0I;
  #L44426e.  v2:= 1I;
  #L444270.  if v0 == 0 then goto L44427c;
  #L444274.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44427a.  return v2;
  #L44427c.  if v4 == 0 then goto L4442a2;
  #L444280.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` @kind object;
  #L444284.  if v4 == 0 then goto L444296;
  #L444288.  call `lazySet`(v7, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44428e.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444294.  return v2;
  #L444296.  if v5 == 0 then goto L4442a2;
  #L44429a.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4442a0.  return v2;
  #L4442a2.  v4:= 0I;
  #L4442a4.  return v4;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L444334.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44433a.  v0:= temp;
  #L44433c.  if v0 == 0 then goto L444342;
  #L444340.  return @kind void;
  #L444342.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444346.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44434a.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44434e.  v3:= 1I;
  #L444350.  v4:= 1I;
  #L444352.  v5:= 0L;
  #L444356.  v7:= v5 @kind wide;
  #L444358.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44435e.  v9:= temp @kind wide;
  #L444360.  v11:= 0I;
  #L444362.  v12:= lcmp(v7, v9);
  #L444366.  if v12 == 0 then goto L4443a4;
  #L44436a.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L44436e.  v10:= 0I;
  #L444370.  call temp:= `getAndSet`(v2, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L444376.  v10:= temp @kind object;
  #L444378.  if v10 != 0 then goto L444380;
  #L44437c.  v12:= 1I;
  #L44437e.  goto L444382;
  #L444380.  v12:= 0I;
  #L444382.  call temp:= `a`(v13, v9, v12, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L444388.  v9:= temp;
  #L44438a.  if v9 == 0 then goto L444390;
  #L44438e.  return @kind void;
  #L444390.  if v12 == 0 then goto L444396;
  #L444394.  goto L4443a4;
  #L444396.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44439c.  v9:= 1L;
  #L4443a0.  v7:= v7 + v9 @kind long;
  #L4443a2.  goto L444358;
  #L4443a4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4443aa.  v9:= temp @kind wide;
  #L4443ac.  v12:= lcmp(v7, v9);
  #L4443b0.  if v12 != 0 then goto L4443d4;
  #L4443b4.  v9:= v13.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` @kind boolean;
  #L4443b8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4443be.  v10:= temp @kind object;
  #L4443c0.  if v10 != 0 then goto L4443c6;
  #L4443c4.  v11:= 1I;
  #L4443c6.  call temp:= `a`(v13, v9, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.a:(ZZLorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind virtual;
  #L4443cc.  v9:= temp;
  #L4443ce.  if v9 == 0 then goto L4443d4;
  #L4443d2.  return @kind void;
  #L4443d4.  v9:= lcmp(v7, v5);
  #L4443d8.  if v9 == 0 then goto L4443e2;
  #L4443dc.  call temp:= `produced`(v1, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4443e2.  v4:= -v4 @kind int;
  #L4443e4.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4443ea.  v4:= temp;
  #L4443ec.  if v4 != 0 then goto L444352;
  #L4443f0.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4442f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` @kind boolean;
  #L4442f4.  if v0 != 0 then goto L444320;
  #L4442f8.  v0:= 1I;
  #L4442fa.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4442fe.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L444302.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L444308.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44430e.  v0:= temp;
  #L444310.  if v0 != 0 then goto L444320;
  #L444314.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L444318.  v1:= 0I;
  #L44431a.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L444320.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444404.  v0:= 1I;
  #L444406.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44440a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L444410.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L444424.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L444428.  v1:= 1I;
  #L44442a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.c` @type ^`boolean` := v1 @kind boolean;
  #L44442e.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L444434.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444448.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44444c.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L444452.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L444458.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44446c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L444470.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L444476.  v0:= temp;
  #L444478.  if v0 == 0 then goto L44449a;
  #L44447c.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L444480.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444484.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44448a.  v0:= 9223372036854775807L;
  #L444494.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44449a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4444ac.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4444b2.  v0:= temp;
  #L4444b4.  if v0 == 0 then goto L4444c8;
  #L4444b8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureLatest$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4444bc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4444c2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureLatest$a;.b:()V` @kind virtual;
  #L4444c8.  return @kind void;
}
