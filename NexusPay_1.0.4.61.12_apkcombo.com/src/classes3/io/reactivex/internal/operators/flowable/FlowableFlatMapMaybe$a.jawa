record `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43bba4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43bbaa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43bbae.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43bbb2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` := v3 @kind boolean;
  #L43bbb6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int` := v4;
  #L43bbba.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43bbbe.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43bbc4.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L43bbc8.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43bbcc.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43bbd2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43bbd6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43bbda.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43bbe0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43bbe4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43bbe8.  v2:= 1I;
  #L43bbea.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43bbf0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43bbf4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43bbf8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43bbfe.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43bc02.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L43bc40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bc44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bc4a.  v0:= temp @kind object;
  #L43bc4c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43bc50.  if v0 == 0 then goto L43bc5a;
  #L43bc54.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43bc5a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L43bc6c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43bc72.  v0:= temp;
  #L43bc74.  if v0 != 0 then goto L43bc7e;
  #L43bc78.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43bc7e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L43bc90.  v0:= v17 @kind object;
  #L43bc94.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43bc98.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bc9c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bca0.  v4:= 1I;
  #L43bca2.  v5:= 1I;
  #L43bca4.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43bca8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43bcae.  v6:= temp @kind wide;
  #L43bcb0.  v8:= 0L;
  #L43bcb4.  v10:= v8 @kind wide;
  #L43bcb6.  v12:= 0I;
  #L43bcb8.  v13:= lcmp(v10, v6);
  #L43bcbc.  if v13 == 0 then goto L43bd7e;
  #L43bcc0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L43bcc4.  if v14 == 0 then goto L43bcd0;
  #L43bcc8.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43bcce.  return @kind void;
  #L43bcd0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43bcd4.  if v14 != 0 then goto L43bd06;
  #L43bcd8.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bcdc.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bce2.  v14:= temp @kind object;
  #L43bce4.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L43bce8.  if v14 == 0 then goto L43bd06;
  #L43bcec.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bcf0.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43bcf6.  v2:= temp @kind object;
  #L43bcf8.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43bcfe.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bd04.  return @kind void;
  #L43bd06.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43bd0c.  v14:= temp;
  #L43bd0e.  if v14 != 0 then goto L43bd16;
  #L43bd12.  v14:= 1I;
  #L43bd14.  goto L43bd18;
  #L43bd16.  v14:= 0I;
  #L43bd18.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bd1e.  v15:= temp @kind object;
  #L43bd20.  v15:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L43bd24.  if v15 == 0 then goto L43bd32;
  #L43bd28.  call temp:= `poll`(v15) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43bd2e.  v15:= temp @kind object;
  #L43bd30.  goto L43bd34;
  #L43bd32.  v15:= 0I;
  #L43bd34.  if v15 != 0 then goto L43bd3e;
  #L43bd38.  v16:= 1I;
  #L43bd3c.  goto L43bd42;
  #L43bd3e.  v16:= 0I;
  #L43bd42.  if v14 == 0 then goto L43bd6a;
  #L43bd46.  if v16 == 0 then goto L43bd6a;
  #L43bd4a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bd4e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43bd54.  v2:= temp @kind object;
  #L43bd56.  if v2 == 0 then goto L43bd62;
  #L43bd5a.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bd60.  goto L43bd68;
  #L43bd62.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43bd68.  return @kind void;
  #L43bd6a.  if v16 == 0 then goto L43bd70;
  #L43bd6e.  goto L43bd7e;
  #L43bd70.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43bd76.  v12:= 1L;
  #L43bd7a.  v10:= v10 + v12 @kind long;
  #L43bd7c.  goto L43bcb6;
  #L43bd7e.  if v13 != 0 then goto L43be20;
  #L43bd82.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L43bd86.  if v6 == 0 then goto L43bd92;
  #L43bd8a.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43bd90.  return @kind void;
  #L43bd92.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43bd96.  if v6 != 0 then goto L43bdc8;
  #L43bd9a.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bd9e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bda4.  v6:= temp @kind object;
  #L43bda6.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L43bdaa.  if v6 == 0 then goto L43bdc8;
  #L43bdae.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bdb2.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43bdb8.  v2:= temp @kind object;
  #L43bdba.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.a:()V` @kind virtual;
  #L43bdc0.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43bdc6.  return @kind void;
  #L43bdc8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43bdce.  v6:= temp;
  #L43bdd0.  if v6 != 0 then goto L43bdd8;
  #L43bdd4.  v6:= 1I;
  #L43bdd6.  goto L43bdda;
  #L43bdd8.  v6:= 0I;
  #L43bdda.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bde0.  v7:= temp @kind object;
  #L43bde2.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43bde6.  if v7 == 0 then goto L43bdf6;
  #L43bdea.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43bdf0.  v7:= temp;
  #L43bdf2.  if v7 == 0 then goto L43bdf8;
  #L43bdf6.  v12:= 1I;
  #L43bdf8.  if v6 == 0 then goto L43be20;
  #L43bdfc.  if v12 == 0 then goto L43be20;
  #L43be00.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43be04.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43be0a.  v2:= temp @kind object;
  #L43be0c.  if v2 == 0 then goto L43be18;
  #L43be10.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43be16.  goto L43be1e;
  #L43be18.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43be1e.  return @kind void;
  #L43be20.  v6:= lcmp(v10, v8);
  #L43be24.  if v6 == 0 then goto L43be4a;
  #L43be28.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43be2c.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43be32.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43be36.  v7:= 2147483647I;
  #L43be3c.  if v6 == v7 then goto L43be4a;
  #L43be40.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43be44.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43be4a.  v5:= -v5 @kind int;
  #L43be4c.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43be52.  v5:= temp;
  #L43be54.  if v5 != 0 then goto L43bca4;
  #L43be58.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43bc14.  v0:= 1I;
  #L43bc16.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L43bc1a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43bc1e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43bc24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bc28.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43bc2e.  return @kind void;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43bb58.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bb5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43bb62.  v0:= temp @kind object;
  #L43bb64.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43bb68.  if v0 == 0 then goto L43bb6e;
  #L43bb6c.  return v0 @kind object;
  #L43bb6e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43bb72.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L43bb78.  v1:= temp;
  #L43bb7a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43bb80.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43bb84.  v2:= 0I;
  #L43bb86.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43bb8c.  v1:= temp;
  #L43bb8e.  if v1 == 0 then goto L43bb58;
  #L43bb92.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43be6c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43be70.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43be76.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43be7c.  v6:= temp;
  #L43be7e.  v0:= 1L;
  #L43be82.  v2:= 2147483647I;
  #L43be88.  if v6 != 0 then goto L43bf22;
  #L43be8c.  v6:= 0I;
  #L43be8e.  v3:= 1I;
  #L43be90.  call temp:= `compareAndSet`(v5, v6, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43be96.  v4:= temp;
  #L43be98.  if v4 == 0 then goto L43bf22;
  #L43be9c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bea0.  call temp:= `decrementAndGet`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bea6.  v4:= temp;
  #L43bea8.  if v4 != 0 then goto L43beae;
  #L43beac.  v6:= 1I;
  #L43beae.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43beb2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43beb8.  v3:= temp @kind object;
  #L43beba.  v3:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v3 @kind object;
  #L43bebe.  if v6 == 0 then goto L43befa;
  #L43bec2.  if v3 == 0 then goto L43bed2;
  #L43bec6.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43becc.  v6:= temp;
  #L43bece.  if v6 == 0 then goto L43befa;
  #L43bed2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bed6.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43bedc.  v6:= temp @kind object;
  #L43bede.  if v6 == 0 then goto L43beee;
  #L43bee2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43bee6.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43beec.  goto L43bef8;
  #L43beee.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43bef2.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43bef8.  return @kind void;
  #L43befa.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43befe.  if v6 == v2 then goto L43bf0c;
  #L43bf02.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43bf06.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43bf0c.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bf12.  v6:= temp;
  #L43bf14.  if v6 != 0 then goto L43bf1a;
  #L43bf18.  return @kind void;
  #L43bf1a.  call `c`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43bf20.  goto L43bf44;
  #L43bf22.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bf26.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bf2c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43bf30.  if v6 == v2 then goto L43bf3e;
  #L43bf34.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43bf38.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43bf3e.  call `b`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43bf44.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43bf58.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bf5c.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43bf62.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43bf66.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43bf6c.  v3:= temp;
  #L43bf6e.  if v3 == 0 then goto L43bfbe;
  #L43bf72.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43bf76.  if v3 != 0 then goto L43bf90;
  #L43bf7a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43bf7e.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43bf84.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bf88.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43bf8e.  goto L43bfac;
  #L43bf90.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43bf94.  v4:= 2147483647I;
  #L43bf9a.  if v3 == v4 then goto L43bfac;
  #L43bf9e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43bfa2.  v0:= 1L;
  #L43bfa6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43bfac.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43bfb0.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43bfb6.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43bfbc.  goto L43bfc4;
  #L43bfbe.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43bfc4.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.g:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43bfd8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43bfdc.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43bfe2.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43bfe8.  v6:= temp;
  #L43bfea.  if v6 != 0 then goto L43c0cc;
  #L43bfee.  v6:= 0I;
  #L43bff0.  v0:= 1I;
  #L43bff2.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43bff8.  v1:= temp;
  #L43bffa.  if v1 == 0 then goto L43c0cc;
  #L43bffe.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c002.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c008.  v1:= temp;
  #L43c00a.  if v1 != 0 then goto L43c010;
  #L43c00e.  v6:= 1I;
  #L43c010.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c014.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43c01a.  v0:= temp @kind wide;
  #L43c01c.  v2:= 0L;
  #L43c020.  v4:= lcmp(v0, v2);
  #L43c024.  if v4 == 0 then goto L43c0a6;
  #L43c028.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c02c.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c032.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c036.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c03c.  v7:= temp @kind object;
  #L43c03e.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43c042.  if v6 == 0 then goto L43c07e;
  #L43c046.  if v7 == 0 then goto L43c056;
  #L43c04a.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43c050.  v6:= temp;
  #L43c052.  if v6 == 0 then goto L43c07e;
  #L43c056.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c05a.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c060.  v6:= temp @kind object;
  #L43c062.  if v6 == 0 then goto L43c072;
  #L43c066.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c06a.  call `onError`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c070.  goto L43c07c;
  #L43c072.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c076.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c07c.  return @kind void;
  #L43c07e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c082.  v0:= 1L;
  #L43c086.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c08c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43c090.  v7:= 2147483647I;
  #L43c096.  if v6 == v7 then goto L43c0b8;
  #L43c09a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c09e.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c0a4.  goto L43c0b8;
  #L43c0a6.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43c0ac.  v6:= temp @kind object;
  #L43c0ae.  @monitorenter v6
  #L43c0b0.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c0b6.  @monitorexit v6
  #L43c0b8.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c0be.  v6:= temp;
  #L43c0c0.  if v6 != 0 then goto L43c0f6;
  #L43c0c4.  return @kind void;
  #L43c0c6.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c0c8.  @monitorexit v6
  #L43c0ca.  throw v7;
  #L43c0cc.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43c0d2.  v6:= temp @kind object;
  #L43c0d4.  @monitorenter v6
  #L43c0d6.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c0dc.  @monitorexit v6
  #L43c0de.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c0e2.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c0e8.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c0ee.  v6:= temp;
  #L43c0f0.  if v6 == 0 then goto L43c0f6;
  #L43c0f4.  return @kind void;
  #L43c0f6.  call `c`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.c:()V` @kind virtual;
  #L43c0fc.  return @kind void;
  #L43c0fe.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c100.  @monitorexit v6
  #L43c102.  throw v7;
  catch `java.lang.Throwable` @[L43c0b0..L43c0b8] goto L43c0c6;
  catch `java.lang.Throwable` @[L43c0c8..L43c0ca] goto L43c0c6;
  catch `java.lang.Throwable` @[L43c0d6..L43c0de] goto L43c0fe;
  catch `java.lang.Throwable` @[L43c100..L43c102] goto L43c0fe;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c13c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c140.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c146.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43c14c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c160.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c164.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c16a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c16e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43c174.  v0:= temp;
  #L43c176.  if v0 == 0 then goto L43c194;
  #L43c17a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.b` @type ^`boolean` @kind boolean;
  #L43c17e.  if v2 != 0 then goto L43c18c;
  #L43c182.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c186.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c18c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43c192.  goto L43c19a;
  #L43c194.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43c19a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c1ac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c1b0.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c1b6.  v3:= temp @kind object;
  #L43c1b8.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L43c1bc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c1c2.  v3:= temp @kind object;
  #L43c1c4.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L43c1c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c1cc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c1d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a$a`;
  #L43c1d6.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;)V` @kind direct;
  #L43c1dc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.k` @type ^`boolean` @kind boolean;
  #L43c1e0.  if v1 != 0 then goto L43c1fa;
  #L43c1e4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c1e8.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c1ee.  v1:= temp;
  #L43c1f0.  if v1 == 0 then goto L43c1fa;
  #L43c1f4.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L43c1fa.  return @kind void;
  #L43c1fc.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c1fe.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c204.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c208.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43c20e.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43c214.  return @kind void;
  catch `java.lang.Throwable` @[L43c1ac..L43c1c8] goto L43c1fc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c234.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c238.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43c23e.  v0:= temp;
  #L43c240.  if v0 == 0 then goto L43c27a;
  #L43c244.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43c248.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c24c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43c252.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.c` @type ^`int`;
  #L43c256.  v1:= 2147483647I;
  #L43c25c.  if v0 != v1 then goto L43c272;
  #L43c260.  v0:= 9223372036854775807L;
  #L43c26a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c270.  goto L43c27a;
  #L43c272.  v0:= (`long`) v0 @kind i2l;
  #L43c274.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c27a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c28c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43c292.  v0:= temp;
  #L43c294.  if v0 == 0 then goto L43c2a8;
  #L43c298.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapMaybe$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c29c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c2a2.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapMaybe$a;.b:()V` @kind virtual;
  #L43c2a8.  return @kind void;
}
