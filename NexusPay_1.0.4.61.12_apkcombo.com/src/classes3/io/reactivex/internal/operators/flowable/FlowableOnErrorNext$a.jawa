record `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.k` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44451c.  v0:= 0I;
  #L44451e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L444524.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L444528.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L44452c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` := v4 @kind boolean;
  #L444530.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444544.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`boolean` @kind boolean;
  #L444548.  if v0 == 0 then goto L44454e;
  #L44454c.  return @kind void;
  #L44454e.  v0:= 1I;
  #L444550.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`boolean` := v0 @kind boolean;
  #L444554.  v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` := v0 @kind boolean;
  #L444558.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44455c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L444562.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L444574.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L444578.  if v0 == 0 then goto L444598;
  #L44457c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`boolean` @kind boolean;
  #L444580.  if v0 == 0 then goto L44458c;
  #L444584.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44458a.  return @kind void;
  #L44458c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444590.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444596.  return @kind void;
  #L444598.  v0:= 1I;
  #L44459a.  v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` := v0 @kind boolean;
  #L44459e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.j` @type ^`boolean` @kind boolean;
  #L4445a2.  if v1 == 0 then goto L4445ba;
  #L4445a6.  v1:= instanceof @variable v7 @type ^`java.lang.Exception` @kind boolean;
  #L4445aa.  if v1 != 0 then goto L4445ba;
  #L4445ae.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4445b2.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4445b8.  return @kind void;
  #L4445ba.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L4445be.  call temp:= `apply`(v1, v7) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4445c4.  v1:= temp @kind object;
  #L4445c6.  v2:= "The nextSupplier returned a null Publisher" @kind object;
  #L4445ca.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4445d0.  v1:= temp @kind object;
  #L4445d2.  v1:= (`org.reactivestreams.Publisher`) v1 @kind object;
  #L4445d6.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.m` @type ^`long` @kind wide;
  #L4445da.  v4:= 0L;
  #L4445de.  v7:= lcmp(v2, v4);
  #L4445e2.  if v7 == 0 then goto L4445ec;
  #L4445e6.  call `produced`(v6, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L4445ec.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4445f2.  return @kind void;
  #L4445f4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4445f6.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4445fc.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444600.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L444604.  v4:= 2I;
  #L444606.  v4:= new `java.lang.Throwable`[v4];
  #L44460a.  v5:= 0I;
  #L44460c.  v4[v5]:= v7 @kind object;
  #L444610.  v4[v0]:= v1 @kind object;
  #L444614.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44461a.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L444620.  return @kind void;
  catch `java.lang.Throwable` @[L4445ba..L4445d6] goto L4445f4;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L444640.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.l` @type ^`boolean` @kind boolean;
  #L444644.  if v0 == 0 then goto L44464a;
  #L444648.  return @kind void;
  #L44464a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.k` @type ^`boolean` @kind boolean;
  #L44464e.  if v0 != 0 then goto L444660;
  #L444652.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.m` @type ^`long` @kind wide;
  #L444656.  v2:= 1L;
  #L44465a.  v0:= v0 + v2 @kind long;
  #L44465c.  v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.m` @type ^`long` := v0 @kind wide;
  #L444660.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L444664.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44466a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnErrorNext$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnErrorNext$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L44467c.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L444682.  return @kind void;
}
