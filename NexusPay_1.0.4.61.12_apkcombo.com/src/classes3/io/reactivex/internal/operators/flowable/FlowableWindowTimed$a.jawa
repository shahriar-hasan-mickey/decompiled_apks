record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @AccessFlag VOLATILE;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `long` v8 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IJZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4512e4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4512e8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4512ee.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4512f4.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4512f8.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4512fe.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L451302.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` := v3 @kind wide;
  #L451306.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L45130a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L45130e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int` := v7;
  #L451312.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` := v8 @kind wide;
  #L451316.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L45131a.  if v10 == 0 then goto L45132c;
  #L45131e.  call temp:= `createWorker`(v6) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L451324.  v2:= temp @kind object;
  #L451326.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L45132a.  goto L451332;
  #L45132c.  v2:= 0I;
  #L45132e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L451332.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4512b4.  v0:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4512b8.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4512cc.  v0:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4512d0.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45135c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L451360.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L451366.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L45136a.  if v0 == 0 then goto L451374;
  #L45136e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451374.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451344.  v0:= 1I;
  #L451346.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L45134a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L451388.  v0:= v17 @kind object;
  #L45138c.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451390.  v2:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451394.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451398.  v5:= 1I;
  #L45139a.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @type ^`boolean` @kind boolean;
  #L45139e.  if v6 == 0 then goto L4513ba;
  #L4513a2.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4513a6.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4513ac.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4513b2.  call `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4513b8.  return @kind void;
  #L4513ba.  v6:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4513be.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4513c4.  v7:= temp @kind object;
  #L4513c6.  if v7 != 0 then goto L4513ce;
  #L4513ca.  v8:= 1I;
  #L4513cc.  goto L4513d0;
  #L4513ce.  v8:= 0I;
  #L4513d0.  v9:= instanceof @variable v7 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a` @kind boolean;
  #L4513d4.  v10:= 0I;
  #L4513d6.  if v6 == 0 then goto L45140a;
  #L4513da.  if v8 != 0 then goto L4513e2;
  #L4513de.  if v9 == 0 then goto L45140a;
  #L4513e2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L4513e6.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4513ec.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L4513f0.  if v1 == 0 then goto L4513fc;
  #L4513f4.  call `onError`(v3, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4513fa.  goto L451402;
  #L4513fc.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451402.  call `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L451408.  return @kind void;
  #L45140a.  if v8 == 0 then goto L45141e;
  #L45140e.  v5:= -v5 @kind int;
  #L451410.  call temp:= `leave`(v0, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451416.  v5:= temp;
  #L451418.  if v5 != 0 then goto L45139a;
  #L45141c.  return @kind void;
  #L45141e.  v11:= 9223372036854775807L;
  #L451428.  v13:= 0L;
  #L45142c.  v8:= v5;
  #L45142e.  if v9 == 0 then goto L4514cc;
  #L451432.  v7:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`) v7 @kind object;
  #L451436.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L45143a.  if v9 == 0 then goto L451454;
  #L45143e.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L451442.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a.a` @type ^`long` @kind wide;
  #L451446.  v16:= lcmp(v4, v6);
  #L45144a.  if v16 != 0 then goto L451450;
  #L45144e.  goto L451454;
  #L451450.  v5:= v8;
  #L451452.  goto L45139a;
  #L451454.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L45145a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v13 @kind wide;
  #L45145e.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L451462.  call temp:= `create`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L451468.  v3:= temp @kind object;
  #L45146a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L45146e.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L451474.  v4:= temp @kind wide;
  #L451476.  v6:= lcmp(v4, v13);
  #L45147a.  if v6 == 0 then goto L451498;
  #L45147e.  call `onNext`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L451484.  v6:= lcmp(v4, v11);
  #L451488.  if v6 == 0 then goto L451450;
  #L45148c.  v4:= 1L;
  #L451490.  call temp:= `produced`(v0, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L451496.  goto L451450;
  #L451498.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v10 @kind object;
  #L45149c.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4514a0.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4514a6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4514aa.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4514b0.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4514b4.  v3:= "Could not deliver first window due to lack of requests." @kind object;
  #L4514b8.  call `<init>`(v1, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4514be.  call `onError`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4514c4.  call `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4514ca.  return @kind void;
  #L4514cc.  call temp:= `getValue`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4514d2.  v4:= temp @kind object;
  #L4514d4.  call `onNext`(v3, v4) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L4514da.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` @kind wide;
  #L4514de.  v6:= 1L;
  #L4514e2.  v4:= v4 + v6 @kind long;
  #L4514e4.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` @kind wide;
  #L4514e8.  v15:= lcmp(v4, v9);
  #L4514ec.  if v15 < 0 then goto L4515c2;
  #L4514f0.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L4514f4.  v4:= v4 + v6 @kind long;
  #L4514f6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` := v4 @kind wide;
  #L4514fa.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v13 @kind wide;
  #L4514fe.  call `onComplete`(v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451504.  call temp:= `requested`(v17) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L45150a.  v3:= temp @kind wide;
  #L45150c.  v5:= lcmp(v3, v13);
  #L451510.  if v5 == 0 then goto L451592;
  #L451514.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L451518.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L45151e.  v5:= temp @kind object;
  #L451520.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v5 @kind object;
  #L451524.  v6:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451528.  call `onNext`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L45152e.  v6:= lcmp(v3, v11);
  #L451532.  if v6 == 0 then goto L451540;
  #L451536.  v3:= 1L;
  #L45153a.  call temp:= `produced`(v0, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L451540.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L451544.  if v3 == 0 then goto L45158c;
  #L451548.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L45154c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L451552.  v3:= temp @kind object;
  #L451554.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L451558.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L45155e.  v9:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L451562.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L451566.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L45156a.  call `<init>`(v10, v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L451570.  v13:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L451574.  v15:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L451578.  v11:= v13 @kind wide;
  #L45157a.  call temp:= `schedulePeriodically`(v9, v10, v11, v13, v15) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L451580.  v3:= temp @kind object;
  #L451582.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L451586.  call temp:= `replace`(v4, v3) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L45158c.  v3:= v5 @kind object;
  #L45158e.  goto L451450;
  #L451592.  v3:= 0I;
  #L451594.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v3 @kind object;
  #L451598.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45159c.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4515a2.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4515a6.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4515aa.  v3:= "Could not deliver window due to lack of requests" @kind object;
  #L4515ae.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4515b4.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4515ba.  call `c`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L4515c0.  return @kind void;
  #L4515c2.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v4 @kind wide;
  #L4515c6.  goto L451450;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4515dc.  v0:= 1I;
  #L4515de.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4515e2.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4515e8.  v0:= temp;
  #L4515ea.  if v0 == 0 then goto L4515f4;
  #L4515ee.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L4515f4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4515f8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4515fe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451610.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L451614.  v0:= 1I;
  #L451616.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L45161a.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451620.  v0:= temp;
  #L451622.  if v0 == 0 then goto L45162c;
  #L451626.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L45162c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451630.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451636.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L451648.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.n` @type ^`boolean` @kind boolean;
  #L45164c.  if v0 == 0 then goto L451652;
  #L451650.  return @kind void;
  #L451652.  call temp:= `fastEnter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L451658.  v0:= temp;
  #L45165a.  if v0 == 0 then goto L45176a;
  #L45165e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451662.  call `onNext`(v0, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L451668.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` @kind wide;
  #L45166c.  v3:= 1L;
  #L451670.  v1:= v1 + v3 @kind long;
  #L451672.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.h` @type ^`long` @kind wide;
  #L451676.  v8:= lcmp(v1, v5);
  #L45167a.  if v8 < 0 then goto L451756;
  #L45167e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L451682.  v1:= v1 + v3 @kind long;
  #L451684.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` := v1 @kind wide;
  #L451688.  v1:= 0L;
  #L45168c.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L451690.  call `onComplete`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451696.  call temp:= `requested`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L45169c.  v5:= temp @kind wide;
  #L45169e.  v8:= lcmp(v5, v1);
  #L4516a2.  if v8 == 0 then goto L451726;
  #L4516a6.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L4516aa.  call temp:= `create`(v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4516b0.  v8:= temp @kind object;
  #L4516b2.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L4516b6.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4516ba.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4516c0.  v0:= 9223372036854775807L;
  #L4516ca.  v8:= lcmp(v5, v0);
  #L4516ce.  if v8 == 0 then goto L4516d8;
  #L4516d2.  call temp:= `produced`(v7, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L4516d8.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L4516dc.  if v8 == 0 then goto L45175a;
  #L4516e0.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L4516e4.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4516ea.  v8:= temp @kind object;
  #L4516ec.  v8:= (`io.reactivex.disposables.Disposable`) v8 @kind object;
  #L4516f0.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4516f6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4516fa.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L4516fe.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L451702.  call `<init>`(v1, v2, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L451708.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L45170c.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L451710.  v2:= v4 @kind wide;
  #L451712.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L451718.  v8:= temp @kind object;
  #L45171a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L45171e.  call temp:= `replace`(v0, v8) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L451724.  goto L45175a;
  #L451726.  v8:= 0I;
  #L451728.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L45172c.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451730.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451736.  v8:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45173a.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45173e.  v1:= "Could not deliver window due to lack of requests" @kind object;
  #L451742.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L451748.  call `onError`(v8, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45174e.  call `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.c:()V` @kind virtual;
  #L451754.  return @kind void;
  #L451756.  v7.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.j` @type ^`long` := v1 @kind wide;
  #L45175a.  v8:= -1I;
  #L45175c.  call temp:= `leave`(v7, v8) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451762.  v8:= temp;
  #L451764.  if v8 != 0 then goto L45178a;
  #L451768.  return @kind void;
  #L45176a.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L45176e.  call temp:= `next`(v8) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L451774.  v8:= temp @kind object;
  #L451776.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45177c.  call temp:= `enter`(v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451782.  v8:= temp;
  #L451784.  if v8 != 0 then goto L45178a;
  #L451788.  return @kind void;
  #L45178a.  call `d`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.d:()V` @kind virtual;
  #L451790.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v11 @kind this, `org.reactivestreams.Subscription` v12 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L4517a4.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4517a8.  call temp:= `validate`(v0, v12) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4517ae.  v0:= temp;
  #L4517b0.  if v0 == 0 then goto L45188e;
  #L4517b4.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.l` @type ^`org.reactivestreams.Subscription` := v12 @kind object;
  #L4517b8.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4517bc.  call `onSubscribe`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4517c2.  v1:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4517c6.  if v1 == 0 then goto L4517cc;
  #L4517ca.  return @kind void;
  #L4517cc.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.f` @type ^`int`;
  #L4517d0.  call temp:= `create`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4517d6.  v1:= temp @kind object;
  #L4517d8.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.m` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L4517dc.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L4517e2.  v2:= temp @kind wide;
  #L4517e4.  v4:= 0L;
  #L4517e8.  v6:= lcmp(v2, v4);
  #L4517ec.  if v6 == 0 then goto L45186e;
  #L4517f0.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4517f6.  v0:= 9223372036854775807L;
  #L451800.  v4:= lcmp(v2, v0);
  #L451804.  if v4 == 0 then goto L451812;
  #L451808.  v2:= 1L;
  #L45180c.  call temp:= `produced`(v11, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L451812.  v5:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$a$a`;
  #L451816.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.k` @type ^`long` @kind wide;
  #L45181a.  call `<init>`(v5, v2, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;)V` @kind direct;
  #L451820.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.g` @type ^`boolean` @kind boolean;
  #L451824.  if v2 == 0 then goto L451840;
  #L451828.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.i` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L45182c.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L451830.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L451834.  v6:= v8 @kind wide;
  #L451836.  call temp:= `schedulePeriodically`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L45183c.  v2:= temp @kind object;
  #L45183e.  goto L451856;
  #L451840.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L451844.  v8:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.c` @type ^`long` @kind wide;
  #L451848.  v10:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L45184c.  v6:= v8 @kind wide;
  #L45184e.  call temp:= `schedulePeriodicallyDirect`(v4, v5, v6, v8, v10) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L451854.  v2:= temp @kind object;
  #L451856.  v3:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a.o` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L45185a.  call temp:= `replace`(v3, v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L451860.  v2:= temp;
  #L451862.  if v2 == 0 then goto L45188e;
  #L451866.  call `request`(v12, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45186c.  goto L45188e;
  #L45186e.  v1:= 1I;
  #L451870.  v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L451874.  call `cancel`(v12) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45187a.  v12:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L45187e.  v1:= "Could not deliver initial window due to lack of requests." @kind object;
  #L451882.  call `<init>`(v12, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L451888.  call `onError`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45188e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4518a0.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4518a6.  return @kind void;
}
