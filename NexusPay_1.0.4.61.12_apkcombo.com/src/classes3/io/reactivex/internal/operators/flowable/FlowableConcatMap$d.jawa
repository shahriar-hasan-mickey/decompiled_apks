record `io.reactivex.internal.operators.flowable.FlowableConcatMap$d` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43567c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/functions/Function;I)V` @kind direct;
  #L435682.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L435686.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43568a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L435690.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L435694.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4358fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435900.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435906.  v0:= temp;
  #L435908.  if v0 == 0 then goto L43593a;
  #L43590c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435910.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435916.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43591c.  v2:= temp;
  #L43591e.  if v2 != 0 then goto L435940;
  #L435922.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435926.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43592a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435930.  v0:= temp @kind object;
  #L435932.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435938.  goto L435940;
  #L43593a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435940.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L435954.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43595a.  v0:= temp;
  #L43595c.  if v0 != 0 then goto L43599e;
  #L435960.  v0:= 0I;
  #L435962.  v1:= 1I;
  #L435964.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43596a.  v2:= temp;
  #L43596c.  if v2 == 0 then goto L43599e;
  #L435970.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435974.  call `onNext`(v2, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43597a.  call temp:= `compareAndSet`(v3, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L435980.  v4:= temp;
  #L435982.  if v4 == 0 then goto L435988;
  #L435986.  return @kind void;
  #L435988.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43598c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435990.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435996.  v0:= temp @kind object;
  #L435998.  call `onError`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43599e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4356a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4356ac.  if v0 != 0 then goto L4356ca;
  #L4356b0.  v0:= 1I;
  #L4356b2.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L4356b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4356ba.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4356c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4356c4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4356ca.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4356dc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4356e0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4356e6.  v0:= temp;
  #L4356e8.  if v0 != 0 then goto L4358c6;
  #L4356ec.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L4356f0.  if v0 == 0 then goto L4356f6;
  #L4356f4.  return @kind void;
  #L4356f6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L4356fa.  if v0 != 0 then goto L4358b6;
  #L4356fe.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L435702.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L435706.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43570c.  v1:= temp @kind object;
  #L43570e.  v2:= 0I;
  #L435710.  v3:= 1I;
  #L435712.  if v1 != 0 then goto L43571a;
  #L435716.  v4:= 1I;
  #L435718.  goto L43571c;
  #L43571a.  v4:= 0I;
  #L43571c.  if v0 == 0 then goto L435730;
  #L435720.  if v4 == 0 then goto L435730;
  #L435724.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435728.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43572e.  return @kind void;
  #L435730.  if v4 != 0 then goto L4358b6;
  #L435734.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L435738.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43573e.  v0:= temp @kind object;
  #L435740.  v1:= "The mapper returned a null Publisher" @kind object;
  #L435744.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43574a.  v0:= temp @kind object;
  #L43574c.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L435750.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L435754.  if v1 == v3 then goto L43577c;
  #L435758.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L43575c.  v1:= v1 + v3 @kind int;
  #L43575e.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L435762.  if v1 != v4 then goto L435778;
  #L435766.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L43576a.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43576e.  v5:= (`long`) v1 @kind i2l;
  #L435770.  call `request`(v4, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L435776.  goto L43577c;
  #L435778.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L43577c.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L435780.  if v1 == 0 then goto L43583e;
  #L435784.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L435788.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43578e.  v0:= temp @kind object;
  #L435790.  if v0 != 0 then goto L435796;
  #L435794.  goto L4356ec;
  #L435796.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L43579a.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4357a0.  v1:= temp;
  #L4357a2.  if v1 == 0 then goto L4357ec;
  #L4357a6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4357ac.  v1:= temp;
  #L4357ae.  if v1 != 0 then goto L4356ec;
  #L4357b2.  call temp:= `compareAndSet`(v7, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4357b8.  v1:= temp;
  #L4357ba.  if v1 == 0 then goto L4356ec;
  #L4357be.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4357c2.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4357c8.  call temp:= `compareAndSet`(v7, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4357ce.  v0:= temp;
  #L4357d0.  if v0 != 0 then goto L4356ec;
  #L4357d4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4357d8.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4357dc.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4357e2.  v1:= temp @kind object;
  #L4357e4.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4357ea.  return @kind void;
  #L4357ec.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4357f0.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4357f4.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$g`;
  #L4357f8.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4357fc.  call `<init>`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L435802.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L435808.  goto L4358b6;
  #L43580a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43580c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435812.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435816.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43581c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435820.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435826.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43582a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43582e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435834.  v1:= temp @kind object;
  #L435836.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43583c.  return @kind void;
  #L43583e.  v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L435842.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L435846.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43584c.  goto L4358b6;
  #L43584e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435850.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435856.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43585a.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435860.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435864.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43586a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43586e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435872.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435878.  v1:= temp @kind object;
  #L43587a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435880.  return @kind void;
  #L435882.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435884.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43588a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43588e.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435894.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435898.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43589e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4358a2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4358a6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4358ac.  v1:= temp @kind object;
  #L4358ae.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4358b4.  return @kind void;
  #L4358b6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.n` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4358ba.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4358c0.  v0:= temp;
  #L4358c2.  if v0 != 0 then goto L4356ec;
  #L4358c6.  return @kind void;
  catch `java.lang.Throwable` @[L435702..L43570e] goto L435882;
  catch `java.lang.Throwable` @[L435734..L435750] goto L43584e;
  catch `java.lang.Throwable` @[L435788..L435790] goto L43580a;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L435a24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435a28.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L435a2e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4359b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4359b4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4359ba.  v0:= temp;
  #L4359bc.  if v0 == 0 then goto L4359ee;
  #L4359c0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4359c4.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L4359ca.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4359d0.  v2:= temp;
  #L4359d2.  if v2 != 0 then goto L4359f4;
  #L4359d6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$d.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4359da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4359de.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4359e4.  v0:= temp @kind object;
  #L4359e6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4359ec.  goto L4359f4;
  #L4359ee.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4359f4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$d` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435a08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L435a0c.  call `request`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L435a12.  return @kind void;
}
