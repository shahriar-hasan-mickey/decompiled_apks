record `io.reactivex.internal.operators.flowable.FlowableBuffer$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.functions.BooleanSupplier` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBuffer$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431a64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L431a6a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L431a6e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int` := v2;
  #L431a72.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int` := v3;
  #L431a76.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L431a7a.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L431a7e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L431a84.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L431a88.  v1:= new `java.util.ArrayDeque`;
  #L431a8c.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L431a92.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` := v1 @kind object;
  #L431a96.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431aa8.  v0:= 1I;
  #L431aaa.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` := v0 @kind boolean;
  #L431aae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431ab2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L431ab8.  return @kind void;
}
procedure `boolean` `getAsBoolean`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.getAsBoolean:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431a4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.j` @type ^`boolean` @kind boolean;
  #L431a50.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L431acc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L431ad0.  if v0 == 0 then goto L431ad6;
  #L431ad4.  return @kind void;
  #L431ad6.  v0:= 1I;
  #L431ad8.  v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L431adc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L431ae0.  v2:= 0L;
  #L431ae4.  v4:= lcmp(v0, v2);
  #L431ae8.  if v4 == 0 then goto L431af2;
  #L431aec.  call temp:= `produced`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L431af2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431af6.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L431afa.  call `postComplete`(v0, v1, v5, v5) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)V` @kind static;
  #L431b00.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431b14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L431b18.  if v0 == 0 then goto L431b24;
  #L431b1c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431b22.  return @kind void;
  #L431b24.  v0:= 1I;
  #L431b26.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` := v0 @kind boolean;
  #L431b2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L431b2e.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L431b34.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431b38.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431b3e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L431b50.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.h` @type ^`boolean` @kind boolean;
  #L431b54.  if v0 == 0 then goto L431b5a;
  #L431b58.  return @kind void;
  #L431b5a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L431b5e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int`;
  #L431b62.  v2:= v1 + 1;
  #L431b66.  if v1 != 0 then goto L431ba4;
  #L431b6a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L431b6e.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L431b74.  v1:= temp @kind object;
  #L431b76.  v3:= "The bufferSupplier returned a null buffer" @kind object;
  #L431b7a.  call temp:= `requireNonNull`(v1, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L431b80.  v1:= temp @kind object;
  #L431b82.  v1:= (`java.util.Collection`) v1 @kind object;
  #L431b86.  call temp:= `offer`(v0, v1) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L431b8c.  goto L431ba4;
  #L431b8e.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L431b90.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431b96.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.cancel:()V` @kind virtual;
  #L431b9c.  call `onError`(v7, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L431ba2.  return @kind void;
  #L431ba4.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L431baa.  v1:= temp @kind object;
  #L431bac.  v1:= (`java.util.Collection`) v1 @kind object;
  #L431bb0.  if v1 == 0 then goto L431bec;
  #L431bb4.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L431bba.  v3:= temp;
  #L431bbc.  v3:= v3 + 1;
  #L431bc0.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L431bc4.  if v3 != v4 then goto L431bec;
  #L431bc8.  call temp:= `poll`(v0) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L431bce.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L431bd4.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` @kind wide;
  #L431bd8.  v5:= 1L;
  #L431bdc.  v3:= v3 + v5 @kind long;
  #L431bde.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.k` @type ^`long` := v3 @kind wide;
  #L431be2.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431be6.  call `onNext`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431bec.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L431bf2.  v0:= temp @kind object;
  #L431bf4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L431bfa.  v1:= temp;
  #L431bfc.  if v1 == 0 then goto L431c14;
  #L431c00.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L431c06.  v1:= temp @kind object;
  #L431c08.  v1:= (`java.util.Collection`) v1 @kind object;
  #L431c0c.  call temp:= `add`(v1, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L431c12.  goto L431bf4;
  #L431c14.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L431c18.  if v2 != v8 then goto L431c1e;
  #L431c1c.  v2:= 0I;
  #L431c1e.  v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.i` @type ^`int` := v2;
  #L431c22.  return @kind void;
  catch `java.lang.Throwable` @[L431b6a..L431b86] goto L431b8e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431c40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431c44.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L431c4a.  v0:= temp;
  #L431c4c.  if v0 == 0 then goto L431c5e;
  #L431c50.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L431c54.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431c58.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L431c5e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$b` v7 @kind this, `long` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L431c70.  call temp:= `validate`(v8) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L431c76.  v0:= temp;
  #L431c78.  if v0 == 0 then goto L431d02;
  #L431c7c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431c80.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L431c84.  v1:= v8 @kind wide;
  #L431c86.  v5:= v7 @kind object;
  #L431c88.  v6:= v7 @kind object;
  #L431c8a.  call temp:= `postCompleteRequest`(v1, v3, v4, v5, v6) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.postCompleteRequest:(JLorg/reactivestreams/Subscriber;Ljava/util/Queue;Ljava/util/concurrent/atomic/AtomicLong;Lio/reactivex/functions/BooleanSupplier;)Z` @kind static;
  #L431c90.  v0:= temp;
  #L431c92.  if v0 == 0 then goto L431c98;
  #L431c96.  return @kind void;
  #L431c98.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L431c9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L431ca2.  v0:= temp;
  #L431ca4.  if v0 != 0 then goto L431cea;
  #L431ca8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L431cac.  v1:= 0I;
  #L431cae.  v2:= 1I;
  #L431cb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L431cb6.  v0:= temp;
  #L431cb8.  if v0 == 0 then goto L431cea;
  #L431cbc.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L431cc0.  v0:= (`long`) v0 @kind i2l;
  #L431cc2.  v2:= 1L;
  #L431cc6.  v8:= v8 - v2 @kind long;
  #L431cc8.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431cce.  v8:= temp @kind wide;
  #L431cd0.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.c` @type ^`int`;
  #L431cd4.  v0:= (`long`) v0 @kind i2l;
  #L431cd6.  call temp:= `addCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L431cdc.  v8:= temp @kind wide;
  #L431cde.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431ce2.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431ce8.  goto L431d02;
  #L431cea.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.d` @type ^`int`;
  #L431cee.  v0:= (`long`) v0 @kind i2l;
  #L431cf0.  call temp:= `multiplyCap`(v0, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431cf6.  v8:= temp @kind wide;
  #L431cf8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBuffer$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431cfc.  call `request`(v0, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431d02.  return @kind void;
}
