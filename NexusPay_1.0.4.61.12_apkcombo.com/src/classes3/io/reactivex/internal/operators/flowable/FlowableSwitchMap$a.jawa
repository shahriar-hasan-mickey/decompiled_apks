record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind object, `long` v2 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c1a8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44c1ae.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` := v1 @kind object;
  #L44c1b2.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` := v2 @kind wide;
  #L44c1b6.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int` := v4;
  #L44c1ba.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L44c1cc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44c1d2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44c364.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L44c368.  v1:= 1I;
  #L44c36a.  if v0 == v1 then goto L44c380;
  #L44c36e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c374.  v0:= temp @kind object;
  #L44c376.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44c37a.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44c380.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c1e4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L44c1e8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L44c1ec.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L44c1f0.  v5:= lcmp(v1, v3);
  #L44c1f4.  if v5 != 0 then goto L44c204;
  #L44c1f8.  v1:= 1I;
  #L44c1fa.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L44c1fe.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c204.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c218.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L44c21c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L44c220.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L44c224.  v5:= lcmp(v1, v3);
  #L44c228.  if v5 != 0 then goto L44c260;
  #L44c22c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c230.  call temp:= `addThrowable`(v1, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c236.  v1:= temp;
  #L44c238.  if v1 == 0 then goto L44c260;
  #L44c23c.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L44c240.  v1:= 1I;
  #L44c242.  if v7 != 0 then goto L44c254;
  #L44c246.  v7:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c24a.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c250.  v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v1 @kind boolean;
  #L44c254.  v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v1 @kind boolean;
  #L44c258.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c25e.  goto L44c266;
  #L44c260.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c266.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44c278.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L44c27c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.b` @type ^`long` @kind wide;
  #L44c280.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L44c284.  v5:= lcmp(v1, v3);
  #L44c288.  if v5 != 0 then goto L44c2c0;
  #L44c28c.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int`;
  #L44c290.  if v1 != 0 then goto L44c2ba;
  #L44c294.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44c298.  call temp:= `offer`(v1, v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44c29e.  v7:= temp;
  #L44c2a0.  if v7 != 0 then goto L44c2ba;
  #L44c2a4.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44c2a8.  v0:= "Queue full?!" @kind object;
  #L44c2ac.  call `<init>`(v7, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44c2b2.  call `onError`(v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c2b8.  return @kind void;
  #L44c2ba.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c2c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44c2d4.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44c2da.  v0:= temp;
  #L44c2dc.  if v0 == 0 then goto L44c350;
  #L44c2e0.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L44c2e4.  if v0 == 0 then goto L44c332;
  #L44c2e8.  v0:= v4 @kind object;
  #L44c2ea.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L44c2ee.  v1:= 7I;
  #L44c2f0.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L44c2f6.  v1:= temp;
  #L44c2f8.  v2:= 1I;
  #L44c2fa.  if v1 != v2 then goto L44c316;
  #L44c2fe.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L44c302.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44c306.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L44c30a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind object;
  #L44c30e.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c314.  return @kind void;
  #L44c316.  v2:= 2I;
  #L44c318.  if v1 != v2 then goto L44c332;
  #L44c31c.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.f` @type ^`int` := v1;
  #L44c320.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44c324.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L44c328.  v0:= (`long`) v0 @kind i2l;
  #L44c32a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44c330.  return @kind void;
  #L44c332.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L44c336.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L44c33a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L44c340.  v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44c344.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.c` @type ^`int`;
  #L44c348.  v0:= (`long`) v0 @kind i2l;
  #L44c34a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44c350.  return @kind void;
}
