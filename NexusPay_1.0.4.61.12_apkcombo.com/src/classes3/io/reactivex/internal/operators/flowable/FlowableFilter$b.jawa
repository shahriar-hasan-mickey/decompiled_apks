record `io.reactivex.internal.operators.flowable.FlowableFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface {
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a430.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43a436.  v0.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L43a43a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a44c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L43a452.  v3:= temp;
  #L43a454.  if v3 != 0 then goto L43a466;
  #L43a458.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43a45c.  v0:= 1L;
  #L43a460.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a466.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43a3e4.  v0:= v4.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L43a3e8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43a3ec.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43a3f2.  v2:= temp @kind object;
  #L43a3f4.  if v2 != 0 then goto L43a3fc;
  #L43a3f8.  v0:= 0I;
  #L43a3fa.  return v0 @kind object;
  #L43a3fc.  call temp:= `test`(v1, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L43a402.  v3:= temp;
  #L43a404.  if v3 == 0 then goto L43a40a;
  #L43a408.  return v2 @kind object;
  #L43a40a.  v2:= v4.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L43a40e.  v3:= 2I;
  #L43a410.  if v2 != v3 then goto L43a3ec;
  #L43a414.  v2:= 1L;
  #L43a418.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a41e.  goto L43a3ec;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43a3c8.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L43a3ce.  v1:= temp;
  #L43a3d0.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a360.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L43a364.  if v0 == 0 then goto L43a36c;
  #L43a368.  v3:= 0I;
  #L43a36a.  return v3;
  #L43a36c.  v0:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L43a370.  v1:= 1I;
  #L43a372.  if v0 == 0 then goto L43a384;
  #L43a376.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a37a.  v0:= 0I;
  #L43a37c.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a382.  return v1;
  #L43a384.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFilter$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L43a388.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L43a38e.  v0:= temp;
  #L43a390.  if v0 == 0 then goto L43a39e;
  #L43a394.  v1:= v2.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43a398.  call `onNext`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43a39e.  return v0;
  #L43a3a0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43a3a2.  call `fail`(v2, v3) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43a3a8.  return v1;
  catch `java.lang.Throwable` @[L43a384..L43a390] goto L43a3a0;
}
