record `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43271c.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L432722.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` := v1 @kind object;
  #L432726.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432738.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L43273c.  if v0 == 0 then goto L432742;
  #L432740.  return @kind void;
  #L432742.  v0:= 1I;
  #L432744.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L432748.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L43274c.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L432752.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432764.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L432768.  if v0 == 0 then goto L432774;
  #L43276c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L432772.  return @kind void;
  #L432774.  v0:= 1I;
  #L432776.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43277a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L43277e.  call `onError`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L432784.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L432798.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L43279c.  if v1 == 0 then goto L4327a2;
  #L4327a0.  return @kind void;
  #L4327a2.  v1:= 1I;
  #L4327a4.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L4327a8.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.cancel:()V` @kind virtual;
  #L4327ae.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableBufferBoundarySupplier$b` @kind object;
  #L4327b2.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundarySupplier$b;.c:()V` @kind virtual;
  #L4327b8.  return @kind void;
}
