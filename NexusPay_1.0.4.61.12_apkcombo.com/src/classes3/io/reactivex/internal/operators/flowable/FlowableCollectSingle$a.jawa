record `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4343cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4343d2.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4343d6.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L4343da.  v0.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L4343de.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4343f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4343f4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4343fa.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4343fe.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L434402.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4343a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4343ac.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4343b0.  if v0 != v1 then goto L4343b8;
  #L4343b4.  v0:= 1I;
  #L4343b6.  goto L4343ba;
  #L4343b8.  v0:= 0I;
  #L4343ba.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434414.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L434418.  if v0 == 0 then goto L43441e;
  #L43441c.  return @kind void;
  #L43441e.  v0:= 1I;
  #L434420.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L434424.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L434428.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43442c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L434430.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L434434.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43443a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43444c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L434450.  if v0 == 0 then goto L43445c;
  #L434454.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43445a.  return @kind void;
  #L43445c.  v0:= 1I;
  #L43445e.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` := v0 @kind boolean;
  #L434462.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L434466.  v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43446a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43446e.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434474.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434488.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.e` @type ^`boolean` @kind boolean;
  #L43448c.  if v0 == 0 then goto L434492;
  #L434490.  return @kind void;
  #L434492.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.b` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L434496.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L43449a.  call `accept`(v0, v1, v3) @signature `Lio/reactivex/functions/BiConsumer;.accept:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L4344a0.  goto L4344ba;
  #L4344a2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4344a4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4344aa.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4344ae.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4344b4.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4344ba.  return @kind void;
  catch `java.lang.Throwable` @[L434492..L4344a0] goto L4344a2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCollectSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4344d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4344dc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4344e2.  v0:= temp;
  #L4344e4.  if v0 == 0 then goto L434506;
  #L4344e8.  v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4344ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCollectSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4344f0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4344f6.  v0:= 9223372036854775807L;
  #L434500.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L434506.  return @kind void;
}
