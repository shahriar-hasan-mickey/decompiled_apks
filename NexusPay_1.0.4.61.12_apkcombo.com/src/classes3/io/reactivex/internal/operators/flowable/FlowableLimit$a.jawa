record `io.reactivex.internal.operators.flowable.FlowableLimit$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableLimit$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44157c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L441582.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L441586.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` := v2 @kind wide;
  #L44158a.  call `lazySet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L441590.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4415a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4415a8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4415ae.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4415c0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` @kind wide;
  #L4415c4.  v2:= 0L;
  #L4415c8.  v4:= lcmp(v0, v2);
  #L4415cc.  if v4 <= 0 then goto L4415de;
  #L4415d0.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` := v2 @kind wide;
  #L4415d4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4415d8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4415de.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4415f0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` @kind wide;
  #L4415f4.  v2:= 0L;
  #L4415f8.  v4:= lcmp(v0, v2);
  #L4415fc.  if v4 <= 0 then goto L441610;
  #L441600.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` := v2 @kind wide;
  #L441604.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441608.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44160e.  goto L441616;
  #L441610.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L441616.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L441628.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` @kind wide;
  #L44162c.  v2:= 0L;
  #L441630.  v4:= lcmp(v0, v2);
  #L441634.  if v4 <= 0 then goto L441668;
  #L441638.  v4:= 1L;
  #L44163c.  v0:= v0 - v4 @kind long;
  #L44163e.  v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` := v0 @kind wide;
  #L441642.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441646.  call `onNext`(v4, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44164c.  v7:= lcmp(v0, v2);
  #L441650.  if v7 != 0 then goto L441668;
  #L441654.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L441658.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44165e.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441662.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L441668.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44167c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L441680.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L441686.  v0:= temp;
  #L441688.  if v0 == 0 then goto L4416bc;
  #L44168c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.b` @type ^`long` @kind wide;
  #L441690.  v2:= 0L;
  #L441694.  v4:= lcmp(v0, v2);
  #L441698.  if v4 != 0 then goto L4416ae;
  #L44169c.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4416a2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4416a6.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4416ac.  goto L4416bc;
  #L4416ae.  v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L4416b2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableLimit$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4416b6.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4416bc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableLimit$a` v6 @kind this, `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4416d0.  call temp:= `validate`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4416d6.  v0:= temp;
  #L4416d8.  if v0 == 0 then goto L44171a;
  #L4416dc.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4416e2.  v0:= temp @kind wide;
  #L4416e4.  v2:= 0L;
  #L4416e8.  v4:= lcmp(v0, v2);
  #L4416ec.  if v4 != 0 then goto L4416f2;
  #L4416f0.  goto L44171a;
  #L4416f2.  v2:= lcmp(v0, v7);
  #L4416f6.  if v2 > 0 then goto L4416fe;
  #L4416fa.  v2:= v0 @kind wide;
  #L4416fc.  goto L441700;
  #L4416fe.  v2:= v7 @kind wide;
  #L441700.  v4:= v0 - v2 @kind long;
  #L441704.  call temp:= `compareAndSet`(v6, v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44170a.  v0:= temp;
  #L44170c.  if v0 == 0 then goto L4416dc;
  #L441710.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableLimit$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L441714.  call `request`(v7, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44171a.  return @kind void;
}
