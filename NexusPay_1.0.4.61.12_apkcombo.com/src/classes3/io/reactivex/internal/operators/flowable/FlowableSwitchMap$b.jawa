record `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @AccessFlag VOLATILE;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @AccessFlag VOLATILE;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44c394.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`;
  #L44c398.  v1:= 0I;
  #L44c39a.  v2:= -1L;
  #L44c39e.  v4:= 1I;
  #L44c3a0.  call `<init>`(v0, v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L44c3a6.  `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` := v0 @kind object;
  #L44c3aa.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L44c3b0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44c3c4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44c3ca.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44c3ce.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44c3d4.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L44c3d8.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44c3dc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44c3e2.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44c3e6.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44c3ea.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L44c3ee.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int` := v4;
  #L44c3f2.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` := v5 @kind boolean;
  #L44c3f6.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L44c3fa.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44c400.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L44c404.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44c448.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c44c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c452.  v0:= temp @kind object;
  #L44c454.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L44c458.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L44c45c.  if v0 == v1 then goto L44c482;
  #L44c460.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c464.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44c46a.  v0:= temp @kind object;
  #L44c46c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L44c470.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L44c474.  if v0 == v1 then goto L44c482;
  #L44c478.  if v0 == 0 then goto L44c482;
  #L44c47c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L44c482.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L44c494.  v1:= v17 @kind object;
  #L44c498.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44c49e.  v0:= temp;
  #L44c4a0.  if v0 == 0 then goto L44c4a6;
  #L44c4a4.  return @kind void;
  #L44c4a6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c4aa.  v4:= 1I;
  #L44c4ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L44c4b0.  if v0 == 0 then goto L44c4b6;
  #L44c4b4.  return @kind void;
  #L44c4b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L44c4ba.  if v0 == 0 then goto L44c54c;
  #L44c4be.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L44c4c2.  if v0 == 0 then goto L44c506;
  #L44c4c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c4ca.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c4d0.  v0:= temp @kind object;
  #L44c4d2.  if v0 != 0 then goto L44c54c;
  #L44c4d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c4da.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c4e0.  v0:= temp @kind object;
  #L44c4e2.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44c4e6.  if v0 == 0 then goto L44c4fe;
  #L44c4ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c4ee.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c4f4.  v0:= temp @kind object;
  #L44c4f6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c4fc.  goto L44c504;
  #L44c4fe.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c504.  return @kind void;
  #L44c506.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c50a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c510.  v0:= temp @kind object;
  #L44c512.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44c516.  if v0 == 0 then goto L44c534;
  #L44c51a.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L44c520.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c524.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c52a.  v0:= temp @kind object;
  #L44c52c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c532.  return @kind void;
  #L44c534.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c538.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c53e.  v0:= temp @kind object;
  #L44c540.  if v0 != 0 then goto L44c54c;
  #L44c544.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c54a.  return @kind void;
  #L44c54c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c550.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c556.  v0:= temp @kind object;
  #L44c558.  v5:= v0 @kind object;
  #L44c55a.  v5:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v5 @kind object;
  #L44c55e.  v6:= 0I;
  #L44c560.  if v5 == 0 then goto L44c56c;
  #L44c564.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.d` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44c568.  v7:= v0 @kind object;
  #L44c56a.  goto L44c56e;
  #L44c56c.  v7:= v6 @kind object;
  #L44c56e.  if v7 == 0 then goto L44c6fc;
  #L44c572.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L44c576.  if v0 == 0 then goto L44c5e4;
  #L44c57a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L44c57e.  if v0 != 0 then goto L44c5ca;
  #L44c582.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c586.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c58c.  v0:= temp @kind object;
  #L44c58e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44c592.  if v0 == 0 then goto L44c5b0;
  #L44c596.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L44c59c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c5a0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c5a6.  v0:= temp @kind object;
  #L44c5a8.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c5ae.  return @kind void;
  #L44c5b0.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44c5b6.  v0:= temp;
  #L44c5b8.  if v0 == 0 then goto L44c5e4;
  #L44c5bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c5c0.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c5c6.  goto L44c4ac;
  #L44c5ca.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44c5d0.  v0:= temp;
  #L44c5d2.  if v0 == 0 then goto L44c5e4;
  #L44c5d6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c5da.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c5e0.  goto L44c4ac;
  #L44c5e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c5e8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44c5ee.  v8:= temp @kind wide;
  #L44c5f0.  v10:= 0L;
  #L44c5f4.  v12:= v10 @kind wide;
  #L44c5f6.  v14:= 0I;
  #L44c5f8.  v0:= lcmp(v12, v8);
  #L44c5fc.  if v0 == 0 then goto L44c6c0;
  #L44c600.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L44c604.  if v0 == 0 then goto L44c60a;
  #L44c608.  return @kind void;
  #L44c60a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a.e` @type ^`boolean` @kind boolean;
  #L44c60e.  call temp:= `poll`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44c614.  v15:= temp @kind object;
  #L44c616.  goto L44c636;
  #L44c618.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c61a.  v15:= v0 @kind object;
  #L44c61c.  call `throwIfFatal`(v15) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44c622.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L44c628.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c62c.  call temp:= `addThrowable`(v0, v15) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c632.  v15:= v6 @kind object;
  #L44c634.  v0:= 1I;
  #L44c636.  if v15 != 0 then goto L44c640;
  #L44c63a.  v16:= 1I;
  #L44c63e.  goto L44c644;
  #L44c640.  v16:= 0I;
  #L44c644.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c648.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c64e.  v3:= temp @kind object;
  #L44c650.  if v5 == v3 then goto L44c658;
  #L44c654.  v14:= 1I;
  #L44c656.  goto L44c6c0;
  #L44c658.  if v0 == 0 then goto L44c6ac;
  #L44c65c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L44c660.  if v0 != 0 then goto L44c69c;
  #L44c664.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c668.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c66e.  v0:= temp @kind object;
  #L44c670.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L44c674.  if v0 == 0 then goto L44c68c;
  #L44c678.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c67c.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44c682.  v0:= temp @kind object;
  #L44c684.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c68a.  return @kind void;
  #L44c68c.  if v16 == 0 then goto L44c6ac;
  #L44c690.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c694.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c69a.  goto L44c654;
  #L44c69c.  if v16 == 0 then goto L44c6ac;
  #L44c6a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c6a4.  call temp:= `compareAndSet`(v0, v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c6aa.  goto L44c654;
  #L44c6ac.  if v16 == 0 then goto L44c6b2;
  #L44c6b0.  goto L44c6c0;
  #L44c6b2.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44c6b8.  v14:= 1L;
  #L44c6bc.  v12:= v12 + v14 @kind long;
  #L44c6be.  goto L44c5f6;
  #L44c6c0.  v0:= lcmp(v12, v10);
  #L44c6c4.  if v0 == 0 then goto L44c6f4;
  #L44c6c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L44c6cc.  if v0 != 0 then goto L44c6f4;
  #L44c6d0.  v6:= 9223372036854775807L;
  #L44c6da.  v0:= lcmp(v8, v6);
  #L44c6de.  if v0 == 0 then goto L44c6ee;
  #L44c6e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c6e6.  v6:= -v12 @kind long;
  #L44c6e8.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44c6ee.  call `b`(v5, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.b:(J)V` @kind virtual;
  #L44c6f4.  if v14 == 0 then goto L44c6fc;
  #L44c6f8.  goto L44c4ac;
  #L44c6fc.  v0:= -v4 @kind int;
  #L44c6fe.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44c704.  v4:= temp;
  #L44c706.  if v4 != 0 then goto L44c4ac;
  #L44c70a.  return @kind void;
  catch `java.lang.Throwable` @[L44c60e..L44c616] goto L44c618;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c418.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` @kind boolean;
  #L44c41c.  if v0 != 0 then goto L44c436;
  #L44c420.  v0:= 1I;
  #L44c422.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.g` @type ^`boolean` := v0 @kind boolean;
  #L44c426.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c42a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c430.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L44c436.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c728.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L44c72c.  if v0 == 0 then goto L44c732;
  #L44c730.  return @kind void;
  #L44c732.  v0:= 1I;
  #L44c734.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v0 @kind boolean;
  #L44c738.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c73e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c750.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L44c754.  if v0 != 0 then goto L44c784;
  #L44c758.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44c75c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44c762.  v0:= temp;
  #L44c764.  if v0 == 0 then goto L44c784;
  #L44c768.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.d` @type ^`boolean` @kind boolean;
  #L44c76c.  if v2 != 0 then goto L44c776;
  #L44c770.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.a:()V` @kind virtual;
  #L44c776.  v2:= 1I;
  #L44c778.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` := v2 @kind boolean;
  #L44c77c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c782.  goto L44c78a;
  #L44c784.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c78a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c79c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.e` @type ^`boolean` @kind boolean;
  #L44c7a0.  if v0 == 0 then goto L44c7a6;
  #L44c7a4.  return @kind void;
  #L44c7a6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L44c7aa.  v2:= 1L;
  #L44c7ae.  v0:= v0 + v2 @kind long;
  #L44c7b0.  v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` := v0 @kind wide;
  #L44c7b4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c7b8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c7be.  v2:= temp @kind object;
  #L44c7c0.  v2:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v2 @kind object;
  #L44c7c4.  if v2 == 0 then goto L44c7ce;
  #L44c7c8.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.a:()V` @kind virtual;
  #L44c7ce.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L44c7d2.  call temp:= `apply`(v2, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44c7d8.  v5:= temp @kind object;
  #L44c7da.  v2:= "The publisher returned is null" @kind object;
  #L44c7de.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44c7e4.  v5:= temp @kind object;
  #L44c7e6.  v5:= (`org.reactivestreams.Publisher`) v5 @kind object;
  #L44c7ea.  v2:= new `io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`;
  #L44c7ee.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.c` @type ^`int`;
  #L44c7f2.  call `<init>`(v2, v4, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;JI)V` @kind direct;
  #L44c7f8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c7fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44c802.  v0:= temp @kind object;
  #L44c804.  v0:= (`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a`) v0 @kind object;
  #L44c808.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowableSwitchMap$a` @kind object;
  #L44c80c.  if v0 != v1 then goto L44c812;
  #L44c810.  goto L44c828;
  #L44c812.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44c816.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44c81c.  v0:= temp;
  #L44c81e.  if v0 == 0 then goto L44c7f8;
  #L44c822.  call `subscribe`(v5, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44c828.  return @kind void;
  #L44c82a.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44c82c.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44c832.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c836.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c83c.  call `onError`(v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44c842.  return @kind void;
  catch `java.lang.Throwable` @[L44c7ce..L44c7ea] goto L44c82a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c860.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c864.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44c86a.  v0:= temp;
  #L44c86c.  if v0 == 0 then goto L44c87e;
  #L44c870.  v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44c874.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c878.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44c87e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44c890.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44c896.  v0:= temp;
  #L44c898.  if v0 == 0 then goto L44c8d2;
  #L44c89c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44c8a0.  call temp:= `add`(v0, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44c8a6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.k` @type ^`long` @kind wide;
  #L44c8aa.  v0:= 0L;
  #L44c8ae.  v2:= lcmp(v4, v0);
  #L44c8b2.  if v2 != 0 then goto L44c8cc;
  #L44c8b6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSwitchMap$b.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c8ba.  v0:= 9223372036854775807L;
  #L44c8c4.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44c8ca.  goto L44c8d2;
  #L44c8cc.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSwitchMap$b;.b:()V` @kind virtual;
  #L44c8d2.  return @kind void;
}
