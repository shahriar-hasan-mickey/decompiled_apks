record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4499e0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4499e6.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4499ea.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4499f0.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L4499f4.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4499f8.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4499fe.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v0 @kind object;
  #L449a02.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L449a06.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` := v3 @kind wide;
  #L449a0a.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L449a0e.  v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L449a12.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L449a48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L449a4c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L449a52.  return @kind void;
}
procedure `void` `b`() @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L449a64.  v0:= 0I;
  #L449a66.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L449a6c.  v0:= temp @kind object;
  #L449a6e.  if v0 == 0 then goto L449ac2;
  #L449a72.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L449a76.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L449a7c.  v1:= temp @kind wide;
  #L449a7e.  v3:= 0L;
  #L449a82.  v5:= lcmp(v1, v3);
  #L449a86.  if v5 == 0 then goto L449aa4;
  #L449a8a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449a8e.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L449a94.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L449a98.  v1:= 1L;
  #L449a9c.  call temp:= `produced`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L449aa2.  goto L449ac2;
  #L449aa4.  call `cancel`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @kind virtual;
  #L449aaa.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449aae.  v1:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L449ab2.  v2:= "Couldn't emit value due to lack of requests!" @kind object;
  #L449ab6.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L449abc.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449ac2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449a24.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L449a2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449a2e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L449a34.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L449ad4.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L449ada.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.b:()V` @kind virtual;
  #L449ae0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449af4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.a:()V` @kind virtual;
  #L449afa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449afe.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449b04.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L449b18.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L449b1e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L449b30.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449b34.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L449b3a.  v0:= temp;
  #L449b3c.  if v0 == 0 then goto L449b80;
  #L449b40.  v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.g` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L449b44.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449b48.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L449b4e.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.f` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L449b52.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L449b56.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.b` @type ^`long` @kind wide;
  #L449b5a.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L449b5e.  v2:= v8 @kind object;
  #L449b60.  v3:= v5 @kind wide;
  #L449b62.  call temp:= `schedulePeriodicallyDirect`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L449b68.  v1:= temp @kind object;
  #L449b6a.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L449b70.  v0:= 9223372036854775807L;
  #L449b7a.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L449b80.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449b94.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L449b9a.  v0:= temp;
  #L449b9c.  if v0 == 0 then goto L449baa;
  #L449ba0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L449ba4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L449baa.  return @kind void;
}
