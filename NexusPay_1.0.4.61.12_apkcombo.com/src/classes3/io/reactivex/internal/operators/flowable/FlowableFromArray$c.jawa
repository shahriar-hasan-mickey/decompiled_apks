record `io.reactivex.internal.operators.flowable.FlowableFromArray$c` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromArray$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.<init>:([Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d64c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L43d652.  v0.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] := v1 @kind object;
  #L43d656.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43d668.  v0:= 1I;
  #L43d66a.  v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.c` @type ^`boolean` := v0 @kind boolean;
  #L43d66e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43d680.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d684.  v0:= length @variable v0;
  #L43d686.  v1.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v0;
  #L43d68a.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L43d5d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d5d4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d5d8.  v1:= length @variable v1;
  #L43d5da.  if v0 != v1 then goto L43d5e2;
  #L43d5de.  v0:= 1I;
  #L43d5e0.  goto L43d5e4;
  #L43d5e2.  v0:= 0I;
  #L43d5e4.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43d610.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int`;
  #L43d614.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.a` @type ^`java.lang.Object`[] @kind object;
  #L43d618.  v2:= length @variable v1;
  #L43d61a.  if v0 != v2 then goto L43d622;
  #L43d61e.  v0:= 0I;
  #L43d620.  return v0 @kind object;
  #L43d622.  v2:= v0 + 1;
  #L43d626.  v3.`io.reactivex.internal.operators.flowable.FlowableFromArray$c.b` @type ^`int` := v2;
  #L43d62a.  v0:= v1[v0] @kind object;
  #L43d62e.  v1:= "array element is null" @kind object;
  #L43d632.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43d638.  v0:= temp @kind object;
  #L43d63a.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d69c.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43d6a2.  v0:= temp;
  #L43d6a4.  if v0 == 0 then goto L43d6dc;
  #L43d6a8.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43d6ae.  v0:= temp @kind wide;
  #L43d6b0.  v2:= 0L;
  #L43d6b4.  v4:= lcmp(v0, v2);
  #L43d6b8.  if v4 != 0 then goto L43d6dc;
  #L43d6bc.  v0:= 9223372036854775807L;
  #L43d6c6.  v2:= lcmp(v6, v0);
  #L43d6ca.  if v2 != 0 then goto L43d6d6;
  #L43d6ce.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.a:()V` @kind virtual;
  #L43d6d4.  goto L43d6dc;
  #L43d6d6.  call `e`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.e:(J)V` @kind virtual;
  #L43d6dc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFromArray$c` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromArray$c;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L43d5f8.  v1:= v1 ^& 1;
  #L43d5fc.  return v1;
}
