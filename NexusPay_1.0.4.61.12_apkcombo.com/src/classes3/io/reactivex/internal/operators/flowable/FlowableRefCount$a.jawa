record `io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `java.lang.Runnable` @kind interface, `io.reactivex.functions.Consumer` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableRefCount` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRefCount$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L447024.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44702a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` := v1 @kind object;
  #L44702e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L447040.  call temp:= `replace`(v2, v3) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L447046.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L44704a.  @monitorenter v0
  #L44704c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` @kind boolean;
  #L447050.  if v1 == 0 then goto L447066;
  #L447054.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L447058.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L44705c.  v1:= (`io.reactivex.internal.disposables.ResettableConnectable`) v1 @kind object;
  #L447060.  call `resetIf`(v1, v3) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L447066.  @monitorexit v0
  #L447068.  return @kind void;
  #L44706a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44706c.  @monitorexit v0
  #L44706e.  throw v3;
  catch `java.lang.Throwable` @[L44704c..L44706e] goto L44706a;
}
procedure `void` `accept`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.accept:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L44708c.  v1:= (`io.reactivex.disposables.Disposable`) v1 @kind object;
  #L447090.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.a:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L447096.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableRefCount$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4470a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount` @kind object;
  #L4470ac.  call `i`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.i:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4470b2.  return @kind void;
}
