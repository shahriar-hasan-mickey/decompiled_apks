record `io.reactivex.internal.operators.flowable.FlowableDoFinally$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @AccessFlag ;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDoFinally$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43916c.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L439172.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L439176.  v0.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L43917a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43918c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439190.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L439196.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L43919c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4391b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4391b4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4391ba.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43928c.  v0:= 0I;
  #L43928e.  v1:= 1I;
  #L439290.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L439296.  v0:= temp;
  #L439298.  if v0 == 0 then goto L4392b6;
  #L43929c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.b` @type ^`io.reactivex.functions.Action` @kind object;
  #L4392a0.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4392a6.  goto L4392b6;
  #L4392a8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4392aa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4392b0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4392b6.  return @kind void;
  catch `java.lang.Throwable` @[L43929c..L4392a6] goto L4392a8;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4390dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L4390e0.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4390e6.  v0:= temp;
  #L4390e8.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4391cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4391d0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4391d6.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L4391dc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4391f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4391f4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4391fa.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L439200.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439214.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439218.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43921e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439230.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439234.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43923a.  v0:= temp;
  #L43923c.  if v0 == 0 then goto L43925e;
  #L439240.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L439244.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L439248.  if v0 == 0 then goto L439254;
  #L43924c.  v2:= (`io.reactivex.internal.fuseable.QueueSubscription`) v2 @kind object;
  #L439250.  v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v2 @kind object;
  #L439254.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439258.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43925e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43913c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L439140.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L439146.  v0:= temp @kind object;
  #L439148.  if v0 != 0 then goto L43915a;
  #L43914c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @type ^`boolean` @kind boolean;
  #L439150.  if v1 == 0 then goto L43915a;
  #L439154.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.e:()V` @kind virtual;
  #L43915a.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439270.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439274.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43927a.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoFinally$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoFinally$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4390fc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.d` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L439100.  v1:= 0I;
  #L439102.  if v0 == 0 then goto L439128;
  #L439106.  v2:= v4 ^& 4;
  #L43910a.  if v2 != 0 then goto L439128;
  #L43910e.  call temp:= `requestFusion`(v0, v4) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L439114.  v4:= temp;
  #L439116.  if v4 == 0 then goto L439126;
  #L43911a.  v0:= 1I;
  #L43911c.  if v4 != v0 then goto L439122;
  #L439120.  v1:= 1I;
  #L439122.  v3.`io.reactivex.internal.operators.flowable.FlowableDoFinally$b.e` @type ^`boolean` := v1 @kind boolean;
  #L439126.  return v4;
  #L439128.  return v1;
}
