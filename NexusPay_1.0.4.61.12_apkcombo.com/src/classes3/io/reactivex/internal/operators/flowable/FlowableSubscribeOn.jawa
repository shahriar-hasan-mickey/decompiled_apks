record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44c028.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L44c02e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L44c032.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn.c` @type ^`boolean` := v3 @kind boolean;
  #L44c036.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44c048.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L44c04c.  call temp:= `createWorker`(v0) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L44c052.  v0:= temp @kind object;
  #L44c054.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a`;
  #L44c058.  v2:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L44c05c.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn.c` @type ^`boolean` @kind boolean;
  #L44c060.  call `<init>`(v1, v5, v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @kind direct;
  #L44c066.  call `onSubscribe`(v5, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44c06c.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44c072.  return @kind void;
}
