record `io.reactivex.internal.operators.flowable.FlowableConcatMap$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableConcatMap$b` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMap$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435308.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$b;.<init>:(Lio/reactivex/functions/Function;I)V` @kind direct;
  #L43530e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L435312.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` := v4 @kind boolean;
  #L435316.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4355a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4355a4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4355aa.  v0:= temp;
  #L4355ac.  if v0 == 0 then goto L4355d6;
  #L4355b0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L4355b4.  if v2 != 0 then goto L4355c8;
  #L4355b8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4355bc.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4355c2.  v2:= 1I;
  #L4355c4.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L4355c8.  v2:= 0I;
  #L4355ca.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v2 @kind boolean;
  #L4355ce.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L4355d4.  goto L4355dc;
  #L4355d6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4355dc.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4355f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4355f4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4355fa.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435328.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L43532c.  if v0 != 0 then goto L43534a;
  #L435330.  v0:= 1I;
  #L435332.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` := v0 @kind boolean;
  #L435336.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L43533a.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind virtual;
  #L435340.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435344.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43534a.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43535c.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435362.  v0:= temp;
  #L435364.  if v0 != 0 then goto L435568;
  #L435368.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.i` @type ^`boolean` @kind boolean;
  #L43536c.  if v0 == 0 then goto L435372;
  #L435370.  return @kind void;
  #L435372.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` @kind boolean;
  #L435376.  if v0 != 0 then goto L43555c;
  #L43537a.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` @kind boolean;
  #L43537e.  if v0 == 0 then goto L4353b6;
  #L435382.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L435386.  if v1 != 0 then goto L4353b6;
  #L43538a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43538e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435394.  v1:= temp @kind object;
  #L435396.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L43539a.  if v1 == 0 then goto L4353b6;
  #L43539e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4353a2.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4353a6.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4353ac.  v1:= temp @kind object;
  #L4353ae.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4353b4.  return @kind void;
  #L4353b6.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4353ba.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4353c0.  v1:= temp @kind object;
  #L4353c2.  v2:= 0I;
  #L4353c4.  v3:= 1I;
  #L4353c6.  if v1 != 0 then goto L4353ce;
  #L4353ca.  v4:= 1I;
  #L4353cc.  goto L4353d0;
  #L4353ce.  v4:= 0I;
  #L4353d0.  if v0 == 0 then goto L435400;
  #L4353d4.  if v4 == 0 then goto L435400;
  #L4353d8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4353dc.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4353e2.  v0:= temp @kind object;
  #L4353e4.  if v0 == 0 then goto L4353f4;
  #L4353e8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4353ec.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4353f2.  goto L4353fe;
  #L4353f4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4353f8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4353fe.  return @kind void;
  #L435400.  if v4 != 0 then goto L43555c;
  #L435404.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L435408.  call temp:= `apply`(v0, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43540e.  v0:= temp @kind object;
  #L435410.  v1:= "The mapper returned a null Publisher" @kind object;
  #L435414.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43541a.  v0:= temp @kind object;
  #L43541c.  v0:= (`org.reactivestreams.Publisher`) v0 @kind object;
  #L435420.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.l` @type ^`int`;
  #L435424.  if v1 == v3 then goto L43544c;
  #L435428.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int`;
  #L43542c.  v1:= v1 + v3 @kind int;
  #L43542e.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.d` @type ^`int`;
  #L435432.  if v1 != v4 then goto L435448;
  #L435436.  v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v2;
  #L43543a.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43543e.  v4:= (`long`) v1 @kind i2l;
  #L435440.  call `request`(v2, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L435446.  goto L43544c;
  #L435448.  v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.f` @type ^`int` := v1;
  #L43544c.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L435450.  if v1 == 0 then goto L4354e4;
  #L435454.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L435458.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43545e.  v0:= temp @kind object;
  #L435460.  goto L4354a0;
  #L435462.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435464.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43546a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43546e.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435474.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.n` @type ^`boolean` @kind boolean;
  #L435478.  if v0 != 0 then goto L43549e;
  #L43547c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435480.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435486.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43548a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43548e.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435494.  v1:= temp @kind object;
  #L435496.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43549c.  return @kind void;
  #L43549e.  v0:= 0I;
  #L4354a0.  if v0 != 0 then goto L4354a8;
  #L4354a4.  goto L435368;
  #L4354a8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4354ac.  call temp:= `isUnbounded`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isUnbounded:()Z` @kind virtual;
  #L4354b2.  v1:= temp;
  #L4354b4.  if v1 == 0 then goto L4354c6;
  #L4354b8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4354bc.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4354c2.  goto L435368;
  #L4354c6.  v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4354ca.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4354ce.  v2:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$g`;
  #L4354d2.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4354d6.  call `<init>`(v2, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$g;.<init>:(Ljava/lang/Object;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4354dc.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4354e2.  goto L43555c;
  #L4354e4.  v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.k` @type ^`boolean` := v3 @kind boolean;
  #L4354e8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L4354ec.  call `subscribe`(v0, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4354f2.  goto L43555c;
  #L4354f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4354f6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4354fc.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435500.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435506.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43550a.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435510.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435514.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435518.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43551e.  v1:= temp @kind object;
  #L435520.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435526.  return @kind void;
  #L435528.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43552a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435530.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435534.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43553a.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43553e.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435544.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435548.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43554c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435552.  v1:= temp @kind object;
  #L435554.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43555a.  return @kind void;
  #L43555c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L435562.  v0:= temp;
  #L435564.  if v0 != 0 then goto L435368;
  #L435568.  return @kind void;
  catch `java.lang.Throwable` @[L4353b6..L4353c2] goto L435528;
  catch `java.lang.Throwable` @[L435404..L435420] goto L4354f4;
  catch `java.lang.Throwable` @[L435458..L435460] goto L435462;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.e:()V` @AccessFlag  {
    temp;
    v0;

  #L435660.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$c.m` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435664.  call `onSubscribe`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43566a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43560c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.j` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435610.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435616.  v0:= temp;
  #L435618.  if v0 == 0 then goto L43562a;
  #L43561c.  v2:= 1I;
  #L43561e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.h` @type ^`boolean` := v2 @kind boolean;
  #L435622.  call `d`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.d:()V` @kind virtual;
  #L435628.  goto L435630;
  #L43562a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435630.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMap$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435644.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMap$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableConcatMap$e` @kind object;
  #L435648.  call `request`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.request:(J)V` @kind virtual;
  #L43564e.  return @kind void;
}
