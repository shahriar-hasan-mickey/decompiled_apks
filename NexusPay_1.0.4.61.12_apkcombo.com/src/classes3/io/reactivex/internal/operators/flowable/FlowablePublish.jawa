record `io.reactivex.internal.operators.flowable.FlowablePublish` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.internal.operators.flowable.FlowablePublishClassic` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowablePublish.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublish.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublish.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowablePublish.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4461a4.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L4461aa.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L4461ae.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L4461b2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L4461b6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`int` := v4;
  #L4461ba.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L44613c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L446140.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L446146.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$a`;
  #L44614a.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L446150.  v2:= new `io.reactivex.internal.operators.flowable.FlowablePublish`;
  #L446154.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L44615a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L446160.  v3:= temp @kind object;
  #L446162.  return v3 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowablePublish` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4461cc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4461d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4461d6.  v0:= temp @kind object;
  #L4461d8.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublish$c`) v0 @kind object;
  #L4461dc.  if v0 == 0 then goto L4461ec;
  #L4461e0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.isDisposed:()Z` @kind virtual;
  #L4461e6.  v1:= temp;
  #L4461e8.  if v1 == 0 then goto L446212;
  #L4461ec.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublish$c`;
  #L4461f0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4461f4.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`int`;
  #L4461f8.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L4461fe.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L446202.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L446208.  v0:= temp;
  #L44620a.  if v0 != 0 then goto L446210;
  #L44620e.  goto L4461cc;
  #L446210.  v0:= v1 @kind object;
  #L446212.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L446216.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44621c.  v1:= temp;
  #L44621e.  v2:= 1I;
  #L446220.  v3:= 0I;
  #L446222.  if v1 != 0 then goto L446238;
  #L446226.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublish$c.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44622a.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L446230.  v1:= temp;
  #L446232.  if v1 == 0 then goto L446238;
  #L446236.  goto L44623a;
  #L446238.  v2:= 0I;
  #L44623a.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L446240.  if v2 == 0 then goto L44624e;
  #L446244.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`io.reactivex.Flowable` @kind object;
  #L446248.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L44624e.  return @kind void;
  #L446250.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L446252.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L446258.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44625e.  v5:= temp @kind object;
  #L446260.  throw v5;
  catch `java.lang.Throwable` @[L44623a..L446240] goto L446250;
}
procedure `int` `publishBufferSize`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.publishBufferSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446124.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.d` @type ^`int`;
  #L446128.  return v0;
}
procedure `org.reactivestreams.Publisher` `publishSource`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.publishSource:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446174.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`io.reactivex.Flowable` @kind object;
  #L446178.  return v0 @kind object;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44618c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.b` @type ^`io.reactivex.Flowable` @kind object;
  #L446190.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublish` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L446280.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L446284.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44628a.  return @kind void;
}
