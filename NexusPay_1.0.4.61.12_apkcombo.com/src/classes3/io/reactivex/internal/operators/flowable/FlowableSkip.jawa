record `io.reactivex.internal.operators.flowable.FlowableSkip` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableSkip.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkip` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip;.<init>:(Lio/reactivex/Flowable;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44bd90.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L44bd96.  v0.`io.reactivex.internal.operators.flowable.FlowableSkip.b` @type ^`long` := v2 @kind wide;
  #L44bd9a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSkip` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44bdac.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L44bdb0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSkip$a`;
  #L44bdb4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSkip.b` @type ^`long` @kind wide;
  #L44bdb8.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkip$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L44bdbe.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L44bdc4.  return @kind void;
}
