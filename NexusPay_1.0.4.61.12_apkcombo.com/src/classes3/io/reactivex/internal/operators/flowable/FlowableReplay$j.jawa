record `io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$g` `io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowableReplay$d`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableReplay$d`[] `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L448494.  v0:= 0I;
  #L448496.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v0];
  #L44849a.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] := v1 @kind object;
  #L44849e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v0];
  #L4484a2.  `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] := v0 @kind object;
  #L4484a6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$g` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4484b8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4484be.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` := v2 @kind object;
  #L4484c2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4484c6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4484cc.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4484d0.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4484d4.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L4484d8.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4484de.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4484e2.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4484e6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4484ec.  v1.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L4484f0.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.a:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44840c.  if v5 == 0 then goto L448454;
  #L448410.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448414.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44841a.  v0:= temp @kind object;
  #L44841c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L448420.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L448424.  v2:= 0I;
  #L448426.  if v0 != v1 then goto L44842c;
  #L44842a.  return v2;
  #L44842c.  v1:= length @variable v0;
  #L44842e.  v3:= v1 + 1;
  #L448432.  v3:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v3];
  #L448436.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44843c.  v3[v1]:= v5 @kind object;
  #L448440.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448444.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44844a.  v0:= temp;
  #L44844c.  if v0 == 0 then goto L448410;
  #L448450.  v5:= 1I;
  #L448452.  return v5;
  #L448454.  v5:= 0I;
  #L448456.  throw v5;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44852c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L448530.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L448536.  v0:= temp;
  #L448538.  if v0 == 0 then goto L44853e;
  #L44853c.  return @kind void;
  #L44853e.  v0:= 1I;
  #L448540.  call temp:= `isDisposed`(v11) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @kind virtual;
  #L448546.  v1:= temp;
  #L448548.  if v1 == 0 then goto L44854e;
  #L44854c.  return @kind void;
  #L44854e.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448552.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448558.  v1:= temp @kind object;
  #L44855a.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v1 @kind object;
  #L44855e.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @type ^`long` @kind wide;
  #L448562.  v4:= length @variable v1;
  #L448564.  v5:= 0I;
  #L448566.  v6:= v2 @kind wide;
  #L448568.  if v5 >= v4 then goto L44858a;
  #L44856c.  v8:= v1[v5] @kind object;
  #L448570.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L448574.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44857a.  v8:= temp @kind wide;
  #L44857c.  call temp:= `max`(v6, v8) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L448582.  v6:= temp @kind wide;
  #L448584.  v5:= v5 + 1;
  #L448588.  goto L448568;
  #L44858a.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` @kind wide;
  #L44858e.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448594.  v1:= temp @kind object;
  #L448596.  v1:= (`org.reactivestreams.Subscription`) v1 @kind object;
  #L44859a.  v2:= v6 - v2 @kind long;
  #L44859e.  v8:= 0L;
  #L4485a2.  v10:= lcmp(v2, v8);
  #L4485a6.  if v10 == 0 then goto L4485ea;
  #L4485aa.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.f` @type ^`long` := v6 @kind wide;
  #L4485ae.  if v1 == 0 then goto L4485d0;
  #L4485b2.  v6:= lcmp(v4, v8);
  #L4485b6.  if v6 == 0 then goto L4485c8;
  #L4485ba.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v8 @kind wide;
  #L4485be.  v4:= v4 + v2 @kind long;
  #L4485c0.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4485c6.  goto L448600;
  #L4485c8.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4485ce.  goto L448600;
  #L4485d0.  v4:= v4 + v2 @kind long;
  #L4485d2.  v1:= lcmp(v4, v8);
  #L4485d6.  if v1 >= 0 then goto L4485e4;
  #L4485da.  v4:= 9223372036854775807L;
  #L4485e4.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v4 @kind wide;
  #L4485e8.  goto L448600;
  #L4485ea.  v2:= lcmp(v4, v8);
  #L4485ee.  if v2 == 0 then goto L448600;
  #L4485f2.  if v1 == 0 then goto L448600;
  #L4485f6.  v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.g` @type ^`long` := v8 @kind wide;
  #L4485fa.  call `request`(v1, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L448600.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableReplay$j.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L448604.  v0:= -v0 @kind int;
  #L448606.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44860c.  v0:= temp;
  #L44860e.  if v0 != 0 then goto L448540;
  #L448612.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$d` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L448780.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448784.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44878a.  v0:= temp @kind object;
  #L44878c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L448790.  v1:= length @variable v0;
  #L448792.  if v1 != 0 then goto L448798;
  #L448796.  return @kind void;
  #L448798.  v2:= -1I;
  #L44879a.  v3:= 0I;
  #L44879c.  v4:= 0I;
  #L44879e.  if v4 >= v1 then goto L4487bc;
  #L4487a2.  v5:= v0[v4] @kind object;
  #L4487a6.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L4487ac.  v5:= temp;
  #L4487ae.  if v5 == 0 then goto L4487b6;
  #L4487b2.  v2:= v4;
  #L4487b4.  goto L4487bc;
  #L4487b6.  v4:= v4 + 1;
  #L4487ba.  goto L44879e;
  #L4487bc.  if v2 >= 0 then goto L4487c2;
  #L4487c0.  return @kind void;
  #L4487c2.  v4:= 1I;
  #L4487c4.  if v1 != v4 then goto L4487ce;
  #L4487c8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.h` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L4487cc.  goto L4487ec;
  #L4487ce.  v5:= v1 + -1;
  #L4487d2.  v5:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`[v5];
  #L4487d6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4487dc.  v3:= v2 + 1;
  #L4487e0.  v1:= v1 - v2 @kind int;
  #L4487e2.  v1:= v1 - v4 @kind int;
  #L4487e4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4487ea.  v1:= v5 @kind object;
  #L4487ec.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4487f0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4487f6.  v0:= temp;
  #L4487f8.  if v0 == 0 then goto L448780;
  #L4487fc.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L448504.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448508.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L44850c.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L448512.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L448518.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L448468.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44846c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448472.  v0:= temp @kind object;
  #L448474.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L448478.  if v0 != v1 then goto L448480;
  #L44847c.  v0:= 1I;
  #L44847e.  goto L448482;
  #L448480.  v0:= 0I;
  #L448482.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448624.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L448628.  if v0 != 0 then goto L44866c;
  #L44862c.  v0:= 1I;
  #L44862e.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L448632.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448636.  call `complete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.complete:()V` @kind interface;
  #L44863c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448640.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L448644.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44864a.  v0:= temp @kind object;
  #L44864c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v0 @kind object;
  #L448650.  v1:= length @variable v0;
  #L448652.  v2:= 0I;
  #L448654.  if v2 >= v1 then goto L44866c;
  #L448658.  v3:= v0[v2] @kind object;
  #L44865c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448660.  call `c`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L448666.  v2:= v2 + 1;
  #L44866a.  goto L448654;
  #L44866c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448680.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L448684.  if v0 != 0 then goto L4486c8;
  #L448688.  v0:= 1I;
  #L44868a.  v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` := v0 @kind boolean;
  #L44868e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448692.  call `a`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.a:(Ljava/lang/Throwable;)V` @kind interface;
  #L448698.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44869c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay$j.i` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$d`[] @kind object;
  #L4486a0.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4486a6.  v5:= temp @kind object;
  #L4486a8.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L4486ac.  v0:= length @variable v5;
  #L4486ae.  v1:= 0I;
  #L4486b0.  if v1 >= v0 then goto L4486ce;
  #L4486b4.  v2:= v5[v1] @kind object;
  #L4486b8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L4486bc.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L4486c2.  v1:= v1 + 1;
  #L4486c6.  goto L4486b0;
  #L4486c8.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4486ce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4486e0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.b` @type ^`boolean` @kind boolean;
  #L4486e4.  if v0 != 0 then goto L44871e;
  #L4486e8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L4486ec.  call `b`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.b:(Ljava/lang/Object;)V` @kind interface;
  #L4486f2.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4486f6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4486fc.  v5:= temp @kind object;
  #L4486fe.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L448702.  v0:= length @variable v5;
  #L448704.  v1:= 0I;
  #L448706.  if v1 >= v0 then goto L44871e;
  #L44870a.  v2:= v5[v1] @kind object;
  #L44870e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448712.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L448718.  v1:= v1 + 1;
  #L44871c.  goto L448706;
  #L44871e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$j` v4 @kind this, `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448730.  call temp:= `setOnce`(v4, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L448736.  v5:= temp;
  #L448738.  if v5 == 0 then goto L44876e;
  #L44873c.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L448742.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448746.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44874c.  v5:= temp @kind object;
  #L44874e.  v5:= (`io.reactivex.internal.operators.flowable.FlowableReplay$d`[]) v5 @kind object;
  #L448752.  v0:= length @variable v5;
  #L448754.  v1:= 0I;
  #L448756.  if v1 >= v0 then goto L44876e;
  #L44875a.  v2:= v5[v1] @kind object;
  #L44875e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448762.  call `c`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L448768.  v1:= v1 + 1;
  #L44876c.  goto L448756;
  #L44876e.  return @kind void;
}
