record `io.reactivex.internal.operators.flowable.FlowableLimit` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableLimit.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableLimit` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit;.<init>:(Lio/reactivex/Flowable;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44172c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L441732.  v0.`io.reactivex.internal.operators.flowable.FlowableLimit.b` @type ^`long` := v2 @kind wide;
  #L441736.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableLimit` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L441748.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L44174c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableLimit$a`;
  #L441750.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableLimit.b` @type ^`long` @kind wide;
  #L441754.  call `<init>`(v1, v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableLimit$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L44175a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L441760.  return @kind void;
}
