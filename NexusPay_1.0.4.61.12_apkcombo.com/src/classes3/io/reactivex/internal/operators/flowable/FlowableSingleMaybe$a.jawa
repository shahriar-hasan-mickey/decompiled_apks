record `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44af90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44af96.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L44af9a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44afac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44afb0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44afb6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44afba.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44afbe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44af6c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44af70.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44af74.  if v0 != v1 then goto L44af7c;
  #L44af78.  v0:= 1I;
  #L44af7a.  goto L44af7e;
  #L44af7c.  v0:= 0I;
  #L44af7e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44afd0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L44afd4.  if v0 == 0 then goto L44afda;
  #L44afd8.  return @kind void;
  #L44afda.  v0:= 1I;
  #L44afdc.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44afe0.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44afe4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44afe8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L44afec.  v1:= 0I;
  #L44afee.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L44aff2.  if v0 != 0 then goto L44b002;
  #L44aff6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L44affa.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L44b000.  goto L44b00c;
  #L44b002.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L44b006.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44b00c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b020.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L44b024.  if v0 == 0 then goto L44b030;
  #L44b028.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44b02e.  return @kind void;
  #L44b030.  v0:= 1I;
  #L44b032.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44b036.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b03a.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44b03e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L44b042.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b048.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b05c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` @kind boolean;
  #L44b060.  if v0 == 0 then goto L44b066;
  #L44b064.  return @kind void;
  #L44b066.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` @kind object;
  #L44b06a.  if v0 == 0 then goto L44b0a0;
  #L44b06e.  v3:= 1I;
  #L44b070.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.c` @type ^`boolean` := v3 @kind boolean;
  #L44b074.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b078.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b07e.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b082.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44b086.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L44b08a.  v0:= new `java.lang.IllegalArgumentException`;
  #L44b08e.  v1:= "Sequence contains more than one element!" @kind object;
  #L44b092.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44b098.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b09e.  return @kind void;
  #L44b0a0.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.d` @type ^`java.lang.Object` := v3 @kind object;
  #L44b0a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b0b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b0bc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44b0c2.  v0:= temp;
  #L44b0c4.  if v0 == 0 then goto L44b0e6;
  #L44b0c8.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44b0cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L44b0d0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44b0d6.  v0:= 9223372036854775807L;
  #L44b0e0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44b0e6.  return @kind void;
}
