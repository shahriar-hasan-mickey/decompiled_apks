record `io.reactivex.internal.operators.flowable.FlowableZipIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4531e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4531ea.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4531ee.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` := v2 @kind object;
  #L4531f2.  v0.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L4531f6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L453224.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L45322a.  v0:= 1I;
  #L45322c.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L453230.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L453234.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45323a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45323e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L453244.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453208.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45320c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L453212.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453258.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L45325c.  if v0 == 0 then goto L453262;
  #L453260.  return @kind void;
  #L453262.  v0:= 1I;
  #L453264.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L453268.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45326c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L453272.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453284.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L453288.  if v0 == 0 then goto L453294;
  #L45328c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L453292.  return @kind void;
  #L453294.  v0:= 1I;
  #L453296.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L45329a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45329e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4532a4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4532b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` @kind boolean;
  #L4532bc.  if v0 == 0 then goto L4532c2;
  #L4532c0.  return @kind void;
  #L4532c2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L4532c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4532cc.  v0:= temp @kind object;
  #L4532ce.  v1:= "The iterator returned a null value" @kind object;
  #L4532d2.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4532d8.  v0:= temp @kind object;
  #L4532da.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L4532de.  call temp:= `apply`(v1, v3, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4532e4.  v3:= temp @kind object;
  #L4532e6.  v0:= "The zipper function returned a null value" @kind object;
  #L4532ea.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4532f0.  v3:= temp @kind object;
  #L4532f2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4532f6.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4532fc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.b` @type ^`java.util.Iterator` @kind object;
  #L453300.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L453306.  v3:= temp;
  #L453308.  if v3 != 0 then goto L453326;
  #L45330c.  v3:= 1I;
  #L45330e.  v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.e` @type ^`boolean` := v3 @kind boolean;
  #L453312.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L453316.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45331c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L453320.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L453326.  return @kind void;
  #L453328.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45332a.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L453330.  return @kind void;
  #L453332.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L453334.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45333a.  return @kind void;
  #L45333c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45333e.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L453344.  return @kind void;
  catch `java.lang.Throwable` @[L4532c2..L4532da] goto L45333c;
  catch `java.lang.Throwable` @[L4532da..L4532f2] goto L453332;
  catch `java.lang.Throwable` @[L4532fc..L453308] goto L453328;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L453378.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45337c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L453382.  v0:= temp;
  #L453384.  if v0 == 0 then goto L453396;
  #L453388.  v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L45338c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L453390.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L453396.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableZipIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableZipIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4533a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableZipIterable$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4533ac.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4533b2.  return @kind void;
}
