record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class {
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450c10.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L450c16.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` := v1 @kind object;
  #L450c1a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450c2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L450c30.  if v0 == 0 then goto L450c36;
  #L450c34.  return @kind void;
  #L450c36.  v0:= 1I;
  #L450c38.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L450c3c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L450c40.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.c:()V` @kind virtual;
  #L450c46.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450c58.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L450c5c.  if v0 == 0 then goto L450c68;
  #L450c60.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L450c66.  return @kind void;
  #L450c68.  v0:= 1I;
  #L450c6a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v0 @kind boolean;
  #L450c6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L450c72.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.d:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450c78.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L450c8c.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` @kind boolean;
  #L450c90.  if v1 == 0 then goto L450c96;
  #L450c94.  return @kind void;
  #L450c96.  v1:= 1I;
  #L450c98.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.c` @type ^`boolean` := v1 @kind boolean;
  #L450c9c.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L450ca2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind object;
  #L450ca6.  call `e`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.e:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;)V` @kind virtual;
  #L450cac.  return @kind void;
}
