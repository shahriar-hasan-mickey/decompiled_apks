record `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.util.Iterator` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Condition` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L430140.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L430146.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L43014a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L430150.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v0 @kind object;
  #L430154.  v0:= (`long`) v3 @kind i2l;
  #L430156.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` := v0 @kind wide;
  #L43015a.  v0:= v3 ^> 2;
  #L43015e.  v3:= v3 - v0 @kind int;
  #L430160.  v0:= (`long`) v3 @kind i2l;
  #L430162.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` := v0 @kind wide;
  #L430166.  v3:= new `java.util.concurrent.locks.ReentrantLock`;
  #L43016a.  call `<init>`(v3) @signature `Ljava/util/concurrent/locks/ReentrantLock;.<init>:()V` @kind direct;
  #L430170.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` := v3 @kind object;
  #L430174.  call temp:= `newCondition`(v3) @signature `Ljava/util/concurrent/locks/Lock;.newCondition:()Ljava/util/concurrent/locks/Condition;` @kind interface;
  #L43017a.  v3:= temp @kind object;
  #L43017c.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` := v3 @kind object;
  #L430180.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L430298.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L43029c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L4302a2.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L4302a6.  call `signalAll`(v0) @signature `Ljava/util/concurrent/locks/Condition;.signalAll:()V` @kind interface;
  #L4302ac.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4302b0.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4302b6.  return @kind void;
  #L4302b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4302ba.  v1:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L4302be.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L4302c4.  throw v0;
  catch `java.lang.Throwable` @[L4302a2..L4302ac] goto L4302b8;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L430194.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43019a.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4301a0.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L42ffc0.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L42ffc6.  v0:= temp;
  #L42ffc8.  v1:= 0I;
  #L42ffca.  if v0 == 0 then goto L42ffe2;
  #L42ffce.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L42ffd2.  if v0 != 0 then goto L42ffd8;
  #L42ffd6.  return v1;
  #L42ffd8.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L42ffde.  v0:= temp @kind object;
  #L42ffe0.  throw v0;
  #L42ffe2.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L42ffe6.  v2:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L42ffea.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L42fff0.  v2:= temp;
  #L42fff2.  if v0 == 0 then goto L43000e;
  #L42fff6.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` @kind object;
  #L42fffa.  if v0 != 0 then goto L430004;
  #L42fffe.  if v2 == 0 then goto L43000e;
  #L430002.  return v1;
  #L430004.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L43000a.  v0:= temp @kind object;
  #L43000c.  throw v0;
  #L43000e.  if v2 == 0 then goto L430080;
  #L430012.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L430018.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L43001c.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L430022.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` @kind boolean;
  #L430026.  if v0 != 0 then goto L430052;
  #L43002a.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L43002e.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L430034.  v0:= temp;
  #L430036.  if v0 == 0 then goto L430052;
  #L43003a.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @kind virtual;
  #L430040.  v0:= temp;
  #L430042.  if v0 != 0 then goto L430052;
  #L430046.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.e` @type ^`java.util.concurrent.locks.Condition` @kind object;
  #L43004a.  call `await`(v0) @signature `Ljava/util/concurrent/locks/Condition;.await:()V` @kind interface;
  #L430050.  goto L430022;
  #L430052.  v0:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L430056.  call `unlock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L43005c.  goto L42ffc0;
  #L43005e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L430060.  goto L430074;
  #L430062.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L430064.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @kind virtual;
  #L43006a.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L430070.  v0:= temp @kind object;
  #L430072.  throw v0;
  #L430074.  v1:= v3.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.d` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L430078.  call `unlock`(v1) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L43007e.  throw v0;
  #L430080.  v0:= 1I;
  #L430082.  return v0;
  catch `java.lang.InterruptedException` @[L430022..L430050] goto L430062;
  catch `java.lang.Throwable` @[L430022..L430050] goto L43005e;
  catch `java.lang.Throwable` @[L430064..L430074] goto L43005e;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4300ac.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4300b2.  v0:= temp @kind object;
  #L4300b4.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4300b8.  if v0 != v1 then goto L4300c0;
  #L4300bc.  v0:= 1I;
  #L4300be.  goto L4300c2;
  #L4300c0.  v0:= 0I;
  #L4300c2.  return v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4300d4.  call temp:= `hasNext`(v6) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.hasNext:()Z` @kind virtual;
  #L4300da.  v0:= temp;
  #L4300dc.  if v0 == 0 then goto L430124;
  #L4300e0.  v0:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4300e4.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4300ea.  v0:= temp @kind object;
  #L4300ec.  v1:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` @kind wide;
  #L4300f0.  v3:= 1L;
  #L4300f4.  v1:= v1 + v3 @kind long;
  #L4300f6.  v3:= v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.c` @type ^`long` @kind wide;
  #L4300fa.  v5:= lcmp(v1, v3);
  #L4300fe.  if v5 != 0 then goto L43011e;
  #L430102.  v3:= 0L;
  #L430106.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v3 @kind wide;
  #L43010a.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L430110.  v3:= temp @kind object;
  #L430112.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L430116.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43011c.  goto L430122;
  #L43011e.  v6.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.f` @type ^`long` := v1 @kind wide;
  #L430122.  return v0 @kind object;
  #L430124.  v0:= new `java.util.NoSuchElementException`;
  #L430128.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L43012e.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4301b4.  v0:= 1I;
  #L4301b6.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4301ba.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4301c0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4301d4.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L4301d8.  v1:= 1I;
  #L4301da.  v0.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4301de.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L4301e4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4301f8.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.a` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L4301fc.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L430202.  v2:= temp;
  #L430204.  if v2 != 0 then goto L430224;
  #L430208.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43020e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L430212.  v0:= "Queue full?!" @kind object;
  #L430216.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43021c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L430222.  goto L43022a;
  #L430224.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L43022a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43023c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a.b` @type ^`long` @kind wide;
  #L430240.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L430246.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430258.  v0:= new `java.lang.UnsupportedOperationException`;
  #L43025c.  v1:= "remove" @kind object;
  #L430260.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L430266.  throw v0;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.BlockingFlowableIterable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.run:()V` @AccessFlag PUBLIC {
    temp;

  #L430278.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43027e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableIterable$a;.a:()V` @kind virtual;
  #L430284.  return @kind void;
}
