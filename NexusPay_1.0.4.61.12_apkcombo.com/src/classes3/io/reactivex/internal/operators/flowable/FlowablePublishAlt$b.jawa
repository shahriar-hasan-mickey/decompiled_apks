record `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.i` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.j` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L4451b0.  v0:= 0I;
  #L4451b2.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[v0];
  #L4451b6.  `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.k` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] := v1 @kind object;
  #L4451ba.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[v0];
  #L4451be.  `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] := v0 @kind object;
  #L4451c2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4451d4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4451da.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4451de.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4451e2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4451e8.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4451ec.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L4451f0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L4451f6.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L4451fa.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @type ^`int` := v2;
  #L4451fe.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L445202.  v2:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.k` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L445206.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L44520c.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L445210.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.a:(Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4450c4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4450c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4450ce.  v0:= temp @kind object;
  #L4450d0.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[]) v0 @kind object;
  #L4450d4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L4450d8.  v2:= 0I;
  #L4450da.  if v0 != v1 then goto L4450e0;
  #L4450de.  return v2;
  #L4450e0.  v1:= length @variable v0;
  #L4450e2.  v3:= v1 + 1;
  #L4450e6.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[v3];
  #L4450ea.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4450f0.  v3[v1]:= v5 @kind object;
  #L4450f4.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4450f8.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4450fe.  v0:= temp;
  #L445100.  if v0 == 0 then goto L4450c4;
  #L445104.  v5:= 1I;
  #L445106.  return v5;
}
procedure `boolean` `b`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v3 @kind this, `boolean` v4 , `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.b:(ZZ)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L445118.  v0:= 0I;
  #L44511a.  if v4 == 0 then goto L445170;
  #L44511e.  if v5 == 0 then goto L445170;
  #L445122.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.i` @type ^`java.lang.Throwable` @kind object;
  #L445126.  if v4 == 0 then goto L445132;
  #L44512a.  call `e`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445130.  goto L44516c;
  #L445132.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445136.  v5:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L44513a.  call temp:= `getAndSet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L445140.  v4:= temp @kind object;
  #L445142.  v4:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[]) v4 @kind object;
  #L445146.  v5:= length @variable v4;
  #L445148.  if v0 >= v5 then goto L44516c;
  #L44514c.  v1:= v4[v0] @kind object;
  #L445150.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;.a:()Z` @kind virtual;
  #L445156.  v2:= temp;
  #L445158.  if v2 != 0 then goto L445166;
  #L44515c.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L445160.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L445166.  v0:= v0 + 1;
  #L44516a.  goto L445148;
  #L44516c.  v4:= 1I;
  #L44516e.  return v4;
  #L445170.  return v0;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v21 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L44525c.  v1:= v21 @kind object;
  #L445260.  call temp:= `getAndIncrement`(v21) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L445266.  v0:= temp;
  #L445268.  if v0 == 0 then goto L44526e;
  #L44526c.  return @kind void;
  #L44526e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445272.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.j` @type ^`int`;
  #L445276.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @type ^`int`;
  #L44527a.  v4:= v3 ^> 2;
  #L44527e.  v3:= v3 - v4 @kind int;
  #L445280.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.g` @type ^`int`;
  #L445284.  v6:= 1I;
  #L445286.  if v4 == v6 then goto L44528e;
  #L44528a.  v4:= 1I;
  #L44528c.  goto L445290;
  #L44528e.  v4:= 0I;
  #L445290.  v7:= 1I;
  #L445292.  v20:= v2;
  #L445296.  v2:= v0 @kind object;
  #L445298.  v0:= v20;
  #L44529c.  if v2 == 0 then goto L4453fc;
  #L4452a0.  v8:= 9223372036854775807L;
  #L4452aa.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4452ae.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4452b4.  v10:= temp @kind object;
  #L4452b6.  v10:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[]) v10 @kind object;
  #L4452ba.  v11:= length @variable v10;
  #L4452bc.  v12:= 0I;
  #L4452be.  v13:= 0I;
  #L4452c0.  if v12 >= v11 then goto L4452f4;
  #L4452c4.  v14:= v10[v12] @kind object;
  #L4452c8.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4452ce.  v15:= temp @kind wide;
  #L4452d0.  v17:= -9223372036854775808L;
  #L4452d4.  v19:= lcmp(v15, v17);
  #L4452d8.  if v19 == 0 then goto L4452ee;
  #L4452dc.  v13:= v14.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.c` @type ^`long` @kind wide;
  #L4452e0.  v13:= v15 - v13 @kind long;
  #L4452e4.  call temp:= `min`(v13, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L4452ea.  v8:= temp @kind wide;
  #L4452ec.  v13:= 1I;
  #L4452ee.  v12:= v12 + 1;
  #L4452f2.  goto L4452c0;
  #L4452f4.  v11:= 0L;
  #L4452f8.  if v13 != 0 then goto L4452fe;
  #L4452fc.  v8:= v11 @kind wide;
  #L4452fe.  v13:= lcmp(v8, v11);
  #L445302.  if v13 == 0 then goto L4453e2;
  #L445306.  v13:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` @kind boolean;
  #L44530a.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L445310.  v14:= temp @kind object;
  #L445312.  if v14 != 0 then goto L44531a;
  #L445316.  v15:= 1I;
  #L445318.  goto L44531c;
  #L44531a.  v15:= 0I;
  #L44531c.  call temp:= `b`(v1, v13, v15) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.b:(ZZ)Z` @kind virtual;
  #L445322.  v13:= temp;
  #L445324.  if v13 == 0 then goto L44532a;
  #L445328.  return @kind void;
  #L44532a.  if v15 == 0 then goto L445330;
  #L44532e.  goto L4453e2;
  #L445330.  v13:= length @variable v10;
  #L445332.  v15:= 0I;
  #L445334.  v16:= 1L;
  #L445338.  if v15 >= v13 then goto L44536c;
  #L44533c.  v5:= v10[v15] @kind object;
  #L445340.  call temp:= `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;.a:()Z` @kind virtual;
  #L445346.  v19:= temp;
  #L445348.  if v19 != 0 then goto L445362;
  #L44534c.  v11:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L445350.  call `onNext`(v11, v14) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L445356.  v11:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.c` @type ^`long` @kind wide;
  #L44535a.  v11:= v11 + v16 @kind long;
  #L44535e.  v5.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.c` @type ^`long` := v11 @kind wide;
  #L445362.  v15:= v15 + 1;
  #L445366.  v11:= 0L;
  #L44536a.  goto L445334;
  #L44536c.  if v4 == 0 then goto L445392;
  #L445370.  v0:= v0 + 1;
  #L445374.  if v0 != v3 then goto L445392;
  #L445378.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44537c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445382.  v0:= temp @kind object;
  #L445384.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L445388.  v11:= (`long`) v3 @kind i2l;
  #L44538a.  call `request`(v0, v11) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L445390.  v0:= 0I;
  #L445392.  v8:= v8 - v16 @kind long;
  #L445396.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44539a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4453a0.  v5:= temp @kind object;
  #L4453a2.  if v10 == v5 then goto L4453aa;
  #L4453a6.  goto L44529c;
  #L4453aa.  v11:= 0L;
  #L4453ae.  goto L4452fe;
  #L4453b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4453b2.  v3:= v0 @kind object;
  #L4453b4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4453ba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4453be.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4453c4.  v0:= temp @kind object;
  #L4453c6.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4453ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4453d0.  call `clear`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4453d6.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` := v6 @kind boolean;
  #L4453da.  call `e`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4453e0.  return @kind void;
  #L4453e2.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` @kind boolean;
  #L4453e6.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4453ec.  v8:= temp;
  #L4453ee.  call temp:= `b`(v1, v5, v8) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.b:(ZZ)Z` @kind virtual;
  #L4453f4.  v5:= temp;
  #L4453f6.  if v5 == 0 then goto L4453fc;
  #L4453fa.  return @kind void;
  #L4453fc.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.j` @type ^`int` := v0;
  #L445400.  v5:= -v7 @kind int;
  #L445402.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L445408.  v7:= temp;
  #L44540a.  if v7 != 0 then goto L445410;
  #L44540e.  return @kind void;
  #L445410.  if v2 != 0 then goto L44529c;
  #L445414.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445418.  goto L44529c;
  catch `java.lang.Throwable` @[L44530a..L445312] goto L4453b0;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L445564.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445568.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44556e.  v0:= temp @kind object;
  #L445570.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[]) v0 @kind object;
  #L445574.  v1:= length @variable v0;
  #L445576.  if v1 != 0 then goto L44557c;
  #L44557a.  goto L4455d8;
  #L44557c.  v2:= -1I;
  #L44557e.  v3:= 0I;
  #L445580.  v4:= 0I;
  #L445582.  if v4 >= v1 then goto L445598;
  #L445586.  v5:= v0[v4] @kind object;
  #L44558a.  if v5 != v7 then goto L445592;
  #L44558e.  v2:= v4;
  #L445590.  goto L445598;
  #L445592.  v4:= v4 + 1;
  #L445596.  goto L445582;
  #L445598.  if v2 >= 0 then goto L44559e;
  #L44559c.  return @kind void;
  #L44559e.  v4:= 1I;
  #L4455a0.  if v1 != v4 then goto L4455aa;
  #L4455a4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.k` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L4455a8.  goto L4455c8;
  #L4455aa.  v5:= v1 + -1;
  #L4455ae.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[v5];
  #L4455b2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4455b8.  v3:= v2 + 1;
  #L4455bc.  v1:= v1 - v2 @kind int;
  #L4455be.  v1:= v1 - v4 @kind int;
  #L4455c0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4455c6.  v1:= v5 @kind object;
  #L4455c8.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4455cc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4455d2.  v0:= temp;
  #L4455d4.  if v0 == 0 then goto L445564;
  #L4455d8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445224.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445228.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L44522c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L445232.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445236.  v1:= 0I;
  #L445238.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44523e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445242.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L445248.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4455ec.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4455f0.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L4455f4.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4455fa.  v0:= temp @kind object;
  #L4455fc.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[]) v0 @kind object;
  #L445600.  v1:= length @variable v0;
  #L445602.  v2:= 0I;
  #L445604.  if v2 >= v1 then goto L445628;
  #L445608.  v3:= v0[v2] @kind object;
  #L44560c.  call temp:= `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;.a:()Z` @kind virtual;
  #L445612.  v4:= temp;
  #L445614.  if v4 != 0 then goto L445622;
  #L445618.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44561c.  call `onError`(v3, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445622.  v2:= v2 + 1;
  #L445626.  goto L445604;
  #L445628.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445184.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445188.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44518e.  v0:= temp @kind object;
  #L445190.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.l` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`[] @kind object;
  #L445194.  if v0 != v1 then goto L44519c;
  #L445198.  v0:= 1I;
  #L44519a.  goto L44519e;
  #L44519c.  v0:= 0I;
  #L44519e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445438.  v0:= 1I;
  #L44543a.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` := v0 @kind boolean;
  #L44543e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @kind virtual;
  #L445444.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445458.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` @kind boolean;
  #L44545c.  if v0 == 0 then goto L445468;
  #L445460.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L445466.  goto L445478;
  #L445468.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.i` @type ^`java.lang.Throwable` := v2 @kind object;
  #L44546c.  v2:= 1I;
  #L44546e.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` := v2 @kind boolean;
  #L445472.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @kind virtual;
  #L445478.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44548c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.g` @type ^`int`;
  #L445490.  if v0 != 0 then goto L4454ba;
  #L445494.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445498.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44549e.  v2:= temp;
  #L4454a0.  if v2 != 0 then goto L4454ba;
  #L4454a4.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4454a8.  v0:= "Prefetch queue is full?!" @kind object;
  #L4454ac.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4454b2.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4454b8.  return @kind void;
  #L4454ba.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @kind virtual;
  #L4454c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4454d4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4454d8.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4454de.  v0:= temp;
  #L4454e0.  if v0 == 0 then goto L445550;
  #L4454e4.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L4454e8.  if v0 == 0 then goto L445532;
  #L4454ec.  v0:= v4 @kind object;
  #L4454ee.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L4454f2.  v1:= 7I;
  #L4454f4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L4454fa.  v1:= temp;
  #L4454fc.  v2:= 1I;
  #L4454fe.  if v1 != v2 then goto L445516;
  #L445502.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.g` @type ^`int` := v1;
  #L445506.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44550a.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.h` @type ^`boolean` := v2 @kind boolean;
  #L44550e.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @kind virtual;
  #L445514.  return @kind void;
  #L445516.  v2:= 2I;
  #L445518.  if v1 != v2 then goto L445532;
  #L44551c.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.g` @type ^`int` := v1;
  #L445520.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L445524.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @type ^`int`;
  #L445528.  v0:= (`long`) v0 @kind i2l;
  #L44552a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L445530.  return @kind void;
  #L445532.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L445536.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @type ^`int`;
  #L44553a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L445540.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L445544.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.e` @type ^`int`;
  #L445548.  v0:= (`long`) v0 @kind i2l;
  #L44554a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L445550.  return @kind void;
}
