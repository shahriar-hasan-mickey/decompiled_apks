record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @AccessFlag FINAL;
  `io.reactivex.BackpressureOverflowStrategy` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @AccessFlag FINAL;
  `java.util.Deque` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Action` v2 @kind object, `io.reactivex.BackpressureOverflowStrategy` v3 @kind object, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Action;Lio/reactivex/BackpressureOverflowStrategy;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443a64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L443a6a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L443a6e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.functions.Action` := v2 @kind object;
  #L443a72.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.BackpressureOverflowStrategy` := v3 @kind object;
  #L443a76.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` := v4 @kind wide;
  #L443a7a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L443a7e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L443a84.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L443a88.  v1:= new `java.util.ArrayDeque`;
  #L443a8c.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L443a92.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` := v1 @kind object;
  #L443a96.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.util.Deque` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @AccessFlag  {
    temp;
    v0;

  #L443ae0.  @monitorenter v2
  #L443ae2.  call `clear`(v2) @signature `Ljava/util/Deque;.clear:()V` @kind interface;
  #L443ae8.  @monitorexit v2
  #L443aea.  return @kind void;
  #L443aec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443aee.  @monitorexit v2
  #L443af0.  throw v0;
  catch `java.lang.Throwable` @[L443ae2..L443af0] goto L443aec;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L443b10.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L443b16.  v0:= temp;
  #L443b18.  if v0 == 0 then goto L443b1e;
  #L443b1c.  return @kind void;
  #L443b1e.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L443b22.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443b26.  v2:= 1I;
  #L443b28.  v3:= 1I;
  #L443b2a.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443b2e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443b34.  v4:= temp @kind wide;
  #L443b36.  v6:= 0L;
  #L443b3a.  v8:= v6 @kind wide;
  #L443b3c.  v10:= lcmp(v8, v4);
  #L443b40.  if v10 == 0 then goto L443bae;
  #L443b44.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L443b48.  if v11 == 0 then goto L443b54;
  #L443b4c.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L443b52.  return @kind void;
  #L443b54.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L443b58.  @monitorenter v0
  #L443b5a.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L443b60.  v12:= temp @kind object;
  #L443b62.  @monitorexit v0
  #L443b64.  if v12 != 0 then goto L443b6c;
  #L443b68.  v13:= 1I;
  #L443b6a.  goto L443b6e;
  #L443b6c.  v13:= 0I;
  #L443b6e.  if v11 == 0 then goto L443b94;
  #L443b72.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L443b76.  if v11 == 0 then goto L443b88;
  #L443b7a.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L443b80.  call `onError`(v1, v11) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443b86.  return @kind void;
  #L443b88.  if v13 == 0 then goto L443b94;
  #L443b8c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443b92.  return @kind void;
  #L443b94.  if v13 == 0 then goto L443b9a;
  #L443b98.  goto L443bae;
  #L443b9a.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443ba0.  v10:= 1L;
  #L443ba4.  v8:= v8 + v10 @kind long;
  #L443ba6.  goto L443b3c;
  #L443ba8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443baa.  @monitorexit v0
  #L443bac.  throw v1;
  #L443bae.  if v10 != 0 then goto L443bfe;
  #L443bb2.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` @kind boolean;
  #L443bb6.  if v4 == 0 then goto L443bc2;
  #L443bba.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L443bc0.  return @kind void;
  #L443bc2.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L443bc6.  @monitorenter v0
  #L443bc8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L443bce.  v5:= temp;
  #L443bd0.  @monitorexit v0
  #L443bd2.  if v4 == 0 then goto L443bfe;
  #L443bd6.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` @kind object;
  #L443bda.  if v4 == 0 then goto L443bec;
  #L443bde.  call `a`(v14, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L443be4.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443bea.  return @kind void;
  #L443bec.  if v5 == 0 then goto L443bfe;
  #L443bf0.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443bf6.  return @kind void;
  #L443bf8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443bfa.  @monitorexit v0
  #L443bfc.  throw v1;
  #L443bfe.  v4:= lcmp(v8, v6);
  #L443c02.  if v4 == 0 then goto L443c10;
  #L443c06.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443c0a.  call temp:= `produced`(v4, v8) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L443c10.  v3:= -v3 @kind int;
  #L443c12.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443c18.  v3:= temp;
  #L443c1a.  if v3 != 0 then goto L443b2a;
  #L443c1e.  return @kind void;
  catch `java.lang.Throwable` @[L443b5a..L443b64] goto L443ba8;
  catch `java.lang.Throwable` @[L443baa..L443bac] goto L443ba8;
  catch `java.lang.Throwable` @[L443bc8..L443bd2] goto L443bf8;
  catch `java.lang.Throwable` @[L443bfa..L443bfc] goto L443bf8;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443aa8.  v0:= 1I;
  #L443aaa.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.h` @type ^`boolean` := v0 @kind boolean;
  #L443aae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443ab2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443ab8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L443abe.  v0:= temp;
  #L443ac0.  if v0 != 0 then goto L443ace;
  #L443ac4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L443ac8.  call `a`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.a:(Ljava/util/Deque;)V` @kind virtual;
  #L443ace.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443c58.  v0:= 1I;
  #L443c5a.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v0 @kind boolean;
  #L443c5e.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L443c64.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443c78.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L443c7c.  if v0 == 0 then goto L443c88;
  #L443c80.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L443c86.  return @kind void;
  #L443c88.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L443c8c.  v2:= 1I;
  #L443c8e.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` := v2 @kind boolean;
  #L443c92.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L443c98.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L443cac.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.i` @type ^`boolean` @kind boolean;
  #L443cb0.  if v0 == 0 then goto L443cb6;
  #L443cb4.  return @kind void;
  #L443cb6.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.f` @type ^`java.util.Deque` @kind object;
  #L443cba.  @monitorenter v0
  #L443cbc.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L443cc2.  v1:= temp;
  #L443cc4.  v1:= (`long`) v1 @kind i2l;
  #L443cc6.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.d` @type ^`long` @kind wide;
  #L443cca.  v5:= 0I;
  #L443ccc.  v6:= 1I;
  #L443cce.  v7:= lcmp(v1, v3);
  #L443cd2.  if v7 != 0 then goto L443d14;
  #L443cd6.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L443cda.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.c` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L443cde.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L443ce4.  v2:= temp;
  #L443ce6.  v1:= v1[v2];
  #L443cea.  if v1 == v6 then goto L443d04;
  #L443cee.  v2:= 2I;
  #L443cf0.  if v1 == v2 then goto L443cf6;
  #L443cf4.  goto L443d1c;
  #L443cf6.  call temp:= `poll`(v0) @signature `Ljava/util/Deque;.poll:()Ljava/lang/Object;` @kind interface;
  #L443cfc.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443d02.  goto L443d10;
  #L443d04.  call temp:= `pollLast`(v0) @signature `Ljava/util/Deque;.pollLast:()Ljava/lang/Object;` @kind interface;
  #L443d0a.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443d10.  v5:= 1I;
  #L443d12.  goto L443d1a;
  #L443d14.  call temp:= `offer`(v0, v9) @signature `Ljava/util/Deque;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L443d1a.  v6:= 0I;
  #L443d1c.  @monitorexit v0
  #L443d1e.  if v5 == 0 then goto L443d4c;
  #L443d22.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.b` @type ^`io.reactivex.functions.Action` @kind object;
  #L443d26.  if v9 == 0 then goto L443d72;
  #L443d2a.  call `run`(v9) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L443d30.  goto L443d72;
  #L443d32.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443d34.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443d3a.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443d3e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443d44.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443d4a.  goto L443d72;
  #L443d4c.  if v6 == 0 then goto L443d6c;
  #L443d50.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443d54.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443d5a.  v9:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L443d5e.  call `<init>`(v9) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L443d64.  call `onError`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443d6a.  goto L443d72;
  #L443d6c.  call `b`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L443d72.  return @kind void;
  #L443d74.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443d76.  @monitorexit v0
  #L443d78.  throw v9;
  catch `java.lang.Throwable` @[L443cbc..L443d1e] goto L443d74;
  catch `java.lang.Throwable` @[L443d2a..L443d30] goto L443d32;
  catch `java.lang.Throwable` @[L443d76..L443d78] goto L443d74;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443dac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443db0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L443db6.  v0:= temp;
  #L443db8.  if v0 == 0 then goto L443dda;
  #L443dbc.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L443dc0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443dc4.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L443dca.  v0:= 9223372036854775807L;
  #L443dd4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L443dda.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443dec.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L443df2.  v0:= temp;
  #L443df4.  if v0 == 0 then goto L443e08;
  #L443df8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443dfc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L443e02.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$b;.b:()V` @kind virtual;
  #L443e08.  return @kind void;
}
