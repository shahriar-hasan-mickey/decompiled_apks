record `io.reactivex.internal.operators.flowable.FlowableObserveOn$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442ea4.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L442eaa.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L442eae.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L442f6c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442f70.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442f74.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L442f78.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L442f7c.  v6:= 1I;
  #L442f7e.  v7:= 1I;
  #L442f80.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442f84.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L442f8a.  v8:= temp @kind wide;
  #L442f8c.  v10:= lcmp(v2, v8);
  #L442f90.  if v10 == 0 then goto L44301e;
  #L442f94.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L442f98.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L442f9e.  v12:= temp @kind object;
  #L442fa0.  if v12 != 0 then goto L442fa8;
  #L442fa4.  v13:= 1I;
  #L442fa6.  goto L442faa;
  #L442fa8.  v13:= 0I;
  #L442faa.  call temp:= `e`(v14, v11, v13, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L442fb0.  v11:= temp;
  #L442fb2.  if v11 == 0 then goto L442fb8;
  #L442fb6.  return @kind void;
  #L442fb8.  if v13 == 0 then goto L442fbe;
  #L442fbc.  goto L44301e;
  #L442fbe.  call temp:= `tryOnNext`(v0, v12) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L442fc4.  v10:= temp;
  #L442fc6.  v11:= 1L;
  #L442fca.  if v10 == 0 then goto L442fd0;
  #L442fce.  v2:= v2 + v11 @kind long;
  #L442fd0.  v4:= v4 + v11 @kind long;
  #L442fd2.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L442fd6.  v10:= (`long`) v10 @kind i2l;
  #L442fd8.  v12:= lcmp(v4, v10);
  #L442fdc.  if v12 != 0 then goto L442f8c;
  #L442fe0.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442fe4.  call `request`(v10, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442fea.  v4:= 0L;
  #L442fee.  goto L442f8c;
  #L442ff0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L442ff2.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L442ff8.  v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v6 @kind boolean;
  #L442ffc.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443000.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443006.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44300c.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443012.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L443016.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44301c.  return @kind void;
  #L44301e.  if v10 != 0 then goto L44303c;
  #L443022.  v8:= v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L443026.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44302c.  v9:= temp;
  #L44302e.  call temp:= `e`(v14, v8, v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L443034.  v8:= temp;
  #L443036.  if v8 == 0 then goto L44303c;
  #L44303a.  return @kind void;
  #L44303c.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L443042.  v8:= temp;
  #L443044.  if v7 != v8 then goto L443060;
  #L443048.  v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L44304c.  v14.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v4 @kind wide;
  #L443050.  v7:= -v7 @kind int;
  #L443052.  call temp:= `addAndGet`(v14, v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443058.  v7:= temp;
  #L44305a.  if v7 != 0 then goto L442f80;
  #L44305e.  return @kind void;
  #L443060.  v7:= v8;
  #L443062.  goto L442f80;
  catch `java.lang.Throwable` @[L442f98..L442fa0] goto L442ff0;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L443080.  v0:= 1I;
  #L443082.  v1:= 1I;
  #L443084.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L443088.  if v2 == 0 then goto L44308e;
  #L44308c.  return @kind void;
  #L44308e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L443092.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L443096.  v4:= 0I;
  #L443098.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44309e.  if v2 == 0 then goto L4430d0;
  #L4430a2.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L4430a6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L4430aa.  if v0 == 0 then goto L4430ba;
  #L4430ae.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4430b2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4430b8.  goto L4430c4;
  #L4430ba.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4430be.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4430c4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4430c8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4430ce.  return @kind void;
  #L4430d0.  v1:= -v1 @kind int;
  #L4430d2.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4430d8.  v1:= temp;
  #L4430da.  if v1 != 0 then goto L443084;
  #L4430de.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4430f0.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4430f4.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4430f8.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4430fc.  v4:= 1I;
  #L4430fe.  v5:= 1I;
  #L443100.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443104.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44310a.  v6:= temp @kind wide;
  #L44310c.  v8:= lcmp(v2, v6);
  #L443110.  if v8 == 0 then goto L44317c;
  #L443114.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44311a.  v8:= temp @kind object;
  #L44311c.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L443120.  if v9 == 0 then goto L443126;
  #L443124.  return @kind void;
  #L443126.  if v8 != 0 then goto L443140;
  #L44312a.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L44312e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443134.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L443138.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44313e.  return @kind void;
  #L443140.  call temp:= `tryOnNext`(v0, v8) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L443146.  v8:= temp;
  #L443148.  if v8 == 0 then goto L44310c;
  #L44314c.  v8:= 1L;
  #L443150.  v2:= v2 + v8 @kind long;
  #L443152.  goto L44310c;
  #L443154.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443156.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44315c.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L443160.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443164.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44316a.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443170.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L443174.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44317a.  return @kind void;
  #L44317c.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L443180.  if v6 == 0 then goto L443186;
  #L443184.  return @kind void;
  #L443186.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44318c.  v6:= temp;
  #L44318e.  if v6 == 0 then goto L4431a8;
  #L443192.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L443196.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44319c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4431a0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4431a6.  return @kind void;
  #L4431a8.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4431ae.  v6:= temp;
  #L4431b0.  if v5 != v6 then goto L4431c8;
  #L4431b4.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L4431b8.  v5:= -v5 @kind int;
  #L4431ba.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4431c0.  v5:= temp;
  #L4431c2.  if v5 != 0 then goto L443100;
  #L4431c6.  return @kind void;
  #L4431c8.  v5:= v6;
  #L4431ca.  goto L443100;
  catch `java.lang.Throwable` @[L443114..L44311c] goto L443154;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L442ec0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442ec4.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L442eca.  v0:= temp;
  #L442ecc.  if v0 == 0 then goto L442f58;
  #L442ed0.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L442ed4.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L442ed8.  if v0 == 0 then goto L442f30;
  #L442edc.  v0:= v4 @kind object;
  #L442ede.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L442ee2.  v1:= 7I;
  #L442ee4.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L442eea.  v1:= temp;
  #L442eec.  v2:= 1I;
  #L442eee.  if v1 != v2 then goto L442f0a;
  #L442ef2.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L442ef6.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L442efa.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L442efe.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442f02.  call `onSubscribe`(v4, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L442f08.  return @kind void;
  #L442f0a.  v2:= 2I;
  #L442f0c.  if v1 != v2 then goto L442f30;
  #L442f10.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L442f14.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L442f18.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442f1c.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L442f22.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L442f26.  v0:= (`long`) v0 @kind i2l;
  #L442f28.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442f2e.  return @kind void;
  #L442f30.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L442f34.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L442f38.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L442f3e.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L442f42.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.n` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L442f46.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L442f4c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L442f50.  v0:= (`long`) v0 @kind i2l;
  #L442f52.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442f58.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$b` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L442e48.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442e4c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L442e52.  v0:= temp @kind object;
  #L442e54.  if v0 == 0 then goto L442e92;
  #L442e58.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L442e5c.  v2:= 1I;
  #L442e5e.  if v1 == v2 then goto L442e92;
  #L442e62.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` @kind wide;
  #L442e66.  v3:= 1L;
  #L442e6a.  v1:= v1 + v3 @kind long;
  #L442e6c.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L442e70.  v3:= (`long`) v3 @kind i2l;
  #L442e72.  v5:= lcmp(v1, v3);
  #L442e76.  if v5 != 0 then goto L442e8e;
  #L442e7a.  v3:= 0L;
  #L442e7e.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v3 @kind wide;
  #L442e82.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442e86.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442e8c.  goto L442e92;
  #L442e8e.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$b.o` @type ^`long` := v1 @kind wide;
  #L442e92.  return v0 @kind object;
}
