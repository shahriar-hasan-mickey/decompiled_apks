record `io.reactivex.internal.operators.flowable.FlowableRefCount` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.flowables.ConnectableFlowable` `io.reactivex.internal.operators.flowable.FlowableRefCount.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableRefCount.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRefCount.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableRefCount.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableRefCount.f` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableRefCount$a` `io.reactivex.internal.operators.flowable.FlowableRefCount.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v7 @kind this, `io.reactivex.flowables.ConnectableFlowable` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44720c.  v5:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L447210.  v2:= 1I;
  #L447212.  v3:= 0L;
  #L447216.  v6:= 0I;
  #L447218.  v0:= v7 @kind object;
  #L44721a.  v1:= v8 @kind object;
  #L44721c.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L447222.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v0 @kind this, `io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L447234.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L44723a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` := v1 @kind object;
  #L44723e.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`int` := v2;
  #L447242.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`long` := v3 @kind wide;
  #L447246.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L44724a.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L44724e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.e:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447260.  @monitorenter v5
  #L447262.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447266.  if v0 == 0 then goto L4472de;
  #L44726a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L44726e.  if v0 == v6 then goto L447274;
  #L447272.  goto L4472de;
  #L447274.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L447278.  v2:= 1L;
  #L44727c.  v0:= v0 - v2 @kind long;
  #L44727e.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L447282.  v2:= 0L;
  #L447286.  v4:= lcmp(v0, v2);
  #L44728a.  if v4 != 0 then goto L4472da;
  #L44728e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L447292.  if v0 != 0 then goto L447298;
  #L447296.  goto L4472da;
  #L447298.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L44729c.  v4:= lcmp(v0, v2);
  #L4472a0.  if v4 != 0 then goto L4472ae;
  #L4472a4.  call `i`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.i:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4472aa.  @monitorexit v5
  #L4472ac.  return @kind void;
  #L4472ae.  v0:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L4472b2.  call `<init>`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L4472b8.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4472bc.  @monitorexit v5
  #L4472be.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.f` @type ^`io.reactivex.Scheduler` @kind object;
  #L4472c2.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.d` @type ^`long` @kind wide;
  #L4472c6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4472ca.  call temp:= `scheduleDirect`(v1, v6, v2, v4) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4472d0.  v6:= temp @kind object;
  #L4472d2.  call temp:= `replace`(v0, v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4472d8.  return @kind void;
  #L4472da.  @monitorexit v5
  #L4472dc.  return @kind void;
  #L4472de.  @monitorexit v5
  #L4472e0.  return @kind void;
  #L4472e2.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4472e4.  @monitorexit v5
  #L4472e6.  throw v6;
  catch `java.lang.Throwable` @[L447262..L4472be] goto L4472e2;
  catch `java.lang.Throwable` @[L4472da..L4472e6] goto L4472e2;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;

  #L44730c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L447310.  if v0 == 0 then goto L447320;
  #L447314.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44731a.  v0:= 0I;
  #L44731c.  v2.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L447320.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L447334.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L447338.  v1:= instanceof @variable v0 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L44733c.  if v1 == 0 then goto L44734c;
  #L447340.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L447344.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44734a.  goto L44736a;
  #L44734c.  v1:= instanceof @variable v0 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L447350.  if v1 == 0 then goto L44736a;
  #L447354.  v0:= (`io.reactivex.internal.disposables.ResettableConnectable`) v0 @kind object;
  #L447358.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44735e.  v3:= temp @kind object;
  #L447360.  v3:= (`io.reactivex.disposables.Disposable`) v3 @kind object;
  #L447364.  call `resetIf`(v0, v3) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44736a.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v8 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.h:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L447430.  @monitorenter v8
  #L447432.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L447436.  v0:= instanceof @variable v0 @type ^`io.reactivex.internal.operators.flowable.FlowablePublishClassic` @kind boolean;
  #L44743a.  v1:= 0I;
  #L44743c.  v2:= 0L;
  #L447440.  v4:= 1L;
  #L447444.  if v0 == 0 then goto L44747c;
  #L447448.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L44744c.  if v0 == 0 then goto L447462;
  #L447450.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447454.  if v0 != v9 then goto L447462;
  #L447458.  v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` := v1 @kind object;
  #L44745c.  call `f`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L447462.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L447466.  v0:= v0 - v4 @kind long;
  #L447468.  v9.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v0 @kind wide;
  #L44746c.  v4:= lcmp(v0, v2);
  #L447470.  if v4 != 0 then goto L4474ae;
  #L447474.  call `g`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L44747a.  goto L4474ae;
  #L44747c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447480.  if v0 == 0 then goto L4474ae;
  #L447484.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447488.  if v0 != v9 then goto L4474ae;
  #L44748c.  call `f`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.f:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L447492.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L447496.  v6:= v6 - v4 @kind long;
  #L447498.  v9.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v6 @kind wide;
  #L44749c.  v0:= lcmp(v6, v2);
  #L4474a0.  if v0 != 0 then goto L4474ae;
  #L4474a4.  v8.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` := v1 @kind object;
  #L4474a8.  call `g`(v8, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.g:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind virtual;
  #L4474ae.  @monitorexit v8
  #L4474b0.  return @kind void;
  #L4474b2.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4474b4.  @monitorexit v8
  #L4474b6.  throw v9;
  catch `java.lang.Throwable` @[L447432..L4474b6] goto L4474b2;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableRefCount$a` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.i:(Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4474d4.  @monitorenter v5
  #L4474d6.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L4474da.  v2:= 0L;
  #L4474de.  v4:= lcmp(v0, v2);
  #L4474e2.  if v4 != 0 then goto L447548;
  #L4474e6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L4474ea.  if v6 != v0 then goto L447548;
  #L4474ee.  v0:= 0I;
  #L4474f0.  v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L4474f4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4474fa.  v0:= temp @kind object;
  #L4474fc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L447500.  call temp:= `dispose`(v6) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L447506.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L44750a.  v1:= instanceof @variable v1 @type ^`io.reactivex.disposables.Disposable` @kind boolean;
  #L44750e.  if v1 == 0 then goto L447522;
  #L447512.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L447516.  v6:= (`io.reactivex.disposables.Disposable`) v6 @kind object;
  #L44751a.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L447520.  goto L447548;
  #L447522.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L447526.  v1:= instanceof @variable v1 @type ^`io.reactivex.internal.disposables.ResettableConnectable` @kind boolean;
  #L44752a.  if v1 == 0 then goto L447548;
  #L44752e.  if v0 != 0 then goto L44753a;
  #L447532.  v0:= 1I;
  #L447534.  v6.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.e` @type ^`boolean` := v0 @kind boolean;
  #L447538.  goto L447548;
  #L44753a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L44753e.  v6:= (`io.reactivex.internal.disposables.ResettableConnectable`) v6 @kind object;
  #L447542.  call `resetIf`(v6, v0) @signature `Lio/reactivex/internal/disposables/ResettableConnectable;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L447548.  @monitorexit v5
  #L44754a.  return @kind void;
  #L44754c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44754e.  @monitorexit v5
  #L447550.  throw v6;
  catch `java.lang.Throwable` @[L4474d6..L447550] goto L44754c;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableRefCount` v7 @kind this, `org.reactivestreams.Subscriber` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44737c.  @monitorenter v7
  #L44737e.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` @kind object;
  #L447382.  if v0 != 0 then goto L447394;
  #L447386.  v0:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$a`;
  #L44738a.  call `<init>`(v0, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableRefCount;)V` @kind direct;
  #L447390.  v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.g` @type ^`io.reactivex.internal.operators.flowable.FlowableRefCount$a` := v0 @kind object;
  #L447394.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` @kind wide;
  #L447398.  v3:= 0L;
  #L44739c.  v5:= lcmp(v1, v3);
  #L4473a0.  if v5 != 0 then goto L4473b6;
  #L4473a4.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4473a8.  if v3 == 0 then goto L4473b6;
  #L4473ac.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.b` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4473b0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4473b6.  v3:= 1L;
  #L4473ba.  v1:= v1 + v3 @kind long;
  #L4473bc.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.c` @type ^`long` := v1 @kind wide;
  #L4473c0.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` @kind boolean;
  #L4473c4.  v4:= 1I;
  #L4473c6.  if v3 != 0 then goto L4473de;
  #L4473ca.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.c` @type ^`int`;
  #L4473ce.  v5:= (`long`) v3 @kind i2l;
  #L4473d0.  v3:= lcmp(v1, v5);
  #L4473d4.  if v3 != 0 then goto L4473de;
  #L4473d8.  v0.`io.reactivex.internal.operators.flowable.FlowableRefCount$a.d` @type ^`boolean` := v4 @kind boolean;
  #L4473dc.  goto L4473e0;
  #L4473de.  v4:= 0I;
  #L4473e0.  @monitorexit v7
  #L4473e2.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L4473e6.  v2:= new `io.reactivex.internal.operators.flowable.FlowableRefCount$b`;
  #L4473ea.  call `<init>`(v2, v8, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableRefCount$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableRefCount;Lio/reactivex/internal/operators/flowable/FlowableRefCount$a;)V` @kind direct;
  #L4473f0.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4473f6.  if v4 == 0 then goto L447404;
  #L4473fa.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableRefCount.b` @type ^`io.reactivex.flowables.ConnectableFlowable` @kind object;
  #L4473fe.  call `connect`(v8, v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L447404.  return @kind void;
  #L447406.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L447408.  @monitorexit v7
  #L44740a.  throw v8;
  catch `java.lang.Throwable` @[L44737e..L4473e2] goto L447406;
  catch `java.lang.Throwable` @[L447408..L44740a] goto L447406;
}
