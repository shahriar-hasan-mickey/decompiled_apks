record `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler` v8 @kind object, `int` v9 , `boolean` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44cea4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44ceaa.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44ceae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44ceb4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44ceb8.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44cebc.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` := v3 @kind wide;
  #L44cec0.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` := v5 @kind wide;
  #L44cec4.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L44cec8.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` := v8 @kind object;
  #L44cecc.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L44ced0.  call `<init>`(v2, v9) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L44ced6.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L44ceda.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` := v10 @kind boolean;
  #L44cede.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44ce34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L44ce38.  v1:= 1I;
  #L44ce3a.  if v0 == 0 then goto L44ce4a;
  #L44ce3e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44ce42.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44ce48.  return v1;
  #L44ce4a.  if v5 == 0 then goto L44ce6a;
  #L44ce4e.  if v3 == 0 then goto L44ce90;
  #L44ce52.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L44ce56.  if v3 == 0 then goto L44ce62;
  #L44ce5a.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ce60.  goto L44ce68;
  #L44ce62.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ce68.  return v1;
  #L44ce6a.  v5:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` @kind object;
  #L44ce6e.  if v5 == 0 then goto L44ce84;
  #L44ce72.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44ce76.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44ce7c.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ce82.  return v1;
  #L44ce84.  if v3 == 0 then goto L44ce90;
  #L44ce88.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ce8e.  return v1;
  #L44ce90.  v3:= 0I;
  #L44ce92.  return v3;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v13 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L44cf30.  call temp:= `getAndIncrement`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44cf36.  v0:= temp;
  #L44cf38.  if v0 == 0 then goto L44cf3e;
  #L44cf3c.  return @kind void;
  #L44cf3e.  v0:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cf42.  v1:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44cf46.  v2:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L44cf4a.  v3:= 1I;
  #L44cf4c.  v4:= 1I;
  #L44cf4e.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` @kind boolean;
  #L44cf52.  if v5 == 0 then goto L44cfd6;
  #L44cf56.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44cf5c.  v5:= temp;
  #L44cf5e.  call temp:= `a`(v13, v5, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L44cf64.  v5:= temp;
  #L44cf66.  if v5 == 0 then goto L44cf6c;
  #L44cf6a.  return @kind void;
  #L44cf6c.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44cf70.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44cf76.  v5:= temp @kind wide;
  #L44cf78.  v7:= 0L;
  #L44cf7c.  v9:= v7 @kind wide;
  #L44cf7e.  call temp:= `peek`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L44cf84.  v11:= temp @kind object;
  #L44cf86.  if v11 != 0 then goto L44cf8e;
  #L44cf8a.  v11:= 1I;
  #L44cf8c.  goto L44cf90;
  #L44cf8e.  v11:= 0I;
  #L44cf90.  call temp:= `a`(v13, v11, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.a:(ZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L44cf96.  v11:= temp;
  #L44cf98.  if v11 == 0 then goto L44cf9e;
  #L44cf9c.  return @kind void;
  #L44cf9e.  v11:= lcmp(v5, v9);
  #L44cfa2.  if v11 != 0 then goto L44cfba;
  #L44cfa6.  v5:= lcmp(v9, v7);
  #L44cfaa.  if v5 == 0 then goto L44cfd6;
  #L44cfae.  v5:= v13.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44cfb2.  call temp:= `produced`(v5, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44cfb8.  goto L44cfd6;
  #L44cfba.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44cfc0.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44cfc6.  v11:= temp @kind object;
  #L44cfc8.  call `onNext`(v0, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44cfce.  v11:= 1L;
  #L44cfd2.  v9:= v9 + v11 @kind long;
  #L44cfd4.  goto L44cf7e;
  #L44cfd6.  v4:= -v4 @kind int;
  #L44cfd8.  call temp:= `addAndGet`(v13, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44cfde.  v4:= temp;
  #L44cfe0.  if v4 != 0 then goto L44cf4e;
  #L44cfe4.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v11 @kind this, `long` v12 , `io.reactivex.internal.queue.SpscLinkedArrayQueue` v14 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44d120.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.c` @type ^`long` @kind wide;
  #L44d124.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.b` @type ^`long` @kind wide;
  #L44d128.  v4:= 1I;
  #L44d12a.  v5:= 9223372036854775807L;
  #L44d134.  v7:= lcmp(v2, v5);
  #L44d138.  if v7 != 0 then goto L44d140;
  #L44d13c.  v5:= 1I;
  #L44d13e.  goto L44d142;
  #L44d140.  v5:= 0I;
  #L44d142.  call temp:= `isEmpty`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44d148.  v6:= temp;
  #L44d14a.  if v6 != 0 then goto L44d194;
  #L44d14e.  call temp:= `peek`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L44d154.  v6:= temp @kind object;
  #L44d156.  v6:= (`java.lang.Long`) v6 @kind object;
  #L44d15a.  call temp:= `longValue`(v6) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L44d160.  v6:= temp @kind wide;
  #L44d162.  v8:= v12 - v0 @kind long;
  #L44d166.  v10:= lcmp(v6, v8);
  #L44d16a.  if v10 < 0 then goto L44d186;
  #L44d16e.  if v5 != 0 then goto L44d194;
  #L44d172.  call temp:= `size`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.size:()I` @kind virtual;
  #L44d178.  v6:= temp;
  #L44d17a.  v6:= v6 ^> v4 @kind int;
  #L44d17c.  v6:= (`long`) v6 @kind i2l;
  #L44d17e.  v8:= lcmp(v6, v2);
  #L44d182.  if v8 <= 0 then goto L44d194;
  #L44d186.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44d18c.  call temp:= `poll`(v14) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44d192.  goto L44d142;
  #L44d194.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cef0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L44cef4.  if v0 != 0 then goto L44cf1e;
  #L44cef8.  v0:= 1I;
  #L44cefa.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.j` @type ^`boolean` := v0 @kind boolean;
  #L44cefe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cf02.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44cf08.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44cf0e.  v0:= temp;
  #L44cf10.  if v0 != 0 then goto L44cf1e;
  #L44cf14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44cf18.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44cf1e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44cff8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L44cffc.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44d000.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44d006.  v0:= temp @kind wide;
  #L44d008.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44d00c.  call `c`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L44d012.  v0:= 1I;
  #L44d014.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v0 @kind boolean;
  #L44d018.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L44d01e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44d030.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.g` @type ^`boolean` @kind boolean;
  #L44d034.  if v0 == 0 then goto L44d052;
  #L44d038.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L44d03c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44d040.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44d046.  v0:= temp @kind wide;
  #L44d048.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44d04c.  call `c`(v3, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L44d052.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.l` @type ^`java.lang.Throwable` := v4 @kind object;
  #L44d056.  v4:= 1I;
  #L44d058.  v3.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.k` @type ^`boolean` := v4 @kind boolean;
  #L44d05c.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L44d062.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44d074.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.f` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44d078.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.e` @type ^`io.reactivex.Scheduler` @kind object;
  #L44d07c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44d080.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44d086.  v1:= temp @kind wide;
  #L44d088.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44d08e.  v3:= temp @kind object;
  #L44d090.  call temp:= `offer`(v0, v3, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44d096.  call `c`(v4, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.c:(JLio/reactivex/internal/queue/SpscLinkedArrayQueue;)V` @kind virtual;
  #L44d09c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44d0b0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d0b4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44d0ba.  v0:= temp;
  #L44d0bc.  if v0 == 0 then goto L44d0de;
  #L44d0c0.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.h` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44d0c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d0c8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44d0ce.  v0:= 9223372036854775807L;
  #L44d0d8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44d0de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d0f0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44d0f6.  v0:= temp;
  #L44d0f8.  if v0 == 0 then goto L44d10c;
  #L44d0fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLastTimed$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44d100.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44d106.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLastTimed$a;.b:()V` @kind virtual;
  #L44d10c.  return @kind void;
}
