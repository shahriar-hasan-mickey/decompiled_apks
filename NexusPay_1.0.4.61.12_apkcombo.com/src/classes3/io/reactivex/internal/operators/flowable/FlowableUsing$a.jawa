record `io.reactivex.internal.operators.flowable.FlowableUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/Consumer;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44f468.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f46e.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44f472.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L44f476.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L44f47a.  v0.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` := v4 @kind boolean;
  #L44f47e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44f4b4.  v0:= 0I;
  #L44f4b6.  v1:= 1I;
  #L44f4b8.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44f4be.  v0:= temp;
  #L44f4c0.  if v0 == 0 then goto L44f4e2;
  #L44f4c4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44f4c8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L44f4cc.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44f4d2.  goto L44f4e2;
  #L44f4d4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f4d6.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44f4dc.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44f4e2.  return @kind void;
  catch `java.lang.Throwable` @[L44f4c4..L44f4d2] goto L44f4d4;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f490.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L44f496.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f49a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f4a0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f500.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L44f504.  if v0 == 0 then goto L44f552;
  #L44f508.  v0:= 0I;
  #L44f50a.  v1:= 1I;
  #L44f50c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44f512.  v0:= temp;
  #L44f514.  if v0 == 0 then goto L44f53c;
  #L44f518.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44f51c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L44f520.  call `accept`(v0, v1) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44f526.  goto L44f53c;
  #L44f528.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f52a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44f530.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f534.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f53a.  return @kind void;
  #L44f53c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f540.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f546.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f54a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f550.  goto L44f56c;
  #L44f552.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f556.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f55c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f560.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f566.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L44f56c.  return @kind void;
  catch `java.lang.Throwable` @[L44f518..L44f526] goto L44f528;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44f58c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.d` @type ^`boolean` @kind boolean;
  #L44f590.  if v0 == 0 then goto L44f5fc;
  #L44f594.  v0:= 0I;
  #L44f596.  v1:= 0I;
  #L44f598.  v2:= 1I;
  #L44f59a.  call temp:= `compareAndSet`(v6, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44f5a0.  v3:= temp;
  #L44f5a2.  if v3 == 0 then goto L44f5be;
  #L44f5a6.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L44f5aa.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.b` @type ^`java.lang.Object` @kind object;
  #L44f5ae.  call `accept`(v3, v4) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L44f5b4.  goto L44f5be;
  #L44f5b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f5b8.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44f5be.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f5c2.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f5c8.  if v0 == 0 then goto L44f5f0;
  #L44f5cc.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f5d0.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L44f5d4.  v5:= 2I;
  #L44f5d6.  v5:= new `java.lang.Throwable`[v5];
  #L44f5da.  v5[v1]:= v7 @kind object;
  #L44f5de.  v5[v2]:= v0 @kind object;
  #L44f5e2.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L44f5e8.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f5ee.  goto L44f616;
  #L44f5f0.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f5f4.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f5fa.  goto L44f616;
  #L44f5fc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f600.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f606.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f60a.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f610.  call `a`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.a:()V` @kind virtual;
  #L44f616.  return @kind void;
  catch `java.lang.Throwable` @[L44f5a6..L44f5b4] goto L44f5b6;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f634.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f638.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44f63e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f650.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f654.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44f65a.  v0:= temp;
  #L44f65c.  if v0 == 0 then goto L44f66e;
  #L44f660.  v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44f664.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f668.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44f66e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableUsing$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableUsing$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f680.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableUsing$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f684.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44f68a.  return @kind void;
}
