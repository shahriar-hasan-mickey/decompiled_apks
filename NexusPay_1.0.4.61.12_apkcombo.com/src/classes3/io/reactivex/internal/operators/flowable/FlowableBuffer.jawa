record `io.reactivex.internal.operators.flowable.FlowableBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 , `int` v3 , `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.<init>:(Lio/reactivex/Flowable;IILjava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L433d2c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L433d32.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.b` @type ^`int` := v2;
  #L433d36.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.c` @type ^`int` := v3;
  #L433d3a.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L433d3e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableBuffer` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433d50.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.b` @type ^`int`;
  #L433d54.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.c` @type ^`int`;
  #L433d58.  if v0 != v1 then goto L433d76;
  #L433d5c.  v1:= v5.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433d60.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$a`;
  #L433d64.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L433d68.  call `<init>`(v2, v6, v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @kind direct;
  #L433d6e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433d74.  goto L433dbc;
  #L433d76.  if v1 <= v0 then goto L433d9c;
  #L433d7a.  v0:= v5.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433d7e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$c`;
  #L433d82.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.b` @type ^`int`;
  #L433d86.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.c` @type ^`int`;
  #L433d8a.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L433d8e.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$c;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L433d94.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433d9a.  goto L433dbc;
  #L433d9c.  v0:= v5.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L433da0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBuffer$b`;
  #L433da4.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.b` @type ^`int`;
  #L433da8.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.c` @type ^`int`;
  #L433dac.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableBuffer.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L433db0.  call `<init>`(v1, v6, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$b;.<init>:(Lorg/reactivestreams/Subscriber;IILjava/util/concurrent/Callable;)V` @kind direct;
  #L433db6.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L433dbc.  return @kind void;
}
