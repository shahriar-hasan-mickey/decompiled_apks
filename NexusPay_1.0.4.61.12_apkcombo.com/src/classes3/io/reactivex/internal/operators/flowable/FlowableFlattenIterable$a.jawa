record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @AccessFlag FINAL;
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43ccec.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43ccf2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43ccf6.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43ccfa.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int` := v3;
  #L43ccfe.  v1:= v3 ^> 2;
  #L43cd02.  v3:= v3 - v1 @kind int;
  #L43cd04.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int` := v3;
  #L43cd08.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43cd0c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43cd12.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43cd16.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43cd1a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43cd20.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L43cd24.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cd38.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L43cd3c.  if v0 != 0 then goto L43cd66;
  #L43cd40.  v0:= 1I;
  #L43cd42.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` := v0 @kind boolean;
  #L43cd46.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43cd4a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43cd50.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43cd56.  v0:= temp;
  #L43cd58.  if v0 != 0 then goto L43cd66;
  #L43cd5c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43cd60.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43cd66.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cd78.  v0:= 0I;
  #L43cd7a.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L43cd7e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43cd82.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43cd88.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L43cddc.  v1:= v18 @kind object;
  #L43cde0.  call temp:= `getAndIncrement`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43cde6.  v0:= temp;
  #L43cde8.  if v0 == 0 then goto L43cdee;
  #L43cdec.  return @kind void;
  #L43cdee.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43cdf2.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43cdf6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L43cdfa.  v4:= 0I;
  #L43cdfc.  v5:= 1I;
  #L43cdfe.  if v0 == v5 then goto L43ce06;
  #L43ce02.  v0:= 1I;
  #L43ce04.  goto L43ce08;
  #L43ce06.  v0:= 0I;
  #L43ce08.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L43ce0c.  v7:= 0I;
  #L43ce0e.  v8:= 1I;
  #L43ce10.  if v6 != 0 then goto L43cedc;
  #L43ce14.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43ce18.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43ce1e.  v10:= temp @kind object;
  #L43ce20.  if v10 != 0 then goto L43ce28;
  #L43ce24.  v11:= 1I;
  #L43ce26.  goto L43ce2a;
  #L43ce28.  v11:= 0I;
  #L43ce2a.  call temp:= `e`(v1, v9, v11, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L43ce30.  v9:= temp;
  #L43ce32.  if v9 == 0 then goto L43ce38;
  #L43ce36.  return @kind void;
  #L43ce38.  if v10 == 0 then goto L43cedc;
  #L43ce3c.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43ce40.  call temp:= `apply`(v6, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43ce46.  v6:= temp @kind object;
  #L43ce48.  v6:= (`java.lang.Iterable`) v6 @kind object;
  #L43ce4c.  call temp:= `iterator`(v6) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43ce52.  v6:= temp @kind object;
  #L43ce54.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43ce5a.  v9:= temp;
  #L43ce5c.  if v9 != 0 then goto L43ce6a;
  #L43ce60.  call `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L43ce66.  v6:= v7 @kind object;
  #L43ce68.  goto L43ce10;
  #L43ce6a.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v6 @kind object;
  #L43ce6e.  goto L43cedc;
  #L43ce70.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43ce72.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ce78.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ce7c.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43ce82.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ce86.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43ce8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ce90.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43ce96.  v0:= temp @kind object;
  #L43ce98.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ce9e.  return @kind void;
  #L43cea0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43cea2.  v4:= v0 @kind object;
  #L43cea4.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ceaa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ceae.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43ceb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ceb8.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43cebe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cec2.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43cec8.  v0:= temp @kind object;
  #L43ceca.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L43cece.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43ced4.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ceda.  return @kind void;
  #L43cedc.  if v6 == 0 then goto L43d024;
  #L43cee0.  v9:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43cee4.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43ceea.  v9:= temp @kind wide;
  #L43ceec.  v11:= 0L;
  #L43cef0.  v13:= v11 @kind wide;
  #L43cef2.  v15:= lcmp(v13, v9);
  #L43cef6.  if v15 == 0 then goto L43cfc8;
  #L43cefa.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43cefe.  call temp:= `e`(v1, v15, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L43cf04.  v15:= temp;
  #L43cf06.  if v15 == 0 then goto L43cf0c;
  #L43cf0a.  return @kind void;
  #L43cf0c.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43cf12.  v15:= temp @kind object;
  #L43cf14.  v5:= "The iterator returned a null value" @kind object;
  #L43cf18.  call temp:= `requireNonNull`(v15, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43cf1e.  v5:= temp @kind object;
  #L43cf20.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43cf26.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43cf2a.  call temp:= `e`(v1, v5, v4, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L43cf30.  v5:= temp;
  #L43cf32.  if v5 == 0 then goto L43cf38;
  #L43cf36.  return @kind void;
  #L43cf38.  v16:= 1L;
  #L43cf3c.  v13:= v13 + v16 @kind long;
  #L43cf40.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43cf46.  v5:= temp;
  #L43cf48.  if v5 != 0 then goto L43cf5a;
  #L43cf4c.  call `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @kind virtual;
  #L43cf52.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L43cf56.  v6:= v7 @kind object;
  #L43cf58.  goto L43cfc8;
  #L43cf5a.  v5:= 1I;
  #L43cf5c.  goto L43cef2;
  #L43cf5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43cf60.  v3:= v0 @kind object;
  #L43cf62.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43cf68.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L43cf6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43cf70.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43cf76.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cf7a.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43cf80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cf84.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43cf8a.  v0:= temp @kind object;
  #L43cf8c.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cf92.  return @kind void;
  #L43cf94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43cf96.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43cf9c.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v7 @kind object;
  #L43cfa0.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43cfa4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43cfaa.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cfae.  call temp:= `addThrowable`(v3, v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43cfb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cfb8.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43cfbe.  v0:= temp @kind object;
  #L43cfc0.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cfc6.  return @kind void;
  #L43cfc8.  v5:= lcmp(v13, v9);
  #L43cfcc.  if v5 != 0 then goto L43cff8;
  #L43cfd0.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43cfd4.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43cfda.  v15:= temp;
  #L43cfdc.  if v15 == 0 then goto L43cfe8;
  #L43cfe0.  if v6 != 0 then goto L43cfe8;
  #L43cfe4.  v15:= 1I;
  #L43cfe6.  goto L43cfea;
  #L43cfe8.  v15:= 0I;
  #L43cfea.  call temp:= `e`(v1, v5, v15, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @kind virtual;
  #L43cff0.  v5:= temp;
  #L43cff2.  if v5 == 0 then goto L43cff8;
  #L43cff6.  return @kind void;
  #L43cff8.  v5:= lcmp(v13, v11);
  #L43cffc.  if v5 == 0 then goto L43d01e;
  #L43d000.  v11:= 9223372036854775807L;
  #L43d00a.  v5:= lcmp(v9, v11);
  #L43d00e.  if v5 == 0 then goto L43d01e;
  #L43d012.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43d016.  v9:= -v13 @kind long;
  #L43d018.  call temp:= `addAndGet`(v5, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43d01e.  if v6 != 0 then goto L43d024;
  #L43d022.  goto L43d034;
  #L43d024.  v5:= -v8 @kind int;
  #L43d026.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43d02c.  v8:= temp;
  #L43d02e.  if v8 != 0 then goto L43d034;
  #L43d032.  return @kind void;
  #L43d034.  v5:= 1I;
  #L43d036.  goto L43ce10;
  catch `java.lang.Throwable` @[L43ce18..L43ce20] goto L43cea0;
  catch `java.lang.Throwable` @[L43ce3c..L43ce5c] goto L43ce70;
  catch `java.lang.Throwable` @[L43cf0c..L43cf20] goto L43cf94;
  catch `java.lang.Throwable` @[L43cf40..L43cf48] goto L43cf5e;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 , `boolean` v5 , `org.reactivestreams.Subscriber` v6 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43cba4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.i` @type ^`boolean` @kind boolean;
  #L43cba8.  v1:= 0I;
  #L43cbaa.  v2:= 1I;
  #L43cbac.  if v0 == 0 then goto L43cbbc;
  #L43cbb0.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L43cbb4.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43cbba.  return v2;
  #L43cbbc.  if v4 == 0 then goto L43cbfe;
  #L43cbc0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cbc4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43cbca.  v4:= temp @kind object;
  #L43cbcc.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L43cbd0.  if v4 == 0 then goto L43cbf2;
  #L43cbd4.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43cbd8.  call temp:= `terminate`(v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43cbde.  v4:= temp @kind object;
  #L43cbe0.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L43cbe4.  call `clear`(v7) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43cbea.  call `onError`(v6, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43cbf0.  return v2;
  #L43cbf2.  if v5 == 0 then goto L43cbfe;
  #L43cbf6.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43cbfc.  return v2;
  #L43cbfe.  v4:= 0I;
  #L43cc00.  return v4;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.f:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43cd9c.  if v4 == 0 then goto L43cdc8;
  #L43cda0.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int`;
  #L43cda4.  v4:= v4 + 1;
  #L43cda8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.d` @type ^`int`;
  #L43cdac.  if v4 != v0 then goto L43cdc4;
  #L43cdb0.  v0:= 0I;
  #L43cdb2.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v0;
  #L43cdb6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43cdba.  v1:= (`long`) v4 @kind i2l;
  #L43cdbc.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43cdc2.  goto L43cdc8;
  #L43cdc4.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.l` @type ^`int` := v4;
  #L43cdc8.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cc14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L43cc18.  if v0 != 0 then goto L43cc30;
  #L43cc1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43cc20.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L43cc26.  v0:= temp;
  #L43cc28.  if v0 == 0 then goto L43cc30;
  #L43cc2c.  v0:= 1I;
  #L43cc2e.  goto L43cc32;
  #L43cc30.  v0:= 0I;
  #L43cc32.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d078.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43d07c.  if v0 == 0 then goto L43d082;
  #L43d080.  return @kind void;
  #L43d082.  v0:= 1I;
  #L43d084.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L43d088.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L43d08e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d0a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43d0a4.  if v0 != 0 then goto L43d0c6;
  #L43d0a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.j` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43d0ac.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L43d0b2.  v0:= temp;
  #L43d0b4.  if v0 == 0 then goto L43d0c6;
  #L43d0b8.  v2:= 1I;
  #L43d0ba.  v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L43d0be.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L43d0c4.  goto L43d0cc;
  #L43d0c6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43d0cc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d0e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` @kind boolean;
  #L43d0e4.  if v0 == 0 then goto L43d0ea;
  #L43d0e8.  return @kind void;
  #L43d0ea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L43d0ee.  if v0 != 0 then goto L43d118;
  #L43d0f2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43d0f6.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L43d0fc.  v2:= temp;
  #L43d0fe.  if v2 != 0 then goto L43d118;
  #L43d102.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L43d106.  v0:= "Queue is full?!" @kind object;
  #L43d10a.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d110.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43d116.  return @kind void;
  #L43d118.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L43d11e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43d130.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43d134.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43d13a.  v0:= temp;
  #L43d13c.  if v0 == 0 then goto L43d1c8;
  #L43d140.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L43d144.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L43d148.  if v0 == 0 then goto L43d1a0;
  #L43d14c.  v0:= v4 @kind object;
  #L43d14e.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L43d152.  v1:= 3I;
  #L43d154.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L43d15a.  v1:= temp;
  #L43d15c.  v2:= 1I;
  #L43d15e.  if v1 != v2 then goto L43d17a;
  #L43d162.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L43d166.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L43d16a.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.h` @type ^`boolean` := v2 @kind boolean;
  #L43d16e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43d172.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43d178.  return @kind void;
  #L43d17a.  v2:= 2I;
  #L43d17c.  if v1 != v2 then goto L43d1a0;
  #L43d180.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int` := v1;
  #L43d184.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L43d188.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43d18c.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43d192.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L43d196.  v0:= (`long`) v0 @kind i2l;
  #L43d198.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43d19e.  return @kind void;
  #L43d1a0.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L43d1a4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L43d1a8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L43d1ae.  v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L43d1b2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43d1b6.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43d1bc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.c` @type ^`int`;
  #L43d1c0.  v0:= (`long`) v0 @kind i2l;
  #L43d1c2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43d1c8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43cc6c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` @kind object;
  #L43cc70.  v1:= 0I;
  #L43cc72.  if v0 != 0 then goto L43ccb4;
  #L43cc76.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L43cc7a.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43cc80.  v0:= temp @kind object;
  #L43cc82.  if v0 != 0 then goto L43cc88;
  #L43cc86.  return v1 @kind object;
  #L43cc88.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43cc8c.  call temp:= `apply`(v2, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43cc92.  v0:= temp @kind object;
  #L43cc94.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L43cc98.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43cc9e.  v0:= temp @kind object;
  #L43cca0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43cca6.  v2:= temp;
  #L43cca8.  if v2 != 0 then goto L43ccb0;
  #L43ccac.  v0:= v1 @kind object;
  #L43ccae.  goto L43cc72;
  #L43ccb0.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v0 @kind object;
  #L43ccb4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43ccba.  v2:= temp @kind object;
  #L43ccbc.  v3:= "The iterator returned a null value" @kind object;
  #L43ccc0.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43ccc6.  v2:= temp @kind object;
  #L43ccc8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43ccce.  v0:= temp;
  #L43ccd0.  if v0 != 0 then goto L43ccd8;
  #L43ccd4.  v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.k` @type ^`java.util.Iterator` := v1 @kind object;
  #L43ccd8.  return v2 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43d1dc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43d1e2.  v0:= temp;
  #L43d1e4.  if v0 == 0 then goto L43d1f8;
  #L43d1e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43d1ec.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43d1f2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.drain:()V` @kind virtual;
  #L43d1f8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43cc44.  v0:= 1I;
  #L43cc46.  v2:= v2 ^& v0 @kind int;
  #L43cc48.  if v2 == 0 then goto L43cc56;
  #L43cc4c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a.m` @type ^`int`;
  #L43cc50.  if v2 != v0 then goto L43cc56;
  #L43cc54.  return v0;
  #L43cc56.  v2:= 0I;
  #L43cc58.  return v2;
}
