record `io.reactivex.internal.operators.flowable.FlowableReplay$i` @kind class @AccessFlag FINAL extends `org.reactivestreams.Publisher` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$i` v0 @kind this, `java.util.concurrent.atomic.AtomicReference` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44833c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L448342.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L448346.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L44834a.  return @kind void;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableReplay$i` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44835c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448366.  v0:= temp @kind object;
  #L448368.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$j`) v0 @kind object;
  #L44836c.  if v0 != 0 then goto L4483b2;
  #L448370.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L448374.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L44837a.  v0:= temp @kind object;
  #L44837c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$g`) v0 @kind object;
  #L448380.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$j`;
  #L448384.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @kind direct;
  #L44838a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableReplay$i.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44838e.  v2:= 0I;
  #L448390.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L448396.  v0:= temp;
  #L448398.  if v0 != 0 then goto L44839e;
  #L44839c.  goto L44835c;
  #L44839e.  v0:= v1 @kind object;
  #L4483a0.  goto L4483b2;
  #L4483a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4483a4.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4483aa.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4483b0.  return @kind void;
  #L4483b2.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$d`;
  #L4483b6.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$j;Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4483bc.  call `onSubscribe`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4483c2.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.a:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)Z` @kind virtual;
  #L4483c8.  call temp:= `isDisposed`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @kind virtual;
  #L4483ce.  v4:= temp;
  #L4483d0.  if v4 == 0 then goto L4483dc;
  #L4483d4.  call `c`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind virtual;
  #L4483da.  return @kind void;
  #L4483dc.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L4483e2.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L4483e6.  call `c`(v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L4483ec.  return @kind void;
  catch `java.lang.Throwable` @[L448370..L448380] goto L4483a2;
}
