record `io.reactivex.internal.operators.flowable.FlowableScan$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableScan$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableScan$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableScan$a.c` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableScan$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableScan$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L449e30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L449e36.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L449e3a.  v0.`io.reactivex.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L449e3e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449e50.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449e54.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L449e5a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449e6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L449e70.  if v0 == 0 then goto L449e76;
  #L449e74.  return @kind void;
  #L449e76.  v0:= 1I;
  #L449e78.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L449e7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449e80.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L449e86.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449e98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L449e9c.  if v0 == 0 then goto L449ea8;
  #L449ea0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L449ea6.  return @kind void;
  #L449ea8.  v0:= 1I;
  #L449eaa.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` := v0 @kind boolean;
  #L449eae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449eb2.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449eb8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L449ecc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.e` @type ^`boolean` @kind boolean;
  #L449ed0.  if v0 == 0 then goto L449ed6;
  #L449ed4.  return @kind void;
  #L449ed6.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449eda.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` @kind object;
  #L449ede.  if v1 != 0 then goto L449eee;
  #L449ee2.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L449ee6.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L449eec.  goto L449f10;
  #L449eee.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L449ef2.  call temp:= `apply`(v2, v1, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L449ef8.  v4:= temp @kind object;
  #L449efa.  v1:= "The value returned by the accumulator is null" @kind object;
  #L449efe.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L449f04.  v4:= temp @kind object;
  #L449f06.  v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L449f0a.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L449f10.  return @kind void;
  #L449f12.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L449f14.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L449f1a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449f1e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L449f24.  call `onError`(v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L449f2a.  return @kind void;
  catch `java.lang.Throwable` @[L449eee..L449f06] goto L449f12;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449f48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449f4c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L449f52.  v0:= temp;
  #L449f54.  if v0 == 0 then goto L449f66;
  #L449f58.  v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L449f5c.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449f60.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L449f66.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableScan$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableScan$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L449f78.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableScan$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L449f7c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L449f82.  return @kind void;
}
