record `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @AccessFlag FINAL;
  `java.util.Queue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.p` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.q` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L43e3b8.  v0:= new `java.lang.Object`;
  #L43e3bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43e3c2.  `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.q` @type ^`java.lang.Object` := v0 @kind object;
  #L43e3c6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.Function` v5 @kind object, `int` v6 , `boolean` v7 , `java.util.Map` v8 @kind object, `java.util.Queue` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;IZLjava/util/Map;Ljava/util/Queue;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L43e3d8.  call `<init>`(v2) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43e3de.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43e3e2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43e3e8.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43e3ec.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43e3f0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43e3f6.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L43e3fa.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43e3fe.  v1:= 1I;
  #L43e400.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43e406.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L43e40a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L43e40e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L43e412.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.functions.Function` := v5 @kind object;
  #L43e416.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int` := v6;
  #L43e41a.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` := v7 @kind boolean;
  #L43e41e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` := v8 @kind object;
  #L43e422.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` := v9 @kind object;
  #L43e426.  v3:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43e42a.  call `<init>`(v3, v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43e430.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v3 @kind object;
  #L43e434.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L43e50c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L43e510.  if v0 == 0 then goto L43e546;
  #L43e514.  v0:= 0I;
  #L43e516.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L43e51a.  call temp:= `poll`(v1) @signature `Ljava/util/Queue;.poll:()Ljava/lang/Object;` @kind interface;
  #L43e520.  v1:= temp @kind object;
  #L43e522.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L43e526.  if v1 == 0 then goto L43e536;
  #L43e52a.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L43e530.  v0:= v0 + 1;
  #L43e534.  goto L43e516;
  #L43e536.  if v0 == 0 then goto L43e546;
  #L43e53a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e53e.  v0:= -v0 @kind int;
  #L43e540.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43e546.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43e448.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43e44c.  v1:= 0I;
  #L43e44e.  v2:= 1I;
  #L43e450.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43e456.  v0:= temp;
  #L43e458.  if v0 == 0 then goto L43e47c;
  #L43e45c.  call `f`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.f:()V` @kind direct;
  #L43e462.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e466.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43e46c.  v0:= temp;
  #L43e46e.  if v0 != 0 then goto L43e47c;
  #L43e472.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e476.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43e47c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e490.  if v2 == 0 then goto L43e496;
  #L43e494.  goto L43e49a;
  #L43e496.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.q` @type ^`java.lang.Object` @kind object;
  #L43e49a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e49e.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e4a4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e4a8.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43e4ae.  v2:= temp;
  #L43e4b0.  if v2 != 0 then goto L43e4dc;
  #L43e4b4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e4b8.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43e4be.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.p` @type ^`boolean` @kind boolean;
  #L43e4c2.  if v2 != 0 then goto L43e4dc;
  #L43e4c6.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43e4cc.  v2:= temp;
  #L43e4ce.  if v2 != 0 then goto L43e4dc;
  #L43e4d2.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e4d6.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43e4dc.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e4f0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e4f4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43e4fa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L43e558.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43e55e.  v0:= temp;
  #L43e560.  if v0 == 0 then goto L43e566;
  #L43e564.  return @kind void;
  #L43e566.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.p` @type ^`boolean` @kind boolean;
  #L43e56a.  if v0 == 0 then goto L43e576;
  #L43e56e.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.g:()V` @kind virtual;
  #L43e574.  goto L43e57c;
  #L43e576.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.h:()V` @kind virtual;
  #L43e57c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43e2b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43e2bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43e2c2.  v0:= temp;
  #L43e2c4.  v1:= 1I;
  #L43e2c6.  if v0 == 0 then goto L43e2d2;
  #L43e2ca.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43e2d0.  return v1;
  #L43e2d2.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L43e2d6.  if v0 == 0 then goto L43e2fa;
  #L43e2da.  if v3 == 0 then goto L43e320;
  #L43e2de.  if v4 == 0 then goto L43e320;
  #L43e2e2.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.lang.Throwable` @kind object;
  #L43e2e6.  if v3 == 0 then goto L43e2f2;
  #L43e2ea.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e2f0.  goto L43e2f8;
  #L43e2f2.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43e2f8.  return v1;
  #L43e2fa.  if v3 == 0 then goto L43e320;
  #L43e2fe.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.lang.Throwable` @kind object;
  #L43e302.  if v3 == 0 then goto L43e314;
  #L43e306.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43e30c.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e312.  return v1;
  #L43e314.  if v4 == 0 then goto L43e320;
  #L43e318.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43e31e.  return v1;
  #L43e320.  v3:= 0I;
  #L43e322.  return v3;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43e590.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e594.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e598.  v2:= 1I;
  #L43e59a.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43e59e.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43e5a4.  v3:= temp;
  #L43e5a6.  if v3 == 0 then goto L43e5ac;
  #L43e5aa.  return @kind void;
  #L43e5ac.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L43e5b0.  if v3 == 0 then goto L43e5d2;
  #L43e5b4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L43e5b8.  if v4 != 0 then goto L43e5d2;
  #L43e5bc.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.lang.Throwable` @kind object;
  #L43e5c0.  if v4 == 0 then goto L43e5d2;
  #L43e5c4.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43e5ca.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e5d0.  return @kind void;
  #L43e5d2.  v4:= 0I;
  #L43e5d4.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43e5da.  if v3 == 0 then goto L43e5f6;
  #L43e5de.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.lang.Throwable` @kind object;
  #L43e5e2.  if v0 == 0 then goto L43e5ee;
  #L43e5e6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e5ec.  goto L43e5f4;
  #L43e5ee.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43e5f4.  return @kind void;
  #L43e5f6.  v2:= -v2 @kind int;
  #L43e5f8.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43e5fe.  v2:= temp;
  #L43e600.  if v2 != 0 then goto L43e59a;
  #L43e604.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L43e618.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e61c.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e620.  v2:= 1I;
  #L43e622.  v3:= 1I;
  #L43e624.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43e628.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43e62e.  v4:= temp @kind wide;
  #L43e630.  v6:= 0L;
  #L43e634.  v8:= v6 @kind wide;
  #L43e636.  v10:= lcmp(v8, v4);
  #L43e63a.  if v10 == 0 then goto L43e67a;
  #L43e63e.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L43e642.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43e648.  v12:= temp @kind object;
  #L43e64a.  v12:= (`io.reactivex.flowables.GroupedFlowable`) v12 @kind object;
  #L43e64e.  if v12 != 0 then goto L43e656;
  #L43e652.  v13:= 1I;
  #L43e654.  goto L43e658;
  #L43e656.  v13:= 0I;
  #L43e658.  call temp:= `e`(v14, v11, v13, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L43e65e.  v11:= temp;
  #L43e660.  if v11 == 0 then goto L43e666;
  #L43e664.  return @kind void;
  #L43e666.  if v13 == 0 then goto L43e66c;
  #L43e66a.  goto L43e67a;
  #L43e66c.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43e672.  v10:= 1L;
  #L43e676.  v8:= v8 + v10 @kind long;
  #L43e678.  goto L43e636;
  #L43e67a.  if v10 != 0 then goto L43e698;
  #L43e67e.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` @kind boolean;
  #L43e682.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43e688.  v11:= temp;
  #L43e68a.  call temp:= `e`(v14, v10, v11, v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.e:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L43e690.  v10:= temp;
  #L43e692.  if v10 == 0 then goto L43e698;
  #L43e696.  return @kind void;
  #L43e698.  v10:= lcmp(v8, v6);
  #L43e69c.  if v10 == 0 then goto L43e6c8;
  #L43e6a0.  v6:= 9223372036854775807L;
  #L43e6aa.  v10:= lcmp(v4, v6);
  #L43e6ae.  if v10 == 0 then goto L43e6be;
  #L43e6b2.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43e6b6.  v5:= -v8 @kind long;
  #L43e6b8.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43e6be.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e6c2.  call `request`(v4, v8) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43e6c8.  v3:= -v3 @kind int;
  #L43e6ca.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43e6d0.  v3:= temp;
  #L43e6d2.  if v3 != 0 then goto L43e624;
  #L43e6d6.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e334.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e338.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43e33e.  v0:= temp;
  #L43e340.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43e6e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`boolean` @kind boolean;
  #L43e6ec.  if v0 != 0 then goto L43e74c;
  #L43e6f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e6f4.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43e6fa.  v0:= temp @kind object;
  #L43e6fc.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43e702.  v0:= temp @kind object;
  #L43e704.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43e70a.  v1:= temp;
  #L43e70c.  if v1 == 0 then goto L43e724;
  #L43e710.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43e716.  v1:= temp @kind object;
  #L43e718.  v1:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$b`) v1 @kind object;
  #L43e71c.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onComplete:()V` @kind virtual;
  #L43e722.  goto L43e704;
  #L43e724.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e728.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43e72e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L43e732.  if v0 == 0 then goto L43e73c;
  #L43e736.  call `clear`(v0) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L43e73c.  v0:= 1I;
  #L43e73e.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`boolean` := v0 @kind boolean;
  #L43e742.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L43e746.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L43e74c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43e760.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`boolean` @kind boolean;
  #L43e764.  if v0 == 0 then goto L43e770;
  #L43e768.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e76e.  return @kind void;
  #L43e770.  v0:= 1I;
  #L43e772.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`boolean` := v0 @kind boolean;
  #L43e776.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e77a.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43e780.  v1:= temp @kind object;
  #L43e782.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43e788.  v1:= temp @kind object;
  #L43e78a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43e790.  v2:= temp;
  #L43e792.  if v2 == 0 then goto L43e7aa;
  #L43e796.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43e79c.  v2:= temp @kind object;
  #L43e79e.  v2:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$b`) v2 @kind object;
  #L43e7a2.  call `onError`(v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e7a8.  goto L43e78a;
  #L43e7aa.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e7ae.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L43e7b4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.h` @type ^`java.util.Queue` @kind object;
  #L43e7b8.  if v1 == 0 then goto L43e7c2;
  #L43e7bc.  call `clear`(v1) @signature `Ljava/util/Queue;.clear:()V` @kind interface;
  #L43e7c2.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.m` @type ^`java.lang.Throwable` := v4 @kind object;
  #L43e7c6.  v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.n` @type ^`boolean` := v0 @kind boolean;
  #L43e7ca.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L43e7d0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43e7e4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.o` @type ^`boolean` @kind boolean;
  #L43e7e8.  if v0 == 0 then goto L43e7ee;
  #L43e7ec.  return @kind void;
  #L43e7ee.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e7f2.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43e7f6.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e7fc.  v1:= temp @kind object;
  #L43e7fe.  v2:= 0I;
  #L43e800.  if v1 == 0 then goto L43e808;
  #L43e804.  v3:= v1 @kind object;
  #L43e806.  goto L43e80c;
  #L43e808.  v3:= `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.q` @type ^`java.lang.Object` @kind object;
  #L43e80c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e810.  call temp:= `get`(v4, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e816.  v4:= temp @kind object;
  #L43e818.  v4:= (`io.reactivex.internal.operators.flowable.FlowableGroupBy$b`) v4 @kind object;
  #L43e81c.  if v4 != 0 then goto L43e858;
  #L43e820.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43e824.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43e82a.  v2:= temp;
  #L43e82c.  if v2 == 0 then goto L43e832;
  #L43e830.  return @kind void;
  #L43e832.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L43e836.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.e` @type ^`boolean` @kind boolean;
  #L43e83a.  call temp:= `e`(v1, v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.e:(Ljava/lang/Object;ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Z)Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;` @kind static;
  #L43e840.  v4:= temp @kind object;
  #L43e842.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.f` @type ^`java.util.Map` @kind object;
  #L43e846.  call temp:= `put`(v1, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e84c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43e850.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43e856.  v2:= 1I;
  #L43e858.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43e85c.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e862.  v6:= temp @kind object;
  #L43e864.  v1:= "The valueSelector returned null" @kind object;
  #L43e868.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43e86e.  v6:= temp @kind object;
  #L43e870.  call `onNext`(v4, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$b;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L43e876.  call `f`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.f:()V` @kind direct;
  #L43e87c.  if v2 == 0 then goto L43e88c;
  #L43e880.  call temp:= `offer`(v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43e886.  call `drain`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L43e88c.  return @kind void;
  #L43e88e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e890.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e896.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e89a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43e8a0.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e8a6.  return @kind void;
  #L43e8a8.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e8aa.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e8b0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e8b4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43e8ba.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e8c0.  return @kind void;
  catch `java.lang.Throwable` @[L43e7f2..L43e7fe] goto L43e8a8;
  catch `java.lang.Throwable` @[L43e858..L43e870] goto L43e88e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43e8ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43e8f0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43e8f6.  v0:= temp;
  #L43e8f8.  if v0 == 0 then goto L43e916;
  #L43e8fc.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43e900.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e904.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43e90a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.d` @type ^`int`;
  #L43e90e.  v0:= (`long`) v0 @kind i2l;
  #L43e910.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43e916.  return @kind void;
}
procedure `io.reactivex.flowables.GroupedFlowable` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e378.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.g` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43e37c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43e382.  v0:= temp @kind object;
  #L43e384.  v0:= (`io.reactivex.flowables.GroupedFlowable`) v0 @kind object;
  #L43e388.  return v0 @kind object;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L43e39c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.poll:()Lio/reactivex/flowables/GroupedFlowable;` @kind virtual;
  #L43e3a2.  v0:= temp @kind object;
  #L43e3a4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e928.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43e92e.  v0:= temp;
  #L43e930.  if v0 == 0 then goto L43e944;
  #L43e934.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43e938.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43e93e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.drain:()V` @kind virtual;
  #L43e944.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e354.  v0:= 2I;
  #L43e356.  v2:= v2 ^& v0 @kind int;
  #L43e358.  if v2 == 0 then goto L43e364;
  #L43e35c.  v2:= 1I;
  #L43e35e.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.p` @type ^`boolean` := v2 @kind boolean;
  #L43e362.  return v0;
  #L43e364.  v2:= 0I;
  #L43e366.  return v2;
}
