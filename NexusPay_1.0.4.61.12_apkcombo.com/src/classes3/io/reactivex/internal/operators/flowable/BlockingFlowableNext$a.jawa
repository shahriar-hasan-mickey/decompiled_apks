record `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` @kind class @AccessFlag FINAL extends `java.util.Iterator` @kind interface {
  `io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @AccessFlag PRIVATE_FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @AccessFlag PRIVATE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @AccessFlag PRIVATE;
  `boolean` `io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4308ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4308f2.  v0:= 1I;
  #L4308f4.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4308f8.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4308fc.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L430900.  v1.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` := v3 @kind object;
  #L430904.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4307c0.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` @kind boolean;
  #L4307c4.  v1:= 1I;
  #L4307c6.  if v0 != 0 then goto L4307f6;
  #L4307ca.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.g` @type ^`boolean` := v1 @kind boolean;
  #L4307ce.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4307d2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;.b:()V` @kind virtual;
  #L4307d8.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L4307dc.  call temp:= `fromPublisher`(v0) @signature `Lio/reactivex/Flowable;.fromPublisher:(Lorg/reactivestreams/Publisher;)Lio/reactivex/Flowable;` @kind static;
  #L4307e2.  v0:= temp @kind object;
  #L4307e4.  call temp:= `materialize`(v0) @signature `Lio/reactivex/Flowable;.materialize:()Lio/reactivex/Flowable;` @kind virtual;
  #L4307ea.  v0:= temp @kind object;
  #L4307ec.  v2:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4307f0.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4307f6.  v0:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L4307fa.  call temp:= `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$b;.c:()Lio/reactivex/Notification;` @kind virtual;
  #L430800.  v0:= temp @kind object;
  #L430802.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L430808.  v2:= temp;
  #L43080a.  v3:= 0I;
  #L43080c.  if v2 == 0 then goto L430822;
  #L430810.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v3 @kind boolean;
  #L430814.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L43081a.  v0:= temp @kind object;
  #L43081c.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L430820.  return v1;
  #L430822.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` := v3 @kind boolean;
  #L430826.  call temp:= `isOnComplete`(v0) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L43082c.  v1:= temp;
  #L43082e.  if v1 == 0 then goto L430834;
  #L430832.  return v3;
  #L430834.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L43083a.  v1:= temp;
  #L43083c.  if v1 == 0 then goto L430856;
  #L430840.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L430846.  v0:= temp @kind object;
  #L430848.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L43084c.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L430852.  v0:= temp @kind object;
  #L430854.  throw v0;
  #L430856.  v0:= new `java.lang.IllegalStateException`;
  #L43085a.  v1:= "Should not reach here" @kind object;
  #L43085e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L430864.  throw v0;
  #L430866.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L430868.  v1:= v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.a` @type ^`io.reactivex.internal.operators.flowable.BlockingFlowableNext$b` @kind object;
  #L43086c.  call `dispose`(v1) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L430872.  v4.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` := v0 @kind object;
  #L430876.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L43087c.  v0:= temp @kind object;
  #L43087e.  throw v0;
  catch `java.lang.InterruptedException` @[L4307c0..L430866] goto L430866;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430778.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L43077c.  if v0 != 0 then goto L4307a4;
  #L430780.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.d` @type ^`boolean` @kind boolean;
  #L430784.  v1:= 0I;
  #L430786.  if v0 != 0 then goto L43078c;
  #L43078a.  return v1;
  #L43078c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` @kind boolean;
  #L430790.  if v0 == 0 then goto L4307a0;
  #L430794.  call temp:= `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.a:()Z` @kind direct;
  #L43079a.  v0:= temp;
  #L43079c.  if v0 == 0 then goto L4307a2;
  #L4307a0.  v1:= 1I;
  #L4307a2.  return v1;
  #L4307a4.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4307aa.  v0:= temp @kind object;
  #L4307ac.  throw v0;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4308a0.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.f` @type ^`java.lang.Throwable` @kind object;
  #L4308a4.  if v0 != 0 then goto L4308d0;
  #L4308a8.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.hasNext:()Z` @kind virtual;
  #L4308ae.  v0:= temp;
  #L4308b0.  if v0 == 0 then goto L4308c0;
  #L4308b4.  v0:= 1I;
  #L4308b6.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4308ba.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a.c` @type ^`java.lang.Object` @kind object;
  #L4308be.  return v0 @kind object;
  #L4308c0.  v0:= new `java.util.NoSuchElementException`;
  #L4308c4.  v1:= "No more elements" @kind object;
  #L4308c8.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4308ce.  throw v0;
  #L4308d0.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4308d6.  v0:= temp @kind object;
  #L4308d8.  throw v0;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableNext$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableNext$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430918.  v0:= new `java.lang.UnsupportedOperationException`;
  #L43091c.  v1:= "Read only iterator" @kind object;
  #L430920.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L430926.  throw v0;
}
