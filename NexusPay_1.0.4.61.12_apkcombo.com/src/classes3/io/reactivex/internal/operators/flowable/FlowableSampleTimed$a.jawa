record `io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableSampleTimed$c` @kind class {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4498f4.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L4498fa.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4498fe.  v2:= 1I;
  #L449900.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L449906.  v0.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L44990a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L44991c.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L449922.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L449926.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44992c.  v0:= temp;
  #L44992e.  if v0 != 0 then goto L44993c;
  #L449932.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449936.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44993c.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L449950.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L449954.  call temp:= `incrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.incrementAndGet:()I` @kind virtual;
  #L44995a.  v0:= temp;
  #L44995c.  v1:= 2I;
  #L44995e.  if v0 != v1 then goto L449982;
  #L449962.  call `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSampleTimed$c;.c:()V` @kind virtual;
  #L449968.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44996c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L449972.  v0:= temp;
  #L449974.  if v0 != 0 then goto L449982;
  #L449978.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSampleTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44997c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L449982.  return @kind void;
}
