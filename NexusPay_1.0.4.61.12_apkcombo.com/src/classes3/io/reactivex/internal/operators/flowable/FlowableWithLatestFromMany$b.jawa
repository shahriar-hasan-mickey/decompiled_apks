record `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReferenceArray` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L45269c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4526a2.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4526a6.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L4526aa.  v2:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[v4];
  #L4526ae.  v3:= 0I;
  #L4526b0.  if v3 >= v4 then goto L4526c8;
  #L4526b4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`;
  #L4526b8.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;I)V` @kind direct;
  #L4526be.  v2[v3]:= v0 @kind object;
  #L4526c2.  v3:= v3 + 1;
  #L4526c6.  goto L4526b0;
  #L4526c8.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] := v2 @kind object;
  #L4526cc.  v2:= new `java.util.concurrent.atomic.AtomicReferenceArray`;
  #L4526d0.  call `<init>`(v2, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.<init>:(I)V` @kind direct;
  #L4526d6.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` := v2 @kind object;
  #L4526da.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4526de.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4526e4.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4526e8.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4526ec.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4526f2.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4526f6.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L4526fa.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L452700.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L452704.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v3 @kind this, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L452750.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L452754.  v1:= 0I;
  #L452756.  v2:= length @variable v0;
  #L452758.  if v1 >= v2 then goto L452770;
  #L45275c.  if v1 == v4 then goto L45276a;
  #L452760.  v2:= v0[v1] @kind object;
  #L452764.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L45276a.  v1:= v1 + 1;
  #L45276e.  goto L452756;
  #L452770.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.b:(IZ)V` @AccessFlag  {
    temp;

  #L452784.  if v2 != 0 then goto L4527ac;
  #L452788.  v2:= 1I;
  #L45278a.  v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v2 @kind boolean;
  #L45278e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452792.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L452798.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L45279e.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4527a2.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4527a6.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4527ac.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.c:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4527c0.  v0:= 1I;
  #L4527c2.  v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L4527c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4527ca.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4527d0.  call `a`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L4527d6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4527da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4527de.  call `onError`(v2, v3, v1, v0) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L4527e4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L452718.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L45271c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L452722.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L452726.  v1:= length @variable v0;
  #L452728.  v2:= 0I;
  #L45272a.  if v2 >= v1 then goto L45273e;
  #L45272e.  v3:= v0[v2] @kind object;
  #L452732.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$c;.a:()V` @kind virtual;
  #L452738.  v2:= v2 + 1;
  #L45273c.  goto L45272a;
  #L45273e.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v1 @kind this, `int` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.d:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L4527f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L4527fc.  call `set`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.set:(ILjava/lang/Object;)V` @kind virtual;
  #L452802.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `org.reactivestreams.Publisher`[] v6 @kind object, `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.e:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45290c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$c`[] @kind object;
  #L452910.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L452914.  v2:= 0I;
  #L452916.  if v2 >= v7 then goto L452940;
  #L45291a.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L452920.  v3:= temp @kind object;
  #L452922.  v4:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L452926.  if v3 != v4 then goto L45292c;
  #L45292a.  return @kind void;
  #L45292c.  v3:= v6[v2] @kind object;
  #L452930.  v4:= v0[v2] @kind object;
  #L452934.  call `subscribe`(v3, v4) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L45293a.  v2:= v2 + 1;
  #L45293e.  goto L452916;
  #L452940.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L452814.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L452818.  if v0 != 0 then goto L452838;
  #L45281c.  v0:= 1I;
  #L45281e.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L452822.  v0:= -1I;
  #L452824.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L45282a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45282e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L452832.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L452838.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45284c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L452850.  if v0 == 0 then goto L45285c;
  #L452854.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45285a.  return @kind void;
  #L45285c.  v0:= 1I;
  #L45285e.  v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` := v0 @kind boolean;
  #L452862.  v0:= -1I;
  #L452864.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.a:(I)V` @kind virtual;
  #L45286a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45286e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L452872.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L452878.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L45288c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L452892.  v3:= temp;
  #L452894.  if v3 != 0 then goto L4528ba;
  #L452898.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L45289c.  if v3 != 0 then goto L4528ba;
  #L4528a0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4528a4.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4528aa.  v3:= temp @kind object;
  #L4528ac.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L4528b0.  v0:= 1L;
  #L4528b4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4528ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4528cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4528d0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4528d4.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4528da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4528ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4528f0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4528f4.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4528fa.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4525fc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.h` @type ^`boolean` @kind boolean;
  #L452600.  v1:= 0I;
  #L452602.  if v0 == 0 then goto L452608;
  #L452606.  return v1;
  #L452608.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.d` @type ^`java.util.concurrent.atomic.AtomicReferenceArray` @kind object;
  #L45260c.  call temp:= `length`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.length:()I` @kind virtual;
  #L452612.  v2:= temp;
  #L452614.  v3:= v2 + 1;
  #L452618.  v3:= new `java.lang.Object`[v3];
  #L45261c.  v3[v1]:= v6 @kind object;
  #L452620.  v6:= 0I;
  #L452622.  if v6 >= v2 then goto L45263e;
  #L452626.  call temp:= `get`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicReferenceArray;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L45262c.  v4:= temp @kind object;
  #L45262e.  if v4 != 0 then goto L452634;
  #L452632.  return v1;
  #L452634.  v6:= v6 + 1;
  #L452638.  v3[v6]:= v4 @kind object;
  #L45263c.  goto L452622;
  #L45263e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L452642.  call temp:= `apply`(v6, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L452648.  v6:= temp @kind object;
  #L45264a.  v0:= "The combiner returned a null value" @kind object;
  #L45264e.  call temp:= `requireNonNull`(v6, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L452654.  v6:= temp @kind object;
  #L452656.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45265a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableWithLatestFromMany$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45265e.  call `onNext`(v0, v6, v5, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L452664.  v6:= 1I;
  #L452666.  return v6;
  #L452668.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L45266a.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L452670.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.cancel:()V` @kind virtual;
  #L452676.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableWithLatestFromMany$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45267c.  return v1;
  catch `java.lang.Throwable` @[L45263e..L452656] goto L452668;
}
