record `io.reactivex.internal.operators.flowable.FlowableFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class, `java.util.concurrent.Callable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43d784.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L43d78a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L43d78e.  return @kind void;
}
procedure `java.lang.Object` `call`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43d758.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L43d75c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43d762.  v0:= temp @kind object;
  #L43d764.  v1:= "The callable returned a null value" @kind object;
  #L43d768.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43d76e.  v0:= temp @kind object;
  #L43d770.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromCallable` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromCallable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43d7a0.  v0:= new `io.reactivex.internal.subscriptions.DeferredScalarSubscription`;
  #L43d7a4.  call `<init>`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43d7aa.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43d7b0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFromCallable.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L43d7b4.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43d7ba.  v1:= temp @kind object;
  #L43d7bc.  v2:= "The callable returned a null value" @kind object;
  #L43d7c0.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43d7c6.  v4:= temp @kind object;
  #L43d7c8.  call `complete`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L43d7ce.  return @kind void;
  #L43d7d0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43d7d2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43d7d8.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L43d7de.  v0:= temp;
  #L43d7e0.  if v0 == 0 then goto L43d7ec;
  #L43d7e4.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43d7ea.  goto L43d7f2;
  #L43d7ec.  call `onError`(v4, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d7f2.  return @kind void;
  catch `java.lang.Throwable` @[L43d7b0..L43d7c8] goto L43d7d0;
}
