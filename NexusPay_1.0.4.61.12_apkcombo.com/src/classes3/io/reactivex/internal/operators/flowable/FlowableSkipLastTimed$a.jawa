record `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.i` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.j` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.k` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object, `int` v7 , `boolean` v8 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44b658.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44b65e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44b662.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44b668.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44b66c.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44b670.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.b` @type ^`long` := v3 @kind wide;
  #L44b674.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L44b678.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` := v6 @kind object;
  #L44b67c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L44b680.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L44b686.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L44b68a.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.f` @type ^`boolean` := v8 @kind boolean;
  #L44b68e.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.a:(ZZLorg/reactivestreams/Subscriber;Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44b5e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L44b5e8.  v1:= 1I;
  #L44b5ea.  if v0 == 0 then goto L44b5fa;
  #L44b5ee.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44b5f2.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44b5f8.  return v1;
  #L44b5fa.  if v3 == 0 then goto L44b644;
  #L44b5fe.  if v6 == 0 then goto L44b61e;
  #L44b602.  if v4 == 0 then goto L44b644;
  #L44b606.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.k` @type ^`java.lang.Throwable` @kind object;
  #L44b60a.  if v3 == 0 then goto L44b616;
  #L44b60e.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b614.  goto L44b61c;
  #L44b616.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44b61c.  return v1;
  #L44b61e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.k` @type ^`java.lang.Throwable` @kind object;
  #L44b622.  if v3 == 0 then goto L44b638;
  #L44b626.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44b62a.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44b630.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b636.  return v1;
  #L44b638.  if v4 == 0 then goto L44b644;
  #L44b63c.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44b642.  return v1;
  #L44b644.  v3:= 0I;
  #L44b646.  return v3;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v23 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L44b6e0.  v0:= v23 @kind object;
  #L44b6e4.  call temp:= `getAndIncrement`(v23) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44b6ea.  v1:= temp;
  #L44b6ec.  if v1 == 0 then goto L44b6f2;
  #L44b6f0.  return @kind void;
  #L44b6f2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44b6f6.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44b6fa.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.f` @type ^`boolean` @kind boolean;
  #L44b6fe.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44b702.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L44b706.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.b` @type ^`long` @kind wide;
  #L44b70a.  v9:= 1I;
  #L44b70c.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44b710.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44b716.  v10:= temp @kind wide;
  #L44b718.  v14:= 0L;
  #L44b71c.  v16:= lcmp(v14, v10);
  #L44b720.  if v16 == 0 then goto L44b79a;
  #L44b724.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.j` @type ^`boolean` @kind boolean;
  #L44b728.  call temp:= `peek`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.peek:()Ljava/lang/Object;` @kind virtual;
  #L44b72e.  v17:= temp @kind object;
  #L44b730.  v17:= (`java.lang.Long`) v17 @kind object;
  #L44b734.  if v17 != 0 then goto L44b73e;
  #L44b738.  v18:= 1I;
  #L44b73c.  goto L44b742;
  #L44b73e.  v18:= 0I;
  #L44b742.  call temp:= `now`(v5, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44b748.  v19:= temp @kind wide;
  #L44b74a.  if v18 != 0 then goto L44b766;
  #L44b74e.  call temp:= `longValue`(v17) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L44b754.  v21:= temp @kind wide;
  #L44b756.  v19:= v19 - v6 @kind long;
  #L44b75a.  v17:= lcmp(v21, v19);
  #L44b75e.  if v17 <= 0 then goto L44b766;
  #L44b762.  v12:= 1I;
  #L44b764.  goto L44b76a;
  #L44b766.  v12:= v18;
  #L44b76a.  call temp:= `a`(v0, v8, v12, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.a:(ZZLorg/reactivestreams/Subscriber;Z)Z` @kind virtual;
  #L44b770.  v8:= temp;
  #L44b772.  if v8 == 0 then goto L44b778;
  #L44b776.  return @kind void;
  #L44b778.  if v12 == 0 then goto L44b77e;
  #L44b77c.  goto L44b79a;
  #L44b77e.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44b784.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44b78a.  v8:= temp @kind object;
  #L44b78c.  call `onNext`(v1, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44b792.  v12:= 1L;
  #L44b796.  v14:= v14 + v12 @kind long;
  #L44b798.  goto L44b71c;
  #L44b79a.  v10:= 0L;
  #L44b79e.  v8:= lcmp(v14, v10);
  #L44b7a2.  if v8 == 0 then goto L44b7b0;
  #L44b7a6.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44b7aa.  call temp:= `produced`(v8, v14) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44b7b0.  v8:= -v9 @kind int;
  #L44b7b2.  call temp:= `addAndGet`(v0, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44b7b8.  v9:= temp;
  #L44b7ba.  if v9 != 0 then goto L44b70c;
  #L44b7be.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b6a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.i` @type ^`boolean` @kind boolean;
  #L44b6a4.  if v0 != 0 then goto L44b6ce;
  #L44b6a8.  v0:= 1I;
  #L44b6aa.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.i` @type ^`boolean` := v0 @kind boolean;
  #L44b6ae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b6b2.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b6b8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44b6be.  v0:= temp;
  #L44b6c0.  if v0 != 0 then goto L44b6ce;
  #L44b6c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44b6c8.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44b6ce.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b7d0.  v0:= 1I;
  #L44b7d2.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.j` @type ^`boolean` := v0 @kind boolean;
  #L44b7d6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.b:()V` @kind virtual;
  #L44b7dc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L44b7f0.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.k` @type ^`java.lang.Throwable` := v1 @kind object;
  #L44b7f4.  v1:= 1I;
  #L44b7f6.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.j` @type ^`boolean` := v1 @kind boolean;
  #L44b7fa.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.b:()V` @kind virtual;
  #L44b800.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44b814.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L44b818.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44b81c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L44b822.  v0:= temp @kind wide;
  #L44b824.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.e` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44b828.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L44b82e.  v0:= temp @kind object;
  #L44b830.  call temp:= `offer`(v2, v0, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44b836.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.b:()V` @kind virtual;
  #L44b83c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b850.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b854.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44b85a.  v0:= temp;
  #L44b85c.  if v0 == 0 then goto L44b87e;
  #L44b860.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44b864.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44b868.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44b86e.  v0:= 9223372036854775807L;
  #L44b878.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44b87e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b890.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44b896.  v0:= temp;
  #L44b898.  if v0 == 0 then goto L44b8ac;
  #L44b89c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipLastTimed$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44b8a0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44b8a6.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipLastTimed$a;.b:()V` @kind virtual;
  #L44b8ac.  return @kind void;
}
