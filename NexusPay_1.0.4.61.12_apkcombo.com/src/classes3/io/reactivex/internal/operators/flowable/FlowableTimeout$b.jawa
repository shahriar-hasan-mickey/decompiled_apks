record `io.reactivex.internal.operators.flowable.FlowableTimeout$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeout$c` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.i` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.m` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$b.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44e134.  v0:= 1I;
  #L44e136.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L44e13c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44e140.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.i` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L44e144.  v2:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L44e148.  call `<init>`(v2) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L44e14e.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v2 @kind object;
  #L44e152.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44e156.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44e15c.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L44e160.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L44e164.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44e168.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44e16e.  v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L44e172.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v3 @kind this, `long` v4 , `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.a:(JLjava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44e3d8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e3dc.  v1:= 9223372036854775807L;
  #L44e3e6.  call temp:= `compareAndSet`(v0, v4, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44e3ec.  v4:= temp;
  #L44e3ee.  if v4 == 0 then goto L44e408;
  #L44e3f2.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e3f6.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44e3fc.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e400.  call `onError`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e406.  goto L44e40e;
  #L44e408.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e40e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44e36c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e370.  v1:= 9223372036854775807L;
  #L44e37a.  call temp:= `compareAndSet`(v0, v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44e380.  v5:= temp;
  #L44e382.  if v5 == 0 then goto L44e3c4;
  #L44e386.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e38a.  call temp:= `cancel`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44e390.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44e394.  v6:= 0I;
  #L44e396.  v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.m` @type ^`org.reactivestreams.Publisher` := v6 @kind object;
  #L44e39a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` @kind wide;
  #L44e39e.  v2:= 0L;
  #L44e3a2.  v6:= lcmp(v0, v2);
  #L44e3a6.  if v6 == 0 then goto L44e3b0;
  #L44e3aa.  call `produced`(v4, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L44e3b0.  v6:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$a`;
  #L44e3b4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e3b8.  call `<init>`(v6, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;)V` @kind direct;
  #L44e3be.  call `subscribe`(v5, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44e3c4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e184.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L44e18a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e18e.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44e194.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v3 @kind this, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.e:(Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L44e420.  if v4 == 0 then goto L44e448;
  #L44e424.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$a`;
  #L44e428.  v1:= 0L;
  #L44e42c.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L44e432.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e436.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44e43c.  v1:= temp;
  #L44e43e.  if v1 == 0 then goto L44e448;
  #L44e442.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44e448.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44e1a8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e1ac.  v1:= 9223372036854775807L;
  #L44e1b6.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44e1bc.  v3:= temp @kind wide;
  #L44e1be.  v0:= lcmp(v3, v1);
  #L44e1c2.  if v0 == 0 then goto L44e1e4;
  #L44e1c6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e1ca.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44e1d0.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e1d4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44e1da.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e1de.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44e1e4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44e1f8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e1fc.  v1:= 9223372036854775807L;
  #L44e206.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44e20c.  v3:= temp @kind wide;
  #L44e20e.  v0:= lcmp(v3, v1);
  #L44e212.  if v0 == 0 then goto L44e236;
  #L44e216.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e21a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44e220.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e224.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e22a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e22e.  call `dispose`(v6) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44e234.  goto L44e23c;
  #L44e236.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e23c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44e250.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e254.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44e25a.  v0:= temp @kind wide;
  #L44e25c.  v2:= 9223372036854775807L;
  #L44e266.  v4:= lcmp(v0, v2);
  #L44e26a.  if v4 == 0 then goto L44e326;
  #L44e26e.  v4:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e272.  v5:= 1L;
  #L44e276.  v7:= v0 + v5 @kind long;
  #L44e27a.  call temp:= `compareAndSet`(v4, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44e280.  v0:= temp;
  #L44e282.  if v0 != 0 then goto L44e288;
  #L44e286.  goto L44e326;
  #L44e288.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e28c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e292.  v0:= temp @kind object;
  #L44e294.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44e298.  if v0 == 0 then goto L44e2a2;
  #L44e29c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44e2a2.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` @kind wide;
  #L44e2a6.  v0:= v0 + v5 @kind long;
  #L44e2a8.  v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.n` @type ^`long` := v0 @kind wide;
  #L44e2ac.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e2b0.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44e2b6.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L44e2ba.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L44e2c0.  v10:= temp @kind object;
  #L44e2c2.  v0:= "The itemTimeoutIndicator returned a null Publisher." @kind object;
  #L44e2c6.  call temp:= `requireNonNull`(v10, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44e2cc.  v10:= temp @kind object;
  #L44e2ce.  v10:= (`org.reactivestreams.Publisher`) v10 @kind object;
  #L44e2d2.  v0:= new `io.reactivex.internal.operators.flowable.FlowableTimeout$a`;
  #L44e2d6.  call `<init>`(v0, v7, v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$c;)V` @kind direct;
  #L44e2dc.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.j` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44e2e0.  call temp:= `replace`(v1, v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44e2e6.  v1:= temp;
  #L44e2e8.  if v1 == 0 then goto L44e2f2;
  #L44e2ec.  call `subscribe`(v10, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44e2f2.  return @kind void;
  #L44e2f4.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44e2f6.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44e2fc.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e300.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e306.  v0:= temp @kind object;
  #L44e308.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44e30c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44e312.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.l` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44e316.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44e31c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44e320.  call `onError`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44e326.  return @kind void;
  catch `java.lang.Throwable` @[L44e2b6..L44e2d2] goto L44e2f4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44e344.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeout$b.k` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44e348.  call temp:= `setOnce`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44e34e.  v0:= temp;
  #L44e350.  if v0 == 0 then goto L44e35a;
  #L44e354.  call `setSubscription`(v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44e35a.  return @kind void;
}
