record `io.reactivex.internal.operators.flowable.FlowableSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44adf8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L44adfe.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` := v2 @kind object;
  #L44ae02.  v0.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L44ae06.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ae18.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L44ae1e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ae22.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ae28.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ae3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L44ae40.  if v0 == 0 then goto L44ae46;
  #L44ae44.  return @kind void;
  #L44ae46.  v0:= 1I;
  #L44ae48.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44ae4c.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L44ae50.  v1:= 0I;
  #L44ae52.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v1 @kind object;
  #L44ae56.  if v0 != 0 then goto L44ae5e;
  #L44ae5a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.a` @type ^`java.lang.Object` @kind object;
  #L44ae5e.  if v0 != 0 then goto L44ae8c;
  #L44ae62.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.b` @type ^`boolean` @kind boolean;
  #L44ae66.  if v0 == 0 then goto L44ae80;
  #L44ae6a.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ae6e.  v1:= new `java.util.NoSuchElementException`;
  #L44ae72.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L44ae78.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ae7e.  goto L44ae92;
  #L44ae80.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ae84.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44ae8a.  goto L44ae92;
  #L44ae8c.  call `complete`(v2, v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L44ae92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44aea4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L44aea8.  if v0 == 0 then goto L44aeb4;
  #L44aeac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44aeb2.  return @kind void;
  #L44aeb4.  v0:= 1I;
  #L44aeb6.  v1.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44aeba.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44aebe.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44aec4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44aed8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` @kind boolean;
  #L44aedc.  if v0 == 0 then goto L44aee2;
  #L44aee0.  return @kind void;
  #L44aee2.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` @kind object;
  #L44aee6.  if v0 == 0 then goto L44af14;
  #L44aeea.  v3:= 1I;
  #L44aeec.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L44aef0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44aef4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44aefa.  v3:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44aefe.  v0:= new `java.lang.IllegalArgumentException`;
  #L44af02.  v1:= "Sequence contains more than one element!" @kind object;
  #L44af06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44af0c.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44af12.  return @kind void;
  #L44af14.  v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.value` @type ^`java.lang.Object` := v3 @kind object;
  #L44af18.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44af2c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44af30.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44af36.  v0:= temp;
  #L44af38.  if v0 == 0 then goto L44af5a;
  #L44af3c.  v2.`io.reactivex.internal.operators.flowable.FlowableSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44af40.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44af44.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44af4a.  v0:= 9223372036854775807L;
  #L44af54.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44af5a.  return @kind void;
}
