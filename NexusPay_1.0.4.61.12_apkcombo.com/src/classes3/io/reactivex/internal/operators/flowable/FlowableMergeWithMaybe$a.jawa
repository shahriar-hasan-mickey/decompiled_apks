record `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a$a` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L442010.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L442016.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44201a.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44201e.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L442024.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L442028.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a$a`;
  #L44202c.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;)V` @kind direct;
  #L442032.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a$a` := v2 @kind object;
  #L442036.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L44203a.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L442040.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L442044.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L442048.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44204e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L442052.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L442058.  v2:= temp;
  #L44205a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int` := v2;
  #L44205e.  v0:= v2 ^> 2;
  #L442062.  v2:= v2 - v0 @kind int;
  #L442064.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int` := v2;
  #L442068.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L4420c0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4420c6.  v0:= temp;
  #L4420c8.  if v0 != 0 then goto L4420d2;
  #L4420cc.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4420d2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4420e4.  v0:= v18 @kind object;
  #L4420e8.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4420ec.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L4420f0.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L4420f4.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L4420f8.  v6:= 1I;
  #L4420fa.  v7:= 1I;
  #L4420fc.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442100.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L442106.  v8:= temp @kind wide;
  #L442108.  v11:= 2I;
  #L44210a.  v12:= 0I;
  #L44210c.  v13:= lcmp(v2, v8);
  #L442110.  if v13 == 0 then goto L4421e6;
  #L442114.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L442118.  if v14 == 0 then goto L442126;
  #L44211c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L442120.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L442124.  return @kind void;
  #L442126.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44212a.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442130.  v14:= temp @kind object;
  #L442132.  if v14 == 0 then goto L442152;
  #L442136.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L44213a.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L44213e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442142.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L442148.  v2:= temp @kind object;
  #L44214a.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442150.  return @kind void;
  #L442152.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L442156.  v15:= 1L;
  #L44215a.  if v14 != v6 then goto L442174;
  #L44215e.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` @kind object;
  #L442162.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L442166.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v11;
  #L44216a.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442170.  v2:= v2 + v15 @kind long;
  #L442172.  goto L442108;
  #L442174.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L442178.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44217c.  if v10 == 0 then goto L44218a;
  #L442180.  call temp:= `poll`(v10) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L442186.  v10:= temp @kind object;
  #L442188.  goto L44218c;
  #L44218a.  v10:= v12 @kind object;
  #L44218c.  if v10 != 0 then goto L442196;
  #L442190.  v17:= 1I;
  #L442194.  goto L44219a;
  #L442196.  v17:= 0I;
  #L44219a.  if v6 == 0 then goto L4421b2;
  #L44219e.  if v17 == 0 then goto L4421b2;
  #L4421a2.  if v14 != v11 then goto L4421b2;
  #L4421a6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4421aa.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4421b0.  return @kind void;
  #L4421b2.  if v17 == 0 then goto L4421b8;
  #L4421b6.  goto L4421e6;
  #L4421b8.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4421be.  v2:= v2 + v15 @kind long;
  #L4421c0.  v4:= v4 + 1;
  #L4421c4.  if v4 != v5 then goto L4421e2;
  #L4421c8.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4421cc.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4421d2.  v4:= temp @kind object;
  #L4421d4.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4421d8.  v10:= (`long`) v5 @kind i2l;
  #L4421da.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4421e0.  v4:= 0I;
  #L4421e2.  v6:= 1I;
  #L4421e4.  goto L442108;
  #L4421e6.  if v13 != 0 then goto L442264;
  #L4421ea.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` @kind boolean;
  #L4421ee.  if v6 == 0 then goto L4421fc;
  #L4421f2.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4421f6.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4421fa.  return @kind void;
  #L4421fc.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442200.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442206.  v6:= temp @kind object;
  #L442208.  if v6 == 0 then goto L442228;
  #L44220c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L442210.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L442214.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442218.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44221e.  v2:= temp @kind object;
  #L442220.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442226.  return @kind void;
  #L442228.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` @kind boolean;
  #L44222c.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L442230.  if v8 == 0 then goto L442246;
  #L442234.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44223a.  v8:= temp;
  #L44223c.  if v8 == 0 then goto L442242;
  #L442240.  goto L442246;
  #L442242.  v10:= 0I;
  #L442244.  goto L442248;
  #L442246.  v10:= 1I;
  #L442248.  if v6 == 0 then goto L442264;
  #L44224c.  if v10 == 0 then goto L442264;
  #L442250.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int`;
  #L442254.  if v6 != v11 then goto L442264;
  #L442258.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L44225c.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L442262.  return @kind void;
  #L442264.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L442268.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v4;
  #L44226c.  v6:= -v7 @kind int;
  #L44226e.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L442274.  v7:= temp;
  #L442276.  if v7 != 0 then goto L44227c;
  #L44227a.  return @kind void;
  #L44227c.  v6:= 1I;
  #L44227e.  goto L4420fc;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L441fe0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L441fe4.  if v0 != 0 then goto L441ffe;
  #L441fe8.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L441fec.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L441ff2.  v1:= temp;
  #L441ff4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L441ffa.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L441ffe.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44207c.  v0:= 1I;
  #L44207e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.j` @type ^`boolean` := v0 @kind boolean;
  #L442082.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442086.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44208c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L442090.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442096.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44209c.  v0:= temp;
  #L44209e.  if v0 != 0 then goto L4420ac;
  #L4420a2.  v0:= 0I;
  #L4420a4.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4420a8.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L4420ac.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L4423f0.  v0:= 2I;
  #L4423f2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v0;
  #L4423f6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4423fc.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L442410.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442414.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44241a.  v0:= temp;
  #L44241c.  if v0 == 0 then goto L442432;
  #L442420.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442424.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44242a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L442430.  goto L442438;
  #L442432.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442438.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L44244c.  v0:= 0I;
  #L44244e.  v1:= 1I;
  #L442450.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L442456.  v0:= temp;
  #L442458.  if v0 == 0 then goto L4424a6;
  #L44245c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L442460.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442464.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44246a.  v4:= temp @kind wide;
  #L44246c.  v0:= lcmp(v4, v2);
  #L442470.  if v0 == 0 then goto L442490;
  #L442474.  v0:= 1L;
  #L442478.  v2:= v2 + v0 @kind long;
  #L44247a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L44247e.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L442482.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442488.  v7:= 2I;
  #L44248a.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v7;
  #L44248e.  goto L4424bc;
  #L442490.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L442494.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L442498.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44249e.  v7:= temp;
  #L4424a0.  if v7 != 0 then goto L4424bc;
  #L4424a4.  return @kind void;
  #L4424a6.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L4424aa.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.l` @type ^`int` := v1;
  #L4424ae.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4424b4.  v7:= temp;
  #L4424b6.  if v7 == 0 then goto L4424bc;
  #L4424ba.  return @kind void;
  #L4424bc.  call `b`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4424c2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442294.  v0:= 1I;
  #L442296.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.k` @type ^`boolean` := v0 @kind boolean;
  #L44229a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4422a0.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4422b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4422b8.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4422be.  v0:= temp;
  #L4422c0.  if v0 == 0 then goto L4422d6;
  #L4422c4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a$a` @kind object;
  #L4422c8.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4422ce.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4422d4.  goto L4422dc;
  #L4422d6.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4422dc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4422f0.  v0:= 0I;
  #L4422f2.  v1:= 1I;
  #L4422f4.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4422fa.  v2:= temp;
  #L4422fc.  if v2 == 0 then goto L442398;
  #L442300.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` @kind wide;
  #L442304.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442308.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44230e.  v4:= temp @kind wide;
  #L442310.  v6:= lcmp(v4, v2);
  #L442314.  if v6 == 0 then goto L44237c;
  #L442318.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44231c.  if v4 == 0 then goto L442336;
  #L442320.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L442326.  v5:= temp;
  #L442328.  if v5 == 0 then goto L44232e;
  #L44232c.  goto L442336;
  #L44232e.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442334.  goto L44238a;
  #L442336.  v4:= 1L;
  #L44233a.  v2:= v2 + v4 @kind long;
  #L44233c.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.m` @type ^`long` := v2 @kind wide;
  #L442340.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L442344.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44234a.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int`;
  #L44234e.  v8:= v8 + v1 @kind int;
  #L442350.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.g` @type ^`int`;
  #L442354.  if v8 != v1 then goto L442376;
  #L442358.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v0;
  #L44235c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442360.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442366.  v0:= temp @kind object;
  #L442368.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44236c.  v1:= (`long`) v8 @kind i2l;
  #L44236e.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442374.  goto L44238a;
  #L442376.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.n` @type ^`int` := v8;
  #L44237a.  goto L44238a;
  #L44237c.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L442382.  v0:= temp @kind object;
  #L442384.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44238a.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L442390.  v8:= temp;
  #L442392.  if v8 != 0 then goto L4423b4;
  #L442396.  return @kind void;
  #L442398.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44239e.  v0:= temp @kind object;
  #L4423a0.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4423a6.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4423ac.  v8:= temp;
  #L4423ae.  if v8 == 0 then goto L4423b4;
  #L4423b2.  return @kind void;
  #L4423b4.  call `b`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.b:()V` @kind virtual;
  #L4423ba.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4423cc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4423d0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.f` @type ^`int`;
  #L4423d4.  v1:= (`long`) v1 @kind i2l;
  #L4423d6.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4423dc.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4424d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithMaybe$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4424d8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4424de.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithMaybe$a;.a:()V` @kind virtual;
  #L4424e4.  return @kind void;
}
