record `io.reactivex.internal.operators.flowable.FlowableDematerialize$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4383bc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4383c2.  v0.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4383c6.  v0.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4383ca.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4383dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4383e0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4383e6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4383f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L4383fc.  if v0 == 0 then goto L438402;
  #L438400.  return @kind void;
  #L438402.  v0:= 1I;
  #L438404.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L438408.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43840c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L438412.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438424.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L438428.  if v0 == 0 then goto L438434;
  #L43842c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438432.  return @kind void;
  #L438434.  v0:= 1I;
  #L438436.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43843a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43843e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L438444.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438458.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.c` @type ^`boolean` @kind boolean;
  #L43845c.  if v0 == 0 then goto L438488;
  #L438460.  v0:= instanceof @variable v2 @type ^`io.reactivex.Notification` @kind boolean;
  #L438464.  if v0 == 0 then goto L438486;
  #L438468.  v2:= (`io.reactivex.Notification`) v2 @kind object;
  #L43846c.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L438472.  v0:= temp;
  #L438474.  if v0 == 0 then goto L438486;
  #L438478.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L43847e.  v2:= temp @kind object;
  #L438480.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438486.  return @kind void;
  #L438488.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43848c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L438492.  v2:= temp @kind object;
  #L438494.  v0:= "The selector returned a null Notification" @kind object;
  #L438498.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43849e.  v2:= temp @kind object;
  #L4384a0.  v2:= (`io.reactivex.Notification`) v2 @kind object;
  #L4384a4.  call temp:= `isOnError`(v2) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L4384aa.  v0:= temp;
  #L4384ac.  if v0 == 0 then goto L4384ca;
  #L4384b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4384b4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4384ba.  call temp:= `getError`(v2) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4384c0.  v2:= temp @kind object;
  #L4384c2.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4384c8.  goto L4384fa;
  #L4384ca.  call temp:= `isOnComplete`(v2) @signature `Lio/reactivex/Notification;.isOnComplete:()Z` @kind virtual;
  #L4384d0.  v0:= temp;
  #L4384d2.  if v0 == 0 then goto L4384e8;
  #L4384d6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4384da.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4384e0.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onComplete:()V` @kind virtual;
  #L4384e6.  goto L4384fa;
  #L4384e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4384ec.  call temp:= `getValue`(v2) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L4384f2.  v2:= temp @kind object;
  #L4384f4.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4384fa.  return @kind void;
  #L4384fc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4384fe.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L438504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438508.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43850e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L438514.  return @kind void;
  catch `java.lang.Throwable` @[L438488..L4384a4] goto L4384fc;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438534.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438538.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43853e.  v0:= temp;
  #L438540.  if v0 == 0 then goto L438552;
  #L438544.  v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L438548.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43854c.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L438552.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDematerialize$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDematerialize$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438564.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDematerialize$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438568.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43856e.  return @kind void;
}
