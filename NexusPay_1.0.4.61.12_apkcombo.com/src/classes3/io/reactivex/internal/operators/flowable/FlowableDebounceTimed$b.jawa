record `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L437b3c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L437b42.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L437b46.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` := v2 @kind wide;
  #L437b4a.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L437b4e.  v0.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L437b52.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v3 @kind this, `long` v4 , `java.lang.Object` v6 @kind object, `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.a:(JLjava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L437b8c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L437b90.  v2:= lcmp(v4, v0);
  #L437b94.  if v2 != 0 then goto L437be6;
  #L437b98.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L437b9e.  v4:= temp @kind wide;
  #L437ba0.  v0:= 0L;
  #L437ba4.  v2:= lcmp(v4, v0);
  #L437ba8.  if v2 == 0 then goto L437bc8;
  #L437bac.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437bb0.  call `onNext`(v4, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L437bb6.  v4:= 1L;
  #L437bba.  call temp:= `produced`(v3, v4) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437bc0.  call `dispose`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.dispose:()V` @kind virtual;
  #L437bc6.  goto L437be6;
  #L437bc8.  call `cancel`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @kind virtual;
  #L437bce.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437bd2.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L437bd6.  v6:= "Could not deliver value due to lack of requests" @kind object;
  #L437bda.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L437be0.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L437be6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437b64.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437b68.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L437b6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437b72.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437b78.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437bf8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L437bfc.  if v0 == 0 then goto L437c02;
  #L437c00.  return @kind void;
  #L437c02.  v0:= 1I;
  #L437c04.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L437c08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437c0c.  if v0 == 0 then goto L437c16;
  #L437c10.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437c16.  v0:= (`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a`) v0 @kind object;
  #L437c1a.  if v0 == 0 then goto L437c24;
  #L437c1e.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.a:()V` @kind virtual;
  #L437c24.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437c28.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L437c2e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437c32.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437c38.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437c4c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L437c50.  if v0 == 0 then goto L437c5c;
  #L437c54.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L437c5a.  return @kind void;
  #L437c5c.  v0:= 1I;
  #L437c5e.  v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` := v0 @kind boolean;
  #L437c62.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437c66.  if v0 == 0 then goto L437c70;
  #L437c6a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437c70.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437c74.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L437c7a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437c7e.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437c84.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L437c98.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.h` @type ^`boolean` @kind boolean;
  #L437c9c.  if v0 == 0 then goto L437ca2;
  #L437ca0.  return @kind void;
  #L437ca2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` @kind wide;
  #L437ca6.  v2:= 1L;
  #L437caa.  v0:= v0 + v2 @kind long;
  #L437cac.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.g` @type ^`long` := v0 @kind wide;
  #L437cb0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L437cb4.  if v2 == 0 then goto L437cbe;
  #L437cb8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L437cbe.  v2:= new `io.reactivex.internal.operators.flowable.FlowableDebounceTimed$a`;
  #L437cc2.  call `<init>`(v2, v5, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.<init>:(Ljava/lang/Object;JLio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;)V` @kind direct;
  #L437cc8.  v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.f` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L437ccc.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L437cd0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.b` @type ^`long` @kind wide;
  #L437cd4.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L437cd8.  call temp:= `schedule`(v5, v2, v0, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L437cde.  v5:= temp @kind object;
  #L437ce0.  call `b`(v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$a;.b:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L437ce6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437cf8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L437cfc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L437d02.  v0:= temp;
  #L437d04.  if v0 == 0 then goto L437d26;
  #L437d08.  v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L437d0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L437d10.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L437d16.  v0:= 9223372036854775807L;
  #L437d20.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L437d26.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableDebounceTimed$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDebounceTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437d38.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L437d3e.  v0:= temp;
  #L437d40.  if v0 == 0 then goto L437d4a;
  #L437d44.  call temp:= `add`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437d4a.  return @kind void;
}
