record `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a$a` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @AccessFlag VOLATILE;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.k` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4425ec.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4425f2.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4425f6.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4425fa.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L442600.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L442604.  v2:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a$a`;
  #L442608.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;)V` @kind direct;
  #L44260e.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a$a` := v2 @kind object;
  #L442612.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L442616.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44261c.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L442620.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L442624.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44262a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L44262e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L442634.  v2:= temp;
  #L442636.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int` := v2;
  #L44263a.  v0:= v2 ^> 2;
  #L44263e.  v2:= v2 - v0 @kind int;
  #L442640.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int` := v2;
  #L442644.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L44269c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4426a2.  v0:= temp;
  #L4426a4.  if v0 != 0 then goto L4426ae;
  #L4426a8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L4426ae.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L4426c0.  v0:= v18 @kind object;
  #L4426c4.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4426c8.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L4426cc.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L4426d0.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L4426d4.  v6:= 1I;
  #L4426d6.  v7:= 1I;
  #L4426d8.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4426dc.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4426e2.  v8:= temp @kind wide;
  #L4426e4.  v11:= 2I;
  #L4426e6.  v12:= 0I;
  #L4426e8.  v13:= lcmp(v2, v8);
  #L4426ec.  if v13 == 0 then goto L4427c2;
  #L4426f0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L4426f4.  if v14 == 0 then goto L442702;
  #L4426f8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4426fc.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L442700.  return @kind void;
  #L442702.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442706.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44270c.  v14:= temp @kind object;
  #L44270e.  if v14 == 0 then goto L44272e;
  #L442712.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L442716.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L44271a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44271e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L442724.  v2:= temp @kind object;
  #L442726.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44272c.  return @kind void;
  #L44272e.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L442732.  v15:= 1L;
  #L442736.  if v14 != v6 then goto L442750;
  #L44273a.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` @kind object;
  #L44273e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L442742.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v11;
  #L442746.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44274c.  v2:= v2 + v15 @kind long;
  #L44274e.  goto L4426e4;
  #L442750.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L442754.  v10:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L442758.  if v10 == 0 then goto L442766;
  #L44275c.  call temp:= `poll`(v10) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L442762.  v10:= temp @kind object;
  #L442764.  goto L442768;
  #L442766.  v10:= v12 @kind object;
  #L442768.  if v10 != 0 then goto L442772;
  #L44276c.  v17:= 1I;
  #L442770.  goto L442776;
  #L442772.  v17:= 0I;
  #L442776.  if v6 == 0 then goto L44278e;
  #L44277a.  if v17 == 0 then goto L44278e;
  #L44277e.  if v14 != v11 then goto L44278e;
  #L442782.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L442786.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44278c.  return @kind void;
  #L44278e.  if v17 == 0 then goto L442794;
  #L442792.  goto L4427c2;
  #L442794.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44279a.  v2:= v2 + v15 @kind long;
  #L44279c.  v4:= v4 + 1;
  #L4427a0.  if v4 != v5 then goto L4427be;
  #L4427a4.  v4:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4427a8.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4427ae.  v4:= temp @kind object;
  #L4427b0.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L4427b4.  v10:= (`long`) v5 @kind i2l;
  #L4427b6.  call `request`(v4, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4427bc.  v4:= 0I;
  #L4427be.  v6:= 1I;
  #L4427c0.  goto L4426e4;
  #L4427c2.  if v13 != 0 then goto L442840;
  #L4427c6.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` @kind boolean;
  #L4427ca.  if v6 == 0 then goto L4427d8;
  #L4427ce.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4427d2.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4427d6.  return @kind void;
  #L4427d8.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4427dc.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4427e2.  v6:= temp @kind object;
  #L4427e4.  if v6 == 0 then goto L442804;
  #L4427e8.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v12 @kind object;
  #L4427ec.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L4427f0.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4427f4.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4427fa.  v2:= temp @kind object;
  #L4427fc.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442802.  return @kind void;
  #L442804.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` @kind boolean;
  #L442808.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44280c.  if v8 == 0 then goto L442822;
  #L442810.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L442816.  v8:= temp;
  #L442818.  if v8 == 0 then goto L44281e;
  #L44281c.  goto L442822;
  #L44281e.  v10:= 0I;
  #L442820.  goto L442824;
  #L442822.  v10:= 1I;
  #L442824.  if v6 == 0 then goto L442840;
  #L442828.  if v10 == 0 then goto L442840;
  #L44282c.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int`;
  #L442830.  if v6 != v11 then goto L442840;
  #L442834.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v12 @kind object;
  #L442838.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44283e.  return @kind void;
  #L442840.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L442844.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v4;
  #L442848.  v6:= -v7 @kind int;
  #L44284a.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L442850.  v7:= temp;
  #L442852.  if v7 != 0 then goto L442858;
  #L442856.  return @kind void;
  #L442858.  v6:= 1I;
  #L44285a.  goto L4426d8;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `c`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4425bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4425c0.  if v0 != 0 then goto L4425da;
  #L4425c4.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L4425c8.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L4425ce.  v1:= temp;
  #L4425d0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4425d6.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L4425da.  return v0 @kind object;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442658.  v0:= 1I;
  #L44265a.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.j` @type ^`boolean` := v0 @kind boolean;
  #L44265e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L442662.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442668.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L44266c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L442672.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L442678.  v0:= temp;
  #L44267a.  if v0 != 0 then goto L442688;
  #L44267e.  v0:= 0I;
  #L442680.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L442684.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v0 @kind object;
  #L442688.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4429cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4429d0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4429d6.  v0:= temp;
  #L4429d8.  if v0 == 0 then goto L4429ee;
  #L4429dc.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4429e0.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4429e6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4429ec.  goto L4429f4;
  #L4429ee.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4429f4.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.e:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L442a08.  v0:= 0I;
  #L442a0a.  v1:= 1I;
  #L442a0c.  call temp:= `compareAndSet`(v6, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L442a12.  v0:= temp;
  #L442a14.  if v0 == 0 then goto L442a62;
  #L442a18.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L442a1c.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442a20.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L442a26.  v4:= temp @kind wide;
  #L442a28.  v0:= lcmp(v4, v2);
  #L442a2c.  if v0 == 0 then goto L442a4c;
  #L442a30.  v0:= 1L;
  #L442a34.  v2:= v2 + v0 @kind long;
  #L442a36.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L442a3a.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L442a3e.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442a44.  v7:= 2I;
  #L442a46.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v7;
  #L442a4a.  goto L442a78;
  #L442a4c.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L442a50.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L442a54.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L442a5a.  v7:= temp;
  #L442a5c.  if v7 != 0 then goto L442a78;
  #L442a60.  return @kind void;
  #L442a62.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.i` @type ^`java.lang.Object` := v7 @kind object;
  #L442a66.  v6.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.l` @type ^`int` := v1;
  #L442a6a.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L442a70.  v7:= temp;
  #L442a72.  if v7 == 0 then goto L442a78;
  #L442a76.  return @kind void;
  #L442a78.  call `b`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L442a7e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442870.  v0:= 1I;
  #L442872.  v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L442876.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L44287c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442890.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L442894.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44289a.  v0:= temp;
  #L44289c.  if v0 == 0 then goto L4428b2;
  #L4428a0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a$a` @kind object;
  #L4428a4.  call temp:= `dispose`(v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4428aa.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L4428b0.  goto L4428b8;
  #L4428b2.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4428b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4428cc.  v0:= 0I;
  #L4428ce.  v1:= 1I;
  #L4428d0.  call temp:= `compareAndSet`(v7, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4428d6.  v2:= temp;
  #L4428d8.  if v2 == 0 then goto L442974;
  #L4428dc.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` @kind wide;
  #L4428e0.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4428e4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4428ea.  v4:= temp @kind wide;
  #L4428ec.  v6:= lcmp(v4, v2);
  #L4428f0.  if v6 == 0 then goto L442958;
  #L4428f4.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.h` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4428f8.  if v4 == 0 then goto L442912;
  #L4428fc.  call temp:= `isEmpty`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L442902.  v5:= temp;
  #L442904.  if v5 == 0 then goto L44290a;
  #L442908.  goto L442912;
  #L44290a.  call temp:= `offer`(v4, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442910.  goto L442966;
  #L442912.  v4:= 1L;
  #L442916.  v2:= v2 + v4 @kind long;
  #L442918.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.m` @type ^`long` := v2 @kind wide;
  #L44291c.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L442920.  call `onNext`(v2, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L442926.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int`;
  #L44292a.  v8:= v8 + v1 @kind int;
  #L44292c.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.g` @type ^`int`;
  #L442930.  if v8 != v1 then goto L442952;
  #L442934.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v0;
  #L442938.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44293c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L442942.  v0:= temp @kind object;
  #L442944.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L442948.  v1:= (`long`) v8 @kind i2l;
  #L44294a.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L442950.  goto L442966;
  #L442952.  v7.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.n` @type ^`int` := v8;
  #L442956.  goto L442966;
  #L442958.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44295e.  v0:= temp @kind object;
  #L442960.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442966.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44296c.  v8:= temp;
  #L44296e.  if v8 != 0 then goto L442990;
  #L442972.  return @kind void;
  #L442974.  call temp:= `c`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.c:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L44297a.  v0:= temp @kind object;
  #L44297c.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442982.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L442988.  v8:= temp;
  #L44298a.  if v8 == 0 then goto L442990;
  #L44298e.  return @kind void;
  #L442990.  call `b`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.b:()V` @kind virtual;
  #L442996.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4429a8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4429ac.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.f` @type ^`int`;
  #L4429b0.  v1:= (`long`) v1 @kind i2l;
  #L4429b2.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L4429b8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L442a90.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithSingle$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442a94.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L442a9a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithSingle$a;.a:()V` @kind virtual;
  #L442aa0.  return @kind void;
}
