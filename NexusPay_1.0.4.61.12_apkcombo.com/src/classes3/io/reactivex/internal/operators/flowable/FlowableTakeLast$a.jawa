record `io.reactivex.internal.operators.flowable.FlowableTakeLast$a` @kind class @AccessFlag FINAL extends `java.util.ArrayDeque` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeLast$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44cb1c.  call `<init>`(v1) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L44cb22.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44cb26.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44cb2c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44cb30.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44cb34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44cb3a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L44cb3e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44cb42.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int` := v3;
  #L44cb46.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44cb7c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44cb80.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44cb86.  v0:= temp;
  #L44cb88.  if v0 != 0 then goto L44cc20;
  #L44cb8c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cb90.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44cb94.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44cb9a.  v1:= temp @kind wide;
  #L44cb9c.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L44cba0.  if v3 == 0 then goto L44cba6;
  #L44cba4.  return @kind void;
  #L44cba6.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` @kind boolean;
  #L44cbaa.  if v3 == 0 then goto L44cc10;
  #L44cbae.  v3:= 0L;
  #L44cbb2.  v5:= v3 @kind wide;
  #L44cbb4.  v7:= lcmp(v5, v1);
  #L44cbb8.  if v7 == 0 then goto L44cbe8;
  #L44cbbc.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` @kind boolean;
  #L44cbc0.  if v7 == 0 then goto L44cbc6;
  #L44cbc4.  return @kind void;
  #L44cbc6.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44cbcc.  v7:= temp @kind object;
  #L44cbce.  if v7 != 0 then goto L44cbda;
  #L44cbd2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44cbd8.  return @kind void;
  #L44cbda.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44cbe0.  v7:= 1L;
  #L44cbe4.  v5:= v5 + v7 @kind long;
  #L44cbe6.  goto L44cbb4;
  #L44cbe8.  v7:= lcmp(v5, v3);
  #L44cbec.  if v7 == 0 then goto L44cc10;
  #L44cbf0.  v3:= 9223372036854775807L;
  #L44cbfa.  v7:= lcmp(v1, v3);
  #L44cbfe.  if v7 == 0 then goto L44cc10;
  #L44cc02.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44cc06.  v2:= -v5 @kind long;
  #L44cc08.  call temp:= `addAndGet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44cc0e.  v1:= temp @kind wide;
  #L44cc10.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.g` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44cc14.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44cc1a.  v3:= temp;
  #L44cc1c.  if v3 != 0 then goto L44cb9c;
  #L44cc20.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cb58.  v0:= 1I;
  #L44cb5a.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.e` @type ^`boolean` := v0 @kind boolean;
  #L44cb5e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cb62.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44cb68.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cc34.  v0:= 1I;
  #L44cc36.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44cc3a.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L44cc40.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cc54.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44cc58.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44cc5e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cc70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.b` @type ^`int`;
  #L44cc74.  call temp:= `size`(v2) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L44cc7a.  v1:= temp;
  #L44cc7c.  if v0 != v1 then goto L44cc86;
  #L44cc80.  call temp:= `poll`(v2) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44cc86.  call temp:= `offer`(v2, v3) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L44cc8c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44cca0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cca4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ccaa.  v0:= temp;
  #L44ccac.  if v0 == 0 then goto L44ccce;
  #L44ccb0.  v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44ccb4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ccb8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44ccbe.  v0:= 9223372036854775807L;
  #L44ccc8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44ccce.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeLast$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44cce0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44cce6.  v0:= temp;
  #L44cce8.  if v0 == 0 then goto L44ccfc;
  #L44ccec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeLast$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44ccf0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44ccf6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeLast$a;.a:()V` @kind virtual;
  #L44ccfc.  return @kind void;
}
