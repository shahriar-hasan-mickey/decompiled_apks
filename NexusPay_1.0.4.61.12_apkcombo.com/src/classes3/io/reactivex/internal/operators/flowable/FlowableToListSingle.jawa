record `io.reactivex.internal.operators.flowable.FlowableToListSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableToListSingle.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableToListSingle.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v1 @kind this, `io.reactivex.Flowable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L44f1a4.  call temp:= `asCallable`() @signature `Lio/reactivex/internal/util/ArrayListSupplier;.asCallable:()Ljava/util/concurrent/Callable;` @kind static;
  #L44f1aa.  v0:= temp @kind object;
  #L44f1ac.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L44f1b2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44f1c4.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44f1ca.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L44f1ce.  v0.`io.reactivex.internal.operators.flowable.FlowableToListSingle.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L44f1d2.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44f178.  v0:= new `io.reactivex.internal.operators.flowable.FlowableToList`;
  #L44f17c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L44f180.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L44f184.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableToList;.<init>:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L44f18a.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44f190.  v0:= temp @kind object;
  #L44f192.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableToListSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L44f1e4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L44f1e8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L44f1ee.  v0:= temp @kind object;
  #L44f1f0.  v1:= "The collectionSupplier returned a null collection. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L44f1f4.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L44f1fa.  v0:= temp @kind object;
  #L44f1fc.  v0:= (`java.util.Collection`) v0 @kind object;
  #L44f200.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableToListSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L44f204.  v2:= new `io.reactivex.internal.operators.flowable.FlowableToListSingle$a`;
  #L44f208.  call `<init>`(v2, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableToListSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/util/Collection;)V` @kind direct;
  #L44f20e.  call `subscribe`(v1, v2) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L44f214.  return @kind void;
  #L44f216.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44f218.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44f21e.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/SingleObserver;)V` @kind static;
  #L44f224.  return @kind void;
  catch `java.lang.Throwable` @[L44f1e4..L44f200] goto L44f216;
}
