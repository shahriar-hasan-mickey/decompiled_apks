record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBufferStrategy$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L4439fc.  call temp:= `values`() @signature `Lio/reactivex/BackpressureOverflowStrategy;.values:()[Lio/reactivex/BackpressureOverflowStrategy;` @kind static;
  #L443a02.  v0:= temp @kind object;
  #L443a04.  v0:= length @variable v0;
  #L443a06.  v0:= new `int`[v0];
  #L443a0a.  `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] := v0 @kind object;
  #L443a0e.  v1:= `@@io.reactivex.BackpressureOverflowStrategy.DROP_LATEST` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L443a12.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L443a18.  v1:= temp;
  #L443a1a.  v2:= 1I;
  #L443a1c.  v0[v1]:= v2;
  #L443a20.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBufferStrategy$a.a` @type ^`int`[] @kind object;
  #L443a24.  v1:= `@@io.reactivex.BackpressureOverflowStrategy.DROP_OLDEST` @type ^`io.reactivex.BackpressureOverflowStrategy` @kind object;
  #L443a28.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L443a2e.  v1:= temp;
  #L443a30.  v2:= 2I;
  #L443a32.  v0[v1]:= v2;
  #L443a36.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L443a0e..L443a20] goto L443a20;
  catch `java.lang.NoSuchFieldError` @[L443a20..L443a36] goto L443a36;
}
