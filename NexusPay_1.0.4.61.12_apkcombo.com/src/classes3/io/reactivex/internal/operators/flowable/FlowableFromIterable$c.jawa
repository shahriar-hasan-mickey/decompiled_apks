record `io.reactivex.internal.operators.flowable.FlowableFromIterable$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43dbc8.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L43dbce.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43dbd2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43dbe4.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43dbe8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43dbec.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dbf0.  if v2 == 0 then goto L43dbf6;
  #L43dbf4.  return @kind void;
  #L43dbf6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43dbfc.  v2:= temp @kind object;
  #L43dbfe.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dc02.  if v3 == 0 then goto L43dc08;
  #L43dc06.  return @kind void;
  #L43dc08.  if v2 != 0 then goto L43dc22;
  #L43dc0c.  v0:= new `java.lang.NullPointerException`;
  #L43dc10.  v2:= "Iterator.next() returned a null value" @kind object;
  #L43dc14.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43dc1a.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dc20.  return @kind void;
  #L43dc22.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43dc28.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dc2c.  if v2 == 0 then goto L43dc32;
  #L43dc30.  return @kind void;
  #L43dc32.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43dc38.  v2:= temp;
  #L43dc3a.  if v2 != 0 then goto L43dbec;
  #L43dc3e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dc42.  if v0 != 0 then goto L43dc4c;
  #L43dc46.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43dc4c.  return @kind void;
  #L43dc4e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43dc50.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43dc56.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dc5c.  return @kind void;
  #L43dc5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43dc60.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43dc66.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dc6c.  return @kind void;
  catch `java.lang.Throwable` @[L43dbf6..L43dbfe] goto L43dc5e;
  catch `java.lang.Throwable` @[L43dc32..L43dc3a] goto L43dc4e;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$c` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43dc98.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43dc9c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43dca0.  v2:= 0L;
  #L43dca4.  v4:= v2 @kind wide;
  #L43dca6.  v6:= lcmp(v4, v9);
  #L43dcaa.  if v6 == 0 then goto L43dd38;
  #L43dcae.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dcb2.  if v6 == 0 then goto L43dcb8;
  #L43dcb6.  return @kind void;
  #L43dcb8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43dcbe.  v6:= temp @kind object;
  #L43dcc0.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dcc4.  if v7 == 0 then goto L43dcca;
  #L43dcc8.  return @kind void;
  #L43dcca.  if v6 != 0 then goto L43dce4;
  #L43dcce.  v9:= new `java.lang.NullPointerException`;
  #L43dcd2.  v10:= "Iterator.next() returned a null value" @kind object;
  #L43dcd6.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43dcdc.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dce2.  return @kind void;
  #L43dce4.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43dcea.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dcee.  if v6 == 0 then goto L43dcf4;
  #L43dcf2.  return @kind void;
  #L43dcf4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43dcfa.  v6:= temp;
  #L43dcfc.  if v6 != 0 then goto L43dd10;
  #L43dd00.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43dd04.  if v9 != 0 then goto L43dd0e;
  #L43dd08.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43dd0e.  return @kind void;
  #L43dd10.  v6:= 1L;
  #L43dd14.  v4:= v4 + v6 @kind long;
  #L43dd16.  goto L43dca6;
  #L43dd18.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43dd1a.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43dd20.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dd26.  return @kind void;
  #L43dd28.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43dd2a.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43dd30.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43dd36.  return @kind void;
  #L43dd38.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43dd3e.  v9:= temp @kind wide;
  #L43dd40.  v6:= lcmp(v4, v9);
  #L43dd44.  if v6 != 0 then goto L43dca6;
  #L43dd48.  v9:= -v4 @kind long;
  #L43dd4a.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43dd50.  v9:= temp @kind wide;
  #L43dd52.  v4:= lcmp(v9, v2);
  #L43dd56.  if v4 != 0 then goto L43dca4;
  #L43dd5a.  return @kind void;
  catch `java.lang.Throwable` @[L43dcb8..L43dcc0] goto L43dd28;
  catch `java.lang.Throwable` @[L43dcf4..L43dcfc] goto L43dd18;
}
