record `io.reactivex.internal.operators.flowable.FlowableFromIterable$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `java.util.Iterator` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43da04.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @kind direct;
  #L43da0a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L43da0e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43da20.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43da24.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43da28.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43da2c.  if v2 == 0 then goto L43da32;
  #L43da30.  return @kind void;
  #L43da32.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43da38.  v2:= temp @kind object;
  #L43da3a.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43da3e.  if v3 == 0 then goto L43da44;
  #L43da42.  return @kind void;
  #L43da44.  if v2 != 0 then goto L43da5e;
  #L43da48.  v0:= new `java.lang.NullPointerException`;
  #L43da4c.  v2:= "Iterator.next() returned a null value" @kind object;
  #L43da50.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43da56.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43da5c.  return @kind void;
  #L43da5e.  call temp:= `tryOnNext`(v1, v2) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43da64.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43da68.  if v2 == 0 then goto L43da6e;
  #L43da6c.  return @kind void;
  #L43da6e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43da74.  v2:= temp;
  #L43da76.  if v2 != 0 then goto L43da28;
  #L43da7a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43da7e.  if v0 != 0 then goto L43da88;
  #L43da82.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43da88.  return @kind void;
  #L43da8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43da8c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43da92.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43da98.  return @kind void;
  #L43da9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43da9c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43daa2.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43daa8.  return @kind void;
  catch `java.lang.Throwable` @[L43da32..L43da3a] goto L43da9a;
  catch `java.lang.Throwable` @[L43da6e..L43da76] goto L43da8a;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$b` v8 @kind this, `long` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.e:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43dad4.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43dad8.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43dadc.  v2:= 0L;
  #L43dae0.  v4:= v2 @kind wide;
  #L43dae2.  v6:= lcmp(v4, v9);
  #L43dae6.  if v6 == 0 then goto L43db7a;
  #L43daea.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43daee.  if v6 == 0 then goto L43daf4;
  #L43daf2.  return @kind void;
  #L43daf4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43dafa.  v6:= temp @kind object;
  #L43dafc.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43db00.  if v7 == 0 then goto L43db06;
  #L43db04.  return @kind void;
  #L43db06.  if v6 != 0 then goto L43db20;
  #L43db0a.  v9:= new `java.lang.NullPointerException`;
  #L43db0e.  v10:= "Iterator.next() returned a null value" @kind object;
  #L43db12.  call `<init>`(v9, v10) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43db18.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43db1e.  return @kind void;
  #L43db20.  call temp:= `tryOnNext`(v1, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L43db26.  v6:= temp;
  #L43db28.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43db2c.  if v7 == 0 then goto L43db32;
  #L43db30.  return @kind void;
  #L43db32.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43db38.  v7:= temp;
  #L43db3a.  if v7 != 0 then goto L43db4e;
  #L43db3e.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` @kind boolean;
  #L43db42.  if v9 != 0 then goto L43db4c;
  #L43db46.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43db4c.  return @kind void;
  #L43db4e.  if v6 == 0 then goto L43dae2;
  #L43db52.  v6:= 1L;
  #L43db56.  v4:= v4 + v6 @kind long;
  #L43db58.  goto L43dae2;
  #L43db5a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43db5c.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43db62.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43db68.  return @kind void;
  #L43db6a.  v9:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43db6c.  call `throwIfFatal`(v9) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43db72.  call `onError`(v1, v9) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43db78.  return @kind void;
  #L43db7a.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43db80.  v9:= temp @kind wide;
  #L43db82.  v6:= lcmp(v4, v9);
  #L43db86.  if v6 != 0 then goto L43dae2;
  #L43db8a.  v9:= -v4 @kind long;
  #L43db8c.  call temp:= `addAndGet`(v8, v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43db92.  v9:= temp @kind wide;
  #L43db94.  v4:= lcmp(v9, v2);
  #L43db98.  if v4 != 0 then goto L43dae0;
  #L43db9c.  return @kind void;
  catch `java.lang.Throwable` @[L43daf4..L43dafc] goto L43db6a;
  catch `java.lang.Throwable` @[L43db32..L43db3a] goto L43db5a;
}
