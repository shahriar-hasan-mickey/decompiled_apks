record `io.reactivex.internal.operators.flowable.FlowableJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$b` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @AccessFlag FINAL;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @AccessFlag VOLATILE;
}
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @AccessFlag STATIC_FINAL;
global `java.lang.Integer` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4409d8.  v0:= 1I;
  #L4409da.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4409e0.  v0:= temp @kind object;
  #L4409e2.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` := v0 @kind object;
  #L4409e6.  v0:= 2I;
  #L4409e8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4409ee.  v0:= temp @kind object;
  #L4409f0.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` := v0 @kind object;
  #L4409f4.  v0:= 3I;
  #L4409f6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L4409fc.  v0:= temp @kind object;
  #L4409fe.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` := v0 @kind object;
  #L440a02.  v0:= 4I;
  #L440a04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440a0a.  v0:= temp @kind object;
  #L440a0c.  `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` := v0 @kind object;
  #L440a10.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L440a24.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L440a2a.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L440a2e.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L440a32.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L440a38.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L440a3c.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L440a40.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L440a46.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L440a4a.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L440a4e.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L440a54.  v0:= temp;
  #L440a56.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L440a5c.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L440a60.  v2:= new `java.util.LinkedHashMap`;
  #L440a64.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L440a6a.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` := v2 @kind object;
  #L440a6e.  v2:= new `java.util.LinkedHashMap`;
  #L440a72.  call `<init>`(v2) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L440a78.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` := v2 @kind object;
  #L440a7c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L440a80.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L440a86.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L440a8a.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L440a8e.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L440a92.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L440a96.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L440a9a.  v3:= 2I;
  #L440a9c.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L440aa2.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L440aa6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441018.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44101c.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L441022.  v0:= temp;
  #L441024.  if v0 == 0 then goto L44103a;
  #L441028.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44102c.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L441032.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L441038.  goto L441040;
  #L44103a.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L441040.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.b:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441054.  @monitorenter v1
  #L441056.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44105a.  if v2 == 0 then goto L441064;
  #L44105e.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L441062.  goto L441068;
  #L441064.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L441068.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44106e.  @monitorexit v1
  #L441070.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L441076.  return @kind void;
  #L441078.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44107a.  @monitorexit v1
  #L44107c.  throw v2;
  catch `java.lang.Throwable` @[L441056..L441070] goto L441078;
  catch `java.lang.Throwable` @[L44107a..L44107c] goto L441078;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.c:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440fbc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440fc0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L440fc6.  v0:= temp;
  #L440fc8.  if v0 == 0 then goto L440fd4;
  #L440fcc.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L440fd2.  goto L440fda;
  #L440fd4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L440fda.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440ab8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L440abc.  if v0 == 0 then goto L440ac2;
  #L440ac0.  return @kind void;
  #L440ac2.  v0:= 1I;
  #L440ac4.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` := v0 @kind boolean;
  #L440ac8.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440ace.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L440ad4.  v0:= temp;
  #L440ad6.  if v0 != 0 then goto L440ae4;
  #L440ada.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L440ade.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440ae4.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `boolean` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.d:(ZLio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440f6c.  @monitorenter v1
  #L440f6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L440f72.  if v2 == 0 then goto L440f7c;
  #L440f76.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L440f7a.  goto L440f80;
  #L440f7c.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L440f80.  call temp:= `offer`(v0, v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L440f86.  @monitorexit v1
  #L440f88.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L440f8e.  return @kind void;
  #L440f90.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440f92.  @monitorexit v1
  #L440f94.  throw v2;
  catch `java.lang.Throwable` @[L440f6e..L440f88] goto L440f90;
  catch `java.lang.Throwable` @[L440f92..L440f94] goto L440f90;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableGroupJoin$d` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$d;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L440fec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440ff0.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L440ff6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L440ffa.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L441000.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @kind virtual;
  #L441006.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @AccessFlag  {
    temp;
    v0;

  #L440af8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440afc.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L440b02.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L440b14.  v1:= v17 @kind object;
  #L440b18.  call temp:= `getAndIncrement`(v17) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L440b1e.  v0:= temp;
  #L440b20.  if v0 == 0 then goto L440b26;
  #L440b24.  return @kind void;
  #L440b26.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.c` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L440b2a.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L440b2e.  v0:= 1I;
  #L440b30.  v4:= 1I;
  #L440b32.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.n` @type ^`boolean` @kind boolean;
  #L440b36.  if v5 == 0 then goto L440b42;
  #L440b3a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440b40.  return @kind void;
  #L440b42.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440b46.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440b4c.  v5:= temp @kind object;
  #L440b4e.  v5:= (`java.lang.Throwable`) v5 @kind object;
  #L440b52.  if v5 == 0 then goto L440b6a;
  #L440b56.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440b5c.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440b62.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440b68.  return @kind void;
  #L440b6a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L440b6e.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L440b74.  v5:= temp;
  #L440b76.  v6:= 0I;
  #L440b78.  if v5 != 0 then goto L440b80;
  #L440b7c.  v5:= 1I;
  #L440b7e.  goto L440b82;
  #L440b80.  v5:= 0I;
  #L440b82.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L440b88.  v7:= temp @kind object;
  #L440b8a.  v7:= (`java.lang.Integer`) v7 @kind object;
  #L440b8e.  if v7 != 0 then goto L440b96;
  #L440b92.  v8:= 1I;
  #L440b94.  goto L440b98;
  #L440b96.  v8:= 0I;
  #L440b98.  if v5 == 0 then goto L440bc6;
  #L440b9c.  if v8 == 0 then goto L440bc6;
  #L440ba0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L440ba4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L440baa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L440bae.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L440bb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440bb8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L440bbe.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L440bc4.  return @kind void;
  #L440bc6.  if v8 == 0 then goto L440bda;
  #L440bca.  v4:= -v4 @kind int;
  #L440bcc.  call temp:= `addAndGet`(v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L440bd2.  v4:= temp;
  #L440bd4.  if v4 != 0 then goto L440b32;
  #L440bd8.  return @kind void;
  #L440bda.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L440be0.  v5:= temp @kind object;
  #L440be2.  v8:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.o` @type ^`java.lang.Integer` @kind object;
  #L440be6.  v9:= 1L;
  #L440bea.  v11:= "Could not emit value due to lack of requests" @kind object;
  #L440bee.  v12:= "The resultSelector returned a null value" @kind object;
  #L440bf2.  if v7 != v8 then goto L440d28;
  #L440bf6.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @type ^`int`;
  #L440bfa.  v7:= v6 + 1;
  #L440bfe.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.l` @type ^`int` := v7;
  #L440c02.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L440c06.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440c0c.  v8:= temp @kind object;
  #L440c0e.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440c14.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L440c18.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440c1e.  v7:= temp @kind object;
  #L440c20.  v8:= "The leftEnd returned a null Publisher" @kind object;
  #L440c24.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L440c2a.  v7:= temp @kind object;
  #L440c2c.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L440c30.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L440c34.  call `<init>`(v8, v1, v0, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L440c3a.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440c3e.  call temp:= `add`(v6, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L440c44.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L440c4a.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440c4e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440c54.  v6:= temp @kind object;
  #L440c56.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L440c5a.  if v6 == 0 then goto L440c72;
  #L440c5e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440c64.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440c6a.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440c70.  return @kind void;
  #L440c72.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L440c76.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L440c7c.  v6:= temp @kind wide;
  #L440c7e.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L440c82.  call temp:= `values`(v8) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L440c88.  v8:= temp @kind object;
  #L440c8a.  call temp:= `iterator`(v8) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L440c90.  v8:= temp @kind object;
  #L440c92.  v13:= 0L;
  #L440c96.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L440c9c.  v16:= temp;
  #L440c9e.  if v16 == 0 then goto L440d04;
  #L440ca2.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L440ca8.  v0:= temp @kind object;
  #L440caa.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L440cae.  call temp:= `apply`(v15, v5, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440cb4.  v0:= temp @kind object;
  #L440cb6.  call temp:= `requireNonNull`(v0, v12) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L440cbc.  v0:= temp @kind object;
  #L440cbe.  v15:= lcmp(v13, v6);
  #L440cc2.  if v15 == 0 then goto L440cd2;
  #L440cc6.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L440ccc.  v13:= v13 + v9 @kind long;
  #L440cce.  v0:= 1I;
  #L440cd0.  goto L440c96;
  #L440cd2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440cd6.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L440cda.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440ce0.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L440ce6.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440cec.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440cf2.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440cf8.  return @kind void;
  #L440cfa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440cfc.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L440d02.  return @kind void;
  #L440d04.  v5:= 0L;
  #L440d08.  v0:= lcmp(v13, v5);
  #L440d0c.  if v0 == 0 then goto L440eb8;
  #L440d10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L440d14.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L440d1a.  goto L440eb8;
  #L440d1e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440d20.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L440d26.  return @kind void;
  #L440d28.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.p` @type ^`java.lang.Integer` @kind object;
  #L440d2c.  if v7 != v0 then goto L440e5e;
  #L440d30.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @type ^`int`;
  #L440d34.  v7:= v0 + 1;
  #L440d38.  v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.m` @type ^`int` := v7;
  #L440d3c.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L440d40.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440d46.  v8:= temp @kind object;
  #L440d48.  call temp:= `put`(v7, v8, v5) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440d4e.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.i` @type ^`io.reactivex.functions.Function` @kind object;
  #L440d52.  call temp:= `apply`(v7, v5) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440d58.  v7:= temp @kind object;
  #L440d5a.  v8:= "The rightEnd returned a null Publisher" @kind object;
  #L440d5e.  call temp:= `requireNonNull`(v7, v8) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L440d64.  v7:= temp @kind object;
  #L440d66.  v7:= (`org.reactivestreams.Publisher`) v7 @kind object;
  #L440d6a.  v8:= new `io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`;
  #L440d6e.  call `<init>`(v8, v1, v6, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableGroupJoin$b;ZI)V` @kind direct;
  #L440d74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440d78.  call temp:= `add`(v0, v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L440d7e.  call `subscribe`(v7, v8) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L440d84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440d88.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L440d8e.  v0:= temp @kind object;
  #L440d90.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L440d94.  if v0 == 0 then goto L440dac;
  #L440d98.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440d9e.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440da4.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440daa.  return @kind void;
  #L440dac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L440db0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L440db6.  v6:= temp @kind wide;
  #L440db8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L440dbc.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L440dc2.  v0:= temp @kind object;
  #L440dc4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L440dca.  v0:= temp @kind object;
  #L440dcc.  v13:= 0L;
  #L440dd0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L440dd6.  v8:= temp;
  #L440dd8.  if v8 == 0 then goto L440e3c;
  #L440ddc.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L440de2.  v8:= temp @kind object;
  #L440de4.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.j` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L440de8.  call temp:= `apply`(v15, v8, v5) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440dee.  v8:= temp @kind object;
  #L440df0.  call temp:= `requireNonNull`(v8, v12) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L440df6.  v8:= temp @kind object;
  #L440df8.  v15:= lcmp(v13, v6);
  #L440dfc.  if v15 == 0 then goto L440e0a;
  #L440e00.  call `onNext`(v3, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L440e06.  v13:= v13 + v9 @kind long;
  #L440e08.  goto L440dd0;
  #L440e0a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440e0e.  v4:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L440e12.  call `<init>`(v4, v11) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L440e18.  call temp:= `addThrowable`(v0, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L440e1e.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L440e24.  call `f`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440e2a.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440e30.  return @kind void;
  #L440e32.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440e34.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L440e3a.  return @kind void;
  #L440e3c.  v5:= 0L;
  #L440e40.  v0:= lcmp(v13, v5);
  #L440e44.  if v0 == 0 then goto L440eb8;
  #L440e48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L440e4c.  call temp:= `produced`(v0, v13) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L440e52.  goto L440eb8;
  #L440e54.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L440e56.  call `i`(v1, v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @kind virtual;
  #L440e5c.  return @kind void;
  #L440e5e.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.q` @type ^`java.lang.Integer` @kind object;
  #L440e62.  if v7 != v0 then goto L440e8c;
  #L440e66.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L440e6a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L440e6e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L440e72.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440e78.  v6:= temp @kind object;
  #L440e7a.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440e80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440e84.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L440e8a.  goto L440eb8;
  #L440e8c.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableJoin$a.r` @type ^`java.lang.Integer` @kind object;
  #L440e90.  if v7 != v0 then goto L440eb8;
  #L440e94.  v5:= (`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c`) v5 @kind object;
  #L440e98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L440e9c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupJoin$c.c` @type ^`int`;
  #L440ea0.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L440ea6.  v6:= temp @kind object;
  #L440ea8.  call temp:= `remove`(v0, v6) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L440eae.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.d` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L440eb2.  call temp:= `remove`(v0, v5) @signature `Lio/reactivex/disposables/CompositeDisposable;.remove:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L440eb8.  v0:= 1I;
  #L440eba.  goto L440b32;
  catch `java.lang.Throwable` @[L440c14..L440c30] goto L440d1e;
  catch `java.lang.Throwable` @[L440caa..L440cbe] goto L440cfa;
  catch `java.lang.Throwable` @[L440d4e..L440d6a] goto L440e54;
  catch `java.lang.Throwable` @[L440de4..L440df8] goto L440e32;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L440f00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440f04.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L440f0a.  v0:= temp @kind object;
  #L440f0c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.e` @type ^`java.util.Map` @kind object;
  #L440f10.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L440f16.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableJoin$a.f` @type ^`java.util.Map` @kind object;
  #L440f1a.  call `clear`(v1) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L440f20.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L440f26.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object, `org.reactivestreams.Subscriber` v3 @kind object, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.i:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimpleQueue;)V` @AccessFlag  {
    temp;
    v0;

  #L440f38.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L440f3e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L440f42.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L440f48.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L440f4e.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.f:()V` @kind virtual;
  #L440f54.  call `h`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.h:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L440f5a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableJoin$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableJoin$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4410a4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4410aa.  v0:= temp;
  #L4410ac.  if v0 == 0 then goto L4410ba;
  #L4410b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableJoin$a.b` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4410b4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4410ba.  return @kind void;
}
