record `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44bc08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44bc0e.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44bc12.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L44bc16.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bc28.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bc2c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44bc32.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bc44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bc48.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44bc4e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bc60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bc64.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44bc6a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bc7c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` @kind boolean;
  #L44bc80.  if v0 == 0 then goto L44bc90;
  #L44bc84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bc88.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44bc8e.  goto L44bcc0;
  #L44bc90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L44bc94.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44bc9a.  v0:= temp;
  #L44bc9c.  if v0 == 0 then goto L44bcb0;
  #L44bca0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bca4.  v0:= 1L;
  #L44bca8.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bcae.  goto L44bcc0;
  #L44bcb0.  v0:= 1I;
  #L44bcb2.  v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44bcb6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bcba.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44bcc0.  return @kind void;
  #L44bcc2.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44bcc4.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44bcca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bcce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44bcd4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bcd8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44bcde.  return @kind void;
  catch `java.lang.Throwable` @[L44bc90..L44bc9c] goto L44bcc2;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bcfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bd00.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44bd06.  v0:= temp;
  #L44bd08.  if v0 == 0 then goto L44bd1a;
  #L44bd0c.  v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44bd10.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bd14.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44bd1a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bd2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44bd30.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bd36.  return @kind void;
}
