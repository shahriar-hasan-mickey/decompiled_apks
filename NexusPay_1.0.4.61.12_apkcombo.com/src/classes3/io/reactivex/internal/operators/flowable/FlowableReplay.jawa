record `io.reactivex.internal.operators.flowable.FlowableReplay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableReplay.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableReplay.c` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableReplay.d` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableReplay.e` @AccessFlag FINAL;
}
global `java.util.concurrent.Callable` `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L448e60.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$c`;
  #L448e64.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$c;.<init>:()V` @kind direct;
  #L448e6a.  `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @type ^`java.util.concurrent.Callable` := v0 @kind object;
  #L448e6e.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `io.reactivex.Flowable` v2 @kind object, `java.util.concurrent.atomic.AtomicReference` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L448e80.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L448e86.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L448e8a.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` := v2 @kind object;
  #L448e8e.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L448e92.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay.d` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L448e96.  return @kind void;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L448d34.  v0:= 2147483647I;
  #L448d3a.  if v2 != v0 then goto L448d48;
  #L448d3e.  call temp:= `createFrom`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448d44.  v1:= temp @kind object;
  #L448d46.  return v1 @kind object;
  #L448d48.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$h`;
  #L448d4c.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$h;.<init>:(I)V` @kind direct;
  #L448d52.  call temp:= `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.f:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448d58.  v1:= temp @kind object;
  #L448d5a.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L448da4.  v5:= 2147483647I;
  #L448daa.  v0:= v6 @kind object;
  #L448dac.  v1:= v7 @kind wide;
  #L448dae.  v3:= v9 @kind object;
  #L448db0.  v4:= v10 @kind object;
  #L448db2.  call temp:= `create`(v0, v1, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448db8.  v6:= temp @kind object;
  #L448dba.  return v6 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `create`(`io.reactivex.Flowable` v7 @kind object, `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.create:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L448dcc.  v6:= new `io.reactivex.internal.operators.flowable.FlowableReplay$k`;
  #L448dd0.  v0:= v6 @kind object;
  #L448dd2.  v1:= v12;
  #L448dd4.  v2:= v8 @kind wide;
  #L448dd6.  v4:= v10 @kind object;
  #L448dd8.  v5:= v11 @kind object;
  #L448dda.  call `<init>`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$k;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L448de0.  call temp:= `f`(v7, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.f:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448de6.  v7:= temp @kind object;
  #L448de8.  return v7 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `createFrom`(`io.reactivex.Flowable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.createFrom:(Lio/reactivex/Flowable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L448dfc.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableReplay.f` @type ^`java.util.concurrent.Callable` @kind object;
  #L448e00.  call temp:= `f`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.f:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448e06.  v1:= temp @kind object;
  #L448e08.  return v1 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `f`(`io.reactivex.Flowable` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.f:(Lio/reactivex/Flowable;Ljava/util/concurrent/Callable;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L448d6c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L448d70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L448d76.  v1:= new `io.reactivex.internal.operators.flowable.FlowableReplay$i`;
  #L448d7a.  call `<init>`(v1, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$i;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L448d80.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay`;
  #L448d84.  call `<init>`(v2, v1, v3, v0, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.<init>:(Lorg/reactivestreams/Publisher;Lio/reactivex/Flowable;Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L448d8a.  call temp:= `onAssembly`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448d90.  v3:= temp @kind object;
  #L448d92.  return v3 @kind object;
}
procedure `io.reactivex.Flowable` `multicastSelector`(`java.util.concurrent.Callable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.multicastSelector:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)Lio/reactivex/Flowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L448d18.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$e`;
  #L448d1c.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$e;.<init>:(Ljava/util/concurrent/Callable;Lio/reactivex/functions/Function;)V` @kind direct;
  #L448d22.  return v0 @kind object;
}
procedure `io.reactivex.flowables.ConnectableFlowable` `observeOn`(`io.reactivex.flowables.ConnectableFlowable` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.observeOn:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Scheduler;)Lio/reactivex/flowables/ConnectableFlowable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L448e1c.  call temp:= `observeOn`(v1, v2) @signature `Lio/reactivex/Flowable;.observeOn:(Lio/reactivex/Scheduler;)Lio/reactivex/Flowable;` @kind virtual;
  #L448e22.  v2:= temp @kind object;
  #L448e24.  v0:= new `io.reactivex.internal.operators.flowable.FlowableReplay$b`;
  #L448e28.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$b;.<init>:(Lio/reactivex/flowables/ConnectableFlowable;Lio/reactivex/Flowable;)V` @kind direct;
  #L448e2e.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/flowables/ConnectableFlowable;)Lio/reactivex/flowables/ConnectableFlowable;` @kind static;
  #L448e34.  v1:= temp @kind object;
  #L448e36.  return v1 @kind object;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowableReplay` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L448ea8.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448eac.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L448eb2.  v0:= temp @kind object;
  #L448eb4.  v0:= (`io.reactivex.internal.operators.flowable.FlowableReplay$j`) v0 @kind object;
  #L448eb8.  if v0 == 0 then goto L448ec8;
  #L448ebc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.isDisposed:()Z` @kind virtual;
  #L448ec2.  v1:= temp;
  #L448ec4.  if v1 == 0 then goto L448ef6;
  #L448ec8.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.d` @type ^`java.util.concurrent.Callable` @kind object;
  #L448ecc.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L448ed2.  v1:= temp @kind object;
  #L448ed4.  v1:= (`io.reactivex.internal.operators.flowable.FlowableReplay$g`) v1 @kind object;
  #L448ed8.  v2:= new `io.reactivex.internal.operators.flowable.FlowableReplay$j`;
  #L448edc.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$g;)V` @kind direct;
  #L448ee2.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448ee6.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L448eec.  v0:= temp;
  #L448eee.  if v0 != 0 then goto L448ef4;
  #L448ef2.  goto L448ea8;
  #L448ef4.  v0:= v2 @kind object;
  #L448ef6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L448efa.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L448f00.  v1:= temp;
  #L448f02.  v2:= 1I;
  #L448f04.  v3:= 0I;
  #L448f06.  if v1 != 0 then goto L448f1e;
  #L448f0a.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L448f0e.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L448f14.  v1:= temp;
  #L448f16.  if v1 == 0 then goto L448f1e;
  #L448f1a.  v1:= 1I;
  #L448f1c.  goto L448f20;
  #L448f1e.  v1:= 0I;
  #L448f20.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L448f26.  if v1 == 0 then goto L448f34;
  #L448f2a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` @kind object;
  #L448f2e.  call `subscribe`(v5, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L448f34.  return @kind void;
  #L448f36.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448f38.  if v1 == 0 then goto L448f46;
  #L448f3c.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableReplay$j.d` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L448f40.  call temp:= `compareAndSet`(v0, v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L448f46.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L448f4c.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L448f52.  v5:= temp @kind object;
  #L448f54.  throw v5;
  #L448f56.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L448f58.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L448f5e.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L448f64.  v5:= temp @kind object;
  #L448f66.  throw v5;
  catch `java.lang.Throwable` @[L448ec8..L448ed8] goto L448f56;
  catch `java.lang.Throwable` @[L448f20..L448f26] goto L448f36;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.flowable.FlowableReplay` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L448f90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L448f94.  v3:= (`io.reactivex.internal.operators.flowable.FlowableReplay$j`) v3 @kind object;
  #L448f98.  v1:= 0I;
  #L448f9a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L448fa0.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448e48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.b` @type ^`io.reactivex.Flowable` @kind object;
  #L448e4c.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableReplay` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L448fb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay.e` @type ^`org.reactivestreams.Publisher` @kind object;
  #L448fb8.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L448fbe.  return @kind void;
}
