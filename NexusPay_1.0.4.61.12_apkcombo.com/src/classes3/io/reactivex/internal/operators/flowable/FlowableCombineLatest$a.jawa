record `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IIZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L434788.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43478e.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L434792.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L434796.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[v4];
  #L43479a.  v3:= 0I;
  #L43479c.  if v3 >= v4 then goto L4347b4;
  #L4347a0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`;
  #L4347a4.  call `<init>`(v0, v1, v3, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;II)V` @kind direct;
  #L4347aa.  v2[v3]:= v0 @kind object;
  #L4347ae.  v3:= v3 + 1;
  #L4347b2.  goto L43479c;
  #L4347b4.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] := v2 @kind object;
  #L4347b8.  v2:= new `java.lang.Object`[v4];
  #L4347bc.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4347c0.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L4347c4.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L4347ca.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L4347ce.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4347d2.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4347d8.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L4347dc.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4347e0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4347e6.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4347ea.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` := v6 @kind boolean;
  #L4347ee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434800.  v0:= 1I;
  #L434802.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` := v0 @kind boolean;
  #L434806.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L43480c.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434850.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L434854.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43485a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L43486c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L434872.  v0:= temp;
  #L434874.  if v0 == 0 then goto L43487a;
  #L434878.  return @kind void;
  #L43487a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` @kind boolean;
  #L43487e.  if v0 == 0 then goto L43488a;
  #L434882.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @kind virtual;
  #L434888.  goto L434890;
  #L43488a.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @kind virtual;
  #L434890.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434820.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L434824.  v1:= length @variable v0;
  #L434826.  v2:= 0I;
  #L434828.  if v2 >= v1 then goto L43483c;
  #L43482c.  v3:= v0[v2] @kind object;
  #L434830.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.a:()V` @kind virtual;
  #L434836.  v2:= v2 + 1;
  #L43483a.  goto L434828;
  #L43483c.  return @kind void;
}
procedure `boolean` `f`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43463c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L434640.  v1:= 1I;
  #L434642.  if v0 == 0 then goto L434654;
  #L434646.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L43464c.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L434652.  return v1;
  #L434654.  if v3 == 0 then goto L4346d0;
  #L434658.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L43465c.  if v3 == 0 then goto L434692;
  #L434660.  if v4 == 0 then goto L4346d0;
  #L434664.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L43466a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43466e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L434674.  v3:= temp @kind object;
  #L434676.  if v3 == 0 then goto L43468a;
  #L43467a.  v4:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L43467e.  if v3 == v4 then goto L43468a;
  #L434682.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434688.  goto L434690;
  #L43468a.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L434690.  return v1;
  #L434692.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434696.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L43469c.  v3:= temp @kind object;
  #L43469e.  if v3 == 0 then goto L4346be;
  #L4346a2.  v0:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L4346a6.  if v3 == v0 then goto L4346be;
  #L4346aa.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4346b0.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4346b6.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4346bc.  return v1;
  #L4346be.  if v4 == 0 then goto L4346d0;
  #L4346c2.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L4346c8.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4346ce.  return v1;
  #L4346d0.  v3:= 0I;
  #L4346d2.  return v3;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4348a4.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4348a8.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4348ac.  v2:= 1I;
  #L4348ae.  v3:= 1I;
  #L4348b0.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4348b4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4348ba.  v4:= temp @kind wide;
  #L4348bc.  v6:= 0L;
  #L4348c0.  v8:= v6 @kind wide;
  #L4348c2.  v10:= lcmp(v8, v4);
  #L4348c6.  if v10 == 0 then goto L43495c;
  #L4348ca.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L4348ce.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4348d4.  v12:= temp @kind object;
  #L4348d6.  if v12 != 0 then goto L4348de;
  #L4348da.  v13:= 1I;
  #L4348dc.  goto L4348e0;
  #L4348de.  v13:= 0I;
  #L4348e0.  call temp:= `f`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L4348e6.  v11:= temp;
  #L4348e8.  if v11 == 0 then goto L4348ee;
  #L4348ec.  return @kind void;
  #L4348ee.  if v13 == 0 then goto L4348f4;
  #L4348f2.  goto L43495c;
  #L4348f4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L4348fa.  v10:= temp @kind object;
  #L4348fc.  v10:= (`java.lang.Object`[]) v10 @kind object;
  #L434900.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L434904.  call temp:= `apply`(v11, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43490a.  v10:= temp @kind object;
  #L43490c.  v11:= "The combiner returned a null value" @kind object;
  #L434910.  call temp:= `requireNonNull`(v10, v11) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L434916.  v10:= temp @kind object;
  #L434918.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43491e.  v12:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`) v12 @kind object;
  #L434922.  call `b`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L434928.  v10:= 1L;
  #L43492c.  v8:= v8 + v10 @kind long;
  #L43492e.  goto L4348c2;
  #L434930.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434932.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L434938.  call `e`(v14) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L43493e.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434942.  call temp:= `addThrowable`(v2, v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L434948.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43494c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.terminate:(Ljava/util/concurrent/atomic/AtomicReference;)Ljava/lang/Throwable;` @kind static;
  #L434952.  v1:= temp @kind object;
  #L434954.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43495a.  return @kind void;
  #L43495c.  if v10 != 0 then goto L43497a;
  #L434960.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L434964.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43496a.  v11:= temp;
  #L43496c.  call temp:= `f`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.f:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L434972.  v10:= temp;
  #L434974.  if v10 == 0 then goto L43497a;
  #L434978.  return @kind void;
  #L43497a.  v10:= lcmp(v8, v6);
  #L43497e.  if v10 == 0 then goto L4349a0;
  #L434982.  v6:= 9223372036854775807L;
  #L43498c.  v10:= lcmp(v4, v6);
  #L434990.  if v10 == 0 then goto L4349a0;
  #L434994.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L434998.  v5:= -v8 @kind long;
  #L43499a.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4349a0.  v3:= -v3 @kind int;
  #L4349a2.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4349a8.  v3:= temp;
  #L4349aa.  if v3 != 0 then goto L4348b0;
  #L4349ae.  return @kind void;
  catch `java.lang.Throwable` @[L434900..L434918] goto L434930;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4349cc.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4349d0.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4349d4.  v2:= 1I;
  #L4349d6.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L4349da.  if v3 == 0 then goto L4349e6;
  #L4349de.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4349e4.  return @kind void;
  #L4349e6.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4349ea.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4349f0.  v3:= temp @kind object;
  #L4349f2.  v3:= (`java.lang.Throwable`) v3 @kind object;
  #L4349f6.  if v3 == 0 then goto L434a08;
  #L4349fa.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L434a00.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434a06.  return @kind void;
  #L434a08.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L434a0c.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L434a12.  v4:= temp;
  #L434a14.  if v4 != 0 then goto L434a20;
  #L434a18.  v5:= 0I;
  #L434a1a.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L434a20.  if v3 == 0 then goto L434a30;
  #L434a24.  if v4 == 0 then goto L434a30;
  #L434a28.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L434a2e.  return @kind void;
  #L434a30.  v2:= -v2 @kind int;
  #L434a32.  call temp:= `addAndGet`(v6, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L434a38.  v2:= temp;
  #L434a3a.  if v2 != 0 then goto L4349d6;
  #L434a3e.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L434a50.  @monitorenter v2
  #L434a52.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L434a56.  v3:= v0[v3] @kind object;
  #L434a5a.  v1:= 1I;
  #L434a5c.  if v3 == 0 then goto L434a7a;
  #L434a60.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int`;
  #L434a64.  v3:= v3 + v1 @kind int;
  #L434a66.  v0:= length @variable v0;
  #L434a68.  if v3 != v0 then goto L434a72;
  #L434a6c.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L434a70.  goto L434a7e;
  #L434a72.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.i` @type ^`int` := v3;
  #L434a76.  @monitorexit v2
  #L434a78.  return @kind void;
  #L434a7a.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v1 @kind boolean;
  #L434a7e.  @monitorexit v2
  #L434a80.  call `drain`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L434a86.  return @kind void;
  #L434a88.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434a8a.  @monitorexit v2
  #L434a8c.  throw v3;
  catch `java.lang.Throwable` @[L434a52..L434a80] goto L434a88;
  catch `java.lang.Throwable` @[L434a8a..L434a8c] goto L434a88;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4346e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4346e8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4346ee.  v0:= temp;
  #L4346f0.  return v0;
}
procedure `void` `j`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `int` v2 , `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.j:(ILjava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L434ab4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.m` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L434ab8.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.addThrowable:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/lang/Throwable;)Z` @kind static;
  #L434abe.  v0:= temp;
  #L434ac0.  if v0 == 0 then goto L434ae8;
  #L434ac4.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.f` @type ^`boolean` @kind boolean;
  #L434ac8.  if v3 != 0 then goto L434ae0;
  #L434acc.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.e:()V` @kind virtual;
  #L434ad2.  v2:= 1I;
  #L434ad4.  v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` := v2 @kind boolean;
  #L434ad8.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L434ade.  goto L434aee;
  #L434ae0.  call `i`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.i:(I)V` @kind virtual;
  #L434ae6.  goto L434aee;
  #L434ae8.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L434aee.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.k:(ILjava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L434b00.  @monitorenter v3
  #L434b02.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.e` @type ^`java.lang.Object`[] @kind object;
  #L434b06.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int`;
  #L434b0a.  v2:= v0[v4] @kind object;
  #L434b0e.  if v2 != 0 then goto L434b1a;
  #L434b12.  v1:= v1 + 1;
  #L434b16.  v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.h` @type ^`int` := v1;
  #L434b1a.  v0[v4]:= v5 @kind object;
  #L434b1e.  v5:= length @variable v0;
  #L434b20.  if v5 != v1 then goto L434b42;
  #L434b24.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L434b28.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L434b2c.  v1:= v1[v4] @kind object;
  #L434b30.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L434b36.  v0:= temp @kind object;
  #L434b38.  call temp:= `offer`(v5, v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L434b3e.  v5:= 0I;
  #L434b40.  goto L434b44;
  #L434b42.  v5:= 1I;
  #L434b44.  @monitorexit v3
  #L434b46.  if v5 == 0 then goto L434b5a;
  #L434b4a.  v5:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L434b4e.  v4:= v5[v4] @kind object;
  #L434b52.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L434b58.  goto L434b60;
  #L434b5a.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L434b60.  return @kind void;
  #L434b62.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L434b64.  @monitorexit v3
  #L434b66.  throw v4;
  catch `java.lang.Throwable` @[L434b02..L434b46] goto L434b62;
  catch `java.lang.Throwable` @[L434b64..L434b66] goto L434b62;
}
procedure `void` `l`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v4 @kind this, `org.reactivestreams.Publisher`[] v5 @kind object, `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.l:([Lorg/reactivestreams/Publisher;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L434bbc.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`[] @kind object;
  #L434bc0.  v1:= 0I;
  #L434bc2.  if v1 >= v6 then goto L434bec;
  #L434bc6.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.l` @type ^`boolean` @kind boolean;
  #L434bca.  if v2 != 0 then goto L434bec;
  #L434bce.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.j` @type ^`boolean` @kind boolean;
  #L434bd2.  if v2 == 0 then goto L434bd8;
  #L434bd6.  goto L434bec;
  #L434bd8.  v2:= v5[v1] @kind object;
  #L434bdc.  v3:= v0[v1] @kind object;
  #L434be0.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L434be6.  v1:= v1 + 1;
  #L434bea.  goto L434bc2;
  #L434bec.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L434730.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L434734.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43473a.  v0:= temp @kind object;
  #L43473c.  if v0 != 0 then goto L434744;
  #L434740.  v0:= 0I;
  #L434742.  return v0 @kind object;
  #L434744.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.d` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L434748.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43474e.  v1:= temp @kind object;
  #L434750.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L434754.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L434758.  call temp:= `apply`(v2, v1) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43475e.  v1:= temp @kind object;
  #L434760.  v2:= "The combiner returned a null value" @kind object;
  #L434764.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43476a.  v1:= temp @kind object;
  #L43476c.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCombineLatest$b`) v0 @kind object;
  #L434770.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$b;.b:()V` @kind virtual;
  #L434776.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L434b8c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L434b92.  v0:= temp;
  #L434b94.  if v0 == 0 then goto L434ba8;
  #L434b98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.k` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L434b9c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L434ba2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.drain:()V` @kind virtual;
  #L434ba8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCombineLatest$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434704.  v0:= v3 ^& 4;
  #L434708.  v1:= 0I;
  #L43470a.  if v0 == 0 then goto L434710;
  #L43470e.  return v1;
  #L434710.  v3:= v3 ^& 2;
  #L434714.  if v3 == 0 then goto L43471a;
  #L434718.  v1:= 1I;
  #L43471a.  v2.`io.reactivex.internal.operators.flowable.FlowableCombineLatest$a.g` @type ^`boolean` := v1 @kind boolean;
  #L43471e.  return v3;
}
