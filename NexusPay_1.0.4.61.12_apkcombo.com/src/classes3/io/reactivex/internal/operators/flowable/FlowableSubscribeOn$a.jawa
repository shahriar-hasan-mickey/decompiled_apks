record `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `boolean` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;Lorg/reactivestreams/Publisher;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44be18.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44be1e.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44be22.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` := v2 @kind object;
  #L44be26.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L44be2a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44be2e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44be34.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L44be38.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44be3c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44be42.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L44be46.  v1:= v4 ^~ 1;
  #L44be4a.  v0.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` := v1 @kind boolean;
  #L44be4e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this, `long` v3 , `org.reactivestreams.Subscription` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44bfac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.e` @type ^`boolean` @kind boolean;
  #L44bfb0.  if v0 != 0 then goto L44bfe0;
  #L44bfb4.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44bfba.  v0:= temp @kind object;
  #L44bfbc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bfc2.  v1:= temp @kind object;
  #L44bfc4.  if v0 != v1 then goto L44bfca;
  #L44bfc8.  goto L44bfe0;
  #L44bfca.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44bfce.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a$a`;
  #L44bfd2.  call `<init>`(v1, v5, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a$a;.<init>:(Lorg/reactivestreams/Subscription;J)V` @kind direct;
  #L44bfd8.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44bfde.  goto L44bfe6;
  #L44bfe0.  call `request`(v5, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bfe6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44be60.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44be64.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44be6a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44be6e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44be74.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44be88.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44be8c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44be92.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44be96.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44be9c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44beb0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44beb4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44beba.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.b` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44bebe.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44bec4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bed8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bedc.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44bee2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44bef4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bef8.  call temp:= `setOnce`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44befe.  v0:= temp;
  #L44bf00.  if v0 == 0 then goto L44bf22;
  #L44bf04.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44bf08.  v1:= 0L;
  #L44bf0c.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44bf12.  v3:= temp @kind wide;
  #L44bf14.  v0:= lcmp(v3, v1);
  #L44bf18.  if v0 == 0 then goto L44bf22;
  #L44bf1c.  call `a`(v5, v3, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44bf22.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44bf34.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44bf3a.  v0:= temp;
  #L44bf3c.  if v0 == 0 then goto L44bf98;
  #L44bf40.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bf44.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bf4a.  v0:= temp @kind object;
  #L44bf4c.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L44bf50.  if v0 == 0 then goto L44bf5c;
  #L44bf54.  call `a`(v4, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44bf5a.  goto L44bf98;
  #L44bf5c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44bf60.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44bf66.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bf6a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bf70.  v5:= temp @kind object;
  #L44bf72.  v5:= (`org.reactivestreams.Subscription`) v5 @kind object;
  #L44bf76.  if v5 == 0 then goto L44bf98;
  #L44bf7a.  v6:= v4.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44bf7e.  v0:= 0L;
  #L44bf82.  call temp:= `getAndSet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44bf88.  v2:= temp @kind wide;
  #L44bf8a.  v6:= lcmp(v2, v0);
  #L44bf8e.  if v6 == 0 then goto L44bf98;
  #L44bf92.  call `a`(v4, v2, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.a:(JLorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44bf98.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bff8.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L44bffe.  v0:= temp @kind object;
  #L44c000.  call `lazySet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44c006.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44c00a.  v1:= 0I;
  #L44c00c.  v2.`io.reactivex.internal.operators.flowable.FlowableSubscribeOn$a.f` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L44c010.  call `subscribe`(v0, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44c016.  return @kind void;
}
