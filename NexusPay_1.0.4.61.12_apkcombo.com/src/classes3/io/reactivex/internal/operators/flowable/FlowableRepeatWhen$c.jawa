record `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.h` @AccessFlag PROTECTED_FINAL;
  `io.reactivex.processors.FlowableProcessor` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.i` @AccessFlag PROTECTED_FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.j` @AccessFlag PROTECTED_FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.k` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.processors.FlowableProcessor` v3 @kind object, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/processors/FlowableProcessor;Lorg/reactivestreams/Subscription;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4479f8.  v0:= 0I;
  #L4479fa.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L447a00.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L447a04.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.i` @type ^`io.reactivex.processors.FlowableProcessor` := v3 @kind object;
  #L447a08.  v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L447a0c.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L447a70.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.cancel:()V` @kind super;
  #L447a76.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L447a7a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L447a80.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.e:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447a20.  v0:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L447a24.  call `setSubscription`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L447a2a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` @kind wide;
  #L447a2e.  v2:= 0L;
  #L447a32.  v4:= lcmp(v0, v2);
  #L447a36.  if v4 == 0 then goto L447a44;
  #L447a3a.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` := v2 @kind wide;
  #L447a3e.  call `produced`(v5, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L447a44.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L447a48.  v1:= 1L;
  #L447a4c.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L447a52.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.i` @type ^`io.reactivex.processors.FlowableProcessor` @kind object;
  #L447a56.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447a5c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L447a94.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` @kind wide;
  #L447a98.  v2:= 1L;
  #L447a9c.  v0:= v0 + v2 @kind long;
  #L447a9e.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.k` @type ^`long` := v0 @kind wide;
  #L447aa2.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L447aa6.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447aac.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeatWhen$c` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeatWhen$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L447ac0.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L447ac6.  return @kind void;
}
