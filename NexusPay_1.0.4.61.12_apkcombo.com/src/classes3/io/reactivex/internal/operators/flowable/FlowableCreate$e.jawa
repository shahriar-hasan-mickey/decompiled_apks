record `io.reactivex.internal.operators.flowable.FlowableCreate$e` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$h` @kind class {
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$e` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$e;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436f88.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$h;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L436f8e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$e` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$e;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L436fa0.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L436fa4.  v1:= "create: could not emit value due to lack of requests" @kind object;
  #L436fa8.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436fae.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436fb4.  return @kind void;
}
