record `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` @kind class @AccessFlag FINAL extends `io.reactivex.Flowable` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L445890.  v0:= 0I;
  #L445892.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L445896.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] := v1 @kind object;
  #L44589a.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v0];
  #L44589e.  `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] := v0 @kind object;
  #L4458a2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4458b4.  call `<init>`(v1) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L4458ba.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int` := v2;
  #L4458be.  v0:= v2 ^> 2;
  #L4458c2.  v2:= v2 - v0 @kind int;
  #L4458c4.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int` := v2;
  #L4458c8.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` := v3 @kind boolean;
  #L4458cc.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4458d0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4458d6.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L4458da.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4458de.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4458e4.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4458e8.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4458ec.  v3:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L4458f0.  call `<init>`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L4458f6.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4458fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445964.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445968.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44596e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L445972.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L445978.  v0:= temp;
  #L44597a.  if v0 != 0 then goto L44598c;
  #L44597e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445982.  if v0 == 0 then goto L44598c;
  #L445986.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44598c.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L445810.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445814.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44581a.  v0:= temp @kind object;
  #L44581c.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L445820.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L445824.  v2:= 0I;
  #L445826.  if v0 != v1 then goto L44582c;
  #L44582a.  return v2;
  #L44582c.  v1:= length @variable v0;
  #L44582e.  v3:= v1 + 1;
  #L445832.  v3:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v3];
  #L445836.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L44583c.  v3[v1]:= v5 @kind object;
  #L445840.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445844.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L44584a.  v0:= temp;
  #L44584c.  if v0 == 0 then goto L445810;
  #L445850.  v5:= 1I;
  #L445852.  return v5;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L44590c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445910.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L445914.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L44591a.  v0:= temp @kind object;
  #L44591c.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L445920.  v1:= length @variable v0;
  #L445922.  v2:= 0I;
  #L445924.  if v2 >= v1 then goto L445950;
  #L445928.  v3:= v0[v2] @kind object;
  #L44592c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L445932.  v4:= temp @kind wide;
  #L445934.  v6:= -9223372036854775808L;
  #L445938.  v8:= lcmp(v4, v6);
  #L44593c.  if v8 == 0 then goto L44594a;
  #L445940.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L445944.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44594a.  v2:= v2 + 1;
  #L44594e.  goto L445924;
  #L445950.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v24 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L4459a0.  v1:= v24 @kind object;
  #L4459a4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4459a8.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4459ae.  v0:= temp;
  #L4459b0.  if v0 == 0 then goto L4459b6;
  #L4459b4.  return @kind void;
  #L4459b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4459ba.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int`;
  #L4459be.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.e` @type ^`int`;
  #L4459c2.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L4459c6.  v6:= 1I;
  #L4459c8.  if v4 == v6 then goto L4459d0;
  #L4459cc.  v4:= 1I;
  #L4459ce.  goto L4459d2;
  #L4459d0.  v4:= 0I;
  #L4459d2.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4459d6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4459dc.  v8:= temp @kind object;
  #L4459de.  v8:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L4459e2.  v9:= 1I;
  #L4459e4.  v10:= length @variable v8;
  #L4459e6.  if v0 == 0 then goto L445bf0;
  #L4459ea.  if v10 == 0 then goto L445bf0;
  #L4459ee.  v11:= length @variable v8;
  #L4459f0.  v12:= 9223372036854775807L;
  #L4459fa.  v15:= v12 @kind wide;
  #L4459fc.  v14:= 0I;
  #L4459fe.  v17:= -9223372036854775808L;
  #L445a02.  if v14 >= v11 then goto L445a44;
  #L445a06.  v5:= v8[v14] @kind object;
  #L445a0a.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L445a10.  v19:= temp @kind wide;
  #L445a12.  v21:= v7 @kind object;
  #L445a16.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L445a1a.  v19:= v19 - v6 @kind long;
  #L445a1e.  v5:= lcmp(v19, v17);
  #L445a22.  if v5 == 0 then goto L445a34;
  #L445a26.  v5:= lcmp(v15, v19);
  #L445a2a.  if v5 <= 0 then goto L445a38;
  #L445a2e.  v15:= v19 @kind wide;
  #L445a32.  goto L445a38;
  #L445a34.  v10:= v10 + -1;
  #L445a38.  v14:= v14 + 1;
  #L445a3c.  v7:= v21 @kind object;
  #L445a40.  v6:= 1I;
  #L445a42.  goto L4459fe;
  #L445a44.  v21:= v7 @kind object;
  #L445a48.  v5:= 0L;
  #L445a4c.  if v10 != 0 then goto L445a52;
  #L445a50.  v15:= v5 @kind wide;
  #L445a52.  v7:= lcmp(v15, v5);
  #L445a56.  if v7 == 0 then goto L445b90;
  #L445a5a.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L445a60.  v10:= temp;
  #L445a62.  if v10 == 0 then goto L445a6e;
  #L445a66.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L445a6c.  return @kind void;
  #L445a6e.  v10:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L445a72.  if v10 == 0 then goto L445a8e;
  #L445a76.  v11:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L445a7a.  if v11 != 0 then goto L445a8e;
  #L445a7e.  v11:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L445a82.  if v11 == 0 then goto L445a8e;
  #L445a86.  call `h`(v1, v11) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445a8c.  return @kind void;
  #L445a8e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L445a94.  v11:= temp @kind object;
  #L445a96.  if v11 != 0 then goto L445a9e;
  #L445a9a.  v14:= 1I;
  #L445a9c.  goto L445aa0;
  #L445a9e.  v14:= 0I;
  #L445aa0.  if v10 == 0 then goto L445ac0;
  #L445aa4.  if v14 == 0 then goto L445ac0;
  #L445aa8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L445aac.  if v0 == 0 then goto L445ab8;
  #L445ab0.  call `h`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445ab6.  goto L445abe;
  #L445ab8.  call `f`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L445abe.  return @kind void;
  #L445ac0.  if v14 == 0 then goto L445ac6;
  #L445ac4.  goto L445b90;
  #L445ac6.  v7:= length @variable v8;
  #L445ac8.  v10:= 0I;
  #L445aca.  v14:= 0I;
  #L445acc.  v19:= 1L;
  #L445ad0.  if v10 >= v7 then goto L445b1e;
  #L445ad4.  v5:= v8[v10] @kind object;
  #L445ad8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L445ade.  v22:= temp @kind wide;
  #L445ae0.  v6:= lcmp(v22, v17);
  #L445ae4.  if v6 == 0 then goto L445b08;
  #L445ae8.  v6:= lcmp(v22, v12);
  #L445aec.  if v6 == 0 then goto L445afc;
  #L445af0.  v12:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` @kind wide;
  #L445af4.  v12:= v12 + v19 @kind long;
  #L445af8.  v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.c` @type ^`long` := v12 @kind wide;
  #L445afc.  v5:= v5.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L445b00.  call `onNext`(v5, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L445b06.  goto L445b0a;
  #L445b08.  v14:= 1I;
  #L445b0a.  v10:= v10 + 1;
  #L445b0e.  v5:= 0L;
  #L445b12.  v12:= 9223372036854775807L;
  #L445b1c.  goto L445acc;
  #L445b1e.  v15:= v15 - v19 @kind long;
  #L445b22.  if v4 == 0 then goto L445b48;
  #L445b26.  v2:= v2 + 1;
  #L445b2a.  if v2 != v3 then goto L445b48;
  #L445b2e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445b32.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445b38.  v2:= temp @kind object;
  #L445b3a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L445b3e.  v5:= (`long`) v3 @kind i2l;
  #L445b40.  call `request`(v2, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L445b46.  v2:= 0I;
  #L445b48.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445b4e.  v5:= temp @kind object;
  #L445b50.  v5:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v5 @kind object;
  #L445b54.  if v14 != 0 then goto L445b70;
  #L445b58.  if v5 == v8 then goto L445b5e;
  #L445b5c.  goto L445b70;
  #L445b5e.  v5:= 0L;
  #L445b62.  v12:= 9223372036854775807L;
  #L445b6c.  goto L445a52;
  #L445b70.  v8:= v5 @kind object;
  #L445b72.  goto L445c22;
  #L445b74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L445b76.  v2:= v0 @kind object;
  #L445b78.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L445b7e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445b82.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L445b88.  call `h`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445b8e.  return @kind void;
  #L445b90.  if v7 != 0 then goto L445bf4;
  #L445b94.  call temp:= `isDisposed`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @kind virtual;
  #L445b9a.  v5:= temp;
  #L445b9c.  if v5 == 0 then goto L445ba8;
  #L445ba0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L445ba6.  return @kind void;
  #L445ba8.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L445bac.  if v5 == 0 then goto L445bc8;
  #L445bb0.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.f` @type ^`boolean` @kind boolean;
  #L445bb4.  if v6 != 0 then goto L445bc8;
  #L445bb8.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L445bbc.  if v6 == 0 then goto L445bc8;
  #L445bc0.  call `h`(v1, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445bc6.  return @kind void;
  #L445bc8.  if v5 == 0 then goto L445bf4;
  #L445bcc.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L445bd2.  v5:= temp;
  #L445bd4.  if v5 == 0 then goto L445bf4;
  #L445bd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L445bdc.  if v0 == 0 then goto L445be8;
  #L445be0.  call `h`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445be6.  goto L445bee;
  #L445be8.  call `f`(v24) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.f:()V` @kind virtual;
  #L445bee.  return @kind void;
  #L445bf0.  v21:= v7 @kind object;
  #L445bf4.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.l` @type ^`int` := v2;
  #L445bf8.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L445bfc.  v6:= -v9 @kind int;
  #L445bfe.  call temp:= `addAndGet`(v5, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L445c04.  v9:= temp;
  #L445c06.  if v9 != 0 then goto L445c0c;
  #L445c0a.  return @kind void;
  #L445c0c.  if v0 != 0 then goto L445c14;
  #L445c10.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445c14.  call temp:= `get`(v21) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445c1a.  v5:= temp @kind object;
  #L445c1c.  v8:= v5 @kind object;
  #L445c1e.  v8:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v8 @kind object;
  #L445c22.  v7:= v21 @kind object;
  #L445c26.  v6:= 1I;
  #L445c28.  goto L4459e4;
  catch `java.lang.Throwable` @[L445a8e..L445a96] goto L445b74;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v9 @kind this, `java.lang.Throwable` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.h:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L445c48.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445c4c.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.n` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L445c50.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L445c56.  v0:= temp @kind object;
  #L445c58.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L445c5c.  v1:= length @variable v0;
  #L445c5e.  v2:= 0I;
  #L445c60.  if v2 >= v1 then goto L445c8c;
  #L445c64.  v3:= v0[v2] @kind object;
  #L445c68.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L445c6e.  v4:= temp @kind wide;
  #L445c70.  v6:= -9223372036854775808L;
  #L445c74.  v8:= lcmp(v4, v6);
  #L445c78.  if v8 == 0 then goto L445c86;
  #L445c7c.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L445c80.  call `onError`(v3, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445c86.  v2:= v2 + 1;
  #L445c8a.  goto L445c60;
  #L445c8c.  return @kind void;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L445de8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445dec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445df2.  v0:= temp @kind object;
  #L445df4.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[]) v0 @kind object;
  #L445df8.  v1:= length @variable v0;
  #L445dfa.  if v1 != 0 then goto L445e00;
  #L445dfe.  return @kind void;
  #L445e00.  v2:= -1I;
  #L445e02.  v3:= 0I;
  #L445e04.  v4:= 0I;
  #L445e06.  if v4 >= v1 then goto L445e1c;
  #L445e0a.  v5:= v0[v4] @kind object;
  #L445e0e.  if v5 != v7 then goto L445e16;
  #L445e12.  v2:= v4;
  #L445e14.  goto L445e1c;
  #L445e16.  v4:= v4 + 1;
  #L445e1a.  goto L445e06;
  #L445e1c.  if v2 >= 0 then goto L445e22;
  #L445e20.  return @kind void;
  #L445e22.  v4:= 1I;
  #L445e24.  if v1 != v4 then goto L445e2e;
  #L445e28.  v1:= `@@io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.m` @type ^`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[] @kind object;
  #L445e2c.  goto L445e4c;
  #L445e2e.  v5:= v1 + -1;
  #L445e32.  v5:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`[v5];
  #L445e36.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L445e3c.  v3:= v2 + 1;
  #L445e40.  v1:= v1 - v2 @kind int;
  #L445e42.  v1:= v1 - v4 @kind int;
  #L445e44.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L445e4a.  v1:= v5 @kind object;
  #L445e4c.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445e50.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L445e56.  v0:= temp;
  #L445e58.  if v0 == 0 then goto L445de8;
  #L445e5c.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445864.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445868.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44586e.  v0:= temp @kind object;
  #L445870.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L445874.  if v0 != v1 then goto L44587c;
  #L445878.  v0:= 1I;
  #L44587a.  goto L44587e;
  #L44587c.  v0:= 0I;
  #L44587e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445ca0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L445ca4.  if v0 != 0 then goto L445cb4;
  #L445ca8.  v0:= 1I;
  #L445caa.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v0 @kind boolean;
  #L445cae.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L445cb4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445cc8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L445ccc.  if v0 == 0 then goto L445cd8;
  #L445cd0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L445cd6.  return @kind void;
  #L445cd8.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` := v2 @kind object;
  #L445cdc.  v2:= 1I;
  #L445cde.  v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L445ce2.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L445ce8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445cfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` @kind boolean;
  #L445d00.  if v0 == 0 then goto L445d06;
  #L445d04.  return @kind void;
  #L445d06.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int`;
  #L445d0a.  if v0 != 0 then goto L445d46;
  #L445d0e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L445d12.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L445d18.  v2:= temp;
  #L445d1a.  if v2 != 0 then goto L445d46;
  #L445d1e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445d22.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L445d28.  v2:= temp @kind object;
  #L445d2a.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L445d2e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L445d34.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L445d38.  call `<init>`(v2) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L445d3e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L445d44.  return @kind void;
  #L445d46.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L445d4c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L445d60.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445d64.  call temp:= `setOnce`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L445d6a.  v0:= temp;
  #L445d6c.  if v0 == 0 then goto L445dd6;
  #L445d70.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L445d74.  if v0 == 0 then goto L445dbc;
  #L445d78.  v0:= v4 @kind object;
  #L445d7a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L445d7e.  v1:= 3I;
  #L445d80.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L445d86.  v1:= temp;
  #L445d88.  v2:= 1I;
  #L445d8a.  if v1 != v2 then goto L445da2;
  #L445d8e.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L445d92.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L445d96.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.j` @type ^`boolean` := v2 @kind boolean;
  #L445d9a.  call `g`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L445da0.  return @kind void;
  #L445da2.  v2:= 2I;
  #L445da4.  if v1 != v2 then goto L445dbc;
  #L445da8.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.i` @type ^`int` := v1;
  #L445dac.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L445db0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L445db4.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L445dba.  return @kind void;
  #L445dbc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L445dc0.  call temp:= `createQueue`(v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.createQueue:(I)Lio/reactivex/internal/fuseable/SimpleQueue;` @kind static;
  #L445dc6.  v0:= temp @kind object;
  #L445dc8.  v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.h` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L445dcc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.d` @type ^`int`;
  #L445dd0.  call `request`(v4, v0) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.request:(Lorg/reactivestreams/Subscription;I)V` @kind static;
  #L445dd6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L445e70.  v0:= new `io.reactivex.internal.operators.flowable.FlowablePublishMulticast$b`;
  #L445e74.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;)V` @kind direct;
  #L445e7a.  call `onSubscribe`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L445e80.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.e:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)Z` @kind virtual;
  #L445e86.  v1:= temp;
  #L445e88.  if v1 == 0 then goto L445ea8;
  #L445e8c.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;.a:()Z` @kind virtual;
  #L445e92.  v3:= temp;
  #L445e94.  if v3 == 0 then goto L445ea0;
  #L445e98.  call `i`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.i:(Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$b;)V` @kind virtual;
  #L445e9e.  return @kind void;
  #L445ea0.  call `g`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishMulticast$a;.g:()V` @kind virtual;
  #L445ea6.  goto L445ebe;
  #L445ea8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishMulticast$a.k` @type ^`java.lang.Throwable` @kind object;
  #L445eac.  if v0 == 0 then goto L445eb8;
  #L445eb0.  call `onError`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L445eb6.  goto L445ebe;
  #L445eb8.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L445ebe.  return @kind void;
}
