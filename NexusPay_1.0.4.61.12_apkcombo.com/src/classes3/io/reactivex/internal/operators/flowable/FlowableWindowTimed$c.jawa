record `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `java.util.concurrent.TimeUnit` v7 @kind object, `io.reactivex.Scheduler$Worker` v8 @kind object, `int` v9 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L451cc0.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L451cc4.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L451cca.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L451cd0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` := v3 @kind wide;
  #L451cd4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @type ^`long` := v5 @kind wide;
  #L451cd8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` := v7 @kind object;
  #L451cdc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` := v8 @kind object;
  #L451ce0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int` := v9;
  #L451ce4.  v2:= new `java.util.LinkedList`;
  #L451ce8.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L451cee.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L451cf2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v3 @kind this, `io.reactivex.processors.UnicastProcessor` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.a:(Lio/reactivex/processors/UnicastProcessor;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L451d1c.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451d20.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`;
  #L451d24.  v2:= 0I;
  #L451d26.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$b;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L451d2c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L451d32.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451d38.  v4:= temp;
  #L451d3a.  if v4 == 0 then goto L451d44;
  #L451d3e.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L451d44.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v11 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L451d58.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451d5c.  v1:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451d60.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L451d64.  v3:= 1I;
  #L451d66.  v4:= 1I;
  #L451d68.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @type ^`boolean` @kind boolean;
  #L451d6c.  if v5 == 0 then goto L451d92;
  #L451d70.  v1:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451d74.  call `cancel`(v1) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451d7a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L451d80.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L451d86.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L451d8a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451d90.  return @kind void;
  #L451d92.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L451d96.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L451d9c.  v6:= temp @kind object;
  #L451d9e.  if v6 != 0 then goto L451da6;
  #L451da2.  v7:= 1I;
  #L451da4.  goto L451da8;
  #L451da6.  v7:= 0I;
  #L451da8.  v8:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b` @kind boolean;
  #L451dac.  if v5 == 0 then goto L451e28;
  #L451db0.  if v7 != 0 then goto L451db8;
  #L451db4.  if v8 == 0 then goto L451e28;
  #L451db8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L451dbe.  v0:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L451dc2.  if v0 == 0 then goto L451dee;
  #L451dc6.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L451dcc.  v1:= temp @kind object;
  #L451dce.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L451dd4.  v3:= temp;
  #L451dd6.  if v3 == 0 then goto L451e16;
  #L451dda.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L451de0.  v3:= temp @kind object;
  #L451de2.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L451de6.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L451dec.  goto L451dce;
  #L451dee.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L451df4.  v0:= temp @kind object;
  #L451df6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L451dfc.  v1:= temp;
  #L451dfe.  if v1 == 0 then goto L451e16;
  #L451e02.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L451e08.  v1:= temp @kind object;
  #L451e0a.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L451e0e.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451e14.  goto L451df6;
  #L451e16.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L451e1c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L451e20.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L451e26.  return @kind void;
  #L451e28.  if v7 == 0 then goto L451e3c;
  #L451e2c.  v4:= -v4 @kind int;
  #L451e2e.  call temp:= `leave`(v11, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451e34.  v4:= temp;
  #L451e36.  if v4 != 0 then goto L451d68;
  #L451e3a.  return @kind void;
  #L451e3c.  if v8 == 0 then goto L451f06;
  #L451e40.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`) v6 @kind object;
  #L451e44.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.b` @type ^`boolean` @kind boolean;
  #L451e48.  if v5 == 0 then goto L451ed6;
  #L451e4c.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L451e50.  if v5 == 0 then goto L451e56;
  #L451e54.  goto L451d68;
  #L451e56.  call temp:= `requested`(v11) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L451e5c.  v5:= temp @kind wide;
  #L451e5e.  v7:= 0L;
  #L451e62.  v9:= lcmp(v5, v7);
  #L451e66.  if v9 == 0 then goto L451ebe;
  #L451e6a.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L451e6e.  call temp:= `create`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L451e74.  v7:= temp @kind object;
  #L451e76.  call temp:= `add`(v2, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L451e7c.  call `onNext`(v1, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L451e82.  v8:= 9223372036854775807L;
  #L451e8c.  v10:= lcmp(v5, v8);
  #L451e90.  if v10 == 0 then goto L451e9e;
  #L451e94.  v5:= 1L;
  #L451e98.  call temp:= `produced`(v11, v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L451e9e.  v5:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L451ea2.  v6:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L451ea6.  call `<init>`(v6, v11, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L451eac.  v7:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` @kind wide;
  #L451eb0.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L451eb4.  call temp:= `schedule`(v5, v6, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L451eba.  goto L451d68;
  #L451ebe.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L451ec2.  v6:= "Can't emit window due to lack of requests" @kind object;
  #L451ec6.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L451ecc.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451ed2.  goto L451d68;
  #L451ed6.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451eda.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L451ee0.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L451ee4.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L451eea.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L451ef0.  v5:= temp;
  #L451ef2.  if v5 == 0 then goto L451d68;
  #L451ef6.  v5:= v11.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L451efa.  if v5 == 0 then goto L451d68;
  #L451efe.  v11.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.j` @type ^`boolean` := v3 @kind boolean;
  #L451f02.  goto L451d68;
  #L451f06.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L451f0c.  v5:= temp @kind object;
  #L451f0e.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L451f14.  v7:= temp;
  #L451f16.  if v7 == 0 then goto L451d68;
  #L451f1a.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L451f20.  v7:= temp @kind object;
  #L451f22.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L451f26.  call `onNext`(v7, v6) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L451f2c.  goto L451f0e;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451d04.  v0:= 1I;
  #L451d06.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L451d0a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451f40.  v0:= 1I;
  #L451f42.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L451f46.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451f4c.  v0:= temp;
  #L451f4e.  if v0 == 0 then goto L451f58;
  #L451f52.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L451f58.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451f5c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L451f62.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451f74.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v2 @kind object;
  #L451f78.  v0:= 1I;
  #L451f7a.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L451f7e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L451f84.  v0:= temp;
  #L451f86.  if v0 == 0 then goto L451f90;
  #L451f8a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L451f90.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451f94.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L451f9a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L451fac.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L451fb2.  v0:= temp;
  #L451fb4.  if v0 == 0 then goto L451ff4;
  #L451fb8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L451fbc.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L451fc2.  v0:= temp @kind object;
  #L451fc4.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L451fca.  v1:= temp;
  #L451fcc.  if v1 == 0 then goto L451fe4;
  #L451fd0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L451fd6.  v1:= temp @kind object;
  #L451fd8.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L451fdc.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L451fe2.  goto L451fc4;
  #L451fe4.  v3:= -1I;
  #L451fe6.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L451fec.  v3:= temp;
  #L451fee.  if v3 != 0 then goto L45200c;
  #L451ff2.  return @kind void;
  #L451ff4.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L451ff8.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L451ffe.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L452004.  v3:= temp;
  #L452006.  if v3 != 0 then goto L45200c;
  #L45200a.  return @kind void;
  #L45200c.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L452012.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v14 @kind this, `org.reactivestreams.Subscription` v15 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L452024.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L452028.  call temp:= `validate`(v0, v15) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L45202e.  v0:= temp;
  #L452030.  if v0 == 0 then goto L4520f4;
  #L452034.  v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.i` @type ^`org.reactivestreams.Subscription` := v15 @kind object;
  #L452038.  v0:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45203c.  call `onSubscribe`(v0, v14) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L452042.  v0:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L452046.  if v0 == 0 then goto L45204c;
  #L45204a.  return @kind void;
  #L45204c.  call temp:= `requested`(v14) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L452052.  v0:= temp @kind wide;
  #L452054.  v2:= 0L;
  #L452058.  v4:= lcmp(v0, v2);
  #L45205c.  if v4 == 0 then goto L4520d6;
  #L452060.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L452064.  call temp:= `create`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L45206a.  v2:= temp @kind object;
  #L45206c.  v3:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.h` @type ^`java.util.List` @kind object;
  #L452070.  call temp:= `add`(v3, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L452076.  v3:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L45207a.  call `onNext`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L452080.  v3:= 9223372036854775807L;
  #L45208a.  v5:= lcmp(v0, v3);
  #L45208e.  if v5 == 0 then goto L45209c;
  #L452092.  v0:= 1L;
  #L452096.  call temp:= `produced`(v14, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L45209c.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4520a0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$a`;
  #L4520a4.  call `<init>`(v1, v14, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L4520aa.  v5:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.c` @type ^`long` @kind wide;
  #L4520ae.  v2:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4520b2.  call temp:= `schedule`(v0, v1, v5, v2) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4520b8.  v7:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.f` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4520bc.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.d` @type ^`long` @kind wide;
  #L4520c0.  v13:= v14.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4520c4.  v8:= v14 @kind object;
  #L4520c6.  v9:= v11 @kind wide;
  #L4520c8.  call temp:= `schedulePeriodically`(v7, v8, v9, v11, v13) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4520ce.  call `request`(v15, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4520d4.  goto L4520f4;
  #L4520d6.  call `cancel`(v15) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4520dc.  v15:= v14.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4520e0.  v0:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4520e4.  v1:= "Could not emit the first window due to lack of requests" @kind object;
  #L4520e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4520ee.  call `onError`(v15, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4520f4.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L452108.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L45210e.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L452120.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowTimed$c.g` @type ^`int`;
  #L452124.  call temp:= `create`(v0) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L45212a.  v0:= temp @kind object;
  #L45212c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowTimed$c$b`;
  #L452130.  v2:= 1I;
  #L452132.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c$b;.<init>:(Lio/reactivex/processors/UnicastProcessor;Z)V` @kind direct;
  #L452138.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L45213c.  if v0 != 0 then goto L45214a;
  #L452140.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L452144.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L45214a.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L452150.  v0:= temp;
  #L452152.  if v0 == 0 then goto L45215c;
  #L452156.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowTimed$c;.b:()V` @kind virtual;
  #L45215c.  return @kind void;
}
