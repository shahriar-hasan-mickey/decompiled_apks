record `io.reactivex.internal.operators.flowable.FlowableObserveOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.Scheduler$Worker` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L443244.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @kind direct;
  #L44324a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44324e.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44330c.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443310.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L443314.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L443318.  v4:= 1I;
  #L44331a.  v5:= 1I;
  #L44331c.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L443320.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L443326.  v6:= temp @kind wide;
  #L443328.  v8:= lcmp(v2, v6);
  #L44332c.  if v8 == 0 then goto L4433d2;
  #L443330.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L443334.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44333a.  v10:= temp @kind object;
  #L44333c.  if v10 != 0 then goto L443344;
  #L443340.  v11:= 1I;
  #L443342.  goto L443346;
  #L443344.  v11:= 0I;
  #L443346.  call temp:= `e`(v12, v9, v11, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L44334c.  v9:= temp;
  #L44334e.  if v9 == 0 then goto L443354;
  #L443352.  return @kind void;
  #L443354.  if v11 == 0 then goto L44335a;
  #L443358.  goto L4433d2;
  #L44335a.  call `onNext`(v0, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443360.  v8:= 1L;
  #L443364.  v2:= v2 + v8 @kind long;
  #L443366.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L44336a.  v8:= (`long`) v8 @kind i2l;
  #L44336c.  v10:= lcmp(v2, v8);
  #L443370.  if v10 != 0 then goto L443328;
  #L443374.  v8:= 9223372036854775807L;
  #L44337e.  v10:= lcmp(v6, v8);
  #L443382.  if v10 == 0 then goto L443394;
  #L443386.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44338a.  v7:= -v2 @kind long;
  #L44338c.  call temp:= `addAndGet`(v6, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L443392.  v6:= temp @kind wide;
  #L443394.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443398.  call `request`(v8, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44339e.  v2:= 0L;
  #L4433a2.  goto L443328;
  #L4433a4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4433a6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4433ac.  v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4433b0.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4433b4.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4433ba.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L4433c0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4433c6.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4433ca.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4433d0.  return @kind void;
  #L4433d2.  if v8 != 0 then goto L4433f0;
  #L4433d6.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L4433da.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4433e0.  v7:= temp;
  #L4433e2.  call temp:= `e`(v12, v6, v7, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4433e8.  v6:= temp;
  #L4433ea.  if v6 == 0 then goto L4433f0;
  #L4433ee.  return @kind void;
  #L4433f0.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4433f6.  v6:= temp;
  #L4433f8.  if v5 != v6 then goto L443410;
  #L4433fc.  v12.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L443400.  v5:= -v5 @kind int;
  #L443402.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443408.  v5:= temp;
  #L44340a.  if v5 != 0 then goto L44331c;
  #L44340e.  return @kind void;
  #L443410.  v5:= v6;
  #L443412.  goto L44331c;
  catch `java.lang.Throwable` @[L443334..L44333c] goto L4433a4;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L443430.  v0:= 1I;
  #L443432.  v1:= 1I;
  #L443434.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L443438.  if v2 == 0 then goto L44343e;
  #L44343c.  return @kind void;
  #L44343e.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L443442.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443446.  v4:= 0I;
  #L443448.  call `onNext`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44344e.  if v2 == 0 then goto L443480;
  #L443452.  v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L443456.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L44345a.  if v0 == 0 then goto L44346a;
  #L44345e.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443462.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443468.  goto L443474;
  #L44346a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44346e.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443474.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L443478.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44347e.  return @kind void;
  #L443480.  v1:= -v1 @kind int;
  #L443482.  call temp:= `addAndGet`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L443488.  v1:= temp;
  #L44348a.  if v1 != 0 then goto L443434;
  #L44348e.  return @kind void;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L4434a0.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4434a4.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4434a8.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L4434ac.  v4:= 1I;
  #L4434ae.  v5:= 1I;
  #L4434b0.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4434b4.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4434ba.  v6:= temp @kind wide;
  #L4434bc.  v8:= lcmp(v2, v6);
  #L4434c0.  if v8 == 0 then goto L443526;
  #L4434c4.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4434ca.  v8:= temp @kind object;
  #L4434cc.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L4434d0.  if v9 == 0 then goto L4434d6;
  #L4434d4.  return @kind void;
  #L4434d6.  if v8 != 0 then goto L4434f0;
  #L4434da.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L4434de.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4434e4.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4434e8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4434ee.  return @kind void;
  #L4434f0.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4434f6.  v8:= 1L;
  #L4434fa.  v2:= v2 + v8 @kind long;
  #L4434fc.  goto L4434bc;
  #L4434fe.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443500.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L443506.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L44350a.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44350e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443514.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44351a.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44351e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443524.  return @kind void;
  #L443526.  v6:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L44352a.  if v6 == 0 then goto L443530;
  #L44352e.  return @kind void;
  #L443530.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L443536.  v6:= temp;
  #L443538.  if v6 == 0 then goto L443552;
  #L44353c.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v4 @kind boolean;
  #L443540.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443546.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44354a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L443550.  return @kind void;
  #L443552.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L443558.  v6:= temp;
  #L44355a.  if v5 != v6 then goto L443572;
  #L44355e.  v10.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v2 @kind wide;
  #L443562.  v5:= -v5 @kind int;
  #L443564.  call temp:= `addAndGet`(v10, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44356a.  v5:= temp;
  #L44356c.  if v5 != 0 then goto L4434b0;
  #L443570.  return @kind void;
  #L443572.  v5:= v6;
  #L443574.  goto L4434b0;
  catch `java.lang.Throwable` @[L4434c4..L4434cc] goto L4434fe;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L443260.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443264.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44326a.  v0:= temp;
  #L44326c.  if v0 == 0 then goto L4432f8;
  #L443270.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L443274.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L443278.  if v0 == 0 then goto L4432d0;
  #L44327c.  v0:= v4 @kind object;
  #L44327e.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L443282.  v1:= 7I;
  #L443284.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L44328a.  v1:= temp;
  #L44328c.  v2:= 1I;
  #L44328e.  if v1 != v2 then goto L4432aa;
  #L443292.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L443296.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L44329a.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L44329e.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4432a2.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4432a8.  return @kind void;
  #L4432aa.  v2:= 2I;
  #L4432ac.  if v1 != v2 then goto L4432d0;
  #L4432b0.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int` := v2;
  #L4432b4.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4432b8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4432bc.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4432c2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4432c6.  v0:= (`long`) v0 @kind i2l;
  #L4432c8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4432ce.  return @kind void;
  #L4432d0.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L4432d4.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4432d8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L4432de.  v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L4432e2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$c.n` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4432e6.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4432ec.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int`;
  #L4432f0.  v0:= (`long`) v0 @kind i2l;
  #L4432f2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4432f8.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$c` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4431e8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L4431ec.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4431f2.  v0:= temp @kind object;
  #L4431f4.  if v0 == 0 then goto L443232;
  #L4431f8.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L4431fc.  v2:= 1I;
  #L4431fe.  if v1 == v2 then goto L443232;
  #L443202.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` @kind wide;
  #L443206.  v3:= 1L;
  #L44320a.  v1:= v1 + v3 @kind long;
  #L44320c.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int`;
  #L443210.  v3:= (`long`) v3 @kind i2l;
  #L443212.  v5:= lcmp(v1, v3);
  #L443216.  if v5 != 0 then goto L44322e;
  #L44321a.  v3:= 0L;
  #L44321e.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v3 @kind wide;
  #L443222.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443226.  call `request`(v3, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44322c.  goto L443232;
  #L44322e.  v6.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @type ^`long` := v1 @kind wide;
  #L443232.  return v0 @kind object;
}
