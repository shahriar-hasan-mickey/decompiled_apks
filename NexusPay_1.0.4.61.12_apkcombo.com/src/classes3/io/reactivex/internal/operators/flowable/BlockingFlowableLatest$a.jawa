record `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` @kind class @AccessFlag FINAL extends `io.reactivex.subscribers.DisposableSubscriber` @kind class, `java.util.Iterator` @kind interface {
  `java.util.concurrent.Semaphore` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @AccessFlag FINAL;
  `io.reactivex.Notification` `io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L430458.  call `<init>`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.<init>:()V` @kind direct;
  #L43045e.  v0:= new `java.util.concurrent.Semaphore`;
  #L430462.  v1:= 0I;
  #L430464.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/Semaphore;.<init>:(I)V` @kind direct;
  #L43046a.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` := v0 @kind object;
  #L43046e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L430472.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L430478.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43047c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v1 @kind this, `io.reactivex.Notification` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/Notification;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4304bc.  v0:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4304c0.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4304c6.  v2:= temp @kind object;
  #L4304c8.  if v2 != 0 then goto L4304d0;
  #L4304cc.  v2:= 1I;
  #L4304ce.  goto L4304d2;
  #L4304d0.  v2:= 0I;
  #L4304d2.  if v2 == 0 then goto L4304e0;
  #L4304d6.  v2:= v1.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L4304da.  call `release`(v2) @signature `Ljava/util/concurrent/Semaphore;.release:()V` @kind virtual;
  #L4304e0.  return @kind void;
}
procedure `boolean` `hasNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430330.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L430334.  if v0 == 0 then goto L43035c;
  #L430338.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L43033e.  v0:= temp;
  #L430340.  if v0 != 0 then goto L430346;
  #L430344.  goto L43035c;
  #L430346.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L43034a.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L430350.  v0:= temp @kind object;
  #L430352.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L430358.  v0:= temp @kind object;
  #L43035a.  throw v0;
  #L43035c.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L430360.  if v0 == 0 then goto L430370;
  #L430364.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L43036a.  v0:= temp;
  #L43036c.  if v0 == 0 then goto L4303dc;
  #L430370.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L430374.  if v0 != 0 then goto L4303dc;
  #L430378.  call `verifyNonBlocking`() @signature `Lio/reactivex/internal/util/BlockingHelper;.verifyNonBlocking:()V` @kind static;
  #L43037e.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.b` @type ^`java.util.concurrent.Semaphore` @kind object;
  #L430382.  call `acquire`(v0) @signature `Ljava/util/concurrent/Semaphore;.acquire:()V` @kind virtual;
  #L430388.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43038c.  v1:= 0I;
  #L43038e.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L430394.  v0:= temp @kind object;
  #L430396.  v0:= (`io.reactivex.Notification`) v0 @kind object;
  #L43039a.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v0 @kind object;
  #L43039e.  call temp:= `isOnError`(v0) @signature `Lio/reactivex/Notification;.isOnError:()Z` @kind virtual;
  #L4303a4.  v1:= temp;
  #L4303a6.  if v1 != 0 then goto L4303ac;
  #L4303aa.  goto L4303dc;
  #L4303ac.  call temp:= `getError`(v0) @signature `Lio/reactivex/Notification;.getError:()Ljava/lang/Throwable;` @kind virtual;
  #L4303b2.  v0:= temp @kind object;
  #L4303b4.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4303ba.  v0:= temp @kind object;
  #L4303bc.  throw v0;
  #L4303be.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L4303c0.  call `dispose`(v2) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4303c6.  call temp:= `createOnError`(v0) @signature `Lio/reactivex/Notification;.createOnError:(Ljava/lang/Throwable;)Lio/reactivex/Notification;` @kind static;
  #L4303cc.  v1:= temp @kind object;
  #L4303ce.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L4303d2.  call temp:= `wrapOrThrow`(v0) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L4303d8.  v0:= temp @kind object;
  #L4303da.  throw v0;
  #L4303dc.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L4303e0.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L4303e6.  v0:= temp;
  #L4303e8.  return v0;
  catch `java.lang.InterruptedException` @[L430378..L430388] goto L4303be;
}
procedure `java.lang.Object` `next`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43040c.  call temp:= `hasNext`(v2) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.hasNext:()Z` @kind virtual;
  #L430412.  v0:= temp;
  #L430414.  if v0 == 0 then goto L43043c;
  #L430418.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L43041c.  call temp:= `isOnNext`(v0) @signature `Lio/reactivex/Notification;.isOnNext:()Z` @kind virtual;
  #L430422.  v0:= temp;
  #L430424.  if v0 == 0 then goto L43043c;
  #L430428.  v0:= v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` @kind object;
  #L43042c.  call temp:= `getValue`(v0) @signature `Lio/reactivex/Notification;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L430432.  v0:= temp @kind object;
  #L430434.  v1:= 0I;
  #L430436.  v2.`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a.d` @type ^`io.reactivex.Notification` := v1 @kind object;
  #L43043a.  return v0 @kind object;
  #L43043c.  v0:= new `java.util.NoSuchElementException`;
  #L430440.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L430446.  throw v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;

  #L430490.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L4304a4.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4304aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L4304f4.  v1:= (`io.reactivex.Notification`) v1 @kind object;
  #L4304f8.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.a:(Lio/reactivex/Notification;)V` @kind virtual;
  #L4304fe.  return @kind void;
}
procedure `void` `remove`(`io.reactivex.internal.operators.flowable.BlockingFlowableLatest$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/BlockingFlowableLatest$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430510.  v0:= new `java.lang.UnsupportedOperationException`;
  #L430514.  v1:= "Read-only iterator." @kind object;
  #L430518.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43051e.  throw v0;
}
