record `io.reactivex.internal.operators.flowable.FlowableCountSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableCountSingle$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableCountSingle$a.c` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43683c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L436842.  v0.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L436846.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436858.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43685c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L436862.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L436866.  v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43686a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436818.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43681c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L436820.  if v0 != v1 then goto L436828;
  #L436824.  v0:= 1I;
  #L436826.  goto L43682a;
  #L436828.  v0:= 0I;
  #L43682a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43687c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L436880.  v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L436884.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L436888.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.c` @type ^`long` @kind wide;
  #L43688c.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L436892.  v1:= temp @kind object;
  #L436894.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43689a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4368ac.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4368b0.  v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4368b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4368b8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4368be.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4368d0.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.c` @type ^`long` @kind wide;
  #L4368d4.  v2:= 1L;
  #L4368d8.  v0:= v0 + v2 @kind long;
  #L4368da.  v4.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.c` @type ^`long` := v0 @kind wide;
  #L4368de.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCountSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCountSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4368f0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4368f4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4368fa.  v0:= temp;
  #L4368fc.  if v0 == 0 then goto L43691e;
  #L436900.  v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L436904.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCountSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L436908.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43690e.  v0:= 9223372036854775807L;
  #L436918.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43691e.  return @kind void;
}
