record `io.reactivex.internal.operators.flowable.FlowableConcatArray$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @AccessFlag ;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableConcatArray$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatArray$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v1 @kind this, `org.reactivestreams.Publisher`[] v2 @kind object, `boolean` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.<init>:([Lorg/reactivestreams/Publisher;ZLorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L434ef4.  v0:= 0I;
  #L434ef6.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.<init>:(Z)V` @kind direct;
  #L434efc.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L434f00.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] := v2 @kind object;
  #L434f04.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` := v3 @kind boolean;
  #L434f08.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L434f0c.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L434f12.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L434f16.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v9 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L434f28.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L434f2c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L434f32.  v0:= temp;
  #L434f34.  if v0 != 0 then goto L435022;
  #L434f38.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L434f3c.  v1:= length @variable v0;
  #L434f3e.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L434f42.  v3:= 1I;
  #L434f44.  if v2 != v1 then goto L434f98;
  #L434f48.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L434f4c.  if v0 == 0 then goto L434f8c;
  #L434f50.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L434f56.  v1:= temp;
  #L434f58.  if v1 != v3 then goto L434f76;
  #L434f5c.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434f60.  v2:= 0I;
  #L434f62.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L434f68.  v0:= temp @kind object;
  #L434f6a.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L434f6e.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434f74.  goto L434f96;
  #L434f76.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434f7a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L434f7e.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L434f84.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434f8a.  goto L434f96;
  #L434f8c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434f90.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L434f96.  return @kind void;
  #L434f98.  v4:= v0[v2] @kind object;
  #L434f9c.  if v4 != 0 then goto L434fea;
  #L434fa0.  v4:= new `java.lang.NullPointerException`;
  #L434fa4.  v5:= "A Publisher entry is null" @kind object;
  #L434fa8.  call `<init>`(v4, v5) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L434fae.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L434fb2.  if v5 == 0 then goto L434fde;
  #L434fb6.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L434fba.  if v5 != 0 then goto L434fd2;
  #L434fbe.  v5:= new `java.util.ArrayList`;
  #L434fc2.  v6:= v1 - v2 @kind int;
  #L434fc6.  v6:= v6 + v3 @kind int;
  #L434fc8.  call `<init>`(v5, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L434fce.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v5 @kind object;
  #L434fd2.  call temp:= `add`(v5, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L434fd8.  v2:= v2 + 1;
  #L434fdc.  goto L434f42;
  #L434fde.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434fe2.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434fe8.  return @kind void;
  #L434fea.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L434fee.  v7:= 0L;
  #L434ff2.  v3:= lcmp(v5, v7);
  #L434ff6.  if v3 == 0 then goto L435004;
  #L434ffa.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v7 @kind wide;
  #L434ffe.  call `produced`(v9, v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L435004.  call `subscribe`(v4, v9) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43500a.  v2:= v2 + 1;
  #L43500e.  v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int` := v2;
  #L435012.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.k` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L435016.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43501c.  v3:= temp;
  #L43501e.  if v3 != 0 then goto L434f42;
  #L435022.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L435034.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.j` @type ^`boolean` @kind boolean;
  #L435038.  if v0 == 0 then goto L435070;
  #L43503c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` @kind object;
  #L435040.  if v0 != 0 then goto L435062;
  #L435044.  v0:= new `java.util.ArrayList`;
  #L435048.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.i` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L43504c.  v1:= length @variable v1;
  #L43504e.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.l` @type ^`int`;
  #L435052.  v1:= v1 - v2 @kind int;
  #L435054.  v1:= v1 + 1;
  #L435058.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L43505e.  v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.m` @type ^`java.util.List` := v0 @kind object;
  #L435062.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L435068.  call `onComplete`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onComplete:()V` @kind virtual;
  #L43506e.  goto L43507a;
  #L435070.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435074.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43507a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43508c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` @kind wide;
  #L435090.  v2:= 1L;
  #L435094.  v0:= v0 + v2 @kind long;
  #L435096.  v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.n` @type ^`long` := v0 @kind wide;
  #L43509a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatArray$a.h` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43509e.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4350a4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatArray$a` v0 @kind this, `org.reactivestreams.Subscription` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatArray$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;

  #L4350b8.  call `setSubscription`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4350be.  return @kind void;
}
