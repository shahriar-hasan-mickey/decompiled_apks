record `io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` `io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44d2b0.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` := v1 @kind object;
  #L44d2b4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44d2ba.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44d2cc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` @kind object;
  #L44d2d0.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d2d4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44d2da.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` @kind object;
  #L44d2de.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d2e2.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44d2e6.  call `onComplete`(v1, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44d2ec.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44d300.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` @kind object;
  #L44d304.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44d308.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44d30e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a` @kind object;
  #L44d312.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d316.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44d31a.  call `onError`(v1, v4, v0, v2) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44d320.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L44d334.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44d33a.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.onComplete:()V` @kind virtual;
  #L44d340.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntil$a$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntil$a$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44d354.  v0:= 9223372036854775807L;
  #L44d35e.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L44d364.  return @kind void;
}
