record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L438bc0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L438bc6.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438bca.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L438bce.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L438be0.  v0:= instanceof @variable v5 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L438be4.  if v0 == 0 then goto L438c0a;
  #L438be8.  v5:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v5 @kind object;
  #L438bec.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L438bf0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a`;
  #L438bf4.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L438bf8.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L438bfc.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L438c02.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L438c08.  goto L438c26;
  #L438c0a.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L438c0e.  v1:= new `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$b`;
  #L438c12.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L438c16.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L438c1a.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L438c20.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L438c26.  return @kind void;
}
