record `io.reactivex.internal.operators.flowable.FlowableCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableCache.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCache.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableCache.e` @AccessFlag VOLATILE;
  `io.reactivex.internal.operators.flowable.FlowableCache$b` `io.reactivex.internal.operators.flowable.FlowableCache.f` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache$b` `io.reactivex.internal.operators.flowable.FlowableCache.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache.h` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCache.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCache.j` @AccessFlag VOLATILE;
}
global `io.reactivex.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.internal.operators.flowable.FlowableCache.k` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.flowable.FlowableCache$a`[] `@@io.reactivex.internal.operators.flowable.FlowableCache.l` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L433e90.  v0:= 0I;
  #L433e92.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`[v0];
  #L433e96.  `@@io.reactivex.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] := v1 @kind object;
  #L433e9a.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`[v0];
  #L433e9e.  `@@io.reactivex.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] := v0 @kind object;
  #L433ea2.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.<init>:(Lio/reactivex/Flowable;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L433eb4.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L433eba.  v0.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`int` := v2;
  #L433ebe.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L433ec2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L433ec8.  v0.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L433ecc.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`;
  #L433ed0.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L433ed6.  v0.`io.reactivex.internal.operators.flowable.FlowableCache.f` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L433eda.  v0.`io.reactivex.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L433ede.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L433ee2.  v2:= `@@io.reactivex.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L433ee6.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L433eec.  v0.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L433ef0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCache` v4 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L433f04.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433f08.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L433f0e.  v0:= temp @kind object;
  #L433f10.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L433f14.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L433f18.  if v0 != v1 then goto L433f1e;
  #L433f1c.  return @kind void;
  #L433f1e.  v1:= length @variable v0;
  #L433f20.  v2:= v1 + 1;
  #L433f24.  v2:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`[v2];
  #L433f28.  v3:= 0I;
  #L433f2a.  call `arraycopy`(v0, v3, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L433f30.  v2[v1]:= v5 @kind object;
  #L433f34.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433f38.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L433f3e.  v0:= temp;
  #L433f40.  if v0 == 0 then goto L433f04;
  #L433f44.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableCache` v6 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.f:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4340a4.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4340a8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4340ae.  v0:= temp @kind object;
  #L4340b0.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L4340b4.  v1:= length @variable v0;
  #L4340b6.  if v1 != 0 then goto L4340bc;
  #L4340ba.  return @kind void;
  #L4340bc.  v2:= -1I;
  #L4340be.  v3:= 0I;
  #L4340c0.  v4:= 0I;
  #L4340c2.  if v4 >= v1 then goto L4340d8;
  #L4340c6.  v5:= v0[v4] @kind object;
  #L4340ca.  if v5 != v7 then goto L4340d2;
  #L4340ce.  v2:= v4;
  #L4340d0.  goto L4340d8;
  #L4340d2.  v4:= v4 + 1;
  #L4340d6.  goto L4340c2;
  #L4340d8.  if v2 >= 0 then goto L4340de;
  #L4340dc.  return @kind void;
  #L4340de.  v4:= 1I;
  #L4340e0.  if v1 != v4 then goto L4340ea;
  #L4340e4.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache.k` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L4340e8.  goto L434108;
  #L4340ea.  v5:= v1 + -1;
  #L4340ee.  v5:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`[v5];
  #L4340f2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L4340f8.  v3:= v2 + 1;
  #L4340fc.  v1:= v1 - v2 @kind int;
  #L4340fe.  v1:= v1 - v4 @kind int;
  #L434100.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L434106.  v1:= v5 @kind object;
  #L434108.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43410c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L434112.  v0:= temp;
  #L434114.  if v0 == 0 then goto L4340a4;
  #L434118.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableCache` v18 @kind this, `io.reactivex.internal.operators.flowable.FlowableCache$a` v19 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L43412c.  v0:= v18 @kind object;
  #L434130.  v1:= v19 @kind object;
  #L434134.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43413a.  v2:= temp;
  #L43413c.  if v2 == 0 then goto L434142;
  #L434140.  return @kind void;
  #L434142.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.f` @type ^`long` @kind wide;
  #L434146.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.e` @type ^`int`;
  #L43414a.  v5:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` @kind object;
  #L43414e.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L434152.  v7:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L434156.  v8:= v0.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L43415a.  v9:= 1I;
  #L43415c.  v10:= 1I;
  #L43415e.  v11:= v0.`io.reactivex.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L434162.  v12:= v0.`io.reactivex.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L434166.  v14:= 0I;
  #L434168.  v15:= lcmp(v12, v2);
  #L43416c.  if v15 != 0 then goto L434174;
  #L434170.  v12:= 1I;
  #L434172.  goto L434176;
  #L434174.  v12:= 0I;
  #L434176.  v13:= 0I;
  #L434178.  if v11 == 0 then goto L43419c;
  #L43417c.  if v12 == 0 then goto L43419c;
  #L434180.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L434184.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` @kind object;
  #L434188.  if v1 == 0 then goto L434194;
  #L43418c.  call `onError`(v7, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L434192.  goto L43419a;
  #L434194.  call `onComplete`(v7) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43419a.  return @kind void;
  #L43419c.  if v12 != 0 then goto L4341e6;
  #L4341a0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4341a6.  v11:= temp @kind wide;
  #L4341a8.  v15:= -9223372036854775808L;
  #L4341ac.  v17:= lcmp(v11, v15);
  #L4341b0.  if v17 != 0 then goto L4341ba;
  #L4341b4.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v13 @kind object;
  #L4341b8.  return @kind void;
  #L4341ba.  v13:= lcmp(v11, v2);
  #L4341be.  if v13 == 0 then goto L4341e6;
  #L4341c2.  if v4 != v8 then goto L4341ce;
  #L4341c6.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` @kind object;
  #L4341ca.  v5:= v4 @kind object;
  #L4341cc.  v4:= 0I;
  #L4341ce.  v11:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L4341d2.  v11:= v11[v4] @kind object;
  #L4341d6.  call `onNext`(v7, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4341dc.  v4:= v4 + v9 @kind int;
  #L4341de.  v11:= 1L;
  #L4341e2.  v2:= v2 + v11 @kind long;
  #L4341e4.  goto L43415e;
  #L4341e6.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.f` @type ^`long` := v2 @kind wide;
  #L4341ea.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.e` @type ^`int` := v4;
  #L4341ee.  v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v5 @kind object;
  #L4341f2.  v10:= -v10 @kind int;
  #L4341f4.  call temp:= `addAndGet`(v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4341fa.  v10:= temp;
  #L4341fc.  if v10 != 0 then goto L43415e;
  #L434200.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCache` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L433f58.  v0:= 1I;
  #L433f5a.  v4.`io.reactivex.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v0 @kind boolean;
  #L433f5e.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433f62.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L433f66.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L433f6c.  v0:= temp @kind object;
  #L433f6e.  v0:= (`io.reactivex.internal.operators.flowable.FlowableCache$a`[]) v0 @kind object;
  #L433f72.  v1:= length @variable v0;
  #L433f74.  v2:= 0I;
  #L433f76.  if v2 >= v1 then goto L433f8a;
  #L433f7a.  v3:= v0[v2] @kind object;
  #L433f7e.  call `g`(v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L433f84.  v2:= v2 + 1;
  #L433f88.  goto L433f76;
  #L433f8a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCache` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L433f9c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableCache.j` @type ^`boolean` @kind boolean;
  #L433fa0.  if v0 == 0 then goto L433fac;
  #L433fa4.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L433faa.  return @kind void;
  #L433fac.  v3.`io.reactivex.internal.operators.flowable.FlowableCache.i` @type ^`java.lang.Throwable` := v4 @kind object;
  #L433fb0.  v4:= 1I;
  #L433fb2.  v3.`io.reactivex.internal.operators.flowable.FlowableCache.j` @type ^`boolean` := v4 @kind boolean;
  #L433fb6.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433fba.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableCache.l` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$a`[] @kind object;
  #L433fbe.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L433fc4.  v4:= temp @kind object;
  #L433fc6.  v4:= (`io.reactivex.internal.operators.flowable.FlowableCache$a`[]) v4 @kind object;
  #L433fca.  v0:= length @variable v4;
  #L433fcc.  v1:= 0I;
  #L433fce.  if v1 >= v0 then goto L433fe2;
  #L433fd2.  v2:= v4[v1] @kind object;
  #L433fd6.  call `g`(v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L433fdc.  v1:= v1 + 1;
  #L433fe0.  goto L433fce;
  #L433fe2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433ff4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.h` @type ^`int`;
  #L433ff8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.c` @type ^`int`;
  #L433ffc.  v2:= 0I;
  #L433ffe.  v3:= 1I;
  #L434000.  if v0 != v1 then goto L434028;
  #L434004.  v1:= new `io.reactivex.internal.operators.flowable.FlowableCache$b`;
  #L434008.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$b;.<init>:(I)V` @kind direct;
  #L43400e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L434012.  v0[v2]:= v6 @kind object;
  #L434016.  v5.`io.reactivex.internal.operators.flowable.FlowableCache.h` @type ^`int` := v3;
  #L43401a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` @kind object;
  #L43401e.  v6.`io.reactivex.internal.operators.flowable.FlowableCache$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L434022.  v5.`io.reactivex.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L434026.  goto L43403a;
  #L434028.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.g` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` @kind object;
  #L43402c.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$b.a` @type ^`java.lang.Object`[] @kind object;
  #L434030.  v1[v0]:= v6 @kind object;
  #L434034.  v0:= v0 + v3 @kind int;
  #L434036.  v5.`io.reactivex.internal.operators.flowable.FlowableCache.h` @type ^`int` := v0;
  #L43403a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.e` @type ^`long` @kind wide;
  #L43403e.  v3:= 1L;
  #L434042.  v0:= v0 + v3 @kind long;
  #L434044.  v5.`io.reactivex.internal.operators.flowable.FlowableCache.e` @type ^`long` := v0 @kind wide;
  #L434048.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableCache.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43404c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L434052.  v6:= temp @kind object;
  #L434054.  v6:= (`io.reactivex.internal.operators.flowable.FlowableCache$a`[]) v6 @kind object;
  #L434058.  v0:= length @variable v6;
  #L43405a.  if v2 >= v0 then goto L43406e;
  #L43405e.  v1:= v6[v2] @kind object;
  #L434062.  call `g`(v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L434068.  v2:= v2 + 1;
  #L43406c.  goto L43405a;
  #L43406e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableCache` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L434080.  v0:= 9223372036854775807L;
  #L43408a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L434090.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableCache` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L434214.  v0:= new `io.reactivex.internal.operators.flowable.FlowableCache$a`;
  #L434218.  call `<init>`(v0, v4, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache;)V` @kind direct;
  #L43421e.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L434224.  call `e`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.e:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L43422a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43422e.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L434234.  v4:= temp;
  #L434236.  if v4 != 0 then goto L43425a;
  #L43423a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableCache.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43423e.  v1:= 0I;
  #L434240.  v2:= 1I;
  #L434242.  call temp:= `compareAndSet`(v4, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L434248.  v4:= temp;
  #L43424a.  if v4 == 0 then goto L43425a;
  #L43424e.  v4:= v3.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L434252.  call `subscribe`(v4, v3) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L434258.  goto L434260;
  #L43425a.  call `g`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L434260.  return @kind void;
}
