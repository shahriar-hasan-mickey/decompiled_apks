record `io.reactivex.internal.operators.flowable.FlowableDelay` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableDelay.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableDelay.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableDelay.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDelay.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelay` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler` v5 @kind object, `boolean` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.<init>:(Lio/reactivex/Flowable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43833c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L438342.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.b` @type ^`long` := v2 @kind wide;
  #L438346.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L43834a.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.d` @type ^`io.reactivex.Scheduler` := v5 @kind object;
  #L43834e.  v0.`io.reactivex.internal.operators.flowable.FlowableDelay.e` @type ^`boolean` := v6 @kind boolean;
  #L438352.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableDelay` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L438364.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.e` @type ^`boolean` @kind boolean;
  #L438368.  if v0 == 0 then goto L438370;
  #L43836c.  v2:= v9 @kind object;
  #L43836e.  goto L43837c;
  #L438370.  v0:= new `io.reactivex.subscribers.SerializedSubscriber`;
  #L438374.  call `<init>`(v0, v9) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43837a.  v2:= v0 @kind object;
  #L43837c.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L438380.  call temp:= `createWorker`(v9) @signature `Lio/reactivex/Scheduler;.createWorker:()Lio/reactivex/Scheduler$Worker;` @kind virtual;
  #L438386.  v6:= temp @kind object;
  #L438388.  v9:= v8.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L43838c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableDelay$a`;
  #L438390.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.b` @type ^`long` @kind wide;
  #L438394.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L438398.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableDelay.e` @type ^`boolean` @kind boolean;
  #L43839c.  v1:= v0 @kind object;
  #L43839e.  call `<init>`(v1, v2, v3, v5, v6, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelay$a;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;Z)V` @kind direct;
  #L4383a4.  call `subscribe`(v9, v0) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4383aa.  return @kind void;
}
