record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @AccessFlag VOLATILE;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.m` @AccessFlag ;
}
global `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.n` @AccessFlag STATIC_FINAL;
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.o` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L450cc0.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a`;
  #L450cc4.  v1:= 0I;
  #L450cc6.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @kind direct;
  #L450ccc.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.n` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` := v0 @kind object;
  #L450cd0.  v0:= new `java.lang.Object`;
  #L450cd4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L450cda.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.o` @type ^`java.lang.Object` := v0 @kind object;
  #L450cde.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L450cf0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L450cf6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L450cfa.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.b` @type ^`int` := v2;
  #L450cfe.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L450d02.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L450d08.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L450d0c.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L450d10.  v2:= 1I;
  #L450d12.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L450d18.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L450d1c.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L450d20.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L450d26.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L450d2a.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L450d2e.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L450d34.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L450d38.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L450d3c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L450d42.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L450d46.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L450d4a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L450d4e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L450d54.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L450d58.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L450db4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450db8.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.n` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` @kind object;
  #L450dbc.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L450dc2.  v0:= temp @kind object;
  #L450dc4.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L450dc8.  if v0 == 0 then goto L450dda;
  #L450dcc.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.n` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` @kind object;
  #L450dd0.  if v0 == v1 then goto L450dda;
  #L450dd4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L450dda.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L450dec.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L450df2.  v0:= temp;
  #L450df4.  if v0 == 0 then goto L450dfa;
  #L450df8.  return @kind void;
  #L450dfa.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450dfe.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L450e02.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L450e06.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.m` @type ^`long` @kind wide;
  #L450e0a.  v5:= 1I;
  #L450e0c.  v6:= 1I;
  #L450e0e.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L450e12.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L450e18.  v7:= temp;
  #L450e1a.  v8:= 0I;
  #L450e1c.  if v7 != 0 then goto L450e2c;
  #L450e20.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L450e26.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450e2a.  return @kind void;
  #L450e2c.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L450e30.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` @kind boolean;
  #L450e34.  if v9 == 0 then goto L450e68;
  #L450e38.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L450e3e.  v10:= temp @kind object;
  #L450e40.  if v10 == 0 then goto L450e68;
  #L450e44.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L450e4a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L450e50.  v1:= temp @kind object;
  #L450e52.  if v7 == 0 then goto L450e60;
  #L450e56.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450e5a.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450e60.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450e66.  return @kind void;
  #L450e68.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L450e6e.  v10:= temp @kind object;
  #L450e70.  if v10 != 0 then goto L450e78;
  #L450e74.  v11:= 1I;
  #L450e76.  goto L450e7a;
  #L450e78.  v11:= 0I;
  #L450e7a.  if v9 == 0 then goto L450eba;
  #L450e7e.  if v11 == 0 then goto L450eba;
  #L450e82.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L450e88.  v1:= temp @kind object;
  #L450e8a.  if v1 != 0 then goto L450ea4;
  #L450e8e.  if v7 == 0 then goto L450e9c;
  #L450e92.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450e96.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L450e9c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L450ea2.  goto L450eb8;
  #L450ea4.  if v7 == 0 then goto L450eb2;
  #L450ea8.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450eac.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450eb2.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450eb8.  return @kind void;
  #L450eba.  if v11 == 0 then goto L450ed2;
  #L450ebe.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.m` @type ^`long` := v3 @kind wide;
  #L450ec2.  v6:= -v6 @kind int;
  #L450ec4.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L450eca.  v6:= temp;
  #L450ecc.  if v6 != 0 then goto L450e0e;
  #L450ed0.  return @kind void;
  #L450ed2.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.o` @type ^`java.lang.Object` @kind object;
  #L450ed6.  if v10 == v9 then goto L450ee2;
  #L450eda.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L450ee0.  goto L450e0e;
  #L450ee2.  if v7 == 0 then goto L450ef0;
  #L450ee6.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450eea.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L450ef0.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450ef4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L450efa.  v7:= temp;
  #L450efc.  if v7 != 0 then goto L450e0e;
  #L450f00.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L450f04.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L450f0a.  v9:= temp @kind wide;
  #L450f0c.  v7:= lcmp(v3, v9);
  #L450f10.  if v7 == 0 then goto L450f90;
  #L450f14.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.b` @type ^`int`;
  #L450f18.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L450f1e.  v7:= temp @kind object;
  #L450f20.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.l` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L450f24.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L450f28.  call temp:= `getAndIncrement`(v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L450f2e.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.h` @type ^`java.util.concurrent.Callable` @kind object;
  #L450f32.  call temp:= `call`(v9) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L450f38.  v9:= temp @kind object;
  #L450f3a.  v10:= "The other Callable returned a null Publisher" @kind object;
  #L450f3e.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L450f44.  v9:= temp @kind object;
  #L450f46.  v9:= (`org.reactivestreams.Publisher`) v9 @kind object;
  #L450f4a.  v10:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a`;
  #L450f4e.  call `<init>`(v10, v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;)V` @kind direct;
  #L450f54.  v11:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450f58.  call temp:= `compareAndSet`(v11, v8, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L450f5e.  v8:= temp;
  #L450f60.  if v8 == 0 then goto L450e0e;
  #L450f64.  call `subscribe`(v9, v10) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L450f6a.  v8:= 1L;
  #L450f6e.  v3:= v3 + v8 @kind long;
  #L450f70.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L450f76.  goto L450e0e;
  #L450f7a.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L450f7c.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L450f82.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L450f88.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v5 @kind boolean;
  #L450f8c.  goto L450e0e;
  #L450f90.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450f94.  call `cancel`(v7) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450f9a.  call `a`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L450fa0.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L450fa4.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L450fa8.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L450fae.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L450fb4.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v5 @kind boolean;
  #L450fb8.  goto L450e0e;
  catch `java.lang.Throwable` @[L450f2e..L450f4a] goto L450f7a;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L450fd8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450fdc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450fe2.  v0:= 1I;
  #L450fe4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v0 @kind boolean;
  #L450fe8.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L450fee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450d6c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450d70.  v1:= 0I;
  #L450d72.  v2:= 1I;
  #L450d74.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L450d7a.  v0:= temp;
  #L450d7c.  if v0 == 0 then goto L450da0;
  #L450d80.  call `a`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L450d86.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L450d8a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L450d90.  v0:= temp;
  #L450d92.  if v0 != 0 then goto L450da0;
  #L450d96.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450d9a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450da0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.d:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L451000.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L451004.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45100a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45100e.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L451014.  v0:= temp;
  #L451016.  if v0 == 0 then goto L451028;
  #L45101a.  v2:= 1I;
  #L45101c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v2 @kind boolean;
  #L451020.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L451026.  goto L45102e;
  #L451028.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45102e.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$a` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.e:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L451040.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L451044.  v1:= 0I;
  #L451046.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L45104c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L451050.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.o` @type ^`java.lang.Object` @kind object;
  #L451054.  call temp:= `offer`(v3, v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L45105a.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L451060.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451074.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L45107a.  v0:= 1I;
  #L45107c.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v0 @kind boolean;
  #L451080.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L451086.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451098.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.a:()V` @kind virtual;
  #L45109e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4510a2.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4510a8.  v0:= temp;
  #L4510aa.  if v0 == 0 then goto L4510bc;
  #L4510ae.  v2:= 1I;
  #L4510b0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.k` @type ^`boolean` := v2 @kind boolean;
  #L4510b4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L4510ba.  goto L4510c2;
  #L4510bc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4510c2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4510d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4510d8.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4510de.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L4510e4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4510f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4510fc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L451102.  v0:= temp;
  #L451104.  if v0 == 0 then goto L45113a;
  #L451108.  v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L45110c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L451110.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L451116.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.e` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L45111a.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.o` @type ^`java.lang.Object` @kind object;
  #L45111e.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L451124.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.b:()V` @kind virtual;
  #L45112a.  v0:= 9223372036854775807L;
  #L451134.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L45113a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45114c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L451150.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L451156.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySupplier$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L451168.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L45116c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L451172.  v0:= temp;
  #L451174.  if v0 != 0 then goto L451182;
  #L451178.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySupplier$b.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L45117c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L451182.  return @kind void;
}
