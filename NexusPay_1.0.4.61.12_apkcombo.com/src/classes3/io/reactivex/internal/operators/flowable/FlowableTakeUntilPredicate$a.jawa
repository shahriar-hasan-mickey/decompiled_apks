record `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44d4ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44d4b2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44d4b6.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L44d4ba.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d4cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d4d0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d4d6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d4e8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L44d4ec.  if v0 != 0 then goto L44d500;
  #L44d4f0.  v0:= 1I;
  #L44d4f2.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d4f6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d4fa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d500.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d514.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L44d518.  if v0 != 0 then goto L44d52e;
  #L44d51c.  v0:= 1I;
  #L44d51e.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d522.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d526.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d52c.  goto L44d534;
  #L44d52e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d534.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d548.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` @kind boolean;
  #L44d54c.  if v0 != 0 then goto L44d59e;
  #L44d550.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d554.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44d55a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L44d55e.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44d564.  v2:= temp;
  #L44d566.  if v2 == 0 then goto L44d59e;
  #L44d56a.  v2:= 1I;
  #L44d56c.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.d` @type ^`boolean` := v2 @kind boolean;
  #L44d570.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d574.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d57a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d57e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d584.  goto L44d59e;
  #L44d586.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d588.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d58e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d592.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d598.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d59e.  return @kind void;
  catch `java.lang.Throwable` @[L44d55a..L44d566] goto L44d586;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d5bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d5c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44d5c6.  v0:= temp;
  #L44d5c8.  if v0 == 0 then goto L44d5da;
  #L44d5cc.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44d5d0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d5d4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44d5da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeUntilPredicate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d5ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeUntilPredicate$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d5f0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44d5f6.  return @kind void;
}
