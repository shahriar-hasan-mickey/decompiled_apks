record `io.reactivex.internal.operators.flowable.FlowableConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMap.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMap.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.flowable.FlowableConcatMap.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMap` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L4362cc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L4362d2.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4362d6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap.c` @type ^`int` := v3;
  #L4362da.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` := v4 @kind object;
  #L4362de.  return @kind void;
}
procedure `org.reactivestreams.Subscriber` `subscribe`(`org.reactivestreams.Subscriber` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)Lorg/reactivestreams/Subscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L436278.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] @kind object;
  #L43627c.  call temp:= `ordinal`(v5) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L436282.  v5:= temp;
  #L436284.  v5:= v0[v5];
  #L436288.  v0:= 1I;
  #L43628a.  if v5 == v0 then goto L4362ac;
  #L43628e.  v1:= 2I;
  #L436290.  if v5 == v1 then goto L4362a0;
  #L436294.  v5:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$d`;
  #L436298.  call `<init>`(v5, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$d;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L43629e.  return v5 @kind object;
  #L4362a0.  v5:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$c`;
  #L4362a4.  call `<init>`(v5, v2, v3, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L4362aa.  return v5 @kind object;
  #L4362ac.  v5:= new `io.reactivex.internal.operators.flowable.FlowableConcatMap$c`;
  #L4362b0.  v0:= 0I;
  #L4362b2.  call `<init>`(v5, v2, v3, v4, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IZ)V` @kind direct;
  #L4362b8.  return v5 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableConcatMap` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4362f0.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4362f4.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4362f8.  call temp:= `tryScalarXMapSubscribe`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableScalarXMap;.tryScalarXMapSubscribe:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)Z` @kind static;
  #L4362fe.  v0:= temp;
  #L436300.  if v0 == 0 then goto L436306;
  #L436304.  return @kind void;
  #L436306.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L43630a.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43630e.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap.c` @type ^`int`;
  #L436312.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L436316.  call temp:= `subscribe`(v5, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L43631c.  v5:= temp @kind object;
  #L43631e.  call `subscribe`(v0, v5) @signature `Lio/reactivex/Flowable;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L436324.  return @kind void;
}
