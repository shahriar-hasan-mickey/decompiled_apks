record `io.reactivex.internal.operators.flowable.FlowableReplay$m` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableReplay$a` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableReplay$m.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$m.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$m` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$m;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L448ae4.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.<init>:()V` @kind direct;
  #L448aea.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$m.d` @type ^`int` := v1;
  #L448aee.  return @kind void;
}
procedure `void` `k`(`io.reactivex.internal.operators.flowable.FlowableReplay$m` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$m;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L448b00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$a.b` @type ^`int`;
  #L448b04.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReplay$m.d` @type ^`int`;
  #L448b08.  if v0 <= v1 then goto L448b12;
  #L448b0c.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$a;.h:()V` @kind virtual;
  #L448b12.  return @kind void;
}
