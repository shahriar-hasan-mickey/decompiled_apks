record `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L438a04.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;)V` @kind direct;
  #L438a0a.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L438a0e.  v0.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L438a12.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438a24.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L438a2a.  v3:= temp;
  #L438a2c.  if v3 != 0 then goto L438a3e;
  #L438a30.  v3:= v2.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L438a34.  v0:= 1L;
  #L438a38.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L438a3e.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L438988.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L43898c.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L438992.  v0:= temp @kind object;
  #L438994.  if v0 != 0 then goto L43899c;
  #L438998.  v0:= 0I;
  #L43899a.  return v0 @kind object;
  #L43899c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L4389a0.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4389a6.  v1:= temp @kind object;
  #L4389a8.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L4389ac.  v3:= 1I;
  #L4389ae.  if v2 != 0 then goto L4389bc;
  #L4389b2.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v3 @kind boolean;
  #L4389b6.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4389ba.  return v0 @kind object;
  #L4389bc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L4389c0.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L4389c4.  call temp:= `test`(v2, v4, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L4389ca.  v2:= temp;
  #L4389cc.  if v2 != 0 then goto L4389d6;
  #L4389d0.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4389d4.  return v0 @kind object;
  #L4389d6.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4389da.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4389de.  if v0 == v3 then goto L438988;
  #L4389e2.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.upstream` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4389e6.  v1:= 1L;
  #L4389ea.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4389f0.  goto L438988;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43896c.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L438972.  v1:= temp;
  #L438974.  return v1;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDistinctUntilChanged$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4388e0.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.done` @type ^`boolean` @kind boolean;
  #L4388e4.  v1:= 0I;
  #L4388e6.  if v0 == 0 then goto L4388ec;
  #L4388ea.  return v1;
  #L4388ec.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.sourceMode` @type ^`int`;
  #L4388f0.  if v0 == 0 then goto L438902;
  #L4388f4.  v0:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L4388f8.  call temp:= `tryOnNext`(v0, v6) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4388fe.  v6:= temp;
  #L438900.  return v6;
  #L438902.  v0:= 1I;
  #L438904.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.a` @type ^`io.reactivex.functions.Function` @kind object;
  #L438908.  call temp:= `apply`(v2, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43890e.  v2:= temp @kind object;
  #L438910.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` @kind boolean;
  #L438914.  if v3 == 0 then goto L438932;
  #L438918.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L43891c.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` @kind object;
  #L438920.  call temp:= `test`(v3, v4, v2) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L438926.  v3:= temp;
  #L438928.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L43892c.  if v3 == 0 then goto L43893a;
  #L438930.  return v1;
  #L438932.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.d` @type ^`boolean` := v0 @kind boolean;
  #L438936.  v5.`io.reactivex.internal.operators.flowable.FlowableDistinctUntilChanged$a.c` @type ^`java.lang.Object` := v2 @kind object;
  #L43893a.  v1:= v5.`io.reactivex.internal.subscribers.BasicFuseableConditionalSubscriber.downstream` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L43893e.  call `onNext`(v1, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L438944.  return v0;
  #L438946.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L438948.  call `fail`(v5, v6) @signature `Lio/reactivex/internal/subscribers/BasicFuseableConditionalSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43894e.  return v0;
  catch `java.lang.Throwable` @[L438904..L43893a] goto L438946;
}
