record `io.reactivex.internal.operators.flowable.FlowableCreate$i` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableEmitter` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableCreate$b` `io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$i.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableCreate$b` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableCreate$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L437404.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43740a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` := v2 @kind object;
  #L43740e.  v2:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L437412.  call `<init>`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L437418.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v2 @kind object;
  #L43741c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L437420.  v0:= 16I;
  #L437424.  call `<init>`(v2, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43742a.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L43742e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L437440.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L437446.  v0:= temp;
  #L437448.  if v0 != 0 then goto L437452;
  #L43744c.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L437452.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v8 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L437464.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437468.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43746c.  v2:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L437470.  v3:= 1I;
  #L437472.  v4:= 1I;
  #L437474.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L43747a.  v5:= temp;
  #L43747c.  if v5 == 0 then goto L437488;
  #L437480.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L437486.  return @kind void;
  #L437488.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43748e.  v5:= temp @kind object;
  #L437490.  if v5 == 0 then goto L4374aa;
  #L437494.  call `clear`(v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L43749a.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4374a0.  v1:= temp @kind object;
  #L4374a2.  call `onError`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4374a8.  return @kind void;
  #L4374aa.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L4374ae.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4374b4.  v6:= temp @kind object;
  #L4374b6.  if v6 != 0 then goto L4374be;
  #L4374ba.  v7:= 1I;
  #L4374bc.  goto L4374c0;
  #L4374be.  v7:= 0I;
  #L4374c0.  if v5 == 0 then goto L4374d0;
  #L4374c4.  if v7 == 0 then goto L4374d0;
  #L4374c8.  call `onComplete`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onComplete:()V` @kind virtual;
  #L4374ce.  return @kind void;
  #L4374d0.  if v7 == 0 then goto L4374e4;
  #L4374d4.  v4:= -v4 @kind int;
  #L4374d6.  call temp:= `addAndGet`(v8, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4374dc.  v4:= temp;
  #L4374de.  if v4 != 0 then goto L437474;
  #L4374e2.  return @kind void;
  #L4374e4.  call `onNext`(v0, v6) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4374ea.  goto L437474;
}
procedure `boolean` `isCancelled`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.isCancelled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437330.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437334.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L43733a.  v0:= temp;
  #L43733c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4374fc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437500.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L437506.  v0:= temp;
  #L437508.  if v0 != 0 then goto L437522;
  #L43750c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L437510.  if v0 == 0 then goto L437516;
  #L437514.  goto L437522;
  #L437516.  v0:= 1I;
  #L437518.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v0 @kind boolean;
  #L43751c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L437522.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437534.  call temp:= `tryOnError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43753a.  v0:= temp;
  #L43753c.  if v0 != 0 then goto L437546;
  #L437540.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L437546.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437558.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L43755c.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L437562.  v0:= temp;
  #L437564.  if v0 != 0 then goto L4375ea;
  #L437568.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L43756c.  if v0 == 0 then goto L437572;
  #L437570.  goto L4375ea;
  #L437572.  if v3 != 0 then goto L43758c;
  #L437576.  v3:= new `java.lang.NullPointerException`;
  #L43757a.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43757e.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L437584.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43758a.  return @kind void;
  #L43758c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L437592.  v0:= temp;
  #L437594.  if v0 != 0 then goto L4375c0;
  #L437598.  v0:= 0I;
  #L43759a.  v1:= 1I;
  #L43759c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L4375a2.  v0:= temp;
  #L4375a4.  if v0 == 0 then goto L4375c0;
  #L4375a8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4375ac.  call `onNext`(v0, v3) @signature `Lio/reactivex/Emitter;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4375b2.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L4375b8.  v3:= temp;
  #L4375ba.  if v3 != 0 then goto L4375dc;
  #L4375be.  return @kind void;
  #L4375c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.c` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4375c4.  @monitorenter v0
  #L4375c6.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4375cc.  @monitorexit v0
  #L4375ce.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4375d4.  v3:= temp;
  #L4375d6.  if v3 == 0 then goto L4375dc;
  #L4375da.  return @kind void;
  #L4375dc.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.b:()V` @kind virtual;
  #L4375e2.  return @kind void;
  #L4375e4.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4375e6.  @monitorexit v0
  #L4375e8.  throw v3;
  #L4375ea.  return @kind void;
  catch `java.lang.Throwable` @[L4375c6..L4375ce] goto L4375e4;
  catch `java.lang.Throwable` @[L4375e6..L4375e8] goto L4375e4;
}
procedure `long` `requested`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.requested:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4373e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4373e8.  call temp:= `requested`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.requested:()J` @kind virtual;
  #L4373ee.  v0:= temp @kind wide;
  #L4373f0.  return v0 @kind wide;
}
procedure `io.reactivex.FlowableEmitter` `serialize`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.serialize:()Lio/reactivex/FlowableEmitter;` @AccessFlag PUBLIC {
    temp;

  #L4373b0.  return v0 @kind object;
}
procedure `void` `setCancellable`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.functions.Cancellable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L437610.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437614.  call `setCancellable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setCancellable:(Lio/reactivex/functions/Cancellable;)V` @kind virtual;
  #L43761a.  return @kind void;
}
procedure `void` `setDisposable`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43762c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437630.  call `setDisposable`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.setDisposable:(Lio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L437636.  return @kind void;
}
procedure `java.lang.String` `toString`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4373c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L4373c8.  call temp:= `toString`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.toString:()Ljava/lang/String;` @kind virtual;
  #L4373ce.  v0:= temp @kind object;
  #L4373d0.  return v0 @kind object;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$i` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L437350.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.a` @type ^`io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind object;
  #L437354.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L43735a.  v0:= temp;
  #L43735c.  v1:= 0I;
  #L43735e.  if v0 != 0 then goto L43739c;
  #L437362.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` @kind boolean;
  #L437366.  if v0 == 0 then goto L43736c;
  #L43736a.  goto L43739c;
  #L43736c.  if v3 != 0 then goto L43737e;
  #L437370.  v3:= new `java.lang.NullPointerException`;
  #L437374.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L437378.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43737e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L437382.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L437388.  v3:= temp;
  #L43738a.  if v3 == 0 then goto L43739c;
  #L43738e.  v3:= 1I;
  #L437390.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$i.d` @type ^`boolean` := v3 @kind boolean;
  #L437394.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$i;.a:()V` @kind virtual;
  #L43739a.  return v3;
  #L43739c.  return v1;
}
