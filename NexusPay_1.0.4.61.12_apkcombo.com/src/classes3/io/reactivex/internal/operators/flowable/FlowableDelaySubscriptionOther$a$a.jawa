record `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4380dc.  v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` := v1 @kind object;
  #L4380e0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4380e6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4380f8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4380fe.  v0:= temp @kind object;
  #L438100.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L438104.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L438108.  if v0 == v1 then goto L438116;
  #L43810c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L438110.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a;.a:()V` @kind virtual;
  #L438116.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L438128.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43812e.  v0:= temp @kind object;
  #L438130.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L438134.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L438138.  if v0 == v1 then goto L43814c;
  #L43813c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L438140.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L438144.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43814a.  goto L438152;
  #L43814c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L438152.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L438164.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43816a.  v2:= temp @kind object;
  #L43816c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L438170.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L438174.  if v2 == v0 then goto L43818e;
  #L438178.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43817e.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L438184.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a` @kind object;
  #L438188.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a;.a:()V` @kind virtual;
  #L43818e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableDelaySubscriptionOther$a$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDelaySubscriptionOther$a$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4381a0.  call temp:= `setOnce`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4381a6.  v0:= temp;
  #L4381a8.  if v0 == 0 then goto L4381bc;
  #L4381ac.  v0:= 9223372036854775807L;
  #L4381b6.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4381bc.  return @kind void;
}
