record `io.reactivex.internal.operators.flowable.FlowableWindow$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @AccessFlag FINAL;
  `java.util.ArrayDeque` `io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `long` v5 , `int` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44f998.  v0:= 1I;
  #L44f99a.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L44f9a0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44f9a4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` := v3 @kind wide;
  #L44f9a8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` := v5 @kind wide;
  #L44f9ac.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L44f9b0.  call `<init>`(v2, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L44f9b6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v2 @kind object;
  #L44f9ba.  v2:= new `java.util.ArrayDeque`;
  #L44f9be.  call `<init>`(v2) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L44f9c4.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` := v2 @kind object;
  #L44f9c8.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44f9cc.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f9d2.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44f9d6.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44f9da.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f9e0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44f9e4.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44f9e8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44f9ee.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L44f9f2.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L44f9f6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44f9fc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L44fa00.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @type ^`int` := v7;
  #L44fa04.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `io.reactivex.internal.queue.SpscLinkedArrayQueue` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44f94c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L44f950.  v1:= 1I;
  #L44f952.  if v0 == 0 then goto L44f95e;
  #L44f956.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f95c.  return v1;
  #L44f95e.  if v3 == 0 then goto L44f984;
  #L44f962.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` @kind object;
  #L44f966.  if v3 == 0 then goto L44f978;
  #L44f96a.  call `clear`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L44f970.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f976.  return v1;
  #L44f978.  if v4 == 0 then goto L44f984;
  #L44f97c.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f982.  return v1;
  #L44f984.  v3:= 0I;
  #L44f986.  return v3;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L44fa48.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44fa4c.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44fa52.  v0:= temp;
  #L44fa54.  if v0 == 0 then goto L44fa5a;
  #L44fa58.  return @kind void;
  #L44fa5a.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44fa5e.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44fa62.  v2:= 1I;
  #L44fa64.  v3:= 1I;
  #L44fa66.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44fa6a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44fa70.  v4:= temp @kind wide;
  #L44fa72.  v6:= 0L;
  #L44fa76.  v8:= v6 @kind wide;
  #L44fa78.  v10:= lcmp(v8, v4);
  #L44fa7c.  if v10 == 0 then goto L44fabc;
  #L44fa80.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L44fa84.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44fa8a.  v12:= temp @kind object;
  #L44fa8c.  v12:= (`io.reactivex.processors.UnicastProcessor`) v12 @kind object;
  #L44fa90.  if v12 != 0 then goto L44fa98;
  #L44fa94.  v13:= 1I;
  #L44fa96.  goto L44fa9a;
  #L44fa98.  v13:= 0I;
  #L44fa9a.  call temp:= `a`(v14, v11, v13, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L44faa0.  v11:= temp;
  #L44faa2.  if v11 == 0 then goto L44faa8;
  #L44faa6.  return @kind void;
  #L44faa8.  if v13 == 0 then goto L44faae;
  #L44faac.  goto L44fabc;
  #L44faae.  call `onNext`(v0, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44fab4.  v10:= 1L;
  #L44fab8.  v8:= v8 + v10 @kind long;
  #L44faba.  goto L44fa78;
  #L44fabc.  if v10 != 0 then goto L44fada;
  #L44fac0.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L44fac4.  call temp:= `isEmpty`(v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L44faca.  v11:= temp;
  #L44facc.  call temp:= `a`(v14, v10, v11, v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.a:(ZZLorg/reactivestreams/Subscriber;Lio/reactivex/internal/queue/SpscLinkedArrayQueue;)Z` @kind virtual;
  #L44fad2.  v10:= temp;
  #L44fad4.  if v10 == 0 then goto L44fada;
  #L44fad8.  return @kind void;
  #L44fada.  v10:= lcmp(v8, v6);
  #L44fade.  if v10 == 0 then goto L44fb00;
  #L44fae2.  v6:= 9223372036854775807L;
  #L44faec.  v10:= lcmp(v4, v6);
  #L44faf0.  if v10 == 0 then goto L44fb00;
  #L44faf4.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44faf8.  v5:= -v8 @kind long;
  #L44fafa.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L44fb00.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableWindow$b.i` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L44fb04.  v3:= -v3 @kind int;
  #L44fb06.  call temp:= `addAndGet`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44fb0c.  v3:= temp;
  #L44fb0e.  if v3 != 0 then goto L44fa66;
  #L44fb12.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44fa18.  v0:= 1I;
  #L44fa1a.  v3.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` := v0 @kind boolean;
  #L44fa1e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$b.f` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fa22.  v2:= 0I;
  #L44fa24.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44fa2a.  v0:= temp;
  #L44fa2c.  if v0 == 0 then goto L44fa36;
  #L44fa30.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.run:()V` @kind virtual;
  #L44fa36.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44fb24.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L44fb28.  if v0 == 0 then goto L44fb2e;
  #L44fb2c.  return @kind void;
  #L44fb2e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fb32.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44fb38.  v0:= temp @kind object;
  #L44fb3a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44fb40.  v1:= temp;
  #L44fb42.  if v1 == 0 then goto L44fb5a;
  #L44fb46.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44fb4c.  v1:= temp @kind object;
  #L44fb4e.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L44fb52.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44fb58.  goto L44fb3a;
  #L44fb5a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fb5e.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L44fb64.  v0:= 1I;
  #L44fb66.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v0 @kind boolean;
  #L44fb6a.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L44fb70.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44fb84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L44fb88.  if v0 == 0 then goto L44fb94;
  #L44fb8c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44fb92.  return @kind void;
  #L44fb94.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fb98.  call temp:= `iterator`(v0) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44fb9e.  v0:= temp @kind object;
  #L44fba0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44fba6.  v1:= temp;
  #L44fba8.  if v1 == 0 then goto L44fbc0;
  #L44fbac.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44fbb2.  v1:= temp @kind object;
  #L44fbb4.  v1:= (`org.reactivestreams.Processor`) v1 @kind object;
  #L44fbb8.  call `onError`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44fbbe.  goto L44fba0;
  #L44fbc0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fbc4.  call `clear`(v0) @signature `Ljava/util/ArrayDeque;.clear:()V` @kind virtual;
  #L44fbca.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.o` @type ^`java.lang.Throwable` := v3 @kind object;
  #L44fbce.  v3:= 1I;
  #L44fbd0.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` := v3 @kind boolean;
  #L44fbd4.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L44fbda.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v8 @kind this, `java.lang.Object` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L44fbec.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.n` @type ^`boolean` @kind boolean;
  #L44fbf0.  if v0 == 0 then goto L44fbf6;
  #L44fbf4.  return @kind void;
  #L44fbf6.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` @kind wide;
  #L44fbfa.  v2:= 0L;
  #L44fbfe.  v4:= lcmp(v0, v2);
  #L44fc02.  if v4 != 0 then goto L44fc3a;
  #L44fc06.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.p` @type ^`boolean` @kind boolean;
  #L44fc0a.  if v4 != 0 then goto L44fc3a;
  #L44fc0e.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44fc14.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.j` @type ^`int`;
  #L44fc18.  call temp:= `create`(v4, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L44fc1e.  v4:= temp @kind object;
  #L44fc20.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fc24.  call temp:= `offer`(v5, v4) @signature `Ljava/util/ArrayDeque;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L44fc2a.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L44fc2e.  call temp:= `offer`(v5, v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L44fc34.  call `b`(v8) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L44fc3a.  v4:= 1L;
  #L44fc3e.  v0:= v0 + v4 @kind long;
  #L44fc40.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fc44.  call temp:= `iterator`(v6) @signature `Ljava/util/ArrayDeque;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L44fc4a.  v6:= temp @kind object;
  #L44fc4c.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L44fc52.  v7:= temp;
  #L44fc54.  if v7 == 0 then goto L44fc6c;
  #L44fc58.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L44fc5e.  v7:= temp @kind object;
  #L44fc60.  v7:= (`org.reactivestreams.Processor`) v7 @kind object;
  #L44fc64.  call `onNext`(v7, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44fc6a.  goto L44fc4c;
  #L44fc6c.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` @kind wide;
  #L44fc70.  v6:= v6 + v4 @kind long;
  #L44fc72.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L44fc76.  v9:= lcmp(v6, v4);
  #L44fc7a.  if v9 != 0 then goto L44fca4;
  #L44fc7e.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L44fc82.  v6:= v6 - v4 @kind long;
  #L44fc84.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v6 @kind wide;
  #L44fc88.  v9:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.e` @type ^`java.util.ArrayDeque` @kind object;
  #L44fc8c.  call temp:= `poll`(v9) @signature `Ljava/util/ArrayDeque;.poll:()Ljava/lang/Object;` @kind virtual;
  #L44fc92.  v9:= temp @kind object;
  #L44fc94.  v9:= (`org.reactivestreams.Processor`) v9 @kind object;
  #L44fc98.  if v9 == 0 then goto L44fca8;
  #L44fc9c.  call `onComplete`(v9) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44fca2.  goto L44fca8;
  #L44fca4.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.l` @type ^`long` := v6 @kind wide;
  #L44fca8.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L44fcac.  v9:= lcmp(v0, v4);
  #L44fcb0.  if v9 != 0 then goto L44fcba;
  #L44fcb4.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v2 @kind wide;
  #L44fcb8.  goto L44fcbe;
  #L44fcba.  v8.`io.reactivex.internal.operators.flowable.FlowableWindow$b.k` @type ^`long` := v0 @kind wide;
  #L44fcbe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fcd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44fcd4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44fcda.  v0:= temp;
  #L44fcdc.  if v0 == 0 then goto L44fcee;
  #L44fce0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44fce4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44fce8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44fcee.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44fd00.  call temp:= `validate`(v5) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44fd06.  v0:= temp;
  #L44fd08.  if v0 == 0 then goto L44fd80;
  #L44fd0c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44fd10.  call temp:= `add`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44fd16.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fd1a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44fd20.  v0:= temp;
  #L44fd22.  if v0 != 0 then goto L44fd64;
  #L44fd26.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.g` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44fd2a.  v1:= 0I;
  #L44fd2c.  v2:= 1I;
  #L44fd2e.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44fd34.  v0:= temp;
  #L44fd36.  if v0 == 0 then goto L44fd64;
  #L44fd3a.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L44fd3e.  v2:= 1L;
  #L44fd42.  v5:= v5 - v2 @kind long;
  #L44fd44.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44fd4a.  v5:= temp @kind wide;
  #L44fd4c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.c` @type ^`long` @kind wide;
  #L44fd50.  call temp:= `addCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCap:(JJ)J` @kind static;
  #L44fd56.  v5:= temp @kind wide;
  #L44fd58.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44fd5c.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44fd62.  goto L44fd7a;
  #L44fd64.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.d` @type ^`long` @kind wide;
  #L44fd68.  call temp:= `multiplyCap`(v0, v5) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44fd6e.  v5:= temp @kind wide;
  #L44fd70.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44fd74.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44fd7a.  call `b`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.b:()V` @kind virtual;
  #L44fd80.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44fd94.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44fd9a.  v0:= temp;
  #L44fd9c.  if v0 != 0 then goto L44fdaa;
  #L44fda0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$b.m` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44fda4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44fdaa.  return @kind void;
}
