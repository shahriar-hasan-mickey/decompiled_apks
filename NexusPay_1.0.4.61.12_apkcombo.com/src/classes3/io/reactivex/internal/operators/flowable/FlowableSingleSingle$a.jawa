record `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44b18c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44b192.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L44b196.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` := v2 @kind object;
  #L44b19a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b1ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b1b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b1b6.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b1ba.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44b1be.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b168.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b16c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b170.  if v0 != v1 then goto L44b178;
  #L44b174.  v0:= 1I;
  #L44b176.  goto L44b17a;
  #L44b178.  v0:= 0I;
  #L44b17a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b1d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L44b1d4.  if v0 == 0 then goto L44b1da;
  #L44b1d8.  return @kind void;
  #L44b1da.  v0:= 1I;
  #L44b1dc.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44b1e0.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b1e4.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44b1e8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L44b1ec.  v1:= 0I;
  #L44b1ee.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v1 @kind object;
  #L44b1f2.  if v0 != 0 then goto L44b1fa;
  #L44b1f6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.b` @type ^`java.lang.Object` @kind object;
  #L44b1fa.  if v0 == 0 then goto L44b20a;
  #L44b1fe.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44b202.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44b208.  goto L44b21e;
  #L44b20a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44b20e.  v1:= new `java.util.NoSuchElementException`;
  #L44b212.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L44b218.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b21e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44b230.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L44b234.  if v0 == 0 then goto L44b240;
  #L44b238.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44b23e.  return @kind void;
  #L44b240.  v0:= 1I;
  #L44b242.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44b246.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b24a.  v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L44b24e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44b252.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b258.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b26c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` @kind boolean;
  #L44b270.  if v0 == 0 then goto L44b276;
  #L44b274.  return @kind void;
  #L44b276.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` @kind object;
  #L44b27a.  if v0 == 0 then goto L44b2b0;
  #L44b27e.  v3:= 1I;
  #L44b280.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.d` @type ^`boolean` := v3 @kind boolean;
  #L44b284.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b288.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44b28e.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44b292.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44b296.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44b29a.  v0:= new `java.lang.IllegalArgumentException`;
  #L44b29e.  v1:= "Sequence contains more than one element!" @kind object;
  #L44b2a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44b2a8.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44b2ae.  return @kind void;
  #L44b2b0.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.e` @type ^`java.lang.Object` := v3 @kind object;
  #L44b2b4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44b2c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44b2cc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44b2d2.  v0:= temp;
  #L44b2d4.  if v0 == 0 then goto L44b2f6;
  #L44b2d8.  v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L44b2dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSingleSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44b2e0.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44b2e6.  v0:= 9223372036854775807L;
  #L44b2f0.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44b2f6.  return @kind void;
}
