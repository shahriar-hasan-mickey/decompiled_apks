record `io.reactivex.internal.operators.flowable.FlowableRangeLong$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446708.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L44670e.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L446712.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L446724.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L446728.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L44672c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L446730.  v5:= lcmp(v3, v0);
  #L446734.  if v5 == 0 then goto L446758;
  #L446738.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L44673c.  if v5 == 0 then goto L446742;
  #L446740.  return @kind void;
  #L446742.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L446748.  v5:= temp @kind object;
  #L44674a.  call temp:= `tryOnNext`(v2, v5) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L446750.  v5:= 1L;
  #L446754.  v3:= v3 + v5 @kind long;
  #L446756.  goto L446730;
  #L446758.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L44675c.  if v0 == 0 then goto L446762;
  #L446760.  return @kind void;
  #L446762.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L446768.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$b` v12 @kind this, `long` v13 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$b;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L44677c.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L446780.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L446784.  v4:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L446788.  v5:= 0L;
  #L44678c.  v7:= v5 @kind wide;
  #L44678e.  v9:= lcmp(v7, v13);
  #L446792.  if v9 == 0 then goto L4467c6;
  #L446796.  v9:= lcmp(v2, v0);
  #L44679a.  if v9 == 0 then goto L4467c6;
  #L44679e.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4467a2.  if v9 == 0 then goto L4467a8;
  #L4467a6.  return @kind void;
  #L4467a8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4467ae.  v9:= temp @kind object;
  #L4467b0.  call temp:= `tryOnNext`(v4, v9) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L4467b6.  v9:= temp;
  #L4467b8.  v10:= 1L;
  #L4467bc.  if v9 == 0 then goto L4467c2;
  #L4467c0.  v7:= v7 + v10 @kind long;
  #L4467c2.  v2:= v2 + v10 @kind long;
  #L4467c4.  goto L44678e;
  #L4467c6.  v13:= lcmp(v2, v0);
  #L4467ca.  if v13 != 0 then goto L4467de;
  #L4467ce.  v13:= v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4467d2.  if v13 != 0 then goto L4467dc;
  #L4467d6.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4467dc.  return @kind void;
  #L4467de.  call temp:= `get`(v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4467e4.  v13:= temp @kind wide;
  #L4467e6.  v9:= lcmp(v7, v13);
  #L4467ea.  if v9 != 0 then goto L44678e;
  #L4467ee.  v12.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L4467f2.  v13:= -v7 @kind long;
  #L4467f4.  call temp:= `addAndGet`(v12, v13) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L4467fa.  v13:= temp @kind wide;
  #L4467fc.  v7:= lcmp(v13, v5);
  #L446800.  if v7 != 0 then goto L44678c;
  #L446804.  return @kind void;
}
