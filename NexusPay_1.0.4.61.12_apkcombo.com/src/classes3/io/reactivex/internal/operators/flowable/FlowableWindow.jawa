record `io.reactivex.internal.operators.flowable.FlowableWindow` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `long` v2 , `long` v4 , `int` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.<init>:(Lio/reactivex/Flowable;JJI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L452260.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L452266.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.b` @type ^`long` := v2 @kind wide;
  #L45226a.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.c` @type ^`long` := v4 @kind wide;
  #L45226e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindow.d` @type ^`int` := v6;
  #L452272.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableWindow` v9 @kind this, `org.reactivestreams.Subscriber` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L452284.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L452288.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L45228c.  v4:= lcmp(v0, v2);
  #L452290.  if v4 != 0 then goto L4522b2;
  #L452294.  v0:= v9.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L452298.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindow$a`;
  #L45229c.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4522a0.  v4:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4522a4.  call `<init>`(v1, v10, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @kind direct;
  #L4522aa.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4522b0.  goto L452304;
  #L4522b2.  v4:= lcmp(v0, v2);
  #L4522b6.  if v4 <= 0 then goto L4522e0;
  #L4522ba.  v0:= v9.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4522be.  v8:= new `io.reactivex.internal.operators.flowable.FlowableWindow$c`;
  #L4522c2.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4522c6.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L4522ca.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4522ce.  v1:= v8 @kind object;
  #L4522d0.  v2:= v10 @kind object;
  #L4522d2.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$c;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L4522d8.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L4522de.  goto L452304;
  #L4522e0.  v0:= v9.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L4522e4.  v8:= new `io.reactivex.internal.operators.flowable.FlowableWindow$b`;
  #L4522e8.  v3:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.b` @type ^`long` @kind wide;
  #L4522ec.  v5:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.c` @type ^`long` @kind wide;
  #L4522f0.  v7:= v9.`io.reactivex.internal.operators.flowable.FlowableWindow.d` @type ^`int`;
  #L4522f4.  v1:= v8 @kind object;
  #L4522f6.  v2:= v10 @kind object;
  #L4522f8.  call `<init>`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$b;.<init>:(Lorg/reactivestreams/Subscriber;JJI)V` @kind direct;
  #L4522fe.  call `subscribe`(v0, v8) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L452304.  return @kind void;
}
