record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `int` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `int` v2 , `boolean` v3 , `boolean` v4 , `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.<init>:(Lio/reactivex/Flowable;IZZLio/reactivex/functions/Action;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L443e78.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L443e7e.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.b` @type ^`int` := v2;
  #L443e82.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @type ^`boolean` := v3 @kind boolean;
  #L443e86.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @type ^`boolean` := v4 @kind boolean;
  #L443e8a.  v0.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L443e8e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer` v8 @kind this, `org.reactivestreams.Subscriber` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L443ea0.  v0:= v8.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L443ea4.  v7:= new `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a`;
  #L443ea8.  v3:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.b` @type ^`int`;
  #L443eac.  v4:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.c` @type ^`boolean` @kind boolean;
  #L443eb0.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.d` @type ^`boolean` @kind boolean;
  #L443eb4.  v6:= v8.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer.e` @type ^`io.reactivex.functions.Action` @kind object;
  #L443eb8.  v1:= v7 @kind object;
  #L443eba.  v2:= v9 @kind object;
  #L443ebc.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/functions/Action;)V` @kind direct;
  #L443ec2.  call `subscribe`(v0, v7) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L443ec8.  return @kind void;
}
