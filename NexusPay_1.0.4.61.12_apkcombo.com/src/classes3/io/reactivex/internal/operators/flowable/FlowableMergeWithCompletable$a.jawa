record `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a$a` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.g` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L441d6c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L441d72.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L441d76.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L441d7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L441d80.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L441d84.  v1:= new `io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a$a`;
  #L441d88.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;)V` @kind direct;
  #L441d8e.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a$a` := v1 @kind object;
  #L441d92.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L441d96.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L441d9c.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L441da0.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L441da4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L441daa.  v0.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L441dae.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L441e84.  v0:= 1I;
  #L441e86.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.g` @type ^`boolean` := v0 @kind boolean;
  #L441e8a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.f` @type ^`boolean` @kind boolean;
  #L441e8e.  if v0 == 0 then goto L441ea0;
  #L441e92.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441e96.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L441e9a.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L441ea0.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L441eb4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441eb8.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L441ebe.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441ec2.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L441ec6.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L441ecc.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L441dc0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441dc4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L441dca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a$a` @kind object;
  #L441dce.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L441dd4.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441de8.  v0:= 1I;
  #L441dea.  v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L441dee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.g` @type ^`boolean` @kind boolean;
  #L441df2.  if v0 == 0 then goto L441e04;
  #L441df6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441dfa.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L441dfe.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L441e04.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441e18.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a$a` @kind object;
  #L441e1c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L441e22.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441e26.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L441e2a.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L441e30.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441e44.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L441e48.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.d` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L441e4c.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L441e52.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441e64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441e68.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L441e6c.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L441e72.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableMergeWithCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L441ee0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L441ee4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableMergeWithCompletable$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L441ee8.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L441eee.  return @kind void;
}
