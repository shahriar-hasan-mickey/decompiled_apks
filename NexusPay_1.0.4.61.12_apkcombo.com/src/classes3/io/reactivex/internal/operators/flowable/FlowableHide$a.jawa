record `io.reactivex.internal.operators.flowable.FlowableHide$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableHide$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableHide$a.b` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43f94c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43f952.  v0.`io.reactivex.internal.operators.flowable.FlowableHide$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43f956.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f968.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43f96c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43f972.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f984.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43f988.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43f98e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f9a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43f9a4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43f9aa.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f9bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43f9c0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43f9c6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43f9d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43f9dc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43f9e2.  v0:= temp;
  #L43f9e4.  if v0 == 0 then goto L43f9f6;
  #L43f9e8.  v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L43f9ec.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43f9f0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43f9f6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableHide$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableHide$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43fa08.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableHide$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43fa0c.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43fa12.  return @kind void;
}
