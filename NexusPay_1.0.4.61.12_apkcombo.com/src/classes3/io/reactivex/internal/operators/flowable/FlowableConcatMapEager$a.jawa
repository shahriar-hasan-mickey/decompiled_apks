record `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.subscribers.InnerQueuedSubscriberSupport` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @AccessFlag VOLATILE;
  `io.reactivex.internal.subscribers.InnerQueuedSubscriber` `io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `int` v4 , `io.reactivex.internal.util.ErrorMode` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;IILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L435b8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L435b92.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L435b96.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L435b9a.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int` := v3;
  #L435b9e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int` := v4;
  #L435ba2.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` := v5 @kind object;
  #L435ba6.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L435baa.  call temp:= `min`(v4, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L435bb0.  v2:= temp;
  #L435bb2.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L435bb8.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L435bbc.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L435bc0.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L435bc6.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L435bca.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L435bce.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L435bd4.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L435bd8.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L435c20.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L435c24.  v1:= 0I;
  #L435c26.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v1 @kind object;
  #L435c2a.  if v0 == 0 then goto L435c34;
  #L435c2e.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435c34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435c38.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L435c3e.  v0:= temp @kind object;
  #L435c40.  v0:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v0 @kind object;
  #L435c44.  if v0 == 0 then goto L435c50;
  #L435c48.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435c4e.  goto L435c34;
  #L435c50.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L435ef0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435ef6.  v0:= temp;
  #L435ef8.  if v0 != 0 then goto L435f0e;
  #L435efc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435f02.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L435f08.  v0:= temp;
  #L435f0a.  if v0 != 0 then goto L435efc;
  #L435f0e.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435bec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L435bf0.  if v0 == 0 then goto L435bf6;
  #L435bf4.  return @kind void;
  #L435bf6.  v0:= 1I;
  #L435bf8.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` := v0 @kind boolean;
  #L435bfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435c00.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435c06.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L435c0c.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v19 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L435c64.  v1:= v19 @kind object;
  #L435c68.  call temp:= `getAndIncrement`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L435c6e.  v0:= temp;
  #L435c70.  if v0 == 0 then goto L435c76;
  #L435c74.  return @kind void;
  #L435c76.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` @kind object;
  #L435c7a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L435c7e.  v3:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435c82.  v5:= 1I;
  #L435c84.  v6:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L435c88.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L435c8e.  v6:= temp @kind wide;
  #L435c90.  if v0 != 0 then goto L435d10;
  #L435c94.  v0:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435c98.  if v3 == v0 then goto L435cca;
  #L435c9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435ca0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435ca6.  v0:= temp @kind object;
  #L435ca8.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L435cac.  if v0 == 0 then goto L435cca;
  #L435cb0.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435cb6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435cba.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435cc0.  v0:= temp @kind object;
  #L435cc2.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435cc8.  return @kind void;
  #L435cca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` @kind boolean;
  #L435cce.  v8:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L435cd2.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L435cd8.  v8:= temp @kind object;
  #L435cda.  v8:= (`io.reactivex.internal.subscribers.InnerQueuedSubscriber`) v8 @kind object;
  #L435cde.  if v0 == 0 then goto L435d06;
  #L435ce2.  if v8 != 0 then goto L435d06;
  #L435ce6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435cea.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435cf0.  v0:= temp @kind object;
  #L435cf2.  if v0 == 0 then goto L435cfe;
  #L435cf6.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435cfc.  goto L435d04;
  #L435cfe.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L435d04.  return @kind void;
  #L435d06.  if v8 == 0 then goto L435d12;
  #L435d0a.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v8 @kind object;
  #L435d0e.  goto L435d12;
  #L435d10.  v8:= v0 @kind object;
  #L435d12.  v9:= 0L;
  #L435d16.  v11:= 0I;
  #L435d18.  if v8 == 0 then goto L435e7e;
  #L435d1c.  call temp:= `queue`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L435d22.  v12:= temp @kind object;
  #L435d24.  if v12 == 0 then goto L435e7e;
  #L435d28.  v16:= v5;
  #L435d2c.  v13:= v9 @kind wide;
  #L435d2e.  v4:= 1L;
  #L435d32.  v17:= lcmp(v13, v6);
  #L435d36.  if v17 == 0 then goto L435dfc;
  #L435d3a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L435d3e.  if v0 == 0 then goto L435d4a;
  #L435d42.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435d48.  return @kind void;
  #L435d4a.  v0:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435d4e.  if v3 != v0 then goto L435d8a;
  #L435d52.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435d56.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435d5c.  v0:= temp @kind object;
  #L435d5e.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L435d62.  if v0 == 0 then goto L435d8a;
  #L435d66.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L435d6a.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435d70.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435d76.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435d7a.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435d80.  v0:= temp @kind object;
  #L435d82.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435d88.  return @kind void;
  #L435d8a.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L435d90.  v0:= temp;
  #L435d92.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L435d98.  v15:= temp @kind object;
  #L435d9a.  if v15 != 0 then goto L435da4;
  #L435d9e.  v18:= 1I;
  #L435da2.  goto L435da8;
  #L435da4.  v18:= 0I;
  #L435da8.  if v0 == 0 then goto L435dc4;
  #L435dac.  if v18 == 0 then goto L435dc4;
  #L435db0.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L435db4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435db8.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L435dbe.  v8:= v11 @kind object;
  #L435dc0.  v0:= 1I;
  #L435dc2.  goto L435dfe;
  #L435dc4.  if v18 == 0 then goto L435dca;
  #L435dc8.  goto L435dfc;
  #L435dca.  call `onNext`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L435dd0.  v13:= v13 + v4 @kind long;
  #L435dd2.  call `requestOne`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.requestOne:()V` @kind virtual;
  #L435dd8.  goto L435d2e;
  #L435dda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L435ddc.  v3:= v0 @kind object;
  #L435dde.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L435de4.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L435de8.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435dee.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435df4.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435dfa.  return @kind void;
  #L435dfc.  v0:= 0I;
  #L435dfe.  if v17 != 0 then goto L435e86;
  #L435e02.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L435e06.  if v15 == 0 then goto L435e12;
  #L435e0a.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435e10.  return @kind void;
  #L435e12.  v15:= `@@io.reactivex.internal.util.ErrorMode.IMMEDIATE` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435e16.  if v3 != v15 then goto L435e52;
  #L435e1a.  v15:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435e1e.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L435e24.  v15:= temp @kind object;
  #L435e26.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L435e2a.  if v15 == 0 then goto L435e52;
  #L435e2e.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L435e32.  call `cancel`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435e38.  call `a`(v19) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.a:()V` @kind virtual;
  #L435e3e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435e42.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L435e48.  v0:= temp @kind object;
  #L435e4a.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L435e50.  return @kind void;
  #L435e52.  call temp:= `isDone`(v8) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.isDone:()Z` @kind virtual;
  #L435e58.  v15:= temp;
  #L435e5a.  call temp:= `isEmpty`(v12) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L435e60.  v12:= temp;
  #L435e62.  if v15 == 0 then goto L435e86;
  #L435e66.  if v12 == 0 then goto L435e86;
  #L435e6a.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.l` @type ^`io.reactivex.internal.subscribers.InnerQueuedSubscriber` := v11 @kind object;
  #L435e6e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435e72.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L435e78.  v8:= v11 @kind object;
  #L435e7a.  v0:= 1I;
  #L435e7c.  goto L435e86;
  #L435e7e.  v16:= v5;
  #L435e82.  v13:= v9 @kind wide;
  #L435e84.  v0:= 0I;
  #L435e86.  v4:= lcmp(v13, v9);
  #L435e8a.  if v4 == 0 then goto L435eac;
  #L435e8e.  v4:= 9223372036854775807L;
  #L435e98.  v9:= lcmp(v6, v4);
  #L435e9c.  if v9 == 0 then goto L435eac;
  #L435ea0.  v4:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L435ea4.  v5:= -v13 @kind long;
  #L435ea6.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L435eac.  if v0 == 0 then goto L435eba;
  #L435eb0.  v0:= v8 @kind object;
  #L435eb2.  v5:= v16;
  #L435eb6.  goto L435c84;
  #L435eba.  v4:= v16;
  #L435ebe.  v0:= -v4 @kind int;
  #L435ec0.  call temp:= `addAndGet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L435ec6.  v5:= temp;
  #L435ec8.  if v5 != 0 then goto L435ece;
  #L435ecc.  return @kind void;
  #L435ece.  v0:= v8 @kind object;
  #L435ed0.  goto L435c84;
  catch `java.lang.Throwable` @[L435d92..L435d9a] goto L435dda;
}
procedure `void` `innerComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v0 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerComplete:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;)V` @AccessFlag PUBLIC {
    temp;

  #L435f20.  call `setDone`(v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L435f26.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L435f2c.  return @kind void;
}
procedure `void` `innerError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435f40.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435f44.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435f4a.  v0:= temp;
  #L435f4c.  if v0 == 0 then goto L435f74;
  #L435f50.  call `setDone`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.setDone:()V` @kind virtual;
  #L435f56.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.e` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435f5a.  v3:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435f5e.  if v2 == v3 then goto L435f6c;
  #L435f62.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L435f66.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L435f6c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L435f72.  goto L435f7a;
  #L435f74.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L435f7a.  return @kind void;
}
procedure `void` `innerNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `io.reactivex.internal.subscribers.InnerQueuedSubscriber` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerNext:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435f8c.  call temp:= `queue`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.queue:()Lio/reactivex/internal/fuseable/SimpleQueue;` @kind virtual;
  #L435f92.  v0:= temp @kind object;
  #L435f94.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L435f9a.  v3:= temp;
  #L435f9c.  if v3 == 0 then goto L435fa8;
  #L435fa0.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L435fa6.  goto L435fbe;
  #L435fa8.  call `cancel`(v2) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L435fae.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L435fb2.  call `<init>`(v3) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:()V` @kind direct;
  #L435fb8.  call `innerError`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.innerError:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L435fbe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435fd0.  v0:= 1I;
  #L435fd2.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v0 @kind boolean;
  #L435fd6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L435fdc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L435ff0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.f` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L435ff4.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L435ffa.  v0:= temp;
  #L435ffc.  if v0 == 0 then goto L43600e;
  #L436000.  v2:= 1I;
  #L436002.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.k` @type ^`boolean` := v2 @kind boolean;
  #L436006.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L43600c.  goto L436014;
  #L43600e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L436014.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436028.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43602c.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L436032.  v3:= temp @kind object;
  #L436034.  v0:= "The mapper returned a null Publisher" @kind object;
  #L436038.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43603e.  v3:= temp @kind object;
  #L436040.  v3:= (`org.reactivestreams.Publisher`) v3 @kind object;
  #L436044.  v0:= new `io.reactivex.internal.subscribers.InnerQueuedSubscriber`;
  #L436048.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.d` @type ^`int`;
  #L43604c.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.<init>:(Lio/reactivex/internal/subscribers/InnerQueuedSubscriberSupport;I)V` @kind direct;
  #L436052.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L436056.  if v1 == 0 then goto L43605c;
  #L43605a.  return @kind void;
  #L43605c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.h` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L436060.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L436066.  call `subscribe`(v3, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43606c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.j` @type ^`boolean` @kind boolean;
  #L436070.  if v3 == 0 then goto L436080;
  #L436074.  call `cancel`(v0) @signature `Lio/reactivex/internal/subscribers/InnerQueuedSubscriber;.cancel:()V` @kind virtual;
  #L43607a.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.b:()V` @kind virtual;
  #L436080.  return @kind void;
  #L436082.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L436084.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43608a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43608e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L436094.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43609a.  return @kind void;
  catch `java.lang.Throwable` @[L436028..L436044] goto L436082;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4360b8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4360bc.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4360c2.  v0:= temp;
  #L4360c4.  if v0 == 0 then goto L4360f8;
  #L4360c8.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.i` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L4360cc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4360d0.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4360d6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.c` @type ^`int`;
  #L4360da.  v1:= 2147483647I;
  #L4360e0.  if v0 != v1 then goto L4360f0;
  #L4360e4.  v0:= 9223372036854775807L;
  #L4360ee.  goto L4360f2;
  #L4360f0.  v0:= (`long`) v0 @kind i2l;
  #L4360f2.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4360f8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43610c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L436112.  v0:= temp;
  #L436114.  if v0 == 0 then goto L436128;
  #L436118.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatMapEager$a.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43611c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L436122.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMapEager$a;.drain:()V` @kind virtual;
  #L436128.  return @kind void;
}
