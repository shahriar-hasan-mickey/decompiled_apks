record `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `long` v2 , `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.<init>:(Lio/reactivex/SingleObserver;JLjava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439f20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L439f26.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L439f2a.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @type ^`long` := v2 @kind wide;
  #L439f2e.  v0.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @type ^`java.lang.Object` := v4 @kind object;
  #L439f32.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439f44.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439f48.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L439f4e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L439f52.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L439f56.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439efc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L439f00.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L439f04.  if v0 != v1 then goto L439f0c;
  #L439f08.  v0:= 1I;
  #L439f0a.  goto L439f0e;
  #L439f0c.  v0:= 0I;
  #L439f0e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L439f68.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L439f6c.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L439f70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L439f74.  if v0 != 0 then goto L439fa6;
  #L439f78.  v0:= 1I;
  #L439f7a.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L439f7e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L439f82.  if v0 == 0 then goto L439f92;
  #L439f86.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L439f8a.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L439f90.  goto L439fa6;
  #L439f92.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L439f96.  v1:= new `java.util.NoSuchElementException`;
  #L439f9a.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L439fa0.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439fa6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L439fb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L439fbc.  if v0 == 0 then goto L439fc8;
  #L439fc0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439fc6.  return @kind void;
  #L439fc8.  v0:= 1I;
  #L439fca.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L439fce.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L439fd2.  v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L439fd6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L439fda.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L439fe0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L439ff4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` @kind boolean;
  #L439ff8.  if v0 == 0 then goto L439ffe;
  #L439ffc.  return @kind void;
  #L439ffe.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @type ^`long` @kind wide;
  #L43a002.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.b` @type ^`long` @kind wide;
  #L43a006.  v4:= lcmp(v0, v2);
  #L43a00a.  if v4 != 0 then goto L43a032;
  #L43a00e.  v0:= 1I;
  #L43a010.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43a014.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43a018.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43a01e.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43a022.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43a026.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a02a.  call `onSuccess`(v0, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L43a030.  return @kind void;
  #L43a032.  v2:= 1L;
  #L43a036.  v0:= v0 + v2 @kind long;
  #L43a038.  v5.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.e` @type ^`long` := v0 @kind wide;
  #L43a03c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableElementAtSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a050.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43a054.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43a05a.  v0:= temp;
  #L43a05c.  if v0 == 0 then goto L43a07e;
  #L43a060.  v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43a064.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableElementAtSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43a068.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L43a06e.  v0:= 9223372036854775807L;
  #L43a078.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a07e.  return @kind void;
}
