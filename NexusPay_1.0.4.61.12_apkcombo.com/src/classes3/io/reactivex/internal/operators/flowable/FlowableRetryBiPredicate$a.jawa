record `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiPredicate` v2 @kind object, `io.reactivex.internal.subscriptions.SubscriptionArbiter` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiPredicate;Lio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L448fd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L448fd6.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L448fda.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v3 @kind object;
  #L448fde.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L448fe2.  v0.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` := v2 @kind object;
  #L448fe6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L4490e0.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4490e6.  v0:= temp;
  #L4490e8.  if v0 != 0 then goto L449136;
  #L4490ec.  v0:= 1I;
  #L4490ee.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4490f2.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L4490f8.  v1:= temp;
  #L4490fa.  if v1 == 0 then goto L449100;
  #L4490fe.  return @kind void;
  #L449100.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` @kind wide;
  #L449104.  v3:= 0L;
  #L449108.  v5:= lcmp(v1, v3);
  #L44910c.  if v5 == 0 then goto L44911e;
  #L449110.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` := v3 @kind wide;
  #L449114.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L449118.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L44911e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L449122.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L449128.  v0:= -v0 @kind int;
  #L44912a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L449130.  v0:= temp;
  #L449132.  if v0 != 0 then goto L4490ee;
  #L449136.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L448ff8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L448ffc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L449002.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L449014.  v0:= 1I;
  #L449016.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.d` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L44901a.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int`;
  #L44901e.  v2:= v2 + v0 @kind int;
  #L449020.  v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.e` @type ^`int` := v2;
  #L449024.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L44902a.  v2:= temp @kind object;
  #L44902c.  call temp:= `test`(v1, v2, v7) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L449032.  v0:= temp;
  #L449034.  if v0 != 0 then goto L449044;
  #L449038.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44903c.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449042.  return @kind void;
  #L449044.  call `a`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.a:()V` @kind virtual;
  #L44904a.  return @kind void;
  #L44904c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44904e.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L449054.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L449058.  v3:= new `io.reactivex.exceptions.CompositeException`;
  #L44905c.  v4:= 2I;
  #L44905e.  v4:= new `java.lang.Throwable`[v4];
  #L449062.  v5:= 0I;
  #L449064.  v4[v5]:= v7 @kind object;
  #L449068.  v4[v0]:= v1 @kind object;
  #L44906c.  call `<init>`(v3, v4) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L449072.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L449078.  return @kind void;
  catch `java.lang.Throwable` @[L449016..L449034] goto L44904c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L449098.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` @kind wide;
  #L44909c.  v2:= 1L;
  #L4490a0.  v0:= v0 + v2 @kind long;
  #L4490a2.  v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.f` @type ^`long` := v0 @kind wide;
  #L4490a6.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4490aa.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4490b0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRetryBiPredicate$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4490c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRetryBiPredicate$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L4490c8.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L4490ce.  return @kind void;
}
