record `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.f` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ba64.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44ba6a.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44ba6e.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44ba72.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44ba78.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L44ba7c.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44ba80.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44ba86.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L44ba8a.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a`;
  #L44ba8e.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;)V` @kind direct;
  #L44ba94.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a` := v1 @kind object;
  #L44ba98.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L44ba9c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44baa2.  v0.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L44baa6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44bab8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44babc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44bac2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L44bac6.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44bacc.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bae0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L44bae4.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44baea.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44baee.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44baf2.  call `onComplete`(v0, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onComplete:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44baf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bb0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a$a` @kind object;
  #L44bb10.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44bb16.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44bb1a.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44bb1e.  call `onError`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onError:(Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44bb24.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bb38.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L44bb3e.  v3:= temp;
  #L44bb40.  if v3 != 0 then goto L44bb5e;
  #L44bb44.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bb48.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44bb4e.  v3:= temp @kind object;
  #L44bb50.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L44bb54.  v0:= 1L;
  #L44bb58.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44bb5e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bb70.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bb74.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44bb78.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44bb7e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44bb90.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44bb94.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44bb98.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L44bb9e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSkipUntil$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ba34.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.f` @type ^`boolean` @kind boolean;
  #L44ba38.  if v0 == 0 then goto L44ba4e;
  #L44ba3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ba40.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableSkipUntil$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44ba44.  call `onNext`(v0, v3, v2, v1) @signature `Lio/reactivex/internal/util/HalfSerializer;.onNext:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Ljava/util/concurrent/atomic/AtomicInteger;Lio/reactivex/internal/util/AtomicThrowable;)V` @kind static;
  #L44ba4a.  v3:= 1I;
  #L44ba4c.  return v3;
  #L44ba4e.  v3:= 0I;
  #L44ba50.  return v3;
}
