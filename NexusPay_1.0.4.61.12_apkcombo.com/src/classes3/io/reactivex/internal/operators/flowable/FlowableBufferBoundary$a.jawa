record `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @AccessFlag VOLATILE;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.k` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.l` @AccessFlag ;
  `java.util.Map` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.Function` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;Ljava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L432028.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43202e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L432032.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`java.util.concurrent.Callable` := v4 @kind object;
  #L432036.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L43203a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` := v3 @kind object;
  #L43203e.  v1:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L432042.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L432048.  v2:= temp;
  #L43204a.  call `<init>`(v1, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L432050.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v1 @kind object;
  #L432054.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L432058.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43205e.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L432062.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L432066.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43206c.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L432070.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L432074.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43207a.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43207e.  v1:= new `java.util.LinkedHashMap`;
  #L432082.  call `<init>`(v1) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L432088.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v1 @kind object;
  #L43208c.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L432090.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L432096.  v0.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43209a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.a:(Lio/reactivex/disposables/Disposable;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L4320ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4320b0.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4320b6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4320ba.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4320c0.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4320c6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.b:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L432148.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43214c.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L432152.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L432156.  call temp:= `size`(v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L43215c.  v4:= temp;
  #L43215e.  v0:= 1I;
  #L432160.  if v4 != 0 then goto L432172;
  #L432164.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432168.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43216e.  v4:= 1I;
  #L432170.  goto L432174;
  #L432172.  v4:= 0I;
  #L432174.  @monitorenter v3
  #L432176.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L43217a.  if v1 != 0 then goto L432182;
  #L43217e.  @monitorexit v3
  #L432180.  return @kind void;
  #L432182.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L432186.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L43218a.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L432190.  v5:= temp @kind object;
  #L432192.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L432198.  v5:= temp @kind object;
  #L43219a.  call temp:= `offer`(v1, v5) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L4321a0.  @monitorexit v3
  #L4321a2.  if v4 == 0 then goto L4321aa;
  #L4321a6.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L4321aa.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4321b0.  return @kind void;
  #L4321b2.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4321b4.  @monitorexit v3
  #L4321b6.  throw v4;
  catch `java.lang.Throwable` @[L432176..L4321a2] goto L4321b2;
  catch `java.lang.Throwable` @[L4321b4..L4321b6] goto L4321b2;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L4321dc.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4321e2.  v0:= temp;
  #L4321e4.  if v0 == 0 then goto L4321ea;
  #L4321e8.  return @kind void;
  #L4321ea.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` @kind wide;
  #L4321ee.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4321f2.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L4321f6.  v4:= 1I;
  #L4321f8.  v5:= 1I;
  #L4321fa.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4321fe.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L432204.  v6:= temp @kind wide;
  #L432206.  v8:= lcmp(v0, v6);
  #L43220a.  if v8 == 0 then goto L43228a;
  #L43220e.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L432212.  if v9 == 0 then goto L43221e;
  #L432216.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43221c.  return @kind void;
  #L43221e.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L432222.  if v9 == 0 then goto L432250;
  #L432226.  v10:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43222a.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L432230.  v10:= temp @kind object;
  #L432232.  if v10 == 0 then goto L432250;
  #L432236.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43223c.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L432240.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L432246.  v0:= temp @kind object;
  #L432248.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43224e.  return @kind void;
  #L432250.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L432256.  v10:= temp @kind object;
  #L432258.  v10:= (`java.util.Collection`) v10 @kind object;
  #L43225c.  if v10 != 0 then goto L432264;
  #L432260.  v11:= 1I;
  #L432262.  goto L432266;
  #L432264.  v11:= 0I;
  #L432266.  if v9 == 0 then goto L432276;
  #L43226a.  if v11 == 0 then goto L432276;
  #L43226e.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L432274.  return @kind void;
  #L432276.  if v11 == 0 then goto L43227c;
  #L43227a.  goto L43228a;
  #L43227c.  call `onNext`(v2, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L432282.  v8:= 1L;
  #L432286.  v0:= v0 + v8 @kind long;
  #L432288.  goto L432206;
  #L43228a.  if v8 != 0 then goto L4322e4;
  #L43228e.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` @kind boolean;
  #L432292.  if v6 == 0 then goto L43229e;
  #L432296.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43229c.  return @kind void;
  #L43229e.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` @kind boolean;
  #L4322a2.  if v6 == 0 then goto L4322e4;
  #L4322a6.  v6:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4322aa.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4322b0.  v6:= temp @kind object;
  #L4322b2.  if v6 == 0 then goto L4322d0;
  #L4322b6.  call `clear`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L4322bc.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4322c0.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4322c6.  v0:= temp @kind object;
  #L4322c8.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4322ce.  return @kind void;
  #L4322d0.  call temp:= `isEmpty`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L4322d6.  v6:= temp;
  #L4322d8.  if v6 == 0 then goto L4322e4;
  #L4322dc.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4322e2.  return @kind void;
  #L4322e4.  v12.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.n` @type ^`long` := v0 @kind wide;
  #L4322e8.  v5:= -v5 @kind int;
  #L4322ea.  call temp:= `addAndGet`(v12, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4322f0.  v5:= temp;
  #L4322f2.  if v5 != 0 then goto L4321fa;
  #L4322f6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4320d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4320dc.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4320e2.  v0:= temp;
  #L4320e4.  if v0 == 0 then goto L432120;
  #L4320e8.  v0:= 1I;
  #L4320ea.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.k` @type ^`boolean` := v0 @kind boolean;
  #L4320ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4320f2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4320f8.  @monitorenter v1
  #L4320fa.  v0:= 0I;
  #L4320fc.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L432100.  @monitorexit v1
  #L432102.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L432108.  v0:= temp;
  #L43210a.  if v0 == 0 then goto L432120;
  #L43210e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L432112.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L432118.  goto L432120;
  #L43211a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43211c.  @monitorexit v1
  #L43211e.  throw v0;
  #L432120.  return @kind void;
  catch `java.lang.Throwable` @[L4320fc..L432102] goto L43211a;
  catch `java.lang.Throwable` @[L43211c..L43211e] goto L43211a;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4324ac.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L4324b0.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4324b6.  v0:= temp @kind object;
  #L4324b8.  v1:= "The bufferSupplier returned a null Collection" @kind object;
  #L4324bc.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4324c2.  v0:= temp @kind object;
  #L4324c4.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4324c8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L4324cc.  call temp:= `apply`(v1, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4324d2.  v6:= temp @kind object;
  #L4324d4.  v1:= "The bufferClose returned a null Publisher" @kind object;
  #L4324d8.  call temp:= `requireNonNull`(v6, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4324de.  v6:= temp @kind object;
  #L4324e0.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L4324e4.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` @kind wide;
  #L4324e8.  v3:= 1L;
  #L4324ec.  v3:= v3 + v1 @kind long;
  #L4324ee.  v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.l` @type ^`long` := v3 @kind wide;
  #L4324f2.  @monitorenter v5
  #L4324f4.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4324f8.  if v3 != 0 then goto L432500;
  #L4324fc.  @monitorexit v5
  #L4324fe.  return @kind void;
  #L432500.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L432506.  v4:= temp @kind object;
  #L432508.  call temp:= `put`(v3, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43250e.  @monitorexit v5
  #L432510.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$b`;
  #L432514.  call `<init>`(v0, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;J)V` @kind direct;
  #L43251a.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43251e.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L432524.  call `subscribe`(v6, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43252a.  return @kind void;
  #L43252c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43252e.  @monitorexit v5
  #L432530.  throw v6;
  #L432532.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432534.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43253a.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43253e.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L432544.  call `onError`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43254a.  return @kind void;
  catch `java.lang.Throwable` @[L4324ac..L4324e4] goto L432532;
  catch `java.lang.Throwable` @[L4324f4..L432510] goto L43252c;
  catch `java.lang.Throwable` @[L43252e..L432530] goto L43252c;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L43257c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L432580.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L432586.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43258a.  call temp:= `size`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.size:()I` @kind virtual;
  #L432590.  v2:= temp;
  #L432592.  if v2 != 0 then goto L4325ac;
  #L432596.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43259a.  call temp:= `cancel`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4325a0.  v2:= 1I;
  #L4325a2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4325a6.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4325ac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432308.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43230c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L432312.  @monitorenter v3
  #L432314.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L432318.  if v0 != 0 then goto L432320;
  #L43231c.  @monitorexit v3
  #L43231e.  return @kind void;
  #L432320.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L432326.  v0:= temp @kind object;
  #L432328.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43232e.  v0:= temp @kind object;
  #L432330.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L432336.  v1:= temp;
  #L432338.  if v1 == 0 then goto L432354;
  #L43233c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L432342.  v1:= temp @kind object;
  #L432344.  v1:= (`java.util.Collection`) v1 @kind object;
  #L432348.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.j` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43234c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L432352.  goto L432330;
  #L432354.  v0:= 0I;
  #L432356.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v0 @kind object;
  #L43235a.  @monitorexit v3
  #L43235c.  v0:= 1I;
  #L43235e.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v0 @kind boolean;
  #L432362.  call `c`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L432368.  return @kind void;
  #L43236a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43236c.  @monitorexit v3
  #L43236e.  throw v0;
  catch `java.lang.Throwable` @[L432314..L43235c] goto L43236a;
  catch `java.lang.Throwable` @[L43236c..L43236e] goto L43236a;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432394.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.h` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L432398.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43239e.  v0:= temp;
  #L4323a0.  if v0 == 0 then goto L4323cc;
  #L4323a4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4323a8.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4323ae.  @monitorenter v1
  #L4323b0.  v2:= 0I;
  #L4323b2.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` := v2 @kind object;
  #L4323b6.  @monitorexit v1
  #L4323b8.  v2:= 1I;
  #L4323ba.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.i` @type ^`boolean` := v2 @kind boolean;
  #L4323be.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4323c4.  goto L4323d2;
  #L4323c6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4323c8.  @monitorexit v1
  #L4323ca.  throw v2;
  #L4323cc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4323d2.  return @kind void;
  catch `java.lang.Throwable` @[L4323b2..L4323b8] goto L4323c6;
  catch `java.lang.Throwable` @[L4323c8..L4323ca] goto L4323c6;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4323f8.  @monitorenter v2
  #L4323fa.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.m` @type ^`java.util.Map` @kind object;
  #L4323fe.  if v0 != 0 then goto L432406;
  #L432402.  @monitorexit v2
  #L432404.  return @kind void;
  #L432406.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L43240c.  v0:= temp @kind object;
  #L43240e.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L432414.  v0:= temp @kind object;
  #L432416.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43241c.  v1:= temp;
  #L43241e.  if v1 == 0 then goto L432436;
  #L432422.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L432428.  v1:= temp @kind object;
  #L43242a.  v1:= (`java.util.Collection`) v1 @kind object;
  #L43242e.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L432434.  goto L432416;
  #L432436.  @monitorexit v2
  #L432438.  return @kind void;
  #L43243a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43243c.  @monitorexit v2
  #L43243e.  throw v3;
  catch `java.lang.Throwable` @[L4323fa..L43243e] goto L43243a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43245c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.g` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L432460.  call temp:= `setOnce`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L432466.  v0:= temp;
  #L432468.  if v0 == 0 then goto L43249a;
  #L43246c.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a$a`;
  #L432470.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;)V` @kind direct;
  #L432476.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43247a.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L432480.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L432484.  call `subscribe`(v1, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L43248a.  v0:= 9223372036854775807L;
  #L432494.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43249a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4325c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferBoundary$a.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4325c4.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4325ca.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferBoundary$a;.c:()V` @kind virtual;
  #L4325d0.  return @kind void;
}
