record `io.reactivex.internal.operators.flowable.FlowableBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `java.util.concurrent.Callable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/concurrent/Callable;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431888.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L43188e.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L431892.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int` := v2;
  #L431896.  v0.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43189a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4318ac.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4318b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4318b6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4318c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L4318cc.  if v0 == 0 then goto L4318d2;
  #L4318d0.  return @kind void;
  #L4318d2.  v0:= 1I;
  #L4318d4.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4318d8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L4318dc.  if v0 == 0 then goto L4318f6;
  #L4318e0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L4318e6.  v1:= temp;
  #L4318e8.  if v1 != 0 then goto L4318f6;
  #L4318ec.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4318f0.  call `onNext`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4318f6.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4318fa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L431900.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431914.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L431918.  if v0 == 0 then goto L431924;
  #L43191c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431922.  return @kind void;
  #L431924.  v0:= 1I;
  #L431926.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43192a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43192e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L431934.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431948.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.f` @type ^`boolean` @kind boolean;
  #L43194c.  if v0 == 0 then goto L431952;
  #L431950.  return @kind void;
  #L431952.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` @kind object;
  #L431956.  if v0 != 0 then goto L431992;
  #L43195a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L43195e.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L431964.  v0:= temp @kind object;
  #L431966.  v1:= "The bufferSupplier returned a null buffer" @kind object;
  #L43196a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L431970.  v0:= temp @kind object;
  #L431972.  v0:= (`java.util.Collection`) v0 @kind object;
  #L431976.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v0 @kind object;
  #L43197a.  goto L431992;
  #L43197c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43197e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431984.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.cancel:()V` @kind virtual;
  #L43198a.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L431990.  return @kind void;
  #L431992.  call temp:= `add`(v0, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L431998.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int`;
  #L43199c.  v3:= v3 + 1;
  #L4319a0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L4319a4.  if v3 != v1 then goto L4319c0;
  #L4319a8.  v3:= 0I;
  #L4319aa.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4319ae.  v3:= 0I;
  #L4319b0.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.d` @type ^`java.util.Collection` := v3 @kind object;
  #L4319b4.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4319b8.  call `onNext`(v3, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4319be.  goto L4319c4;
  #L4319c0.  v2.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.g` @type ^`int` := v3;
  #L4319c4.  return @kind void;
  catch `java.lang.Throwable` @[L43195a..L431976] goto L43197c;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4319e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4319e8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L4319ee.  v0:= temp;
  #L4319f0.  if v0 == 0 then goto L431a02;
  #L4319f4.  v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L4319f8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4319fc.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L431a02.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBuffer$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L431a14.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L431a1a.  v0:= temp;
  #L431a1c.  if v0 == 0 then goto L431a38;
  #L431a20.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431a24.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableBuffer$a.c` @type ^`int`;
  #L431a28.  v1:= (`long`) v1 @kind i2l;
  #L431a2a.  call temp:= `multiplyCap`(v4, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L431a30.  v4:= temp @kind wide;
  #L431a32.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431a38.  return @kind void;
}
