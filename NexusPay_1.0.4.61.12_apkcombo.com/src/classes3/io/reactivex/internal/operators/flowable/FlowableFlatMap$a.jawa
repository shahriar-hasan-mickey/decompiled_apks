record `io.reactivex.internal.operators.flowable.FlowableFlatMap$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableFlatMap$b` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @AccessFlag VOLATILE;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMap$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMap$b` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43a50c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43a512.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.a` @type ^`long` := v2 @kind wide;
  #L43a516.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` := v1 @kind object;
  #L43a51a.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$b.e` @type ^`int`;
  #L43a51e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int` := v1;
  #L43a522.  v1:= v1 ^> 2;
  #L43a526.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int` := v1;
  #L43a52a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43a644.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L43a648.  v1:= 1I;
  #L43a64a.  if v0 == v1 then goto L43a682;
  #L43a64e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` @kind wide;
  #L43a652.  v0:= v0 + v4 @kind long;
  #L43a654.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.c` @type ^`int`;
  #L43a658.  v4:= (`long`) v4 @kind i2l;
  #L43a65a.  v2:= lcmp(v0, v4);
  #L43a65e.  if v2 < 0 then goto L43a67e;
  #L43a662.  v4:= 0L;
  #L43a666.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v4 @kind wide;
  #L43a66a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a670.  v4:= temp @kind object;
  #L43a672.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L43a676.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a67c.  goto L43a682;
  #L43a67e.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.g` @type ^`long` := v0 @kind wide;
  #L43a682.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L43a53c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43a542.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a4e4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43a4ea.  v0:= temp @kind object;
  #L43a4ec.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43a4f0.  if v0 != v1 then goto L43a4f8;
  #L43a4f4.  v0:= 1I;
  #L43a4f6.  goto L43a4fa;
  #L43a4f8.  v0:= 0I;
  #L43a4fa.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a554.  v0:= 1I;
  #L43a556.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43a55a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L43a55e.  call `e`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L43a564.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43a578.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43a57c.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43a582.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L43a586.  call `i`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.i:(Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;Ljava/lang/Throwable;)V` @kind virtual;
  #L43a58c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43a5a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int`;
  #L43a5a4.  v1:= 2I;
  #L43a5a6.  if v0 == v1 then goto L43a5b6;
  #L43a5aa.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L43a5ae.  call `k`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.k:(Ljava/lang/Object;Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;)V` @kind virtual;
  #L43a5b4.  goto L43a5c0;
  #L43a5b6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L43a5ba.  call `e`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L43a5c0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMap$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43a5d4.  call temp:= `setOnce`(v3, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43a5da.  v0:= temp;
  #L43a5dc.  if v0 == 0 then goto L43a630;
  #L43a5e0.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L43a5e4.  if v0 == 0 then goto L43a624;
  #L43a5e8.  v0:= v4 @kind object;
  #L43a5ea.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L43a5ee.  v1:= 7I;
  #L43a5f0.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L43a5f6.  v1:= temp;
  #L43a5f8.  v2:= 1I;
  #L43a5fa.  if v1 != v2 then goto L43a616;
  #L43a5fe.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L43a602.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L43a606.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.e` @type ^`boolean` := v2 @kind boolean;
  #L43a60a.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableFlatMap$b` @kind object;
  #L43a60e.  call `e`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMap$b;.e:()V` @kind virtual;
  #L43a614.  return @kind void;
  #L43a616.  v2:= 2I;
  #L43a618.  if v1 != v2 then goto L43a624;
  #L43a61c.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.h` @type ^`int` := v1;
  #L43a620.  v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.f` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L43a624.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMap$a.d` @type ^`int`;
  #L43a628.  v0:= (`long`) v0 @kind i2l;
  #L43a62a.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43a630.  return @kind void;
}
