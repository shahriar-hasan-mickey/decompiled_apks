record `io.reactivex.internal.operators.flowable.FlowableGenerate$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.Emitter` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGenerate$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/BiFunction;Lio/reactivex/functions/Consumer;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43df90.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43df96.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43df9a.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L43df9e.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L43dfa2.  v0.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v4 @kind object;
  #L43dfa6.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L43e000.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43e004.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43e00a.  goto L43e01a;
  #L43e00c.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e00e.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e014.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e01a.  return @kind void;
  catch `java.lang.Throwable` @[L43e000..L43e00a] goto L43e00c;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43dfb8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L43dfbc.  if v0 != 0 then goto L43dfee;
  #L43dfc0.  v0:= 1I;
  #L43dfc2.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v0 @kind boolean;
  #L43dfc6.  v0:= 1L;
  #L43dfca.  call temp:= `add`(v5, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43dfd0.  v0:= temp @kind wide;
  #L43dfd2.  v2:= 0L;
  #L43dfd6.  v4:= lcmp(v0, v2);
  #L43dfda.  if v4 != 0 then goto L43dfee;
  #L43dfde.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L43dfe2.  v1:= 0I;
  #L43dfe4.  v5.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v1 @kind object;
  #L43dfe8.  call `a`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43dfee.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e038.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43e03c.  if v0 != 0 then goto L43e050;
  #L43e040.  v0:= 1I;
  #L43e042.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43e046.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e04a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43e050.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e064.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43e068.  if v0 == 0 then goto L43e074;
  #L43e06c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43e072.  goto L43e096;
  #L43e074.  if v2 != 0 then goto L43e086;
  #L43e078.  v2:= new `java.lang.NullPointerException`;
  #L43e07c.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43e080.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e086.  v0:= 1I;
  #L43e088.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` := v0 @kind boolean;
  #L43e08c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e090.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43e096.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43e0a8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43e0ac.  if v0 != 0 then goto L43e0f8;
  #L43e0b0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` @kind boolean;
  #L43e0b4.  if v0 == 0 then goto L43e0ce;
  #L43e0b8.  v2:= new `java.lang.IllegalStateException`;
  #L43e0bc.  v0:= "onNext already called in this generate turn" @kind object;
  #L43e0c0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e0c6.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e0cc.  goto L43e0f8;
  #L43e0ce.  if v2 != 0 then goto L43e0e8;
  #L43e0d2.  v2:= new `java.lang.NullPointerException`;
  #L43e0d6.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L43e0da.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43e0e0.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e0e6.  goto L43e0f8;
  #L43e0e8.  v0:= 1I;
  #L43e0ea.  v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v0 @kind boolean;
  #L43e0ee.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43e0f2.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43e0f8.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGenerate$a` v9 @kind this, `long` v10 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43e10c.  call temp:= `validate`(v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43e112.  v0:= temp;
  #L43e114.  if v0 != 0 then goto L43e11a;
  #L43e118.  return @kind void;
  #L43e11a.  call temp:= `add`(v9, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43e120.  v0:= temp @kind wide;
  #L43e122.  v2:= 0L;
  #L43e126.  v4:= lcmp(v0, v2);
  #L43e12a.  if v4 == 0 then goto L43e130;
  #L43e12e.  return @kind void;
  #L43e130.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` @kind object;
  #L43e134.  v1:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L43e138.  v4:= v2 @kind wide;
  #L43e13a.  v6:= lcmp(v4, v10);
  #L43e13e.  if v6 == 0 then goto L43e1a6;
  #L43e142.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` @kind boolean;
  #L43e146.  v7:= 0I;
  #L43e148.  if v6 == 0 then goto L43e158;
  #L43e14c.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L43e150.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43e156.  return @kind void;
  #L43e158.  v6:= 0I;
  #L43e15a.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.g` @type ^`boolean` := v6 @kind boolean;
  #L43e15e.  v6:= 1I;
  #L43e160.  call temp:= `apply`(v1, v0, v9) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43e166.  v0:= temp @kind object;
  #L43e168.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.f` @type ^`boolean` @kind boolean;
  #L43e16c.  if v8 == 0 then goto L43e180;
  #L43e170.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L43e174.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L43e178.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43e17e.  return @kind void;
  #L43e180.  v6:= 1L;
  #L43e184.  v4:= v4 + v6 @kind long;
  #L43e186.  goto L43e13a;
  #L43e188.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43e18a.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43e190.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.e` @type ^`boolean` := v6 @kind boolean;
  #L43e194.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v7 @kind object;
  #L43e198.  call `onError`(v9, v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43e19e.  call `a`(v9, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGenerate$a;.a:(Ljava/lang/Object;)V` @kind direct;
  #L43e1a4.  return @kind void;
  #L43e1a6.  call temp:= `get`(v9) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43e1ac.  v10:= temp @kind wide;
  #L43e1ae.  v6:= lcmp(v4, v10);
  #L43e1b2.  if v6 != 0 then goto L43e13a;
  #L43e1b6.  v9.`io.reactivex.internal.operators.flowable.FlowableGenerate$a.d` @type ^`java.lang.Object` := v0 @kind object;
  #L43e1ba.  v10:= -v4 @kind long;
  #L43e1bc.  call temp:= `addAndGet`(v9, v10) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43e1c2.  v10:= temp @kind wide;
  #L43e1c4.  v4:= lcmp(v10, v2);
  #L43e1c8.  if v4 != 0 then goto L43e138;
  #L43e1cc.  return @kind void;
  catch `java.lang.Throwable` @[L43e160..L43e168] goto L43e188;
}
