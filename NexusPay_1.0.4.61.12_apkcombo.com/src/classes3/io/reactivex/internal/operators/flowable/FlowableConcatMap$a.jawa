record `io.reactivex.internal.operators.flowable.FlowableConcatMap$a` @kind class @AccessFlag SYNTHETIC {
}
global `int`[] `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L435120.  call temp:= `values`() @signature `Lio/reactivex/internal/util/ErrorMode;.values:()[Lio/reactivex/internal/util/ErrorMode;` @kind static;
  #L435126.  v0:= temp @kind object;
  #L435128.  v0:= length @variable v0;
  #L43512a.  v0:= new `int`[v0];
  #L43512e.  `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] := v0 @kind object;
  #L435132.  v1:= `@@io.reactivex.internal.util.ErrorMode.BOUNDARY` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L435136.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L43513c.  v1:= temp;
  #L43513e.  v2:= 1I;
  #L435140.  v0[v1]:= v2;
  #L435144.  v0:= `@@io.reactivex.internal.operators.flowable.FlowableConcatMap$a.a` @type ^`int`[] @kind object;
  #L435148.  v1:= `@@io.reactivex.internal.util.ErrorMode.END` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L43514c.  call temp:= `ordinal`(v1) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L435152.  v1:= temp;
  #L435154.  v2:= 2I;
  #L435156.  v0[v1]:= v2;
  #L43515a.  return @kind void;
  catch `java.lang.NoSuchFieldError` @[L435132..L435144] goto L435144;
  catch `java.lang.NoSuchFieldError` @[L435144..L43515a] goto L43515a;
}
