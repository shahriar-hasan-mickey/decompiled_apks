record `io.reactivex.internal.operators.flowable.FlowableObserveOn$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.l` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v0 @kind this, `io.reactivex.Scheduler$Worker` v1 @kind object, `boolean` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.<init>:(Lio/reactivex/Scheduler$Worker;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L442c40.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L442c46.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` := v1 @kind object;
  #L442c4a.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` := v2 @kind boolean;
  #L442c4e.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.c` @type ^`int` := v3;
  #L442c52.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L442c56.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L442c5c.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L442c60.  v1:= v3 ^> 2;
  #L442c64.  v3:= v3 - v1 @kind int;
  #L442c66.  v0.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.d` @type ^`int` := v3;
  #L442c6a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442c7c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L442c80.  if v0 == 0 then goto L442c86;
  #L442c84.  return @kind void;
  #L442c86.  v0:= 1I;
  #L442c88.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v0 @kind boolean;
  #L442c8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442c90.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L442c96.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L442c9a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442ca0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L442ca4.  if v0 != 0 then goto L442cbe;
  #L442ca8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L442cae.  v0:= temp;
  #L442cb0.  if v0 != 0 then goto L442cbe;
  #L442cb4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442cb8.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L442cbe.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442cd0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442cd4.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L442cda.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag FINAL {
    temp;
    v0;
    v1;

  #L442b60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` @kind boolean;
  #L442b64.  v1:= 1I;
  #L442b66.  if v0 == 0 then goto L442b72;
  #L442b6a.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L442b70.  return v1;
  #L442b72.  if v3 == 0 then goto L442be6;
  #L442b76.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.b` @type ^`boolean` @kind boolean;
  #L442b7a.  if v3 == 0 then goto L442ba8;
  #L442b7e.  if v4 == 0 then goto L442be6;
  #L442b82.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L442b86.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L442b8a.  if v3 == 0 then goto L442b96;
  #L442b8e.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442b94.  goto L442b9c;
  #L442b96.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L442b9c.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L442ba0.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442ba6.  return v1;
  #L442ba8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` @kind object;
  #L442bac.  if v3 == 0 then goto L442bcc;
  #L442bb0.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L442bb4.  call `clear`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.clear:()V` @kind virtual;
  #L442bba.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L442bc0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L442bc4.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442bca.  return v1;
  #L442bcc.  if v4 == 0 then goto L442be6;
  #L442bd0.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.h` @type ^`boolean` := v1 @kind boolean;
  #L442bd4.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L442bda.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L442bde.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L442be4.  return v1;
  #L442be6.  v3:= 0I;
  #L442be8.  return v3;
}
procedure `void` `f`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `g`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `h`() @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `i`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L442e1c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L442e22.  v0:= temp;
  #L442e24.  if v0 == 0 then goto L442e2a;
  #L442e28.  return @kind void;
  #L442e2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.a` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L442e2e.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L442e34.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442bfc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442c00.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L442c06.  v0:= temp;
  #L442c08.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442cec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L442cf0.  if v0 != 0 then goto L442d00;
  #L442cf4.  v0:= 1I;
  #L442cf6.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L442cfa.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L442d00.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442d14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L442d18.  if v0 == 0 then goto L442d24;
  #L442d1c.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L442d22.  return @kind void;
  #L442d24.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v2 @kind object;
  #L442d28.  v2:= 1I;
  #L442d2a.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v2 @kind boolean;
  #L442d2e.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L442d34.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L442d48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` @kind boolean;
  #L442d4c.  if v0 == 0 then goto L442d52;
  #L442d50.  return @kind void;
  #L442d52.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L442d56.  v1:= 2I;
  #L442d58.  if v0 != v1 then goto L442d64;
  #L442d5c.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L442d62.  return @kind void;
  #L442d64.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L442d68.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L442d6e.  v3:= temp;
  #L442d70.  if v3 != 0 then goto L442d96;
  #L442d74.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L442d78.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L442d7e.  v3:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L442d82.  v0:= "Queue is full?!" @kind object;
  #L442d86.  call `<init>`(v3, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L442d8c.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.j` @type ^`java.lang.Throwable` := v3 @kind object;
  #L442d90.  v3:= 1I;
  #L442d92.  v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.i` @type ^`boolean` := v3 @kind boolean;
  #L442d96.  call `i`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L442d9c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442db0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L442db6.  v0:= temp;
  #L442db8.  if v0 == 0 then goto L442dcc;
  #L442dbc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L442dc0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L442dc6.  call `i`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.i:()V` @kind virtual;
  #L442dcc.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L442c1c.  v0:= 2I;
  #L442c1e.  v2:= v2 ^& v0 @kind int;
  #L442c20.  if v2 == 0 then goto L442c2c;
  #L442c24.  v2:= 1I;
  #L442c26.  v1.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` := v2 @kind boolean;
  #L442c2a.  return v0;
  #L442c2c.  v2:= 0I;
  #L442c2e.  return v2;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableObserveOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.run:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L442de0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.m` @type ^`boolean` @kind boolean;
  #L442de4.  if v0 == 0 then goto L442df0;
  #L442de8.  call `g`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.g:()V` @kind virtual;
  #L442dee.  goto L442e08;
  #L442df0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableObserveOn$a.k` @type ^`int`;
  #L442df4.  v1:= 1I;
  #L442df6.  if v0 != v1 then goto L442e02;
  #L442dfa.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.h:()V` @kind virtual;
  #L442e00.  goto L442e08;
  #L442e02.  call `f`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableObserveOn$a;.f:()V` @kind virtual;
  #L442e08.  return @kind void;
}
