record `io.reactivex.internal.operators.flowable.FlowableReplay$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableReplay$j` `io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$d.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReplay$d.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableReplay$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this, `io.reactivex.internal.operators.flowable.FlowableReplay$j` v1 @kind object, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableReplay$j;Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4480d0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4480d6.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` := v1 @kind object;
  #L4480da.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.b` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L4480de.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4480e2.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4480e8.  v0.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4480ec.  return @kind void;
}
procedure `java.lang.Object` `a`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.a:()Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L44809c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` @kind object;
  #L4480a0.  return v0 @kind object;
}
procedure `long` `b`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.b:(J)J` @AccessFlag PUBLIC {
    temp;

  #L4480b4.  call temp:= `producedCancel`(v0, v1) @signature `Lio/reactivex/internal/util/BackpressureHelper;.producedCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4480ba.  v1:= temp @kind wide;
  #L4480bc.  return v1 @kind wide;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L448100.  call `dispose`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @kind virtual;
  #L448106.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448118.  v0:= -9223372036854775808L;
  #L44811c.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L448122.  v2:= temp @kind wide;
  #L448124.  v4:= lcmp(v2, v0);
  #L448128.  if v4 == 0 then goto L448146;
  #L44812c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L448130.  call `c`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind virtual;
  #L448136.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L44813a.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L448140.  v0:= 0I;
  #L448142.  v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.c` @type ^`java.lang.Object` := v0 @kind object;
  #L448146.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448070.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L448076.  v0:= temp @kind wide;
  #L448078.  v2:= -9223372036854775808L;
  #L44807c.  v4:= lcmp(v0, v2);
  #L448080.  if v4 != 0 then goto L448088;
  #L448084.  v0:= 1I;
  #L448086.  goto L44808a;
  #L448088.  v0:= 0I;
  #L44808a.  return v0;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableReplay$d` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$d;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L448158.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44815e.  v0:= temp;
  #L448160.  if v0 == 0 then goto L44819a;
  #L448164.  call temp:= `addCancel`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L44816a.  v0:= temp @kind wide;
  #L44816c.  v2:= -9223372036854775808L;
  #L448170.  v4:= lcmp(v0, v2);
  #L448174.  if v4 == 0 then goto L44819a;
  #L448178.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44817c.  call temp:= `add`(v0, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L448182.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L448186.  call `b`(v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$j;.b:()V` @kind virtual;
  #L44818c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableReplay$d.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$j` @kind object;
  #L448190.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableReplay$j.a` @type ^`io.reactivex.internal.operators.flowable.FlowableReplay$g` @kind object;
  #L448194.  call `c`(v6, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableReplay$g;.c:(Lio/reactivex/internal/operators/flowable/FlowableReplay$d;)V` @kind interface;
  #L44819a.  return @kind void;
}
