record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `io.reactivex.Scheduler` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4334fc.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L433500.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L433506.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L43350c.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L433510.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L433516.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L43351a.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L43351e.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` := v4 @kind wide;
  #L433522.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L433526.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.Scheduler` := v7 @kind object;
  #L43352a.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L4334b0.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4334b4.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4334ba.  v1:= 1I;
  #L4334bc.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L433490.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433494.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L43349a.  v1:= temp;
  #L43349c.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43353c.  v0:= 1I;
  #L43353e.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L433542.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L433546.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43354c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433550.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L433556.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L433568.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L43356e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4334d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4334d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4334da.  v0:= temp @kind object;
  #L4334dc.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4334e0.  if v0 != v1 then goto L4334e8;
  #L4334e4.  v0:= 1I;
  #L4334e6.  goto L4334ea;
  #L4334e8.  v0:= 0I;
  #L4334ea.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L433580.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L433584.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43358a.  @monitorenter v4
  #L43358c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L433590.  if v0 != 0 then goto L433598;
  #L433594.  @monitorexit v4
  #L433596.  return @kind void;
  #L433598.  v1:= 0I;
  #L43359a.  v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v1 @kind object;
  #L43359e.  @monitorexit v4
  #L4335a0.  v2:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4335a4.  call temp:= `offer`(v2, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4335aa.  v0:= 1I;
  #L4335ac.  v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4335b0.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4335b6.  v0:= temp;
  #L4335b8.  if v0 == 0 then goto L4335cc;
  #L4335bc.  v0:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4335c0.  v2:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4335c4.  v3:= 0I;
  #L4335c6.  call `drainMaxLoop`(v0, v2, v3, v1, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L4335cc.  return @kind void;
  #L4335ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4335d0.  @monitorexit v4
  #L4335d2.  throw v0;
  catch `java.lang.Throwable` @[L43358c..L4335a0] goto L4335ce;
  catch `java.lang.Throwable` @[L4335d0..L4335d2] goto L4335ce;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4335f8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4335fc.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L433602.  @monitorenter v1
  #L433604.  v0:= 0I;
  #L433606.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L43360a.  @monitorexit v1
  #L43360c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433610.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433616.  return @kind void;
  #L433618.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43361a.  @monitorexit v1
  #L43361c.  throw v2;
  catch `java.lang.Throwable` @[L433606..L43360c] goto L433618;
  catch `java.lang.Throwable` @[L43361a..L43361c] goto L433618;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433644.  @monitorenter v1
  #L433646.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L43364a.  if v0 == 0 then goto L433654;
  #L43364e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433654.  @monitorexit v1
  #L433656.  return @kind void;
  #L433658.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43365a.  @monitorexit v1
  #L43365c.  throw v2;
  catch `java.lang.Throwable` @[L433646..L43365c] goto L433658;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v9 @kind this, `org.reactivestreams.Subscription` v10 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L43367c.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L433680.  call temp:= `validate`(v0, v10) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L433686.  v0:= temp;
  #L433688.  if v0 == 0 then goto L43371c;
  #L43368c.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.g` @type ^`org.reactivestreams.Subscription` := v10 @kind object;
  #L433690.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433694.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43369a.  v0:= temp @kind object;
  #L43369c.  v1:= "The supplied buffer is null" @kind object;
  #L4336a0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4336a6.  v0:= temp @kind object;
  #L4336a8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L4336ac.  v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L4336b0.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4336b4.  call `onSubscribe`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4336ba.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4336be.  if v0 != 0 then goto L43371c;
  #L4336c2.  v0:= 9223372036854775807L;
  #L4336cc.  call `request`(v10, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4336d2.  v2:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.f` @type ^`io.reactivex.Scheduler` @kind object;
  #L4336d6.  v6:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.d` @type ^`long` @kind wide;
  #L4336da.  v8:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4336de.  v3:= v9 @kind object;
  #L4336e0.  v4:= v6 @kind wide;
  #L4336e2.  call temp:= `schedulePeriodicallyDirect`(v2, v3, v4, v6, v8) @signature `Lio/reactivex/Scheduler;.schedulePeriodicallyDirect:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4336e8.  v10:= temp @kind object;
  #L4336ea.  v0:= v9.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4336ee.  v1:= 0I;
  #L4336f0.  call temp:= `compareAndSet`(v0, v1, v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4336f6.  v0:= temp;
  #L4336f8.  if v0 != 0 then goto L43371c;
  #L4336fc.  call `dispose`(v10) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433702.  goto L43371c;
  #L433704.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433706.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43370c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L433712.  v0:= v9.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433716.  call `error`(v10, v0) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43371c.  return @kind void;
  catch `java.lang.Throwable` @[L433690..L4336ac] goto L433704;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L43373c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L433742.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433754.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433758.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43375e.  v0:= temp @kind object;
  #L433760.  v1:= "The supplied buffer is null" @kind object;
  #L433764.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43376a.  v0:= temp @kind object;
  #L43376c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433770.  @monitorenter v2
  #L433772.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` @kind object;
  #L433776.  if v1 != 0 then goto L43377e;
  #L43377a.  @monitorexit v2
  #L43377c.  return @kind void;
  #L43377e.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$b.h` @type ^`java.util.Collection` := v0 @kind object;
  #L433782.  @monitorexit v2
  #L433784.  v0:= 0I;
  #L433786.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43378c.  return @kind void;
  #L43378e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433790.  @monitorexit v2
  #L433792.  throw v0;
  #L433794.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433796.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43379c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$b;.cancel:()V` @kind virtual;
  #L4337a2.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4337a6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4337ac.  return @kind void;
  catch `java.lang.Throwable` @[L433754..L433770] goto L433794;
  catch `java.lang.Throwable` @[L433772..L433784] goto L43378e;
  catch `java.lang.Throwable` @[L433790..L433792] goto L43378e;
}
