record `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @AccessFlag FINAL;
  `io.reactivex.internal.queue.MpscLinkedQueue` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @AccessFlag VOLATILE;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.l` @AccessFlag ;
}
global `java.lang.Object` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.m` @AccessFlag STATIC_FINAL;
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4500a0.  v0:= new `java.lang.Object`;
  #L4500a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4500aa.  `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` := v0 @kind object;
  #L4500ae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4500c0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L4500c6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4500ca.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int` := v2;
  #L4500ce.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a`;
  #L4500d2.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;)V` @kind direct;
  #L4500d8.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` := v1 @kind object;
  #L4500dc.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4500e0.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4500e6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L4500ea.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L4500ee.  v2:= 1I;
  #L4500f0.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L4500f6.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L4500fa.  v1:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4500fe.  call `<init>`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L450104.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` := v1 @kind object;
  #L450108.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L45010c.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L450112.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L450116.  v1:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L45011a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L450120.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v1 @kind object;
  #L450124.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L450128.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L45012e.  v0.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L450132.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L450190.  call temp:= `getAndIncrement`(v12) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L450196.  v0:= temp;
  #L450198.  if v0 == 0 then goto L45019e;
  #L45019c.  return @kind void;
  #L45019e.  v0:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4501a2.  v1:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L4501a6.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4501aa.  v3:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` @kind wide;
  #L4501ae.  v5:= 1I;
  #L4501b0.  v6:= 1I;
  #L4501b2.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4501b6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L4501bc.  v7:= temp;
  #L4501be.  v8:= 0I;
  #L4501c0.  if v7 != 0 then goto L4501d0;
  #L4501c4.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4501ca.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L4501ce.  return @kind void;
  #L4501d0.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4501d4.  v9:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` @kind boolean;
  #L4501d8.  if v9 == 0 then goto L45020c;
  #L4501dc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4501e2.  v10:= temp @kind object;
  #L4501e4.  if v10 == 0 then goto L45020c;
  #L4501e8.  call `clear`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.clear:()V` @kind virtual;
  #L4501ee.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L4501f4.  v1:= temp @kind object;
  #L4501f6.  if v7 == 0 then goto L450204;
  #L4501fa.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L4501fe.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450204.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45020a.  return @kind void;
  #L45020c.  call temp:= `poll`(v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L450212.  v10:= temp @kind object;
  #L450214.  if v10 != 0 then goto L45021c;
  #L450218.  v11:= 1I;
  #L45021a.  goto L45021e;
  #L45021c.  v11:= 0I;
  #L45021e.  if v9 == 0 then goto L45025e;
  #L450222.  if v11 == 0 then goto L45025e;
  #L450226.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L45022c.  v1:= temp @kind object;
  #L45022e.  if v1 != 0 then goto L450248;
  #L450232.  if v7 == 0 then goto L450240;
  #L450236.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L45023a.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L450240.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L450246.  goto L45025c;
  #L450248.  if v7 == 0 then goto L450256;
  #L45024c.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L450250.  call `onError`(v7, v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L450256.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L45025c.  return @kind void;
  #L45025e.  if v11 == 0 then goto L450276;
  #L450262.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.l` @type ^`long` := v3 @kind wide;
  #L450266.  v6:= -v6 @kind int;
  #L450268.  call temp:= `addAndGet`(v12, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L45026e.  v6:= temp;
  #L450270.  if v6 != 0 then goto L4501b2;
  #L450274.  return @kind void;
  #L450276.  v9:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L45027a.  if v10 == v9 then goto L450286;
  #L45027e.  call `onNext`(v7, v10) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L450284.  goto L4501b2;
  #L450286.  if v7 == 0 then goto L450294;
  #L45028a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L45028e.  call `onComplete`(v7) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L450294.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450298.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L45029e.  v7:= temp;
  #L4502a0.  if v7 != 0 then goto L4501b2;
  #L4502a4.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.b` @type ^`int`;
  #L4502a8.  call temp:= `create`(v7, v12) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L4502ae.  v7:= temp @kind object;
  #L4502b0.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.k` @type ^`io.reactivex.processors.UnicastProcessor` := v7 @kind object;
  #L4502b4.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4502b8.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4502be.  v8:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4502c2.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4502c8.  v8:= temp @kind wide;
  #L4502ca.  v10:= lcmp(v3, v8);
  #L4502ce.  if v10 == 0 then goto L4502e2;
  #L4502d2.  v8:= 1L;
  #L4502d6.  v3:= v3 + v8 @kind long;
  #L4502d8.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4502de.  goto L4501b2;
  #L4502e2.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4502e6.  call temp:= `cancel`(v7) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4502ec.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4502f0.  call `dispose`(v7) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4502f6.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4502fa.  v8:= "Could not deliver a window due to lack of requests" @kind object;
  #L4502fe.  call `<init>`(v7, v8) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L450304.  call temp:= `addThrowable`(v2, v7) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L45030a.  v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v5 @kind boolean;
  #L45030e.  goto L4501b2;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L450324.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450328.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45032e.  v0:= 1I;
  #L450330.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L450334.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L45033a.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L45034c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450350.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L450356.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L45035a.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L450360.  v0:= temp;
  #L450362.  if v0 == 0 then goto L450374;
  #L450366.  v2:= 1I;
  #L450368.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L45036c.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L450372.  goto L45037a;
  #L450374.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45037a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450144.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450148.  v1:= 0I;
  #L45014a.  v2:= 1I;
  #L45014c.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L450152.  v0:= temp;
  #L450154.  if v0 == 0 then goto L45017c;
  #L450158.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L45015c.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L450162.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L450166.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L45016c.  v0:= temp;
  #L45016e.  if v0 != 0 then goto L45017c;
  #L450172.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450176.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45017c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L45038c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L450390.  v1:= `@@io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.m` @type ^`java.lang.Object` @kind object;
  #L450394.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L45039a.  call `a`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4503a0.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4503b4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4503b8.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4503be.  v0:= 1I;
  #L4503c0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v0 @kind boolean;
  #L4503c4.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L4503ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4503dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.c` @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$a` @kind object;
  #L4503e0.  call `dispose`(v0) @signature `Lio/reactivex/subscribers/DisposableSubscriber;.dispose:()V` @kind virtual;
  #L4503e6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L4503ea.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4503f0.  v0:= temp;
  #L4503f2.  if v0 == 0 then goto L450404;
  #L4503f6.  v2:= 1I;
  #L4503f8.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.j` @type ^`boolean` := v2 @kind boolean;
  #L4503fc.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L450402.  goto L45040a;
  #L450404.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L45040a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L45041c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.f` @type ^`io.reactivex.internal.queue.MpscLinkedQueue` @kind object;
  #L450420.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L450426.  call `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.a:()V` @kind virtual;
  #L45042c.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450440.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450444.  v1:= 9223372036854775807L;
  #L45044e.  call temp:= `setOnce`(v0, v4, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L450454.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450468.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45046c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L450472.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundary$b;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L450484.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.e` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L450488.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L45048e.  v0:= temp;
  #L450490.  if v0 != 0 then goto L45049e;
  #L450494.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundary$b.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450498.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45049e.  return @kind void;
}
