record `io.reactivex.internal.operators.flowable.FlowableRepeat$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.subscriptions.SubscriptionArbiter` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableRepeat$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRepeat$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `io.reactivex.internal.subscriptions.SubscriptionArbiter` v4 @kind object, `org.reactivestreams.Publisher` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.<init>:(Lorg/reactivestreams/Subscriber;JLio/reactivex/internal/subscriptions/SubscriptionArbiter;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L447570.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L447576.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44757a.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` := v4 @kind object;
  #L44757e.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` := v5 @kind object;
  #L447582.  v0.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L447586.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L447650.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L447656.  v0:= temp;
  #L447658.  if v0 != 0 then goto L4476a6;
  #L44765c.  v0:= 1I;
  #L44765e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L447662.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.isCancelled:()Z` @kind virtual;
  #L447668.  v1:= temp;
  #L44766a.  if v1 == 0 then goto L447670;
  #L44766e.  return @kind void;
  #L447670.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` @kind wide;
  #L447674.  v3:= 0L;
  #L447678.  v5:= lcmp(v1, v3);
  #L44767c.  if v5 == 0 then goto L44768e;
  #L447680.  v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` := v3 @kind wide;
  #L447684.  v3:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L447688.  call `produced`(v3, v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.produced:(J)V` @kind virtual;
  #L44768e.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L447692.  call `subscribe`(v1, v6) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L447698.  v0:= -v0 @kind int;
  #L44769a.  call temp:= `addAndGet`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4476a0.  v0:= temp;
  #L4476a2.  if v0 != 0 then goto L44765e;
  #L4476a6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L447598.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` @kind wide;
  #L44759c.  v2:= 9223372036854775807L;
  #L4475a6.  v4:= lcmp(v0, v2);
  #L4475aa.  if v4 == 0 then goto L4475ba;
  #L4475ae.  v2:= 1L;
  #L4475b2.  v2:= v0 - v2 @kind long;
  #L4475b6.  v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.d` @type ^`long` := v2 @kind wide;
  #L4475ba.  v2:= 0L;
  #L4475be.  v4:= lcmp(v0, v2);
  #L4475c2.  if v4 == 0 then goto L4475ce;
  #L4475c6.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.a:()V` @kind virtual;
  #L4475cc.  goto L4475d8;
  #L4475ce.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4475d2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4475d8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4475ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4475f0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4475f6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L447608.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` @kind wide;
  #L44760c.  v2:= 1L;
  #L447610.  v0:= v0 + v2 @kind long;
  #L447612.  v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.e` @type ^`long` := v0 @kind wide;
  #L447616.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44761a.  call `onNext`(v0, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L447620.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableRepeat$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableRepeat$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L447634.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableRepeat$a.b` @type ^`io.reactivex.internal.subscriptions.SubscriptionArbiter` @kind object;
  #L447638.  call `setSubscription`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionArbiter;.setSubscription:(Lorg/reactivestreams/Subscription;)V` @kind virtual;
  #L44763e.  return @kind void;
}
