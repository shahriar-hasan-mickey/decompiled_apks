record `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$d` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @AccessFlag FINAL;
  `io.reactivex.internal.disposables.SequentialDisposable` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object, `io.reactivex.Scheduler$Worker` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44ea44.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44ea4a.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44ea4e.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` := v2 @kind wide;
  #L44ea52.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L44ea56.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` := v5 @kind object;
  #L44ea5a.  v1:= new `io.reactivex.internal.disposables.SequentialDisposable`;
  #L44ea5e.  call `<init>`(v1) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.<init>:()V` @kind direct;
  #L44ea64.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` := v1 @kind object;
  #L44ea68.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44ea6c.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44ea72.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L44ea76.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L44ea7a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L44ea80.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L44ea84.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.b:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44ebe8.  v0:= 9223372036854775807L;
  #L44ebf2.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44ebf8.  v4:= temp;
  #L44ebfa.  if v4 == 0 then goto L44ec36;
  #L44ebfe.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ec02.  call temp:= `cancel`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44ec08.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ec0c.  v5:= new `java.util.concurrent.TimeoutException`;
  #L44ec10.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L44ec14.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44ec18.  call temp:= `timeoutMessage`(v0, v2) @signature `Lio/reactivex/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L44ec1e.  v0:= temp @kind object;
  #L44ec20.  call `<init>`(v5, v0) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L44ec26.  call `onError`(v4, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ec2c.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44ec30.  call `dispose`(v4) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44ec36.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v4 @kind this, `long` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.c:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44ec68.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44ec6c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44ec70.  v2:= new `io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$e`;
  #L44ec74.  call `<init>`(v2, v5, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$e;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$d;)V` @kind direct;
  #L44ec7a.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.b` @type ^`long` @kind wide;
  #L44ec7e.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L44ec82.  call temp:= `schedule`(v1, v2, v5, v3) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L44ec88.  v5:= temp @kind object;
  #L44ec8a.  call temp:= `replace`(v0, v5) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.replace:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L44ec90.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ea98.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ea9c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44eaa2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44eaa6.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44eaac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44eac0.  v0:= 9223372036854775807L;
  #L44eaca.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44ead0.  v2:= temp @kind wide;
  #L44ead2.  v4:= lcmp(v2, v0);
  #L44ead6.  if v4 == 0 then goto L44eaf8;
  #L44eada.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44eade.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44eae4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44eae8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44eaee.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44eaf2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44eaf8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44eb0c.  v0:= 9223372036854775807L;
  #L44eb16.  call temp:= `getAndSet`(v5, v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L44eb1c.  v2:= temp @kind wide;
  #L44eb1e.  v4:= lcmp(v2, v0);
  #L44eb22.  if v4 == 0 then goto L44eb46;
  #L44eb26.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44eb2a.  call `dispose`(v0) @signature `Lio/reactivex/internal/disposables/SequentialDisposable;.dispose:()V` @kind virtual;
  #L44eb30.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44eb34.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44eb3a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L44eb3e.  call `dispose`(v6) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44eb44.  goto L44eb4c;
  #L44eb46.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44eb4c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44eb60.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L44eb66.  v0:= temp @kind wide;
  #L44eb68.  v2:= 9223372036854775807L;
  #L44eb72.  v4:= lcmp(v0, v2);
  #L44eb76.  if v4 == 0 then goto L44ebb4;
  #L44eb7a.  v2:= 1L;
  #L44eb7e.  v2:= v2 + v0 @kind long;
  #L44eb80.  call temp:= `compareAndSet`(v5, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.compareAndSet:(JJ)Z` @kind virtual;
  #L44eb86.  v0:= temp;
  #L44eb88.  if v0 != 0 then goto L44eb8e;
  #L44eb8c.  goto L44ebb4;
  #L44eb8e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.e` @type ^`io.reactivex.internal.disposables.SequentialDisposable` @kind object;
  #L44eb92.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44eb98.  v0:= temp @kind object;
  #L44eb9a.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L44eb9e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L44eba4.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44eba8.  call `onNext`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44ebae.  call `c`(v5, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.c:(J)V` @kind virtual;
  #L44ebb4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ebc8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ebcc.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44ebd0.  call temp:= `deferredSetOnce`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ebd6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44ec48.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44ec4c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeoutTimed$c.g` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44ec50.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L44ec56.  return @kind void;
}
