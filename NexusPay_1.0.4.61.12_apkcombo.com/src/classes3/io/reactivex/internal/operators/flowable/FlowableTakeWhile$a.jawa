record `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44d6a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L44d6ae.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44d6b2.  v0.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L44d6b6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d6c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d6cc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d6d2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d6e4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L44d6e8.  if v0 == 0 then goto L44d6ee;
  #L44d6ec.  return @kind void;
  #L44d6ee.  v0:= 1I;
  #L44d6f0.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d6f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d6f8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d6fe.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d710.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L44d714.  if v0 == 0 then goto L44d720;
  #L44d718.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44d71e.  return @kind void;
  #L44d720.  v0:= 1I;
  #L44d722.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v0 @kind boolean;
  #L44d726.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d72a.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44d730.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d744.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` @kind boolean;
  #L44d748.  if v0 == 0 then goto L44d74e;
  #L44d74c.  return @kind void;
  #L44d74e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L44d752.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L44d758.  v0:= temp;
  #L44d75a.  if v0 != 0 then goto L44d77a;
  #L44d75e.  v2:= 1I;
  #L44d760.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.d` @type ^`boolean` := v2 @kind boolean;
  #L44d764.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d768.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d76e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d772.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44d778.  return @kind void;
  #L44d77a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d77e.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44d784.  return @kind void;
  #L44d786.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44d788.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44d78e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d792.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44d798.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L44d79e.  return @kind void;
  catch `java.lang.Throwable` @[L44d74e..L44d75a] goto L44d786;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d7bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d7c0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44d7c6.  v0:= temp;
  #L44d7c8.  if v0 == 0 then goto L44d7da;
  #L44d7cc.  v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44d7d0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44d7d4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44d7da.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTakeWhile$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44d7ec.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTakeWhile$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44d7f0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44d7f6.  return @kind void;
}
