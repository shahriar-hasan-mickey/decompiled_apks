record `io.reactivex.internal.operators.flowable.FlowableFlattenIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.internal.operators.flowable.a` @kind class {
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.<init>:(Lio/reactivex/Flowable;Lio/reactivex/functions/Function;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43d20c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/a;.<init>:(Lio/reactivex/Flowable;)V` @kind direct;
  #L43d212.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43d216.  v0.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @type ^`int` := v3;
  #L43d21a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFlattenIterable` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43d22c.  v0:= v4.`io.reactivex.internal.operators.flowable.a.source` @type ^`io.reactivex.Flowable` @kind object;
  #L43d230.  v1:= instanceof @variable v0 @type ^`java.util.concurrent.Callable` @kind boolean;
  #L43d234.  if v1 == 0 then goto L43d290;
  #L43d238.  v0:= (`java.util.concurrent.Callable`) v0 @kind object;
  #L43d23c.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43d242.  v0:= temp @kind object;
  #L43d244.  if v0 != 0 then goto L43d250;
  #L43d248.  call `complete`(v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43d24e.  return @kind void;
  #L43d250.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43d254.  call temp:= `apply`(v1, v0) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43d25a.  v0:= temp @kind object;
  #L43d25c.  v0:= (`java.lang.Iterable`) v0 @kind object;
  #L43d260.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43d266.  v0:= temp @kind object;
  #L43d268.  call `subscribe`(v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind static;
  #L43d26e.  return @kind void;
  #L43d270.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43d272.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43d278.  call `error`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43d27e.  return @kind void;
  #L43d280.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43d282.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43d288.  call `error`(v0, v5) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43d28e.  return @kind void;
  #L43d290.  v1:= new `io.reactivex.internal.operators.flowable.FlowableFlattenIterable$a`;
  #L43d294.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L43d298.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableFlattenIterable.c` @type ^`int`;
  #L43d29c.  call `<init>`(v1, v5, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlattenIterable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;I)V` @kind direct;
  #L43d2a2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L43d2a8.  return @kind void;
  catch `java.lang.Throwable` @[L43d238..L43d244] goto L43d280;
  catch `java.lang.Throwable` @[L43d250..L43d268] goto L43d270;
}
