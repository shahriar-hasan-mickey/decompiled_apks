record `io.reactivex.internal.operators.flowable.FlowableRangeLong$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableRangeLong$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableRangeLong$c.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableRangeLong$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 , `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$c;.<init>:(Lorg/reactivestreams/Subscriber;JJ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446818.  call `<init>`(v0, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$a;.<init>:(JJ)V` @kind direct;
  #L44681e.  v0.`io.reactivex.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L446822.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$c` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L446834.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L446838.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44683c.  v3:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L446840.  v5:= lcmp(v3, v0);
  #L446844.  if v5 == 0 then goto L446868;
  #L446848.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L44684c.  if v5 == 0 then goto L446852;
  #L446850.  return @kind void;
  #L446852.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L446858.  v5:= temp @kind object;
  #L44685a.  call `onNext`(v2, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L446860.  v5:= 1L;
  #L446864.  v3:= v3 + v5 @kind long;
  #L446866.  goto L446840;
  #L446868.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L44686c.  if v0 == 0 then goto L446872;
  #L446870.  return @kind void;
  #L446872.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L446878.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableRangeLong$c` v11 @kind this, `long` v12 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableRangeLong$c;.f:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L44688c.  v0:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.a` @type ^`long` @kind wide;
  #L446890.  v2:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` @kind wide;
  #L446894.  v4:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$c.d` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L446898.  v5:= 0L;
  #L44689c.  v7:= v5 @kind wide;
  #L44689e.  v9:= lcmp(v7, v12);
  #L4468a2.  if v9 == 0 then goto L4468d0;
  #L4468a6.  v9:= lcmp(v2, v0);
  #L4468aa.  if v9 == 0 then goto L4468d0;
  #L4468ae.  v9:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4468b2.  if v9 == 0 then goto L4468b8;
  #L4468b6.  return @kind void;
  #L4468b8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L4468be.  v9:= temp @kind object;
  #L4468c0.  call `onNext`(v4, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4468c6.  v9:= 1L;
  #L4468ca.  v7:= v7 + v9 @kind long;
  #L4468cc.  v2:= v2 + v9 @kind long;
  #L4468ce.  goto L44689e;
  #L4468d0.  v12:= lcmp(v2, v0);
  #L4468d4.  if v12 != 0 then goto L4468e8;
  #L4468d8.  v12:= v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.c` @type ^`boolean` @kind boolean;
  #L4468dc.  if v12 != 0 then goto L4468e6;
  #L4468e0.  call `onComplete`(v4) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4468e6.  return @kind void;
  #L4468e8.  call temp:= `get`(v11) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4468ee.  v12:= temp @kind wide;
  #L4468f0.  v9:= lcmp(v7, v12);
  #L4468f4.  if v9 != 0 then goto L44689e;
  #L4468f8.  v11.`io.reactivex.internal.operators.flowable.FlowableRangeLong$a.b` @type ^`long` := v2 @kind wide;
  #L4468fc.  v12:= -v7 @kind long;
  #L4468fe.  call temp:= `addAndGet`(v11, v12) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L446904.  v12:= temp @kind wide;
  #L446906.  v7:= lcmp(v12, v5);
  #L44690a.  if v7 != 0 then goto L44689c;
  #L44690e.  return @kind void;
}
