record `io.reactivex.internal.operators.flowable.FlowablePublishAlt` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.flowables.ConnectableFlowable` @kind class, `io.reactivex.internal.fuseable.HasUpstreamPublisher` @kind interface, `io.reactivex.internal.disposables.ResettableConnectable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowablePublishAlt.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowablePublishAlt.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.<init>:(Lorg/reactivestreams/Publisher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44566c.  call `<init>`(v0) @signature `Lio/reactivex/flowables/ConnectableFlowable;.<init>:()V` @kind direct;
  #L445672.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.b` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L445676.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.c` @type ^`int` := v2;
  #L44567a.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L44567e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L445684.  v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L445688.  return @kind void;
}
procedure `void` `connect`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v4 @kind this, `io.reactivex.functions.Consumer` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44569c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4456a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4456a6.  v0:= temp @kind object;
  #L4456a8.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b`) v0 @kind object;
  #L4456ac.  if v0 == 0 then goto L4456bc;
  #L4456b0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.isDisposed:()Z` @kind virtual;
  #L4456b6.  v1:= temp;
  #L4456b8.  if v1 == 0 then goto L4456e2;
  #L4456bc.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b`;
  #L4456c0.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4456c4.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.c` @type ^`int`;
  #L4456c8.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L4456ce.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4456d2.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4456d8.  v0:= temp;
  #L4456da.  if v0 != 0 then goto L4456e0;
  #L4456de.  goto L44569c;
  #L4456e0.  v0:= v1 @kind object;
  #L4456e2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4456e6.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L4456ec.  v1:= temp;
  #L4456ee.  v2:= 1I;
  #L4456f0.  v3:= 0I;
  #L4456f2.  if v1 != 0 then goto L445708;
  #L4456f6.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L4456fa.  call temp:= `compareAndSet`(v1, v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L445700.  v1:= temp;
  #L445702.  if v1 == 0 then goto L445708;
  #L445706.  goto L44570a;
  #L445708.  v2:= 0I;
  #L44570a.  call `accept`(v5, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L445710.  if v2 == 0 then goto L44571e;
  #L445714.  v5:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L445718.  call `subscribe`(v5, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44571e.  return @kind void;
  #L445720.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L445722.  call `throwIfFatal`(v5) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L445728.  call temp:= `wrapOrThrow`(v5) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L44572e.  v5:= temp @kind object;
  #L445730.  throw v5;
  catch `java.lang.Throwable` @[L44570a..L445710] goto L445720;
}
procedure `int` `publishBufferSize`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.publishBufferSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44563c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.c` @type ^`int`;
  #L445640.  return v0;
}
procedure `void` `resetIf`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.resetIf:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L445750.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445754.  v3:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b`) v3 @kind object;
  #L445758.  v1:= 0I;
  #L44575a.  call temp:= `compareAndSet`(v0, v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L445760.  return @kind void;
}
procedure `org.reactivestreams.Publisher` `source`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.source:()Lorg/reactivestreams/Publisher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L445654.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L445658.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowablePublishAlt` v4 @kind this, `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L445774.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445778.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44577e.  v0:= temp @kind object;
  #L445780.  v0:= (`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b`) v0 @kind object;
  #L445784.  if v0 != 0 then goto L4457ae;
  #L445788.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$b`;
  #L44578c.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L445790.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.c` @type ^`int`;
  #L445794.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;I)V` @kind direct;
  #L44579a.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowablePublishAlt.d` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L44579e.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L4457a4.  v0:= temp;
  #L4457a6.  if v0 != 0 then goto L4457ac;
  #L4457aa.  goto L445774;
  #L4457ac.  v0:= v1 @kind object;
  #L4457ae.  v1:= new `io.reactivex.internal.operators.flowable.FlowablePublishAlt$a`;
  #L4457b2.  call `<init>`(v1, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;)V` @kind direct;
  #L4457b8.  call `onSubscribe`(v5, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4457be.  call temp:= `a`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.a:(Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;)Z` @kind virtual;
  #L4457c4.  v2:= temp;
  #L4457c6.  if v2 == 0 then goto L4457e6;
  #L4457ca.  call temp:= `a`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;.a:()Z` @kind virtual;
  #L4457d0.  v5:= temp;
  #L4457d2.  if v5 == 0 then goto L4457de;
  #L4457d6.  call `d`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$a;)V` @kind virtual;
  #L4457dc.  goto L4457e4;
  #L4457de.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublishAlt$b;.c:()V` @kind virtual;
  #L4457e4.  return @kind void;
  #L4457e6.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowablePublishAlt$b.i` @type ^`java.lang.Throwable` @kind object;
  #L4457ea.  if v0 == 0 then goto L4457f6;
  #L4457ee.  call `onError`(v5, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4457f4.  goto L4457fc;
  #L4457f6.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4457fc.  return @kind void;
}
