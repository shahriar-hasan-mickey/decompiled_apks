record `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43c484.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43c48a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43c48e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43c492.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` := v3 @kind boolean;
  #L43c496.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int` := v4;
  #L43c49a.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43c49e.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43c4a4.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L43c4a8.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43c4ac.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43c4b2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43c4b6.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43c4ba.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43c4c0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43c4c4.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L43c4c8.  v2:= 1I;
  #L43c4ca.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L43c4d0.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43c4d4.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43c4d8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43c4de.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L43c4e2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L43c520.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c524.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c52a.  v0:= temp @kind object;
  #L43c52c.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43c530.  if v0 == 0 then goto L43c53a;
  #L43c534.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43c53a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L43c54c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c552.  v0:= temp;
  #L43c554.  if v0 != 0 then goto L43c55e;
  #L43c558.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L43c55e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L43c570.  v0:= v17 @kind object;
  #L43c574.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c578.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c57c.  v3:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c580.  v4:= 1I;
  #L43c582.  v5:= 1I;
  #L43c584.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c588.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43c58e.  v6:= temp @kind wide;
  #L43c590.  v8:= 0L;
  #L43c594.  v10:= v8 @kind wide;
  #L43c596.  v12:= 0I;
  #L43c598.  v13:= lcmp(v10, v6);
  #L43c59c.  if v13 == 0 then goto L43c65e;
  #L43c5a0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L43c5a4.  if v14 == 0 then goto L43c5b0;
  #L43c5a8.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43c5ae.  return @kind void;
  #L43c5b0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43c5b4.  if v14 != 0 then goto L43c5e6;
  #L43c5b8.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c5bc.  call temp:= `get`(v14) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c5c2.  v14:= temp @kind object;
  #L43c5c4.  v14:= (`java.lang.Throwable`) v14 @kind object;
  #L43c5c8.  if v14 == 0 then goto L43c5e6;
  #L43c5cc.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c5d0.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c5d6.  v2:= temp @kind object;
  #L43c5d8.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43c5de.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c5e4.  return @kind void;
  #L43c5e6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43c5ec.  v14:= temp;
  #L43c5ee.  if v14 != 0 then goto L43c5f6;
  #L43c5f2.  v14:= 1I;
  #L43c5f4.  goto L43c5f8;
  #L43c5f6.  v14:= 0I;
  #L43c5f8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c5fe.  v15:= temp @kind object;
  #L43c600.  v15:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v15 @kind object;
  #L43c604.  if v15 == 0 then goto L43c612;
  #L43c608.  call temp:= `poll`(v15) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43c60e.  v15:= temp @kind object;
  #L43c610.  goto L43c614;
  #L43c612.  v15:= 0I;
  #L43c614.  if v15 != 0 then goto L43c61e;
  #L43c618.  v16:= 1I;
  #L43c61c.  goto L43c622;
  #L43c61e.  v16:= 0I;
  #L43c622.  if v14 == 0 then goto L43c64a;
  #L43c626.  if v16 == 0 then goto L43c64a;
  #L43c62a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c62e.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c634.  v2:= temp @kind object;
  #L43c636.  if v2 == 0 then goto L43c642;
  #L43c63a.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c640.  goto L43c648;
  #L43c642.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c648.  return @kind void;
  #L43c64a.  if v16 == 0 then goto L43c650;
  #L43c64e.  goto L43c65e;
  #L43c650.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c656.  v12:= 1L;
  #L43c65a.  v10:= v10 + v12 @kind long;
  #L43c65c.  goto L43c596;
  #L43c65e.  if v13 != 0 then goto L43c700;
  #L43c662.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L43c666.  if v6 == 0 then goto L43c672;
  #L43c66a.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43c670.  return @kind void;
  #L43c672.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43c676.  if v6 != 0 then goto L43c6a8;
  #L43c67a.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c67e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c684.  v6:= temp @kind object;
  #L43c686.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L43c68a.  if v6 == 0 then goto L43c6a8;
  #L43c68e.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c692.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c698.  v2:= temp @kind object;
  #L43c69a.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.a:()V` @kind virtual;
  #L43c6a0.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c6a6.  return @kind void;
  #L43c6a8.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43c6ae.  v6:= temp;
  #L43c6b0.  if v6 != 0 then goto L43c6b8;
  #L43c6b4.  v6:= 1I;
  #L43c6b6.  goto L43c6ba;
  #L43c6b8.  v6:= 0I;
  #L43c6ba.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c6c0.  v7:= temp @kind object;
  #L43c6c2.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43c6c6.  if v7 == 0 then goto L43c6d6;
  #L43c6ca.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43c6d0.  v7:= temp;
  #L43c6d2.  if v7 == 0 then goto L43c6d8;
  #L43c6d6.  v12:= 1I;
  #L43c6d8.  if v6 == 0 then goto L43c700;
  #L43c6dc.  if v12 == 0 then goto L43c700;
  #L43c6e0.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c6e4.  call temp:= `terminate`(v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c6ea.  v2:= temp @kind object;
  #L43c6ec.  if v2 == 0 then goto L43c6f8;
  #L43c6f0.  call `onError`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c6f6.  goto L43c6fe;
  #L43c6f8.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c6fe.  return @kind void;
  #L43c700.  v6:= lcmp(v10, v8);
  #L43c704.  if v6 == 0 then goto L43c72a;
  #L43c708.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c70c.  call temp:= `produced`(v6, v10) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c712.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L43c716.  v7:= 2147483647I;
  #L43c71c.  if v6 == v7 then goto L43c72a;
  #L43c720.  v6:= v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c724.  call `request`(v6, v10) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c72a.  v5:= -v5 @kind int;
  #L43c72c.  call temp:= `addAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43c732.  v5:= temp;
  #L43c734.  if v5 != 0 then goto L43c584;
  #L43c738.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c4f4.  v0:= 1I;
  #L43c4f6.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` := v0 @kind boolean;
  #L43c4fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c4fe.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43c504.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c508.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c50e.  return @kind void;
}
procedure `io.reactivex.internal.queue.SpscLinkedArrayQueue` `d`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L43c438.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c43c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c442.  v0:= temp @kind object;
  #L43c444.  v0:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v0 @kind object;
  #L43c448.  if v0 == 0 then goto L43c44e;
  #L43c44c.  return v0 @kind object;
  #L43c44e.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43c452.  call temp:= `bufferSize`() @signature `Lio/reactivex/Flowable;.bufferSize:()I` @kind static;
  #L43c458.  v1:= temp;
  #L43c45a.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43c460.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c464.  v2:= 0I;
  #L43c466.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L43c46c.  v1:= temp;
  #L43c46e.  if v1 == 0 then goto L43c438;
  #L43c472.  return v0 @kind object;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43c74c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c750.  call temp:= `delete`(v0, v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c756.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c75a.  call temp:= `addThrowable`(v3, v4) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43c760.  v3:= temp;
  #L43c762.  if v3 == 0 then goto L43c7b2;
  #L43c766.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43c76a.  if v3 != 0 then goto L43c784;
  #L43c76e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c772.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43c778.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c77c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c782.  goto L43c7a0;
  #L43c784.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L43c788.  v4:= 2147483647I;
  #L43c78e.  if v3 == v4 then goto L43c7a0;
  #L43c792.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c796.  v0:= 1L;
  #L43c79a.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c7a0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c7a4.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c7aa.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43c7b0.  goto L43c7b8;
  #L43c7b2.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43c7b8.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v5 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a` v6 @kind object, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43c7cc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c7d0.  call temp:= `delete`(v0, v6) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c7d6.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L43c7dc.  v6:= temp;
  #L43c7de.  if v6 != 0 then goto L43c8c0;
  #L43c7e2.  v6:= 0I;
  #L43c7e4.  v0:= 1I;
  #L43c7e6.  call temp:= `compareAndSet`(v5, v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L43c7ec.  v1:= temp;
  #L43c7ee.  if v1 == 0 then goto L43c8c0;
  #L43c7f2.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c7f6.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c7fc.  v1:= temp;
  #L43c7fe.  if v1 != 0 then goto L43c804;
  #L43c802.  v6:= 1I;
  #L43c804.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c808.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43c80e.  v0:= temp @kind wide;
  #L43c810.  v2:= 0L;
  #L43c814.  v4:= lcmp(v0, v2);
  #L43c818.  if v4 == 0 then goto L43c89a;
  #L43c81c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c820.  call `onNext`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43c826.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43c82a.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43c830.  v7:= temp @kind object;
  #L43c832.  v7:= (`io.reactivex.internal.queue.SpscLinkedArrayQueue`) v7 @kind object;
  #L43c836.  if v6 == 0 then goto L43c872;
  #L43c83a.  if v7 == 0 then goto L43c84a;
  #L43c83e.  call temp:= `isEmpty`(v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43c844.  v6:= temp;
  #L43c846.  if v6 == 0 then goto L43c872;
  #L43c84a.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c84e.  call temp:= `terminate`(v6) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43c854.  v6:= temp @kind object;
  #L43c856.  if v6 == 0 then goto L43c866;
  #L43c85a.  v7:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c85e.  call `onError`(v7, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43c864.  goto L43c870;
  #L43c866.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43c86a.  call `onComplete`(v6) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43c870.  return @kind void;
  #L43c872.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43c876.  v0:= 1L;
  #L43c87a.  call temp:= `produced`(v6, v0) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43c880.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L43c884.  v7:= 2147483647I;
  #L43c88a.  if v6 == v7 then goto L43c8ac;
  #L43c88e.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c892.  call `request`(v6, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43c898.  goto L43c8ac;
  #L43c89a.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43c8a0.  v6:= temp @kind object;
  #L43c8a2.  @monitorenter v6
  #L43c8a4.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c8aa.  @monitorexit v6
  #L43c8ac.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c8b2.  v6:= temp;
  #L43c8b4.  if v6 != 0 then goto L43c8ea;
  #L43c8b8.  return @kind void;
  #L43c8ba.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c8bc.  @monitorexit v6
  #L43c8be.  throw v7;
  #L43c8c0.  call temp:= `d`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.d:()Lio/reactivex/internal/queue/SpscLinkedArrayQueue;` @kind virtual;
  #L43c8c6.  v6:= temp @kind object;
  #L43c8c8.  @monitorenter v6
  #L43c8ca.  call temp:= `offer`(v6, v7) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43c8d0.  @monitorexit v6
  #L43c8d2.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c8d6.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c8dc.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c8e2.  v6:= temp;
  #L43c8e4.  if v6 == 0 then goto L43c8ea;
  #L43c8e8.  return @kind void;
  #L43c8ea.  call `c`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.c:()V` @kind virtual;
  #L43c8f0.  return @kind void;
  #L43c8f2.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c8f4.  @monitorexit v6
  #L43c8f6.  throw v7;
  catch `java.lang.Throwable` @[L43c8a4..L43c8ac] goto L43c8ba;
  catch `java.lang.Throwable` @[L43c8bc..L43c8be] goto L43c8ba;
  catch `java.lang.Throwable` @[L43c8ca..L43c8d2] goto L43c8f2;
  catch `java.lang.Throwable` @[L43c8f4..L43c8f6] goto L43c8f2;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c930.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c934.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c93a.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43c940.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43c954.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c958.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43c95e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.g` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43c962.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43c968.  v0:= temp;
  #L43c96a.  if v0 == 0 then goto L43c988;
  #L43c96e.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.b` @type ^`boolean` @kind boolean;
  #L43c972.  if v2 != 0 then goto L43c980;
  #L43c976.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c97a.  call `dispose`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43c980.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43c986.  goto L43c98e;
  #L43c988.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43c98e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43c9a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.h` @type ^`io.reactivex.functions.Function` @kind object;
  #L43c9a4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43c9aa.  v3:= temp @kind object;
  #L43c9ac.  v0:= "The mapper returned a null SingleSource" @kind object;
  #L43c9b0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43c9b6.  v3:= temp @kind object;
  #L43c9b8.  v3:= (`io.reactivex.SingleSource`) v3 @kind object;
  #L43c9bc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43c9c0.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43c9c6.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a$a`;
  #L43c9ca.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;)V` @kind direct;
  #L43c9d0.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.k` @type ^`boolean` @kind boolean;
  #L43c9d4.  if v1 != 0 then goto L43c9ee;
  #L43c9d8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43c9dc.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43c9e2.  v1:= temp;
  #L43c9e4.  if v1 == 0 then goto L43c9ee;
  #L43c9e8.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L43c9ee.  return @kind void;
  #L43c9f0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43c9f2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43c9f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43c9fc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43ca02.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43ca08.  return @kind void;
  catch `java.lang.Throwable` @[L43c9a0..L43c9bc] goto L43c9f0;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ca28.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ca2c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43ca32.  v0:= temp;
  #L43ca34.  if v0 == 0 then goto L43ca6e;
  #L43ca38.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.j` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43ca3c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43ca40.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43ca46.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.c` @type ^`int`;
  #L43ca4a.  v1:= 2147483647I;
  #L43ca50.  if v0 != v1 then goto L43ca66;
  #L43ca54.  v0:= 9223372036854775807L;
  #L43ca5e.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43ca64.  goto L43ca6e;
  #L43ca66.  v0:= (`long`) v0 @kind i2l;
  #L43ca68.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43ca6e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ca80.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43ca86.  v0:= temp;
  #L43ca88.  if v0 == 0 then goto L43ca9c;
  #L43ca8c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapSingle$a.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43ca90.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43ca96.  call `b`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapSingle$a;.b:()V` @kind virtual;
  #L43ca9c.  return @kind void;
}
