record `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `boolean` v4 , `boolean` v5 , `io.reactivex.functions.Action` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.<init>:(Lorg/reactivestreams/Subscriber;IZZLio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4436f8.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L4436fe.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L443702.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L443708.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L44370c.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L443710.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.functions.Action` := v6 @kind object;
  #L443714.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` := v5 @kind boolean;
  #L443718.  if v4 == 0 then goto L443728;
  #L44371c.  v2:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L443720.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L443726.  goto L443732;
  #L443728.  v2:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L44372c.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L443732.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v2 @kind object;
  #L443736.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443748.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L44374c.  if v0 != 0 then goto L44377e;
  #L443750.  v0:= 1I;
  #L443752.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` := v0 @kind boolean;
  #L443756.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44375a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L443760.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L443764.  if v0 != 0 then goto L44377e;
  #L443768.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44376e.  v0:= temp;
  #L443770.  if v0 != 0 then goto L44377e;
  #L443774.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443778.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44377e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443790.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443794.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44379a.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v14 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L4437ac.  call temp:= `getAndIncrement`(v14) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L4437b2.  v0:= temp;
  #L4437b4.  if v0 != 0 then goto L443882;
  #L4437b8.  v0:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4437bc.  v1:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4437c0.  v2:= 1I;
  #L4437c2.  v3:= 1I;
  #L4437c4.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L4437c8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L4437ce.  v5:= temp;
  #L4437d0.  call temp:= `e`(v14, v4, v5, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L4437d6.  v4:= temp;
  #L4437d8.  if v4 == 0 then goto L4437de;
  #L4437dc.  return @kind void;
  #L4437de.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4437e2.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4437e8.  v4:= temp @kind wide;
  #L4437ea.  v6:= 0L;
  #L4437ee.  v8:= v6 @kind wide;
  #L4437f0.  v10:= lcmp(v8, v4);
  #L4437f4.  if v10 == 0 then goto L443830;
  #L4437f8.  v11:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L4437fc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L443802.  v12:= temp @kind object;
  #L443804.  if v12 != 0 then goto L44380c;
  #L443808.  v13:= 1I;
  #L44380a.  goto L44380e;
  #L44380c.  v13:= 0I;
  #L44380e.  call temp:= `e`(v14, v11, v13, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L443814.  v11:= temp;
  #L443816.  if v11 == 0 then goto L44381c;
  #L44381a.  return @kind void;
  #L44381c.  if v13 == 0 then goto L443822;
  #L443820.  goto L443830;
  #L443822.  call `onNext`(v1, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L443828.  v10:= 1L;
  #L44382c.  v8:= v8 + v10 @kind long;
  #L44382e.  goto L4437f0;
  #L443830.  if v10 != 0 then goto L44384e;
  #L443834.  v10:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` @kind boolean;
  #L443838.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44383e.  v11:= temp;
  #L443840.  call temp:= `e`(v14, v10, v11, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L443846.  v10:= temp;
  #L443848.  if v10 == 0 then goto L44384e;
  #L44384c.  return @kind void;
  #L44384e.  v10:= lcmp(v8, v6);
  #L443852.  if v10 == 0 then goto L443874;
  #L443856.  v6:= 9223372036854775807L;
  #L443860.  v10:= lcmp(v4, v6);
  #L443864.  if v10 == 0 then goto L443874;
  #L443868.  v4:= v14.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L44386c.  v5:= -v8 @kind long;
  #L44386e.  call temp:= `addAndGet`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L443874.  v3:= -v3 @kind int;
  #L443876.  call temp:= `addAndGet`(v14, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44387c.  v3:= temp;
  #L44387e.  if v3 != 0 then goto L4437c4;
  #L443882.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.e:(ZZLorg/reactivestreams/Subscriber;)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L44361c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.f` @type ^`boolean` @kind boolean;
  #L443620.  v1:= 1I;
  #L443622.  if v0 == 0 then goto L443632;
  #L443626.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L44362a.  call `clear`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L443630.  return v1;
  #L443632.  if v3 == 0 then goto L443680;
  #L443636.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.c` @type ^`boolean` @kind boolean;
  #L44363a.  if v3 == 0 then goto L44365a;
  #L44363e.  if v4 == 0 then goto L443680;
  #L443642.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L443646.  if v3 == 0 then goto L443652;
  #L44364a.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443650.  goto L443658;
  #L443652.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L443658.  return v1;
  #L44365a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` @kind object;
  #L44365e.  if v3 == 0 then goto L443674;
  #L443662.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443666.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L44366c.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L443672.  return v1;
  #L443674.  if v4 == 0 then goto L443680;
  #L443678.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44367e.  return v1;
  #L443680.  v3:= 0I;
  #L443682.  return v3;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443694.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443698.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L44369e.  v0:= temp;
  #L4436a0.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443894.  v0:= 1I;
  #L443896.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L44389a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L44389e.  if v0 == 0 then goto L4438ae;
  #L4438a2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4438a6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4438ac.  goto L4438b4;
  #L4438ae.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4438b4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4438c8.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.h` @type ^`java.lang.Throwable` := v2 @kind object;
  #L4438cc.  v0:= 1I;
  #L4438ce.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.g` @type ^`boolean` := v0 @kind boolean;
  #L4438d2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4438d6.  if v0 == 0 then goto L4438e6;
  #L4438da.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4438de.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4438e4.  goto L4438ec;
  #L4438e6.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4438ec.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L443900.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L443904.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L44390a.  v2:= temp;
  #L44390c.  if v2 != 0 then goto L44394a;
  #L443910.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443914.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44391a.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L44391e.  v0:= "Buffer is full" @kind object;
  #L443922.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L443928.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L44392c.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L443932.  goto L443942;
  #L443934.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L443936.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44393c.  call temp:= `initCause`(v2, v0) @signature `Ljava/lang/RuntimeException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L443942.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L443948.  return @kind void;
  #L44394a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L44394e.  if v2 == 0 then goto L443960;
  #L443952.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L443956.  v0:= 0I;
  #L443958.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44395e.  goto L443966;
  #L443960.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L443966.  return @kind void;
  catch `java.lang.Throwable` @[L443928..L443932] goto L443934;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L443984.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L443988.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44398e.  v0:= temp;
  #L443990.  if v0 == 0 then goto L4439b2;
  #L443994.  v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L443998.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44399c.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L4439a2.  v0:= 9223372036854775807L;
  #L4439ac.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L4439b2.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4436d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.b` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4436dc.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L4436e2.  v0:= temp @kind object;
  #L4436e4.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4439c4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` @kind boolean;
  #L4439c8.  if v0 != 0 then goto L4439e8;
  #L4439cc.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4439d2.  v0:= temp;
  #L4439d4.  if v0 == 0 then goto L4439e8;
  #L4439d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.i` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4439dc.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4439e2.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.drain:()V` @kind virtual;
  #L4439e8.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableOnBackpressureBuffer$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4436b4.  v0:= 2I;
  #L4436b6.  v2:= v2 ^& v0 @kind int;
  #L4436b8.  if v2 == 0 then goto L4436c4;
  #L4436bc.  v2:= 1I;
  #L4436be.  v1.`io.reactivex.internal.operators.flowable.FlowableOnBackpressureBuffer$a.j` @type ^`boolean` := v2 @kind boolean;
  #L4436c2.  return v0;
  #L4436c4.  v2:= 0I;
  #L4436c6.  return v2;
}
