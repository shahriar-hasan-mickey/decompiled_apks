record `io.reactivex.internal.operators.flowable.FlowableTake$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableTake$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableTake$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableTake$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableTake$a.e` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTake$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44c950.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44c956.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L44c95a.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`long` := v2 @kind wide;
  #L44c95e.  v0.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` := v2 @kind wide;
  #L44c962.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c974.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c978.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c97e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c990.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` @kind boolean;
  #L44c994.  if v0 != 0 then goto L44c9a8;
  #L44c998.  v0:= 1I;
  #L44c99a.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44c99e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c9a2.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44c9a8.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44c9bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` @kind boolean;
  #L44c9c0.  if v0 != 0 then goto L44c9e0;
  #L44c9c4.  v0:= 1I;
  #L44c9c6.  v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` := v0 @kind boolean;
  #L44c9ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44c9ce.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44c9d4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44c9d8.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44c9de.  goto L44c9e6;
  #L44c9e0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44c9e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44c9f8.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` @kind boolean;
  #L44c9fc.  if v0 != 0 then goto L44ca48;
  #L44ca00.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` @kind wide;
  #L44ca04.  v2:= 1L;
  #L44ca08.  v2:= v0 - v2 @kind long;
  #L44ca0c.  v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.e` @type ^`long` := v2 @kind wide;
  #L44ca10.  v4:= 0L;
  #L44ca14.  v6:= lcmp(v0, v4);
  #L44ca18.  if v6 <= 0 then goto L44ca48;
  #L44ca1c.  v0:= lcmp(v2, v4);
  #L44ca20.  if v0 != 0 then goto L44ca28;
  #L44ca24.  v0:= 1I;
  #L44ca26.  goto L44ca2a;
  #L44ca28.  v0:= 0I;
  #L44ca2a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ca2e.  call `onNext`(v1, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44ca34.  if v0 == 0 then goto L44ca48;
  #L44ca38.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ca3c.  call `cancel`(v8) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ca42.  call `onComplete`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onComplete:()V` @kind virtual;
  #L44ca48.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44ca5c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44ca60.  call temp:= `validate`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44ca66.  v0:= temp;
  #L44ca68.  if v0 == 0 then goto L44caa2;
  #L44ca6c.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` := v6 @kind object;
  #L44ca70.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L44ca74.  v2:= 0L;
  #L44ca78.  v4:= lcmp(v0, v2);
  #L44ca7c.  if v4 != 0 then goto L44ca98;
  #L44ca80.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44ca86.  v6:= 1I;
  #L44ca88.  v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.c` @type ^`boolean` := v6 @kind boolean;
  #L44ca8c.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ca90.  call `complete`(v6) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L44ca96.  goto L44caa2;
  #L44ca98.  v6:= v5.`io.reactivex.internal.operators.flowable.FlowableTake$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44ca9c.  call `onSubscribe`(v6, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44caa2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableTake$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableTake$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44cab4.  call temp:= `validate`(v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44caba.  v0:= temp;
  #L44cabc.  if v0 != 0 then goto L44cac2;
  #L44cac0.  return @kind void;
  #L44cac2.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L44cac8.  v0:= temp;
  #L44caca.  if v0 != 0 then goto L44cb00;
  #L44cace.  v0:= 0I;
  #L44cad0.  v1:= 1I;
  #L44cad2.  call temp:= `compareAndSet`(v3, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44cad8.  v0:= temp;
  #L44cada.  if v0 == 0 then goto L44cb00;
  #L44cade.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.b` @type ^`long` @kind wide;
  #L44cae2.  v2:= lcmp(v4, v0);
  #L44cae6.  if v2 < 0 then goto L44cb00;
  #L44caea.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44caee.  v0:= 9223372036854775807L;
  #L44caf8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cafe.  return @kind void;
  #L44cb00.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTake$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44cb04.  call `request`(v0, v4) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44cb0a.  return @kind void;
}
