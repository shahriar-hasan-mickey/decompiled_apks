record `io.reactivex.internal.operators.flowable.FlowableTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableTimeout$c` `io.reactivex.internal.operators.flowable.FlowableTimeout$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableTimeout$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v0 @kind this, `long` v1 , `io.reactivex.internal.operators.flowable.FlowableTimeout$c` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.<init>:(JLio/reactivex/internal/operators/flowable/FlowableTimeout$c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44e01c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L44e022.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` := v1 @kind wide;
  #L44e026.  v0.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTimeout$c` := v3 @kind object;
  #L44e02a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L44e03c.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L44e042.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44dff4.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44dffa.  v0:= temp @kind object;
  #L44dffc.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44e000.  if v0 != v1 then goto L44e008;
  #L44e004.  v0:= 1I;
  #L44e006.  goto L44e00a;
  #L44e008.  v0:= 0I;
  #L44e00a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44e054.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e05a.  v0:= temp @kind object;
  #L44e05c.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44e060.  if v0 == v1 then goto L44e078;
  #L44e064.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e06a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L44e06e.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L44e072.  call `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L44e078.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44e08c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e092.  v0:= temp @kind object;
  #L44e094.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44e098.  if v0 == v1 then goto L44e0b2;
  #L44e09c.  call `lazySet`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e0a2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L44e0a6.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L44e0aa.  call `a`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$c;.a:(JLjava/lang/Throwable;)V` @kind interface;
  #L44e0b0.  goto L44e0b8;
  #L44e0b2.  call `onError`(v4) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44e0b8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e0cc.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44e0d2.  v3:= temp @kind object;
  #L44e0d4.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L44e0d8.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44e0dc.  if v3 == v0 then goto L44e0fe;
  #L44e0e0.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44e0e6.  v3:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44e0ea.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L44e0f0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.a` @type ^`io.reactivex.internal.operators.flowable.FlowableTimeout$c` @kind object;
  #L44e0f4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableTimeout$a.b` @type ^`long` @kind wide;
  #L44e0f8.  call `b`(v3, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeoutTimed$d;.b:(J)V` @kind interface;
  #L44e0fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableTimeout$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableTimeout$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44e110.  v0:= 9223372036854775807L;
  #L44e11a.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L44e120.  return @kind void;
}
