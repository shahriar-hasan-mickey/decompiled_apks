record `io.reactivex.internal.operators.flowable.FlowableCreate$f` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.flowable.FlowableCreate$b` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCreate$f.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43701c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L437022.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L437026.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43702c.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L437030.  v1:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L437034.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L43703a.  v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v1 @kind object;
  #L43703e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.c:()V` @AccessFlag  {
    temp;

  #L4371e0.  call `e`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.e:()V` @kind virtual;
  #L4371e6.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4371f8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L4371fc.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L437202.  v0:= temp;
  #L437204.  if v0 != 0 then goto L437214;
  #L437208.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43720c.  v1:= 0I;
  #L43720e.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L437214.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v17 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L437050.  v0:= v17 @kind object;
  #L437054.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L437058.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43705e.  v1:= temp;
  #L437060.  if v1 == 0 then goto L437066;
  #L437064.  return @kind void;
  #L437066.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43706a.  v2:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43706e.  v3:= 1I;
  #L437070.  v4:= 1I;
  #L437072.  call temp:= `get`(v17) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L437078.  v5:= temp @kind wide;
  #L43707a.  v7:= 0L;
  #L43707e.  v9:= v7 @kind wide;
  #L437080.  v11:= 0I;
  #L437082.  v12:= 0I;
  #L437084.  v13:= lcmp(v9, v5);
  #L437088.  if v13 == 0 then goto L4370ee;
  #L43708c.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L437092.  v14:= temp;
  #L437094.  if v14 == 0 then goto L4370a0;
  #L437098.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43709e.  return @kind void;
  #L4370a0.  v14:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L4370a4.  call temp:= `getAndSet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4370aa.  v15:= temp @kind object;
  #L4370ac.  if v15 != 0 then goto L4370b6;
  #L4370b0.  v16:= 1I;
  #L4370b4.  goto L4370ba;
  #L4370b6.  v16:= 0I;
  #L4370ba.  if v14 == 0 then goto L4370da;
  #L4370be.  if v16 == 0 then goto L4370da;
  #L4370c2.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L4370c6.  if v1 == 0 then goto L4370d2;
  #L4370ca.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L4370d0.  goto L4370d8;
  #L4370d2.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L4370d8.  return @kind void;
  #L4370da.  if v16 == 0 then goto L4370e0;
  #L4370de.  goto L4370ee;
  #L4370e0.  call `onNext`(v1, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4370e6.  v11:= 1L;
  #L4370ea.  v9:= v9 + v11 @kind long;
  #L4370ec.  goto L437080;
  #L4370ee.  if v13 != 0 then goto L437138;
  #L4370f2.  call temp:= `isCancelled`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L4370f8.  v5:= temp;
  #L4370fa.  if v5 == 0 then goto L437106;
  #L4370fe.  call `lazySet`(v2, v12) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L437104.  return @kind void;
  #L437106.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L43710a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L437110.  v6:= temp @kind object;
  #L437112.  if v6 != 0 then goto L437118;
  #L437116.  v11:= 1I;
  #L437118.  if v5 == 0 then goto L437138;
  #L43711c.  if v11 == 0 then goto L437138;
  #L437120.  v1:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` @kind object;
  #L437124.  if v1 == 0 then goto L437130;
  #L437128.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.b:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43712e.  goto L437136;
  #L437130.  call `a`(v17) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.a:()V` @kind virtual;
  #L437136.  return @kind void;
  #L437138.  v5:= lcmp(v9, v7);
  #L43713c.  if v5 == 0 then goto L437146;
  #L437140.  call temp:= `produced`(v0, v9) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L437146.  v5:= v0.`io.reactivex.internal.operators.flowable.FlowableCreate$f.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L43714a.  v4:= -v4 @kind int;
  #L43714c.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L437152.  v4:= temp;
  #L437154.  if v4 != 0 then goto L437072;
  #L437158.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43716c.  v0:= 1I;
  #L43716e.  v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v0 @kind boolean;
  #L437172.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.e:()V` @kind virtual;
  #L437178.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43718c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L437190.  if v0 != 0 then goto L4371cc;
  #L437194.  call temp:= `isCancelled`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L43719a.  v0:= temp;
  #L43719c.  if v0 == 0 then goto L4371a2;
  #L4371a0.  goto L4371cc;
  #L4371a2.  if v2 != 0 then goto L4371bc;
  #L4371a6.  v2:= new `java.lang.NullPointerException`;
  #L4371aa.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L4371ae.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4371b4.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4371ba.  return @kind void;
  #L4371bc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCreate$f.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4371c0.  call `set`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L4371c6.  call `e`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.e:()V` @kind virtual;
  #L4371cc.  return @kind void;
}
procedure `boolean` `tryOnError`(`io.reactivex.internal.operators.flowable.FlowableCreate$f` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.tryOnError:(Ljava/lang/Throwable;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L436fc8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` @kind boolean;
  #L436fcc.  if v0 != 0 then goto L437008;
  #L436fd0.  call temp:= `isCancelled`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.isCancelled:()Z` @kind virtual;
  #L436fd6.  v0:= temp;
  #L436fd8.  if v0 == 0 then goto L436fde;
  #L436fdc.  goto L437008;
  #L436fde.  if v3 != 0 then goto L436ff6;
  #L436fe2.  v0:= new `java.lang.NullPointerException`;
  #L436fe6.  v1:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L436fea.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L436ff0.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L436ff6.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.d` @type ^`java.lang.Throwable` := v3 @kind object;
  #L436ffa.  v3:= 1I;
  #L436ffc.  v2.`io.reactivex.internal.operators.flowable.FlowableCreate$f.e` @type ^`boolean` := v3 @kind boolean;
  #L437000.  call `e`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableCreate$f;.e:()V` @kind virtual;
  #L437006.  return v3;
  #L437008.  v3:= 0I;
  #L43700a.  return v3;
}
