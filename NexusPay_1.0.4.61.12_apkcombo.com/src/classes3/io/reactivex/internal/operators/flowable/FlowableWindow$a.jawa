record `io.reactivex.internal.operators.flowable.FlowableWindow$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindow$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindow$a.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableWindow$a.e` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindow$a.f` @AccessFlag ;
  `io.reactivex.processors.UnicastProcessor` `io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableWindow$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `long` v3 , `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.<init>:(Lorg/reactivestreams/Subscriber;JI)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L44f78c.  v0:= 1I;
  #L44f78e.  call `<init>`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L44f794.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L44f798.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` := v3 @kind wide;
  #L44f79c.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L44f7a0.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L44f7a6.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L44f7aa.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.d` @type ^`int` := v5;
  #L44f7ae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44f7c0.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindow$a.c` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L44f7c4.  v1:= 0I;
  #L44f7c6.  v2:= 1I;
  #L44f7c8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L44f7ce.  v0:= temp;
  #L44f7d0.  if v0 == 0 then goto L44f7da;
  #L44f7d4.  call `run`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.run:()V` @kind virtual;
  #L44f7da.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f7ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f7f0.  if v0 == 0 then goto L44f800;
  #L44f7f4.  v1:= 0I;
  #L44f7f6.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L44f7fa.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f800.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f804.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L44f80a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f81c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f820.  if v0 == 0 then goto L44f830;
  #L44f824.  v1:= 0I;
  #L44f826.  v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` := v1 @kind object;
  #L44f82a.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f830.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f834.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44f83a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L44f84c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` @kind wide;
  #L44f850.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L44f854.  v3:= 0L;
  #L44f858.  v5:= lcmp(v0, v3);
  #L44f85c.  if v5 != 0 then goto L44f880;
  #L44f860.  call temp:= `getAndIncrement`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44f866.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.d` @type ^`int`;
  #L44f86a.  call temp:= `create`(v2, v7) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(ILjava/lang/Runnable;)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L44f870.  v2:= temp @kind object;
  #L44f872.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` := v2 @kind object;
  #L44f876.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f87a.  call `onNext`(v5, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L44f880.  v5:= 1L;
  #L44f884.  v0:= v0 + v5 @kind long;
  #L44f886.  call `onNext`(v2, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L44f88c.  v5:= v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` @kind wide;
  #L44f890.  v8:= lcmp(v0, v5);
  #L44f894.  if v8 != 0 then goto L44f8aa;
  #L44f898.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` := v3 @kind wide;
  #L44f89c.  v8:= 0I;
  #L44f89e.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.g` @type ^`io.reactivex.processors.UnicastProcessor` := v8 @kind object;
  #L44f8a2.  call `onComplete`(v2) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L44f8a8.  goto L44f8ae;
  #L44f8aa.  v7.`io.reactivex.internal.operators.flowable.FlowableWindow$a.e` @type ^`long` := v0 @kind wide;
  #L44f8ae.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f8c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f8c4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L44f8ca.  v0:= temp;
  #L44f8cc.  if v0 == 0 then goto L44f8de;
  #L44f8d0.  v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L44f8d4.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L44f8d8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L44f8de.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44f8f0.  call temp:= `validate`(v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44f8f6.  v0:= temp;
  #L44f8f8.  if v0 == 0 then goto L44f912;
  #L44f8fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.b` @type ^`long` @kind wide;
  #L44f900.  call temp:= `multiplyCap`(v0, v3) @signature `Lio/reactivex/internal/util/BackpressureHelper;.multiplyCap:(JJ)J` @kind static;
  #L44f906.  v3:= temp @kind wide;
  #L44f908.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f90c.  call `request`(v0, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L44f912.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableWindow$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindow$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44f924.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L44f92a.  v0:= temp;
  #L44f92c.  if v0 != 0 then goto L44f93a;
  #L44f930.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindow$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L44f934.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L44f93a.  return @kind void;
}
