record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @AccessFlag FINAL;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object, `int` v7 , `boolean` v8 , `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JLjava/util/concurrent/TimeUnit;IZLio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4330a8.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4330ac.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4330b2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4330b8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L4330bc.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` := v4 @kind wide;
  #L4330c0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` := v6 @kind object;
  #L4330c4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int` := v7;
  #L4330c8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` := v8 @kind boolean;
  #L4330cc.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L4330d0.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L43306c.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433072.  v1:= 1I;
  #L433074.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43304c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433050.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L433056.  v1:= temp;
  #L433058.  return v1;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4330e4.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L4330e8.  if v0 != 0 then goto L4330f8;
  #L4330ec.  v0:= 1I;
  #L4330ee.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4330f2.  call `dispose`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @kind virtual;
  #L4330f8.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43310c.  @monitorenter v1
  #L43310e.  v0:= 0I;
  #L433110.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L433114.  @monitorexit v1
  #L433116.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43311a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L433120.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433124.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43312a.  return @kind void;
  #L43312c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43312e.  @monitorexit v1
  #L433130.  throw v0;
  catch `java.lang.Throwable` @[L433110..L433116] goto L43312c;
  catch `java.lang.Throwable` @[L43312e..L433130] goto L43312c;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433088.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43308c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L433092.  v0:= temp;
  #L433094.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L433158.  @monitorenter v3
  #L43315a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L43315e.  v1:= 0I;
  #L433160.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v1 @kind object;
  #L433164.  @monitorexit v3
  #L433166.  if v0 == 0 then goto L4331a0;
  #L43316a.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43316e.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L433174.  v0:= 1I;
  #L433176.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L43317a.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L433180.  v0:= temp;
  #L433182.  if v0 == 0 then goto L433196;
  #L433186.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43318a.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43318e.  v2:= 0I;
  #L433190.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L433196.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L43319a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4331a0.  return @kind void;
  #L4331a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4331a4.  @monitorexit v3
  #L4331a6.  throw v0;
  catch `java.lang.Throwable` @[L43315a..L433166] goto L4331a2;
  catch `java.lang.Throwable` @[L4331a4..L4331a6] goto L4331a2;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4331cc.  @monitorenter v1
  #L4331ce.  v0:= 0I;
  #L4331d0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L4331d4.  @monitorexit v1
  #L4331d6.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4331da.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4331e0.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4331e4.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4331ea.  return @kind void;
  #L4331ec.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4331ee.  @monitorexit v1
  #L4331f0.  throw v2;
  catch `java.lang.Throwable` @[L4331d0..L4331d6] goto L4331ec;
  catch `java.lang.Throwable` @[L4331ee..L4331f0] goto L4331ec;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L433218.  @monitorenter v7
  #L43321a.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L43321e.  if v0 != 0 then goto L433226;
  #L433222.  @monitorexit v7
  #L433224.  return @kind void;
  #L433226.  call temp:= `add`(v0, v8) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L43322c.  call temp:= `size`(v0) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L433232.  v8:= temp;
  #L433234.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.f` @type ^`int`;
  #L433238.  if v8 >= v1 then goto L433240;
  #L43323c.  @monitorexit v7
  #L43323e.  return @kind void;
  #L433240.  v8:= 0I;
  #L433242.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L433246.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L43324a.  v3:= 1L;
  #L43324e.  v1:= v1 + v3 @kind long;
  #L433250.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` := v1 @kind wide;
  #L433254.  @monitorexit v7
  #L433256.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L43325a.  if v8 == 0 then goto L433268;
  #L43325e.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L433262.  call `dispose`(v8) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433268.  v8:= 0I;
  #L43326a.  call `fastPathOrderedEmitMax`(v7, v0, v8, v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L433270.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433274.  call temp:= `call`(v8) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43327a.  v8:= temp @kind object;
  #L43327c.  v0:= "The supplied buffer is null" @kind object;
  #L433280.  call temp:= `requireNonNull`(v8, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433286.  v8:= temp @kind object;
  #L433288.  v8:= (`java.util.Collection`) v8 @kind object;
  #L43328c.  @monitorenter v7
  #L43328e.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v8 @kind object;
  #L433292.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L433296.  v0:= v0 + v3 @kind long;
  #L433298.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` := v0 @kind wide;
  #L43329c.  @monitorexit v7
  #L43329e.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.g` @type ^`boolean` @kind boolean;
  #L4332a2.  if v8 == 0 then goto L4332c2;
  #L4332a6.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4332aa.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L4332ae.  v6:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L4332b2.  v1:= v7 @kind object;
  #L4332b4.  v2:= v4 @kind wide;
  #L4332b6.  call temp:= `schedulePeriodically`(v0, v1, v2, v4, v6) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4332bc.  v8:= temp @kind object;
  #L4332be.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v8 @kind object;
  #L4332c2.  return @kind void;
  #L4332c4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4332c6.  @monitorexit v7
  #L4332c8.  throw v8;
  #L4332ca.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4332cc.  call `throwIfFatal`(v8) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4332d2.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L4332d8.  v0:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4332dc.  call `onError`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4332e2.  return @kind void;
  #L4332e4.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4332e6.  @monitorexit v7
  #L4332e8.  throw v8;
  catch `java.lang.Throwable` @[L43321a..L433256] goto L4332e4;
  catch `java.lang.Throwable` @[L433270..L43328c] goto L4332ca;
  catch `java.lang.Throwable` @[L43328e..L43329e] goto L4332c4;
  catch `java.lang.Throwable` @[L4332c6..L4332c8] goto L4332c4;
  catch `java.lang.Throwable` @[L4332e6..L4332e8] goto L4332e4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v8 @kind this, `org.reactivestreams.Subscription` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L43332c.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` @kind object;
  #L433330.  call temp:= `validate`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L433336.  v0:= temp;
  #L433338.  if v0 != 0 then goto L43333e;
  #L43333c.  return @kind void;
  #L43333e.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.k` @type ^`org.reactivestreams.Subscription` := v9 @kind object;
  #L433342.  v0:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433346.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L43334c.  v0:= temp @kind object;
  #L43334e.  v1:= "The supplied buffer is null" @kind object;
  #L433352.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433358.  v0:= temp @kind object;
  #L43335a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L43335e.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L433362.  v0:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433366.  call `onSubscribe`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43336c.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433370.  v5:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.d` @type ^`long` @kind wide;
  #L433374.  v7:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.e` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433378.  v2:= v8 @kind object;
  #L43337a.  v3:= v5 @kind wide;
  #L43337c.  call temp:= `schedulePeriodically`(v1, v2, v3, v5, v7) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L433382.  v0:= temp @kind object;
  #L433384.  v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.j` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L433388.  v0:= 9223372036854775807L;
  #L433392.  call `request`(v9, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L433398.  return @kind void;
  #L43339a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43339c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4333a2.  v1:= v8.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.h` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4333a6.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4333ac.  call `cancel`(v9) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4333b2.  v9:= v8.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4333b6.  call `error`(v0, v9) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L4333bc.  return @kind void;
  catch `java.lang.Throwable` @[L433342..L43335e] goto L43339a;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L4333dc.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L4333e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a` v7 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4333f4.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L4333f8.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L4333fe.  v0:= temp @kind object;
  #L433400.  v1:= "The supplied buffer is null" @kind object;
  #L433404.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43340a.  v0:= temp @kind object;
  #L43340c.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433410.  @monitorenter v7
  #L433412.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` @kind object;
  #L433416.  if v1 == 0 then goto L43343c;
  #L43341a.  v2:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.l` @type ^`long` @kind wide;
  #L43341e.  v4:= v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.m` @type ^`long` @kind wide;
  #L433422.  v6:= lcmp(v2, v4);
  #L433426.  if v6 == 0 then goto L43342c;
  #L43342a.  goto L43343c;
  #L43342c.  v7.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$a.i` @type ^`java.util.Collection` := v0 @kind object;
  #L433430.  @monitorexit v7
  #L433432.  v0:= 0I;
  #L433434.  call `fastPathOrderedEmitMax`(v7, v1, v0, v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L43343a.  return @kind void;
  #L43343c.  @monitorexit v7
  #L43343e.  return @kind void;
  #L433440.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433442.  @monitorexit v7
  #L433444.  throw v0;
  #L433446.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433448.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43344e.  call `cancel`(v7) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$a;.cancel:()V` @kind virtual;
  #L433454.  v1:= v7.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433458.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43345e.  return @kind void;
  catch `java.lang.Throwable` @[L4333f4..L433410] goto L433446;
  catch `java.lang.Throwable` @[L433412..L433432] goto L433440;
  catch `java.lang.Throwable` @[L43343c..L433444] goto L433440;
}
