record `io.reactivex.internal.operators.flowable.FlowableCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableCache$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache` `io.reactivex.internal.operators.flowable.FlowableCache$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableCache$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableCache$b` `io.reactivex.internal.operators.flowable.FlowableCache$a.d` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableCache$a.e` @AccessFlag ;
  `long` `io.reactivex.internal.operators.flowable.FlowableCache$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.flowable.FlowableCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/flowable/FlowableCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L433dd0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L433dd6.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L433dda.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache` := v2 @kind object;
  #L433dde.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableCache.f` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` @kind object;
  #L433de2.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableCache$b` := v1 @kind object;
  #L433de6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L433dea.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L433df0.  v0.`io.reactivex.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L433df4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433e08.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433e0c.  v1:= -9223372036854775808L;
  #L433e10.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L433e16.  v3:= temp @kind wide;
  #L433e18.  v0:= lcmp(v3, v1);
  #L433e1c.  if v0 == 0 then goto L433e2a;
  #L433e20.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache` @kind object;
  #L433e24.  call `f`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.f:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L433e2a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableCache$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L433e3c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L433e42.  v0:= temp;
  #L433e44.  if v0 == 0 then goto L433e5c;
  #L433e48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L433e4c.  call temp:= `addCancel`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L433e52.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableCache$a.b` @type ^`io.reactivex.internal.operators.flowable.FlowableCache` @kind object;
  #L433e56.  call `g`(v2, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableCache;.g:(Lio/reactivex/internal/operators/flowable/FlowableCache$a;)V` @kind virtual;
  #L433e5c.  return @kind void;
}
