record `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.BasicFuseableSubscriber` @kind class {
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @AccessFlag FINAL;
  `io.reactivex.functions.Action` `io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.Consumer` v3 @kind object, `io.reactivex.functions.Action` v4 @kind object, `io.reactivex.functions.Action` v5 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/Action;Lio/reactivex/functions/Action;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L439780.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L439786.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L43978a.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` := v3 @kind object;
  #L43978e.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` := v4 @kind object;
  #L439792.  v0.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` := v5 @kind object;
  #L439796.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4397a8.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4397ac.  if v0 == 0 then goto L4397b2;
  #L4397b0.  return @kind void;
  #L4397b2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4397b6.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4397bc.  v0:= 1I;
  #L4397be.  v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4397c2.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4397c6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4397cc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4397d0.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4397d6.  goto L4397e6;
  #L4397d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4397da.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4397e0.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4397e6.  return @kind void;
  #L4397e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4397ea.  call `fail`(v1, v0) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4397f0.  return @kind void;
  catch `java.lang.Throwable` @[L4397b2..L4397bc] goto L4397e8;
  catch `java.lang.Throwable` @[L4397cc..L4397d6] goto L4397d8;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L43981c.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L439820.  if v0 == 0 then goto L43982c;
  #L439824.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43982a.  return @kind void;
  #L43982c.  v0:= 1I;
  #L43982e.  v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L439832.  v1:= 0I;
  #L439834.  v2:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L439838.  call `accept`(v2, v7) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L43983e.  goto L43986c;
  #L439840.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439842.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439848.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43984c.  v4:= new `io.reactivex.exceptions.CompositeException`;
  #L439850.  v5:= 2I;
  #L439852.  v5:= new `java.lang.Throwable`[v5];
  #L439856.  v5[v1]:= v7 @kind object;
  #L43985a.  v5[v0]:= v2 @kind object;
  #L43985e.  call `<init>`(v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L439864.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43986a.  v0:= 0I;
  #L43986c.  if v0 == 0 then goto L43987a;
  #L439870.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L439874.  call `onError`(v0, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43987a.  v7:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L43987e.  call `run`(v7) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L439884.  goto L439894;
  #L439886.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439888.  call `throwIfFatal`(v7) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43988e.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L439894.  return @kind void;
  catch `java.lang.Throwable` @[L439834..L43983e] goto L439840;
  catch `java.lang.Throwable` @[L43987a..L439884] goto L439886;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4398c0.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.done` @type ^`boolean` @kind boolean;
  #L4398c4.  if v0 == 0 then goto L4398ca;
  #L4398c8.  return @kind void;
  #L4398ca.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4398ce.  if v0 == 0 then goto L4398e0;
  #L4398d2.  v2:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4398d6.  v0:= 0I;
  #L4398d8.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4398de.  return @kind void;
  #L4398e0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4398e4.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4398ea.  v0:= v1.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4398ee.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4398f4.  return @kind void;
  #L4398f6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4398f8.  call `fail`(v1, v2) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.fail:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4398fe.  return @kind void;
  catch `java.lang.Throwable` @[L4398e0..L4398ea] goto L4398f6;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v6 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L439670.  v0:= 0I;
  #L439672.  v1:= 2I;
  #L439674.  v2:= 1I;
  #L439676.  v3:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.qs` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L43967a.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L439680.  v3:= temp @kind object;
  #L439682.  if v3 == 0 then goto L4396e0;
  #L439686.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.a` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43968a.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439690.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L439694.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L43969a.  goto L4396fc;
  #L43969c.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43969e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4396a4.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4396a8.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4396ae.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L4396b4.  v0:= temp @kind object;
  #L4396b6.  throw v0;
  #L4396b8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4396ba.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L4396be.  v1:= new `java.lang.Throwable`[v1];
  #L4396c2.  v1[v0]:= v3 @kind object;
  #L4396c6.  v1[v2]:= v4 @kind object;
  #L4396ca.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L4396d0.  throw v5;
  #L4396d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4396d4.  v1:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4396d8.  call `run`(v1) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4396de.  throw v0;
  #L4396e0.  v0:= v6.`io.reactivex.internal.subscribers.BasicFuseableSubscriber.sourceMode` @type ^`int`;
  #L4396e4.  if v0 != v2 then goto L4396fc;
  #L4396e8.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.c` @type ^`io.reactivex.functions.Action` @kind object;
  #L4396ec.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4396f2.  v0:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.d` @type ^`io.reactivex.functions.Action` @kind object;
  #L4396f6.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L4396fc.  return v3 @kind object;
  #L4396fe.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L439700.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L439706.  v4:= v6.`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L43970a.  call `accept`(v4, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L439710.  call temp:= `throwIfThrowable`(v3) @signature `Lio/reactivex/internal/util/ExceptionHelper;.throwIfThrowable:(Ljava/lang/Throwable;)Ljava/lang/Exception;` @kind static;
  #L439716.  v0:= temp @kind object;
  #L439718.  throw v0;
  #L43971a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43971c.  v5:= new `io.reactivex.exceptions.CompositeException`;
  #L439720.  v1:= new `java.lang.Throwable`[v1];
  #L439724.  v1[v0]:= v3 @kind object;
  #L439728.  v1[v2]:= v4 @kind object;
  #L43972c.  call `<init>`(v5, v1) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L439732.  throw v5;
  catch `java.lang.Throwable` @[L439676..L439682] goto L4396fe;
  catch `java.lang.Throwable` @[L439686..L439690] goto L43969c;
  catch `java.lang.Throwable` @[L43969e..L4396a4] goto L4396d2;
  catch `java.lang.Throwable` @[L4396a4..L4396ae] goto L4396b8;
  catch `java.lang.Throwable` @[L4396ae..L4396d2] goto L4396d2;
  catch `java.lang.Throwable` @[L439706..L439710] goto L43971a;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableDoOnEach$b` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableDoOnEach$b;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L439654.  call temp:= `transitiveBoundaryFusion`(v0, v1) @signature `Lio/reactivex/internal/subscribers/BasicFuseableSubscriber;.transitiveBoundaryFusion:(I)I` @kind virtual;
  #L43965a.  v1:= temp;
  #L43965c.  return v1;
}
