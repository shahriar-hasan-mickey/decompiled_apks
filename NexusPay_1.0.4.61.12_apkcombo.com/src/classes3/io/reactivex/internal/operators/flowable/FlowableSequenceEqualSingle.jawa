record `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle` v0 @kind this, `org.reactivestreams.Publisher` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object, `io.reactivex.functions.BiPredicate` v3 @kind object, `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44acf8.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44acfe.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` := v1 @kind object;
  #L44ad02.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L44ad06.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L44ad0a.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int` := v4;
  #L44ad0e.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L44acc4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual`;
  #L44acc8.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44accc.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44acd0.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L44acd4.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int`;
  #L44acd8.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual;.<init>:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/BiPredicate;I)V` @kind direct;
  #L44acde.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44ace4.  v0:= temp @kind object;
  #L44ace6.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L44ad20.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a`;
  #L44ad24.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.d` @type ^`int`;
  #L44ad28.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L44ad2c.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/BiPredicate;)V` @kind direct;
  #L44ad32.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L44ad38.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.a` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44ad3c.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L44ad40.  call `c`(v0, v4, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @kind virtual;
  #L44ad46.  return @kind void;
}
