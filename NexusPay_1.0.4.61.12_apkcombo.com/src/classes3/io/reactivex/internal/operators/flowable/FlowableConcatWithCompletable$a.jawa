record `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.CompletableObserver` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @AccessFlag ;
  `io.reactivex.CompletableSource` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.CompletableSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/CompletableSource;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L436338.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43633e.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L436342.  v0.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.c` @type ^`io.reactivex.CompletableSource` := v2 @kind object;
  #L436346.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436358.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43635c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L436362.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L436368.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43637c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.d` @type ^`boolean` @kind boolean;
  #L436380.  if v0 == 0 then goto L436390;
  #L436384.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436388.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43638e.  goto L4363ae;
  #L436390.  v0:= 1I;
  #L436392.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.d` @type ^`boolean` := v0 @kind boolean;
  #L436396.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43639a.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43639e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.c` @type ^`io.reactivex.CompletableSource` @kind object;
  #L4363a2.  v1:= 0I;
  #L4363a4.  v2.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.c` @type ^`io.reactivex.CompletableSource` := v1 @kind object;
  #L4363a8.  call `subscribe`(v0, v2) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L4363ae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4363c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4363c4.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4363ca.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4363dc.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4363e0.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4363e6.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4363f8.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4363fe.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436410.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436414.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43641a.  v0:= temp;
  #L43641c.  if v0 == 0 then goto L43642e;
  #L436420.  v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L436424.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L436428.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43642e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatWithCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L436440.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableConcatWithCompletable$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L436444.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43644a.  return @kind void;
}
