record `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @AccessFlag ;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @AccessFlag ;
  `java.util.Collection` `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `org.reactivestreams.Publisher` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;Lorg/reactivestreams/Publisher;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L432d40.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L432d44.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L432d4a.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L432d50.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L432d54.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` := v4 @kind object;
  #L432d58.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L432d08.  v1:= v0.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432d0c.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L432d12.  v1:= 1I;
  #L432d14.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L432ce8.  v2:= (`java.util.Collection`) v2 @kind object;
  #L432cec.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L432cf2.  v1:= temp;
  #L432cf4.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L432dd0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L432dd4.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432dda.  v0:= temp @kind object;
  #L432ddc.  v1:= "The buffer supplied is null" @kind object;
  #L432de0.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L432de6.  v0:= temp @kind object;
  #L432de8.  v0:= (`java.util.Collection`) v0 @kind object;
  #L432dec.  @monitorenter v2
  #L432dee.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L432df2.  if v1 != 0 then goto L432dfa;
  #L432df6.  @monitorexit v2
  #L432df8.  return @kind void;
  #L432dfa.  v2.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L432dfe.  @monitorexit v2
  #L432e00.  v0:= 0I;
  #L432e02.  call `fastPathEmitMax`(v2, v1, v0, v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L432e08.  return @kind void;
  #L432e0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432e0c.  @monitorexit v2
  #L432e0e.  throw v0;
  #L432e10.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432e12.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432e18.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L432e1e.  v1:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432e22.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432e28.  return @kind void;
  catch `java.lang.Throwable` @[L432dd0..L432dec] goto L432e10;
  catch `java.lang.Throwable` @[L432dee..L432e00] goto L432e0a;
  catch `java.lang.Throwable` @[L432e0c..L432e0e] goto L432e0a;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432d6c.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L432d70.  if v0 != 0 then goto L432da4;
  #L432d74.  v0:= 1I;
  #L432d76.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L432d7a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L432d7e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L432d84.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L432d88.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L432d8e.  call temp:= `enter`(v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L432d94.  v0:= temp;
  #L432d96.  if v0 == 0 then goto L432da4;
  #L432d9a.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L432d9e.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L432da4.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L432db8.  call `cancel`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L432dbe.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432d28.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L432d2c.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432e5c.  @monitorenter v3
  #L432e5e.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L432e62.  if v0 != 0 then goto L432e6a;
  #L432e66.  @monitorexit v3
  #L432e68.  return @kind void;
  #L432e6a.  v1:= 0I;
  #L432e6c.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v1 @kind object;
  #L432e70.  @monitorexit v3
  #L432e72.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L432e76.  call temp:= `offer`(v1, v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L432e7c.  v0:= 1I;
  #L432e7e.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L432e82.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L432e88.  v0:= temp;
  #L432e8a.  if v0 == 0 then goto L432e9e;
  #L432e8e.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L432e92.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432e96.  v2:= 0I;
  #L432e98.  call `drainMaxLoop`(v0, v1, v2, v3, v3) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L432e9e.  return @kind void;
  #L432ea0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432ea2.  @monitorexit v3
  #L432ea4.  throw v0;
  catch `java.lang.Throwable` @[L432e5e..L432e72] goto L432ea0;
  catch `java.lang.Throwable` @[L432ea2..L432ea4] goto L432ea0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ecc.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.cancel:()V` @kind virtual;
  #L432ed2.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432ed6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L432edc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L432ef0.  @monitorenter v1
  #L432ef2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` @kind object;
  #L432ef6.  if v0 != 0 then goto L432efe;
  #L432efa.  @monitorexit v1
  #L432efc.  return @kind void;
  #L432efe.  call temp:= `add`(v0, v2) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L432f04.  @monitorexit v1
  #L432f06.  return @kind void;
  #L432f08.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432f0a.  @monitorexit v1
  #L432f0c.  throw v2;
  catch `java.lang.Throwable` @[L432ef2..L432f0c] goto L432f08;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L432f2c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L432f30.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L432f36.  v0:= temp;
  #L432f38.  if v0 != 0 then goto L432f3e;
  #L432f3c.  return @kind void;
  #L432f3e.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.e` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L432f42.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L432f46.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L432f4c.  v0:= temp @kind object;
  #L432f4e.  v1:= "The buffer supplied is null" @kind object;
  #L432f52.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L432f58.  v0:= temp @kind object;
  #L432f5a.  v0:= (`java.util.Collection`) v0 @kind object;
  #L432f5e.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.g` @type ^`java.util.Collection` := v0 @kind object;
  #L432f62.  v0:= new `io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$a`;
  #L432f66.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;)V` @kind direct;
  #L432f6c.  v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.f` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L432f70.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432f74.  call `onSubscribe`(v1, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L432f7a.  v1:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L432f7e.  if v1 != 0 then goto L432f9c;
  #L432f82.  v1:= 9223372036854775807L;
  #L432f8c.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L432f92.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b.d` @type ^`org.reactivestreams.Publisher` @kind object;
  #L432f96.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L432f9c.  return @kind void;
  #L432f9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L432fa0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L432fa6.  v1:= 1I;
  #L432fa8.  v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v1 @kind boolean;
  #L432fac.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L432fb2.  v4:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L432fb6.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L432fbc.  return @kind void;
  catch `java.lang.Throwable` @[L432f42..L432f5e] goto L432f9e;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferExactBoundary$b` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferExactBoundary$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L432fdc.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L432fe2.  return @kind void;
}
