record `io.reactivex.internal.operators.flowable.FlowableFromIterable$a` @kind class @AccessFlag ABSTRACT extends `io.reactivex.internal.subscriptions.BasicQueueSubscription` @kind class {
  `java.util.Iterator` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFromIterable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43d964.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicQueueSubscription;.<init>:()V` @kind direct;
  #L43d96a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L43d96e.  return @kind void;
}
procedure `void` `a`() @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43d980.  v0:= 1I;
  #L43d982.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.b` @type ^`boolean` := v0 @kind boolean;
  #L43d986.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.clear:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43d998.  v0:= 0I;
  #L43d99a.  v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` := v0 @kind object;
  #L43d99e.  return @kind void;
}
procedure `void` `e`(`long` v0 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.isEmpty:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L43d8c8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43d8cc.  if v0 == 0 then goto L43d8e2;
  #L43d8d0.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43d8d6.  v0:= temp;
  #L43d8d8.  if v0 != 0 then goto L43d8de;
  #L43d8dc.  goto L43d8e2;
  #L43d8de.  v0:= 0I;
  #L43d8e0.  goto L43d8e4;
  #L43d8e2.  v0:= 1I;
  #L43d8e4.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L43d910.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43d914.  v1:= 0I;
  #L43d916.  if v0 != 0 then goto L43d91c;
  #L43d91a.  return v1 @kind object;
  #L43d91c.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` @kind boolean;
  #L43d920.  if v2 != 0 then goto L43d92c;
  #L43d924.  v0:= 1I;
  #L43d926.  v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.c` @type ^`boolean` := v0 @kind boolean;
  #L43d92a.  goto L43d93a;
  #L43d92c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43d932.  v0:= temp;
  #L43d934.  if v0 != 0 then goto L43d93a;
  #L43d938.  return v1 @kind object;
  #L43d93a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFromIterable$a.a` @type ^`java.util.Iterator` @kind object;
  #L43d93e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L43d944.  v0:= temp @kind object;
  #L43d946.  v1:= "Iterator.next() returned a null value" @kind object;
  #L43d94a.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43d950.  v0:= temp @kind object;
  #L43d952.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v5 @kind this, `long` v6 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d9b0.  call temp:= `validate`(v6) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43d9b6.  v0:= temp;
  #L43d9b8.  if v0 == 0 then goto L43d9f0;
  #L43d9bc.  call temp:= `add`(v5, v6) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43d9c2.  v0:= temp @kind wide;
  #L43d9c4.  v2:= 0L;
  #L43d9c8.  v4:= lcmp(v0, v2);
  #L43d9cc.  if v4 != 0 then goto L43d9f0;
  #L43d9d0.  v0:= 9223372036854775807L;
  #L43d9da.  v2:= lcmp(v6, v0);
  #L43d9de.  if v2 != 0 then goto L43d9ea;
  #L43d9e2.  call `a`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.a:()V` @kind virtual;
  #L43d9e8.  goto L43d9f0;
  #L43d9ea.  call `e`(v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.e:(J)V` @kind virtual;
  #L43d9f0.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFromIterable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$a;.requestFusion:(I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L43d8f8.  v1:= v1 ^& 1;
  #L43d8fc.  return v1;
}
