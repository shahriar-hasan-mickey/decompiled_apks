record `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446b98.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446b9e.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L446ba2.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L446ba6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446bb8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446bbc.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L446bc2.  v0:= 1I;
  #L446bc4.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L446bc8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446b80.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L446b84.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446bdc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L446be0.  if v0 == 0 then goto L446be6;
  #L446be4.  return @kind void;
  #L446be6.  v0:= 1I;
  #L446be8.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L446bec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L446bf0.  if v0 == 0 then goto L446c00;
  #L446bf4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L446bf8.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L446bfe.  goto L446c0a;
  #L446c00.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L446c04.  call `onComplete`(v0) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L446c0a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446c1c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L446c20.  if v0 == 0 then goto L446c2c;
  #L446c24.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446c2a.  return @kind void;
  #L446c2c.  v0:= 1I;
  #L446c2e.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` := v0 @kind boolean;
  #L446c32.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L446c36.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446c3c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446c50.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.e` @type ^`boolean` @kind boolean;
  #L446c54.  if v0 == 0 then goto L446c5a;
  #L446c58.  return @kind void;
  #L446c5a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` @kind object;
  #L446c5e.  if v0 != 0 then goto L446c68;
  #L446c62.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L446c66.  goto L446c9e;
  #L446c68.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L446c6c.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L446c72.  v3:= temp @kind object;
  #L446c74.  v0:= "The reducer returned a null value" @kind object;
  #L446c78.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L446c7e.  v3:= temp @kind object;
  #L446c80.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L446c84.  goto L446c9e;
  #L446c86.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L446c88.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L446c8e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446c92.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L446c98.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L446c9e.  return @kind void;
  catch `java.lang.Throwable` @[L446c68..L446c84] goto L446c86;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceMaybe$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446cbc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446cc0.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L446cc6.  v0:= temp;
  #L446cc8.  if v0 == 0 then goto L446cea;
  #L446ccc.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L446cd0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceMaybe$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L446cd4.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L446cda.  v0:= 9223372036854775807L;
  #L446ce4.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L446cea.  return @kind void;
}
