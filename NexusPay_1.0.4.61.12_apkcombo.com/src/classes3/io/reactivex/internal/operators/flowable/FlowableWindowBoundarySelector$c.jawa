record `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.k` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object, `io.reactivex.functions.Function` v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.<init>:(Lorg/reactivestreams/Subscriber;Lorg/reactivestreams/Publisher;Lio/reactivex/functions/Function;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L4505d4.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L4505d8.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4505de.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4505e4.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L4505e8.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4505ee.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L4505f2.  v2:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4505f6.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4505fc.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` := v2 @kind object;
  #L450600.  v2:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L450604.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L45060a.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v2 @kind object;
  #L45060e.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @type ^`org.reactivestreams.Publisher` := v3 @kind object;
  #L450612.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L450616.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @type ^`int` := v5;
  #L45061a.  v2:= new `io.reactivex.disposables.CompositeDisposable`;
  #L45061e.  call `<init>`(v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L450624.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` := v2 @kind object;
  #L450628.  v2:= new `java.util.ArrayList`;
  #L45062c.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L450632.  v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` := v2 @kind object;
  #L450636.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45063a.  v3:= 1L;
  #L45063e.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.lazySet:(J)V` @kind virtual;
  #L450644.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.a:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L4506ac.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4506b0.  call temp:= `delete`(v0, v4) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L4506b6.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4506ba.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`;
  #L4506be.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a.c` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4506c2.  v2:= 0I;
  #L4506c4.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$d;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L4506ca.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4506d0.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4506d6.  v4:= temp;
  #L4506d8.  if v4 == 0 then goto L4506e2;
  #L4506dc.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L4506e2.  return @kind void;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L4505c0.  v1:= 0I;
  #L4505c2.  return v1;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v12 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L45071c.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L450720.  v1:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450724.  v2:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` @kind object;
  #L450728.  v3:= 1I;
  #L45072a.  v4:= 1I;
  #L45072c.  v5:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L450730.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L450736.  v6:= temp @kind object;
  #L450738.  if v6 != 0 then goto L450740;
  #L45073c.  v7:= 1I;
  #L45073e.  goto L450742;
  #L450740.  v7:= 0I;
  #L450742.  if v5 == 0 then goto L4507b0;
  #L450746.  if v7 == 0 then goto L4507b0;
  #L45074a.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @kind virtual;
  #L450750.  v0:= v12.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` @kind object;
  #L450754.  if v0 == 0 then goto L450780;
  #L450758.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L45075e.  v1:= temp @kind object;
  #L450760.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L450766.  v3:= temp;
  #L450768.  if v3 == 0 then goto L4507a8;
  #L45076c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L450772.  v3:= temp @kind object;
  #L450774.  v3:= (`io.reactivex.processors.UnicastProcessor`) v3 @kind object;
  #L450778.  call `onError`(v3, v0) @signature `Lio/reactivex/processors/UnicastProcessor;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L45077e.  goto L450760;
  #L450780.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L450786.  v0:= temp @kind object;
  #L450788.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L45078e.  v1:= temp;
  #L450790.  if v1 == 0 then goto L4507a8;
  #L450794.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L45079a.  v1:= temp @kind object;
  #L45079c.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L4507a0.  call `onComplete`(v1) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4507a6.  goto L450788;
  #L4507a8.  call `clear`(v2) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L4507ae.  return @kind void;
  #L4507b0.  if v7 == 0 then goto L4507c4;
  #L4507b4.  v4:= -v4 @kind int;
  #L4507b6.  call temp:= `leave`(v12, v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L4507bc.  v4:= temp;
  #L4507be.  if v4 != 0 then goto L45072c;
  #L4507c2.  return @kind void;
  #L4507c4.  v5:= instanceof @variable v6 @type ^`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d` @kind boolean;
  #L4507c8.  if v5 == 0 then goto L4508e2;
  #L4507cc.  v6:= (`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`) v6 @kind object;
  #L4507d0.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4507d4.  v7:= 0L;
  #L4507d8.  if v5 == 0 then goto L45080e;
  #L4507dc.  call temp:= `remove`(v2, v5) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L4507e2.  v5:= temp;
  #L4507e4.  if v5 == 0 then goto L45072c;
  #L4507e8.  v5:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.a` @type ^`io.reactivex.processors.UnicastProcessor` @kind object;
  #L4507ec.  call `onComplete`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.onComplete:()V` @kind virtual;
  #L4507f2.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4507f6.  call temp:= `decrementAndGet`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L4507fc.  v5:= temp @kind wide;
  #L4507fe.  v9:= lcmp(v5, v7);
  #L450802.  if v9 != 0 then goto L45072c;
  #L450806.  call `dispose`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @kind virtual;
  #L45080c.  return @kind void;
  #L45080e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450812.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L450818.  v5:= temp;
  #L45081a.  if v5 == 0 then goto L450820;
  #L45081e.  goto L45072c;
  #L450820.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.e` @type ^`int`;
  #L450824.  call temp:= `create`(v5) @signature `Lio/reactivex/processors/UnicastProcessor;.create:(I)Lio/reactivex/processors/UnicastProcessor;` @kind static;
  #L45082a.  v5:= temp @kind object;
  #L45082c.  call temp:= `requested`(v12) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:()J` @kind virtual;
  #L450832.  v9:= temp @kind wide;
  #L450834.  v11:= lcmp(v9, v7);
  #L450838.  if v11 == 0 then goto L4508c4;
  #L45083c.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L450842.  call `onNext`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L450848.  v7:= 9223372036854775807L;
  #L450852.  v11:= lcmp(v9, v7);
  #L450856.  if v11 == 0 then goto L450864;
  #L45085a.  v7:= 1L;
  #L45085e.  call temp:= `produced`(v12, v7) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.produced:(J)J` @kind virtual;
  #L450864.  v7:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.d` @type ^`io.reactivex.functions.Function` @kind object;
  #L450868.  v6:= v6.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d.b` @type ^`java.lang.Object` @kind object;
  #L45086c.  call temp:= `apply`(v7, v6) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L450872.  v6:= temp @kind object;
  #L450874.  v7:= "The publisher supplied is null" @kind object;
  #L450878.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L45087e.  v6:= temp @kind object;
  #L450880.  v6:= (`org.reactivestreams.Publisher`) v6 @kind object;
  #L450884.  v7:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$a`;
  #L450888.  call `<init>`(v7, v12, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;Lio/reactivex/processors/UnicastProcessor;)V` @kind direct;
  #L45088e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L450892.  call temp:= `add`(v5, v7) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L450898.  v5:= temp;
  #L45089a.  if v5 == 0 then goto L45072c;
  #L45089e.  v5:= v12.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4508a2.  call temp:= `getAndIncrement`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndIncrement:()J` @kind virtual;
  #L4508a8.  call `subscribe`(v6, v7) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L4508ae.  goto L45072c;
  #L4508b2.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4508b4.  call `cancel`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.cancel:()V` @kind virtual;
  #L4508ba.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4508c0.  goto L45072c;
  #L4508c4.  call `cancel`(v12) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.cancel:()V` @kind virtual;
  #L4508ca.  v5:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L4508ce.  v6:= "Could not deliver new window due to lack of requests" @kind object;
  #L4508d2.  call `<init>`(v5, v6) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4508d8.  call `onError`(v1, v5) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4508de.  goto L45072c;
  #L4508e2.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4508e8.  v5:= temp @kind object;
  #L4508ea.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4508f0.  v7:= temp;
  #L4508f2.  if v7 == 0 then goto L45072c;
  #L4508f6.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4508fc.  v7:= temp @kind object;
  #L4508fe.  v7:= (`io.reactivex.processors.UnicastProcessor`) v7 @kind object;
  #L450902.  call temp:= `getValue`(v6) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L450908.  v8:= temp @kind object;
  #L45090a.  call `onNext`(v7, v8) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L450910.  goto L4508ea;
  catch `java.lang.Throwable` @[L450864..L450884] goto L4508b2;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L450930.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450934.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L45093a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L45093e.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L450944.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450948.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L45094e.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450952.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450958.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L450658.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L45065c.  v1:= 0I;
  #L45065e.  v2:= 1I;
  #L450660.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L450666.  v0:= temp;
  #L450668.  if v0 == 0 then goto L450698;
  #L45066c.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450670.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L450676.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L45067a.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L450680.  v0:= temp @kind wide;
  #L450682.  v2:= 0L;
  #L450686.  v4:= lcmp(v0, v2);
  #L45068a.  if v4 != 0 then goto L450698;
  #L45068e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450692.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L450698.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.d:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L450b3c.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L450b40.  v1:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$d`;
  #L450b44.  v2:= 0I;
  #L450b46.  call `<init>`(v1, v2, v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$d;.<init>:(Lio/reactivex/processors/UnicastProcessor;Ljava/lang/Object;)V` @kind direct;
  #L450b4c.  call temp:= `offer`(v0, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L450b52.  call temp:= `enter`(v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L450b58.  v4:= temp;
  #L450b5a.  if v4 == 0 then goto L450b64;
  #L450b5e.  call `b`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L450b64.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.dispose:()V` @AccessFlag  {
    temp;
    v0;

  #L4506f4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4506f8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4506fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450702.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L450708.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L45096c.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L450970.  if v0 == 0 then goto L450976;
  #L450974.  return @kind void;
  #L450976.  v0:= 1I;
  #L450978.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L45097c.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L450982.  v0:= temp;
  #L450984.  if v0 == 0 then goto L45098e;
  #L450988.  call `b`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L45098e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L450992.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L450998.  v0:= temp @kind wide;
  #L45099a.  v2:= 0L;
  #L45099e.  v4:= lcmp(v0, v2);
  #L4509a2.  if v4 != 0 then goto L4509b0;
  #L4509a6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L4509aa.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L4509b0.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4509b4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4509ba.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4509cc.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L4509d0.  if v0 == 0 then goto L4509dc;
  #L4509d4.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4509da.  return @kind void;
  #L4509dc.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.error` @type ^`java.lang.Throwable` := v6 @kind object;
  #L4509e0.  v0:= 1I;
  #L4509e2.  v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4509e6.  call temp:= `enter`(v5) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4509ec.  v0:= temp;
  #L4509ee.  if v0 == 0 then goto L4509f8;
  #L4509f2.  call `b`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L4509f8.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.j` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4509fc.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L450a02.  v0:= temp @kind wide;
  #L450a04.  v2:= 0L;
  #L450a08.  v4:= lcmp(v0, v2);
  #L450a0c.  if v4 != 0 then goto L450a1a;
  #L450a10.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.f` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L450a14.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L450a1a.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450a1e.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L450a24.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L450a38.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` @kind boolean;
  #L450a3c.  if v0 == 0 then goto L450a42;
  #L450a40.  return @kind void;
  #L450a42.  call temp:= `fastEnter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastEnter:()Z` @kind virtual;
  #L450a48.  v0:= temp;
  #L450a4a.  if v0 == 0 then goto L450a8a;
  #L450a4e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.i` @type ^`java.util.List` @kind object;
  #L450a52.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L450a58.  v0:= temp @kind object;
  #L450a5a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L450a60.  v1:= temp;
  #L450a62.  if v1 == 0 then goto L450a7a;
  #L450a66.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L450a6c.  v1:= temp @kind object;
  #L450a6e.  v1:= (`io.reactivex.processors.UnicastProcessor`) v1 @kind object;
  #L450a72.  call `onNext`(v1, v3) @signature `Lio/reactivex/processors/UnicastProcessor;.onNext:(Ljava/lang/Object;)V` @kind virtual;
  #L450a78.  goto L450a5a;
  #L450a7a.  v3:= -1I;
  #L450a7c.  call temp:= `leave`(v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.leave:(I)I` @kind virtual;
  #L450a82.  v3:= temp;
  #L450a84.  if v3 != 0 then goto L450aaa;
  #L450a88.  return @kind void;
  #L450a8a.  v0:= v2.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L450a8e.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L450a94.  v3:= temp @kind object;
  #L450a96.  call temp:= `offer`(v0, v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L450a9c.  call temp:= `enter`(v2) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L450aa2.  v3:= temp;
  #L450aa4.  if v3 != 0 then goto L450aaa;
  #L450aa8.  return @kind void;
  #L450aaa.  call `b`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.b:()V` @kind virtual;
  #L450ab0.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L450ac4.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L450ac8.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L450ace.  v0:= temp;
  #L450ad0.  if v0 == 0 then goto L450b2a;
  #L450ad4.  v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.g` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L450ad8.  v0:= v3.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L450adc.  call `onSubscribe`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L450ae2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.k` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L450ae6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L450aec.  v0:= temp;
  #L450aee.  if v0 == 0 then goto L450af4;
  #L450af2.  return @kind void;
  #L450af4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$b`;
  #L450af8.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;)V` @kind direct;
  #L450afe.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.h` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L450b02.  v2:= 0I;
  #L450b04.  call temp:= `compareAndSet`(v1, v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L450b0a.  v1:= temp;
  #L450b0c.  if v1 == 0 then goto L450b2a;
  #L450b10.  v1:= 9223372036854775807L;
  #L450b1a.  call `request`(v4, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L450b20.  v4:= v3.`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c.c` @type ^`org.reactivestreams.Publisher` @kind object;
  #L450b24.  call `subscribe`(v4, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L450b2a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableWindowBoundarySelector$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableWindowBoundarySelector$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L450b78.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L450b7e.  return @kind void;
}
