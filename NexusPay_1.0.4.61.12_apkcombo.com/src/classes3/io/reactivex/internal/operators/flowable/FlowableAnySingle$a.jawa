record `io.reactivex.internal.operators.flowable.FlowableAnySingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L431420.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L431426.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L43142a.  v0.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L43142e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431440.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431444.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43144a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L43144e.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L431452.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4313fc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431400.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L431404.  if v0 != v1 then goto L43140c;
  #L431408.  v0:= 1I;
  #L43140a.  goto L43140e;
  #L43140c.  v0:= 0I;
  #L43140e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431464.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L431468.  if v0 != 0 then goto L431488;
  #L43146c.  v0:= 1I;
  #L43146e.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L431472.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L431476.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L43147a.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43147e.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L431482.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L431488.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43149c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L4314a0.  if v0 == 0 then goto L4314ac;
  #L4314a4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4314aa.  return @kind void;
  #L4314ac.  v0:= 1I;
  #L4314ae.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L4314b2.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L4314b6.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L4314ba.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4314be.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4314c4.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4314d8.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` @kind boolean;
  #L4314dc.  if v0 == 0 then goto L4314e2;
  #L4314e0.  return @kind void;
  #L4314e2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L4314e6.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L4314ec.  v2:= temp;
  #L4314ee.  if v2 == 0 then goto L431518;
  #L4314f2.  v2:= 1I;
  #L4314f4.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.d` @type ^`boolean` := v2 @kind boolean;
  #L4314f8.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4314fc.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L431502.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L431506.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L43150a.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L43150e.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L431512.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L431518.  return @kind void;
  #L43151a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43151c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L431522.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L431526.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43152c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L431530.  v1.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L431534.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43153a.  return @kind void;
  catch `java.lang.Throwable` @[L4314e2..L4314ee] goto L43151a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAnySingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAnySingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431558.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43155c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L431562.  v0:= temp;
  #L431564.  if v0 == 0 then goto L431586;
  #L431568.  v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43156c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAnySingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L431570.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L431576.  v0:= 9223372036854775807L;
  #L431580.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L431586.  return @kind void;
}
