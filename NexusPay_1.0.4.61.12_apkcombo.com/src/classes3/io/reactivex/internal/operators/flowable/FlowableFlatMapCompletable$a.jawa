record `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @AccessFlag FINAL;
  `io.reactivex.disposables.CompositeDisposable` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `boolean` v3 , `int` v4 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ZI)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L43b374.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43b37a.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L43b37e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L43b382.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` := v3 @kind boolean;
  #L43b386.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L43b38a.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L43b390.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L43b394.  v1:= new `io.reactivex.disposables.CompositeDisposable`;
  #L43b398.  call `<init>`(v1) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L43b39e.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` := v1 @kind object;
  #L43b3a2.  v0.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int` := v4;
  #L43b3a6.  v1:= 1I;
  #L43b3a8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L43b3ae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b3c0.  v0:= 1I;
  #L43b3c2.  v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` := v0 @kind boolean;
  #L43b3c6.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b3ca.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b3d0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b3d4.  call `dispose`(v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.dispose:()V` @kind virtual;
  #L43b3da.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;

  #L43b3ec.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.e:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;)V` @AccessFlag  {
    temp;
    v0;

  #L43b400.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b404.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b40a.  call `onComplete`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @kind virtual;
  #L43b410.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.f:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L43b424.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b428.  call temp:= `delete`(v0, v2) @signature `Lio/reactivex/disposables/CompositeDisposable;.delete:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b42e.  call `onError`(v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b434.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b334.  v0:= 1I;
  #L43b336.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43b448.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43b44e.  v0:= temp;
  #L43b450.  if v0 != 0 then goto L43b47c;
  #L43b454.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b458.  call temp:= `terminate`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b45e.  v0:= temp @kind object;
  #L43b460.  if v0 == 0 then goto L43b470;
  #L43b464.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43b468.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b46e.  goto L43b498;
  #L43b470.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43b474.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43b47a.  goto L43b498;
  #L43b47c.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L43b480.  v1:= 2147483647I;
  #L43b486.  if v0 == v1 then goto L43b498;
  #L43b48a.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b48e.  v1:= 1L;
  #L43b492.  call `request`(v0, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b498.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b4ac.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b4b0.  call temp:= `addThrowable`(v0, v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L43b4b6.  v0:= temp;
  #L43b4b8.  if v0 == 0 then goto L43b532;
  #L43b4bc.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.d` @type ^`boolean` @kind boolean;
  #L43b4c0.  if v3 == 0 then goto L43b506;
  #L43b4c4.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L43b4ca.  v3:= temp;
  #L43b4cc.  if v3 != 0 then goto L43b4e8;
  #L43b4d0.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b4d4.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b4da.  v3:= temp @kind object;
  #L43b4dc.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43b4e0.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b4e6.  goto L43b538;
  #L43b4e8.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L43b4ec.  v0:= 2147483647I;
  #L43b4f2.  if v3 == v0 then goto L43b538;
  #L43b4f6.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b4fa.  v0:= 1L;
  #L43b4fe.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b504.  goto L43b538;
  #L43b506.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.cancel:()V` @kind virtual;
  #L43b50c.  v3:= 0I;
  #L43b50e.  call temp:= `getAndSet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L43b514.  v3:= temp;
  #L43b516.  if v3 <= 0 then goto L43b538;
  #L43b51a.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.b` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L43b51e.  call temp:= `terminate`(v3) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L43b524.  v3:= temp @kind object;
  #L43b526.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43b52a.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43b530.  goto L43b538;
  #L43b532.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L43b538.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b54c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.c` @type ^`io.reactivex.functions.Function` @kind object;
  #L43b550.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L43b556.  v3:= temp @kind object;
  #L43b558.  v0:= "The mapper returned a null CompletableSource" @kind object;
  #L43b55c.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L43b562.  v3:= temp @kind object;
  #L43b564.  v3:= (`io.reactivex.CompletableSource`) v3 @kind object;
  #L43b568.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43b56e.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a$a`;
  #L43b572.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;)V` @kind direct;
  #L43b578.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.h` @type ^`boolean` @kind boolean;
  #L43b57c.  if v1 != 0 then goto L43b596;
  #L43b580.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.e` @type ^`io.reactivex.disposables.CompositeDisposable` @kind object;
  #L43b584.  call temp:= `add`(v1, v0) @signature `Lio/reactivex/disposables/CompositeDisposable;.add:(Lio/reactivex/disposables/Disposable;)Z` @kind virtual;
  #L43b58a.  v1:= temp;
  #L43b58c.  if v1 == 0 then goto L43b596;
  #L43b590.  call `subscribe`(v3, v0) @signature `Lio/reactivex/CompletableSource;.subscribe:(Lio/reactivex/CompletableObserver;)V` @kind interface;
  #L43b596.  return @kind void;
  #L43b598.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43b59a.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43b5a0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b5a4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43b5aa.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L43b5b0.  return @kind void;
  catch `java.lang.Throwable` @[L43b54c..L43b568] goto L43b598;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43b5d0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43b5d4.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43b5da.  v0:= temp;
  #L43b5dc.  if v0 == 0 then goto L43b616;
  #L43b5e0.  v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.g` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L43b5e4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43b5e8.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43b5ee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a.f` @type ^`int`;
  #L43b5f2.  v1:= 2147483647I;
  #L43b5f8.  if v0 != v1 then goto L43b60e;
  #L43b5fc.  v0:= 9223372036854775807L;
  #L43b606.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b60c.  goto L43b616;
  #L43b60e.  v0:= (`long`) v0 @kind i2l;
  #L43b610.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43b616.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43b360.  v0:= 0I;
  #L43b362.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L43b628.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableFlatMapCompletable$a` v0 @kind this, `int` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableFlatMapCompletable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;

  #L43b348.  v1:= v1 ^& 2;
  #L43b34c.  return v1;
}
