record `io.reactivex.internal.operators.flowable.FlowableSingleSingle` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.internal.fuseable.FuseToFlowable` @kind interface {
  `io.reactivex.Flowable` `io.reactivex.internal.operators.flowable.FlowableSingleSingle.a` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSingleSingle.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle` v0 @kind this, `io.reactivex.Flowable` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L44b338.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L44b33e.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.a` @type ^`io.reactivex.Flowable` := v1 @kind object;
  #L44b342.  v0.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.b` @type ^`java.lang.Object` := v2 @kind object;
  #L44b346.  return @kind void;
}
procedure `io.reactivex.Flowable` `fuseToFlowable`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.fuseToFlowable:()Lio/reactivex/Flowable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L44b308.  v0:= new `io.reactivex.internal.operators.flowable.FlowableSingle`;
  #L44b30c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L44b310.  v2:= v4.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.b` @type ^`java.lang.Object` @kind object;
  #L44b314.  v3:= 1I;
  #L44b316.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingle;.<init>:(Lio/reactivex/Flowable;Ljava/lang/Object;Z)V` @kind direct;
  #L44b31c.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Flowable;)Lio/reactivex/Flowable;` @kind static;
  #L44b322.  v0:= temp @kind object;
  #L44b324.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableSingleSingle` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L44b358.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.a` @type ^`io.reactivex.Flowable` @kind object;
  #L44b35c.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSingleSingle$a`;
  #L44b360.  v2:= v3.`io.reactivex.internal.operators.flowable.FlowableSingleSingle.b` @type ^`java.lang.Object` @kind object;
  #L44b364.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSingleSingle$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;)V` @kind direct;
  #L44b36a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Flowable;.subscribe:(Lio/reactivex/FlowableSubscriber;)V` @kind virtual;
  #L44b370.  return @kind void;
}
