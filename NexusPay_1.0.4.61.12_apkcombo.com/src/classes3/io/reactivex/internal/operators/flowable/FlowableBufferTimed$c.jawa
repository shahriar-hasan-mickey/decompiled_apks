record `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscribers.QueueDrainSubscriber` @kind class, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @AccessFlag FINAL;
  `java.util.List` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.concurrent.Callable` v3 @kind object, `long` v4 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object, `io.reactivex.Scheduler$Worker` v9 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/concurrent/Callable;JJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L433898.  v0:= new `io.reactivex.internal.queue.MpscLinkedQueue`;
  #L43389c.  call `<init>`(v0) @signature `Lio/reactivex/internal/queue/MpscLinkedQueue;.<init>:()V` @kind direct;
  #L4338a2.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/fuseable/SimplePlainQueue;)V` @kind direct;
  #L4338a8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` := v3 @kind object;
  #L4338ac.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` := v4 @kind wide;
  #L4338b0.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` := v6 @kind wide;
  #L4338b4.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` := v8 @kind object;
  #L4338b8.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` := v9 @kind object;
  #L4338bc.  v2:= new `java.util.LinkedList`;
  #L4338c0.  call `<init>`(v2) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L4338c6.  v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` := v2 @kind object;
  #L4338ca.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind object, `java.lang.Object` v1 @kind object, `boolean` v2 , `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.b:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4338dc.  call `fastPathOrderedEmitMax`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.fastPathOrderedEmitMax:(Ljava/lang/Object;ZLio/reactivex/disposables/Disposable;)V` @kind virtual;
  #L4338e2.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.util.Collection` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L43387c.  call `onNext`(v1, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L433882.  v1:= 1I;
  #L433884.  return v1;
}
procedure `boolean` `accept`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.accept:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L43385c.  v2:= (`java.util.Collection`) v2 @kind object;
  #L433860.  call temp:= `a`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.a:(Lorg/reactivestreams/Subscriber;Ljava/util/Collection;)Z` @kind virtual;
  #L433866.  v1:= temp;
  #L433868.  return v1;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L433928.  @monitorenter v1
  #L43392a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L43392e.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L433934.  @monitorexit v1
  #L433936.  return @kind void;
  #L433938.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43393a.  @monitorexit v1
  #L43393c.  throw v0;
  catch `java.lang.Throwable` @[L43392a..L43393c] goto L433938;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4338f4.  v0:= 1I;
  #L4338f6.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` := v0 @kind boolean;
  #L4338fa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L4338fe.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L433904.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433908.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L43390e.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L433914.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43395c.  @monitorenter v4
  #L43395e.  v0:= new `java.util.ArrayList`;
  #L433962.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L433966.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L43396c.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L433970.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L433976.  @monitorexit v4
  #L433978.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43397e.  v0:= temp @kind object;
  #L433980.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L433986.  v1:= temp;
  #L433988.  if v1 == 0 then goto L4339a4;
  #L43398c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433992.  v1:= temp @kind object;
  #L433994.  v1:= (`java.util.Collection`) v1 @kind object;
  #L433998.  v2:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L43399c.  call temp:= `offer`(v2, v1) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L4339a2.  goto L433980;
  #L4339a4.  v0:= 1I;
  #L4339a6.  v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4339aa.  call temp:= `enter`(v4) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.enter:()Z` @kind virtual;
  #L4339b0.  v0:= temp;
  #L4339b2.  if v0 == 0 then goto L4339ca;
  #L4339b6.  v0:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.queue` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L4339ba.  v1:= v4.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4339be.  v2:= 0I;
  #L4339c0.  v3:= v4.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L4339c4.  call `drainMaxLoop`(v0, v1, v2, v3, v4) @signature `Lio/reactivex/internal/util/QueueDrainHelper;.drainMaxLoop:(Lio/reactivex/internal/fuseable/SimplePlainQueue;Lorg/reactivestreams/Subscriber;ZLio/reactivex/disposables/Disposable;Lio/reactivex/internal/util/QueueDrain;)V` @kind static;
  #L4339ca.  return @kind void;
  #L4339cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4339ce.  @monitorexit v4
  #L4339d0.  throw v0;
  catch `java.lang.Throwable` @[L43395e..L433978] goto L4339cc;
  catch `java.lang.Throwable` @[L4339ce..L4339d0] goto L4339cc;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4339f8.  v0:= 1I;
  #L4339fa.  v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.done` @type ^`boolean` := v0 @kind boolean;
  #L4339fe.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433a02.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433a08.  call `c`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.c:()V` @kind virtual;
  #L433a0e.  v0:= v1.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433a12.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433a18.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L433a2c.  @monitorenter v2
  #L433a2e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L433a32.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L433a38.  v0:= temp @kind object;
  #L433a3a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L433a40.  v1:= temp;
  #L433a42.  if v1 == 0 then goto L433a5a;
  #L433a46.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L433a4c.  v1:= temp @kind object;
  #L433a4e.  v1:= (`java.util.Collection`) v1 @kind object;
  #L433a52.  call temp:= `add`(v1, v3) @signature `Ljava/util/Collection;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433a58.  goto L433a3a;
  #L433a5a.  @monitorexit v2
  #L433a5c.  return @kind void;
  #L433a5e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433a60.  @monitorexit v2
  #L433a62.  throw v3;
  catch `java.lang.Throwable` @[L433a2e..L433a62] goto L433a5e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v10 @kind this, `org.reactivestreams.Subscription` v11 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L433a80.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L433a84.  call temp:= `validate`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L433a8a.  v0:= temp;
  #L433a8c.  if v0 != 0 then goto L433a92;
  #L433a90.  return @kind void;
  #L433a92.  v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.i` @type ^`org.reactivestreams.Subscription` := v11 @kind object;
  #L433a96.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433a9a.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433aa0.  v0:= temp @kind object;
  #L433aa2.  v1:= "The supplied buffer is null" @kind object;
  #L433aa6.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433aac.  v0:= temp @kind object;
  #L433aae.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433ab2.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L433ab6.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433abc.  v1:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433ac0.  call `onSubscribe`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L433ac6.  v1:= 9223372036854775807L;
  #L433ad0.  call `request`(v11, v1) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L433ad6.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433ada.  v7:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.e` @type ^`long` @kind wide;
  #L433ade.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433ae2.  v4:= v10 @kind object;
  #L433ae4.  v5:= v7 @kind wide;
  #L433ae6.  call temp:= `schedulePeriodically`(v3, v4, v5, v7, v9) @signature `Lio/reactivex/Scheduler$Worker;.schedulePeriodically:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L433aec.  v11:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433af0.  v1:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L433af4.  call `<init>`(v1, v10, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L433afa.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L433afe.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433b02.  call temp:= `schedule`(v11, v1, v2, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L433b08.  return @kind void;
  #L433b0a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433b0c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433b12.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433b16.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L433b1c.  call `cancel`(v11) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L433b22.  v11:= v10.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433b26.  call `error`(v0, v11) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L433b2c.  return @kind void;
  catch `java.lang.Throwable` @[L433a96..L433ab2] goto L433b0a;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;

  #L433b4c.  call `requested`(v0, v1) @signature `Lio/reactivex/internal/subscribers/QueueDrainSubscriber;.requested:(J)V` @kind virtual;
  #L433b52.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L433b64.  v0:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L433b68.  if v0 == 0 then goto L433b6e;
  #L433b6c.  return @kind void;
  #L433b6e.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.c` @type ^`java.util.concurrent.Callable` @kind object;
  #L433b72.  call temp:= `call`(v0) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L433b78.  v0:= temp @kind object;
  #L433b7a.  v1:= "The supplied buffer is null" @kind object;
  #L433b7e.  call temp:= `requireNonNull`(v0, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L433b84.  v0:= temp @kind object;
  #L433b86.  v0:= (`java.util.Collection`) v0 @kind object;
  #L433b8a.  @monitorenter v5
  #L433b8c.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.cancelled` @type ^`boolean` @kind boolean;
  #L433b90.  if v1 == 0 then goto L433b98;
  #L433b94.  @monitorexit v5
  #L433b96.  return @kind void;
  #L433b98.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.h` @type ^`java.util.List` @kind object;
  #L433b9c.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L433ba2.  @monitorexit v5
  #L433ba4.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.g` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L433ba8.  v2:= new `io.reactivex.internal.operators.flowable.FlowableBufferTimed$c$a`;
  #L433bac.  call `<init>`(v2, v5, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c$a;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;Ljava/util/Collection;)V` @kind direct;
  #L433bb2.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.d` @type ^`long` @kind wide;
  #L433bb6.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableBufferTimed$c.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L433bba.  call temp:= `schedule`(v1, v2, v3, v0) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;JLjava/util/concurrent/TimeUnit;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L433bc0.  return @kind void;
  #L433bc2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433bc4.  @monitorexit v5
  #L433bc6.  throw v0;
  #L433bc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L433bca.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L433bd0.  call `cancel`(v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableBufferTimed$c;.cancel:()V` @kind virtual;
  #L433bd6.  v1:= v5.`io.reactivex.internal.subscribers.QueueDrainSubscriber.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L433bda.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L433be0.  return @kind void;
  catch `java.lang.Throwable` @[L433b6e..L433b8a] goto L433bc8;
  catch `java.lang.Throwable` @[L433b8c..L433ba4] goto L433bc2;
  catch `java.lang.Throwable` @[L433bc4..L433bc6] goto L433bc2;
}
