record `io.reactivex.internal.operators.flowable.FlowableFromFuture` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `java.util.concurrent.Future` `io.reactivex.internal.operators.flowable.FlowableFromFuture.b` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.flowable.FlowableFromFuture.c` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.flowable.FlowableFromFuture.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromFuture` v0 @kind this, `java.util.concurrent.Future` v1 @kind object, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.<init>:(Ljava/util/concurrent/Future;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43d810.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L43d816.  v0.`io.reactivex.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` := v1 @kind object;
  #L43d81a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromFuture.c` @type ^`long` := v2 @kind wide;
  #L43d81e.  v0.`io.reactivex.internal.operators.flowable.FlowableFromFuture.d` @type ^`java.util.concurrent.TimeUnit` := v4 @kind object;
  #L43d822.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromFuture` v5 @kind this, `org.reactivestreams.Subscriber` v6 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromFuture;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43d834.  v0:= new `io.reactivex.internal.subscriptions.DeferredScalarSubscription`;
  #L43d838.  call `<init>`(v0, v6) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L43d83e.  call `onSubscribe`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43d844.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFromFuture.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43d848.  if v1 == 0 then goto L43d862;
  #L43d84c.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` @kind object;
  #L43d850.  v2:= v5.`io.reactivex.internal.operators.flowable.FlowableFromFuture.c` @type ^`long` @kind wide;
  #L43d854.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableFromFuture.d` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L43d858.  call temp:= `get`(v1, v2, v4) @signature `Ljava/util/concurrent/Future;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @kind interface;
  #L43d85e.  v1:= temp @kind object;
  #L43d860.  goto L43d86e;
  #L43d862.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableFromFuture.b` @type ^`java.util.concurrent.Future` @kind object;
  #L43d866.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/Future;.get:()Ljava/lang/Object;` @kind interface;
  #L43d86c.  v1:= temp @kind object;
  #L43d86e.  if v1 != 0 then goto L43d888;
  #L43d872.  v0:= new `java.lang.NullPointerException`;
  #L43d876.  v1:= "The future returned null" @kind object;
  #L43d87a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43d880.  call `onError`(v6, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d886.  goto L43d88e;
  #L43d888.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L43d88e.  return @kind void;
  #L43d890.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43d892.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43d898.  call temp:= `isCancelled`(v0) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.isCancelled:()Z` @kind virtual;
  #L43d89e.  v0:= temp;
  #L43d8a0.  if v0 != 0 then goto L43d8aa;
  #L43d8a4.  call `onError`(v6, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43d8aa.  return @kind void;
  catch `java.lang.Throwable` @[L43d844..L43d86e] goto L43d890;
}
