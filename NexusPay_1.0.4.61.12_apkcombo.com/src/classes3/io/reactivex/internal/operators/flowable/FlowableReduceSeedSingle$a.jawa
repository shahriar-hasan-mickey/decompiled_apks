record `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @AccessFlag ;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.BiFunction` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/BiFunction;Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L446db0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L446db6.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L446dba.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L446dbe.  v0.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.b` @type ^`io.reactivex.functions.BiFunction` := v2 @kind object;
  #L446dc2.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446dd4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446dd8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L446dde.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L446de2.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L446de6.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446d8c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446d90.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L446d94.  if v0 != v1 then goto L446d9c;
  #L446d98.  v0:= 1I;
  #L446d9a.  goto L446d9e;
  #L446d9c.  v0:= 0I;
  #L446d9e.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446df8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L446dfc.  if v0 == 0 then goto L446e18;
  #L446e00.  v1:= 0I;
  #L446e02.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L446e06.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L446e0a.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` := v1 @kind object;
  #L446e0e.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446e12.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L446e18.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L446e2c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L446e30.  if v0 == 0 then goto L446e4e;
  #L446e34.  v0:= 0I;
  #L446e36.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L446e3a.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L446e3e.  v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L446e42.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446e46.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L446e4c.  goto L446e54;
  #L446e4e.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L446e54.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446e68.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` @kind object;
  #L446e6c.  if v0 == 0 then goto L446ea6;
  #L446e70.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L446e74.  call temp:= `apply`(v1, v0, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L446e7a.  v3:= temp @kind object;
  #L446e7c.  v0:= "The reducer returned a null value" @kind object;
  #L446e80.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L446e86.  v3:= temp @kind object;
  #L446e88.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L446e8c.  goto L446ea6;
  #L446e8e.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L446e90.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L446e96.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446e9a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L446ea0.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L446ea6.  return @kind void;
  catch `java.lang.Throwable` @[L446e70..L446e8c] goto L446e8e;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableReduceSeedSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L446ec4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L446ec8.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L446ece.  v0:= temp;
  #L446ed0.  if v0 == 0 then goto L446ef2;
  #L446ed4.  v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.d` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L446ed8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableReduceSeedSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L446edc.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L446ee2.  v0:= 9223372036854775807L;
  #L446eec.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L446ef2.  return @kind void;
}
