record `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface, `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$b` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiPredicate` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `int` v2 , `io.reactivex.functions.BiPredicate` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/BiPredicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L44a918.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L44a91e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L44a922.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` := v3 @kind object;
  #L44a926.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L44a92a.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L44a930.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L44a934.  v1:= new `io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c`;
  #L44a938.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$b;I)V` @kind direct;
  #L44a93e.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` := v1 @kind object;
  #L44a942.  v1:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L44a946.  call `<init>`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L44a94c.  v0.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` := v1 @kind object;
  #L44a950.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44ac6c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44ac70.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44ac76.  v0:= temp;
  #L44ac78.  if v0 == 0 then goto L44ac84;
  #L44ac7c.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @kind virtual;
  #L44ac82.  goto L44ac8a;
  #L44ac84.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L44ac8a.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @AccessFlag  {
    temp;
    v0;

  #L44a964.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a968.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L44a96e.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a972.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44a978.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a97c.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L44a982.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a986.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44a98c.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this, `org.reactivestreams.Publisher` v2 @kind object, `org.reactivestreams.Publisher` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.c:(Lorg/reactivestreams/Publisher;Lorg/reactivestreams/Publisher;)V` @AccessFlag  {
    temp;
    v0;

  #L44ac9c.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aca0.  call `subscribe`(v2, v0) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44aca6.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44acaa.  call `subscribe`(v3, v2) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L44acb0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L44a9a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a9a4.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L44a9aa.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a9ae.  call `a`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.a:()V` @kind virtual;
  #L44a9b4.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44a9ba.  v0:= temp;
  #L44a9bc.  if v0 != 0 then goto L44a9d4;
  #L44a9c0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a9c4.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44a9ca.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a9ce.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44a9d4.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v10 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.drain:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L44a9e8.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L44a9ee.  v0:= temp;
  #L44a9f0.  if v0 == 0 then goto L44a9f6;
  #L44a9f4.  return @kind void;
  #L44a9f6.  v0:= 1I;
  #L44a9f8.  v1:= 1I;
  #L44a9fa.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a9fe.  v2:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44aa02.  v3:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aa06.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.e` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L44aa0a.  if v2 == 0 then goto L44abd8;
  #L44aa0e.  if v3 == 0 then goto L44abd8;
  #L44aa12.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L44aa18.  v4:= temp;
  #L44aa1a.  if v4 == 0 then goto L44aa34;
  #L44aa1e.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aa22.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44aa28.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aa2c.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44aa32.  return @kind void;
  #L44aa34.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aa38.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44aa3e.  v4:= temp @kind object;
  #L44aa40.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L44aa44.  if v4 == 0 then goto L44aa66;
  #L44aa48.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44aa4e.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44aa52.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aa56.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44aa5c.  v1:= temp @kind object;
  #L44aa5e.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44aa64.  return @kind void;
  #L44aa66.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aa6a.  v4:= v4.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L44aa6e.  v5:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` @kind object;
  #L44aa72.  if v5 != 0 then goto L44aab4;
  #L44aa76.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44aa7c.  v5:= temp @kind object;
  #L44aa7e.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v5 @kind object;
  #L44aa82.  goto L44aab4;
  #L44aa84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44aa86.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44aa8c.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44aa92.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aa96.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44aa9c.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44aaa0.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aaa4.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44aaaa.  v1:= temp @kind object;
  #L44aaac.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44aab2.  return @kind void;
  #L44aab4.  v6:= 0I;
  #L44aab6.  if v5 != 0 then goto L44aabe;
  #L44aaba.  v7:= 1I;
  #L44aabc.  goto L44aac0;
  #L44aabe.  v7:= 0I;
  #L44aac0.  v8:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44aac4.  v8:= v8.`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c.f` @type ^`boolean` @kind boolean;
  #L44aac8.  v9:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` @kind object;
  #L44aacc.  if v9 != 0 then goto L44ab0e;
  #L44aad0.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L44aad6.  v9:= temp @kind object;
  #L44aad8.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v9 @kind object;
  #L44aadc.  goto L44ab0e;
  #L44aade.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44aae0.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44aae6.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44aaec.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aaf0.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44aaf6.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44aafa.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44aafe.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44ab04.  v1:= temp @kind object;
  #L44ab06.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ab0c.  return @kind void;
  #L44ab0e.  if v9 != 0 then goto L44ab14;
  #L44ab12.  v6:= 1I;
  #L44ab14.  if v4 == 0 then goto L44ab34;
  #L44ab18.  if v8 == 0 then goto L44ab34;
  #L44ab1c.  if v7 == 0 then goto L44ab34;
  #L44ab20.  if v6 == 0 then goto L44ab34;
  #L44ab24.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ab28.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L44ab2c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44ab32.  return @kind void;
  #L44ab34.  if v4 == 0 then goto L44ab56;
  #L44ab38.  if v8 == 0 then goto L44ab56;
  #L44ab3c.  if v7 == v6 then goto L44ab56;
  #L44ab40.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44ab46.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ab4a.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L44ab4e.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44ab54.  return @kind void;
  #L44ab56.  if v7 != 0 then goto L44ac2c;
  #L44ab5a.  if v6 == 0 then goto L44ab60;
  #L44ab5e.  goto L44ac2c;
  #L44ab60.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.b` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L44ab64.  call temp:= `test`(v4, v5, v9) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L44ab6a.  v4:= temp;
  #L44ab6c.  if v4 != 0 then goto L44ab86;
  #L44ab70.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44ab76.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ab7a.  v1:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L44ab7e.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L44ab84.  return @kind void;
  #L44ab86.  v4:= 0I;
  #L44ab88.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.f` @type ^`java.lang.Object` := v4 @kind object;
  #L44ab8c.  v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.g` @type ^`java.lang.Object` := v4 @kind object;
  #L44ab90.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44ab94.  call `c`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L44ab9a.  v4:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44ab9e.  call `c`(v4) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.c:()V` @kind virtual;
  #L44aba4.  goto L44aa12;
  #L44aba8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L44abaa.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L44abb0.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44abb6.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44abba.  call temp:= `addThrowable`(v1, v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L44abc0.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44abc4.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44abc8.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44abce.  v1:= temp @kind object;
  #L44abd0.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44abd6.  return @kind void;
  #L44abd8.  call temp:= `isDisposed`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @kind virtual;
  #L44abde.  v2:= temp;
  #L44abe0.  if v2 == 0 then goto L44abfa;
  #L44abe4.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44abe8.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44abee.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.d` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44abf2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqual$c;.b:()V` @kind virtual;
  #L44abf8.  return @kind void;
  #L44abfa.  v2:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44abfe.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44ac04.  v2:= temp @kind object;
  #L44ac06.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L44ac0a.  if v2 == 0 then goto L44ac2c;
  #L44ac0e.  call `b`(v10) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.b:()V` @kind virtual;
  #L44ac14.  v0:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L44ac18.  v1:= v10.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.e` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L44ac1c.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L44ac22.  v1:= temp @kind object;
  #L44ac24.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L44ac2a.  return @kind void;
  #L44ac2c.  v1:= -v1 @kind int;
  #L44ac2e.  call temp:= `addAndGet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L44ac34.  v1:= temp;
  #L44ac36.  if v1 != 0 then goto L44a9fa;
  #L44ac3a.  return @kind void;
  catch `java.lang.Throwable` @[L44aa76..L44aa7e] goto L44aa84;
  catch `java.lang.Throwable` @[L44aad0..L44aad8] goto L44aade;
  catch `java.lang.Throwable` @[L44ab60..L44ab6c] goto L44aba8;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableSequenceEqualSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L44a8ec.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableSequenceEqualSingle$a.c` @type ^`io.reactivex.internal.operators.flowable.FlowableSequenceEqual$c` @kind object;
  #L44a8f0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L44a8f6.  v0:= temp @kind object;
  #L44a8f8.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L44a8fc.  if v0 != v1 then goto L44a904;
  #L44a900.  v0:= 1I;
  #L44a902.  goto L44a906;
  #L44a904.  v0:= 0I;
  #L44a906.  return v0;
}
