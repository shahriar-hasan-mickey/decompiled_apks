record `io.reactivex.internal.operators.flowable.FlowableAmb$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.operators.flowable.FlowableAmb$a` `io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableAmb$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `io.reactivex.internal.operators.flowable.FlowableAmb$a` v2 @kind object, `int` v3 , `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.<init>:(Lio/reactivex/internal/operators/flowable/FlowableAmb$a;ILorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L431014.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43101a.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43101e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L431024.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L431028.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` := v2 @kind object;
  #L43102c.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int` := v3;
  #L431030.  v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L431034.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;

  #L431048.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L43104e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431060.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L431064.  if v0 == 0 then goto L431074;
  #L431068.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L43106c.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L431072.  goto L4310ac;
  #L431074.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L431078.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L43107c.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L431082.  v0:= temp;
  #L431084.  if v0 == 0 then goto L43109a;
  #L431088.  v0:= 1I;
  #L43108a.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L43108e.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431092.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L431098.  goto L4310ac;
  #L43109a.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4310a0.  v0:= temp @kind object;
  #L4310a2.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L4310a6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L4310ac.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4310c0.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L4310c4.  if v0 == 0 then goto L4310d4;
  #L4310c8.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4310cc.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4310d2.  goto L431112;
  #L4310d4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L4310d8.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L4310dc.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L4310e2.  v0:= temp;
  #L4310e4.  if v0 == 0 then goto L4310fa;
  #L4310e8.  v0:= 1I;
  #L4310ea.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L4310ee.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4310f2.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4310f8.  goto L431112;
  #L4310fa.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L431100.  v0:= temp @kind object;
  #L431102.  v0:= (`org.reactivestreams.Subscription`) v0 @kind object;
  #L431106.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L43110c.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L431112.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L431124.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` @kind boolean;
  #L431128.  if v0 == 0 then goto L431138;
  #L43112c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431130.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L431136.  goto L431170;
  #L431138.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.a` @type ^`io.reactivex.internal.operators.flowable.FlowableAmb$a` @kind object;
  #L43113c.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.b` @type ^`int`;
  #L431140.  call temp:= `b`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$a;.b:(I)Z` @kind virtual;
  #L431146.  v0:= temp;
  #L431148.  if v0 == 0 then goto L43115e;
  #L43114c.  v0:= 1I;
  #L43114e.  v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.d` @type ^`boolean` := v0 @kind boolean;
  #L431152.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAmb$b.c` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L431156.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43115c.  goto L431170;
  #L43115e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L431164.  v3:= temp @kind object;
  #L431166.  v3:= (`org.reactivestreams.Subscription`) v3 @kind object;
  #L43116a.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L431170.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L431184.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L431188.  call temp:= `deferredSetOnce`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L43118e.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableAmb$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableAmb$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4311a0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAmb$b.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4311a4.  call `deferredRequest`(v1, v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L4311aa.  return @kind void;
}
