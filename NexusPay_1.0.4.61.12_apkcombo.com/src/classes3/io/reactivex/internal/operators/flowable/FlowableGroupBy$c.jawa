record `io.reactivex.internal.operators.flowable.FlowableGroupBy$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `org.reactivestreams.Publisher` @kind interface {
  `java.lang.Object` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.a` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.e` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.j` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.k` @AccessFlag ;
  `int` `io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowableGroupBy$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `int` v2 , `io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.<init>:(ILio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;Ljava/lang/Object;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L43eb3c.  call `<init>`(v1) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L43eb42.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L43eb46.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L43eb4c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L43eb50.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43eb54.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43eb5a.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43eb5e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L43eb62.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L43eb68.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L43eb6c.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L43eb70.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L43eb76.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L43eb7a.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L43eb7e.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L43eb84.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L43eb88.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` := v3 @kind object;
  #L43eb8c.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L43eb90.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` := v5 @kind boolean;
  #L43eb94.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43eba8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43ebac.  v1:= 0I;
  #L43ebae.  v2:= 1I;
  #L43ebb0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43ebb6.  v0:= temp;
  #L43ebb8.  if v0 == 0 then goto L43ebd0;
  #L43ebbc.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L43ebc0.  v1:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.a` @type ^`java.lang.Object` @kind object;
  #L43ebc4.  call `cancel`(v0, v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$GroupBySubscriber;.cancel:(Ljava/lang/Object;)V` @kind virtual;
  #L43ebca.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43ebd0.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43ebe4.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ebe8.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43ebee.  v1:= temp @kind object;
  #L43ebf0.  if v1 == 0 then goto L43ec02;
  #L43ebf4.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int`;
  #L43ebf8.  v1:= v1 + 1;
  #L43ebfc.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int` := v1;
  #L43ec00.  goto L43ebe8;
  #L43ec02.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @kind virtual;
  #L43ec08.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @AccessFlag  {
    temp;
    v0;

  #L43ec1c.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L43ec22.  v0:= temp;
  #L43ec24.  if v0 == 0 then goto L43ec2a;
  #L43ec28.  return @kind void;
  #L43ec2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`boolean` @kind boolean;
  #L43ec2e.  if v0 == 0 then goto L43ec3a;
  #L43ec32.  call `f`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.f:()V` @kind virtual;
  #L43ec38.  goto L43ec40;
  #L43ec3a.  call `g`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.g:()V` @kind virtual;
  #L43ec40.  return @kind void;
}
procedure `boolean` `e`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this, `boolean` v3 , `boolean` v4 , `org.reactivestreams.Subscriber` v5 @kind object, `boolean` v6 , `long` v7 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.e:(ZZLorg/reactivestreams/Subscriber;ZJ)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L43ea0c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43ea10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43ea16.  v0:= temp;
  #L43ea18.  v1:= 1I;
  #L43ea1a.  if v0 == 0 then goto L43ea52;
  #L43ea1e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ea22.  call temp:= `poll`(v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43ea28.  v3:= temp @kind object;
  #L43ea2a.  if v3 == 0 then goto L43ea36;
  #L43ea2e.  v3:= 1L;
  #L43ea32.  v7:= v7 + v3 @kind long;
  #L43ea34.  goto L43ea1e;
  #L43ea36.  v3:= 0L;
  #L43ea3a.  v5:= lcmp(v7, v3);
  #L43ea3e.  if v5 == 0 then goto L43ea50;
  #L43ea42.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L43ea46.  v3:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ea4a.  call `request`(v3, v7) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43ea50.  return v1;
  #L43ea52.  if v3 == 0 then goto L43ea9c;
  #L43ea56.  if v6 == 0 then goto L43ea76;
  #L43ea5a.  if v4 == 0 then goto L43ea9c;
  #L43ea5e.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L43ea62.  if v3 == 0 then goto L43ea6e;
  #L43ea66.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ea6c.  goto L43ea74;
  #L43ea6e.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43ea74.  return v1;
  #L43ea76.  v3:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L43ea7a.  if v3 == 0 then goto L43ea90;
  #L43ea7e.  v4:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ea82.  call `clear`(v4) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43ea88.  call `onError`(v5, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ea8e.  return v1;
  #L43ea90.  if v4 == 0 then goto L43ea9c;
  #L43ea94.  call `onComplete`(v5) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43ea9a.  return v1;
  #L43ea9c.  v3:= 0I;
  #L43ea9e.  return v3;
}
procedure `void` `f`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.f:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L43ec54.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ec58.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ec5c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ec62.  v1:= temp @kind object;
  #L43ec64.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L43ec68.  v2:= 1I;
  #L43ec6a.  if v1 == 0 then goto L43ecca;
  #L43ec6e.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43ec72.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L43ec78.  v3:= temp;
  #L43ec7a.  if v3 == 0 then goto L43ec80;
  #L43ec7e.  return @kind void;
  #L43ec80.  v3:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L43ec84.  if v3 == 0 then goto L43eca6;
  #L43ec88.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L43ec8c.  if v4 != 0 then goto L43eca6;
  #L43ec90.  v4:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L43ec94.  if v4 == 0 then goto L43eca6;
  #L43ec98.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L43ec9e.  call `onError`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43eca4.  return @kind void;
  #L43eca6.  v4:= 0I;
  #L43eca8.  call `onNext`(v1, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43ecae.  if v3 == 0 then goto L43ecca;
  #L43ecb2.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` @kind object;
  #L43ecb6.  if v0 == 0 then goto L43ecc2;
  #L43ecba.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L43ecc0.  goto L43ecc8;
  #L43ecc2.  call `onComplete`(v1) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L43ecc8.  return @kind void;
  #L43ecca.  v2:= -v2 @kind int;
  #L43eccc.  call temp:= `addAndGet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43ecd2.  v2:= temp;
  #L43ecd4.  if v2 != 0 then goto L43ecda;
  #L43ecd8.  return @kind void;
  #L43ecda.  if v1 != 0 then goto L43ec6a;
  #L43ecde.  v1:= v5.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ece2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ece8.  v1:= temp @kind object;
  #L43ecea.  v1:= (`org.reactivestreams.Subscriber`) v1 @kind object;
  #L43ecee.  goto L43ec6a;
}
procedure `void` `g`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v21 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;

  #L43ed00.  v7:= v21 @kind object;
  #L43ed04.  v8:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ed08.  v9:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.d` @type ^`boolean` @kind boolean;
  #L43ed0c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ed10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ed16.  v0:= temp @kind object;
  #L43ed18.  v0:= (`org.reactivestreams.Subscriber`) v0 @kind object;
  #L43ed1c.  v11:= v0 @kind object;
  #L43ed1e.  v12:= 1I;
  #L43ed20.  if v11 == 0 then goto L43edf8;
  #L43ed24.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43ed28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L43ed2e.  v13:= temp @kind wide;
  #L43ed30.  v15:= 0L;
  #L43ed34.  v5:= v15 @kind wide;
  #L43ed36.  v17:= lcmp(v5, v13);
  #L43ed3a.  if v17 == 0 then goto L43ed96;
  #L43ed3e.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L43ed42.  call temp:= `poll`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43ed48.  v4:= temp @kind object;
  #L43ed4a.  if v4 != 0 then goto L43ed54;
  #L43ed4e.  v18:= 1I;
  #L43ed52.  goto L43ed5a;
  #L43ed54.  v0:= 0I;
  #L43ed56.  v18:= 0I;
  #L43ed5a.  v0:= v21 @kind object;
  #L43ed5e.  v2:= v18;
  #L43ed62.  v3:= v11 @kind object;
  #L43ed64.  v10:= v4 @kind object;
  #L43ed66.  v4:= v9;
  #L43ed68.  v19:= v5 @kind wide;
  #L43ed6c.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.e:(ZZLorg/reactivestreams/Subscriber;ZJ)Z` @kind virtual;
  #L43ed72.  v0:= temp;
  #L43ed74.  if v0 == 0 then goto L43ed7a;
  #L43ed78.  return @kind void;
  #L43ed7a.  if v18 == 0 then goto L43ed84;
  #L43ed7e.  v5:= v19 @kind wide;
  #L43ed82.  goto L43ed96;
  #L43ed84.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L43ed8a.  v0:= 1L;
  #L43ed8e.  v5:= v19 @kind wide;
  #L43ed92.  v5:= v5 + v0 @kind long;
  #L43ed94.  goto L43ed36;
  #L43ed96.  if v17 != 0 then goto L43edc4;
  #L43ed9a.  v1:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` @kind boolean;
  #L43ed9e.  call temp:= `isEmpty`(v8) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43eda4.  v2:= temp;
  #L43eda6.  v0:= v21 @kind object;
  #L43edaa.  v3:= v11 @kind object;
  #L43edac.  v4:= v9;
  #L43edae.  v19:= v5 @kind wide;
  #L43edb2.  call temp:= `e`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.e:(ZZLorg/reactivestreams/Subscriber;ZJ)Z` @kind virtual;
  #L43edb8.  v0:= temp;
  #L43edba.  if v0 == 0 then goto L43edc0;
  #L43edbe.  return @kind void;
  #L43edc0.  v5:= v19 @kind wide;
  #L43edc4.  v0:= lcmp(v5, v15);
  #L43edc8.  if v0 == 0 then goto L43edf8;
  #L43edcc.  v0:= 9223372036854775807L;
  #L43edd6.  v2:= lcmp(v13, v0);
  #L43edda.  if v2 == 0 then goto L43edea;
  #L43edde.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43ede2.  v1:= -v5 @kind long;
  #L43ede4.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L43edea.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L43edee.  v0:= v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43edf2.  call `request`(v0, v5) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43edf8.  v0:= -v12 @kind int;
  #L43edfa.  call temp:= `addAndGet`(v7, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L43ee00.  v12:= temp;
  #L43ee02.  if v12 != 0 then goto L43ee08;
  #L43ee06.  return @kind void;
  #L43ee08.  if v11 != 0 then goto L43ed20;
  #L43ee0c.  v0:= v7.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43ee10.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L43ee16.  v0:= temp @kind object;
  #L43ee18.  v11:= v0 @kind object;
  #L43ee1a.  v11:= (`org.reactivestreams.Subscriber`) v11 @kind object;
  #L43ee1e.  goto L43ed20;
}
procedure `void` `h`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L43ef1c.  v0:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int`;
  #L43ef20.  if v0 == 0 then goto L43ef3a;
  #L43ef24.  v1:= 0I;
  #L43ef26.  v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int` := v1;
  #L43ef2a.  v1:= v4.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.c` @type ^`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber` @kind object;
  #L43ef2e.  v1:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$GroupBySubscriber.i` @type ^`org.reactivestreams.Subscription` @kind object;
  #L43ef32.  v2:= (`long`) v0 @kind i2l;
  #L43ef34.  call `request`(v1, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L43ef3a.  return @kind void;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eab0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43eab4.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L43eaba.  v0:= temp;
  #L43eabc.  if v0 == 0 then goto L43eaca;
  #L43eac0.  call `h`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @kind virtual;
  #L43eac6.  v0:= 1I;
  #L43eac8.  return v0;
  #L43eaca.  v0:= 0I;
  #L43eacc.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ee30.  v0:= 1I;
  #L43ee32.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v0 @kind boolean;
  #L43ee36.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43ee3c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L43ee50.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.g` @type ^`java.lang.Throwable` := v1 @kind object;
  #L43ee54.  v1:= 1I;
  #L43ee56.  v0.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.f` @type ^`boolean` := v1 @kind boolean;
  #L43ee5a.  call `drain`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43ee60.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ee74.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43ee78.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L43ee7e.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43ee84.  return @kind void;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L43eb04.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.b` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L43eb08.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L43eb0e.  v0:= temp @kind object;
  #L43eb10.  if v0 == 0 then goto L43eb22;
  #L43eb14.  v1:= v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int`;
  #L43eb18.  v1:= v1 + 1;
  #L43eb1c.  v2.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.l` @type ^`int` := v1;
  #L43eb20.  return v0 @kind object;
  #L43eb22.  call `h`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.h:()V` @kind virtual;
  #L43eb28.  v0:= 0I;
  #L43eb2a.  return v0 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43ee98.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L43ee9e.  v0:= temp;
  #L43eea0.  if v0 == 0 then goto L43eeb4;
  #L43eea4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.e` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L43eea8.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L43eeae.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43eeb4.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43eae0.  v0:= 2I;
  #L43eae2.  v2:= v2 ^& v0 @kind int;
  #L43eae4.  if v2 == 0 then goto L43eaf0;
  #L43eae8.  v2:= 1I;
  #L43eaea.  v1.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.k` @type ^`boolean` := v2 @kind boolean;
  #L43eaee.  return v0;
  #L43eaf0.  v2:= 0I;
  #L43eaf2.  return v2;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.flowable.FlowableGroupBy$c` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L43eec8.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.j` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L43eecc.  v1:= 0I;
  #L43eece.  v2:= 1I;
  #L43eed0.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L43eed6.  v0:= temp;
  #L43eed8.  if v0 == 0 then goto L43eef4;
  #L43eedc.  call `onSubscribe`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43eee2.  v0:= v3.`io.reactivex.internal.operators.flowable.FlowableGroupBy$c.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L43eee6.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L43eeec.  call `drain`(v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableGroupBy$c;.drain:()V` @kind virtual;
  #L43eef2.  goto L43ef08;
  #L43eef4.  v0:= new `java.lang.IllegalStateException`;
  #L43eef8.  v1:= "Only one Subscriber allowed!" @kind object;
  #L43eefc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L43ef02.  call `error`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43ef08.  return @kind void;
}
