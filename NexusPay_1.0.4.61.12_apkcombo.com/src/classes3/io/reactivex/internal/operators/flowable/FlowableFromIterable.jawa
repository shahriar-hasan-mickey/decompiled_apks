record `io.reactivex.internal.operators.flowable.FlowableFromIterable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `java.lang.Iterable` `io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v0 @kind this, `java.lang.Iterable` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L43dd84.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L43dd8a.  v0.`io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @type ^`java.lang.Iterable` := v1 @kind object;
  #L43dd8e.  return @kind void;
}
procedure `void` `subscribe`(`org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L43dda0.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L43dda6.  v0:= temp;
  #L43dda8.  if v0 != 0 then goto L43ddb4;
  #L43ddac.  call `complete`(v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.complete:(Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43ddb2.  return @kind void;
  #L43ddb4.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L43ddb8.  if v0 == 0 then goto L43ddd4;
  #L43ddbc.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$b`;
  #L43ddc0.  v1:= v2 @kind object;
  #L43ddc2.  v1:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v1 @kind object;
  #L43ddc6.  call `<init>`(v0, v1, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Ljava/util/Iterator;)V` @kind direct;
  #L43ddcc.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43ddd2.  goto L43dde4;
  #L43ddd4.  v0:= new `io.reactivex.internal.operators.flowable.FlowableFromIterable$c`;
  #L43ddd8.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable$c;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind direct;
  #L43ddde.  call `onSubscribe`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L43dde4.  return @kind void;
  #L43dde6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43dde8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43ddee.  call `error`(v3, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43ddf4.  return @kind void;
  catch `java.lang.Throwable` @[L43dda0..L43dda8] goto L43dde6;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.flowable.FlowableFromIterable` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L43de14.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableFromIterable.b` @type ^`java.lang.Iterable` @kind object;
  #L43de18.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L43de1e.  v0:= temp @kind object;
  #L43de20.  call `subscribe`(v2, v0) @signature `Lio/reactivex/internal/operators/flowable/FlowableFromIterable;.subscribe:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind static;
  #L43de26.  return @kind void;
  #L43de28.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L43de2a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L43de30.  call `error`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L43de36.  return @kind void;
  catch `java.lang.Throwable` @[L43de14..L43de20] goto L43de28;
}
