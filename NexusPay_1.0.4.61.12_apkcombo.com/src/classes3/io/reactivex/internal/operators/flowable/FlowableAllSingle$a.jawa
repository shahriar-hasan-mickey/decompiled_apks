record `io.reactivex.internal.operators.flowable.FlowableAllSingle$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L430c28.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L430c2e.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L430c32.  v0.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L430c36.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430c48.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L430c4c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L430c52.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430c56.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L430c5a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430c04.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L430c08.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430c0c.  if v0 != v1 then goto L430c14;
  #L430c10.  v0:= 1I;
  #L430c12.  goto L430c16;
  #L430c14.  v0:= 0I;
  #L430c16.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430c6c.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L430c70.  if v0 == 0 then goto L430c76;
  #L430c74.  return @kind void;
  #L430c76.  v0:= 1I;
  #L430c78.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L430c7c.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430c80.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L430c84.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430c88.  v1:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L430c8c.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430c92.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430ca4.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L430ca8.  if v0 == 0 then goto L430cb4;
  #L430cac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L430cb2.  return @kind void;
  #L430cb4.  v0:= 1I;
  #L430cb6.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v0 @kind boolean;
  #L430cba.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430cbe.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L430cc2.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430cc6.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L430ccc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L430ce0.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` @kind boolean;
  #L430ce4.  if v0 == 0 then goto L430cea;
  #L430ce8.  return @kind void;
  #L430cea.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L430cee.  call temp:= `test`(v0, v2) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L430cf4.  v2:= temp;
  #L430cf6.  if v2 != 0 then goto L430d20;
  #L430cfa.  v2:= 1I;
  #L430cfc.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.d` @type ^`boolean` := v2 @kind boolean;
  #L430d00.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L430d04.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L430d0a.  v2:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430d0e.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L430d12.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430d16.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L430d1a.  call `onSuccess`(v2, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L430d20.  return @kind void;
  #L430d22.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L430d24.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L430d2a.  v0:= v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L430d2e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L430d34.  v0:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L430d38.  v1.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v0 @kind object;
  #L430d3c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L430d42.  return @kind void;
  catch `java.lang.Throwable` @[L430cea..L430cf6] goto L430d22;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.flowable.FlowableAllSingle$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowableAllSingle$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L430d60.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L430d64.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L430d6a.  v0:= temp;
  #L430d6c.  if v0 == 0 then goto L430d8e;
  #L430d70.  v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L430d74.  v0:= v2.`io.reactivex.internal.operators.flowable.FlowableAllSingle$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L430d78.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L430d7e.  v0:= 9223372036854775807L;
  #L430d88.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L430d8e.  return @kind void;
}
