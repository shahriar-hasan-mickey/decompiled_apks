record `io.reactivex.internal.operators.flowable.FlowablePublish$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.flowable.FlowablePublish$c` `io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @AccessFlag VOLATILE;
  `long` `io.reactivex.internal.operators.flowable.FlowablePublish$b.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.flowable.FlowablePublish$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4448bc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4448c2.  v0.`io.reactivex.internal.operators.flowable.FlowablePublish$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4448c6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v5 @kind this) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4448d8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L4448de.  v0:= temp @kind wide;
  #L4448e0.  v2:= -9223372036854775808L;
  #L4448e4.  v4:= lcmp(v0, v2);
  #L4448e8.  if v4 == 0 then goto L444910;
  #L4448ec.  call temp:= `getAndSet`(v5, v2) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L4448f2.  v0:= temp @kind wide;
  #L4448f4.  v4:= lcmp(v0, v2);
  #L4448f8.  if v4 == 0 then goto L444910;
  #L4448fc.  v0:= v5.`io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind object;
  #L444900.  if v0 == 0 then goto L444910;
  #L444904.  call `d`(v0, v5) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.d:(Lio/reactivex/internal/operators/flowable/FlowablePublish$b;)V` @kind virtual;
  #L44490a.  call `c`(v0) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444910.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.flowable.FlowablePublish$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L444924.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L44492a.  v0:= temp;
  #L44492c.  if v0 == 0 then goto L444944;
  #L444930.  call temp:= `addCancel`(v1, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.addCancel:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L444936.  v2:= v1.`io.reactivex.internal.operators.flowable.FlowablePublish$b.b` @type ^`io.reactivex.internal.operators.flowable.FlowablePublish$c` @kind object;
  #L44493a.  if v2 == 0 then goto L444944;
  #L44493e.  call `c`(v2) @signature `Lio/reactivex/internal/operators/flowable/FlowablePublish$c;.c:()V` @kind virtual;
  #L444944.  return @kind void;
}
