record `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.Observer` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L480590.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L480596.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L48059a.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L48059e.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4805b0.  v0:= 0I;
  #L4805b2.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v0 @kind object;
  #L4805b6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4805c8.  v0:= 1I;
  #L4805ca.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` := v0 @kind boolean;
  #L4805ce.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4805d2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4805d8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4805dc.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4805e0.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4804f0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4804f4.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480508.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L48050c.  if v0 != 0 then goto L480514;
  #L480510.  v0:= 1I;
  #L480512.  goto L480516;
  #L480514.  v0:= 0I;
  #L480516.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4805f4.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4805f8.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4805fc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L480600.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480606.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480618.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48061c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L480622.  v0:= temp;
  #L480624.  if v0 == 0 then goto L480636;
  #L480628.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.c` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L48062c.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L480630.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L480636.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L480648.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L48064c.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L480650.  call temp:= `apply`(v1, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L480656.  v3:= temp @kind object;
  #L480658.  v3:= (`java.lang.Iterable`) v3 @kind object;
  #L48065c.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L480662.  v3:= temp @kind object;
  #L480664.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48066a.  v1:= temp;
  #L48066c.  if v1 != 0 then goto L480678;
  #L480670.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L480676.  return @kind void;
  #L480678.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` @kind boolean;
  #L48067c.  if v1 == 0 then goto L480694;
  #L480680.  v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v3 @kind object;
  #L480684.  v3:= 0I;
  #L480686.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48068c.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L480692.  return @kind void;
  #L480694.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L480698.  if v1 == 0 then goto L48069e;
  #L48069c.  return @kind void;
  #L48069e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4806a4.  v1:= temp @kind object;
  #L4806a6.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L4806ac.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.e` @type ^`boolean` @kind boolean;
  #L4806b0.  if v1 == 0 then goto L4806b6;
  #L4806b4.  return @kind void;
  #L4806b6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4806bc.  v1:= temp;
  #L4806be.  if v1 != 0 then goto L480694;
  #L4806c2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L4806c8.  return @kind void;
  #L4806ca.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4806cc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4806d2.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4806d8.  return @kind void;
  #L4806da.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4806dc.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4806e2.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4806e8.  return @kind void;
  #L4806ea.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4806ec.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4806f2.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L4806f6.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4806fc.  return @kind void;
  catch `java.lang.Throwable` @[L48064c..L48066c] goto L4806ea;
  catch `java.lang.Throwable` @[L48069e..L4806a6] goto L4806da;
  catch `java.lang.Throwable` @[L4806b6..L4806be] goto L4806ca;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L48054c.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` @kind object;
  #L480550.  v1:= 0I;
  #L480552.  if v0 == 0 then goto L48057c;
  #L480556.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L48055c.  v2:= temp @kind object;
  #L48055e.  v3:= "The iterator returned a null value" @kind object;
  #L480562.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L480568.  v2:= temp @kind object;
  #L48056a.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L480570.  v0:= temp;
  #L480572.  if v0 != 0 then goto L48057a;
  #L480576.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.d` @type ^`java.util.Iterator` := v1 @kind object;
  #L48057a.  return v2 @kind object;
  #L48057c.  return v1 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableObservable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480528.  v0:= 2I;
  #L48052a.  v2:= v2 ^& v0 @kind int;
  #L48052c.  if v2 == 0 then goto L480538;
  #L480530.  v2:= 1I;
  #L480532.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableObservable$a.f` @type ^`boolean` := v2 @kind boolean;
  #L480536.  return v0;
  #L480538.  v2:= 0I;
  #L48053a.  return v2;
}
