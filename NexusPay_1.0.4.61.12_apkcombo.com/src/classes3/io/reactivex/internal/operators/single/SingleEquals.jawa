record `io.reactivex.internal.operators.single.SingleEquals` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleEquals.a` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleEquals.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleEquals` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals;.<init>:(Lio/reactivex/SingleSource;Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47fd2c.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L47fd32.  v0.`io.reactivex.internal.operators.single.SingleEquals.a` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L47fd36.  v0.`io.reactivex.internal.operators.single.SingleEquals.b` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L47fd3a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleEquals` v11 @kind this, `io.reactivex.SingleObserver` v12 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleEquals;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L47fd4c.  v6:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47fd50.  call `<init>`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47fd56.  v0:= 2I;
  #L47fd58.  v7:= new `java.lang.Object`[v0];
  #L47fd5c.  v0:= 0I;
  #L47fd5e.  v1:= 0I;
  #L47fd60.  v7[v0]:= v1 @kind object;
  #L47fd64.  v0:= 1I;
  #L47fd66.  v7[v0]:= v1 @kind object;
  #L47fd6a.  v8:= new `io.reactivex.disposables.CompositeDisposable`;
  #L47fd6e.  call `<init>`(v8) @signature `Lio/reactivex/disposables/CompositeDisposable;.<init>:()V` @kind direct;
  #L47fd74.  call `onSubscribe`(v12, v8) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47fd7a.  v9:= v11.`io.reactivex.internal.operators.single.SingleEquals.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L47fd7e.  v10:= new `io.reactivex.internal.operators.single.SingleEquals$a`;
  #L47fd82.  v1:= 0I;
  #L47fd84.  v0:= v10 @kind object;
  #L47fd86.  v2:= v8 @kind object;
  #L47fd88.  v3:= v7 @kind object;
  #L47fd8a.  v4:= v12 @kind object;
  #L47fd8c.  v5:= v6 @kind object;
  #L47fd8e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/single/SingleEquals$a;.<init>:(ILio/reactivex/disposables/CompositeDisposable;[Ljava/lang/Object;Lio/reactivex/SingleObserver;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L47fd94.  call `subscribe`(v9, v10) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L47fd9a.  v9:= v11.`io.reactivex.internal.operators.single.SingleEquals.b` @type ^`io.reactivex.SingleSource` @kind object;
  #L47fd9e.  v10:= new `io.reactivex.internal.operators.single.SingleEquals$a`;
  #L47fda2.  v1:= 1I;
  #L47fda4.  v0:= v10 @kind object;
  #L47fda6.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lio/reactivex/internal/operators/single/SingleEquals$a;.<init>:(ILio/reactivex/disposables/CompositeDisposable;[Ljava/lang/Object;Lio/reactivex/SingleObserver;Ljava/util/concurrent/atomic/AtomicInteger;)V` @kind direct;
  #L47fdac.  call `subscribe`(v9, v10) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L47fdb2.  return @kind void;
}
