record `io.reactivex.internal.operators.single.SingleContains$a` @kind class @AccessFlag FINAL extends `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleContains$a.a` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.operators.single.SingleContains` `io.reactivex.internal.operators.single.SingleContains$a.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleContains$a` v0 @kind this, `io.reactivex.internal.operators.single.SingleContains` v1 @kind object, `io.reactivex.SingleObserver` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleContains$a;.<init>:(Lio/reactivex/internal/operators/single/SingleContains;Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47e400.  v0.`io.reactivex.internal.operators.single.SingleContains$a.b` @type ^`io.reactivex.internal.operators.single.SingleContains` := v1 @kind object;
  #L47e404.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47e40a.  v0.`io.reactivex.internal.operators.single.SingleContains$a.a` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L47e40e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleContains$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleContains$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e420.  v0:= v1.`io.reactivex.internal.operators.single.SingleContains$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e424.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47e42a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleContains$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleContains$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e43c.  v0:= v1.`io.reactivex.internal.operators.single.SingleContains$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e440.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47e446.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleContains$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleContains$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47e458.  v0:= v2.`io.reactivex.internal.operators.single.SingleContains$a.b` @type ^`io.reactivex.internal.operators.single.SingleContains` @kind object;
  #L47e45c.  v0:= v0.`io.reactivex.internal.operators.single.SingleContains.c` @type ^`io.reactivex.functions.BiPredicate` @kind object;
  #L47e460.  v1:= v2.`io.reactivex.internal.operators.single.SingleContains$a.b` @type ^`io.reactivex.internal.operators.single.SingleContains` @kind object;
  #L47e464.  v1:= v1.`io.reactivex.internal.operators.single.SingleContains.b` @type ^`java.lang.Object` @kind object;
  #L47e468.  call temp:= `test`(v0, v3, v1) @signature `Lio/reactivex/functions/BiPredicate;.test:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L47e46e.  v3:= temp;
  #L47e470.  v0:= v2.`io.reactivex.internal.operators.single.SingleContains$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e474.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L47e47a.  v3:= temp @kind object;
  #L47e47c.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L47e482.  return @kind void;
  #L47e484.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47e486.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47e48c.  v0:= v2.`io.reactivex.internal.operators.single.SingleContains$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e490.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47e496.  return @kind void;
  catch `java.lang.Throwable` @[L47e458..L47e470] goto L47e484;
}
