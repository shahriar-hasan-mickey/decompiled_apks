record `io.reactivex.internal.operators.single.SingleObserveOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleObserveOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.single.SingleObserveOn$a.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleObserveOn$a.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleObserveOn$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleObserveOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L481544.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48154a.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L48154e.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L481552.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L481564.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48156a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48151c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481522.  v0:= temp @kind object;
  #L481524.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481528.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48152e.  v0:= temp;
  #L481530.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L48157c.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` := v1 @kind object;
  #L481580.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L481584.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L48158a.  v1:= temp @kind object;
  #L48158c.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L481592.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L4815a4.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4815aa.  v1:= temp;
  #L4815ac.  if v1 == 0 then goto L4815ba;
  #L4815b0.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4815b4.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4815ba.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L4815cc.  v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L4815d0.  v1:= v0.`io.reactivex.internal.operators.single.SingleObserveOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L4815d4.  call temp:= `scheduleDirect`(v1, v0) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L4815da.  v1:= temp @kind object;
  #L4815dc.  call temp:= `replace`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.replace:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4815e2.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleObserveOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleObserveOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4815f4.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$a.d` @type ^`java.lang.Throwable` @kind object;
  #L4815f8.  if v0 == 0 then goto L481608;
  #L4815fc.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481600.  call `onError`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L481606.  goto L481616;
  #L481608.  v0:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L48160c.  v1:= v2.`io.reactivex.internal.operators.single.SingleObserveOn$a.c` @type ^`java.lang.Object` @kind object;
  #L481610.  call `onSuccess`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L481616.  return @kind void;
}
