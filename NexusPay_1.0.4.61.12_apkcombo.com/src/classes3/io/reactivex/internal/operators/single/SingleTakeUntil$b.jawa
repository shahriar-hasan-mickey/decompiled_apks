record `io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.single.SingleTakeUntil$a` `io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v0 @kind this, `io.reactivex.internal.operators.single.SingleTakeUntil$a` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L481be4.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481bea.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` := v1 @kind object;
  #L481bee.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @AccessFlag PUBLIC {
    temp;

  #L481c00.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481c06.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481c18.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481c1e.  v0:= temp @kind object;
  #L481c20.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L481c24.  if v0 == v1 then goto L481c42;
  #L481c28.  call `lazySet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L481c2e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L481c32.  v1:= new `java.util.concurrent.CancellationException`;
  #L481c36.  call `<init>`(v1) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481c3c.  call `a`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L481c42.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481c54.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L481c58.  call `a`(v0, v2) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L481c5e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481c70.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481c76.  v2:= temp;
  #L481c78.  if v2 == 0 then goto L481c90;
  #L481c7c.  v2:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$b.a` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind object;
  #L481c80.  v0:= new `java.util.concurrent.CancellationException`;
  #L481c84.  call `<init>`(v0) @signature `Ljava/util/concurrent/CancellationException;.<init>:()V` @kind direct;
  #L481c8a.  call `a`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L481c90.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$b` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481ca4.  v0:= 9223372036854775807L;
  #L481cae.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L481cb4.  return @kind void;
}
