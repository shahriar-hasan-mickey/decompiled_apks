record `io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.MaybeObserver` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this, `io.reactivex.MaybeObserver` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L480834.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L48083a.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.MaybeObserver` := v1 @kind object;
  #L48083e.  v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L480842.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;

  #L480854.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L48085a.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48080c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L480812.  v0:= temp @kind object;
  #L480814.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L480818.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48081e.  v0:= temp;
  #L480820.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48086c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L480870.  call `onError`(v0, v2) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480876.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L480888.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48088e.  v1:= temp;
  #L480890.  if v1 == 0 then goto L48089e;
  #L480894.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L480898.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L48089e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4808b0.  v0:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4808b4.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4808ba.  v3:= temp @kind object;
  #L4808bc.  v0:= "The mapper returned a null MaybeSource" @kind object;
  #L4808c0.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4808c6.  v3:= temp @kind object;
  #L4808c8.  v3:= (`io.reactivex.MaybeSource`) v3 @kind object;
  #L4808cc.  call temp:= `isDisposed`(v2) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.isDisposed:()Z` @kind virtual;
  #L4808d2.  v0:= temp;
  #L4808d4.  if v0 != 0 then goto L4808ec;
  #L4808d8.  v0:= new `io.reactivex.internal.operators.single.SingleFlatMapMaybe$a`;
  #L4808dc.  v1:= v2.`io.reactivex.internal.operators.single.SingleFlatMapMaybe$b.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L4808e0.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$a;.<init>:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/MaybeObserver;)V` @kind direct;
  #L4808e6.  call `subscribe`(v3, v0) @signature `Lio/reactivex/MaybeSource;.subscribe:(Lio/reactivex/MaybeObserver;)V` @kind interface;
  #L4808ec.  return @kind void;
  #L4808ee.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4808f0.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4808f6.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapMaybe$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L4808fc.  return @kind void;
  catch `java.lang.Throwable` @[L4808b0..L4808cc] goto L4808ee;
}
