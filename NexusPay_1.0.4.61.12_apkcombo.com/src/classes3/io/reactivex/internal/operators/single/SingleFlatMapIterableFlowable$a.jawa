record `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.BasicIntQueueSubscription` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @AccessFlag ;
  `java.util.Iterator` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L480198.  call `<init>`(v0) @signature `Lio/reactivex/internal/subscriptions/BasicIntQueueSubscription;.<init>:()V` @kind direct;
  #L48019e.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L4801a2.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L4801a6.  v1:= new `java.util.concurrent.atomic.AtomicLong`;
  #L4801aa.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L4801b0.  v0.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` := v1 @kind object;
  #L4801b4.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4801c8.  v0:= 1I;
  #L4801ca.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` := v0 @kind boolean;
  #L4801ce.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4801d2.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4801d8.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4801dc.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4801e0.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4801f4.  v0:= 0I;
  #L4801f6.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v0 @kind object;
  #L4801fa.  return @kind void;
}
procedure `void` `drain`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v11 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L48020c.  call temp:= `getAndIncrement`(v11) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L480212.  v0:= temp;
  #L480214.  if v0 == 0 then goto L48021a;
  #L480218.  return @kind void;
  #L48021a.  v0:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L48021e.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L480222.  v2:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` @kind boolean;
  #L480226.  if v2 == 0 then goto L48023e;
  #L48022a.  if v1 == 0 then goto L48023e;
  #L48022e.  v1:= 0I;
  #L480230.  call `onNext`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L480236.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L48023c.  return @kind void;
  #L48023e.  v2:= 1I;
  #L480240.  if v1 == 0 then goto L4802f2;
  #L480244.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L480248.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L48024e.  v3:= temp @kind wide;
  #L480250.  v5:= 9223372036854775807L;
  #L48025a.  v7:= lcmp(v3, v5);
  #L48025e.  if v7 != 0 then goto L48026a;
  #L480262.  call `e`(v11, v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @kind virtual;
  #L480268.  return @kind void;
  #L48026a.  v5:= 0L;
  #L48026e.  v7:= v5 @kind wide;
  #L480270.  v9:= lcmp(v7, v3);
  #L480274.  if v9 == 0 then goto L4802e0;
  #L480278.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L48027c.  if v9 == 0 then goto L480282;
  #L480280.  return @kind void;
  #L480282.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L480288.  v9:= temp @kind object;
  #L48028a.  v10:= "The iterator returned a null value" @kind object;
  #L48028e.  call temp:= `requireNonNull`(v9, v10) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L480294.  v9:= temp @kind object;
  #L480296.  call `onNext`(v0, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48029c.  v9:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L4802a0.  if v9 == 0 then goto L4802a6;
  #L4802a4.  return @kind void;
  #L4802a6.  v9:= 1L;
  #L4802aa.  v7:= v7 + v9 @kind long;
  #L4802ac.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4802b2.  v9:= temp;
  #L4802b4.  if v9 != 0 then goto L480270;
  #L4802b8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4802be.  return @kind void;
  #L4802c0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4802c2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4802c8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4802ce.  return @kind void;
  #L4802d0.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4802d2.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4802d8.  call `onError`(v0, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4802de.  return @kind void;
  #L4802e0.  v3:= lcmp(v7, v5);
  #L4802e4.  if v3 == 0 then goto L4802f2;
  #L4802e8.  v3:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L4802ec.  call temp:= `produced`(v3, v7) @signature `Lio/reactivex/internal/util/BackpressureHelper;.produced:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L4802f2.  v2:= -v2 @kind int;
  #L4802f4.  call temp:= `addAndGet`(v11, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L4802fa.  v2:= temp;
  #L4802fc.  if v2 != 0 then goto L480302;
  #L480300.  return @kind void;
  #L480302.  if v1 != 0 then goto L480240;
  #L480306.  v1:= v11.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L48030a.  goto L480240;
  catch `java.lang.Throwable` @[L480282..L480296] goto L4802d0;
  catch `java.lang.Throwable` @[L4802ac..L4802b4] goto L4802c0;
}
procedure `void` `e`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `java.util.Iterator` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.e:(Lorg/reactivestreams/Subscriber;Ljava/util/Iterator;)V` @AccessFlag  {
    temp;
    v0;

  #L480424.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L480428.  if v0 == 0 then goto L48042e;
  #L48042c.  return @kind void;
  #L48042e.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L480434.  v0:= temp @kind object;
  #L480436.  call `onNext`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L48043c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.f` @type ^`boolean` @kind boolean;
  #L480440.  if v0 == 0 then goto L480446;
  #L480444.  return @kind void;
  #L480446.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L48044c.  v0:= temp;
  #L48044e.  if v0 != 0 then goto L480424;
  #L480452.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L480458.  return @kind void;
  #L48045a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48045c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L480462.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480468.  return @kind void;
  #L48046a.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L48046c.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L480472.  call `onError`(v2, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480478.  return @kind void;
  catch `java.lang.Throwable` @[L48042e..L480436] goto L48046a;
  catch `java.lang.Throwable` @[L480446..L48044e] goto L48045a;
}
procedure `boolean` `isEmpty`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480110.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L480114.  if v0 != 0 then goto L48011c;
  #L480118.  v0:= 1I;
  #L48011a.  goto L48011e;
  #L48011c.  v0:= 0I;
  #L48011e.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480334.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L480338.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L48033c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L480340.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480346.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480358.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48035c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L480362.  v0:= temp;
  #L480364.  if v0 == 0 then goto L480376;
  #L480368.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L48036c.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L480370.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L480376.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480388.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L48038c.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L480392.  v2:= temp @kind object;
  #L480394.  v2:= (`java.lang.Iterable`) v2 @kind object;
  #L480398.  call temp:= `iterator`(v2) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L48039e.  v2:= temp @kind object;
  #L4803a0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4803a6.  v0:= temp;
  #L4803a8.  if v0 != 0 then goto L4803b8;
  #L4803ac.  v2:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4803b0.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4803b6.  return @kind void;
  #L4803b8.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v2 @kind object;
  #L4803bc.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L4803c2.  return @kind void;
  #L4803c4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4803c6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4803cc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4803d0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4803d6.  return @kind void;
  catch `java.lang.Throwable` @[L480388..L4803a8] goto L4803c4;
}
procedure `java.lang.Object` `poll`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L480154.  v0:= v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` @kind object;
  #L480158.  v1:= 0I;
  #L48015a.  if v0 == 0 then goto L480184;
  #L48015e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L480164.  v2:= temp @kind object;
  #L480166.  v3:= "The iterator returned a null value" @kind object;
  #L48016a.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L480170.  v2:= temp @kind object;
  #L480172.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L480178.  v0:= temp;
  #L48017a.  if v0 != 0 then goto L480182;
  #L48017e.  v4.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.e` @type ^`java.util.Iterator` := v1 @kind object;
  #L480182.  return v2 @kind object;
  #L480184.  return v1 @kind object;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4803f4.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L4803fa.  v0:= temp;
  #L4803fc.  if v0 == 0 then goto L480410;
  #L480400.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.c` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L480404.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L48040a.  call `drain`(v1) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.drain:()V` @kind virtual;
  #L480410.  return @kind void;
}
procedure `int` `requestFusion`(`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapIterableFlowable$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480130.  v0:= 2I;
  #L480132.  v2:= v2 ^& v0 @kind int;
  #L480134.  if v2 == 0 then goto L480140;
  #L480138.  v2:= 1I;
  #L48013a.  v1.`io.reactivex.internal.operators.single.SingleFlatMapIterableFlowable$a.g` @type ^`boolean` := v2 @kind boolean;
  #L48013e.  return v0;
  #L480140.  v2:= 0I;
  #L480142.  return v2;
}
