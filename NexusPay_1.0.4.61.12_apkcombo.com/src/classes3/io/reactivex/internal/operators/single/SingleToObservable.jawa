record `io.reactivex.internal.operators.single.SingleToObservable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Observable` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleToObservable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToObservable` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L482284.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L48228a.  v0.`io.reactivex.internal.operators.single.SingleToObservable.a` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L48228e.  return @kind void;
}
procedure `io.reactivex.SingleObserver` `create`(`io.reactivex.Observer` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.create:(Lio/reactivex/Observer;)Lio/reactivex/SingleObserver;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L482268.  v0:= new `io.reactivex.internal.operators.single.SingleToObservable$a`;
  #L48226c.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/single/SingleToObservable$a;.<init>:(Lio/reactivex/Observer;)V` @kind direct;
  #L482272.  return v0 @kind object;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleToObservable` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4822a0.  v0:= v1.`io.reactivex.internal.operators.single.SingleToObservable.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L4822a4.  call temp:= `create`(v2) @signature `Lio/reactivex/internal/operators/single/SingleToObservable;.create:(Lio/reactivex/Observer;)Lio/reactivex/SingleObserver;` @kind static;
  #L4822aa.  v2:= temp @kind object;
  #L4822ac.  call `subscribe`(v0, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L4822b2.  return @kind void;
}
