record `io.reactivex.internal.operators.single.SingleHide` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleHide.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleHide` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L480eb4.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L480eba.  v0.`io.reactivex.internal.operators.single.SingleHide.a` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L480ebe.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleHide` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleHide;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L480ed0.  v0:= v2.`io.reactivex.internal.operators.single.SingleHide.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L480ed4.  v1:= new `io.reactivex.internal.operators.single.SingleHide$a`;
  #L480ed8.  call `<init>`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleHide$a;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L480ede.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L480ee4.  return @kind void;
}
