record `io.reactivex.internal.operators.single.SingleTakeUntil` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleTakeUntil.a` @AccessFlag FINAL;
  `org.reactivestreams.Publisher` `io.reactivex.internal.operators.single.SingleTakeUntil.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil` v0 @kind this, `io.reactivex.SingleSource` v1 @kind object, `org.reactivestreams.Publisher` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil;.<init>:(Lio/reactivex/SingleSource;Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L481cc8.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L481cce.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil.a` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L481cd2.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil.b` @type ^`org.reactivestreams.Publisher` := v2 @kind object;
  #L481cd6.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleTakeUntil` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L481ce8.  v0:= new `io.reactivex.internal.operators.single.SingleTakeUntil$a`;
  #L481cec.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L481cf2.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L481cf8.  v3:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil.b` @type ^`org.reactivestreams.Publisher` @kind object;
  #L481cfc.  v1:= v0.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L481d00.  call `subscribe`(v3, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L481d06.  v3:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L481d0a.  call `subscribe`(v3, v0) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L481d10.  return @kind void;
}
