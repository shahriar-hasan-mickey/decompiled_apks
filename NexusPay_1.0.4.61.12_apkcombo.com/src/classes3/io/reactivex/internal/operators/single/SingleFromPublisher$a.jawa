record `io.reactivex.internal.operators.single.SingleFromPublisher$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L480c14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L480c1a.  v0.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L480c1e.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480c30.  v0:= 1I;
  #L480c32.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @type ^`boolean` := v0 @kind boolean;
  #L480c36.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L480c3a.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L480c40.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480bfc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.e` @type ^`boolean` @kind boolean;
  #L480c00.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v3 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L480c54.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L480c58.  if v0 == 0 then goto L480c5e;
  #L480c5c.  return @kind void;
  #L480c5e.  v0:= 1I;
  #L480c60.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v0 @kind boolean;
  #L480c64.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` @kind object;
  #L480c68.  v1:= 0I;
  #L480c6a.  v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v1 @kind object;
  #L480c6e.  if v0 != 0 then goto L480c8c;
  #L480c72.  v0:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L480c76.  v1:= new `java.util.NoSuchElementException`;
  #L480c7a.  v2:= "The source Publisher is empty" @kind object;
  #L480c7e.  call `<init>`(v1, v2) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L480c84.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480c8a.  goto L480c96;
  #L480c8c.  v1:= v3.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L480c90.  call `onSuccess`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L480c96.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480ca8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L480cac.  if v0 == 0 then goto L480cb8;
  #L480cb0.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L480cb6.  return @kind void;
  #L480cb8.  v0:= 1I;
  #L480cba.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v0 @kind boolean;
  #L480cbe.  v0:= 0I;
  #L480cc0.  v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v0 @kind object;
  #L480cc4.  v0:= v1.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L480cc8.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480cce.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L480ce0.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` @kind boolean;
  #L480ce4.  if v0 == 0 then goto L480cea;
  #L480ce8.  return @kind void;
  #L480cea.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` @kind object;
  #L480cee.  if v0 == 0 then goto L480d22;
  #L480cf2.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L480cf6.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L480cfc.  v3:= 1I;
  #L480cfe.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.d` @type ^`boolean` := v3 @kind boolean;
  #L480d02.  v3:= 0I;
  #L480d04.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L480d08.  v3:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L480d0c.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L480d10.  v1:= "Too many elements in the Publisher" @kind object;
  #L480d14.  call `<init>`(v0, v1) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L480d1a.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480d20.  goto L480d26;
  #L480d22.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.c` @type ^`java.lang.Object` := v3 @kind object;
  #L480d26.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFromPublisher$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L480d38.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L480d3c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L480d42.  v0:= temp;
  #L480d44.  if v0 == 0 then goto L480d66;
  #L480d48.  v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.b` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L480d4c.  v0:= v2.`io.reactivex.internal.operators.single.SingleFromPublisher$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L480d50.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L480d56.  v0:= 9223372036854775807L;
  #L480d60.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L480d66.  return @kind void;
}
