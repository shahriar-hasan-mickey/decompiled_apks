record `io.reactivex.internal.operators.single.SingleCache` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleCache.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.single.SingleCache.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleCache.c` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.internal.operators.single.SingleCache.d` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.single.SingleCache.e` @AccessFlag ;
}
global `io.reactivex.internal.operators.single.SingleCache$a`[] `@@io.reactivex.internal.operators.single.SingleCache.f` @AccessFlag STATIC_FINAL;
global `io.reactivex.internal.operators.single.SingleCache$a`[] `@@io.reactivex.internal.operators.single.SingleCache.g` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/internal/operators/single/SingleCache;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L47e1e4.  v0:= 0I;
  #L47e1e6.  v1:= new `io.reactivex.internal.operators.single.SingleCache$a`[v0];
  #L47e1ea.  `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] := v1 @kind object;
  #L47e1ee.  v0:= new `io.reactivex.internal.operators.single.SingleCache$a`[v0];
  #L47e1f2.  `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] := v0 @kind object;
  #L47e1f6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCache` v1 @kind this, `io.reactivex.SingleSource` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.<init>:(Lio/reactivex/SingleSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L47e208.  call `<init>`(v1) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L47e20e.  v1.`io.reactivex.internal.operators.single.SingleCache.a` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L47e212.  v2:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47e216.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47e21c.  v1.`io.reactivex.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` := v2 @kind object;
  #L47e220.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47e224.  v0:= `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L47e228.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L47e22e.  v1.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L47e232.  return @kind void;
}
procedure `boolean` `c`(`io.reactivex.internal.operators.single.SingleCache` v4 @kind this, `io.reactivex.internal.operators.single.SingleCache$a` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.c:(Lio/reactivex/internal/operators/single/SingleCache$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47e190.  v0:= v4.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e194.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47e19a.  v0:= temp @kind object;
  #L47e19c.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L47e1a0.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L47e1a4.  v2:= 0I;
  #L47e1a6.  if v0 != v1 then goto L47e1ac;
  #L47e1aa.  return v2;
  #L47e1ac.  v1:= length @variable v0;
  #L47e1ae.  v3:= v1 + 1;
  #L47e1b2.  v3:= new `io.reactivex.internal.operators.single.SingleCache$a`[v3];
  #L47e1b6.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47e1bc.  v3[v1]:= v5 @kind object;
  #L47e1c0.  v1:= v4.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e1c4.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47e1ca.  v0:= temp;
  #L47e1cc.  if v0 == 0 then goto L47e190;
  #L47e1d0.  v5:= 1I;
  #L47e1d2.  return v5;
}
procedure `void` `d`(`io.reactivex.internal.operators.single.SingleCache` v6 @kind this, `io.reactivex.internal.operators.single.SingleCache$a` v7 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.d:(Lio/reactivex/internal/operators/single/SingleCache$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47e300.  v0:= v6.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e304.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47e30a.  v0:= temp @kind object;
  #L47e30c.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L47e310.  v1:= length @variable v0;
  #L47e312.  if v1 != 0 then goto L47e318;
  #L47e316.  return @kind void;
  #L47e318.  v2:= -1I;
  #L47e31a.  v3:= 0I;
  #L47e31c.  v4:= 0I;
  #L47e31e.  if v4 >= v1 then goto L47e334;
  #L47e322.  v5:= v0[v4] @kind object;
  #L47e326.  if v5 != v7 then goto L47e32e;
  #L47e32a.  v2:= v4;
  #L47e32c.  goto L47e334;
  #L47e32e.  v4:= v4 + 1;
  #L47e332.  goto L47e31e;
  #L47e334.  if v2 >= 0 then goto L47e33a;
  #L47e338.  return @kind void;
  #L47e33a.  v4:= 1I;
  #L47e33c.  if v1 != v4 then goto L47e346;
  #L47e340.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.f` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L47e344.  goto L47e364;
  #L47e346.  v5:= v1 + -1;
  #L47e34a.  v5:= new `io.reactivex.internal.operators.single.SingleCache$a`[v5];
  #L47e34e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47e354.  v3:= v2 + 1;
  #L47e358.  v1:= v1 - v2 @kind int;
  #L47e35a.  v1:= v1 - v4 @kind int;
  #L47e35c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L47e362.  v1:= v5 @kind object;
  #L47e364.  v2:= v6.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e368.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47e36e.  v0:= temp;
  #L47e370.  if v0 == 0 then goto L47e300;
  #L47e374.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47e244.  v5.`io.reactivex.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` := v6 @kind object;
  #L47e248.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e24c.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L47e250.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47e256.  v0:= temp @kind object;
  #L47e258.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L47e25c.  v1:= length @variable v0;
  #L47e25e.  v2:= 0I;
  #L47e260.  if v2 >= v1 then goto L47e284;
  #L47e264.  v3:= v0[v2] @kind object;
  #L47e268.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L47e26e.  v4:= temp;
  #L47e270.  if v4 != 0 then goto L47e27e;
  #L47e274.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e278.  call `onError`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47e27e.  v2:= v2 + 1;
  #L47e282.  goto L47e260;
  #L47e284.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleCache` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L47e298.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleCache` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47e2ac.  v5.`io.reactivex.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` := v6 @kind object;
  #L47e2b0.  v0:= v5.`io.reactivex.internal.operators.single.SingleCache.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47e2b4.  v1:= `@@io.reactivex.internal.operators.single.SingleCache.g` @type ^`io.reactivex.internal.operators.single.SingleCache$a`[] @kind object;
  #L47e2b8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L47e2be.  v0:= temp @kind object;
  #L47e2c0.  v0:= (`io.reactivex.internal.operators.single.SingleCache$a`[]) v0 @kind object;
  #L47e2c4.  v1:= length @variable v0;
  #L47e2c6.  v2:= 0I;
  #L47e2c8.  if v2 >= v1 then goto L47e2ec;
  #L47e2cc.  v3:= v0[v2] @kind object;
  #L47e2d0.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L47e2d6.  v4:= temp;
  #L47e2d8.  if v4 != 0 then goto L47e2e6;
  #L47e2dc.  v3:= v3.`io.reactivex.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L47e2e0.  call `onSuccess`(v3, v6) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L47e2e6.  v2:= v2 + 1;
  #L47e2ea.  goto L47e2c8;
  #L47e2ec.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleCache` v2 @kind this, `io.reactivex.SingleObserver` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L47e388.  v0:= new `io.reactivex.internal.operators.single.SingleCache$a`;
  #L47e38c.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/internal/operators/single/SingleCache;)V` @kind direct;
  #L47e392.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L47e398.  call temp:= `c`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.c:(Lio/reactivex/internal/operators/single/SingleCache$a;)Z` @kind virtual;
  #L47e39e.  v1:= temp;
  #L47e3a0.  if v1 == 0 then goto L47e3d2;
  #L47e3a4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @kind virtual;
  #L47e3aa.  v3:= temp;
  #L47e3ac.  if v3 == 0 then goto L47e3b6;
  #L47e3b0.  call `d`(v2, v0) @signature `Lio/reactivex/internal/operators/single/SingleCache;.d:(Lio/reactivex/internal/operators/single/SingleCache$a;)V` @kind virtual;
  #L47e3b6.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.b` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47e3ba.  call temp:= `getAndIncrement`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47e3c0.  v3:= temp;
  #L47e3c2.  if v3 != 0 then goto L47e3d0;
  #L47e3c6.  v3:= v2.`io.reactivex.internal.operators.single.SingleCache.a` @type ^`io.reactivex.SingleSource` @kind object;
  #L47e3ca.  call `subscribe`(v3, v2) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L47e3d0.  return @kind void;
  #L47e3d2.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.e` @type ^`java.lang.Throwable` @kind object;
  #L47e3d6.  if v0 == 0 then goto L47e3e2;
  #L47e3da.  call `onError`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47e3e0.  goto L47e3ec;
  #L47e3e2.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache.d` @type ^`java.lang.Object` @kind object;
  #L47e3e6.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L47e3ec.  return @kind void;
}
