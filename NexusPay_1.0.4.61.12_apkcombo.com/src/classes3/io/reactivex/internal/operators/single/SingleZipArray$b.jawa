record `io.reactivex.internal.operators.single.SingleZipArray$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleZipArray$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleZipArray$b.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleZipArray$c`[] `io.reactivex.internal.operators.single.SingleZipArray$b.c` @AccessFlag FINAL;
  `java.lang.Object`[] `io.reactivex.internal.operators.single.SingleZipArray$b.d` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleZipArray$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `io.reactivex.SingleObserver` v2 @kind object, `int` v3 , `io.reactivex.functions.Function` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L48278c.  call `<init>`(v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:(I)V` @kind direct;
  #L482792.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` := v2 @kind object;
  #L482796.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.functions.Function` := v4 @kind object;
  #L48279a.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$c`[v3];
  #L48279e.  v4:= 0I;
  #L4827a0.  if v4 >= v3 then goto L4827b8;
  #L4827a4.  v0:= new `io.reactivex.internal.operators.single.SingleZipArray$c`;
  #L4827a8.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray$b;I)V` @kind direct;
  #L4827ae.  v2[v4]:= v0 @kind object;
  #L4827b2.  v4:= v4 + 1;
  #L4827b6.  goto L4827a0;
  #L4827b8.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] := v2 @kind object;
  #L4827bc.  v2:= new `java.lang.Object`[v3];
  #L4827c0.  v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] := v2 @kind object;
  #L4827c4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleZipArray$b` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L482814.  v0:= v4.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L482818.  v1:= length @variable v0;
  #L48281a.  v2:= 0I;
  #L48281c.  if v2 >= v5 then goto L482830;
  #L482820.  v3:= v0[v2] @kind object;
  #L482824.  call `a`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L48282a.  v2:= v2 + 1;
  #L48282e.  goto L48281c;
  #L482830.  v5:= v5 + 1;
  #L482834.  if v5 >= v1 then goto L482844;
  #L482838.  v2:= v0[v5] @kind object;
  #L48283c.  call `a`(v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L482842.  goto L482830;
  #L482844.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Throwable` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.b:(Ljava/lang/Throwable;I)V` @AccessFlag  {
    temp;
    v0;

  #L482858.  v0:= 0I;
  #L48285a.  call temp:= `getAndSet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L482860.  v0:= temp;
  #L482862.  if v0 <= 0 then goto L482878;
  #L482866.  call `a`(v1, v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.a:(I)V` @kind virtual;
  #L48286c.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L482870.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L482876.  goto L48287e;
  #L482878.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L48287e.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.c:(Ljava/lang/Object;I)V` @AccessFlag  {
    temp;
    v0;

  #L482890.  v0:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L482894.  v0[v3]:= v2 @kind object;
  #L482898.  call temp:= `decrementAndGet`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L48289e.  v2:= temp;
  #L4828a0.  if v2 != 0 then goto L4828de;
  #L4828a4.  v2:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4828a8.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.d` @type ^`java.lang.Object`[] @kind object;
  #L4828ac.  call temp:= `apply`(v2, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L4828b2.  v2:= temp @kind object;
  #L4828b4.  v3:= "The zipper returned a null value" @kind object;
  #L4828b8.  call temp:= `requireNonNull`(v2, v3) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L4828be.  v2:= temp @kind object;
  #L4828c0.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4828c4.  call `onSuccess`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4828ca.  goto L4828de;
  #L4828cc.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4828ce.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4828d4.  v3:= v1.`io.reactivex.internal.operators.single.SingleZipArray$b.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4828d8.  call `onError`(v3, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4828de.  return @kind void;
  catch `java.lang.Throwable` @[L4828a4..L4828c0] goto L4828cc;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleZipArray$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4827d8.  v0:= 0I;
  #L4827da.  call temp:= `getAndSet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndSet:(I)I` @kind virtual;
  #L4827e0.  v1:= temp;
  #L4827e2.  if v1 <= 0 then goto L482800;
  #L4827e6.  v1:= v4.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L4827ea.  v2:= length @variable v1;
  #L4827ec.  if v0 >= v2 then goto L482800;
  #L4827f0.  v3:= v1[v0] @kind object;
  #L4827f4.  call `a`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$c;.a:()V` @kind virtual;
  #L4827fa.  v0:= v0 + 1;
  #L4827fe.  goto L4827ec;
  #L482800.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleZipArray$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482768.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L48276e.  v0:= temp;
  #L482770.  if v0 > 0 then goto L482778;
  #L482774.  v0:= 1I;
  #L482776.  goto L48277a;
  #L482778.  v0:= 0I;
  #L48277a.  return v0;
}
