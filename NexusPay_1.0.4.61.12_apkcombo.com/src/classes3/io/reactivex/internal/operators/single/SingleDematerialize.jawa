record `io.reactivex.internal.operators.single.SingleDematerialize` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class {
  `io.reactivex.Single` `io.reactivex.internal.operators.single.SingleDematerialize.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleDematerialize.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleDematerialize` v0 @kind this, `io.reactivex.Single` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDematerialize;.<init>:(Lio/reactivex/Single;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47f008.  call `<init>`(v0) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L47f00e.  v0.`io.reactivex.internal.operators.single.SingleDematerialize.a` @type ^`io.reactivex.Single` := v1 @kind object;
  #L47f012.  v0.`io.reactivex.internal.operators.single.SingleDematerialize.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L47f016.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleDematerialize` v3 @kind this, `io.reactivex.MaybeObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleDematerialize;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L47f028.  v0:= v3.`io.reactivex.internal.operators.single.SingleDematerialize.a` @type ^`io.reactivex.Single` @kind object;
  #L47f02c.  v1:= new `io.reactivex.internal.operators.single.SingleDematerialize$a`;
  #L47f030.  v2:= v3.`io.reactivex.internal.operators.single.SingleDematerialize.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47f034.  call `<init>`(v1, v4, v2) @signature `Lio/reactivex/internal/operators/single/SingleDematerialize$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L47f03a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/Single;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind virtual;
  #L47f040.  return @kind void;
}
