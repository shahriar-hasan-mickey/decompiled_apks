record `io.reactivex.internal.operators.single.SingleTakeUntil$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTakeUntil$b` `io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTakeUntil$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.<init>:(Lio/reactivex/SingleObserver;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L481a8c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481a92.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L481a96.  v1:= new `io.reactivex.internal.operators.single.SingleTakeUntil$b`;
  #L481a9a.  call `<init>`(v1, v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.<init>:(Lio/reactivex/internal/operators/single/SingleTakeUntil$a;)V` @kind direct;
  #L481aa0.  v0.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` := v1 @kind object;
  #L481aa4.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L481b8c.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481b92.  v0:= temp @kind object;
  #L481b94.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481b98.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481b9c.  if v0 == v1 then goto L481bca;
  #L481ba0.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L481ba6.  v0:= temp @kind object;
  #L481ba8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481bac.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481bb0.  if v0 == v1 then goto L481bca;
  #L481bb4.  if v0 == 0 then goto L481bbe;
  #L481bb8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L481bbe.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481bc2.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L481bc8.  return @kind void;
  #L481bca.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L481bd0.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481ab8.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481abe.  v0:= v1.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L481ac2.  call `a`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L481ac8.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481a64.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481a6a.  v0:= temp @kind object;
  #L481a6c.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481a70.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L481a76.  v0:= temp;
  #L481a78.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481adc.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L481ae0.  call `a`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L481ae6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481aec.  v0:= temp @kind object;
  #L481aee.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481af2.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481af6.  if v0 == v1 then goto L481b1a;
  #L481afa.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L481b00.  v0:= temp @kind object;
  #L481b02.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481b06.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481b0a.  if v0 == v1 then goto L481b1a;
  #L481b0e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481b12.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L481b18.  return @kind void;
  #L481b1a.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L481b20.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L481b34.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L481b3a.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTakeUntil$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481b4c.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.b` @type ^`io.reactivex.internal.operators.single.SingleTakeUntil$b` @kind object;
  #L481b50.  call `a`(v0) @signature `Lio/reactivex/internal/operators/single/SingleTakeUntil$b;.a:()V` @kind virtual;
  #L481b56.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481b5a.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L481b60.  v0:= temp @kind object;
  #L481b62.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481b66.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481b6a.  if v0 == v1 then goto L481b78;
  #L481b6e.  v0:= v2.`io.reactivex.internal.operators.single.SingleTakeUntil$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481b72.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L481b78.  return @kind void;
}
