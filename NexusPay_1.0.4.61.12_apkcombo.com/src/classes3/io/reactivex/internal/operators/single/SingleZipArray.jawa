record `io.reactivex.internal.operators.single.SingleZipArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `io.reactivex.SingleSource`[] `io.reactivex.internal.operators.single.SingleZipArray.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleZipArray.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleZipArray` v0 @kind this, `io.reactivex.SingleSource`[] v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray;.<init>:([Lio/reactivex/SingleSource;Lio/reactivex/functions/Function;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48298c.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L482992.  v0.`io.reactivex.internal.operators.single.SingleZipArray.a` @type ^`io.reactivex.SingleSource`[] := v1 @kind object;
  #L482996.  v0.`io.reactivex.internal.operators.single.SingleZipArray.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L48299a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleZipArray` v5 @kind this, `io.reactivex.SingleObserver` v6 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleZipArray;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L4829ac.  v0:= v5.`io.reactivex.internal.operators.single.SingleZipArray.a` @type ^`io.reactivex.SingleSource`[] @kind object;
  #L4829b0.  v1:= length @variable v0;
  #L4829b2.  v2:= 0I;
  #L4829b4.  v3:= 1I;
  #L4829b6.  if v1 != v3 then goto L4829da;
  #L4829ba.  v0:= v0[v2] @kind object;
  #L4829be.  v1:= new `io.reactivex.internal.operators.single.SingleMap$a`;
  #L4829c2.  v2:= new `io.reactivex.internal.operators.single.SingleZipArray$a`;
  #L4829c6.  call `<init>`(v2, v5) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$a;.<init>:(Lio/reactivex/internal/operators/single/SingleZipArray;)V` @kind direct;
  #L4829cc.  call `<init>`(v1, v6, v2) @signature `Lio/reactivex/internal/operators/single/SingleMap$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/functions/Function;)V` @kind direct;
  #L4829d2.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L4829d8.  return @kind void;
  #L4829da.  v3:= new `io.reactivex.internal.operators.single.SingleZipArray$b`;
  #L4829de.  v4:= v5.`io.reactivex.internal.operators.single.SingleZipArray.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L4829e2.  call `<init>`(v3, v6, v1, v4) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.<init>:(Lio/reactivex/SingleObserver;ILio/reactivex/functions/Function;)V` @kind direct;
  #L4829e8.  call `onSubscribe`(v6, v3) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L4829ee.  if v2 >= v1 then goto L482a32;
  #L4829f2.  call temp:= `isDisposed`(v3) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.isDisposed:()Z` @kind virtual;
  #L4829f8.  v6:= temp;
  #L4829fa.  if v6 == 0 then goto L482a00;
  #L4829fe.  return @kind void;
  #L482a00.  v6:= v0[v2] @kind object;
  #L482a04.  if v6 != 0 then goto L482a1e;
  #L482a08.  v6:= new `java.lang.NullPointerException`;
  #L482a0c.  v0:= "One of the sources is null" @kind object;
  #L482a10.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L482a16.  call `b`(v3, v6, v2) @signature `Lio/reactivex/internal/operators/single/SingleZipArray$b;.b:(Ljava/lang/Throwable;I)V` @kind virtual;
  #L482a1c.  return @kind void;
  #L482a1e.  v4:= v3.`io.reactivex.internal.operators.single.SingleZipArray$b.c` @type ^`io.reactivex.internal.operators.single.SingleZipArray$c`[] @kind object;
  #L482a22.  v4:= v4[v2] @kind object;
  #L482a26.  call `subscribe`(v6, v4) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L482a2c.  v2:= v2 + 1;
  #L482a30.  goto L4829ee;
  #L482a32.  return @kind void;
}
