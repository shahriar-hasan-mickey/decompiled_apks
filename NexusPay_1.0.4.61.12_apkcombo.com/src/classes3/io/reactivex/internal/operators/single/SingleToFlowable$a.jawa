record `io.reactivex.internal.operators.single.SingleToFlowable$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class, `io.reactivex.SingleObserver` @kind interface {
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleToFlowable$a.a` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleToFlowable$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleToFlowable$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$a;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4820e8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L4820ee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleToFlowable$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482100.  call `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.cancel:()V` @kind super;
  #L482106.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$a.a` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48210a.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L482110.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleToFlowable$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482124.  v0:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L482128.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48212e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleToFlowable$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482140.  v0:= v1.`io.reactivex.internal.operators.single.SingleToFlowable$a.a` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L482144.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L48214a.  v0:= temp;
  #L48214c.  if v0 == 0 then goto L48215e;
  #L482150.  v1.`io.reactivex.internal.operators.single.SingleToFlowable$a.a` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L482154.  v2:= v1.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L482158.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L48215e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleToFlowable$a` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleToFlowable$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L482170.  call `complete`(v0, v1) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L482176.  return @kind void;
}
