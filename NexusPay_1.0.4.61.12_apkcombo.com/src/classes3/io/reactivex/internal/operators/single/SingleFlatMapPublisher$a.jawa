record `io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicLong` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L480968.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L48096e.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L480972.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L480976.  v1:= new `java.util.concurrent.atomic.AtomicReference`;
  #L48097a.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L480980.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v1 @kind object;
  #L480984.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480998.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48099c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4809a2.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L4809a6.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L4809ac.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4809c0.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4809c4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L4809ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4809dc.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4809e0.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4809e6.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4809f8.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L4809fc.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L480a02.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L480a14.  v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.d` @type ^`io.reactivex.disposables.Disposable` := v1 @kind object;
  #L480a18.  v1:= v0.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L480a1c.  call `onSubscribe`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L480a22.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480a34.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L480a38.  call temp:= `deferredSetOnce`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredSetOnce:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L480a3e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480a50.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L480a54.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L480a5a.  v2:= temp @kind object;
  #L480a5c.  v0:= "the mapper returned a null Publisher" @kind object;
  #L480a60.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L480a66.  v2:= temp @kind object;
  #L480a68.  v2:= (`org.reactivestreams.Publisher`) v2 @kind object;
  #L480a6c.  call `subscribe`(v2, v1) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L480a72.  return @kind void;
  #L480a74.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L480a76.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L480a7c.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L480a80.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480a86.  return @kind void;
  catch `java.lang.Throwable` @[L480a50..L480a6c] goto L480a74;
}
procedure `void` `request`(`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/single/SingleFlatMapPublisher$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L480aa4.  v0:= v1.`io.reactivex.internal.operators.single.SingleFlatMapPublisher$a.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L480aa8.  call `deferredRequest`(v0, v1, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L480aae.  return @kind void;
}
