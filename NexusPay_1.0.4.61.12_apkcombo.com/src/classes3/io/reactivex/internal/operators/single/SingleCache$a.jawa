record `io.reactivex.internal.operators.single.SingleCache$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleCache$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleCache` `io.reactivex.internal.operators.single.SingleCache$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleCache$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleCache$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.internal.operators.single.SingleCache` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/internal/operators/single/SingleCache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47e144.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L47e14a.  v0.`io.reactivex.internal.operators.single.SingleCache$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L47e14e.  v0.`io.reactivex.internal.operators.single.SingleCache$a.b` @type ^`io.reactivex.internal.operators.single.SingleCache` := v2 @kind object;
  #L47e152.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleCache$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47e164.  v0:= 0I;
  #L47e166.  v1:= 1I;
  #L47e168.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L47e16e.  v0:= temp;
  #L47e170.  if v0 == 0 then goto L47e17e;
  #L47e174.  v0:= v2.`io.reactivex.internal.operators.single.SingleCache$a.b` @type ^`io.reactivex.internal.operators.single.SingleCache` @kind object;
  #L47e178.  call `d`(v0, v2) @signature `Lio/reactivex/internal/operators/single/SingleCache;.d:(Lio/reactivex/internal/operators/single/SingleCache$a;)V` @kind virtual;
  #L47e17e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleCache$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleCache$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47e128.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L47e12e.  v0:= temp;
  #L47e130.  return v0;
}
