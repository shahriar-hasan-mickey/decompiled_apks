record `io.reactivex.internal.operators.single.SingleTimeout$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `java.lang.Runnable` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleTimeout$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.single.SingleTimeout$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.operators.single.SingleTimeout$a$a` `io.reactivex.internal.operators.single.SingleTimeout$a.c` @AccessFlag FINAL;
  `io.reactivex.SingleSource` `io.reactivex.internal.operators.single.SingleTimeout$a.d` @AccessFlag ;
  `long` `io.reactivex.internal.operators.single.SingleTimeout$a.e` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.internal.operators.single.SingleTimeout$a.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.single.SingleTimeout$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleTimeout$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.SingleSource` v2 @kind object, `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/SingleSource;JLjava/util/concurrent/TimeUnit;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L481db8.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481dbe.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L481dc2.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.d` @type ^`io.reactivex.SingleSource` := v2 @kind object;
  #L481dc6.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.e` @type ^`long` := v3 @kind wide;
  #L481dca.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.f` @type ^`java.util.concurrent.TimeUnit` := v5 @kind object;
  #L481dce.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L481dd2.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L481dd8.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L481ddc.  if v2 == 0 then goto L481df0;
  #L481de0.  v2:= new `io.reactivex.internal.operators.single.SingleTimeout$a$a`;
  #L481de4.  call `<init>`(v2, v1) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a$a;.<init>:(Lio/reactivex/SingleObserver;)V` @kind direct;
  #L481dea.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.c` @type ^`io.reactivex.internal.operators.single.SingleTimeout$a$a` := v2 @kind object;
  #L481dee.  goto L481df6;
  #L481df0.  v1:= 0I;
  #L481df2.  v0.`io.reactivex.internal.operators.single.SingleTimeout$a.c` @type ^`io.reactivex.internal.operators.single.SingleTimeout$a$a` := v1 @kind object;
  #L481df6.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleTimeout$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481e08.  call temp:= `dispose`(v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481e0e.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481e12.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481e18.  v0:= v1.`io.reactivex.internal.operators.single.SingleTimeout$a.c` @type ^`io.reactivex.internal.operators.single.SingleTimeout$a$a` @kind object;
  #L481e1c.  if v0 == 0 then goto L481e26;
  #L481e20.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481e26.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleTimeout$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L481d90.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481d96.  v0:= temp @kind object;
  #L481d98.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481d9c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L481da2.  v0:= temp;
  #L481da4.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleTimeout$a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481e38.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481e3e.  v0:= temp @kind object;
  #L481e40.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481e44.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481e48.  if v0 == v1 then goto L481e6e;
  #L481e4c.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481e52.  v0:= temp;
  #L481e54.  if v0 == 0 then goto L481e6e;
  #L481e58.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481e5c.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481e62.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481e66.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L481e6c.  goto L481e74;
  #L481e6e.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L481e74.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleTimeout$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L481e88.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L481e8e.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleTimeout$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L481ea0.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481ea6.  v0:= temp @kind object;
  #L481ea8.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481eac.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481eb0.  if v0 == v1 then goto L481ed4;
  #L481eb4.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481eba.  v0:= temp;
  #L481ebc.  if v0 == 0 then goto L481ed4;
  #L481ec0.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$a.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L481ec4.  call temp:= `dispose`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.dispose:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L481eca.  v0:= v2.`io.reactivex.internal.operators.single.SingleTimeout$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481ece.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L481ed4.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleTimeout$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleTimeout$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L481ee8.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L481eee.  v0:= temp @kind object;
  #L481ef0.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L481ef4.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L481ef8.  if v0 == v1 then goto L481f50;
  #L481efc.  call temp:= `compareAndSet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L481f02.  v1:= temp;
  #L481f04.  if v1 == 0 then goto L481f50;
  #L481f08.  if v0 == 0 then goto L481f12;
  #L481f0c.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L481f12.  v0:= v5.`io.reactivex.internal.operators.single.SingleTimeout$a.d` @type ^`io.reactivex.SingleSource` @kind object;
  #L481f16.  if v0 != 0 then goto L481f40;
  #L481f1a.  v0:= v5.`io.reactivex.internal.operators.single.SingleTimeout$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L481f1e.  v1:= new `java.util.concurrent.TimeoutException`;
  #L481f22.  v2:= v5.`io.reactivex.internal.operators.single.SingleTimeout$a.e` @type ^`long` @kind wide;
  #L481f26.  v4:= v5.`io.reactivex.internal.operators.single.SingleTimeout$a.f` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L481f2a.  call temp:= `timeoutMessage`(v2, v4) @signature `Lio/reactivex/internal/util/ExceptionHelper;.timeoutMessage:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/String;` @kind static;
  #L481f30.  v2:= temp @kind object;
  #L481f32.  call `<init>`(v1, v2) @signature `Ljava/util/concurrent/TimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L481f38.  call `onError`(v0, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L481f3e.  goto L481f50;
  #L481f40.  v1:= 0I;
  #L481f42.  v5.`io.reactivex.internal.operators.single.SingleTimeout$a.d` @type ^`io.reactivex.SingleSource` := v1 @kind object;
  #L481f46.  v1:= v5.`io.reactivex.internal.operators.single.SingleTimeout$a.c` @type ^`io.reactivex.internal.operators.single.SingleTimeout$a$a` @kind object;
  #L481f4a.  call `subscribe`(v0, v1) @signature `Lio/reactivex/SingleSource;.subscribe:(Lio/reactivex/SingleObserver;)V` @kind interface;
  #L481f50.  return @kind void;
}
