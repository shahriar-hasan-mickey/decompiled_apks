record `io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface, `java.lang.Runnable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.a` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.b` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.c` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `io.reactivex.Scheduler` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.<init>:(Lio/reactivex/SingleObserver;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4822ec.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L4822f2.  v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L4822f6.  v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L4822fa.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48230c.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L482310.  call temp:= `getAndSet`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L482316.  v0:= temp @kind object;
  #L482318.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L48231c.  v1:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L482320.  if v0 == v1 then goto L482332;
  #L482324.  v2.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L482328.  v0:= v2.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.b` @type ^`io.reactivex.Scheduler` @kind object;
  #L48232c.  call temp:= `scheduleDirect`(v0, v2) @signature `Lio/reactivex/Scheduler;.scheduleDirect:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L482332.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4822c4.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L4822ca.  v0:= temp @kind object;
  #L4822cc.  v0:= (`io.reactivex.disposables.Disposable`) v0 @kind object;
  #L4822d0.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.isDisposed:(Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L4822d6.  v0:= temp;
  #L4822d8.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482344.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L482348.  call `onError`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48234e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v0 @kind this, `io.reactivex.disposables.Disposable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;

  #L482360.  call temp:= `setOnce`(v0, v1) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L482366.  v1:= temp;
  #L482368.  if v1 == 0 then goto L482376;
  #L48236c.  v1:= v0.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L482370.  call `onSubscribe`(v1, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L482376.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482388.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L48238c.  call `onSuccess`(v0, v2) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L482392.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUnsubscribeOn$a;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4823a4.  v0:= v1.`io.reactivex.internal.operators.single.SingleUnsubscribeOn$a.c` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L4823a8.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L4823ae.  return @kind void;
}
