record `io.reactivex.internal.operators.single.SingleFromCallable` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Single` @kind class {
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.single.SingleFromCallable.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleFromCallable` v0 @kind this, `java.util.concurrent.Callable` v1 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromCallable;.<init>:(Ljava/util/concurrent/Callable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L480b58.  call `<init>`(v0) @signature `Lio/reactivex/Single;.<init>:()V` @kind direct;
  #L480b5e.  v0.`io.reactivex.internal.operators.single.SingleFromCallable.a` @type ^`java.util.concurrent.Callable` := v1 @kind object;
  #L480b62.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.single.SingleFromCallable` v3 @kind this, `io.reactivex.SingleObserver` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleFromCallable;.subscribeActual:(Lio/reactivex/SingleObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L480b74.  call temp:= `empty`() @signature `Lio/reactivex/disposables/Disposables;.empty:()Lio/reactivex/disposables/Disposable;` @kind static;
  #L480b7a.  v0:= temp @kind object;
  #L480b7c.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L480b82.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L480b88.  v1:= temp;
  #L480b8a.  if v1 == 0 then goto L480b90;
  #L480b8e.  return @kind void;
  #L480b90.  v1:= v3.`io.reactivex.internal.operators.single.SingleFromCallable.a` @type ^`java.util.concurrent.Callable` @kind object;
  #L480b94.  call temp:= `call`(v1) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L480b9a.  v1:= temp @kind object;
  #L480b9c.  v2:= "The callable returned a null value" @kind object;
  #L480ba0.  call temp:= `requireNonNull`(v1, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L480ba6.  v1:= temp @kind object;
  #L480ba8.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L480bae.  v0:= temp;
  #L480bb0.  if v0 != 0 then goto L480bba;
  #L480bb4.  call `onSuccess`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L480bba.  return @kind void;
  #L480bbc.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L480bbe.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L480bc4.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L480bca.  v0:= temp;
  #L480bcc.  if v0 != 0 then goto L480bd8;
  #L480bd0.  call `onError`(v4, v1) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L480bd6.  goto L480bde;
  #L480bd8.  call `onError`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L480bde.  return @kind void;
  catch `java.lang.Throwable` @[L480b90..L480ba8] goto L480bbc;
}
