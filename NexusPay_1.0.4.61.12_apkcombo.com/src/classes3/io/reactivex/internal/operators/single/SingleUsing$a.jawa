record `io.reactivex.internal.operators.single.SingleUsing$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.SingleObserver` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.SingleObserver` `io.reactivex.internal.operators.single.SingleUsing$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.single.SingleUsing$a.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.single.SingleUsing$a.c` @AccessFlag FINAL;
  `io.reactivex.disposables.Disposable` `io.reactivex.internal.operators.single.SingleUsing$a.d` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.single.SingleUsing$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.single.SingleUsing$a` v0 @kind this, `io.reactivex.SingleObserver` v1 @kind object, `java.lang.Object` v2 @kind object, `boolean` v3 , `io.reactivex.functions.Consumer` v4 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.<init>:(Lio/reactivex/SingleObserver;Ljava/lang/Object;ZLio/reactivex/functions/Consumer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L48242c.  call `<init>`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L482432.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` := v1 @kind object;
  #L482436.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` := v3 @kind boolean;
  #L48243a.  v0.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` := v4 @kind object;
  #L48243e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.single.SingleUsing$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L48247c.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L482482.  v0:= temp @kind object;
  #L482484.  if v0 == v2 then goto L4824a2;
  #L482488.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L48248c.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L482492.  goto L4824a2;
  #L482494.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L482496.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L48249c.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L4824a2.  return @kind void;
  catch `java.lang.Throwable` @[L482488..L482492] goto L482494;
}
procedure `void` `dispose`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482450.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L482454.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L48245a.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L48245e.  v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L482462.  call `a`(v1) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L482468.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48240c.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L482410.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/disposables/Disposable;.isDisposed:()Z` @kind interface;
  #L482416.  v0:= temp;
  #L482418.  return v0;
}
procedure `void` `onError`(`io.reactivex.internal.operators.single.SingleUsing$a` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4824c0.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L4824c4.  v4.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L4824c8.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L4824cc.  if v0 == 0 then goto L482512;
  #L4824d0.  call temp:= `getAndSet`(v4, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L4824d6.  v0:= temp @kind object;
  #L4824d8.  if v0 == v4 then goto L482510;
  #L4824dc.  v1:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L4824e0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L4824e6.  goto L482512;
  #L4824e8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4824ea.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4824f0.  v1:= new `io.reactivex.exceptions.CompositeException`;
  #L4824f4.  v2:= 2I;
  #L4824f6.  v2:= new `java.lang.Throwable`[v2];
  #L4824fa.  v3:= 0I;
  #L4824fc.  v2[v3]:= v5 @kind object;
  #L482500.  v5:= 1I;
  #L482502.  v2[v5]:= v0 @kind object;
  #L482506.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L48250c.  v5:= v1 @kind object;
  #L48250e.  goto L482512;
  #L482510.  return @kind void;
  #L482512.  v0:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L482516.  call `onError`(v0, v5) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L48251c.  v5:= v4.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L482520.  if v5 != 0 then goto L48252a;
  #L482524.  call `a`(v4) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L48252a.  return @kind void;
  catch `java.lang.Throwable` @[L4824dc..L4824e6] goto L4824e8;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.single.SingleUsing$a` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L482548.  v0:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48254c.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/disposables/DisposableHelper;.validate:(Lio/reactivex/disposables/Disposable;Lio/reactivex/disposables/Disposable;)Z` @kind static;
  #L482552.  v0:= temp;
  #L482554.  if v0 == 0 then goto L482566;
  #L482558.  v1.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v2 @kind object;
  #L48255c.  v2:= v1.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L482560.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/SingleObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L482566.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.internal.operators.single.SingleUsing$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L482578.  v0:= `@@io.reactivex.internal.disposables.DisposableHelper.DISPOSED` @type ^`io.reactivex.internal.disposables.DisposableHelper` @kind object;
  #L48257c.  v2.`io.reactivex.internal.operators.single.SingleUsing$a.d` @type ^`io.reactivex.disposables.Disposable` := v0 @kind object;
  #L482580.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L482584.  if v0 == 0 then goto L4825b4;
  #L482588.  call temp:= `getAndSet`(v2, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L48258e.  v0:= temp @kind object;
  #L482590.  if v0 == v2 then goto L4825b2;
  #L482594.  v1:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L482598.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L48259e.  goto L4825b4;
  #L4825a0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4825a2.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L4825a8.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4825ac.  call `onError`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L4825b2.  return @kind void;
  #L4825b4.  v0:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.a` @type ^`io.reactivex.SingleObserver` @kind object;
  #L4825b8.  call `onSuccess`(v0, v3) @signature `Lio/reactivex/SingleObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L4825be.  v3:= v2.`io.reactivex.internal.operators.single.SingleUsing$a.c` @type ^`boolean` @kind boolean;
  #L4825c2.  if v3 != 0 then goto L4825cc;
  #L4825c6.  call `a`(v2) @signature `Lio/reactivex/internal/operators/single/SingleUsing$a;.a:()V` @kind virtual;
  #L4825cc.  return @kind void;
  catch `java.lang.Throwable` @[L482594..L48259e] goto L4825a0;
}
