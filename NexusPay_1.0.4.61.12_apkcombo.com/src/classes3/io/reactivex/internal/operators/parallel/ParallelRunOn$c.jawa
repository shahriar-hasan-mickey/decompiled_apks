record `io.reactivex.internal.operators.parallel.ParallelRunOn$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d550.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L47d556.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47d55a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47d56c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d570.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47d576.  v0:= temp;
  #L47d578.  if v0 == 0 then goto L47d596;
  #L47d57c.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L47d580.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47d584.  call `onSubscribe`(v0, v2) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47d58a.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int`;
  #L47d58e.  v0:= (`long`) v0 @kind i2l;
  #L47d590.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47d596.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$c` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$c;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L47d5a8.  v0:= v18 @kind object;
  #L47d5ac.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int`;
  #L47d5b0.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L47d5b4.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$c.k` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47d5b8.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int`;
  #L47d5bc.  v5:= 1I;
  #L47d5be.  v6:= 1I;
  #L47d5c0.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47d5c4.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47d5ca.  v7:= temp @kind wide;
  #L47d5cc.  v9:= 0L;
  #L47d5d0.  v11:= v9 @kind wide;
  #L47d5d2.  v13:= lcmp(v11, v7);
  #L47d5d6.  if v13 == 0 then goto L47d676;
  #L47d5da.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L47d5de.  if v14 == 0 then goto L47d5ea;
  #L47d5e2.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d5e8.  return @kind void;
  #L47d5ea.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d5ee.  if v14 == 0 then goto L47d612;
  #L47d5f2.  v15:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L47d5f6.  if v15 == 0 then goto L47d612;
  #L47d5fa.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d600.  call `onError`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d606.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d60a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d610.  return @kind void;
  #L47d612.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47d618.  v15:= temp @kind object;
  #L47d61a.  v16:= 0I;
  #L47d61e.  if v15 != 0 then goto L47d628;
  #L47d622.  v17:= 1I;
  #L47d626.  goto L47d62c;
  #L47d628.  v17:= 0I;
  #L47d62c.  if v14 == 0 then goto L47d646;
  #L47d630.  if v17 == 0 then goto L47d646;
  #L47d634.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d63a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d63e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d644.  return @kind void;
  #L47d646.  if v17 == 0 then goto L47d64c;
  #L47d64a.  goto L47d676;
  #L47d64c.  call temp:= `tryOnNext`(v3, v15) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47d652.  v13:= temp;
  #L47d654.  if v13 == 0 then goto L47d65e;
  #L47d658.  v13:= 1L;
  #L47d65c.  v11:= v11 + v13 @kind long;
  #L47d65e.  v1:= v1 + 1;
  #L47d662.  if v1 != v4 then goto L47d5d2;
  #L47d666.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d66a.  v14:= (`long`) v1 @kind i2l;
  #L47d66c.  call `request`(v13, v14) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47d672.  v1:= 0I;
  #L47d674.  goto L47d5d2;
  #L47d676.  if v13 != 0 then goto L47d6d0;
  #L47d67a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L47d67e.  if v13 == 0 then goto L47d68a;
  #L47d682.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d688.  return @kind void;
  #L47d68a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d68e.  if v13 == 0 then goto L47d6d0;
  #L47d692.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L47d696.  if v13 == 0 then goto L47d6b2;
  #L47d69a.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d6a0.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d6a6.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d6aa.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d6b0.  return @kind void;
  #L47d6b2.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L47d6b8.  v13:= temp;
  #L47d6ba.  if v13 == 0 then goto L47d6d0;
  #L47d6be.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d6c4.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d6c8.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d6ce.  return @kind void;
  #L47d6d0.  v13:= lcmp(v11, v9);
  #L47d6d4.  if v13 == 0 then goto L47d6f6;
  #L47d6d8.  v9:= 9223372036854775807L;
  #L47d6e2.  v13:= lcmp(v7, v9);
  #L47d6e6.  if v13 == 0 then goto L47d6f6;
  #L47d6ea.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47d6ee.  v8:= -v11 @kind long;
  #L47d6f0.  call temp:= `addAndGet`(v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L47d6f6.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47d6fc.  v7:= temp;
  #L47d6fe.  if v7 != v6 then goto L47d716;
  #L47d702.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int` := v1;
  #L47d706.  v6:= -v6 @kind int;
  #L47d708.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47d70e.  v6:= temp;
  #L47d710.  if v6 != 0 then goto L47d5c0;
  #L47d714.  return @kind void;
  #L47d716.  v6:= v7;
  #L47d718.  goto L47d5c0;
}
