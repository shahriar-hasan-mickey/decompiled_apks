record `io.reactivex.internal.operators.parallel.ParallelPeek$a` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelPeek` `io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.internal.operators.parallel.ParallelPeek` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/internal/operators/parallel/ParallelPeek;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c91c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c922.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47c926.  v0.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` := v2 @kind object;
  #L47c92a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c93c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47c940.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.i` @type ^`io.reactivex.functions.Action` @kind object;
  #L47c944.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L47c94a.  goto L47c95a;
  #L47c94c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c94e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c954.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c95a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c95e.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c964.  return @kind void;
  catch `java.lang.Throwable` @[L47c93c..L47c94a] goto L47c94c;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47c984.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L47c988.  if v0 != 0 then goto L47c9dc;
  #L47c98c.  v0:= 1I;
  #L47c98e.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L47c992.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47c996.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.e` @type ^`io.reactivex.functions.Action` @kind object;
  #L47c99a.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L47c9a0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c9a4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c9aa.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47c9ae.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.functions.Action` @kind object;
  #L47c9b2.  call `run`(v0) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L47c9b8.  goto L47c9dc;
  #L47c9ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c9bc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c9c2.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c9c8.  goto L47c9dc;
  #L47c9ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c9cc.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c9d2.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c9d6.  call `onError`(v1, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c9dc.  return @kind void;
  catch `java.lang.Throwable` @[L47c992..L47c9a0] goto L47c9ca;
  catch `java.lang.Throwable` @[L47c9aa..L47c9b8] goto L47c9ba;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v5 @kind this, `java.lang.Throwable` v6 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47ca08.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L47ca0c.  if v0 == 0 then goto L47ca18;
  #L47ca10.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47ca16.  return @kind void;
  #L47ca18.  v0:= 1I;
  #L47ca1a.  v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` := v0 @kind boolean;
  #L47ca1e.  v1:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47ca22.  v1:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek.d` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47ca26.  call `accept`(v1, v6) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47ca2c.  goto L47ca52;
  #L47ca2e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47ca30.  call `throwIfFatal`(v1) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47ca36.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47ca3a.  v3:= 2I;
  #L47ca3c.  v3:= new `java.lang.Throwable`[v3];
  #L47ca40.  v4:= 0I;
  #L47ca42.  v3[v4]:= v6 @kind object;
  #L47ca46.  v3[v0]:= v1 @kind object;
  #L47ca4a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47ca50.  v6:= v2 @kind object;
  #L47ca52.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47ca56.  call `onError`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47ca5c.  v6:= v5.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47ca60.  v6:= v6.`io.reactivex.internal.operators.parallel.ParallelPeek.f` @type ^`io.reactivex.functions.Action` @kind object;
  #L47ca64.  call `run`(v6) @signature `Lio/reactivex/functions/Action;.run:()V` @kind interface;
  #L47ca6a.  goto L47ca7a;
  #L47ca6c.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47ca6e.  call `throwIfFatal`(v6) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47ca74.  call `onError`(v6) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47ca7a.  return @kind void;
  catch `java.lang.Throwable` @[L47ca1e..L47ca2c] goto L47ca2e;
  catch `java.lang.Throwable` @[L47ca5c..L47ca6a] goto L47ca6c;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47caa4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.d` @type ^`boolean` @kind boolean;
  #L47caa8.  if v0 != 0 then goto L47caf2;
  #L47caac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47cab0.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47cab4.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47caba.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cabe.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47cac4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47cac8.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.c` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47cacc.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47cad2.  goto L47caf2;
  #L47cad4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47cad6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47cadc.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47cae2.  goto L47caf2;
  #L47cae4.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47cae6.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47caec.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47caf2.  return @kind void;
  catch `java.lang.Throwable` @[L47caac..L47caba] goto L47cae4;
  catch `java.lang.Throwable` @[L47cac4..L47cad2] goto L47cad4;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47cb1c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47cb20.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47cb26.  v0:= temp;
  #L47cb28.  if v0 == 0 then goto L47cb6c;
  #L47cb2c.  v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L47cb30.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47cb34.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.g` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47cb38.  call `accept`(v0, v3) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47cb3e.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cb42.  call `onSubscribe`(v3, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47cb48.  goto L47cb6c;
  #L47cb4a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47cb4c.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47cb52.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47cb58.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelPeek$a.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47cb5c.  v1:= `@@io.reactivex.internal.subscriptions.EmptySubscription.INSTANCE` @type ^`io.reactivex.internal.subscriptions.EmptySubscription` @kind object;
  #L47cb60.  call `onSubscribe`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47cb66.  call `onError`(v2, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47cb6c.  return @kind void;
  catch `java.lang.Throwable` @[L47cb30..L47cb3e] goto L47cb4a;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelPeek$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelPeek$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47cb8c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.b` @type ^`io.reactivex.internal.operators.parallel.ParallelPeek` @kind object;
  #L47cb90.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelPeek.h` @type ^`io.reactivex.functions.LongConsumer` @kind object;
  #L47cb94.  call `accept`(v0, v2) @signature `Lio/reactivex/functions/LongConsumer;.accept:(J)V` @kind interface;
  #L47cb9a.  goto L47cbaa;
  #L47cb9c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47cb9e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47cba4.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47cbaa.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelPeek$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47cbae.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47cbb4.  return @kind void;
  catch `java.lang.Throwable` @[L47cb8c..L47cb9a] goto L47cb9c;
}
