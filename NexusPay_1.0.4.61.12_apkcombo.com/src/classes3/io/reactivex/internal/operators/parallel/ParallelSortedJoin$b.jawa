record `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @AccessFlag FINAL;
  `java.util.List`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @AccessFlag FINAL;
  `int`[] `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @AccessFlag FINAL;
  `java.util.Comparator` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object, `int` v3 , `java.util.Comparator` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;ILjava/util/Comparator;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47dad8.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47dade.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L47dae2.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47dae8.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L47daec.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47daf0.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47daf6.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L47dafa.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47dafe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47db04.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L47db08.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` := v2 @kind object;
  #L47db0c.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` := v4 @kind object;
  #L47db10.  v2:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[v3];
  #L47db14.  v4:= 0I;
  #L47db16.  if v4 >= v3 then goto L47db2e;
  #L47db1a.  v0:= new `io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`;
  #L47db1e.  call `<init>`(v0, v1, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;I)V` @kind direct;
  #L47db24.  v2[v4]:= v0 @kind object;
  #L47db28.  v4:= v4 + 1;
  #L47db2c.  goto L47db16;
  #L47db2e.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] := v2 @kind object;
  #L47db32.  v2:= new `java.util.List`[v3];
  #L47db36.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] := v2 @kind object;
  #L47db3a.  v2:= new `int`[v3];
  #L47db3e.  v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] := v2 @kind object;
  #L47db42.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47db46.  call `lazySet`(v2, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L47db4c.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47dba0.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.b` @type ^`io.reactivex.internal.operators.parallel.ParallelSortedJoin$a`[] @kind object;
  #L47dba4.  v1:= length @variable v0;
  #L47dba6.  v2:= 0I;
  #L47dba8.  if v2 >= v1 then goto L47dbbc;
  #L47dbac.  v3:= v0[v2] @kind object;
  #L47dbb0.  call `a`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$a;.a:()V` @kind virtual;
  #L47dbb6.  v2:= v2 + 1;
  #L47dbba.  goto L47dba8;
  #L47dbbc.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v16 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L47dbd0.  v1:= v16 @kind object;
  #L47dbd4.  call temp:= `getAndIncrement`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47dbda.  v0:= temp;
  #L47dbdc.  if v0 == 0 then goto L47dbe2;
  #L47dbe0.  return @kind void;
  #L47dbe2.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47dbe6.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L47dbea.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.d` @type ^`int`[] @kind object;
  #L47dbee.  v4:= length @variable v0;
  #L47dbf0.  v6:= 1I;
  #L47dbf2.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47dbf6.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47dbfc.  v7:= temp @kind wide;
  #L47dbfe.  v11:= 0L;
  #L47dc02.  v14:= 0I;
  #L47dc04.  v15:= lcmp(v11, v7);
  #L47dc08.  if v15 == 0 then goto L47dd14;
  #L47dc0c.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L47dc10.  if v15 == 0 then goto L47dc1c;
  #L47dc14.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dc1a.  return @kind void;
  #L47dc1c.  v15:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47dc20.  call temp:= `get`(v15) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47dc26.  v15:= temp @kind object;
  #L47dc28.  v15:= (`java.lang.Throwable`) v15 @kind object;
  #L47dc2c.  if v15 == 0 then goto L47dc44;
  #L47dc30.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L47dc36.  call `fill`(v3, v14) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dc3c.  call `onError`(v2, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47dc42.  return @kind void;
  #L47dc44.  v15:= -1I;
  #L47dc46.  v9:= v14 @kind object;
  #L47dc48.  v13:= 0I;
  #L47dc4a.  if v13 >= v4 then goto L47dce4;
  #L47dc4e.  v10:= v3[v13] @kind object;
  #L47dc52.  v5:= v0[v13];
  #L47dc56.  call temp:= `size`(v10) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L47dc5c.  v14:= temp;
  #L47dc5e.  if v14 == v5 then goto L47dcdc;
  #L47dc62.  if v9 != 0 then goto L47dc72;
  #L47dc66.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L47dc6c.  v9:= temp @kind object;
  #L47dc6e.  v15:= v13;
  #L47dc70.  goto L47dcdc;
  #L47dc72.  call temp:= `get`(v10, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L47dc78.  v5:= temp @kind object;
  #L47dc7a.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.e` @type ^`java.util.Comparator` @kind object;
  #L47dc7e.  call temp:= `compare`(v10, v9, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L47dc84.  v10:= temp;
  #L47dc86.  if v10 <= 0 then goto L47dc8e;
  #L47dc8a.  v10:= 1I;
  #L47dc8c.  goto L47dc90;
  #L47dc8e.  v10:= 0I;
  #L47dc90.  if v10 == 0 then goto L47dcdc;
  #L47dc94.  v9:= v5 @kind object;
  #L47dc96.  goto L47dc6e;
  #L47dc98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47dc9a.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47dca0.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L47dca6.  v4:= 0I;
  #L47dca8.  call `fill`(v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dcae.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47dcb2.  call temp:= `compareAndSet`(v3, v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47dcb8.  v3:= temp;
  #L47dcba.  if v3 != 0 then goto L47dcc4;
  #L47dcbe.  call `onError`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47dcc4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47dcc8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47dcce.  v0:= temp @kind object;
  #L47dcd0.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L47dcd4.  call `onError`(v2, v0) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47dcda.  return @kind void;
  #L47dcdc.  v13:= v13 + 1;
  #L47dce0.  v14:= 0I;
  #L47dce2.  goto L47dc4a;
  #L47dce4.  if v9 != 0 then goto L47dcf8;
  #L47dce8.  v5:= 0I;
  #L47dcea.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dcf0.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47dcf6.  return @kind void;
  #L47dcf8.  call `onNext`(v2, v9) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47dcfe.  v5:= v0[v15];
  #L47dd02.  v9:= 1I;
  #L47dd04.  v5:= v5 + v9 @kind int;
  #L47dd06.  v0[v15]:= v5;
  #L47dd0a.  v13:= 1L;
  #L47dd0e.  v11:= v11 + v13 @kind long;
  #L47dd10.  goto L47dc02;
  #L47dd14.  v9:= 1I;
  #L47dd16.  if v15 != 0 then goto L47dd90;
  #L47dd1a.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L47dd1e.  if v5 == 0 then goto L47dd2c;
  #L47dd22.  v5:= 0I;
  #L47dd24.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dd2a.  return @kind void;
  #L47dd2c.  v5:= 0I;
  #L47dd2e.  v10:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47dd32.  call temp:= `get`(v10) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47dd38.  v10:= temp @kind object;
  #L47dd3a.  v10:= (`java.lang.Throwable`) v10 @kind object;
  #L47dd3e.  if v10 == 0 then goto L47dd56;
  #L47dd42.  call `a`(v16) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L47dd48.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dd4e.  call `onError`(v2, v10) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47dd54.  return @kind void;
  #L47dd56.  v5:= 0I;
  #L47dd58.  if v5 >= v4 then goto L47dd7a;
  #L47dd5c.  v10:= v0[v5];
  #L47dd60.  v13:= v3[v5] @kind object;
  #L47dd64.  call temp:= `size`(v13) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L47dd6a.  v13:= temp;
  #L47dd6c.  if v10 == v13 then goto L47dd74;
  #L47dd70.  v13:= 0I;
  #L47dd72.  goto L47dd7c;
  #L47dd74.  v5:= v5 + 1;
  #L47dd78.  goto L47dd58;
  #L47dd7a.  v13:= 1I;
  #L47dd7c.  if v13 == 0 then goto L47dd90;
  #L47dd80.  v5:= 0I;
  #L47dd82.  call `fill`(v3, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47dd88.  call `onComplete`(v2) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47dd8e.  return @kind void;
  #L47dd90.  v13:= 0L;
  #L47dd94.  v5:= lcmp(v11, v13);
  #L47dd98.  if v5 == 0 then goto L47ddba;
  #L47dd9c.  v13:= 9223372036854775807L;
  #L47dda6.  v5:= lcmp(v7, v13);
  #L47ddaa.  if v5 == 0 then goto L47ddba;
  #L47ddae.  v5:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47ddb2.  v7:= -v11 @kind long;
  #L47ddb4.  call temp:= `addAndGet`(v5, v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L47ddba.  call temp:= `get`(v16) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47ddc0.  v5:= temp;
  #L47ddc2.  if v5 != v6 then goto L47ddd6;
  #L47ddc6.  v5:= -v6 @kind int;
  #L47ddc8.  call temp:= `addAndGet`(v1, v5) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47ddce.  v5:= temp;
  #L47ddd0.  if v5 != 0 then goto L47ddd6;
  #L47ddd4.  return @kind void;
  #L47ddd6.  v6:= v5;
  #L47ddd8.  goto L47dbf2;
  catch `java.lang.Throwable` @[L47dc7a..L47dc86] goto L47dc98;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.c:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47ddf8.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47ddfc.  v1:= 0I;
  #L47ddfe.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47de04.  v0:= temp;
  #L47de06.  if v0 == 0 then goto L47de12;
  #L47de0a.  call `b`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L47de10.  goto L47de28;
  #L47de12.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.i` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47de16.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47de1c.  v0:= temp @kind object;
  #L47de1e.  if v3 == v0 then goto L47de28;
  #L47de22.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47de28.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47db60.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` @kind boolean;
  #L47db64.  if v0 != 0 then goto L47db8c;
  #L47db68.  v0:= 1I;
  #L47db6a.  v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.g` @type ^`boolean` := v0 @kind boolean;
  #L47db6e.  call `a`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.a:()V` @kind virtual;
  #L47db74.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47db7a.  v0:= temp;
  #L47db7c.  if v0 != 0 then goto L47db8c;
  #L47db80.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L47db84.  v1:= 0I;
  #L47db86.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L47db8c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `java.util.List` v2 @kind object, `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.d:(Ljava/util/List;I)V` @AccessFlag  {
    temp;
    v0;

  #L47de3c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.c` @type ^`java.util.List`[] @kind object;
  #L47de40.  v0[v3]:= v2 @kind object;
  #L47de44.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47de48.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47de4e.  v2:= temp;
  #L47de50.  if v2 != 0 then goto L47de5a;
  #L47de54.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L47de5a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47de6c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L47de72.  v0:= temp;
  #L47de74.  if v0 == 0 then goto L47de98;
  #L47de78.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.f` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47de7c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L47de82.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelSortedJoin$b.h` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47de86.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47de8c.  v2:= temp;
  #L47de8e.  if v2 != 0 then goto L47de98;
  #L47de92.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelSortedJoin$b;.b:()V` @kind virtual;
  #L47de98.  return @kind void;
}
