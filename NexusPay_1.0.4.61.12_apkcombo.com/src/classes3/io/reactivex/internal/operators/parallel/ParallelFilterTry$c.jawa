record `io.reactivex.internal.operators.parallel.ParallelFilterTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilterTry$b` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47aa5c.  call `<init>`(v0, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.<init>:(Lio/reactivex/functions/Predicate;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L47aa62.  v0.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47aa66.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47aa78.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L47aa7c.  if v0 != 0 then goto L47aa90;
  #L47aa80.  v0:= 1I;
  #L47aa82.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L47aa86.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47aa8a.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47aa90.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47aaa4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L47aaa8.  if v0 == 0 then goto L47aab4;
  #L47aaac.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47aab2.  return @kind void;
  #L47aab4.  v0:= 1I;
  #L47aab6.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` := v0 @kind boolean;
  #L47aaba.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47aabe.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47aac4.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47aad8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47aadc.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47aae2.  v0:= temp;
  #L47aae4.  if v0 == 0 then goto L47aaf6;
  #L47aae8.  v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47aaec.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47aaf0.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47aaf6.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilterTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47a964.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.d` @type ^`boolean` @kind boolean;
  #L47a968.  v1:= 0I;
  #L47a96a.  if v0 != 0 then goto L47aa30;
  #L47a96e.  v2:= 0L;
  #L47a972.  v0:= 1I;
  #L47a974.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L47a978.  call temp:= `test`(v4, v10) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L47a97e.  v2:= temp;
  #L47a980.  if v2 == 0 then goto L47a996;
  #L47a984.  v2:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$c.e` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a988.  call temp:= `tryOnNext`(v2, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47a98e.  v10:= temp;
  #L47a990.  if v10 == 0 then goto L47a996;
  #L47a994.  v1:= 1I;
  #L47a996.  return v1;
  #L47a998.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a99a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a9a0.  v5:= 2I;
  #L47a9a2.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelFilterTry$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47a9a6.  v7:= 1L;
  #L47a9aa.  v2:= v2 + v7 @kind long;
  #L47a9ac.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47a9b2.  v7:= temp @kind object;
  #L47a9b4.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47a9ba.  v6:= temp @kind object;
  #L47a9bc.  v7:= "The errorHandler returned a null item" @kind object;
  #L47a9c0.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47a9c6.  v6:= temp @kind object;
  #L47a9c8.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47a9cc.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelFilterTry$a.a` @type ^`int`[] @kind object;
  #L47a9d0.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47a9d6.  v6:= temp;
  #L47a9d8.  v6:= v7[v6];
  #L47a9dc.  if v6 == v0 then goto L47a972;
  #L47a9e0.  if v6 == v5 then goto L47aa04;
  #L47a9e4.  v10:= 3I;
  #L47a9e6.  if v6 == v10 then goto L47a9f8;
  #L47a9ea.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L47a9f0.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a9f6.  return v1;
  #L47a9f8.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L47a9fe.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onComplete:()V` @kind virtual;
  #L47aa04.  return v1;
  #L47aa06.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47aa08.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47aa0e.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$b;.cancel:()V` @kind virtual;
  #L47aa14.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47aa18.  v3:= new `java.lang.Throwable`[v5];
  #L47aa1c.  v3[v1]:= v4 @kind object;
  #L47aa20.  v3[v0]:= v10 @kind object;
  #L47aa24.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47aa2a.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilterTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47aa30.  return v1;
  catch `java.lang.Throwable` @[L47a974..L47a980] goto L47a998;
  catch `java.lang.Throwable` @[L47a9a2..L47a9cc] goto L47aa06;
}
