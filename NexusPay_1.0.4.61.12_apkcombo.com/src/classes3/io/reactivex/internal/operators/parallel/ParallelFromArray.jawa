record `io.reactivex.internal.operators.parallel.ParallelFromArray` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `org.reactivestreams.Publisher`[] `io.reactivex.internal.operators.parallel.ParallelFromArray.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromArray` v0 @kind this, `org.reactivestreams.Publisher`[] v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.<init>:([Lorg/reactivestreams/Publisher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47aed8.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L47aede.  v0.`io.reactivex.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] := v1 @kind object;
  #L47aee2.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFromArray` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47aec0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L47aec4.  v0:= length @variable v0;
  #L47aec6.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFromArray` v4 @kind this, `org.reactivestreams.Subscriber`[] v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromArray;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47aef4.  call temp:= `validate`(v4, v5) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L47aefa.  v0:= temp;
  #L47aefc.  if v0 != 0 then goto L47af02;
  #L47af00.  return @kind void;
  #L47af02.  v0:= length @variable v5;
  #L47af04.  v1:= 0I;
  #L47af06.  if v1 >= v0 then goto L47af22;
  #L47af0a.  v2:= v4.`io.reactivex.internal.operators.parallel.ParallelFromArray.a` @type ^`org.reactivestreams.Publisher`[] @kind object;
  #L47af0e.  v2:= v2[v1] @kind object;
  #L47af12.  v3:= v5[v1] @kind object;
  #L47af16.  call `subscribe`(v2, v3) @signature `Lorg/reactivestreams/Publisher;.subscribe:(Lorg/reactivestreams/Subscriber;)V` @kind interface;
  #L47af1c.  v1:= v1 + 1;
  #L47af20.  goto L47af06;
  #L47af22.  return @kind void;
}
