record `io.reactivex.internal.operators.parallel.ParallelJoin$d` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47b87c.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L47b882.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L47b894.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47b89a.  v0:= temp;
  #L47b89c.  if v0 == 0 then goto L47b8a2;
  #L47b8a0.  return @kind void;
  #L47b8a2.  call `g`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L47b8a8.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.d:()V` @AccessFlag  {
    temp;
    v0;

  #L47ba78.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47ba7c.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47ba82.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L47ba88.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.e:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;

  #L47ba9c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47baa0.  call temp:= `addThrowable`(v0, v2) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L47baa6.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47baaa.  call temp:= `decrementAndGet`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bab0.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.c:()V` @kind virtual;
  #L47bab6.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47bac8.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47bace.  v0:= temp;
  #L47bad0.  v1:= "Queue full?!" @kind object;
  #L47bad4.  if v0 != 0 then goto L47bb8c;
  #L47bad8.  v0:= 0I;
  #L47bada.  v2:= 1I;
  #L47badc.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L47bae2.  v0:= temp;
  #L47bae4.  if v0 == 0 then goto L47bb8c;
  #L47bae8.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47baec.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47baf2.  v2:= temp @kind wide;
  #L47baf4.  v4:= 0L;
  #L47baf8.  v0:= lcmp(v2, v4);
  #L47bafc.  if v0 == 0 then goto L47bb3e;
  #L47bb00.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47bb04.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47bb0a.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47bb0e.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47bb14.  v0:= temp @kind wide;
  #L47bb16.  v2:= 9223372036854775807L;
  #L47bb20.  v8:= lcmp(v0, v2);
  #L47bb24.  if v8 == 0 then goto L47bb32;
  #L47bb28.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47bb2c.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L47bb32.  v0:= 1L;
  #L47bb36.  call `c`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L47bb3c.  goto L47bb7e;
  #L47bb3e.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L47bb44.  v0:= temp @kind object;
  #L47bb46.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47bb4c.  v8:= temp;
  #L47bb4e.  if v8 != 0 then goto L47bb7e;
  #L47bb52.  call temp:= `a`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L47bb58.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47bb5c.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47bb60.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47bb66.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L47bb6c.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47bb70.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bb76.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L47bb7c.  return @kind void;
  #L47bb7e.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bb84.  v7:= temp;
  #L47bb86.  if v7 != 0 then goto L47bbd8;
  #L47bb8a.  return @kind void;
  #L47bb8c.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L47bb92.  v0:= temp @kind object;
  #L47bb94.  call temp:= `offer`(v0, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47bb9a.  v8:= temp;
  #L47bb9c.  if v8 != 0 then goto L47bbca;
  #L47bba0.  call temp:= `a`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L47bba6.  v7:= temp;
  #L47bba8.  if v7 == 0 then goto L47bbca;
  #L47bbac.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47bbb0.  v8:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47bbb4.  call `<init>`(v8, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47bbba.  call temp:= `addThrowable`(v7, v8) @signature `Lio/reactivex/internal/util/AtomicThrowable;.addThrowable:(Ljava/lang/Throwable;)Z` @kind virtual;
  #L47bbc0.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47bbc4.  call temp:= `decrementAndGet`(v7) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bbca.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47bbd0.  v7:= temp;
  #L47bbd2.  if v7 == 0 then goto L47bbd8;
  #L47bbd6.  return @kind void;
  #L47bbd8.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @kind virtual;
  #L47bbde.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.parallel.ParallelJoin$d` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L47b8bc.  v0:= v18 @kind object;
  #L47b8c0.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L47b8c4.  v2:= length @variable v1;
  #L47b8c6.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47b8ca.  v5:= 1I;
  #L47b8cc.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47b8d0.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47b8d6.  v6:= temp @kind wide;
  #L47b8d8.  v8:= 0L;
  #L47b8dc.  v10:= v8 @kind wide;
  #L47b8de.  v13:= lcmp(v10, v6);
  #L47b8e2.  if v13 == 0 then goto L47b98e;
  #L47b8e6.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L47b8ea.  if v13 == 0 then goto L47b8f6;
  #L47b8ee.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47b8f4.  return @kind void;
  #L47b8f6.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47b8fa.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47b900.  v13:= temp;
  #L47b902.  if v13 != 0 then goto L47b90a;
  #L47b906.  v13:= 1I;
  #L47b908.  goto L47b90c;
  #L47b90a.  v13:= 0I;
  #L47b90c.  v14:= 0I;
  #L47b90e.  v15:= 1I;
  #L47b910.  if v14 >= v2 then goto L47b952;
  #L47b914.  v4:= v1[v14] @kind object;
  #L47b918.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47b91c.  if v12 == 0 then goto L47b94c;
  #L47b920.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47b926.  v12:= temp @kind object;
  #L47b928.  if v12 == 0 then goto L47b94c;
  #L47b92c.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47b932.  call `d`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L47b938.  v16:= 1L;
  #L47b93c.  v10:= v10 + v16 @kind long;
  #L47b940.  v4:= lcmp(v10, v6);
  #L47b944.  if v4 != 0 then goto L47b94a;
  #L47b948.  goto L47b98e;
  #L47b94a.  v15:= 0I;
  #L47b94c.  v14:= v14 + 1;
  #L47b950.  goto L47b910;
  #L47b952.  if v13 == 0 then goto L47b98a;
  #L47b956.  if v15 == 0 then goto L47b98a;
  #L47b95a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47b95e.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47b964.  v1:= temp @kind object;
  #L47b966.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L47b96a.  if v1 == 0 then goto L47b982;
  #L47b96e.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47b972.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L47b978.  v1:= temp @kind object;
  #L47b97a.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47b980.  goto L47b988;
  #L47b982.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47b988.  return @kind void;
  #L47b98a.  if v15 == 0 then goto L47b8de;
  #L47b98e.  v4:= lcmp(v10, v6);
  #L47b992.  if v4 != 0 then goto L47ba1e;
  #L47b996.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L47b99a.  if v4 == 0 then goto L47b9a6;
  #L47b99e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47b9a4.  return @kind void;
  #L47b9a6.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47b9aa.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47b9b0.  v4:= temp;
  #L47b9b2.  if v4 != 0 then goto L47b9ba;
  #L47b9b6.  v4:= 1I;
  #L47b9b8.  goto L47b9bc;
  #L47b9ba.  v4:= 0I;
  #L47b9bc.  v12:= 0I;
  #L47b9be.  if v12 >= v2 then goto L47b9e4;
  #L47b9c2.  v13:= v1[v12] @kind object;
  #L47b9c6.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47b9ca.  if v13 == 0 then goto L47b9de;
  #L47b9ce.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L47b9d4.  v13:= temp;
  #L47b9d6.  if v13 != 0 then goto L47b9de;
  #L47b9da.  v12:= 0I;
  #L47b9dc.  goto L47b9e6;
  #L47b9de.  v12:= v12 + 1;
  #L47b9e2.  goto L47b9be;
  #L47b9e4.  v12:= 1I;
  #L47b9e6.  if v4 == 0 then goto L47ba1e;
  #L47b9ea.  if v12 == 0 then goto L47ba1e;
  #L47b9ee.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47b9f2.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47b9f8.  v1:= temp @kind object;
  #L47b9fa.  v1:= (`java.lang.Throwable`) v1 @kind object;
  #L47b9fe.  if v1 == 0 then goto L47ba16;
  #L47ba02.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47ba06.  call temp:= `terminate`(v1) @signature `Lio/reactivex/internal/util/AtomicThrowable;.terminate:()Ljava/lang/Throwable;` @kind virtual;
  #L47ba0c.  v1:= temp @kind object;
  #L47ba0e.  call `onError`(v3, v1) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47ba14.  goto L47ba1c;
  #L47ba16.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47ba1c.  return @kind void;
  #L47ba1e.  v4:= lcmp(v10, v8);
  #L47ba22.  if v4 == 0 then goto L47ba44;
  #L47ba26.  v8:= 9223372036854775807L;
  #L47ba30.  v4:= lcmp(v6, v8);
  #L47ba34.  if v4 == 0 then goto L47ba44;
  #L47ba38.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47ba3c.  v6:= -v10 @kind long;
  #L47ba3e.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L47ba44.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47ba4a.  v4:= temp;
  #L47ba4c.  if v4 != v5 then goto L47ba60;
  #L47ba50.  v4:= -v5 @kind int;
  #L47ba52.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47ba58.  v4:= temp;
  #L47ba5a.  if v4 != 0 then goto L47ba60;
  #L47ba5e.  return @kind void;
  #L47ba60.  v5:= v4;
  #L47ba62.  goto L47b8cc;
}
