record `io.reactivex.internal.operators.parallel.ParallelJoin` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Flowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelJoin.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.<init>:(Lio/reactivex/parallel/ParallelFlowable;IZ)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47bf6c.  call `<init>`(v0) @signature `Lio/reactivex/Flowable;.<init>:()V` @kind direct;
  #L47bf72.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L47bf76.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int` := v2;
  #L47bf7a.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin.d` @type ^`boolean` := v3 @kind boolean;
  #L47bf7e.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.internal.operators.parallel.ParallelJoin` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin;.subscribeActual:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L47bf90.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.d` @type ^`boolean` @kind boolean;
  #L47bf94.  if v0 == 0 then goto L47bfb4;
  #L47bf98.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$d`;
  #L47bf9c.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47bfa0.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L47bfa6.  v1:= temp;
  #L47bfa8.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int`;
  #L47bfac.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$d;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L47bfb2.  goto L47bfce;
  #L47bfb4.  v0:= new `io.reactivex.internal.operators.parallel.ParallelJoin$b`;
  #L47bfb8.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47bfbc.  call temp:= `parallelism`(v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L47bfc2.  v1:= temp;
  #L47bfc4.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.c` @type ^`int`;
  #L47bfc8.  call `<init>`(v0, v4, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L47bfce.  call `onSubscribe`(v4, v0) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47bfd4.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin.b` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47bfd8.  v0:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L47bfdc.  call `subscribe`(v4, v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L47bfe2.  return @kind void;
}
