record `io.reactivex.internal.operators.parallel.ParallelReduceFull$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.subscriptions.DeferredScalarSubscription` @kind class {
  `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelReduceFull$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `io.reactivex.functions.BiFunction` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L47d000.  call `<init>`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L47d006.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47d00a.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47d010.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L47d014.  v3:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47d018.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47d01e.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` := v3 @kind object;
  #L47d022.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L47d026.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47d02c.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L47d030.  v3:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[v4];
  #L47d034.  v0:= 0I;
  #L47d036.  if v0 >= v4 then goto L47d04e;
  #L47d03a.  v1:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$a`;
  #L47d03e.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L47d044.  v3[v0]:= v1 @kind object;
  #L47d048.  v0:= v0 + 1;
  #L47d04c.  goto L47d036;
  #L47d04e.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] := v3 @kind object;
  #L47d052.  v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @type ^`io.reactivex.functions.BiFunction` := v5 @kind object;
  #L47d056.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47d05a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L47d060.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.a:(Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47d14c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d150.  v1:= 0I;
  #L47d152.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47d158.  v0:= temp;
  #L47d15a.  if v0 == 0 then goto L47d170;
  #L47d15e.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.cancel:()V` @kind virtual;
  #L47d164.  v0:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47d168.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d16e.  goto L47d186;
  #L47d170.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.e` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d174.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47d17a.  v0:= temp @kind object;
  #L47d17c.  if v3 == v0 then goto L47d186;
  #L47d180.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47d186.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47d074.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.a` @type ^`io.reactivex.internal.operators.parallel.ParallelReduceFull$a`[] @kind object;
  #L47d078.  v1:= length @variable v0;
  #L47d07a.  v2:= 0I;
  #L47d07c.  if v2 >= v1 then goto L47d090;
  #L47d080.  v3:= v0[v2] @kind object;
  #L47d084.  call `a`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$a;.a:()V` @kind virtual;
  #L47d08a.  v2:= v2 + 1;
  #L47d08e.  goto L47d07c;
  #L47d090.  return @kind void;
}
procedure `io.reactivex.internal.operators.parallel.ParallelReduceFull$c` `e`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.e:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L47cf7c.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47cf80.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47cf86.  v0:= temp @kind object;
  #L47cf88.  v0:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$c`) v0 @kind object;
  #L47cf8c.  v1:= 0I;
  #L47cf8e.  if v0 != 0 then goto L47cfae;
  #L47cf92.  v0:= new `io.reactivex.internal.operators.parallel.ParallelReduceFull$c`;
  #L47cf96.  call `<init>`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.<init>:()V` @kind direct;
  #L47cf9c.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47cfa0.  call temp:= `compareAndSet`(v2, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47cfa6.  v2:= temp;
  #L47cfa8.  if v2 != 0 then goto L47cfae;
  #L47cfac.  goto L47cf7c;
  #L47cfae.  call temp:= `b`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.b:()I` @kind virtual;
  #L47cfb4.  v2:= temp;
  #L47cfb6.  if v2 >= 0 then goto L47cfc6;
  #L47cfba.  v2:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47cfbe.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47cfc4.  goto L47cf7c;
  #L47cfc6.  if v2 != 0 then goto L47cfd0;
  #L47cfca.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` := v4 @kind object;
  #L47cfce.  goto L47cfd4;
  #L47cfd0.  v0.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.b` @type ^`java.lang.Object` := v4 @kind object;
  #L47cfd4.  call temp:= `a`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;.a:()Z` @kind virtual;
  #L47cfda.  v4:= temp;
  #L47cfdc.  if v4 == 0 then goto L47cfec;
  #L47cfe0.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47cfe4.  call temp:= `compareAndSet`(v4, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47cfea.  return v0 @kind object;
  #L47cfec.  return v1 @kind object;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelReduceFull$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47d0a4.  if v3 == 0 then goto L47d0e6;
  #L47d0a8.  call temp:= `e`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.e:(Ljava/lang/Object;)Lio/reactivex/internal/operators/parallel/ParallelReduceFull$c;` @kind virtual;
  #L47d0ae.  v3:= temp @kind object;
  #L47d0b0.  if v3 == 0 then goto L47d0e6;
  #L47d0b4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.b` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47d0b8.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` @kind object;
  #L47d0bc.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.b` @type ^`java.lang.Object` @kind object;
  #L47d0c0.  call temp:= `apply`(v0, v1, v3) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47d0c6.  v3:= temp @kind object;
  #L47d0c8.  v0:= "The reducer returned a null value" @kind object;
  #L47d0cc.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47d0d2.  v3:= temp @kind object;
  #L47d0d4.  goto L47d0a8;
  #L47d0d6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47d0d8.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47d0de.  call `a`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelReduceFull$b;.a:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47d0e4.  return @kind void;
  #L47d0e6.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.d` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47d0ea.  call temp:= `decrementAndGet`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47d0f0.  v3:= temp;
  #L47d0f2.  if v3 != 0 then goto L47d12c;
  #L47d0f6.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d0fa.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47d100.  v3:= temp @kind object;
  #L47d102.  v3:= (`io.reactivex.internal.operators.parallel.ParallelReduceFull$c`) v3 @kind object;
  #L47d106.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelReduceFull$b.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L47d10a.  v1:= 0I;
  #L47d10c.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L47d112.  if v3 == 0 then goto L47d122;
  #L47d116.  v3:= v3.`io.reactivex.internal.operators.parallel.ParallelReduceFull$c.a` @type ^`java.lang.Object` @kind object;
  #L47d11a.  call `complete`(v2, v3) @signature `Lio/reactivex/internal/subscriptions/DeferredScalarSubscription;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L47d120.  goto L47d12c;
  #L47d122.  v3:= v2.`io.reactivex.internal.subscriptions.DeferredScalarSubscription.downstream` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47d126.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d12c.  return @kind void;
  catch `java.lang.Throwable` @[L47d0b4..L47d0d4] goto L47d0d6;
}
