record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47a1d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47a1d6.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47a1da.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L47a1de.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47a1e2.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a1f4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a1f8.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47a1fe.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a210.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L47a214.  if v0 == 0 then goto L47a21a;
  #L47a218.  return @kind void;
  #L47a21a.  v0:= 1I;
  #L47a21c.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47a220.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a224.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47a22a.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a23c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L47a240.  if v0 == 0 then goto L47a24c;
  #L47a244.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47a24a.  return @kind void;
  #L47a24c.  v0:= 1I;
  #L47a24e.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47a252.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a256.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47a25c.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a270.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L47a276.  v3:= temp;
  #L47a278.  if v3 != 0 then goto L47a292;
  #L47a27c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L47a280.  if v3 != 0 then goto L47a292;
  #L47a284.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a288.  v0:= 1L;
  #L47a28c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47a292.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a2a4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a2a8.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47a2ae.  v0:= temp;
  #L47a2b0.  if v0 == 0 then goto L47a2c2;
  #L47a2b4.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47a2b8.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a2bc.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47a2c2.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a2d4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a2d8.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47a2de.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47a0e4.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.e` @type ^`boolean` @kind boolean;
  #L47a0e8.  v1:= 0I;
  #L47a0ea.  if v0 == 0 then goto L47a0f0;
  #L47a0ee.  return v1;
  #L47a0f0.  v2:= 0L;
  #L47a0f4.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47a0f8.  call `accept`(v0, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47a0fe.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a102.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47a108.  v10:= temp;
  #L47a10a.  return v10;
  #L47a10c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a10e.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a114.  v4:= 1I;
  #L47a116.  v5:= 2I;
  #L47a118.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47a11c.  v7:= 1L;
  #L47a120.  v2:= v2 + v7 @kind long;
  #L47a122.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47a128.  v7:= temp @kind object;
  #L47a12a.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47a130.  v6:= temp @kind object;
  #L47a132.  v7:= "The errorHandler returned a null item" @kind object;
  #L47a136.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47a13c.  v6:= temp @kind object;
  #L47a13e.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47a142.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L47a146.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47a14c.  v6:= temp;
  #L47a14e.  v6:= v7[v6];
  #L47a152.  if v6 == v4 then goto L47a0f4;
  #L47a156.  if v6 == v5 then goto L47a17a;
  #L47a15a.  v10:= 3I;
  #L47a15c.  if v6 == v10 then goto L47a16e;
  #L47a160.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L47a166.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a16c.  return v1;
  #L47a16e.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L47a174.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onComplete:()V` @kind virtual;
  #L47a17a.  return v1;
  #L47a17c.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a17e.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a184.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.cancel:()V` @kind virtual;
  #L47a18a.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47a18e.  v3:= new `java.lang.Throwable`[v5];
  #L47a192.  v3[v1]:= v0 @kind object;
  #L47a196.  v3[v4]:= v10 @kind object;
  #L47a19a.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47a1a0.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a1a6.  return v1;
  catch `java.lang.Throwable` @[L47a0f4..L47a0fe] goto L47a10c;
  catch `java.lang.Throwable` @[L47a118..L47a142] goto L47a17c;
}
