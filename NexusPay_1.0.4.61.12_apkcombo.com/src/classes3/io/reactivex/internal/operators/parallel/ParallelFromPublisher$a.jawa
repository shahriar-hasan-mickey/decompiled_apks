record `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `org.reactivestreams.Subscriber`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLongArray` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @AccessFlag FINAL;
  `long`[] `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimpleQueue` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @AccessFlag ;
  `int` `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.<init>:([Lorg/reactivestreams/Subscriber;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L47b024.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47b02a.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47b02e.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47b034.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L47b038.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] := v4 @kind object;
  #L47b03c.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int` := v5;
  #L47b040.  v0:= v5 ^> 2;
  #L47b044.  v5:= v5 - v0 @kind int;
  #L47b046.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int` := v5;
  #L47b04a.  v4:= length @variable v4;
  #L47b04c.  v5:= new `java.util.concurrent.atomic.AtomicLongArray`;
  #L47b050.  v0:= v4 + v4 @kind int;
  #L47b054.  v1:= v0 + 1;
  #L47b058.  call `<init>`(v5, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.<init>:(I)V` @kind direct;
  #L47b05e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` := v5 @kind object;
  #L47b062.  v1:= (`long`) v4 @kind i2l;
  #L47b064.  call `lazySet`(v5, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.lazySet:(IJ)V` @kind virtual;
  #L47b06a.  v4:= new `long`[v4];
  #L47b06e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] := v4 @kind object;
  #L47b072.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v4 @kind this, `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47b084.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L47b088.  call temp:= `decrementAndGet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.decrementAndGet:(I)J` @kind virtual;
  #L47b08e.  v0:= temp @kind wide;
  #L47b090.  v2:= 0L;
  #L47b094.  v5:= lcmp(v0, v2);
  #L47b098.  if v5 != 0 then goto L47b0c2;
  #L47b09c.  v5:= 1I;
  #L47b09e.  v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` := v5 @kind boolean;
  #L47b0a2.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b0a6.  call `cancel`(v5) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47b0ac.  call temp:= `getAndIncrement`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47b0b2.  v5:= temp;
  #L47b0b4.  if v5 != 0 then goto L47b0c2;
  #L47b0b8.  v5:= v4.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L47b0bc.  call `clear`(v5) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L47b0c2.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47b0d4.  call temp:= `getAndIncrement`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47b0da.  v0:= temp;
  #L47b0dc.  if v0 == 0 then goto L47b0e2;
  #L47b0e0.  return @kind void;
  #L47b0e2.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L47b0e6.  v1:= 1I;
  #L47b0e8.  if v0 != v1 then goto L47b0f4;
  #L47b0ec.  call `d`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @kind virtual;
  #L47b0f2.  goto L47b0fa;
  #L47b0f4.  call `c`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @kind virtual;
  #L47b0fa.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v19 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L47b10c.  v1:= v19 @kind object;
  #L47b110.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L47b114.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L47b118.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L47b11c.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L47b120.  v5:= length @variable v4;
  #L47b122.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L47b126.  v7:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int`;
  #L47b12a.  v8:= 1I;
  #L47b12c.  v9:= 1I;
  #L47b12e.  v10:= 0I;
  #L47b130.  v11:= 0I;
  #L47b132.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L47b136.  if v12 == 0 then goto L47b142;
  #L47b13a.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L47b140.  return @kind void;
  #L47b142.  v12:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` @kind boolean;
  #L47b146.  if v12 == 0 then goto L47b170;
  #L47b14a.  v13:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` @kind object;
  #L47b14e.  if v13 == 0 then goto L47b170;
  #L47b152.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L47b158.  v0:= length @variable v2;
  #L47b15a.  if v10 >= v0 then goto L47b16e;
  #L47b15e.  v3:= v2[v10] @kind object;
  #L47b162.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47b168.  v10:= v10 + 1;
  #L47b16c.  goto L47b15a;
  #L47b16e.  return @kind void;
  #L47b170.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L47b176.  v13:= temp;
  #L47b178.  if v12 == 0 then goto L47b198;
  #L47b17c.  if v13 == 0 then goto L47b198;
  #L47b180.  v0:= length @variable v2;
  #L47b182.  if v10 >= v0 then goto L47b196;
  #L47b186.  v3:= v2[v10] @kind object;
  #L47b18a.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47b190.  v10:= v10 + 1;
  #L47b194.  goto L47b182;
  #L47b196.  return @kind void;
  #L47b198.  if v13 == 0 then goto L47b19e;
  #L47b19c.  goto L47b246;
  #L47b19e.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L47b1a4.  v12:= temp @kind wide;
  #L47b1a6.  v14:= v4[v6] @kind wide;
  #L47b1aa.  v16:= lcmp(v12, v14);
  #L47b1ae.  if v16 == 0 then goto L47b236;
  #L47b1b2.  v12:= v5 + v6 @kind int;
  #L47b1b6.  call temp:= `get`(v3, v12) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L47b1bc.  v12:= temp @kind wide;
  #L47b1be.  v16:= 0L;
  #L47b1c2.  v18:= lcmp(v12, v16);
  #L47b1c6.  if v18 != 0 then goto L47b236;
  #L47b1ca.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47b1d0.  v11:= temp @kind object;
  #L47b1d2.  if v11 != 0 then goto L47b1d8;
  #L47b1d6.  goto L47b246;
  #L47b1d8.  v12:= v2[v6] @kind object;
  #L47b1dc.  call `onNext`(v12, v11) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47b1e2.  v11:= 1L;
  #L47b1e6.  v14:= v14 + v11 @kind long;
  #L47b1e8.  v4[v6]:= v14 @kind wide;
  #L47b1ec.  v7:= v7 + 1;
  #L47b1f0.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.e` @type ^`int`;
  #L47b1f4.  if v7 != v11 then goto L47b206;
  #L47b1f8.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b1fc.  v12:= (`long`) v7 @kind i2l;
  #L47b1fe.  call `request`(v11, v12) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47b204.  v7:= 0I;
  #L47b206.  v11:= 0I;
  #L47b208.  goto L47b238;
  #L47b20a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47b20c.  v3:= v0 @kind object;
  #L47b20e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47b214.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b218.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47b21e.  v0:= length @variable v2;
  #L47b220.  if v10 >= v0 then goto L47b234;
  #L47b224.  v4:= v2[v10] @kind object;
  #L47b228.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47b22e.  v10:= v10 + 1;
  #L47b232.  goto L47b220;
  #L47b234.  return @kind void;
  #L47b236.  v11:= v11 + v8 @kind int;
  #L47b238.  v6:= v6 + 1;
  #L47b23c.  if v6 != v5 then goto L47b242;
  #L47b240.  v6:= 0I;
  #L47b242.  if v11 != v5 then goto L47b132;
  #L47b246.  call temp:= `get`(v19) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47b24c.  v10:= temp;
  #L47b24e.  if v10 != v9 then goto L47b26a;
  #L47b252.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L47b256.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.m` @type ^`int` := v7;
  #L47b25a.  v9:= -v9 @kind int;
  #L47b25c.  call temp:= `addAndGet`(v1, v9) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47b262.  v9:= temp;
  #L47b264.  if v9 != 0 then goto L47b12e;
  #L47b268.  return @kind void;
  #L47b26a.  v9:= v10;
  #L47b26c.  goto L47b12e;
  catch `java.lang.Throwable` @[L47b1ca..L47b1d2] goto L47b20a;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L47b28c.  v1:= v18 @kind object;
  #L47b290.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L47b294.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L47b298.  v3:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.b` @type ^`java.util.concurrent.atomic.AtomicLongArray` @kind object;
  #L47b29c.  v4:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.c` @type ^`long`[] @kind object;
  #L47b2a0.  v5:= length @variable v4;
  #L47b2a2.  v6:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int`;
  #L47b2a6.  v7:= 1I;
  #L47b2a8.  v8:= 1I;
  #L47b2aa.  v9:= 0I;
  #L47b2ac.  v10:= 0I;
  #L47b2ae.  v11:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L47b2b2.  if v11 == 0 then goto L47b2be;
  #L47b2b6.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L47b2bc.  return @kind void;
  #L47b2be.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L47b2c4.  v11:= temp;
  #L47b2c6.  if v11 == 0 then goto L47b2e2;
  #L47b2ca.  v0:= length @variable v2;
  #L47b2cc.  if v9 >= v0 then goto L47b2e0;
  #L47b2d0.  v3:= v2[v9] @kind object;
  #L47b2d4.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47b2da.  v9:= v9 + 1;
  #L47b2de.  goto L47b2cc;
  #L47b2e0.  return @kind void;
  #L47b2e2.  call temp:= `get`(v3, v6) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L47b2e8.  v11:= temp @kind wide;
  #L47b2ea.  v13:= v4[v6] @kind wide;
  #L47b2ee.  v15:= lcmp(v11, v13);
  #L47b2f2.  if v15 == 0 then goto L47b376;
  #L47b2f6.  v11:= v5 + v6 @kind int;
  #L47b2fa.  call temp:= `get`(v3, v11) @signature `Ljava/util/concurrent/atomic/AtomicLongArray;.get:(I)J` @kind virtual;
  #L47b300.  v11:= temp @kind wide;
  #L47b302.  v15:= 0L;
  #L47b306.  v17:= lcmp(v11, v15);
  #L47b30a.  if v17 != 0 then goto L47b376;
  #L47b30e.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47b314.  v10:= temp @kind object;
  #L47b316.  if v10 != 0 then goto L47b332;
  #L47b31a.  v0:= length @variable v2;
  #L47b31c.  if v9 >= v0 then goto L47b330;
  #L47b320.  v3:= v2[v9] @kind object;
  #L47b324.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47b32a.  v9:= v9 + 1;
  #L47b32e.  goto L47b31c;
  #L47b330.  return @kind void;
  #L47b332.  v11:= v2[v6] @kind object;
  #L47b336.  call `onNext`(v11, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47b33c.  v10:= 1L;
  #L47b340.  v13:= v13 + v10 @kind long;
  #L47b342.  v4[v6]:= v13 @kind wide;
  #L47b346.  v10:= 0I;
  #L47b348.  goto L47b378;
  #L47b34a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47b34c.  v3:= v0 @kind object;
  #L47b34e.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47b354.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b358.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47b35e.  v0:= length @variable v2;
  #L47b360.  if v9 >= v0 then goto L47b374;
  #L47b364.  v4:= v2[v9] @kind object;
  #L47b368.  call `onError`(v4, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47b36e.  v9:= v9 + 1;
  #L47b372.  goto L47b360;
  #L47b374.  return @kind void;
  #L47b376.  v10:= v10 + v7 @kind int;
  #L47b378.  v6:= v6 + 1;
  #L47b37c.  if v6 != v5 then goto L47b382;
  #L47b380.  v6:= 0I;
  #L47b382.  if v10 != v5 then goto L47b2ae;
  #L47b386.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47b38c.  v9:= temp;
  #L47b38e.  if v9 != v8 then goto L47b3a6;
  #L47b392.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.j` @type ^`int` := v6;
  #L47b396.  v8:= -v8 @kind int;
  #L47b398.  call temp:= `addAndGet`(v1, v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47b39e.  v8:= temp;
  #L47b3a0.  if v8 != 0 then goto L47b2aa;
  #L47b3a4.  return @kind void;
  #L47b3a6.  v8:= v9;
  #L47b3a8.  goto L47b2aa;
  catch `java.lang.Throwable` @[L47b30e..L47b316] goto L47b34a;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v6 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47b500.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.a` @type ^`org.reactivestreams.Subscriber`[] @kind object;
  #L47b504.  v1:= length @variable v0;
  #L47b506.  v2:= 0I;
  #L47b508.  if v2 >= v1 then goto L47b53c;
  #L47b50c.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.k` @type ^`boolean` @kind boolean;
  #L47b510.  if v3 == 0 then goto L47b516;
  #L47b514.  return @kind void;
  #L47b516.  v3:= v6.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.l` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47b51a.  v4:= v2 + 1;
  #L47b51e.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L47b524.  v3:= v0[v2] @kind object;
  #L47b528.  v5:= new `io.reactivex.internal.operators.parallel.ParallelFromPublisher$a$a`;
  #L47b52c.  call `<init>`(v5, v6, v2, v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;II)V` @kind direct;
  #L47b532.  call `onSubscribe`(v3, v5) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47b538.  v2:= v4;
  #L47b53a.  goto L47b508;
  #L47b53c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b3c8.  v0:= 1I;
  #L47b3ca.  v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v0 @kind boolean;
  #L47b3ce.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L47b3d4.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;

  #L47b3e8.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.h` @type ^`java.lang.Throwable` := v1 @kind object;
  #L47b3ec.  v1:= 1I;
  #L47b3ee.  v0.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v1 @kind boolean;
  #L47b3f2.  call `b`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L47b3f8.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b40c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int`;
  #L47b410.  if v0 != 0 then goto L47b444;
  #L47b414.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` @kind object;
  #L47b418.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47b41e.  v2:= temp;
  #L47b420.  if v2 != 0 then goto L47b444;
  #L47b424.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b428.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47b42e.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47b432.  v0:= "Queue is full?" @kind object;
  #L47b436.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47b43c.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47b442.  return @kind void;
  #L47b444.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L47b44a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a` v3 @kind this, `org.reactivestreams.Subscription` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47b45c.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47b460.  call temp:= `validate`(v0, v4) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47b466.  v0:= temp;
  #L47b468.  if v0 == 0 then goto L47b4ee;
  #L47b46c.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.f` @type ^`org.reactivestreams.Subscription` := v4 @kind object;
  #L47b470.  v0:= instanceof @variable v4 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L47b474.  if v0 == 0 then goto L47b4ca;
  #L47b478.  v0:= v4 @kind object;
  #L47b47a.  v0:= (`io.reactivex.internal.fuseable.QueueSubscription`) v0 @kind object;
  #L47b47e.  v1:= 7I;
  #L47b480.  call temp:= `requestFusion`(v0, v1) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L47b486.  v1:= temp;
  #L47b488.  v2:= 1I;
  #L47b48a.  if v1 != v2 then goto L47b4a8;
  #L47b48e.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L47b492.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47b496.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.i` @type ^`boolean` := v2 @kind boolean;
  #L47b49a.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L47b4a0.  call `b`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.b:()V` @kind virtual;
  #L47b4a6.  return @kind void;
  #L47b4a8.  v2:= 2I;
  #L47b4aa.  if v1 != v2 then goto L47b4ca;
  #L47b4ae.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.n` @type ^`int` := v1;
  #L47b4b2.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47b4b6.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L47b4bc.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L47b4c0.  v0:= (`long`) v0 @kind i2l;
  #L47b4c2.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47b4c8.  return @kind void;
  #L47b4ca.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L47b4ce.  v1:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L47b4d2.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L47b4d8.  v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.g` @type ^`io.reactivex.internal.fuseable.SimpleQueue` := v0 @kind object;
  #L47b4dc.  call `e`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFromPublisher$a;.e:()V` @kind virtual;
  #L47b4e2.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelFromPublisher$a.d` @type ^`int`;
  #L47b4e6.  v0:= (`long`) v0 @kind i2l;
  #L47b4e8.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47b4ee.  return @kind void;
}
