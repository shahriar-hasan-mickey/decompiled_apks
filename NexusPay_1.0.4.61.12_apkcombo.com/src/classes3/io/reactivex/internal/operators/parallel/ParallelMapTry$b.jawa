record `io.reactivex.internal.operators.parallel.ParallelMapTry$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c470.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c476.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47c47a.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L47c47e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47c482.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c494.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c498.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c49e.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c4b0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L47c4b4.  if v0 == 0 then goto L47c4ba;
  #L47c4b8.  return @kind void;
  #L47c4ba.  v0:= 1I;
  #L47c4bc.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47c4c0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c4c4.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c4ca.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c4dc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L47c4e0.  if v0 == 0 then goto L47c4ec;
  #L47c4e4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c4ea.  return @kind void;
  #L47c4ec.  v0:= 1I;
  #L47c4ee.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` := v0 @kind boolean;
  #L47c4f2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c4f6.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c4fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47c510.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L47c516.  v3:= temp;
  #L47c518.  if v3 != 0 then goto L47c532;
  #L47c51c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L47c520.  if v3 != 0 then goto L47c532;
  #L47c524.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c528.  v0:= 1L;
  #L47c52c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c532.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c544.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c548.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47c54e.  v0:= temp;
  #L47c550.  if v0 == 0 then goto L47c562;
  #L47c554.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47c558.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c55c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47c562.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c574.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c578.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c57e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$b` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47c374.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.e` @type ^`boolean` @kind boolean;
  #L47c378.  v1:= 0I;
  #L47c37a.  if v0 == 0 then goto L47c380;
  #L47c37e.  return v1;
  #L47c380.  v2:= 0L;
  #L47c384.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47c388.  call temp:= `apply`(v0, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c38e.  v0:= temp @kind object;
  #L47c390.  v4:= "The mapper returned a null value" @kind object;
  #L47c394.  call temp:= `requireNonNull`(v0, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c39a.  v10:= temp @kind object;
  #L47c39c.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c3a0.  call temp:= `tryOnNext`(v0, v10) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47c3a6.  v10:= temp;
  #L47c3a8.  return v10;
  #L47c3aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c3ac.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c3b2.  v4:= 1I;
  #L47c3b4.  v5:= 2I;
  #L47c3b6.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$b.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47c3ba.  v7:= 1L;
  #L47c3be.  v2:= v2 + v7 @kind long;
  #L47c3c0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47c3c6.  v7:= temp @kind object;
  #L47c3c8.  call temp:= `apply`(v6, v7, v0) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c3ce.  v6:= temp @kind object;
  #L47c3d0.  v7:= "The errorHandler returned a null item" @kind object;
  #L47c3d4.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c3da.  v6:= temp @kind object;
  #L47c3dc.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47c3e0.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L47c3e4.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47c3ea.  v6:= temp;
  #L47c3ec.  v6:= v7[v6];
  #L47c3f0.  if v6 == v4 then goto L47c384;
  #L47c3f4.  if v6 == v5 then goto L47c418;
  #L47c3f8.  v10:= 3I;
  #L47c3fa.  if v6 == v10 then goto L47c40c;
  #L47c3fe.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L47c404.  call `onError`(v9, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c40a.  return v1;
  #L47c40c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L47c412.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onComplete:()V` @kind virtual;
  #L47c418.  return v1;
  #L47c41a.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c41c.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c422.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.cancel:()V` @kind virtual;
  #L47c428.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47c42c.  v3:= new `java.lang.Throwable`[v5];
  #L47c430.  v3[v1]:= v0 @kind object;
  #L47c434.  v3[v4]:= v10 @kind object;
  #L47c438.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47c43e.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c444.  return v1;
  catch `java.lang.Throwable` @[L47c384..L47c39c] goto L47c3aa;
  catch `java.lang.Throwable` @[L47c3b6..L47c3e0] goto L47c41a;
}
