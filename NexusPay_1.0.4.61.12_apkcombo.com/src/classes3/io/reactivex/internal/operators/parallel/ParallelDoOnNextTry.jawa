record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47a514.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L47a51a.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L47a51e.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L47a522.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47a526.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a4f4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47a4f8.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L47a4fe.  v0:= temp;
  #L47a500.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47a538.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L47a53e.  v0:= temp;
  #L47a540.  if v0 != 0 then goto L47a546;
  #L47a544.  return @kind void;
  #L47a546.  v0:= length @variable v8;
  #L47a548.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L47a54c.  v2:= 0I;
  #L47a54e.  if v2 >= v0 then goto L47a596;
  #L47a552.  v3:= v8[v2] @kind object;
  #L47a556.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L47a55a.  if v4 == 0 then goto L47a57a;
  #L47a55e.  v4:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$b`;
  #L47a562.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L47a566.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47a56a.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47a56e.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L47a574.  v1[v2]:= v4 @kind object;
  #L47a578.  goto L47a590;
  #L47a57a.  v4:= new `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c`;
  #L47a57e.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47a582.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47a586.  call `<init>`(v4, v3, v5, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @kind direct;
  #L47a58c.  v1[v2]:= v4 @kind object;
  #L47a590.  v2:= v2 + 1;
  #L47a594.  goto L47a54e;
  #L47a596.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47a59a.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L47a5a0.  return @kind void;
}
