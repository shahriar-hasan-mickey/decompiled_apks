record `io.reactivex.internal.operators.parallel.ParallelMap$b` @kind class @AccessFlag FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMap$b.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$b.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$b.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$b.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c1a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c1a6.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47c1aa.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L47c1ae.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c1c0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c1c4.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c1ca.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c1dc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L47c1e0.  if v0 == 0 then goto L47c1e6;
  #L47c1e4.  return @kind void;
  #L47c1e6.  v0:= 1I;
  #L47c1e8.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L47c1ec.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c1f0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c1f6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c208.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L47c20c.  if v0 == 0 then goto L47c218;
  #L47c210.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c216.  return @kind void;
  #L47c218.  v0:= 1I;
  #L47c21a.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` := v0 @kind boolean;
  #L47c21e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c222.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c228.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c23c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.d` @type ^`boolean` @kind boolean;
  #L47c240.  if v0 == 0 then goto L47c246;
  #L47c244.  return @kind void;
  #L47c246.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47c24a.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c250.  v2:= temp @kind object;
  #L47c252.  v0:= "The mapper returned a null value" @kind object;
  #L47c256.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c25c.  v2:= temp @kind object;
  #L47c25e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c262.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47c268.  return @kind void;
  #L47c26a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c26c.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c272.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.cancel:()V` @kind virtual;
  #L47c278.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c27e.  return @kind void;
  catch `java.lang.Throwable` @[L47c246..L47c25e] goto L47c26a;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c29c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c2a0.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47c2a6.  v0:= temp;
  #L47c2a8.  if v0 == 0 then goto L47c2ba;
  #L47c2ac.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47c2b0.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c2b4.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47c2ba.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$b` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$b;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c2cc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$b.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c2d0.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c2d6.  return @kind void;
}
