record `io.reactivex.internal.operators.parallel.ParallelMapTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c688.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c68e.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47c692.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L47c696.  v0.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47c69a.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c6ac.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c6b0.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c6b6.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c6c8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L47c6cc.  if v0 == 0 then goto L47c6d2;
  #L47c6d0.  return @kind void;
  #L47c6d2.  v0:= 1I;
  #L47c6d4.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L47c6d8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c6dc.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c6e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c6f4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L47c6f8.  if v0 == 0 then goto L47c704;
  #L47c6fc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c702.  return @kind void;
  #L47c704.  v0:= 1I;
  #L47c706.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L47c70a.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c70e.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c714.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47c728.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L47c72e.  v3:= temp;
  #L47c730.  if v3 != 0 then goto L47c74a;
  #L47c734.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L47c738.  if v3 != 0 then goto L47c74a;
  #L47c73c.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c740.  v0:= 1L;
  #L47c744.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c74a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c75c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c760.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47c766.  v0:= temp;
  #L47c768.  if v0 == 0 then goto L47c77a;
  #L47c76c.  v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47c770.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c774.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47c77a.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c78c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c790.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c796.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMapTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47c590.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.e` @type ^`boolean` @kind boolean;
  #L47c594.  v1:= 0I;
  #L47c596.  if v0 == 0 then goto L47c59c;
  #L47c59a.  return v1;
  #L47c59c.  v2:= 0L;
  #L47c5a0.  v0:= 1I;
  #L47c5a2.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47c5a6.  call temp:= `apply`(v4, v10) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c5ac.  v4:= temp @kind object;
  #L47c5ae.  v5:= "The mapper returned a null value" @kind object;
  #L47c5b2.  call temp:= `requireNonNull`(v4, v5) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c5b8.  v10:= temp @kind object;
  #L47c5ba.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47c5be.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47c5c4.  return v0;
  #L47c5c6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c5c8.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c5ce.  v5:= 2I;
  #L47c5d0.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelMapTry$c.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47c5d4.  v7:= 1L;
  #L47c5d8.  v2:= v2 + v7 @kind long;
  #L47c5da.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47c5e0.  v7:= temp @kind object;
  #L47c5e2.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c5e8.  v6:= temp @kind object;
  #L47c5ea.  v7:= "The errorHandler returned a null item" @kind object;
  #L47c5ee.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c5f4.  v6:= temp @kind object;
  #L47c5f6.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47c5fa.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelMapTry$a.a` @type ^`int`[] @kind object;
  #L47c5fe.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47c604.  v6:= temp;
  #L47c606.  v6:= v7[v6];
  #L47c60a.  if v6 == v0 then goto L47c5a0;
  #L47c60e.  if v6 == v5 then goto L47c632;
  #L47c612.  v10:= 3I;
  #L47c614.  if v6 == v10 then goto L47c626;
  #L47c618.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L47c61e.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c624.  return v1;
  #L47c626.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L47c62c.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onComplete:()V` @kind virtual;
  #L47c632.  return v1;
  #L47c634.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c636.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c63c.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.cancel:()V` @kind virtual;
  #L47c642.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47c646.  v3:= new `java.lang.Throwable`[v5];
  #L47c64a.  v3[v1]:= v4 @kind object;
  #L47c64e.  v3[v0]:= v10 @kind object;
  #L47c652.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47c658.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMapTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c65e.  return v1;
  catch `java.lang.Throwable` @[L47c5a2..L47c5ba] goto L47c5c6;
  catch `java.lang.Throwable` @[L47c5d0..L47c5fa] goto L47c634;
}
