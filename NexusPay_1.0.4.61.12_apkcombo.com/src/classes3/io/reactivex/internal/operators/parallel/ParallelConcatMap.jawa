record `io.reactivex.internal.operators.parallel.ParallelConcatMap` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @AccessFlag FINAL;
  `io.reactivex.internal.util.ErrorMode` `io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object, `int` v3 , `io.reactivex.internal.util.ErrorMode` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L479fb8.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L479fbe.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L479fc2.  v1:= "mapper" @kind object;
  #L479fc6.  call temp:= `requireNonNull`(v2, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L479fcc.  v1:= temp @kind object;
  #L479fce.  v1:= (`io.reactivex.functions.Function`) v1 @kind object;
  #L479fd2.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @type ^`io.reactivex.functions.Function` := v1 @kind object;
  #L479fd6.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @type ^`int` := v3;
  #L479fda.  v1:= "errorMode" @kind object;
  #L479fde.  call temp:= `requireNonNull`(v4, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L479fe4.  v1:= temp @kind object;
  #L479fe6.  v1:= (`io.reactivex.internal.util.ErrorMode`) v1 @kind object;
  #L479fea.  v0.`io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` := v1 @kind object;
  #L479fee.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479f98.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L479f9c.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L479fa2.  v0:= temp;
  #L479fa4.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelConcatMap` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelConcatMap;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L47a000.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L47a006.  v0:= temp;
  #L47a008.  if v0 != 0 then goto L47a00e;
  #L47a00c.  return @kind void;
  #L47a00e.  v0:= length @variable v8;
  #L47a010.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L47a014.  v2:= 0I;
  #L47a016.  if v2 >= v0 then goto L47a03c;
  #L47a01a.  v3:= v8[v2] @kind object;
  #L47a01e.  v4:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47a022.  v5:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.c` @type ^`int`;
  #L47a026.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.d` @type ^`io.reactivex.internal.util.ErrorMode` @kind object;
  #L47a02a.  call temp:= `subscribe`(v3, v4, v5, v6) @signature `Lio/reactivex/internal/operators/flowable/FlowableConcatMap;.subscribe:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Function;ILio/reactivex/internal/util/ErrorMode;)Lorg/reactivestreams/Subscriber;` @kind static;
  #L47a030.  v3:= temp @kind object;
  #L47a032.  v1[v2]:= v3 @kind object;
  #L47a036.  v2:= v2 + 1;
  #L47a03a.  goto L47a016;
  #L47a03c.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelConcatMap.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47a040.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L47a046.  return @kind void;
}
