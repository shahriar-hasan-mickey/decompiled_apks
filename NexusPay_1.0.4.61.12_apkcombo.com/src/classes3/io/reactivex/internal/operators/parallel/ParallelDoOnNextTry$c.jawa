record `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @AccessFlag FINAL;
  `io.reactivex.functions.Consumer` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiFunction` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `io.reactivex.functions.Consumer` v2 @kind object, `io.reactivex.functions.BiFunction` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Consumer;Lio/reactivex/functions/BiFunction;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47a3dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47a3e2.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47a3e6.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.functions.Consumer` := v2 @kind object;
  #L47a3ea.  v0.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.functions.BiFunction` := v3 @kind object;
  #L47a3ee.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a400.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a404.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47a40a.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a41c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L47a420.  if v0 == 0 then goto L47a426;
  #L47a424.  return @kind void;
  #L47a426.  v0:= 1I;
  #L47a428.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L47a42c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47a430.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47a436.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a448.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L47a44c.  if v0 == 0 then goto L47a458;
  #L47a450.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47a456.  return @kind void;
  #L47a458.  v0:= 1I;
  #L47a45a.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` := v0 @kind boolean;
  #L47a45e.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47a462.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47a468.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a47c.  call temp:= `tryOnNext`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @kind virtual;
  #L47a482.  v3:= temp;
  #L47a484.  if v3 != 0 then goto L47a496;
  #L47a488.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a48c.  v0:= 1L;
  #L47a490.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47a496.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a4a8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a4ac.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47a4b2.  v0:= temp;
  #L47a4b4.  if v0 == 0 then goto L47a4c6;
  #L47a4b8.  v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47a4bc.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47a4c0.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47a4c6.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a4d8.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.d` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a4dc.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47a4e2.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c` v9 @kind this, `java.lang.Object` v10 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L47a2f0.  v0:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.e` @type ^`boolean` @kind boolean;
  #L47a2f4.  v1:= 0I;
  #L47a2f6.  if v0 == 0 then goto L47a2fc;
  #L47a2fa.  return v1;
  #L47a2fc.  v2:= 0L;
  #L47a300.  v0:= 1I;
  #L47a302.  v4:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.b` @type ^`io.reactivex.functions.Consumer` @kind object;
  #L47a306.  call `accept`(v4, v10) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L47a30c.  v1:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47a310.  call `onNext`(v1, v10) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47a316.  return v0;
  #L47a318.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a31a.  call `throwIfFatal`(v4) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a320.  v5:= 2I;
  #L47a322.  v6:= v9.`io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$c.c` @type ^`io.reactivex.functions.BiFunction` @kind object;
  #L47a326.  v7:= 1L;
  #L47a32a.  v2:= v2 + v7 @kind long;
  #L47a32c.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L47a332.  v7:= temp @kind object;
  #L47a334.  call temp:= `apply`(v6, v7, v4) @signature `Lio/reactivex/functions/BiFunction;.apply:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47a33a.  v6:= temp @kind object;
  #L47a33c.  v7:= "The errorHandler returned a null item" @kind object;
  #L47a340.  call temp:= `requireNonNull`(v6, v7) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47a346.  v6:= temp @kind object;
  #L47a348.  v6:= (`io.reactivex.parallel.ParallelFailureHandling`) v6 @kind object;
  #L47a34c.  v7:= `@@io.reactivex.internal.operators.parallel.ParallelDoOnNextTry$a.a` @type ^`int`[] @kind object;
  #L47a350.  call temp:= `ordinal`(v6) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L47a356.  v6:= temp;
  #L47a358.  v6:= v7[v6];
  #L47a35c.  if v6 == v0 then goto L47a300;
  #L47a360.  if v6 == v5 then goto L47a384;
  #L47a364.  v10:= 3I;
  #L47a366.  if v6 == v10 then goto L47a378;
  #L47a36a.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L47a370.  call `onError`(v9, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a376.  return v1;
  #L47a378.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L47a37e.  call `onComplete`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onComplete:()V` @kind virtual;
  #L47a384.  return v1;
  #L47a386.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a388.  call `throwIfFatal`(v10) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a38e.  call `cancel`(v9) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.cancel:()V` @kind virtual;
  #L47a394.  v2:= new `io.reactivex.exceptions.CompositeException`;
  #L47a398.  v3:= new `java.lang.Throwable`[v5];
  #L47a39c.  v3[v1]:= v4 @kind object;
  #L47a3a0.  v3[v0]:= v10 @kind object;
  #L47a3a4.  call `<init>`(v2, v3) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @kind direct;
  #L47a3aa.  call `onError`(v9, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelDoOnNextTry$c;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a3b0.  return v1;
  catch `java.lang.Throwable` @[L47a302..L47a30c] goto L47a318;
  catch `java.lang.Throwable` @[L47a322..L47a34c] goto L47a386;
}
