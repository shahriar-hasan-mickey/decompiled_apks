record `io.reactivex.internal.operators.parallel.ParallelRunOn$a` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `java.lang.Runnable` @kind interface {
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @AccessFlag FINAL;
  `io.reactivex.internal.queue.SpscArrayQueue` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler$Worker` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @AccessFlag VOLATILE;
  `int` `io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @AccessFlag ;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L47d378.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47d37e.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L47d382.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47d388.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L47d38c.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int` := v2;
  #L47d390.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` := v3 @kind object;
  #L47d394.  v3:= v2 ^> 2;
  #L47d398.  v2:= v2 - v3 @kind int;
  #L47d39a.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int` := v2;
  #L47d39e.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` := v4 @kind object;
  #L47d3a2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.a:()V` @AccessFlag FINAL {
    temp;
    v0;

  #L47d4e0.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47d4e6.  v0:= temp;
  #L47d4e8.  if v0 != 0 then goto L47d4f6;
  #L47d4ec.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d4f0.  call temp:= `schedule`(v0, v1) @signature `Lio/reactivex/Scheduler$Worker;.schedule:(Ljava/lang/Runnable;)Lio/reactivex/disposables/Disposable;` @kind virtual;
  #L47d4f6.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d3b4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L47d3b8.  if v0 != 0 then goto L47d3ec;
  #L47d3bc.  v0:= 1I;
  #L47d3be.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` := v0 @kind boolean;
  #L47d3c2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d3c6.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47d3cc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d3d0.  call `dispose`(v0) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d3d6.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47d3dc.  v0:= temp;
  #L47d3de.  if v0 != 0 then goto L47d3ec;
  #L47d3e2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L47d3e6.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d3ec.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.onComplete:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d400.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d404.  if v0 == 0 then goto L47d40a;
  #L47d408.  return @kind void;
  #L47d40a.  v0:= 1I;
  #L47d40c.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` := v0 @kind boolean;
  #L47d410.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L47d416.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d428.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d42c.  if v0 == 0 then goto L47d438;
  #L47d430.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47d436.  return @kind void;
  #L47d438.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L47d43c.  v2:= 1I;
  #L47d43e.  v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` := v2 @kind boolean;
  #L47d442.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L47d448.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d45c.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d460.  if v0 == 0 then goto L47d466;
  #L47d464.  return @kind void;
  #L47d466.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L47d46a.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L47d470.  v2:= temp;
  #L47d472.  if v2 != 0 then goto L47d496;
  #L47d476.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d47a.  call `cancel`(v2) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47d480.  v2:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47d484.  v0:= "Queue is full?!" @kind object;
  #L47d488.  call `<init>`(v2, v0) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47d48e.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47d494.  return @kind void;
  #L47d496.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L47d49c.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelRunOn$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L47d4b0.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L47d4b6.  v0:= temp;
  #L47d4b8.  if v0 == 0 then goto L47d4cc;
  #L47d4bc.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47d4c0.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L47d4c6.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.a:()V` @kind virtual;
  #L47d4cc.  return @kind void;
}
