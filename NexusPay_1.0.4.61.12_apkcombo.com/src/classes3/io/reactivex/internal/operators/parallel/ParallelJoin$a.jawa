record `io.reactivex.internal.operators.parallel.ParallelJoin$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.FlowableSubscriber` @kind interface {
  `io.reactivex.internal.operators.parallel.ParallelJoin$c` `io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @AccessFlag FINAL;
  `int` `io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @AccessFlag FINAL;
  `long` `io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @AccessFlag ;
  `io.reactivex.internal.fuseable.SimplePlainQueue` `io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v0 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind object, `int` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$c;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47b60c.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L47b612.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` := v1 @kind object;
  #L47b616.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int` := v2;
  #L47b61a.  v1:= v2 ^> 2;
  #L47b61e.  v2:= v2 - v1 @kind int;
  #L47b620.  v0.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int` := v2;
  #L47b624.  return @kind void;
}
procedure `boolean` `a`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b5c4.  call temp:= `cancel`(v1) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L47b5ca.  v0:= temp;
  #L47b5cc.  return v0;
}
procedure `io.reactivex.internal.fuseable.SimplePlainQueue` `b`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v2 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L47b5e0.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47b5e4.  if v0 != 0 then goto L47b5fa;
  #L47b5e8.  v0:= new `io.reactivex.internal.queue.SpscArrayQueue`;
  #L47b5ec.  v1:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int`;
  #L47b5f0.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.<init>:(I)V` @kind direct;
  #L47b5f6.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v0 @kind object;
  #L47b5fa.  return v0 @kind object;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v3 @kind this, `long` v4 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L47b6ac.  v0:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` @kind wide;
  #L47b6b0.  v0:= v0 + v4 @kind long;
  #L47b6b2.  v4:= v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int`;
  #L47b6b6.  v4:= (`long`) v4 @kind i2l;
  #L47b6b8.  v2:= lcmp(v0, v4);
  #L47b6bc.  if v2 < 0 then goto L47b6dc;
  #L47b6c0.  v4:= 0L;
  #L47b6c4.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v4 @kind wide;
  #L47b6c8.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47b6ce.  v4:= temp @kind object;
  #L47b6d0.  v4:= (`org.reactivestreams.Subscription`) v4 @kind object;
  #L47b6d4.  call `request`(v4, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47b6da.  goto L47b6e0;
  #L47b6dc.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v0 @kind wide;
  #L47b6e0.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47b6f4.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` @kind wide;
  #L47b6f8.  v2:= 1L;
  #L47b6fc.  v0:= v0 + v2 @kind long;
  #L47b6fe.  v2:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.c` @type ^`int`;
  #L47b702.  v2:= (`long`) v2 @kind i2l;
  #L47b704.  v4:= lcmp(v0, v2);
  #L47b708.  if v4 != 0 then goto L47b728;
  #L47b70c.  v2:= 0L;
  #L47b710.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v2 @kind wide;
  #L47b714.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47b71a.  v2:= temp @kind object;
  #L47b71c.  v2:= (`org.reactivestreams.Subscription`) v2 @kind object;
  #L47b720.  call `request`(v2, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47b726.  goto L47b72c;
  #L47b728.  v5.`io.reactivex.internal.operators.parallel.ParallelJoin$a.d` @type ^`long` := v0 @kind wide;
  #L47b72c.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b638.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L47b63c.  call `d`(v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.d:()V` @kind virtual;
  #L47b642.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b654.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L47b658.  call `e`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47b65e.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b670.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$a.a` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind object;
  #L47b674.  call `f`(v0, v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @kind virtual;
  #L47b67a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47b68c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$a.b` @type ^`int`;
  #L47b690.  v0:= (`long`) v0 @kind i2l;
  #L47b692.  call temp:= `setOnce`(v2, v3, v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.setOnce:(Ljava/util/concurrent/atomic/AtomicReference;Lorg/reactivestreams/Subscription;J)Z` @kind static;
  #L47b698.  return @kind void;
}
