record `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class @AccessFlag ABSTRACT extends `java.util.concurrent.atomic.AtomicInteger` @kind class, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @AccessFlag FINAL;
  `io.reactivex.internal.operators.parallel.ParallelJoin$a`[] `io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @AccessFlag FINAL;
  `io.reactivex.internal.util.AtomicThrowable` `io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @AccessFlag VOLATILE;
  `java.util.concurrent.atomic.AtomicInteger` `io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$c.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L47b740.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47b746.  v0:= new `io.reactivex.internal.util.AtomicThrowable`;
  #L47b74a.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/AtomicThrowable;.<init>:()V` @kind direct;
  #L47b750.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` := v0 @kind object;
  #L47b754.  v0:= new `java.util.concurrent.atomic.AtomicLong`;
  #L47b758.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:()V` @kind direct;
  #L47b75e.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v0 @kind object;
  #L47b762.  v0:= new `java.util.concurrent.atomic.AtomicInteger`;
  #L47b766.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.<init>:()V` @kind direct;
  #L47b76c.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` := v0 @kind object;
  #L47b770.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` := v3 @kind object;
  #L47b774.  v3:= new `io.reactivex.internal.operators.parallel.ParallelJoin$a`[v4];
  #L47b778.  v0:= 0I;
  #L47b77a.  if v0 >= v4 then goto L47b792;
  #L47b77e.  v1:= new `io.reactivex.internal.operators.parallel.ParallelJoin$a`;
  #L47b782.  call `<init>`(v1, v2, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.<init>:(Lio/reactivex/internal/operators/parallel/ParallelJoin$c;I)V` @kind direct;
  #L47b788.  v3[v0]:= v1 @kind object;
  #L47b78c.  v0:= v0 + 1;
  #L47b790.  goto L47b77a;
  #L47b792.  v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] := v3 @kind object;
  #L47b796.  v3:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47b79a.  call `lazySet`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.lazySet:(I)V` @kind virtual;
  #L47b7a0.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v4 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L47b7ec.  v0:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L47b7f0.  v1:= length @variable v0;
  #L47b7f2.  v2:= 0I;
  #L47b7f4.  if v2 >= v1 then goto L47b808;
  #L47b7f8.  v3:= v0[v2] @kind object;
  #L47b7fc.  call temp:= `a`(v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.a:()Z` @kind virtual;
  #L47b802.  v2:= v2 + 1;
  #L47b806.  goto L47b7f4;
  #L47b808.  return @kind void;
}
procedure `void` `b`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v5 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L47b81c.  v0:= v5.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L47b820.  v1:= length @variable v0;
  #L47b822.  v2:= 0I;
  #L47b824.  if v2 >= v1 then goto L47b838;
  #L47b828.  v3:= v0[v2] @kind object;
  #L47b82c.  v4:= 0I;
  #L47b82e.  v3.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` := v4 @kind object;
  #L47b832.  v2:= v2 + 1;
  #L47b836.  goto L47b824;
  #L47b838.  return @kind void;
}
procedure `void` `c`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.c:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b7b4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L47b7b8.  if v0 != 0 then goto L47b7da;
  #L47b7bc.  v0:= 1I;
  #L47b7be.  v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` := v0 @kind boolean;
  #L47b7c2.  call `a`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L47b7c8.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47b7ce.  v0:= temp;
  #L47b7d0.  if v0 != 0 then goto L47b7da;
  #L47b7d4.  call `b`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47b7da.  return @kind void;
}
procedure `void` `d`() @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.d:()V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `e`(`java.lang.Throwable` v0 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.e:(Ljava/lang/Throwable;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$a` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag ABSTRACT {

  # return;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelJoin$c` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47b84c.  call temp:= `validate`(v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(J)Z` @kind static;
  #L47b852.  v0:= temp;
  #L47b854.  if v0 == 0 then goto L47b868;
  #L47b858.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47b85c.  call temp:= `add`(v0, v2) @signature `Lio/reactivex/internal/util/BackpressureHelper;.add:(Ljava/util/concurrent/atomic/AtomicLong;J)J` @kind static;
  #L47b862.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.c:()V` @kind virtual;
  #L47b868.  return @kind void;
}
