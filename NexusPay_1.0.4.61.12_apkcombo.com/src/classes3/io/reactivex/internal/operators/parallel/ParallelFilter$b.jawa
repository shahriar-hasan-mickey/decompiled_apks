record `io.reactivex.internal.operators.parallel.ParallelFilter$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelFilter$a` @kind class {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47a698.  call `<init>`(v0, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.<init>:(Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L47a69e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47a6a2.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a6b4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L47a6b8.  if v0 != 0 then goto L47a6cc;
  #L47a6bc.  v0:= 1I;
  #L47a6be.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L47a6c2.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a6c6.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47a6cc.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a6e0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L47a6e4.  if v0 == 0 then goto L47a6f0;
  #L47a6e8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47a6ee.  return @kind void;
  #L47a6f0.  v0:= 1I;
  #L47a6f2.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` := v0 @kind boolean;
  #L47a6f6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a6fa.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47a700.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47a714.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47a718.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47a71e.  v0:= temp;
  #L47a720.  if v0 == 0 then goto L47a732;
  #L47a724.  v1.`io.reactivex.internal.operators.parallel.ParallelFilter$a.b` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47a728.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a72c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47a732.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelFilter$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47a63c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.c` @type ^`boolean` @kind boolean;
  #L47a640.  v1:= 0I;
  #L47a642.  if v0 != 0 then goto L47a678;
  #L47a646.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$a.a` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L47a64a.  call temp:= `test`(v0, v3) @signature `Lio/reactivex/functions/Predicate;.test:(Ljava/lang/Object;)Z` @kind interface;
  #L47a650.  v0:= temp;
  #L47a652.  if v0 == 0 then goto L47a678;
  #L47a656.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelFilter$b.d` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47a65a.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47a660.  v3:= temp;
  #L47a662.  return v3;
  #L47a664.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47a666.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47a66c.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$a;.cancel:()V` @kind virtual;
  #L47a672.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47a678.  return v1;
  catch `java.lang.Throwable` @[L47a646..L47a652] goto L47a664;
}
