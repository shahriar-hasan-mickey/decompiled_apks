record `io.reactivex.internal.operators.parallel.ParallelRunOn$d` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelRunOn$a` @kind class {
  `org.reactivestreams.Subscriber` `io.reactivex.internal.operators.parallel.ParallelRunOn$d.k` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelRunOn$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelRunOn$d` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `io.reactivex.internal.queue.SpscArrayQueue` v3 @kind object, `io.reactivex.Scheduler$Worker` v4 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$d;.<init>:(Lorg/reactivestreams/Subscriber;ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47d72c.  call `<init>`(v0, v2, v3, v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$a;.<init>:(ILio/reactivex/internal/queue/SpscArrayQueue;Lio/reactivex/Scheduler$Worker;)V` @kind direct;
  #L47d732.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$d.k` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L47d736.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelRunOn$d` v2 @kind this, `org.reactivestreams.Subscription` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$d;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47d748.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d74c.  call temp:= `validate`(v0, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47d752.  v0:= temp;
  #L47d754.  if v0 == 0 then goto L47d772;
  #L47d758.  v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` := v3 @kind object;
  #L47d75c.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$d.k` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47d760.  call `onSubscribe`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47d766.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.a` @type ^`int`;
  #L47d76a.  v0:= (`long`) v0 @kind i2l;
  #L47d76c.  call `request`(v3, v0) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47d772.  return @kind void;
}
procedure `void` `run`(`io.reactivex.internal.operators.parallel.ParallelRunOn$d` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelRunOn$d;.run:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L47d784.  v0:= v18 @kind object;
  #L47d788.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int`;
  #L47d78c.  v2:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.c` @type ^`io.reactivex.internal.queue.SpscArrayQueue` @kind object;
  #L47d790.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$d.k` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47d794.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.b` @type ^`int`;
  #L47d798.  v5:= 1I;
  #L47d79a.  v6:= 1I;
  #L47d79c.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47d7a0.  call temp:= `get`(v7) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47d7a6.  v7:= temp @kind wide;
  #L47d7a8.  v9:= 0L;
  #L47d7ac.  v11:= v9 @kind wide;
  #L47d7ae.  v13:= lcmp(v11, v7);
  #L47d7b2.  if v13 == 0 then goto L47d84c;
  #L47d7b6.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L47d7ba.  if v14 == 0 then goto L47d7c6;
  #L47d7be.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d7c4.  return @kind void;
  #L47d7c6.  v14:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d7ca.  if v14 == 0 then goto L47d7ee;
  #L47d7ce.  v15:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L47d7d2.  if v15 == 0 then goto L47d7ee;
  #L47d7d6.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d7dc.  call `onError`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d7e2.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d7e6.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d7ec.  return @kind void;
  #L47d7ee.  call temp:= `poll`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L47d7f4.  v15:= temp @kind object;
  #L47d7f6.  v16:= 0I;
  #L47d7fa.  if v15 != 0 then goto L47d804;
  #L47d7fe.  v17:= 1I;
  #L47d802.  goto L47d808;
  #L47d804.  v17:= 0I;
  #L47d808.  if v14 == 0 then goto L47d822;
  #L47d80c.  if v17 == 0 then goto L47d822;
  #L47d810.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d816.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d81a.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d820.  return @kind void;
  #L47d822.  if v17 == 0 then goto L47d828;
  #L47d826.  goto L47d84c;
  #L47d828.  call `onNext`(v3, v15) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47d82e.  v13:= 1L;
  #L47d832.  v11:= v11 + v13 @kind long;
  #L47d834.  v1:= v1 + 1;
  #L47d838.  if v1 != v4 then goto L47d7ae;
  #L47d83c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.e` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47d840.  v14:= (`long`) v1 @kind i2l;
  #L47d842.  call `request`(v13, v14) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47d848.  v1:= 0I;
  #L47d84a.  goto L47d7ae;
  #L47d84c.  if v13 != 0 then goto L47d8a6;
  #L47d850.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.i` @type ^`boolean` @kind boolean;
  #L47d854.  if v13 == 0 then goto L47d860;
  #L47d858.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d85e.  return @kind void;
  #L47d860.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.f` @type ^`boolean` @kind boolean;
  #L47d864.  if v13 == 0 then goto L47d8a6;
  #L47d868.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.g` @type ^`java.lang.Throwable` @kind object;
  #L47d86c.  if v13 == 0 then goto L47d888;
  #L47d870.  call `clear`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.clear:()V` @kind virtual;
  #L47d876.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47d87c.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d880.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d886.  return @kind void;
  #L47d888.  call temp:= `isEmpty`(v2) @signature `Lio/reactivex/internal/queue/SpscArrayQueue;.isEmpty:()Z` @kind virtual;
  #L47d88e.  v13:= temp;
  #L47d890.  if v13 == 0 then goto L47d8a6;
  #L47d894.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47d89a.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.d` @type ^`io.reactivex.Scheduler$Worker` @kind object;
  #L47d89e.  call `dispose`(v1) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L47d8a4.  return @kind void;
  #L47d8a6.  v13:= lcmp(v11, v9);
  #L47d8aa.  if v13 == 0 then goto L47d8cc;
  #L47d8ae.  v9:= 9223372036854775807L;
  #L47d8b8.  v13:= lcmp(v7, v9);
  #L47d8bc.  if v13 == 0 then goto L47d8cc;
  #L47d8c0.  v7:= v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.h` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47d8c4.  v8:= -v11 @kind long;
  #L47d8c6.  call temp:= `addAndGet`(v7, v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L47d8cc.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47d8d2.  v7:= temp;
  #L47d8d4.  if v7 != v6 then goto L47d8ec;
  #L47d8d8.  v0.`io.reactivex.internal.operators.parallel.ParallelRunOn$a.j` @type ^`int` := v1;
  #L47d8dc.  v6:= -v6 @kind int;
  #L47d8de.  call temp:= `addAndGet`(v0, v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47d8e4.  v6:= temp;
  #L47d8e6.  if v6 != 0 then goto L47d79c;
  #L47d8ea.  return @kind void;
  #L47d8ec.  v6:= v7;
  #L47d8ee.  goto L47d79c;
}
