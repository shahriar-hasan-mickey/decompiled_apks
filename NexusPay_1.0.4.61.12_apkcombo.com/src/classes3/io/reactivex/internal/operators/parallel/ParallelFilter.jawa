record `io.reactivex.internal.operators.parallel.ParallelFilter` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelFilter.a` @AccessFlag FINAL;
  `io.reactivex.functions.Predicate` `io.reactivex.internal.operators.parallel.ParallelFilter.b` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelFilter` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `io.reactivex.functions.Predicate` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Lio/reactivex/functions/Predicate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L47ad84.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L47ad8a.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L47ad8e.  v0.`io.reactivex.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.functions.Predicate` := v2 @kind object;
  #L47ad92.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelFilter` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47ad64.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47ad68.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L47ad6e.  v0:= temp;
  #L47ad70.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelFilter` v6 @kind this, `org.reactivestreams.Subscriber`[] v7 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47ada4.  call temp:= `validate`(v6, v7) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L47adaa.  v0:= temp;
  #L47adac.  if v0 != 0 then goto L47adb2;
  #L47adb0.  return @kind void;
  #L47adb2.  v0:= length @variable v7;
  #L47adb4.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L47adb8.  v2:= 0I;
  #L47adba.  if v2 >= v0 then goto L47adfa;
  #L47adbe.  v3:= v7[v2] @kind object;
  #L47adc2.  v4:= instanceof @variable v3 @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind boolean;
  #L47adc6.  if v4 == 0 then goto L47ade2;
  #L47adca.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilter$b`;
  #L47adce.  v3:= (`io.reactivex.internal.fuseable.ConditionalSubscriber`) v3 @kind object;
  #L47add2.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L47add6.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$b;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L47addc.  v1[v2]:= v4 @kind object;
  #L47ade0.  goto L47adf4;
  #L47ade2.  v4:= new `io.reactivex.internal.operators.parallel.ParallelFilter$c`;
  #L47ade6.  v5:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.b` @type ^`io.reactivex.functions.Predicate` @kind object;
  #L47adea.  call `<init>`(v4, v3, v5) @signature `Lio/reactivex/internal/operators/parallel/ParallelFilter$c;.<init>:(Lorg/reactivestreams/Subscriber;Lio/reactivex/functions/Predicate;)V` @kind direct;
  #L47adf0.  v1[v2]:= v4 @kind object;
  #L47adf4.  v2:= v2 + 1;
  #L47adf8.  goto L47adba;
  #L47adfa.  v7:= v6.`io.reactivex.internal.operators.parallel.ParallelFilter.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L47adfe.  call `subscribe`(v7, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L47ae04.  return @kind void;
}
