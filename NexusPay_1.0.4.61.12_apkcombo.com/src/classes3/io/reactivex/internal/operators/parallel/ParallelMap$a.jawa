record `io.reactivex.internal.operators.parallel.ParallelMap$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.fuseable.ConditionalSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `io.reactivex.internal.fuseable.ConditionalSubscriber` `io.reactivex.internal.operators.parallel.ParallelMap$a.a` @AccessFlag FINAL;
  `io.reactivex.functions.Function` `io.reactivex.internal.operators.parallel.ParallelMap$a.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.internal.operators.parallel.ParallelMap$a.c` @AccessFlag ;
  `boolean` `io.reactivex.internal.operators.parallel.ParallelMap$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v0 @kind this, `io.reactivex.internal.fuseable.ConditionalSubscriber` v1 @kind object, `io.reactivex.functions.Function` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.<init>:(Lio/reactivex/internal/fuseable/ConditionalSubscriber;Lio/reactivex/functions/Function;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47c058.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L47c05e.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` := v1 @kind object;
  #L47c062.  v0.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` := v2 @kind object;
  #L47c066.  return @kind void;
}
procedure `void` `cancel`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c078.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c07c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L47c082.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c094.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L47c098.  if v0 == 0 then goto L47c09e;
  #L47c09c.  return @kind void;
  #L47c09e.  v0:= 1I;
  #L47c0a0.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L47c0a4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c0a8.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47c0ae.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c0c0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L47c0c4.  if v0 == 0 then goto L47c0d0;
  #L47c0c8.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47c0ce.  return @kind void;
  #L47c0d0.  v0:= 1I;
  #L47c0d2.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` := v0 @kind boolean;
  #L47c0d6.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c0da.  call `onError`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47c0e0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c0f4.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L47c0f8.  if v0 == 0 then goto L47c0fe;
  #L47c0fc.  return @kind void;
  #L47c0fe.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47c102.  call temp:= `apply`(v0, v2) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c108.  v2:= temp @kind object;
  #L47c10a.  v0:= "The mapper returned a null value" @kind object;
  #L47c10e.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c114.  v2:= temp @kind object;
  #L47c116.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c11a.  call `onNext`(v0, v2) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47c120.  return @kind void;
  #L47c122.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c124.  call `throwIfFatal`(v2) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c12a.  call `cancel`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L47c130.  call `onError`(v1, v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c136.  return @kind void;
  catch `java.lang.Throwable` @[L47c0fe..L47c116] goto L47c122;
}
procedure `void` `onSubscribe`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c154.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c158.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L47c15e.  v0:= temp;
  #L47c160.  if v0 == 0 then goto L47c172;
  #L47c164.  v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L47c168.  v2:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c16c.  call `onSubscribe`(v2, v1) @signature `Lio/reactivex/FlowableSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L47c172.  return @kind void;
}
procedure `void` `request`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47c184.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelMap$a.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L47c188.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L47c18e.  return @kind void;
}
procedure `boolean` `tryOnNext`(`io.reactivex.internal.operators.parallel.ParallelMap$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.tryOnNext:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47bff4.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.d` @type ^`boolean` @kind boolean;
  #L47bff8.  v1:= 0I;
  #L47bffa.  if v0 == 0 then goto L47c000;
  #L47bffe.  return v1;
  #L47c000.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.b` @type ^`io.reactivex.functions.Function` @kind object;
  #L47c004.  call temp:= `apply`(v0, v3) @signature `Lio/reactivex/functions/Function;.apply:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L47c00a.  v3:= temp @kind object;
  #L47c00c.  v0:= "The mapper returned a null value" @kind object;
  #L47c010.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L47c016.  v3:= temp @kind object;
  #L47c018.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelMap$a.a` @type ^`io.reactivex.internal.fuseable.ConditionalSubscriber` @kind object;
  #L47c01c.  call temp:= `tryOnNext`(v0, v3) @signature `Lio/reactivex/internal/fuseable/ConditionalSubscriber;.tryOnNext:(Ljava/lang/Object;)Z` @kind interface;
  #L47c022.  v3:= temp;
  #L47c024.  return v3;
  #L47c026.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L47c028.  call `throwIfFatal`(v3) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L47c02e.  call `cancel`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.cancel:()V` @kind virtual;
  #L47c034.  call `onError`(v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelMap$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47c03a.  return v1;
  catch `java.lang.Throwable` @[L47c000..L47c018] goto L47c026;
}
