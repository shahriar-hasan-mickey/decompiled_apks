record `io.reactivex.internal.operators.parallel.ParallelCollect` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.parallel.ParallelFlowable` @kind class {
  `io.reactivex.parallel.ParallelFlowable` `io.reactivex.internal.operators.parallel.ParallelCollect.a` @AccessFlag FINAL;
  `java.util.concurrent.Callable` `io.reactivex.internal.operators.parallel.ParallelCollect.b` @AccessFlag FINAL;
  `io.reactivex.functions.BiConsumer` `io.reactivex.internal.operators.parallel.ParallelCollect.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelCollect` v0 @kind this, `io.reactivex.parallel.ParallelFlowable` v1 @kind object, `java.util.concurrent.Callable` v2 @kind object, `io.reactivex.functions.BiConsumer` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.<init>:(Lio/reactivex/parallel/ParallelFlowable;Ljava/util/concurrent/Callable;Lio/reactivex/functions/BiConsumer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L479ec0.  call `<init>`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.<init>:()V` @kind direct;
  #L479ec6.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.a` @type ^`io.reactivex.parallel.ParallelFlowable` := v1 @kind object;
  #L479eca.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.b` @type ^`java.util.concurrent.Callable` := v2 @kind object;
  #L479ece.  v0.`io.reactivex.internal.operators.parallel.ParallelCollect.c` @type ^`io.reactivex.functions.BiConsumer` := v3 @kind object;
  #L479ed2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.internal.operators.parallel.ParallelCollect` v3 @kind this, `org.reactivestreams.Subscriber`[] v4 @kind object, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.a:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L479ee4.  v0:= length @variable v4;
  #L479ee6.  v1:= 0I;
  #L479ee8.  if v1 >= v0 then goto L479efc;
  #L479eec.  v2:= v4[v1] @kind object;
  #L479ef0.  call `error`(v5, v2) @signature `Lio/reactivex/internal/subscriptions/EmptySubscription;.error:(Ljava/lang/Throwable;Lorg/reactivestreams/Subscriber;)V` @kind static;
  #L479ef6.  v1:= v1 + 1;
  #L479efa.  goto L479ee8;
  #L479efc.  return @kind void;
}
procedure `int` `parallelism`(`io.reactivex.internal.operators.parallel.ParallelCollect` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.parallelism:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L479ea0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelCollect.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L479ea4.  call temp:= `parallelism`(v0) @signature `Lio/reactivex/parallel/ParallelFlowable;.parallelism:()I` @kind virtual;
  #L479eaa.  v0:= temp;
  #L479eac.  return v0;
}
procedure `void` `subscribe`(`io.reactivex.internal.operators.parallel.ParallelCollect` v7 @kind this, `org.reactivestreams.Subscriber`[] v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L479f10.  call temp:= `validate`(v7, v8) @signature `Lio/reactivex/parallel/ParallelFlowable;.validate:([Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L479f16.  v0:= temp;
  #L479f18.  if v0 != 0 then goto L479f1e;
  #L479f1c.  return @kind void;
  #L479f1e.  v0:= length @variable v8;
  #L479f20.  v1:= new `org.reactivestreams.Subscriber`[v0];
  #L479f24.  v2:= 0I;
  #L479f26.  if v2 >= v0 then goto L479f6e;
  #L479f2a.  v3:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.b` @type ^`java.util.concurrent.Callable` @kind object;
  #L479f2e.  call temp:= `call`(v3) @signature `Ljava/util/concurrent/Callable;.call:()Ljava/lang/Object;` @kind interface;
  #L479f34.  v3:= temp @kind object;
  #L479f36.  v4:= "The initialSupplier returned a null value" @kind object;
  #L479f3a.  call temp:= `requireNonNull`(v3, v4) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L479f40.  v3:= temp @kind object;
  #L479f42.  v4:= new `io.reactivex.internal.operators.parallel.ParallelCollect$a`;
  #L479f46.  v5:= v8[v2] @kind object;
  #L479f4a.  v6:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.c` @type ^`io.reactivex.functions.BiConsumer` @kind object;
  #L479f4e.  call `<init>`(v4, v5, v3, v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect$a;.<init>:(Lorg/reactivestreams/Subscriber;Ljava/lang/Object;Lio/reactivex/functions/BiConsumer;)V` @kind direct;
  #L479f54.  v1[v2]:= v4 @kind object;
  #L479f58.  v2:= v2 + 1;
  #L479f5c.  goto L479f26;
  #L479f5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L479f60.  call `throwIfFatal`(v0) @signature `Lio/reactivex/exceptions/Exceptions;.throwIfFatal:(Ljava/lang/Throwable;)V` @kind static;
  #L479f66.  call `a`(v7, v8, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelCollect;.a:([Lorg/reactivestreams/Subscriber;Ljava/lang/Throwable;)V` @kind virtual;
  #L479f6c.  return @kind void;
  #L479f6e.  v8:= v7.`io.reactivex.internal.operators.parallel.ParallelCollect.a` @type ^`io.reactivex.parallel.ParallelFlowable` @kind object;
  #L479f72.  call `subscribe`(v8, v1) @signature `Lio/reactivex/parallel/ParallelFlowable;.subscribe:([Lorg/reactivestreams/Subscriber;)V` @kind virtual;
  #L479f78.  return @kind void;
  catch `java.lang.Throwable` @[L479f2a..L479f42] goto L479f5e;
}
