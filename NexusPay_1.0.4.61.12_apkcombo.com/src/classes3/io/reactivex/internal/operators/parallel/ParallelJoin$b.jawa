record `io.reactivex.internal.operators.parallel.ParallelJoin$b` @kind class @AccessFlag FINAL extends `io.reactivex.internal.operators.parallel.ParallelJoin$c` @kind class {
}
global `long` `@@io.reactivex.internal.operators.parallel.ParallelJoin$b.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L47bbf0.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.<init>:(Lorg/reactivestreams/Subscriber;II)V` @kind direct;
  #L47bbf6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @AccessFlag  {
    temp;
    v0;

  #L47bc08.  call temp:= `getAndIncrement`(v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47bc0e.  v0:= temp;
  #L47bc10.  if v0 == 0 then goto L47bc16;
  #L47bc14.  return @kind void;
  #L47bc16.  call `g`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L47bc1c.  return @kind void;
}
procedure `void` `d`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v1 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L47bde0.  v0:= v1.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47bde4.  call temp:= `decrementAndGet`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bdea.  call `c`(v1) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L47bdf0.  return @kind void;
}
procedure `void` `e`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L47be04.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47be08.  v1:= 0I;
  #L47be0a.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47be10.  v0:= temp;
  #L47be12.  if v0 == 0 then goto L47be24;
  #L47be16.  call `a`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L47be1c.  call `c`(v2) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.c:()V` @kind virtual;
  #L47be22.  goto L47be3a;
  #L47be24.  v0:= v2.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47be28.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47be2e.  v0:= temp @kind object;
  #L47be30.  if v3 == v0 then goto L47be3a;
  #L47be34.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47be3a.  return @kind void;
}
procedure `void` `f`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v6 @kind this, `io.reactivex.internal.operators.parallel.ParallelJoin$a` v7 @kind object, `java.lang.Object` v8 @kind object) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.f:(Lio/reactivex/internal/operators/parallel/ParallelJoin$a;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L47be4c.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47be52.  v0:= temp;
  #L47be54.  v1:= "Queue full?!" @kind object;
  #L47be58.  if v0 != 0 then goto L47bf1a;
  #L47be5c.  v0:= 0I;
  #L47be5e.  v2:= 1I;
  #L47be60.  call temp:= `compareAndSet`(v6, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.compareAndSet:(II)Z` @kind virtual;
  #L47be66.  v0:= temp;
  #L47be68.  if v0 == 0 then goto L47bf1a;
  #L47be6c.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47be70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47be76.  v2:= temp @kind wide;
  #L47be78.  v4:= 0L;
  #L47be7c.  v0:= lcmp(v2, v4);
  #L47be80.  if v0 == 0 then goto L47bec2;
  #L47be84.  v0:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47be88.  call `onNext`(v0, v8) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47be8e.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47be92.  call temp:= `get`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47be98.  v0:= temp @kind wide;
  #L47be9a.  v2:= 9223372036854775807L;
  #L47bea4.  v8:= lcmp(v0, v2);
  #L47bea8.  if v8 == 0 then goto L47beb6;
  #L47beac.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47beb0.  call temp:= `decrementAndGet`(v8) @signature `Ljava/util/concurrent/atomic/AtomicLong;.decrementAndGet:()J` @kind virtual;
  #L47beb6.  v0:= 1L;
  #L47beba.  call `c`(v7, v0) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.c:(J)V` @kind virtual;
  #L47bec0.  goto L47bf0c;
  #L47bec2.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L47bec8.  v7:= temp @kind object;
  #L47beca.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47bed0.  v7:= temp;
  #L47bed2.  if v7 != 0 then goto L47bf0c;
  #L47bed6.  call `a`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L47bedc.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47bee0.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47bee6.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47beea.  v0:= 0I;
  #L47beec.  call temp:= `compareAndSet`(v8, v0, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L47bef2.  v8:= temp;
  #L47bef4.  if v8 == 0 then goto L47bf04;
  #L47bef8.  v8:= v6.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47befc.  call `onError`(v8, v7) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47bf02.  goto L47bf0a;
  #L47bf04.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L47bf0a.  return @kind void;
  #L47bf0c.  call temp:= `decrementAndGet`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.decrementAndGet:()I` @kind virtual;
  #L47bf12.  v7:= temp;
  #L47bf14.  if v7 != 0 then goto L47bf54;
  #L47bf18.  return @kind void;
  #L47bf1a.  call temp:= `b`(v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.b:()Lio/reactivex/internal/fuseable/SimplePlainQueue;` @kind virtual;
  #L47bf20.  v7:= temp @kind object;
  #L47bf22.  call temp:= `offer`(v7, v8) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.offer:(Ljava/lang/Object;)Z` @kind interface;
  #L47bf28.  v7:= temp;
  #L47bf2a.  if v7 != 0 then goto L47bf46;
  #L47bf2e.  call `a`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.a:()V` @kind virtual;
  #L47bf34.  v7:= new `io.reactivex.exceptions.MissingBackpressureException`;
  #L47bf38.  call `<init>`(v7, v1) @signature `Lio/reactivex/exceptions/MissingBackpressureException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L47bf3e.  call `e`(v6, v7) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.e:(Ljava/lang/Throwable;)V` @kind virtual;
  #L47bf44.  return @kind void;
  #L47bf46.  call temp:= `getAndIncrement`(v6) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L47bf4c.  v7:= temp;
  #L47bf4e.  if v7 == 0 then goto L47bf54;
  #L47bf52.  return @kind void;
  #L47bf54.  call `g`(v6) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @kind virtual;
  #L47bf5a.  return @kind void;
}
procedure `void` `g`(`io.reactivex.internal.operators.parallel.ParallelJoin$b` v18 @kind this) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$b;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L47bc30.  v0:= v18 @kind object;
  #L47bc34.  v1:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.b` @type ^`io.reactivex.internal.operators.parallel.ParallelJoin$a`[] @kind object;
  #L47bc38.  v2:= length @variable v1;
  #L47bc3a.  v3:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L47bc3e.  v5:= 1I;
  #L47bc40.  v6:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47bc44.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.get:()J` @kind virtual;
  #L47bc4a.  v6:= temp @kind wide;
  #L47bc4c.  v8:= 0L;
  #L47bc50.  v10:= v8 @kind wide;
  #L47bc52.  v13:= lcmp(v10, v6);
  #L47bc56.  if v13 == 0 then goto L47bcfe;
  #L47bc5a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L47bc5e.  if v13 == 0 then goto L47bc6a;
  #L47bc62.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47bc68.  return @kind void;
  #L47bc6a.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47bc6e.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47bc74.  v13:= temp @kind object;
  #L47bc76.  v13:= (`java.lang.Throwable`) v13 @kind object;
  #L47bc7a.  if v13 == 0 then goto L47bc8c;
  #L47bc7e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47bc84.  call `onError`(v3, v13) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47bc8a.  return @kind void;
  #L47bc8c.  v13:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47bc90.  call temp:= `get`(v13) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47bc96.  v13:= temp;
  #L47bc98.  if v13 != 0 then goto L47bca0;
  #L47bc9c.  v13:= 1I;
  #L47bc9e.  goto L47bca2;
  #L47bca0.  v13:= 0I;
  #L47bca2.  v14:= 0I;
  #L47bca4.  v15:= 1I;
  #L47bca6.  v4:= length @variable v1;
  #L47bca8.  if v14 >= v4 then goto L47bcea;
  #L47bcac.  v4:= v1[v14] @kind object;
  #L47bcb0.  v12:= v4.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47bcb4.  if v12 == 0 then goto L47bce4;
  #L47bcb8.  call temp:= `poll`(v12) @signature `Lio/reactivex/internal/fuseable/SimplePlainQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L47bcbe.  v12:= temp @kind object;
  #L47bcc0.  if v12 == 0 then goto L47bce4;
  #L47bcc4.  call `onNext`(v3, v12) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L47bcca.  call `d`(v4) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$a;.d:()V` @kind virtual;
  #L47bcd0.  v16:= 1L;
  #L47bcd4.  v10:= v10 + v16 @kind long;
  #L47bcd8.  v4:= lcmp(v10, v6);
  #L47bcdc.  if v4 != 0 then goto L47bce2;
  #L47bce0.  goto L47bcfe;
  #L47bce2.  v15:= 0I;
  #L47bce4.  v14:= v14 + 1;
  #L47bce8.  goto L47bca6;
  #L47bcea.  if v13 == 0 then goto L47bcfa;
  #L47bcee.  if v15 == 0 then goto L47bcfa;
  #L47bcf2.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47bcf8.  return @kind void;
  #L47bcfa.  if v15 == 0 then goto L47bc52;
  #L47bcfe.  v4:= lcmp(v10, v6);
  #L47bd02.  if v4 != 0 then goto L47bd88;
  #L47bd06.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.e` @type ^`boolean` @kind boolean;
  #L47bd0a.  if v4 == 0 then goto L47bd16;
  #L47bd0e.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47bd14.  return @kind void;
  #L47bd16.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.c` @type ^`io.reactivex.internal.util.AtomicThrowable` @kind object;
  #L47bd1a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L47bd20.  v4:= temp @kind object;
  #L47bd22.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L47bd26.  if v4 == 0 then goto L47bd38;
  #L47bd2a.  call `b`(v18) @signature `Lio/reactivex/internal/operators/parallel/ParallelJoin$c;.b:()V` @kind virtual;
  #L47bd30.  call `onError`(v3, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L47bd36.  return @kind void;
  #L47bd38.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.f` @type ^`java.util.concurrent.atomic.AtomicInteger` @kind object;
  #L47bd3c.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47bd42.  v4:= temp;
  #L47bd44.  if v4 != 0 then goto L47bd4c;
  #L47bd48.  v4:= 1I;
  #L47bd4a.  goto L47bd4e;
  #L47bd4c.  v4:= 0I;
  #L47bd4e.  v12:= 0I;
  #L47bd50.  if v12 >= v2 then goto L47bd76;
  #L47bd54.  v13:= v1[v12] @kind object;
  #L47bd58.  v13:= v13.`io.reactivex.internal.operators.parallel.ParallelJoin$a.e` @type ^`io.reactivex.internal.fuseable.SimplePlainQueue` @kind object;
  #L47bd5c.  if v13 == 0 then goto L47bd70;
  #L47bd60.  call temp:= `isEmpty`(v13) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.isEmpty:()Z` @kind interface;
  #L47bd66.  v13:= temp;
  #L47bd68.  if v13 != 0 then goto L47bd70;
  #L47bd6c.  v12:= 0I;
  #L47bd6e.  goto L47bd78;
  #L47bd70.  v12:= v12 + 1;
  #L47bd74.  goto L47bd50;
  #L47bd76.  v12:= 1I;
  #L47bd78.  if v4 == 0 then goto L47bd88;
  #L47bd7c.  if v12 == 0 then goto L47bd88;
  #L47bd80.  call `onComplete`(v3) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L47bd86.  return @kind void;
  #L47bd88.  v4:= lcmp(v10, v8);
  #L47bd8c.  if v4 == 0 then goto L47bdae;
  #L47bd90.  v8:= 9223372036854775807L;
  #L47bd9a.  v4:= lcmp(v6, v8);
  #L47bd9e.  if v4 == 0 then goto L47bdae;
  #L47bda2.  v4:= v0.`io.reactivex.internal.operators.parallel.ParallelJoin$c.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L47bda6.  v6:= -v10 @kind long;
  #L47bda8.  call temp:= `addAndGet`(v4, v6) @signature `Ljava/util/concurrent/atomic/AtomicLong;.addAndGet:(J)J` @kind virtual;
  #L47bdae.  call temp:= `get`(v18) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.get:()I` @kind virtual;
  #L47bdb4.  v4:= temp;
  #L47bdb6.  if v4 != v5 then goto L47bdca;
  #L47bdba.  v4:= -v5 @kind int;
  #L47bdbc.  call temp:= `addAndGet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L47bdc2.  v4:= temp;
  #L47bdc4.  if v4 != 0 then goto L47bdca;
  #L47bdc8.  return @kind void;
  #L47bdca.  v5:= v4;
  #L47bdcc.  goto L47bc40;
}
