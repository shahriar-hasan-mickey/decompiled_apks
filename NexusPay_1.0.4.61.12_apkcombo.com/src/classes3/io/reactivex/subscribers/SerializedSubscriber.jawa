record `io.reactivex.subscribers.SerializedSubscriber` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.subscribers.SerializedSubscriber.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.b` @AccessFlag FINAL;
  `org.reactivestreams.Subscription` `io.reactivex.subscribers.SerializedSubscriber.c` @AccessFlag ;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.d` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subscribers.SerializedSubscriber.e` @AccessFlag ;
  `boolean` `io.reactivex.subscribers.SerializedSubscriber.f` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `org.reactivestreams.Subscriber` v2 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52b7fc.  v0:= 0I;
  #L52b7fe.  call `<init>`(v1, v2, v0) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Z)V` @kind direct;
  #L52b804.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.SerializedSubscriber` v0 @kind this, `org.reactivestreams.Subscriber` v1 @kind object, `boolean` v2 ) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52b818.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52b81e.  v0.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v1 @kind object;
  #L52b822.  v0.`io.reactivex.subscribers.SerializedSubscriber.b` @type ^`boolean` := v2 @kind boolean;
  #L52b826.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52b854.  @monitorenter v2
  #L52b856.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52b85a.  if v0 != 0 then goto L52b868;
  #L52b85e.  v0:= 0I;
  #L52b860.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L52b864.  @monitorexit v2
  #L52b866.  return @kind void;
  #L52b868.  v1:= 0I;
  #L52b86a.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L52b86e.  @monitorexit v2
  #L52b870.  v1:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52b874.  call temp:= `accept`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.accept:(Lorg/reactivestreams/Subscriber;)Z` @kind virtual;
  #L52b87a.  v0:= temp;
  #L52b87c.  if v0 == 0 then goto L52b854;
  #L52b880.  return @kind void;
  #L52b882.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52b884.  @monitorexit v2
  #L52b886.  throw v0;
  catch `java.lang.Throwable` @[L52b856..L52b870] goto L52b882;
  catch `java.lang.Throwable` @[L52b884..L52b886] goto L52b882;
}
procedure `void` `cancel`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52b838.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L52b83c.  call `cancel`(v0) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L52b842.  return @kind void;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52b8ac.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52b8b0.  if v0 == 0 then goto L52b8b6;
  #L52b8b4.  return @kind void;
  #L52b8b6.  @monitorenter v2
  #L52b8b8.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52b8bc.  if v0 == 0 then goto L52b8c4;
  #L52b8c0.  @monitorexit v2
  #L52b8c2.  return @kind void;
  #L52b8c4.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L52b8c8.  if v0 == 0 then goto L52b8f6;
  #L52b8cc.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52b8d0.  if v0 != 0 then goto L52b8e4;
  #L52b8d4.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52b8d8.  v1:= 4I;
  #L52b8da.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52b8e0.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52b8e4.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L52b8ea.  v1:= temp @kind object;
  #L52b8ec.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52b8f2.  @monitorexit v2
  #L52b8f4.  return @kind void;
  #L52b8f6.  v0:= 1I;
  #L52b8f8.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v0 @kind boolean;
  #L52b8fc.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L52b900.  @monitorexit v2
  #L52b902.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52b906.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L52b90c.  return @kind void;
  #L52b90e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52b910.  @monitorexit v2
  #L52b912.  throw v0;
  catch `java.lang.Throwable` @[L52b8b8..L52b902] goto L52b90e;
  catch `java.lang.Throwable` @[L52b910..L52b912] goto L52b90e;
}
procedure `void` `onError`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52b938.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52b93c.  if v0 == 0 then goto L52b948;
  #L52b940.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52b946.  return @kind void;
  #L52b948.  @monitorenter v2
  #L52b94a.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52b94e.  v1:= 1I;
  #L52b950.  if v0 == 0 then goto L52b956;
  #L52b954.  goto L52b9a6;
  #L52b956.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L52b95a.  if v0 == 0 then goto L52b99c;
  #L52b95e.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v1 @kind boolean;
  #L52b962.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52b966.  if v0 != 0 then goto L52b97a;
  #L52b96a.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52b96e.  v1:= 4I;
  #L52b970.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52b976.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52b97a.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L52b980.  v3:= temp @kind object;
  #L52b982.  v1:= v2.`io.reactivex.subscribers.SerializedSubscriber.b` @type ^`boolean` @kind boolean;
  #L52b986.  if v1 == 0 then goto L52b992;
  #L52b98a.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52b990.  goto L52b998;
  #L52b992.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L52b998.  @monitorexit v2
  #L52b99a.  return @kind void;
  #L52b99c.  v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` := v1 @kind boolean;
  #L52b9a0.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v1 @kind boolean;
  #L52b9a4.  v1:= 0I;
  #L52b9a6.  @monitorexit v2
  #L52b9a8.  if v1 == 0 then goto L52b9b4;
  #L52b9ac.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52b9b2.  return @kind void;
  #L52b9b4.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52b9b8.  call `onError`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52b9be.  return @kind void;
  #L52b9c0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52b9c2.  @monitorexit v2
  #L52b9c4.  throw v3;
  catch `java.lang.Throwable` @[L52b94a..L52b9a8] goto L52b9c0;
  catch `java.lang.Throwable` @[L52b9c2..L52b9c4] goto L52b9c0;
}
procedure `void` `onNext`(`io.reactivex.subscribers.SerializedSubscriber` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52b9ec.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52b9f0.  if v0 == 0 then goto L52b9f6;
  #L52b9f4.  return @kind void;
  #L52b9f6.  if v3 != 0 then goto L52ba1a;
  #L52b9fa.  v3:= v2.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L52b9fe.  call `cancel`(v3) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L52ba04.  v3:= new `java.lang.NullPointerException`;
  #L52ba08.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L52ba0c.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52ba12.  call `onError`(v2, v3) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L52ba18.  return @kind void;
  #L52ba1a.  @monitorenter v2
  #L52ba1c.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.f` @type ^`boolean` @kind boolean;
  #L52ba20.  if v0 == 0 then goto L52ba28;
  #L52ba24.  @monitorexit v2
  #L52ba26.  return @kind void;
  #L52ba28.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` @kind boolean;
  #L52ba2c.  if v0 == 0 then goto L52ba5a;
  #L52ba30.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52ba34.  if v0 != 0 then goto L52ba48;
  #L52ba38.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52ba3c.  v1:= 4I;
  #L52ba3e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52ba44.  v2.`io.reactivex.subscribers.SerializedSubscriber.e` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52ba48.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L52ba4e.  v3:= temp @kind object;
  #L52ba50.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52ba56.  @monitorexit v2
  #L52ba58.  return @kind void;
  #L52ba5a.  v0:= 1I;
  #L52ba5c.  v2.`io.reactivex.subscribers.SerializedSubscriber.d` @type ^`boolean` := v0 @kind boolean;
  #L52ba60.  @monitorexit v2
  #L52ba62.  v0:= v2.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52ba66.  call `onNext`(v0, v3) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52ba6c.  call `a`(v2) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.a:()V` @kind virtual;
  #L52ba72.  return @kind void;
  #L52ba74.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52ba76.  @monitorexit v2
  #L52ba78.  throw v3;
  catch `java.lang.Throwable` @[L52ba1c..L52ba62] goto L52ba74;
  catch `java.lang.Throwable` @[L52ba76..L52ba78] goto L52ba74;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `org.reactivestreams.Subscription` v2 @kind object) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52baa0.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L52baa4.  call temp:= `validate`(v0, v2) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.validate:(Lorg/reactivestreams/Subscription;Lorg/reactivestreams/Subscription;)Z` @kind static;
  #L52baaa.  v0:= temp;
  #L52baac.  if v0 == 0 then goto L52babe;
  #L52bab0.  v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` := v2 @kind object;
  #L52bab4.  v2:= v1.`io.reactivex.subscribers.SerializedSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52bab8.  call `onSubscribe`(v2, v1) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L52babe.  return @kind void;
}
procedure `void` `request`(`io.reactivex.subscribers.SerializedSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/SerializedSubscriber;.request:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52bad0.  v0:= v1.`io.reactivex.subscribers.SerializedSubscriber.c` @type ^`org.reactivestreams.Subscription` @kind object;
  #L52bad4.  call `request`(v0, v2) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L52bada.  return @kind void;
}
