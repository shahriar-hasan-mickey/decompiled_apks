record `io.reactivex.subscribers.TestSubscriber` @kind class @AccessFlag PUBLIC extends `io.reactivex.observers.BaseTestConsumer` @kind class, `io.reactivex.FlowableSubscriber` @kind interface, `org.reactivestreams.Subscription` @kind interface, `io.reactivex.disposables.Disposable` @kind interface {
  `org.reactivestreams.Subscriber` `io.reactivex.subscribers.TestSubscriber.a` @AccessFlag PRIVATE_FINAL;
  `boolean` `io.reactivex.subscribers.TestSubscriber.b` @AccessFlag PRIVATE_VOLATILE;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subscribers.TestSubscriber.c` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `io.reactivex.subscribers.TestSubscriber.d` @AccessFlag PRIVATE_FINAL;
  `io.reactivex.internal.fuseable.QueueSubscription` `io.reactivex.subscribers.TestSubscriber.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L52bd7c.  v0:= `@@io.reactivex.subscribers.TestSubscriber$a.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$a` @kind object;
  #L52bd80.  v1:= 9223372036854775807L;
  #L52bd8a.  call `<init>`(v3, v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L52bd90.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this, `long` v2 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52bda4.  v0:= `@@io.reactivex.subscribers.TestSubscriber$a.INSTANCE` @type ^`io.reactivex.subscribers.TestSubscriber$a` @kind object;
  #L52bda8.  call `<init>`(v1, v0, v2) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L52bdae.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `org.reactivestreams.Subscriber` v3 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L52bdc0.  v0:= 9223372036854775807L;
  #L52bdca.  call `<init>`(v2, v3, v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @kind direct;
  #L52bdd0.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `org.reactivestreams.Subscriber` v4 @kind object, `long` v5 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L52bde4.  call `<init>`(v3) @signature `Lio/reactivex/observers/BaseTestConsumer;.<init>:()V` @kind direct;
  #L52bdea.  v0:= 0L;
  #L52bdee.  v2:= lcmp(v5, v0);
  #L52bdf2.  if v2 < 0 then goto L52be18;
  #L52bdf6.  v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` := v4 @kind object;
  #L52bdfa.  v4:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52bdfe.  call `<init>`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52be04.  v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v4 @kind object;
  #L52be08.  v4:= new `java.util.concurrent.atomic.AtomicLong`;
  #L52be0c.  call `<init>`(v4, v5) @signature `Ljava/util/concurrent/atomic/AtomicLong;.<init>:(J)V` @kind direct;
  #L52be12.  v3.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` := v4 @kind object;
  #L52be16.  return @kind void;
  #L52be18.  v4:= new `java.lang.IllegalArgumentException`;
  #L52be1c.  v5:= "Negative initial request not allowed" @kind object;
  #L52be20.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52be26.  throw v4;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`() @signature `Lio/reactivex/subscribers/TestSubscriber;.create:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52bd10.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L52bd14.  call `<init>`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:()V` @kind direct;
  #L52bd1a.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52bd2c.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L52bd30.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(J)V` @kind direct;
  #L52bd36.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `create`(`org.reactivestreams.Subscriber` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.create:(Lorg/reactivestreams/Subscriber;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52bd48.  v0:= new `io.reactivex.subscribers.TestSubscriber`;
  #L52bd4c.  call `<init>`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.<init>:(Lorg/reactivestreams/Subscriber;)V` @kind direct;
  #L52bd52.  return v0 @kind object;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L52bc28.  call temp:= `assertNotSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L52bc2e.  v0:= temp @kind object;
  #L52bc30.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertNotSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertNotSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52bc60.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52bc64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52bc6a.  v0:= temp @kind object;
  #L52bc6c.  if v0 != 0 then goto L52bc90;
  #L52bc70.  v0:= v1.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52bc74.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L52bc7a.  v0:= temp;
  #L52bc7c.  if v0 == 0 then goto L52bc82;
  #L52bc80.  return v1 @kind object;
  #L52bc82.  v0:= "Not subscribed but errors found" @kind object;
  #L52bc86.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L52bc8c.  v0:= temp @kind object;
  #L52bc8e.  throw v0;
  #L52bc90.  v0:= "Subscribed!" @kind object;
  #L52bc94.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L52bc9a.  v0:= temp @kind object;
  #L52bc9c.  throw v0;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertOf`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `io.reactivex.functions.Consumer` v1 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertOf:(Lio/reactivex/functions/Consumer;)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L52bcb0.  call `accept`(v1, v0) @signature `Lio/reactivex/functions/Consumer;.accept:(Ljava/lang/Object;)V` @kind interface;
  #L52bcb6.  return v0 @kind object;
  #L52bcb8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52bcba.  call temp:= `wrapOrThrow`(v1) @signature `Lio/reactivex/internal/util/ExceptionHelper;.wrapOrThrow:(Ljava/lang/Throwable;)Ljava/lang/RuntimeException;` @kind static;
  #L52bcc0.  v1:= temp @kind object;
  #L52bcc2.  throw v1;
  catch `java.lang.Throwable` @[L52bcb0..L52bcb6] goto L52bcb8;
}
procedure `io.reactivex.observers.BaseTestConsumer` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/observers/BaseTestConsumer;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L52bc44.  call temp:= `assertSubscribed`(v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @kind virtual;
  #L52bc4a.  v0:= temp @kind object;
  #L52bc4c.  return v0 @kind object;
}
procedure `io.reactivex.subscribers.TestSubscriber` `assertSubscribed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.assertSubscribed:()Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52bce0.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52bce4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52bcea.  v0:= temp @kind object;
  #L52bcec.  if v0 == 0 then goto L52bcf2;
  #L52bcf0.  return v1 @kind object;
  #L52bcf2.  v0:= "Not subscribed!" @kind object;
  #L52bcf6.  call temp:= `fail`(v1, v0) @signature `Lio/reactivex/observers/BaseTestConsumer;.fail:(Ljava/lang/String;)Ljava/lang/AssertionError;` @kind virtual;
  #L52bcfc.  v0:= temp @kind object;
  #L52bcfe.  throw v0;
}
procedure `void` `cancel`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52be38.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L52be3c.  if v0 != 0 then goto L52be50;
  #L52be40.  v0:= 1I;
  #L52be42.  v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` := v0 @kind boolean;
  #L52be46.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52be4a.  call temp:= `cancel`(v0) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.cancel:(Ljava/util/concurrent/atomic/AtomicReference;)Z` @kind static;
  #L52be50.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.dispose:()V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L52be64.  call `cancel`(v0) @signature `Lio/reactivex/subscribers/TestSubscriber;.cancel:()V` @kind virtual;
  #L52be6a.  return @kind void;
}
procedure `boolean` `hasSubscription`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.hasSubscription:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52bbd0.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52bbd4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52bbda.  v0:= temp @kind object;
  #L52bbdc.  if v0 == 0 then goto L52bbe4;
  #L52bbe0.  v0:= 1I;
  #L52bbe2.  goto L52bbe6;
  #L52bbe4.  v0:= 0I;
  #L52bbe6.  return v0;
}
procedure `boolean` `isCancelled`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isCancelled:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52bbf8.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L52bbfc.  return v0;
}
procedure `boolean` `isDisposed`(`io.reactivex.subscribers.TestSubscriber` v1 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.isDisposed:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52bc10.  v0:= v1.`io.reactivex.subscribers.TestSubscriber.b` @type ^`boolean` @kind boolean;
  #L52bc14.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subscribers.TestSubscriber` v4 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52be7c.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L52be80.  if v0 != 0 then goto L52beb2;
  #L52be84.  v0:= 1I;
  #L52be86.  v4.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L52be8a.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52be8e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52be94.  v0:= temp @kind object;
  #L52be96.  if v0 != 0 then goto L52beb2;
  #L52be9a.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52be9e.  v1:= new `java.lang.IllegalStateException`;
  #L52bea2.  v2:= "onSubscribe not called in proper order" @kind object;
  #L52bea6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52beac.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52beb2.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L52beb8.  v0:= temp @kind object;
  #L52beba.  v4.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L52bebe.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L52bec2.  v2:= 1L;
  #L52bec6.  v0:= v0 + v2 @kind long;
  #L52bec8.  v4.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L52becc.  v0:= v4.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52bed0.  call `onComplete`(v0) @signature `Lorg/reactivestreams/Subscriber;.onComplete:()V` @kind interface;
  #L52bed6.  v0:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L52beda.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L52bee0.  return @kind void;
  #L52bee2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52bee4.  v1:= v4.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L52bee8.  call `countDown`(v1) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L52beee.  throw v0;
  catch `java.lang.Throwable` @[L52beb2..L52bed6] goto L52bee2;
}
procedure `void` `onError`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Throwable` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52bf0c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L52bf10.  if v0 != 0 then goto L52bf42;
  #L52bf14.  v0:= 1I;
  #L52bf16.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L52bf1a.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52bf1e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52bf24.  v0:= temp @kind object;
  #L52bf26.  if v0 != 0 then goto L52bf42;
  #L52bf2a.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52bf2e.  v1:= new `java.lang.NullPointerException`;
  #L52bf32.  v2:= "onSubscribe not called in proper order" @kind object;
  #L52bf36.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52bf3c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52bf42.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L52bf48.  v0:= temp @kind object;
  #L52bf4a.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L52bf4e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52bf52.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52bf58.  if v4 != 0 then goto L52bf74;
  #L52bf5c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52bf60.  v1:= new `java.lang.IllegalStateException`;
  #L52bf64.  v2:= "onError received a null Throwable" @kind object;
  #L52bf68.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52bf6e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52bf74.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52bf78.  call `onError`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52bf7e.  v4:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L52bf82.  call `countDown`(v4) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L52bf88.  return @kind void;
  #L52bf8a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52bf8c.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.done` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L52bf90.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L52bf96.  throw v4;
  catch `java.lang.Throwable` @[L52bf42..L52bf7e] goto L52bf8a;
}
procedure `void` `onNext`(`io.reactivex.subscribers.TestSubscriber` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52bfb4.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` @kind boolean;
  #L52bfb8.  if v0 != 0 then goto L52bfea;
  #L52bfbc.  v0:= 1I;
  #L52bfbe.  v3.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v0 @kind boolean;
  #L52bfc2.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52bfc6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52bfcc.  v0:= temp @kind object;
  #L52bfce.  if v0 != 0 then goto L52bfea;
  #L52bfd2.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52bfd6.  v1:= new `java.lang.IllegalStateException`;
  #L52bfda.  v2:= "onSubscribe not called in proper order" @kind object;
  #L52bfde.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52bfe4.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52bfea.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L52bff0.  v0:= temp @kind object;
  #L52bff2.  v3.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L52bff6.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int`;
  #L52bffa.  v1:= 2I;
  #L52bffc.  if v0 != v1 then goto L52c034;
  #L52c000.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L52c004.  call temp:= `poll`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L52c00a.  v4:= temp @kind object;
  #L52c00c.  if v4 == 0 then goto L52c032;
  #L52c010.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L52c014.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c01a.  goto L52c000;
  #L52c01c.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52c01e.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52c022.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c028.  v4:= v3.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L52c02c.  call `cancel`(v4) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L52c032.  return @kind void;
  #L52c034.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L52c038.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c03e.  if v4 != 0 then goto L52c05a;
  #L52c042.  v0:= v3.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52c046.  v1:= new `java.lang.NullPointerException`;
  #L52c04a.  v2:= "onNext received a null value" @kind object;
  #L52c04e.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52c054.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c05a.  v0:= v3.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52c05e.  call `onNext`(v0, v4) @signature `Lorg/reactivestreams/Subscriber;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52c064.  return @kind void;
  catch `java.lang.Throwable` @[L52c000..L52c01a] goto L52c01c;
}
procedure `void` `onStart`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @AccessFlag PROTECTED {
    temp;

  #L52c084.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subscribers.TestSubscriber` v5 @kind this, `org.reactivestreams.Subscription` v6 @kind object) @signature `Lio/reactivex/subscribers/TestSubscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52c098.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L52c09e.  v0:= temp @kind object;
  #L52c0a0.  v5.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v0 @kind object;
  #L52c0a4.  if v6 != 0 then goto L52c0c2;
  #L52c0a8.  v6:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52c0ac.  v0:= new `java.lang.NullPointerException`;
  #L52c0b0.  v1:= "onSubscribe received a null Subscription" @kind object;
  #L52c0b4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52c0ba.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c0c0.  return @kind void;
  #L52c0c2.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52c0c6.  v1:= 0I;
  #L52c0c8.  call temp:= `compareAndSet`(v0, v1, v6) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52c0ce.  v0:= temp;
  #L52c0d0.  if v0 != 0 then goto L52c126;
  #L52c0d4.  call `cancel`(v6) @signature `Lorg/reactivestreams/Subscription;.cancel:()V` @kind interface;
  #L52c0da.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52c0de.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52c0e4.  v0:= temp @kind object;
  #L52c0e6.  v1:= `@@io.reactivex.internal.subscriptions.SubscriptionHelper.CANCELLED` @type ^`io.reactivex.internal.subscriptions.SubscriptionHelper` @kind object;
  #L52c0ea.  if v0 == v1 then goto L52c124;
  #L52c0ee.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52c0f2.  v1:= new `java.lang.IllegalStateException`;
  #L52c0f6.  v2:= new `java.lang.StringBuilder`;
  #L52c0fa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52c100.  v3:= "onSubscribe received multiple subscriptions: " @kind object;
  #L52c104.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c10a.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52c110.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52c116.  v6:= temp @kind object;
  #L52c118.  call `<init>`(v1, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52c11e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c124.  return @kind void;
  #L52c126.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.initialFusionMode` @type ^`int`;
  #L52c12a.  if v0 == 0 then goto L52c19c;
  #L52c12e.  v1:= instanceof @variable v6 @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind boolean;
  #L52c132.  if v1 == 0 then goto L52c19c;
  #L52c136.  v1:= v6 @kind object;
  #L52c138.  v1:= (`io.reactivex.internal.fuseable.QueueSubscription`) v1 @kind object;
  #L52c13c.  v5.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` := v1 @kind object;
  #L52c140.  call temp:= `requestFusion`(v1, v0) @signature `Lio/reactivex/internal/fuseable/QueueFuseable;.requestFusion:(I)I` @kind interface;
  #L52c146.  v0:= temp;
  #L52c148.  v5.`io.reactivex.observers.BaseTestConsumer.establishedFusionMode` @type ^`int` := v0;
  #L52c14c.  v1:= 1I;
  #L52c14e.  if v0 != v1 then goto L52c19c;
  #L52c152.  v5.`io.reactivex.observers.BaseTestConsumer.checkSubscriptionOnce` @type ^`boolean` := v1 @kind boolean;
  #L52c156.  call temp:= `currentThread`() @signature `Ljava/lang/Thread;.currentThread:()Ljava/lang/Thread;` @kind static;
  #L52c15c.  v6:= temp @kind object;
  #L52c15e.  v5.`io.reactivex.observers.BaseTestConsumer.lastThread` @type ^`java.lang.Thread` := v6 @kind object;
  #L52c162.  v6:= v5.`io.reactivex.subscribers.TestSubscriber.e` @type ^`io.reactivex.internal.fuseable.QueueSubscription` @kind object;
  #L52c166.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.poll:()Ljava/lang/Object;` @kind interface;
  #L52c16c.  v6:= temp @kind object;
  #L52c16e.  if v6 == 0 then goto L52c17e;
  #L52c172.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.values` @type ^`java.util.List` @kind object;
  #L52c176.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c17c.  goto L52c162;
  #L52c17e.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` @kind wide;
  #L52c182.  v2:= 1L;
  #L52c186.  v0:= v0 + v2 @kind long;
  #L52c188.  v5.`io.reactivex.observers.BaseTestConsumer.completions` @type ^`long` := v0 @kind wide;
  #L52c18c.  goto L52c19a;
  #L52c18e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52c190.  v0:= v5.`io.reactivex.observers.BaseTestConsumer.errors` @type ^`java.util.List` @kind object;
  #L52c194.  call temp:= `add`(v0, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L52c19a.  return @kind void;
  #L52c19c.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.a` @type ^`org.reactivestreams.Subscriber` @kind object;
  #L52c1a0.  call `onSubscribe`(v0, v6) @signature `Lorg/reactivestreams/Subscriber;.onSubscribe:(Lorg/reactivestreams/Subscription;)V` @kind interface;
  #L52c1a6.  v0:= v5.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L52c1aa.  v1:= 0L;
  #L52c1ae.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicLong;.getAndSet:(J)J` @kind virtual;
  #L52c1b4.  v3:= temp @kind wide;
  #L52c1b6.  v0:= lcmp(v3, v1);
  #L52c1ba.  if v0 == 0 then goto L52c1c4;
  #L52c1be.  call `request`(v6, v3) @signature `Lorg/reactivestreams/Subscription;.request:(J)V` @kind interface;
  #L52c1c4.  call `onStart`(v5) @signature `Lio/reactivex/subscribers/TestSubscriber;.onStart:()V` @kind virtual;
  #L52c1ca.  return @kind void;
  catch `java.lang.Throwable` @[L52c162..L52c18c] goto L52c18e;
}
procedure `void` `request`(`io.reactivex.subscribers.TestSubscriber` v2 @kind this, `long` v3 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L52c1e8.  v0:= v2.`io.reactivex.subscribers.TestSubscriber.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52c1ec.  v1:= v2.`io.reactivex.subscribers.TestSubscriber.d` @type ^`java.util.concurrent.atomic.AtomicLong` @kind object;
  #L52c1f0.  call `deferredRequest`(v0, v1, v3) @signature `Lio/reactivex/internal/subscriptions/SubscriptionHelper;.deferredRequest:(Ljava/util/concurrent/atomic/AtomicReference;Ljava/util/concurrent/atomic/AtomicLong;J)V` @kind static;
  #L52c1f6.  return @kind void;
}
procedure `io.reactivex.subscribers.TestSubscriber` `requestMore`(`io.reactivex.subscribers.TestSubscriber` v0 @kind this, `long` v1 ) @signature `Lio/reactivex/subscribers/TestSubscriber;.requestMore:(J)Lio/reactivex/subscribers/TestSubscriber;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L52bd64.  call `request`(v0, v1) @signature `Lio/reactivex/subscribers/TestSubscriber;.request:(J)V` @kind virtual;
  #L52bd6a.  return v0 @kind object;
}
