record `io.reactivex.subjects.PublishSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.PublishSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.PublishSubject.b` @AccessFlag ;
}
global `io.reactivex.subjects.PublishSubject$a`[] `@@io.reactivex.subjects.PublishSubject.c` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.PublishSubject$a`[] `@@io.reactivex.subjects.PublishSubject.d` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/PublishSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L528d38.  v0:= 0I;
  #L528d3a.  v1:= new `io.reactivex.subjects.PublishSubject$a`[v0];
  #L528d3e.  `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] := v1 @kind object;
  #L528d42.  v0:= new `io.reactivex.subjects.PublishSubject$a`[v0];
  #L528d46.  `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] := v0 @kind object;
  #L528d4a.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L528d5c.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L528d62.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L528d66.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528d6a.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L528d70.  v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L528d74.  return @kind void;
}
procedure `io.reactivex.subjects.PublishSubject` `create`() @signature `Lio/reactivex/subjects/PublishSubject;.create:()Lio/reactivex/subjects/PublishSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L528cec.  v0:= new `io.reactivex.subjects.PublishSubject`;
  #L528cf0.  call `<init>`(v0) @signature `Lio/reactivex/subjects/PublishSubject;.<init>:()V` @kind direct;
  #L528cf6.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `io.reactivex.subjects.PublishSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.d:(Lio/reactivex/subjects/PublishSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528c00.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528c04.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528c0a.  v0:= temp @kind object;
  #L528c0c.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528c10.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528c14.  v2:= 0I;
  #L528c16.  if v0 != v1 then goto L528c1c;
  #L528c1a.  return v2;
  #L528c1c.  v1:= length @variable v0;
  #L528c1e.  v3:= v1 + 1;
  #L528c22.  v3:= new `io.reactivex.subjects.PublishSubject$a`[v3];
  #L528c26.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528c2c.  v3[v1]:= v5 @kind object;
  #L528c30.  v1:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528c34.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528c3a.  v0:= temp;
  #L528c3c.  if v0 == 0 then goto L528c00;
  #L528c40.  v5:= 1I;
  #L528c42.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.PublishSubject` v6 @kind this, `io.reactivex.subjects.PublishSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528eac.  v0:= v6.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528eb0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528eb6.  v0:= temp @kind object;
  #L528eb8.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528ebc.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528ec0.  if v0 == v1 then goto L528f2c;
  #L528ec4.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528ec8.  if v0 != v1 then goto L528ece;
  #L528ecc.  goto L528f2c;
  #L528ece.  v1:= length @variable v0;
  #L528ed0.  v2:= -1I;
  #L528ed2.  v3:= 0I;
  #L528ed4.  v4:= 0I;
  #L528ed6.  if v4 >= v1 then goto L528eec;
  #L528eda.  v5:= v0[v4] @kind object;
  #L528ede.  if v5 != v7 then goto L528ee6;
  #L528ee2.  v2:= v4;
  #L528ee4.  goto L528eec;
  #L528ee6.  v4:= v4 + 1;
  #L528eea.  goto L528ed6;
  #L528eec.  if v2 >= 0 then goto L528ef2;
  #L528ef0.  return @kind void;
  #L528ef2.  v4:= 1I;
  #L528ef4.  if v1 != v4 then goto L528efe;
  #L528ef8.  v1:= `@@io.reactivex.subjects.PublishSubject.d` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528efc.  goto L528f1c;
  #L528efe.  v5:= v1 + -1;
  #L528f02.  v5:= new `io.reactivex.subjects.PublishSubject$a`[v5];
  #L528f06.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528f0c.  v3:= v2 + 1;
  #L528f10.  v1:= v1 - v2 @kind int;
  #L528f12.  v1:= v1 - v4 @kind int;
  #L528f14.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528f1a.  v1:= v5 @kind object;
  #L528f1c.  v2:= v6.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528f20.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528f26.  v0:= temp;
  #L528f28.  if v0 == 0 then goto L528eac;
  #L528f2c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528d08.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528d0c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528d12.  v0:= temp @kind object;
  #L528d14.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528d18.  if v0 != v1 then goto L528d22;
  #L528d1c.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L528d20.  return v0 @kind object;
  #L528d22.  v0:= 0I;
  #L528d24.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528c54.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528c58.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528c5e.  v0:= temp @kind object;
  #L528c60.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528c64.  if v0 != v1 then goto L528c74;
  #L528c68.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L528c6c.  if v0 != 0 then goto L528c74;
  #L528c70.  v0:= 1I;
  #L528c72.  goto L528c76;
  #L528c74.  v0:= 0I;
  #L528c76.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.PublishSubject` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528c88.  v0:= v1.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528c8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528c92.  v0:= temp @kind object;
  #L528c94.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528c98.  v0:= length @variable v0;
  #L528c9a.  if v0 == 0 then goto L528ca2;
  #L528c9e.  v0:= 1I;
  #L528ca0.  goto L528ca4;
  #L528ca2.  v0:= 0I;
  #L528ca4.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.PublishSubject` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528cb8.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528cbc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528cc2.  v0:= temp @kind object;
  #L528cc4.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528cc8.  if v0 != v1 then goto L528cd8;
  #L528ccc.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L528cd0.  if v0 == 0 then goto L528cd8;
  #L528cd4.  v0:= 1I;
  #L528cd6.  goto L528cda;
  #L528cd8.  v0:= 0I;
  #L528cda.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.PublishSubject` v4 @kind this) @signature `Lio/reactivex/subjects/PublishSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528d88.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528d8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528d92.  v0:= temp @kind object;
  #L528d94.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528d98.  if v0 != v1 then goto L528d9e;
  #L528d9c.  return @kind void;
  #L528d9e.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528da2.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L528da8.  v0:= temp @kind object;
  #L528daa.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528dae.  v1:= length @variable v0;
  #L528db0.  v2:= 0I;
  #L528db2.  if v2 >= v1 then goto L528dc6;
  #L528db6.  v3:= v0[v2] @kind object;
  #L528dba.  call `a`(v3) @signature `Lio/reactivex/subjects/PublishSubject$a;.a:()V` @kind virtual;
  #L528dc0.  v2:= v2 + 1;
  #L528dc4.  goto L528db2;
  #L528dc6.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528dd8.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L528ddc.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L528de2.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528de6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528dec.  v0:= temp @kind object;
  #L528dee.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528df2.  if v0 != v1 then goto L528dfe;
  #L528df6.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L528dfc.  return @kind void;
  #L528dfe.  v4.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L528e02.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528e06.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L528e0c.  v0:= temp @kind object;
  #L528e0e.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528e12.  v1:= length @variable v0;
  #L528e14.  v2:= 0I;
  #L528e16.  if v2 >= v1 then goto L528e2a;
  #L528e1a.  v3:= v0[v2] @kind object;
  #L528e1e.  call `b`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @kind virtual;
  #L528e24.  v2:= v2 + 1;
  #L528e28.  goto L528e16;
  #L528e2a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.PublishSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528e3c.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L528e40.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L528e46.  v0:= v4.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528e4a.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528e50.  v0:= temp @kind object;
  #L528e52.  v0:= (`io.reactivex.subjects.PublishSubject$a`[]) v0 @kind object;
  #L528e56.  v1:= length @variable v0;
  #L528e58.  v2:= 0I;
  #L528e5a.  if v2 >= v1 then goto L528e6e;
  #L528e5e.  v3:= v0[v2] @kind object;
  #L528e62.  call `c`(v3, v5) @signature `Lio/reactivex/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @kind virtual;
  #L528e68.  v2:= v2 + 1;
  #L528e6c.  goto L528e5a;
  #L528e6e.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528e80.  v0:= v2.`io.reactivex.subjects.PublishSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528e84.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528e8a.  v0:= temp @kind object;
  #L528e8c.  v1:= `@@io.reactivex.subjects.PublishSubject.c` @type ^`io.reactivex.subjects.PublishSubject$a`[] @kind object;
  #L528e90.  if v0 != v1 then goto L528e9a;
  #L528e94.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L528e9a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.PublishSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/PublishSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L528f40.  v0:= new `io.reactivex.subjects.PublishSubject$a`;
  #L528f44.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/PublishSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @kind direct;
  #L528f4a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L528f50.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.d:(Lio/reactivex/subjects/PublishSubject$a;)Z` @kind virtual;
  #L528f56.  v1:= temp;
  #L528f58.  if v1 == 0 then goto L528f70;
  #L528f5c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/PublishSubject$a;.isDisposed:()Z` @kind virtual;
  #L528f62.  v3:= temp;
  #L528f64.  if v3 == 0 then goto L528f86;
  #L528f68.  call `e`(v2, v0) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @kind virtual;
  #L528f6e.  goto L528f86;
  #L528f70.  v0:= v2.`io.reactivex.subjects.PublishSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L528f74.  if v0 == 0 then goto L528f80;
  #L528f78.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L528f7e.  goto L528f86;
  #L528f80.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L528f86.  return @kind void;
}
