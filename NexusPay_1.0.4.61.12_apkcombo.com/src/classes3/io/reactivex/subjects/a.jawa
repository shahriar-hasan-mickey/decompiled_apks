record `io.reactivex.subjects.a` @kind class @AccessFlag FINAL extends `io.reactivex.subjects.Subject` @kind class, `io.reactivex.internal.util.AppendOnlyLinkedArrayList$NonThrowingPredicate` @kind interface {
  `io.reactivex.subjects.Subject` `io.reactivex.subjects.a.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.a.b` @AccessFlag ;
  `io.reactivex.internal.util.AppendOnlyLinkedArrayList` `io.reactivex.subjects.a.c` @AccessFlag ;
  `boolean` `io.reactivex.subjects.a.d` @AccessFlag VOLATILE;
}
procedure `void` `<init>`(`io.reactivex.subjects.a` v0 @kind this, `io.reactivex.subjects.Subject` v1 @kind object) @signature `Lio/reactivex/subjects/a;.<init>:(Lio/reactivex/subjects/Subject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L52a188.  call `<init>`(v0) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L52a18e.  v0.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` := v1 @kind object;
  #L52a192.  return @kind void;
}
procedure `void` `d`(`io.reactivex.subjects.a` v2 @kind this) @signature `Lio/reactivex/subjects/a;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52a1a4.  @monitorenter v2
  #L52a1a6.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52a1aa.  if v0 != 0 then goto L52a1b8;
  #L52a1ae.  v0:= 0I;
  #L52a1b0.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L52a1b4.  @monitorexit v2
  #L52a1b6.  return @kind void;
  #L52a1b8.  v1:= 0I;
  #L52a1ba.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v1 @kind object;
  #L52a1be.  @monitorexit v2
  #L52a1c0.  call `forEachWhile`(v0, v2) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.forEachWhile:(Lio/reactivex/internal/util/AppendOnlyLinkedArrayList$NonThrowingPredicate;)V` @kind virtual;
  #L52a1c6.  goto L52a1a4;
  #L52a1c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a1ca.  @monitorexit v2
  #L52a1cc.  throw v0;
  catch `java.lang.Throwable` @[L52a1a6..L52a1c0] goto L52a1c8;
  catch `java.lang.Throwable` @[L52a1ca..L52a1cc] goto L52a1c8;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a168.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a16c.  call temp:= `getThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.getThrowable:()Ljava/lang/Throwable;` @kind virtual;
  #L52a172.  v0:= temp @kind object;
  #L52a174.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a0e8.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a0ec.  call temp:= `hasComplete`(v0) @signature `Lio/reactivex/subjects/Subject;.hasComplete:()Z` @kind virtual;
  #L52a0f2.  v0:= temp;
  #L52a0f4.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a108.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a10c.  call temp:= `hasObservers`(v0) @signature `Lio/reactivex/subjects/Subject;.hasObservers:()Z` @kind virtual;
  #L52a112.  v0:= temp;
  #L52a114.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.a` v1 @kind this) @signature `Lio/reactivex/subjects/a;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a128.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a12c.  call temp:= `hasThrowable`(v0) @signature `Lio/reactivex/subjects/Subject;.hasThrowable:()Z` @kind virtual;
  #L52a132.  v0:= temp;
  #L52a134.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.a` v2 @kind this) @signature `Lio/reactivex/subjects/a;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a1f4.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a1f8.  if v0 == 0 then goto L52a1fe;
  #L52a1fc.  return @kind void;
  #L52a1fe.  @monitorenter v2
  #L52a200.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a204.  if v0 == 0 then goto L52a20c;
  #L52a208.  @monitorexit v2
  #L52a20a.  return @kind void;
  #L52a20c.  v0:= 1I;
  #L52a20e.  v2.`io.reactivex.subjects.a.d` @type ^`boolean` := v0 @kind boolean;
  #L52a212.  v1:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L52a216.  if v1 == 0 then goto L52a244;
  #L52a21a.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52a21e.  if v0 != 0 then goto L52a232;
  #L52a222.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52a226.  v1:= 4I;
  #L52a228.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52a22e.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52a232.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L52a238.  v1:= temp @kind object;
  #L52a23a.  call `add`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52a240.  @monitorexit v2
  #L52a242.  return @kind void;
  #L52a244.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L52a248.  @monitorexit v2
  #L52a24a.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a24e.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L52a254.  return @kind void;
  #L52a256.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a258.  @monitorexit v2
  #L52a25a.  throw v0;
  catch `java.lang.Throwable` @[L52a200..L52a24a] goto L52a256;
  catch `java.lang.Throwable` @[L52a258..L52a25a] goto L52a256;
}
procedure `void` `onError`(`io.reactivex.subjects.a` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a280.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a284.  if v0 == 0 then goto L52a290;
  #L52a288.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52a28e.  return @kind void;
  #L52a290.  @monitorenter v2
  #L52a292.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a296.  v1:= 1I;
  #L52a298.  if v0 == 0 then goto L52a29e;
  #L52a29c.  goto L52a2dc;
  #L52a29e.  v2.`io.reactivex.subjects.a.d` @type ^`boolean` := v1 @kind boolean;
  #L52a2a2.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L52a2a6.  if v0 == 0 then goto L52a2d4;
  #L52a2aa.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52a2ae.  if v0 != 0 then goto L52a2c2;
  #L52a2b2.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52a2b6.  v1:= 4I;
  #L52a2b8.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52a2be.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52a2c2.  call temp:= `error`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L52a2c8.  v3:= temp @kind object;
  #L52a2ca.  call `setFirst`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.setFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L52a2d0.  @monitorexit v2
  #L52a2d2.  return @kind void;
  #L52a2d4.  v0:= 0I;
  #L52a2d6.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L52a2da.  v1:= 0I;
  #L52a2dc.  @monitorexit v2
  #L52a2de.  if v1 == 0 then goto L52a2ea;
  #L52a2e2.  call `onError`(v3) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52a2e8.  return @kind void;
  #L52a2ea.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a2ee.  call `onError`(v0, v3) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52a2f4.  return @kind void;
  #L52a2f6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a2f8.  @monitorexit v2
  #L52a2fa.  throw v3;
  catch `java.lang.Throwable` @[L52a292..L52a2de] goto L52a2f6;
  catch `java.lang.Throwable` @[L52a2f8..L52a2fa] goto L52a2f6;
}
procedure `void` `onNext`(`io.reactivex.subjects.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a320.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a324.  if v0 == 0 then goto L52a32a;
  #L52a328.  return @kind void;
  #L52a32a.  @monitorenter v2
  #L52a32c.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a330.  if v0 == 0 then goto L52a338;
  #L52a334.  @monitorexit v2
  #L52a336.  return @kind void;
  #L52a338.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L52a33c.  if v0 == 0 then goto L52a36a;
  #L52a340.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52a344.  if v0 != 0 then goto L52a358;
  #L52a348.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52a34c.  v1:= 4I;
  #L52a34e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52a354.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52a358.  call temp:= `next`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L52a35e.  v3:= temp @kind object;
  #L52a360.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52a366.  @monitorexit v2
  #L52a368.  return @kind void;
  #L52a36a.  v0:= 1I;
  #L52a36c.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v0 @kind boolean;
  #L52a370.  @monitorexit v2
  #L52a372.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a376.  call `onNext`(v0, v3) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52a37c.  call `d`(v2) @signature `Lio/reactivex/subjects/a;.d:()V` @kind virtual;
  #L52a382.  return @kind void;
  #L52a384.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a386.  @monitorexit v2
  #L52a388.  throw v3;
  catch `java.lang.Throwable` @[L52a32c..L52a372] goto L52a384;
  catch `java.lang.Throwable` @[L52a386..L52a388] goto L52a384;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.a` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/a;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a3b0.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a3b4.  v1:= 1I;
  #L52a3b6.  if v0 != 0 then goto L52a40a;
  #L52a3ba.  @monitorenter v2
  #L52a3bc.  v0:= v2.`io.reactivex.subjects.a.d` @type ^`boolean` @kind boolean;
  #L52a3c0.  if v0 == 0 then goto L52a3c6;
  #L52a3c4.  goto L52a400;
  #L52a3c6.  v0:= v2.`io.reactivex.subjects.a.b` @type ^`boolean` @kind boolean;
  #L52a3ca.  if v0 == 0 then goto L52a3f8;
  #L52a3ce.  v0:= v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` @kind object;
  #L52a3d2.  if v0 != 0 then goto L52a3e6;
  #L52a3d6.  v0:= new `io.reactivex.internal.util.AppendOnlyLinkedArrayList`;
  #L52a3da.  v1:= 4I;
  #L52a3dc.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.<init>:(I)V` @kind direct;
  #L52a3e2.  v2.`io.reactivex.subjects.a.c` @type ^`io.reactivex.internal.util.AppendOnlyLinkedArrayList` := v0 @kind object;
  #L52a3e6.  call temp:= `disposable`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.disposable:(Lio/reactivex/disposables/Disposable;)Ljava/lang/Object;` @kind static;
  #L52a3ec.  v3:= temp @kind object;
  #L52a3ee.  call `add`(v0, v3) @signature `Lio/reactivex/internal/util/AppendOnlyLinkedArrayList;.add:(Ljava/lang/Object;)V` @kind virtual;
  #L52a3f4.  @monitorexit v2
  #L52a3f6.  return @kind void;
  #L52a3f8.  v2.`io.reactivex.subjects.a.b` @type ^`boolean` := v1 @kind boolean;
  #L52a3fc.  v0:= 0I;
  #L52a3fe.  v1:= 0I;
  #L52a400.  @monitorexit v2
  #L52a402.  goto L52a40a;
  #L52a404.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52a406.  @monitorexit v2
  #L52a408.  throw v3;
  #L52a40a.  if v1 == 0 then goto L52a416;
  #L52a40e.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L52a414.  goto L52a426;
  #L52a416.  v0:= v2.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a41a.  call `onSubscribe`(v0, v3) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L52a420.  call `d`(v2) @signature `Lio/reactivex/subjects/a;.d:()V` @kind virtual;
  #L52a426.  return @kind void;
  catch `java.lang.Throwable` @[L52a3bc..L52a408] goto L52a404;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.a` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/a;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L52a444.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a448.  call `subscribe`(v0, v2) @signature `Lio/reactivex/Observable;.subscribe:(Lio/reactivex/Observer;)V` @kind virtual;
  #L52a44e.  return @kind void;
}
procedure `boolean` `test`(`io.reactivex.subjects.a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/a;.test:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a148.  v0:= v1.`io.reactivex.subjects.a.a` @type ^`io.reactivex.subjects.Subject` @kind object;
  #L52a14c.  call temp:= `acceptFull`(v2, v0) @signature `Lio/reactivex/internal/util/NotificationLite;.acceptFull:(Ljava/lang/Object;Lio/reactivex/Observer;)Z` @kind static;
  #L52a152.  v2:= temp;
  #L52a154.  return v2;
}
