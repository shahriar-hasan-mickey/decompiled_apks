record `io.reactivex.subjects.PublishSubject$a` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicBoolean` @kind class, `io.reactivex.disposables.Disposable` @kind interface {
  `io.reactivex.Observer` `io.reactivex.subjects.PublishSubject$a.a` @AccessFlag FINAL;
  `io.reactivex.subjects.PublishSubject` `io.reactivex.subjects.PublishSubject$a.b` @AccessFlag FINAL;
}
global `long` `@@io.reactivex.subjects.PublishSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.PublishSubject$a` v0 @kind this, `io.reactivex.Observer` v1 @kind object, `io.reactivex.subjects.PublishSubject` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/PublishSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L528b34.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L528b3a.  v0.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` := v1 @kind object;
  #L528b3e.  v0.`io.reactivex.subjects.PublishSubject$a.b` @type ^`io.reactivex.subjects.PublishSubject` := v2 @kind object;
  #L528b42.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528b80.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L528b86.  v0:= temp;
  #L528b88.  if v0 != 0 then goto L528b96;
  #L528b8c.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L528b90.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L528b96.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.b:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528ba8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L528bae.  v0:= temp;
  #L528bb0.  if v0 == 0 then goto L528bbc;
  #L528bb4.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L528bba.  goto L528bc6;
  #L528bbc.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L528bc0.  call `onError`(v0, v2) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L528bc6.  return @kind void;
}
procedure `void` `c`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/PublishSubject$a;.c:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528bd8.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L528bde.  v0:= temp;
  #L528be0.  if v0 != 0 then goto L528bee;
  #L528be4.  v0:= v1.`io.reactivex.subjects.PublishSubject$a.a` @type ^`io.reactivex.Observer` @kind object;
  #L528be8.  call `onNext`(v0, v2) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L528bee.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.PublishSubject$a` v2 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528b54.  v0:= 0I;
  #L528b56.  v1:= 1I;
  #L528b58.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L528b5e.  v0:= temp;
  #L528b60.  if v0 == 0 then goto L528b6e;
  #L528b64.  v0:= v2.`io.reactivex.subjects.PublishSubject$a.b` @type ^`io.reactivex.subjects.PublishSubject` @kind object;
  #L528b68.  call `e`(v0, v2) @signature `Lio/reactivex/subjects/PublishSubject;.e:(Lio/reactivex/subjects/PublishSubject$a;)V` @kind virtual;
  #L528b6e.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.PublishSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/PublishSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528b18.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L528b1e.  v0:= temp;
  #L528b20.  return v0;
}
