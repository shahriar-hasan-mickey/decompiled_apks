record `io.reactivex.subjects.ReplaySubject$g` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `java.util.List` `io.reactivex.subjects.ReplaySubject$g.a` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject$g.b` @AccessFlag VOLATILE;
  `int` `io.reactivex.subjects.ReplaySubject$g.c` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$g.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$g` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L529a04.  call `<init>`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L529a0a.  v0:= new `java.util.ArrayList`;
  #L529a0e.  v1:= "capacityHint" @kind object;
  #L529a12.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L529a18.  v3:= temp;
  #L529a1a.  call `<init>`(v0, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L529a20.  v2.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` := v0 @kind object;
  #L529a24.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529a60.  v0:= v1.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L529a64.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L529a6a.  call `c`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$g;.c:()V` @kind virtual;
  #L529a70.  v2:= v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529a74.  v0:= 1I;
  #L529a76.  v2:= v2 + v0 @kind int;
  #L529a78.  v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int` := v2;
  #L529a7c.  v1.`io.reactivex.subjects.ReplaySubject$g.b` @type ^`boolean` := v0 @kind boolean;
  #L529a80.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529a38.  v0:= v1.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L529a3c.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L529a42.  v2:= v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529a46.  v2:= v2 + 1;
  #L529a4a.  v1.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int` := v2;
  #L529a4e.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.ReplaySubject$g` v9 @kind this, `io.reactivex.subjects.ReplaySubject$c` v10 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L529a94.  call temp:= `getAndIncrement`(v10) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L529a9a.  v0:= temp;
  #L529a9c.  if v0 == 0 then goto L529aa2;
  #L529aa0.  return @kind void;
  #L529aa2.  v0:= v9.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L529aa6.  v1:= v10.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L529aaa.  v2:= v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L529aae.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L529ab2.  v3:= 0I;
  #L529ab4.  v4:= 1I;
  #L529ab6.  if v2 == 0 then goto L529ac4;
  #L529aba.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L529ac0.  v3:= temp;
  #L529ac2.  goto L529ad0;
  #L529ac4.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L529aca.  v2:= temp @kind object;
  #L529acc.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v2 @kind object;
  #L529ad0.  v2:= 1I;
  #L529ad2.  v5:= v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L529ad6.  v6:= 0I;
  #L529ad8.  if v5 == 0 then goto L529ae2;
  #L529adc.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L529ae0.  return @kind void;
  #L529ae2.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529ae6.  if v5 == v3 then goto L529b50;
  #L529aea.  v7:= v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L529aee.  if v7 == 0 then goto L529af8;
  #L529af2.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L529af6.  return @kind void;
  #L529af8.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L529afe.  v7:= temp @kind object;
  #L529b00.  v8:= v9.`io.reactivex.subjects.ReplaySubject$g.b` @type ^`boolean` @kind boolean;
  #L529b04.  if v8 == 0 then goto L529b44;
  #L529b08.  v8:= v3 + 1;
  #L529b0c.  if v8 != v5 then goto L529b44;
  #L529b10.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529b14.  if v8 != v5 then goto L529b44;
  #L529b18.  call temp:= `isComplete`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L529b1e.  v0:= temp;
  #L529b20.  if v0 == 0 then goto L529b2c;
  #L529b24.  call `onComplete`(v1) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L529b2a.  goto L529b3a;
  #L529b2c.  call temp:= `getError`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L529b32.  v0:= temp @kind object;
  #L529b34.  call `onError`(v1, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L529b3a.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v6 @kind object;
  #L529b3e.  v10.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v4 @kind boolean;
  #L529b42.  return @kind void;
  #L529b44.  call `onNext`(v1, v7) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L529b4a.  v3:= v3 + 1;
  #L529b4e.  goto L529ae6;
  #L529b50.  v5:= v9.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529b54.  if v3 == v5 then goto L529b5a;
  #L529b58.  goto L529ad2;
  #L529b5a.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L529b60.  v5:= temp @kind object;
  #L529b62.  v10.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L529b66.  v2:= -v2 @kind int;
  #L529b68.  call temp:= `addAndGet`(v10, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L529b6e.  v2:= temp;
  #L529b70.  if v2 != 0 then goto L529ad2;
  #L529b74.  return @kind void;
}
procedure `void` `c`(`io.reactivex.subjects.ReplaySubject$g` v0 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$g;.c:()V` @AccessFlag PUBLIC {
    temp;

  #L529b88.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.subjects.ReplaySubject$g` v6 @kind this, `java.lang.Object`[] v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$g;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52995c.  v0:= v6.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529960.  v1:= 0I;
  #L529962.  v2:= 0I;
  #L529964.  if v0 != 0 then goto L529974;
  #L529968.  v0:= length @variable v7;
  #L52996a.  if v0 == 0 then goto L529972;
  #L52996e.  v7[v2]:= v1 @kind object;
  #L529972.  return v7 @kind object;
  #L529974.  v3:= v6.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L529978.  v4:= v0 + -1;
  #L52997c.  call temp:= `get`(v3, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L529982.  v4:= temp @kind object;
  #L529984.  call temp:= `isComplete`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52998a.  v5:= temp;
  #L52998c.  if v5 != 0 then goto L52999c;
  #L529990.  call temp:= `isError`(v4) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L529996.  v4:= temp;
  #L529998.  if v4 == 0 then goto L5299b0;
  #L52999c.  v0:= v0 + -1;
  #L5299a0.  if v0 != 0 then goto L5299b0;
  #L5299a4.  v0:= length @variable v7;
  #L5299a6.  if v0 == 0 then goto L5299ae;
  #L5299aa.  v7[v2]:= v1 @kind object;
  #L5299ae.  return v7 @kind object;
  #L5299b0.  v4:= length @variable v7;
  #L5299b2.  if v4 >= v0 then goto L5299d2;
  #L5299b6.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L5299bc.  v7:= temp @kind object;
  #L5299be.  call temp:= `getComponentType`(v7) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L5299c4.  v7:= temp @kind object;
  #L5299c6.  call temp:= `newInstance`(v7, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L5299cc.  v7:= temp @kind object;
  #L5299ce.  v7:= (`java.lang.Object`[]) v7 @kind object;
  #L5299d2.  if v2 >= v0 then goto L5299e8;
  #L5299d6.  call temp:= `get`(v3, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L5299dc.  v4:= temp @kind object;
  #L5299de.  v7[v2]:= v4 @kind object;
  #L5299e2.  v2:= v2 + 1;
  #L5299e6.  goto L5299d2;
  #L5299e8.  v2:= length @variable v7;
  #L5299ea.  if v2 <= v0 then goto L5299f2;
  #L5299ee.  v7[v0]:= v1 @kind object;
  #L5299f2.  return v7 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$g` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$g;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5298fc.  v0:= v5.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L529900.  v1:= 0I;
  #L529902.  if v0 == 0 then goto L529948;
  #L529906.  v2:= v5.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L52990a.  v3:= v0 + -1;
  #L52990e.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L529914.  v3:= temp @kind object;
  #L529916.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52991c.  v4:= temp;
  #L52991e.  if v4 != 0 then goto L529932;
  #L529922.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L529928.  v4:= temp;
  #L52992a.  if v4 == 0 then goto L529930;
  #L52992e.  goto L529932;
  #L529930.  return v3 @kind object;
  #L529932.  v3:= 1I;
  #L529934.  if v0 != v3 then goto L52993a;
  #L529938.  return v1 @kind object;
  #L52993a.  v0:= v0 + -2;
  #L52993e.  call temp:= `get`(v2, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L529944.  v0:= temp @kind object;
  #L529946.  return v0 @kind object;
  #L529948.  return v1 @kind object;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$g` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5298b0.  v0:= v4.`io.reactivex.subjects.ReplaySubject$g.c` @type ^`int`;
  #L5298b4.  if v0 == 0 then goto L5298e6;
  #L5298b8.  v1:= v4.`io.reactivex.subjects.ReplaySubject$g.a` @type ^`java.util.List` @kind object;
  #L5298bc.  v2:= v0 + -1;
  #L5298c0.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L5298c6.  v1:= temp @kind object;
  #L5298c8.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L5298ce.  v3:= temp;
  #L5298d0.  if v3 != 0 then goto L5298e4;
  #L5298d4.  call temp:= `isError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L5298da.  v1:= temp;
  #L5298dc.  if v1 == 0 then goto L5298e2;
  #L5298e0.  goto L5298e4;
  #L5298e2.  return v0;
  #L5298e4.  return v2;
  #L5298e6.  v0:= 0I;
  #L5298e8.  return v0;
}
