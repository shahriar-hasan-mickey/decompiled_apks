record `io.reactivex.subjects.UnicastSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `io.reactivex.internal.queue.SpscLinkedArrayQueue` `io.reactivex.subjects.UnicastSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.UnicastSubject.c` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.d` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.e` @AccessFlag VOLATILE;
  `boolean` `io.reactivex.subjects.UnicastSubject.f` @AccessFlag VOLATILE;
  `java.lang.Throwable` `io.reactivex.subjects.UnicastSubject.g` @AccessFlag ;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.UnicastSubject.h` @AccessFlag FINAL;
  `io.reactivex.internal.observers.BasicIntQueueDisposable` `io.reactivex.subjects.UnicastSubject.i` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.UnicastSubject.j` @AccessFlag ;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `java.lang.Runnable` v4 @kind object, `boolean` v5 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L52abe4.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L52abea.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L52abee.  v1:= "capacityHint" @kind object;
  #L52abf2.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L52abf8.  v3:= temp;
  #L52abfa.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L52ac00.  v2.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L52ac04.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52ac08.  v0:= "onTerminate" @kind object;
  #L52ac0c.  call temp:= `requireNonNull`(v4, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52ac12.  v4:= temp @kind object;
  #L52ac14.  call `<init>`(v3, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52ac1a.  v2.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L52ac1e.  v2.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` := v5 @kind boolean;
  #L52ac22.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52ac26.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52ac2c.  v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L52ac30.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L52ac34.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L52ac3a.  v2.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L52ac3e.  v3:= new `io.reactivex.subjects.UnicastSubject$a`;
  #L52ac42.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L52ac48.  v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L52ac4c.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `int` v3 , `boolean` v4 ) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L52ab74.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L52ab7a.  v0:= new `io.reactivex.internal.queue.SpscLinkedArrayQueue`;
  #L52ab7e.  v1:= "capacityHint" @kind object;
  #L52ab82.  call temp:= `verifyPositive`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L52ab88.  v3:= temp;
  #L52ab8a.  call `<init>`(v0, v3) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.<init>:(I)V` @kind direct;
  #L52ab90.  v2.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` := v0 @kind object;
  #L52ab94.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52ab98.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52ab9e.  v2.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L52aba2.  v2.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` := v4 @kind boolean;
  #L52aba6.  v3:= new `java.util.concurrent.atomic.AtomicReference`;
  #L52abaa.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52abb0.  v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v3 @kind object;
  #L52abb4.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L52abb8.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L52abbe.  v2.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L52abc2.  v3:= new `io.reactivex.subjects.UnicastSubject$a`;
  #L52abc6.  call `<init>`(v3, v2) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @kind direct;
  #L52abcc.  v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` := v3 @kind object;
  #L52abd0.  return @kind void;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`() @signature `Lio/reactivex/subjects/UnicastSubject;.create:()Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L52aaa8.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L52aaac.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L52aab2.  v1:= temp;
  #L52aab4.  v2:= 1I;
  #L52aab6.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L52aabc.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(I)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L52aaf4.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L52aaf8.  v1:= 1I;
  #L52aafa.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L52ab00.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v2 , `java.lang.Runnable` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L52ab14.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L52ab18.  v1:= 1I;
  #L52ab1a.  call `<init>`(v0, v2, v3, v1) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L52ab20.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`int` v1 , `java.lang.Runnable` v2 @kind object, `boolean` v3 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(ILjava/lang/Runnable;Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52ab34.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L52ab38.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(ILjava/lang/Runnable;Z)V` @kind direct;
  #L52ab3e.  return v0 @kind object;
}
procedure `io.reactivex.subjects.UnicastSubject` `create`(`boolean` v2 ) @signature `Lio/reactivex/subjects/UnicastSubject;.create:(Z)Lio/reactivex/subjects/UnicastSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L52aad0.  v0:= new `io.reactivex.subjects.UnicastSubject`;
  #L52aad4.  call temp:= `bufferSize`() @signature `Lio/reactivex/Observable;.bufferSize:()I` @kind static;
  #L52aada.  v1:= temp;
  #L52aadc.  call `<init>`(v0, v1, v2) @signature `Lio/reactivex/subjects/UnicastSubject;.<init>:(IZ)V` @kind direct;
  #L52aae2.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.subjects.UnicastSubject` v3 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L52ac60.  v0:= v3.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52ac64.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52ac6a.  v0:= temp @kind object;
  #L52ac6c.  v0:= (`java.lang.Runnable`) v0 @kind object;
  #L52ac70.  if v0 == 0 then goto L52ac8c;
  #L52ac74.  v1:= v3.`io.reactivex.subjects.UnicastSubject.c` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52ac78.  v2:= 0I;
  #L52ac7a.  call temp:= `compareAndSet`(v1, v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52ac80.  v1:= temp;
  #L52ac82.  if v1 == 0 then goto L52ac8c;
  #L52ac86.  call `run`(v0) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L52ac8c.  return @kind void;
}
procedure `void` `e`(`io.reactivex.subjects.UnicastSubject` v2 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52aca0.  v0:= v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52aca4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L52acaa.  v0:= temp;
  #L52acac.  if v0 == 0 then goto L52acb2;
  #L52acb0.  return @kind void;
  #L52acb2.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52acb6.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52acbc.  v0:= temp @kind object;
  #L52acbe.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L52acc2.  v1:= 1I;
  #L52acc4.  if v0 == 0 then goto L52ace0;
  #L52acc8.  v1:= v2.`io.reactivex.subjects.UnicastSubject.j` @type ^`boolean` @kind boolean;
  #L52accc.  if v1 == 0 then goto L52acd8;
  #L52acd0.  call `f`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.f:(Lio/reactivex/Observer;)V` @kind virtual;
  #L52acd6.  goto L52acde;
  #L52acd8.  call `g`(v2, v0) @signature `Lio/reactivex/subjects/UnicastSubject;.g:(Lio/reactivex/Observer;)V` @kind virtual;
  #L52acde.  return @kind void;
  #L52ace0.  v0:= v2.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52ace4.  v1:= -v1 @kind int;
  #L52ace6.  call temp:= `addAndGet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L52acec.  v1:= temp;
  #L52acee.  if v1 != 0 then goto L52acf4;
  #L52acf2.  return @kind void;
  #L52acf4.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52acf8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52acfe.  v0:= temp @kind object;
  #L52ad00.  v0:= (`io.reactivex.Observer`) v0 @kind object;
  #L52ad04.  goto L52acc4;
}
procedure `void` `f`(`io.reactivex.subjects.UnicastSubject` v6 @kind this, `io.reactivex.Observer` v7 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.f:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52ad18.  v0:= v6.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52ad1c.  v1:= v6.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L52ad20.  v2:= 1I;
  #L52ad22.  v1:= v1 ^~ v2 @kind int;
  #L52ad24.  v3:= v6.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52ad28.  v4:= 0I;
  #L52ad2a.  if v3 == 0 then goto L52ad3a;
  #L52ad2e.  v7:= v6.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52ad32.  call `lazySet`(v7, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52ad38.  return @kind void;
  #L52ad3a.  v3:= v6.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52ad3e.  if v1 == 0 then goto L52ad54;
  #L52ad42.  if v3 == 0 then goto L52ad54;
  #L52ad46.  call temp:= `i`(v6, v0, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L52ad4c.  v5:= temp;
  #L52ad4e.  if v5 == 0 then goto L52ad54;
  #L52ad52.  return @kind void;
  #L52ad54.  call `onNext`(v7, v4) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52ad5a.  if v3 == 0 then goto L52ad66;
  #L52ad5e.  call `h`(v6, v7) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L52ad64.  return @kind void;
  #L52ad66.  v3:= v6.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52ad6a.  v2:= -v2 @kind int;
  #L52ad6c.  call temp:= `addAndGet`(v3, v2) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L52ad72.  v2:= temp;
  #L52ad74.  if v2 != 0 then goto L52ad24;
  #L52ad78.  return @kind void;
}
procedure `void` `g`(`io.reactivex.subjects.UnicastSubject` v9 @kind this, `io.reactivex.Observer` v10 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.g:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L52ad8c.  v0:= v9.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52ad90.  v1:= v9.`io.reactivex.subjects.UnicastSubject.d` @type ^`boolean` @kind boolean;
  #L52ad94.  v2:= 1I;
  #L52ad96.  v1:= v1 ^~ v2 @kind int;
  #L52ad98.  v3:= 1I;
  #L52ad9a.  v4:= 1I;
  #L52ad9c.  v5:= v9.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52ada0.  if v5 == 0 then goto L52adb8;
  #L52ada4.  v10:= v9.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52ada8.  v1:= 0I;
  #L52adaa.  call `lazySet`(v10, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52adb0.  call `clear`(v0) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L52adb6.  return @kind void;
  #L52adb8.  v5:= v9.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52adbc.  v6:= v9.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52adc0.  call temp:= `poll`(v6) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L52adc6.  v6:= temp @kind object;
  #L52adc8.  v7:= 0I;
  #L52adca.  if v6 != 0 then goto L52add2;
  #L52adce.  v8:= 1I;
  #L52add0.  goto L52add4;
  #L52add2.  v8:= 0I;
  #L52add4.  if v5 == 0 then goto L52adfc;
  #L52add8.  if v1 == 0 then goto L52adf0;
  #L52addc.  if v3 == 0 then goto L52adf0;
  #L52ade0.  call temp:= `i`(v9, v0, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @kind virtual;
  #L52ade6.  v3:= temp;
  #L52ade8.  if v3 == 0 then goto L52adee;
  #L52adec.  return @kind void;
  #L52adee.  v3:= 0I;
  #L52adf0.  if v8 == 0 then goto L52adfc;
  #L52adf4.  call `h`(v9, v10) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @kind virtual;
  #L52adfa.  return @kind void;
  #L52adfc.  if v8 == 0 then goto L52ae14;
  #L52ae00.  v5:= v9.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52ae04.  v4:= -v4 @kind int;
  #L52ae06.  call temp:= `addAndGet`(v5, v4) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L52ae0c.  v4:= temp;
  #L52ae0e.  if v4 != 0 then goto L52ad9c;
  #L52ae12.  return @kind void;
  #L52ae14.  call `onNext`(v10, v6) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L52ae1a.  goto L52ad9c;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52ab50.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52ab54.  if v0 == 0 then goto L52ab5e;
  #L52ab58.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52ab5c.  return v0 @kind object;
  #L52ab5e.  v0:= 0I;
  #L52ab60.  return v0 @kind object;
}
procedure `void` `h`(`io.reactivex.subjects.UnicastSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.h:(Lio/reactivex/Observer;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52ae2c.  v0:= v2.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52ae30.  v1:= 0I;
  #L52ae32.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52ae38.  v0:= v2.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52ae3c.  if v0 == 0 then goto L52ae48;
  #L52ae40.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52ae46.  goto L52ae4e;
  #L52ae48.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L52ae4e.  return @kind void;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52aa30.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52aa34.  if v0 == 0 then goto L52aa44;
  #L52aa38.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52aa3c.  if v0 != 0 then goto L52aa44;
  #L52aa40.  v0:= 1I;
  #L52aa42.  goto L52aa46;
  #L52aa44.  v0:= 0I;
  #L52aa46.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52aa58.  v0:= v1.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52aa5c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52aa62.  v0:= temp @kind object;
  #L52aa64.  if v0 == 0 then goto L52aa6c;
  #L52aa68.  v0:= 1I;
  #L52aa6a.  goto L52aa6e;
  #L52aa6c.  v0:= 0I;
  #L52aa6e.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52aa80.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52aa84.  if v0 == 0 then goto L52aa94;
  #L52aa88.  v0:= v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52aa8c.  if v0 == 0 then goto L52aa94;
  #L52aa90.  v0:= 1I;
  #L52aa92.  goto L52aa96;
  #L52aa94.  v0:= 0I;
  #L52aa96.  return v0;
}
procedure `boolean` `i`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.internal.fuseable.SimpleQueue` v4 @kind object, `io.reactivex.Observer` v5 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.i:(Lio/reactivex/internal/fuseable/SimpleQueue;Lio/reactivex/Observer;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L52a9f8.  v0:= v3.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` @kind object;
  #L52a9fc.  if v0 == 0 then goto L52aa1c;
  #L52aa00.  v1:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52aa04.  v2:= 0I;
  #L52aa06.  call `lazySet`(v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52aa0c.  call `clear`(v4) @signature `Lio/reactivex/internal/fuseable/SimpleQueue;.clear:()V` @kind interface;
  #L52aa12.  call `onError`(v5, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52aa18.  v4:= 1I;
  #L52aa1a.  return v4;
  #L52aa1c.  v4:= 0I;
  #L52aa1e.  return v4;
}
procedure `void` `onComplete`(`io.reactivex.subjects.UnicastSubject` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52ae60.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52ae64.  if v0 != 0 then goto L52ae84;
  #L52ae68.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52ae6c.  if v0 == 0 then goto L52ae72;
  #L52ae70.  goto L52ae84;
  #L52ae72.  v0:= 1I;
  #L52ae74.  v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` := v0 @kind boolean;
  #L52ae78.  call `d`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L52ae7e.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L52ae84.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52ae98.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L52ae9c.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52aea2.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52aea6.  if v0 != 0 then goto L52aecc;
  #L52aeaa.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52aeae.  if v0 == 0 then goto L52aeb4;
  #L52aeb2.  goto L52aecc;
  #L52aeb4.  v1.`io.reactivex.subjects.UnicastSubject.g` @type ^`java.lang.Throwable` := v2 @kind object;
  #L52aeb8.  v2:= 1I;
  #L52aeba.  v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` := v2 @kind boolean;
  #L52aebe.  call `d`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L52aec4.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L52aeca.  return @kind void;
  #L52aecc.  call `onError`(v2) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52aed2.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52aee4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L52aee8.  call temp:= `requireNonNull`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52aeee.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52aef2.  if v0 != 0 then goto L52af10;
  #L52aef6.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52aefa.  if v0 == 0 then goto L52af00;
  #L52aefe.  goto L52af10;
  #L52af00.  v0:= v1.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52af04.  call temp:= `offer`(v0, v2) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.offer:(Ljava/lang/Object;)Z` @kind virtual;
  #L52af0a.  call `e`(v1) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L52af10.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.UnicastSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52af24.  v0:= v1.`io.reactivex.subjects.UnicastSubject.f` @type ^`boolean` @kind boolean;
  #L52af28.  if v0 != 0 then goto L52af34;
  #L52af2c.  v0:= v1.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52af30.  if v0 == 0 then goto L52af3a;
  #L52af34.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L52af3a.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.UnicastSubject` v3 @kind this, `io.reactivex.Observer` v4 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L52af4c.  v0:= v3.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L52af50.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L52af56.  v0:= temp;
  #L52af58.  if v0 != 0 then goto L52afa2;
  #L52af5c.  v0:= v3.`io.reactivex.subjects.UnicastSubject.h` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L52af60.  v1:= 0I;
  #L52af62.  v2:= 1I;
  #L52af64.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L52af6a.  v0:= temp;
  #L52af6c.  if v0 == 0 then goto L52afa2;
  #L52af70.  v0:= v3.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52af74.  call `onSubscribe`(v4, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L52af7a.  v0:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52af7e.  call `lazySet`(v0, v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52af84.  v4:= v3.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52af88.  if v4 == 0 then goto L52af9a;
  #L52af8c.  v4:= v3.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52af90.  v0:= 0I;
  #L52af92.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52af98.  return @kind void;
  #L52af9a.  call `e`(v3) @signature `Lio/reactivex/subjects/UnicastSubject;.e:()V` @kind virtual;
  #L52afa0.  goto L52afb6;
  #L52afa2.  v0:= new `java.lang.IllegalStateException`;
  #L52afa6.  v1:= "Only a single observer allowed." @kind object;
  #L52afaa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52afb0.  call `error`(v0, v4) @signature `Lio/reactivex/internal/disposables/EmptyDisposable;.error:(Ljava/lang/Throwable;Lio/reactivex/Observer;)V` @kind static;
  #L52afb6.  return @kind void;
}
