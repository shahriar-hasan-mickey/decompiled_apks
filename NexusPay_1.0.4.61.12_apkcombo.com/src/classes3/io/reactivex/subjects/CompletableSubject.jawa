record `io.reactivex.subjects.CompletableSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Completable` @kind class, `io.reactivex.CompletableObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.CompletableSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.CompletableSubject.b` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.CompletableSubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.CompletableSubject$a`[] `@@io.reactivex.subjects.CompletableSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.CompletableSubject$a`[] `@@io.reactivex.subjects.CompletableSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/CompletableSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L528444.  v0:= 0I;
  #L528446.  v1:= new `io.reactivex.subjects.CompletableSubject$a`[v0];
  #L52844a.  `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] := v1 @kind object;
  #L52844e.  v0:= new `io.reactivex.subjects.CompletableSubject$a`[v0];
  #L528452.  `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] := v0 @kind object;
  #L528456.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L528468.  call `<init>`(v2) @signature `Lio/reactivex/Completable;.<init>:()V` @kind direct;
  #L52846e.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L528472.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L528478.  v2.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L52847c.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L528480.  v1:= `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L528484.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52848a.  v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L52848e.  return @kind void;
}
procedure `io.reactivex.subjects.CompletableSubject` `create`() @signature `Lio/reactivex/subjects/CompletableSubject;.create:()Lio/reactivex/subjects/CompletableSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5283f8.  v0:= new `io.reactivex.subjects.CompletableSubject`;
  #L5283fc.  call `<init>`(v0) @signature `Lio/reactivex/subjects/CompletableSubject;.<init>:()V` @kind direct;
  #L528402.  return v0 @kind object;
}
procedure `boolean` `e`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `io.reactivex.subjects.CompletableSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.e:(Lio/reactivex/subjects/CompletableSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52830c.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528310.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528316.  v0:= temp @kind object;
  #L528318.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L52831c.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L528320.  v2:= 0I;
  #L528322.  if v0 != v1 then goto L528328;
  #L528326.  return v2;
  #L528328.  v1:= length @variable v0;
  #L52832a.  v3:= v1 + 1;
  #L52832e.  v3:= new `io.reactivex.subjects.CompletableSubject$a`[v3];
  #L528332.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528338.  v3[v1]:= v5 @kind object;
  #L52833c.  v1:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528340.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528346.  v0:= temp;
  #L528348.  if v0 == 0 then goto L52830c;
  #L52834c.  v5:= 1I;
  #L52834e.  return v5;
}
procedure `void` `f`(`io.reactivex.subjects.CompletableSubject` v6 @kind this, `io.reactivex.subjects.CompletableSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.f:(Lio/reactivex/subjects/CompletableSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528588.  v0:= v6.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52858c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528592.  v0:= temp @kind object;
  #L528594.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L528598.  v1:= length @variable v0;
  #L52859a.  if v1 != 0 then goto L5285a0;
  #L52859e.  return @kind void;
  #L5285a0.  v2:= -1I;
  #L5285a2.  v3:= 0I;
  #L5285a4.  v4:= 0I;
  #L5285a6.  if v4 >= v1 then goto L5285bc;
  #L5285aa.  v5:= v0[v4] @kind object;
  #L5285ae.  if v5 != v7 then goto L5285b6;
  #L5285b2.  v2:= v4;
  #L5285b4.  goto L5285bc;
  #L5285b6.  v4:= v4 + 1;
  #L5285ba.  goto L5285a6;
  #L5285bc.  if v2 >= 0 then goto L5285c2;
  #L5285c0.  return @kind void;
  #L5285c2.  v4:= 1I;
  #L5285c4.  if v1 != v4 then goto L5285ce;
  #L5285c8.  v1:= `@@io.reactivex.subjects.CompletableSubject.d` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L5285cc.  goto L5285ec;
  #L5285ce.  v5:= v1 + -1;
  #L5285d2.  v5:= new `io.reactivex.subjects.CompletableSubject$a`[v5];
  #L5285d6.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5285dc.  v3:= v2 + 1;
  #L5285e0.  v1:= v1 - v2 @kind int;
  #L5285e2.  v1:= v1 - v4 @kind int;
  #L5285e4.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5285ea.  v1:= v5 @kind object;
  #L5285ec.  v2:= v6.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5285f0.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5285f6.  v0:= temp;
  #L5285f8.  if v0 == 0 then goto L528588;
  #L5285fc.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528414.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528418.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52841e.  v0:= temp @kind object;
  #L528420.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L528424.  if v0 != v1 then goto L52842e;
  #L528428.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L52842c.  return v0 @kind object;
  #L52842e.  v0:= 0I;
  #L528430.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528360.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528364.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52836a.  v0:= temp @kind object;
  #L52836c.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L528370.  if v0 != v1 then goto L528380;
  #L528374.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L528378.  if v0 != 0 then goto L528380;
  #L52837c.  v0:= 1I;
  #L52837e.  goto L528382;
  #L528380.  v0:= 0I;
  #L528382.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.CompletableSubject` v1 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L528394.  v0:= v1.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528398.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52839e.  v0:= temp @kind object;
  #L5283a0.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L5283a4.  v0:= length @variable v0;
  #L5283a6.  if v0 == 0 then goto L5283ae;
  #L5283aa.  v0:= 1I;
  #L5283ac.  goto L5283b0;
  #L5283ae.  v0:= 0I;
  #L5283b0.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.CompletableSubject` v2 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5283c4.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5283c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5283ce.  v0:= temp @kind object;
  #L5283d0.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L5283d4.  if v0 != v1 then goto L5283e4;
  #L5283d8.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L5283dc.  if v0 == 0 then goto L5283e4;
  #L5283e0.  v0:= 1I;
  #L5283e2.  goto L5283e6;
  #L5283e4.  v0:= 0I;
  #L5283e6.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.CompletableSubject` v4 @kind this) @signature `Lio/reactivex/subjects/CompletableSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5284a0.  v0:= v4.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5284a4.  v1:= 0I;
  #L5284a6.  v2:= 1I;
  #L5284a8.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5284ae.  v0:= temp;
  #L5284b0.  if v0 == 0 then goto L5284e2;
  #L5284b4.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5284b8.  v2:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L5284bc.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5284c2.  v0:= temp @kind object;
  #L5284c4.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L5284c8.  v2:= length @variable v0;
  #L5284ca.  if v1 >= v2 then goto L5284e2;
  #L5284ce.  v3:= v0[v1] @kind object;
  #L5284d2.  v3:= v3.`io.reactivex.subjects.CompletableSubject$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L5284d6.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L5284dc.  v1:= v1 + 1;
  #L5284e0.  goto L5284ca;
  #L5284e2.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.CompletableSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5284f4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L5284f8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5284fe.  v0:= v4.`io.reactivex.subjects.CompletableSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L528502.  v1:= 0I;
  #L528504.  v2:= 1I;
  #L528506.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L52850c.  v0:= temp;
  #L52850e.  if v0 == 0 then goto L528544;
  #L528512.  v4.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` := v5 @kind object;
  #L528516.  v0:= v4.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52851a.  v2:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L52851e.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L528524.  v0:= temp @kind object;
  #L528526.  v0:= (`io.reactivex.subjects.CompletableSubject$a`[]) v0 @kind object;
  #L52852a.  v2:= length @variable v0;
  #L52852c.  if v1 >= v2 then goto L52854a;
  #L528530.  v3:= v0[v1] @kind object;
  #L528534.  v3:= v3.`io.reactivex.subjects.CompletableSubject$a.a` @type ^`io.reactivex.CompletableObserver` @kind object;
  #L528538.  call `onError`(v3, v5) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52853e.  v1:= v1 + 1;
  #L528542.  goto L52852c;
  #L528544.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L52854a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52855c.  v0:= v2.`io.reactivex.subjects.CompletableSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528560.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528566.  v0:= temp @kind object;
  #L528568.  v1:= `@@io.reactivex.subjects.CompletableSubject.e` @type ^`io.reactivex.subjects.CompletableSubject$a`[] @kind object;
  #L52856c.  if v0 != v1 then goto L528576;
  #L528570.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L528576.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.CompletableSubject` v2 @kind this, `io.reactivex.CompletableObserver` v3 @kind object) @signature `Lio/reactivex/subjects/CompletableSubject;.subscribeActual:(Lio/reactivex/CompletableObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L528610.  v0:= new `io.reactivex.subjects.CompletableSubject$a`;
  #L528614.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/CompletableSubject$a;.<init>:(Lio/reactivex/CompletableObserver;Lio/reactivex/subjects/CompletableSubject;)V` @kind direct;
  #L52861a.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L528620.  call temp:= `e`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.e:(Lio/reactivex/subjects/CompletableSubject$a;)Z` @kind virtual;
  #L528626.  v1:= temp;
  #L528628.  if v1 == 0 then goto L528640;
  #L52862c.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/CompletableSubject$a;.isDisposed:()Z` @kind virtual;
  #L528632.  v3:= temp;
  #L528634.  if v3 == 0 then goto L528656;
  #L528638.  call `f`(v2, v0) @signature `Lio/reactivex/subjects/CompletableSubject;.f:(Lio/reactivex/subjects/CompletableSubject$a;)V` @kind virtual;
  #L52863e.  goto L528656;
  #L528640.  v0:= v2.`io.reactivex.subjects.CompletableSubject.c` @type ^`java.lang.Throwable` @kind object;
  #L528644.  if v0 == 0 then goto L528650;
  #L528648.  call `onError`(v3, v0) @signature `Lio/reactivex/CompletableObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52864e.  goto L528656;
  #L528650.  call `onComplete`(v3) @signature `Lio/reactivex/CompletableObserver;.onComplete:()V` @kind interface;
  #L528656.  return @kind void;
}
