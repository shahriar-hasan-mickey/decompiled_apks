record `io.reactivex.subjects.ReplaySubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `io.reactivex.subjects.ReplaySubject$b` `io.reactivex.subjects.ReplaySubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.ReplaySubject.b` @AccessFlag FINAL;
  `boolean` `io.reactivex.subjects.ReplaySubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.ReplaySubject$c`[] `@@io.reactivex.subjects.ReplaySubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.ReplaySubject$c`[] `@@io.reactivex.subjects.ReplaySubject.e` @AccessFlag STATIC_FINAL;
global `java.lang.Object`[] `@@io.reactivex.subjects.ReplaySubject.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/ReplaySubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L529e5c.  v0:= 0I;
  #L529e5e.  v1:= new `io.reactivex.subjects.ReplaySubject$c`[v0];
  #L529e62.  `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L529e66.  v1:= new `io.reactivex.subjects.ReplaySubject$c`[v0];
  #L529e6a.  `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] := v1 @kind object;
  #L529e6e.  v0:= new `java.lang.Object`[v0];
  #L529e72.  `@@io.reactivex.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] := v0 @kind object;
  #L529e76.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.subjects.ReplaySubject$b` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L529e88.  call `<init>`(v1) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L529e8e.  v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` := v2 @kind object;
  #L529e92.  v2:= new `java.util.concurrent.atomic.AtomicReference`;
  #L529e96.  v0:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L529e9a.  call `<init>`(v2, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L529ea0.  v1.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v2 @kind object;
  #L529ea4.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`() @signature `Lio/reactivex/subjects/ReplaySubject;.create:()Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L529c98.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L529c9c.  v1:= new `io.reactivex.subjects.ReplaySubject$g`;
  #L529ca0.  v2:= 16I;
  #L529ca4.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L529caa.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L529cb0.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `create`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.create:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L529cc4.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L529cc8.  v1:= new `io.reactivex.subjects.ReplaySubject$g`;
  #L529ccc.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$g;.<init>:(I)V` @kind direct;
  #L529cd2.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L529cd8.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithSize`(`int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithSize:(I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L529cec.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L529cf0.  v1:= new `io.reactivex.subjects.ReplaySubject$e`;
  #L529cf4.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$e;.<init>:(I)V` @kind direct;
  #L529cfa.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L529d00.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTime`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTime:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L529d14.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L529d18.  v7:= new `io.reactivex.subjects.ReplaySubject$d`;
  #L529d1c.  v2:= 2147483647I;
  #L529d22.  v1:= v7 @kind object;
  #L529d24.  v3:= v8 @kind wide;
  #L529d26.  v5:= v10 @kind object;
  #L529d28.  v6:= v11 @kind object;
  #L529d2a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L529d30.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L529d36.  return v0 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject` `createWithTimeAndSize`(`long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object, `io.reactivex.Scheduler` v11 @kind object, `int` v12 ) @signature `Lio/reactivex/subjects/ReplaySubject;.createWithTimeAndSize:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;I)Lio/reactivex/subjects/ReplaySubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L529d48.  v0:= new `io.reactivex.subjects.ReplaySubject`;
  #L529d4c.  v7:= new `io.reactivex.subjects.ReplaySubject$d`;
  #L529d50.  v1:= v7 @kind object;
  #L529d52.  v2:= v12;
  #L529d54.  v3:= v8 @kind wide;
  #L529d56.  v5:= v10 @kind object;
  #L529d58.  v6:= v11 @kind object;
  #L529d5a.  call `<init>`(v1, v2, v3, v5, v6) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L529d60.  call `<init>`(v0, v7) @signature `Lio/reactivex/subjects/ReplaySubject;.<init>:(Lio/reactivex/subjects/ReplaySubject$b;)V` @kind direct;
  #L529d66.  return v0 @kind object;
}
procedure `void` `cleanupBuffer`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.cleanupBuffer:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529eb8.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529ebc.  call `c`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.c:()V` @kind interface;
  #L529ec2.  return @kind void;
}
procedure `boolean` `d`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `io.reactivex.subjects.ReplaySubject$c` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.d:(Lio/reactivex/subjects/ReplaySubject$c;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L529b9c.  v0:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L529ba0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529ba6.  v0:= temp @kind object;
  #L529ba8.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L529bac.  v1:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L529bb0.  v2:= 0I;
  #L529bb2.  if v0 != v1 then goto L529bb8;
  #L529bb6.  return v2;
  #L529bb8.  v1:= length @variable v0;
  #L529bba.  v3:= v1 + 1;
  #L529bbe.  v3:= new `io.reactivex.subjects.ReplaySubject$c`[v3];
  #L529bc2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L529bc8.  v3[v1]:= v5 @kind object;
  #L529bcc.  v1:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L529bd0.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L529bd6.  v0:= temp;
  #L529bd8.  if v0 == 0 then goto L529b9c;
  #L529bdc.  v5:= 1I;
  #L529bde.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.ReplaySubject` v6 @kind this, `io.reactivex.subjects.ReplaySubject$c` v7 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.e:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L52a004.  v0:= v6.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52a008.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52a00e.  v0:= temp @kind object;
  #L52a010.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L52a014.  v1:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L52a018.  if v0 == v1 then goto L52a084;
  #L52a01c.  v1:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L52a020.  if v0 != v1 then goto L52a026;
  #L52a024.  goto L52a084;
  #L52a026.  v1:= length @variable v0;
  #L52a028.  v2:= -1I;
  #L52a02a.  v3:= 0I;
  #L52a02c.  v4:= 0I;
  #L52a02e.  if v4 >= v1 then goto L52a044;
  #L52a032.  v5:= v0[v4] @kind object;
  #L52a036.  if v5 != v7 then goto L52a03e;
  #L52a03a.  v2:= v4;
  #L52a03c.  goto L52a044;
  #L52a03e.  v4:= v4 + 1;
  #L52a042.  goto L52a02e;
  #L52a044.  if v2 >= 0 then goto L52a04a;
  #L52a048.  return @kind void;
  #L52a04a.  v4:= 1I;
  #L52a04c.  if v1 != v4 then goto L52a056;
  #L52a050.  v1:= `@@io.reactivex.subjects.ReplaySubject.d` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L52a054.  goto L52a074;
  #L52a056.  v5:= v1 + -1;
  #L52a05a.  v5:= new `io.reactivex.subjects.ReplaySubject$c`[v5];
  #L52a05e.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a064.  v3:= v2 + 1;
  #L52a068.  v1:= v1 - v2 @kind int;
  #L52a06a.  v1:= v1 - v4 @kind int;
  #L52a06c.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L52a072.  v1:= v5 @kind object;
  #L52a074.  v2:= v6.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52a078.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L52a07e.  v0:= temp;
  #L52a080.  if v0 == 0 then goto L52a004;
  #L52a084.  return @kind void;
}
procedure `io.reactivex.subjects.ReplaySubject$c`[] `f`(`io.reactivex.subjects.ReplaySubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L529d78.  v0:= v2.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529d7c.  v1:= 0I;
  #L529d7e.  call temp:= `compareAndSet`(v0, v1, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L529d84.  v3:= temp;
  #L529d86.  if v3 == 0 then goto L529da0;
  #L529d8a.  v3:= v2.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L529d8e.  v0:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L529d92.  call temp:= `getAndSet`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L529d98.  v3:= temp @kind object;
  #L529d9a.  v3:= (`io.reactivex.subjects.ReplaySubject$c`[]) v3 @kind object;
  #L529d9e.  return v3 @kind object;
  #L529da0.  v3:= `@@io.reactivex.subjects.ReplaySubject.e` @type ^`io.reactivex.subjects.ReplaySubject$c`[] @kind object;
  #L529da4.  return v3 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L529e24.  v0:= v2.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529e28.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L529e2e.  v0:= temp @kind object;
  #L529e30.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L529e36.  v1:= temp;
  #L529e38.  if v1 == 0 then goto L529e46;
  #L529e3c.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L529e42.  v0:= temp @kind object;
  #L529e44.  return v0 @kind object;
  #L529e46.  v0:= 0I;
  #L529e48.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529db8.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529dbc.  call temp:= `getValue`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.getValue:()Ljava/lang/Object;` @kind interface;
  #L529dc2.  v0:= temp @kind object;
  #L529dc4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L529dd8.  v0:= `@@io.reactivex.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L529ddc.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L529de2.  v0:= temp @kind object;
  #L529de4.  v1:= `@@io.reactivex.subjects.ReplaySubject.f` @type ^`java.lang.Object`[] @kind object;
  #L529de8.  if v0 != v1 then goto L529df2;
  #L529dec.  v0:= 0I;
  #L529dee.  v0:= new `java.lang.Object`[v0];
  #L529df2.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529e04.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529e08.  call temp:= `d`(v0, v2) @signature `Lio/reactivex/subjects/ReplaySubject$b;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L529e0e.  v2:= temp @kind object;
  #L529e10.  return v2 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529bf0.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529bf4.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L529bfa.  v0:= temp @kind object;
  #L529bfc.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L529c02.  v0:= temp;
  #L529c04.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529c18.  v0:= v1.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L529c1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529c22.  v0:= temp @kind object;
  #L529c24.  v0:= (`io.reactivex.subjects.ReplaySubject$c`[]) v0 @kind object;
  #L529c28.  v0:= length @variable v0;
  #L529c2a.  if v0 == 0 then goto L529c32;
  #L529c2e.  v0:= 1I;
  #L529c30.  goto L529c34;
  #L529c32.  v0:= 0I;
  #L529c34.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529c48.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529c4c.  call temp:= `get`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.get:()Ljava/lang/Object;` @kind interface;
  #L529c52.  v0:= temp @kind object;
  #L529c54.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L529c5a.  v0:= temp;
  #L529c5c.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.ReplaySubject` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529c70.  v0:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529c74.  call temp:= `size`(v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.size:()I` @kind interface;
  #L529c7a.  v0:= temp;
  #L529c7c.  if v0 == 0 then goto L529c84;
  #L529c80.  v0:= 1I;
  #L529c82.  goto L529c86;
  #L529c84.  v0:= 0I;
  #L529c86.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.ReplaySubject` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529ed4.  v0:= v5.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L529ed8.  if v0 == 0 then goto L529ede;
  #L529edc.  return @kind void;
  #L529ede.  v0:= 1I;
  #L529ee0.  v5.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L529ee4.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L529eea.  v0:= temp @kind object;
  #L529eec.  v1:= v5.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529ef0.  call `a`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Ljava/lang/Object;)V` @kind interface;
  #L529ef6.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @kind virtual;
  #L529efc.  v0:= temp @kind object;
  #L529efe.  v2:= length @variable v0;
  #L529f00.  v3:= 0I;
  #L529f02.  if v3 >= v2 then goto L529f16;
  #L529f06.  v4:= v0[v3] @kind object;
  #L529f0a.  call `b`(v1, v4) @signature `Lio/reactivex/subjects/ReplaySubject$b;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L529f10.  v3:= v3 + 1;
  #L529f14.  goto L529f02;
  #L529f16.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L529f28.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L529f2c.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L529f32.  v0:= v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L529f36.  if v0 == 0 then goto L529f42;
  #L529f3a.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L529f40.  return @kind void;
  #L529f42.  v0:= 1I;
  #L529f44.  v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` := v0 @kind boolean;
  #L529f48.  call temp:= `error`(v5) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L529f4e.  v5:= temp @kind object;
  #L529f50.  v0:= v4.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529f54.  call `a`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$b;.a:(Ljava/lang/Object;)V` @kind interface;
  #L529f5a.  call temp:= `f`(v4, v5) @signature `Lio/reactivex/subjects/ReplaySubject;.f:(Ljava/lang/Object;)[Lio/reactivex/subjects/ReplaySubject$c;` @kind virtual;
  #L529f60.  v5:= temp @kind object;
  #L529f62.  v1:= length @variable v5;
  #L529f64.  v2:= 0I;
  #L529f66.  if v2 >= v1 then goto L529f7a;
  #L529f6a.  v3:= v5[v2] @kind object;
  #L529f6e.  call `b`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L529f74.  v2:= v2 + 1;
  #L529f78.  goto L529f66;
  #L529f7a.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.ReplaySubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L529f8c.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L529f90.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L529f96.  v0:= v4.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L529f9a.  if v0 == 0 then goto L529fa0;
  #L529f9e.  return @kind void;
  #L529fa0.  v0:= v4.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L529fa4.  call `add`(v0, v5) @signature `Lio/reactivex/subjects/ReplaySubject$b;.add:(Ljava/lang/Object;)V` @kind interface;
  #L529faa.  v5:= v4.`io.reactivex.subjects.ReplaySubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L529fae.  call temp:= `get`(v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529fb4.  v5:= temp @kind object;
  #L529fb6.  v5:= (`io.reactivex.subjects.ReplaySubject$c`[]) v5 @kind object;
  #L529fba.  v1:= length @variable v5;
  #L529fbc.  v2:= 0I;
  #L529fbe.  if v2 >= v1 then goto L529fd2;
  #L529fc2.  v3:= v5[v2] @kind object;
  #L529fc6.  call `b`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$b;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L529fcc.  v2:= v2 + 1;
  #L529fd0.  goto L529fbe;
  #L529fd2.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529fe4.  v0:= v1.`io.reactivex.subjects.ReplaySubject.c` @type ^`boolean` @kind boolean;
  #L529fe8.  if v0 == 0 then goto L529ff2;
  #L529fec.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L529ff2.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.ReplaySubject` v1 @kind this, `io.reactivex.Observer` v2 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L52a098.  v0:= new `io.reactivex.subjects.ReplaySubject$c`;
  #L52a09c.  call `<init>`(v0, v2, v1) @signature `Lio/reactivex/subjects/ReplaySubject$c;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/ReplaySubject;)V` @kind direct;
  #L52a0a2.  call `onSubscribe`(v2, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L52a0a8.  v2:= v0.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L52a0ac.  if v2 != 0 then goto L52a0d6;
  #L52a0b0.  call temp:= `d`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.d:(Lio/reactivex/subjects/ReplaySubject$c;)Z` @kind virtual;
  #L52a0b6.  v2:= temp;
  #L52a0b8.  if v2 == 0 then goto L52a0cc;
  #L52a0bc.  v2:= v0.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L52a0c0.  if v2 == 0 then goto L52a0cc;
  #L52a0c4.  call `e`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject;.e:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind virtual;
  #L52a0ca.  return @kind void;
  #L52a0cc.  v2:= v1.`io.reactivex.subjects.ReplaySubject.a` @type ^`io.reactivex.subjects.ReplaySubject$b` @kind object;
  #L52a0d0.  call `b`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$b;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @kind interface;
  #L52a0d6.  return @kind void;
}
