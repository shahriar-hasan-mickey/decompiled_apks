record `io.reactivex.subjects.ReplaySubject$d` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.subjects.ReplaySubject$d.a` @AccessFlag FINAL;
  `long` `io.reactivex.subjects.ReplaySubject$d.b` @AccessFlag FINAL;
  `java.util.concurrent.TimeUnit` `io.reactivex.subjects.ReplaySubject$d.c` @AccessFlag FINAL;
  `io.reactivex.Scheduler` `io.reactivex.subjects.ReplaySubject$d.d` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$d.e` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$f` `io.reactivex.subjects.ReplaySubject$d.f` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$f` `io.reactivex.subjects.ReplaySubject$d.g` @AccessFlag ;
  `boolean` `io.reactivex.subjects.ReplaySubject$d.h` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$d.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$d` v1 @kind this, `int` v2 , `long` v3 , `java.util.concurrent.TimeUnit` v5 @kind object, `io.reactivex.Scheduler` v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.<init>:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L5291f4.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L5291fa.  v0:= "maxSize" @kind object;
  #L5291fe.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L529204.  v2:= temp;
  #L529206.  v1.`io.reactivex.subjects.ReplaySubject$d.a` @type ^`int` := v2;
  #L52920a.  v2:= "maxAge" @kind object;
  #L52920e.  call temp:= `verifyPositive`(v3, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(JLjava/lang/String;)J` @kind static;
  #L529214.  v2:= temp @kind wide;
  #L529216.  v1.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` := v2 @kind wide;
  #L52921a.  v2:= "unit is null" @kind object;
  #L52921e.  call temp:= `requireNonNull`(v5, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L529224.  v2:= temp @kind object;
  #L529226.  v2:= (`java.util.concurrent.TimeUnit`) v2 @kind object;
  #L52922a.  v1.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` := v2 @kind object;
  #L52922e.  v2:= "scheduler is null" @kind object;
  #L529232.  call temp:= `requireNonNull`(v6, v2) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L529238.  v2:= temp @kind object;
  #L52923a.  v2:= (`io.reactivex.Scheduler`) v2 @kind object;
  #L52923e.  v1.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` := v2 @kind object;
  #L529242.  v2:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L529246.  v3:= 0I;
  #L529248.  v4:= 0L;
  #L52924c.  call `<init>`(v2, v3, v4) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L529252.  v1.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L529256.  v1.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L52925a.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5292b8.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L5292bc.  v1:= 9223372036854775807L;
  #L5292c6.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L5292cc.  v4:= v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L5292d0.  v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L5292d4.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L5292d8.  v2:= 1I;
  #L5292da.  v1:= v1 + v2 @kind int;
  #L5292dc.  v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L5292e0.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L5292e6.  call `h`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$d;.h:()V` @kind virtual;
  #L5292ec.  v3.`io.reactivex.subjects.ReplaySubject$d.h` @type ^`boolean` := v2 @kind boolean;
  #L5292f0.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$d` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52926c.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L529270.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L529274.  v2:= v3.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L529278.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L52927e.  v1:= temp @kind wide;
  #L529280.  call `<init>`(v0, v4, v1) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L529286.  v4:= v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L52928a.  v3.`io.reactivex.subjects.ReplaySubject$d.g` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L52928e.  v1:= v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L529292.  v1:= v1 + 1;
  #L529296.  v3.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v1;
  #L52929a.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L5292a0.  call `g`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$d;.g:()V` @kind virtual;
  #L5292a6.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.ReplaySubject$d` v7 @kind this, `io.reactivex.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L529304.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L52930a.  v0:= temp;
  #L52930c.  if v0 == 0 then goto L529312;
  #L529310.  return @kind void;
  #L529312.  v0:= v8.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L529316.  v1:= v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L52931a.  v1:= (`io.reactivex.subjects.ReplaySubject$f`) v1 @kind object;
  #L52931e.  v2:= 1I;
  #L529320.  if v1 != 0 then goto L52932c;
  #L529324.  call temp:= `e`(v7) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L52932a.  v1:= temp @kind object;
  #L52932c.  v3:= 1I;
  #L52932e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L529332.  v5:= 0I;
  #L529334.  if v4 == 0 then goto L52933e;
  #L529338.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L52933c.  return @kind void;
  #L52933e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L529342.  if v4 == 0 then goto L52934c;
  #L529346.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L52934a.  return @kind void;
  #L52934c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529352.  v4:= temp @kind object;
  #L529354.  v4:= (`io.reactivex.subjects.ReplaySubject$f`) v4 @kind object;
  #L529358.  if v4 != 0 then goto L52937e;
  #L52935c.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529362.  v4:= temp @kind object;
  #L529364.  if v4 == 0 then goto L52936a;
  #L529368.  goto L52932e;
  #L52936a.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L52936e.  v3:= -v3 @kind int;
  #L529370.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L529376.  v3:= temp;
  #L529378.  if v3 != 0 then goto L52932e;
  #L52937c.  return @kind void;
  #L52937e.  v1:= v4.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L529382.  v6:= v7.`io.reactivex.subjects.ReplaySubject$d.h` @type ^`boolean` @kind boolean;
  #L529386.  if v6 == 0 then goto L5293c2;
  #L52938a.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529390.  v6:= temp @kind object;
  #L529392.  if v6 != 0 then goto L5293c2;
  #L529396.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52939c.  v3:= temp;
  #L52939e.  if v3 == 0 then goto L5293aa;
  #L5293a2.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L5293a8.  goto L5293b8;
  #L5293aa.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L5293b0.  v1:= temp @kind object;
  #L5293b2.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5293b8.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L5293bc.  v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L5293c0.  return @kind void;
  #L5293c2.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L5293c8.  v1:= v4 @kind object;
  #L5293ca.  goto L52933e;
}
procedure `void` `c`(`io.reactivex.subjects.ReplaySubject$d` v5 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529524.  v0:= v5.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L529528.  v1:= v0.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L52952c.  if v1 == 0 then goto L529552;
  #L529530.  v1:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L529534.  v2:= 0I;
  #L529536.  v3:= 0L;
  #L52953a.  call `<init>`(v1, v2, v3) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L529540.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529546.  v0:= temp @kind object;
  #L529548.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52954e.  v5.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v1 @kind object;
  #L529552.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.subjects.ReplaySubject$d` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L529174.  call temp:= `e`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L52917a.  v0:= temp @kind object;
  #L52917c.  call temp:= `f`(v5, v0) @signature `Lio/reactivex/subjects/ReplaySubject$d;.f:(Lio/reactivex/subjects/ReplaySubject$f;)I` @kind virtual;
  #L529182.  v1:= temp;
  #L529184.  v2:= 0I;
  #L529186.  v3:= 0I;
  #L529188.  if v1 != 0 then goto L529198;
  #L52918c.  v0:= length @variable v6;
  #L52918e.  if v0 == 0 then goto L5291e2;
  #L529192.  v6[v3]:= v2 @kind object;
  #L529196.  goto L5291e2;
  #L529198.  v4:= length @variable v6;
  #L52919a.  if v4 >= v1 then goto L5291ba;
  #L52919e.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L5291a4.  v6:= temp @kind object;
  #L5291a6.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L5291ac.  v6:= temp @kind object;
  #L5291ae.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L5291b4.  v6:= temp @kind object;
  #L5291b6.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L5291ba.  if v3 == v1 then goto L5291d8;
  #L5291be.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5291c4.  v0:= temp @kind object;
  #L5291c6.  v0:= (`io.reactivex.subjects.ReplaySubject$f`) v0 @kind object;
  #L5291ca.  v4:= v0.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L5291ce.  v6[v3]:= v4 @kind object;
  #L5291d2.  v3:= v3 + 1;
  #L5291d6.  goto L5291ba;
  #L5291d8.  v0:= length @variable v6;
  #L5291da.  if v0 <= v1 then goto L5291e2;
  #L5291de.  v6[v1]:= v2 @kind object;
  #L5291e2.  return v6 @kind object;
}
procedure `io.reactivex.subjects.ReplaySubject$f` `e`(`io.reactivex.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:()Lio/reactivex/subjects/ReplaySubject$f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L529094.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L529098.  v1:= v8.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L52909c.  v2:= v8.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L5290a0.  call temp:= `now`(v1, v2) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L5290a6.  v1:= temp @kind wide;
  #L5290a8.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L5290ac.  v1:= v1 - v3 @kind long;
  #L5290ae.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5290b4.  v3:= temp @kind object;
  #L5290b6.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L5290ba.  v7:= v3 @kind object;
  #L5290bc.  v3:= v0 @kind object;
  #L5290be.  v0:= v7 @kind object;
  #L5290c0.  if v0 == 0 then goto L5290e0;
  #L5290c4.  v4:= v0.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L5290c8.  v6:= lcmp(v4, v1);
  #L5290cc.  if v6 <= 0 then goto L5290d2;
  #L5290d0.  goto L5290e0;
  #L5290d2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5290d8.  v3:= temp @kind object;
  #L5290da.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L5290de.  goto L5290ba;
  #L5290e0.  return v3 @kind object;
}
procedure `int` `f`(`io.reactivex.subjects.ReplaySubject$d` v2 @kind this, `io.reactivex.subjects.ReplaySubject$f` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$d;.f:(Lio/reactivex/subjects/ReplaySubject$f;)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L52903c.  v0:= 0I;
  #L52903e.  v1:= 2147483647I;
  #L529044.  if v0 == v1 then goto L529082;
  #L529048.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52904e.  v1:= temp @kind object;
  #L529050.  v1:= (`io.reactivex.subjects.ReplaySubject$f`) v1 @kind object;
  #L529054.  if v1 != 0 then goto L52907a;
  #L529058.  v3:= v3.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L52905c.  call temp:= `isComplete`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L529062.  v1:= temp;
  #L529064.  if v1 != 0 then goto L529074;
  #L529068.  call temp:= `isError`(v3) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L52906e.  v3:= temp;
  #L529070.  if v3 == 0 then goto L529082;
  #L529074.  v0:= v0 + -1;
  #L529078.  goto L529082;
  #L52907a.  v0:= v0 + 1;
  #L52907e.  v3:= v1 @kind object;
  #L529080.  goto L52903e;
  #L529082.  return v0;
}
procedure `void` `g`(`io.reactivex.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.g:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5293dc.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L5293e0.  v1:= v8.`io.reactivex.subjects.ReplaySubject$d.a` @type ^`int`;
  #L5293e4.  v2:= 1I;
  #L5293e6.  if v0 <= v1 then goto L529404;
  #L5293ea.  v0:= v0 - v2 @kind int;
  #L5293ec.  v8.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v0;
  #L5293f0.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L5293f4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5293fa.  v0:= temp @kind object;
  #L5293fc.  v0:= (`io.reactivex.subjects.ReplaySubject$f`) v0 @kind object;
  #L529400.  v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L529404.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L529408.  v1:= v8.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L52940c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L529412.  v0:= temp @kind wide;
  #L529414.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L529418.  v0:= v0 - v3 @kind long;
  #L52941a.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L52941e.  v4:= v8.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L529422.  if v4 > v2 then goto L52942c;
  #L529426.  v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v3 @kind object;
  #L52942a.  goto L529452;
  #L52942c.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529432.  v4:= temp @kind object;
  #L529434.  v4:= (`io.reactivex.subjects.ReplaySubject$f`) v4 @kind object;
  #L529438.  if v4 != 0 then goto L529442;
  #L52943c.  v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v3 @kind object;
  #L529440.  goto L529452;
  #L529442.  v5:= v4.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L529446.  v7:= lcmp(v5, v0);
  #L52944a.  if v7 <= 0 then goto L529454;
  #L52944e.  v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v3 @kind object;
  #L529452.  return @kind void;
  #L529454.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int`;
  #L529458.  v3:= v3 - v2 @kind int;
  #L52945a.  v8.`io.reactivex.subjects.ReplaySubject$d.e` @type ^`int` := v3;
  #L52945e.  v3:= v4 @kind object;
  #L529460.  goto L52941e;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$d` v8 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5290f4.  v0:= v8.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L5290f8.  v1:= 0I;
  #L5290fa.  v2:= v1 @kind object;
  #L5290fc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529102.  v3:= temp @kind object;
  #L529104.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L529108.  if v3 != 0 then goto L52915c;
  #L52910c.  v3:= v8.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L529110.  v4:= v8.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L529114.  call temp:= `now`(v3, v4) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L52911a.  v3:= temp @kind wide;
  #L52911c.  v5:= v8.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L529120.  v3:= v3 - v5 @kind long;
  #L529122.  v5:= v0.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L529126.  v7:= lcmp(v5, v3);
  #L52912a.  if v7 >= 0 then goto L529130;
  #L52912e.  return v1 @kind object;
  #L529130.  v0:= v0.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L529134.  if v0 != 0 then goto L52913a;
  #L529138.  return v1 @kind object;
  #L52913a.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L529140.  v1:= temp;
  #L529142.  if v1 != 0 then goto L529156;
  #L529146.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L52914c.  v1:= temp;
  #L52914e.  if v1 == 0 then goto L529154;
  #L529152.  goto L529156;
  #L529154.  return v0 @kind object;
  #L529156.  v0:= v2.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L52915a.  return v0 @kind object;
  #L52915c.  v2:= v0 @kind object;
  #L52915e.  v0:= v3 @kind object;
  #L529160.  goto L5290fc;
}
procedure `void` `h`(`io.reactivex.subjects.ReplaySubject$d` v10 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.h:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L529474.  v0:= v10.`io.reactivex.subjects.ReplaySubject$d.d` @type ^`io.reactivex.Scheduler` @kind object;
  #L529478.  v1:= v10.`io.reactivex.subjects.ReplaySubject$d.c` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L52947c.  call temp:= `now`(v0, v1) @signature `Lio/reactivex/Scheduler;.now:(Ljava/util/concurrent/TimeUnit;)J` @kind virtual;
  #L529482.  v0:= temp @kind wide;
  #L529484.  v2:= v10.`io.reactivex.subjects.ReplaySubject$d.b` @type ^`long` @kind wide;
  #L529488.  v0:= v0 - v2 @kind long;
  #L52948a.  v2:= v10.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` @kind object;
  #L52948e.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529494.  v3:= temp @kind object;
  #L529496.  v3:= (`io.reactivex.subjects.ReplaySubject$f`) v3 @kind object;
  #L52949a.  call temp:= `get`(v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5294a0.  v4:= temp @kind object;
  #L5294a2.  v5:= 0L;
  #L5294a6.  v7:= 0I;
  #L5294a8.  if v4 != 0 then goto L5294d8;
  #L5294ac.  v0:= v2.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L5294b0.  if v0 == 0 then goto L5294d2;
  #L5294b4.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L5294b8.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L5294be.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5294c4.  v1:= temp @kind object;
  #L5294c6.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L5294cc.  v10.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L5294d0.  goto L52950e;
  #L5294d2.  v10.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L5294d6.  goto L52950e;
  #L5294d8.  v8:= v3.`io.reactivex.subjects.ReplaySubject$f.b` @type ^`long` @kind wide;
  #L5294dc.  v4:= lcmp(v8, v0);
  #L5294e0.  if v4 <= 0 then goto L529510;
  #L5294e4.  v0:= v2.`io.reactivex.subjects.ReplaySubject$f.a` @type ^`java.lang.Object` @kind object;
  #L5294e8.  if v0 == 0 then goto L52950a;
  #L5294ec.  v0:= new `io.reactivex.subjects.ReplaySubject$f`;
  #L5294f0.  call `<init>`(v0, v7, v5) @signature `Lio/reactivex/subjects/ReplaySubject$f;.<init>:(Ljava/lang/Object;J)V` @kind direct;
  #L5294f6.  call temp:= `get`(v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5294fc.  v1:= temp @kind object;
  #L5294fe.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L529504.  v10.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v0 @kind object;
  #L529508.  goto L52950e;
  #L52950a.  v10.`io.reactivex.subjects.ReplaySubject$d.f` @type ^`io.reactivex.subjects.ReplaySubject$f` := v2 @kind object;
  #L52950e.  return @kind void;
  #L529510.  v2:= v3 @kind object;
  #L529512.  goto L52948e;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$d` v1 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$d;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L529018.  call temp:= `e`(v1) @signature `Lio/reactivex/subjects/ReplaySubject$d;.e:()Lio/reactivex/subjects/ReplaySubject$f;` @kind virtual;
  #L52901e.  v0:= temp @kind object;
  #L529020.  call temp:= `f`(v1, v0) @signature `Lio/reactivex/subjects/ReplaySubject$d;.f:(Lio/reactivex/subjects/ReplaySubject$f;)I` @kind virtual;
  #L529026.  v0:= temp;
  #L529028.  return v0;
}
