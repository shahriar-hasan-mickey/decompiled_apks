record `io.reactivex.subjects.AsyncSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.AsyncSubject.a` @AccessFlag FINAL;
  `java.lang.Throwable` `io.reactivex.subjects.AsyncSubject.b` @AccessFlag ;
  `java.lang.Object` `io.reactivex.subjects.AsyncSubject.c` @AccessFlag ;
}
global `io.reactivex.subjects.AsyncSubject$a`[] `@@io.reactivex.subjects.AsyncSubject.d` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.AsyncSubject$a`[] `@@io.reactivex.subjects.AsyncSubject.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/AsyncSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5277e4.  v0:= 0I;
  #L5277e6.  v1:= new `io.reactivex.subjects.AsyncSubject$a`[v0];
  #L5277ea.  `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] := v1 @kind object;
  #L5277ee.  v0:= new `io.reactivex.subjects.AsyncSubject$a`[v0];
  #L5277f2.  `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] := v0 @kind object;
  #L5277f6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L527808.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L52780e.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L527812.  v1:= `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527816.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52781c.  v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L527820.  return @kind void;
}
procedure `io.reactivex.subjects.AsyncSubject` `create`() @signature `Lio/reactivex/subjects/AsyncSubject;.create:()Lio/reactivex/subjects/AsyncSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5276ec.  v0:= new `io.reactivex.subjects.AsyncSubject`;
  #L5276f0.  call `<init>`(v0) @signature `Lio/reactivex/subjects/AsyncSubject;.<init>:()V` @kind direct;
  #L5276f6.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `io.reactivex.subjects.AsyncSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.d:(Lio/reactivex/subjects/AsyncSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5275cc.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5275d0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5275d6.  v0:= temp @kind object;
  #L5275d8.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L5275dc.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L5275e0.  v2:= 0I;
  #L5275e2.  if v0 != v1 then goto L5275e8;
  #L5275e6.  return v2;
  #L5275e8.  v1:= length @variable v0;
  #L5275ea.  v3:= v1 + 1;
  #L5275ee.  v3:= new `io.reactivex.subjects.AsyncSubject$a`[v3];
  #L5275f2.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5275f8.  v3[v1]:= v5 @kind object;
  #L5275fc.  v1:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527600.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L527606.  v0:= temp;
  #L527608.  if v0 == 0 then goto L5275cc;
  #L52760c.  v5:= 1I;
  #L52760e.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.AsyncSubject` v6 @kind this, `io.reactivex.subjects.AsyncSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.e:(Lio/reactivex/subjects/AsyncSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L527974.  v0:= v6.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527978.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52797e.  v0:= temp @kind object;
  #L527980.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L527984.  v1:= length @variable v0;
  #L527986.  if v1 != 0 then goto L52798c;
  #L52798a.  return @kind void;
  #L52798c.  v2:= -1I;
  #L52798e.  v3:= 0I;
  #L527990.  v4:= 0I;
  #L527992.  if v4 >= v1 then goto L5279a8;
  #L527996.  v5:= v0[v4] @kind object;
  #L52799a.  if v5 != v7 then goto L5279a2;
  #L52799e.  v2:= v4;
  #L5279a0.  goto L5279a8;
  #L5279a2.  v4:= v4 + 1;
  #L5279a6.  goto L527992;
  #L5279a8.  if v2 >= 0 then goto L5279ae;
  #L5279ac.  return @kind void;
  #L5279ae.  v4:= 1I;
  #L5279b0.  if v1 != v4 then goto L5279ba;
  #L5279b4.  v1:= `@@io.reactivex.subjects.AsyncSubject.d` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L5279b8.  goto L5279d8;
  #L5279ba.  v5:= v1 + -1;
  #L5279be.  v5:= new `io.reactivex.subjects.AsyncSubject$a`[v5];
  #L5279c2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5279c8.  v3:= v2 + 1;
  #L5279cc.  v1:= v1 - v2 @kind int;
  #L5279ce.  v1:= v1 - v4 @kind int;
  #L5279d0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5279d6.  v1:= v5 @kind object;
  #L5279d8.  v2:= v6.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5279dc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5279e2.  v0:= temp;
  #L5279e4.  if v0 == 0 then goto L527974;
  #L5279e8.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5277b4.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5277b8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5277be.  v0:= temp @kind object;
  #L5277c0.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L5277c4.  if v0 != v1 then goto L5277ce;
  #L5277c8.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L5277cc.  goto L5277d0;
  #L5277ce.  v0:= 0I;
  #L5277d0.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527708.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52770c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527712.  v0:= temp @kind object;
  #L527714.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527718.  if v0 != v1 then goto L527722;
  #L52771c.  v0:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L527720.  goto L527724;
  #L527722.  v0:= 0I;
  #L527724.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v3 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L527738.  call temp:= `getValue`(v3) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L52773e.  v0:= temp @kind object;
  #L527740.  v1:= 0I;
  #L527742.  if v0 == 0 then goto L527752;
  #L527746.  v2:= 1I;
  #L527748.  v2:= new `java.lang.Object`[v2];
  #L52774c.  v2[v1]:= v0 @kind object;
  #L527750.  goto L527756;
  #L527752.  v2:= new `java.lang.Object`[v1];
  #L527756.  return v2 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.AsyncSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L527768.  call temp:= `getValue`(v5) @signature `Lio/reactivex/subjects/AsyncSubject;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L52776e.  v0:= temp @kind object;
  #L527770.  v1:= 0I;
  #L527772.  v2:= 0I;
  #L527774.  if v0 != 0 then goto L527784;
  #L527778.  v0:= length @variable v6;
  #L52777a.  if v0 == 0 then goto L527782;
  #L52777e.  v6[v2]:= v1 @kind object;
  #L527782.  return v6 @kind object;
  #L527784.  v3:= length @variable v6;
  #L527786.  v4:= 1I;
  #L527788.  if v3 != 0 then goto L527794;
  #L52778c.  call temp:= `copyOf`(v6, v4) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L527792.  v6:= temp @kind object;
  #L527794.  v6[v2]:= v0 @kind object;
  #L527798.  v0:= length @variable v6;
  #L52779a.  if v0 == v4 then goto L5277a2;
  #L52779e.  v6[v4]:= v1 @kind object;
  #L5277a2.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527620.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527624.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52762a.  v0:= temp @kind object;
  #L52762c.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527630.  if v0 != v1 then goto L527640;
  #L527634.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L527638.  if v0 != 0 then goto L527640;
  #L52763c.  v0:= 1I;
  #L52763e.  goto L527642;
  #L527640.  v0:= 0I;
  #L527642.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.AsyncSubject` v1 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527654.  v0:= v1.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527658.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52765e.  v0:= temp @kind object;
  #L527660.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L527664.  v0:= length @variable v0;
  #L527666.  if v0 == 0 then goto L52766e;
  #L52766a.  v0:= 1I;
  #L52766c.  goto L527670;
  #L52766e.  v0:= 0I;
  #L527670.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527684.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527688.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52768e.  v0:= temp @kind object;
  #L527690.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527694.  if v0 != v1 then goto L5276a4;
  #L527698.  v0:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L52769c.  if v0 == 0 then goto L5276a4;
  #L5276a0.  v0:= 1I;
  #L5276a2.  goto L5276a6;
  #L5276a4.  v0:= 0I;
  #L5276a6.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.AsyncSubject` v2 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5276b8.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5276bc.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5276c2.  v0:= temp @kind object;
  #L5276c4.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L5276c8.  if v0 != v1 then goto L5276d8;
  #L5276cc.  v0:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L5276d0.  if v0 == 0 then goto L5276d8;
  #L5276d4.  v0:= 1I;
  #L5276d6.  goto L5276da;
  #L5276d8.  v0:= 0I;
  #L5276da.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.AsyncSubject` v5 @kind this) @signature `Lio/reactivex/subjects/AsyncSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L527834.  v0:= v5.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527838.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52783e.  v0:= temp @kind object;
  #L527840.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527844.  if v0 != v1 then goto L52784a;
  #L527848.  return @kind void;
  #L52784a.  v0:= v5.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L52784e.  v2:= v5.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527852.  call temp:= `getAndSet`(v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L527858.  v1:= temp @kind object;
  #L52785a.  v1:= (`io.reactivex.subjects.AsyncSubject$a`[]) v1 @kind object;
  #L52785e.  v2:= 0I;
  #L527860.  if v0 != 0 then goto L52787a;
  #L527864.  v0:= length @variable v1;
  #L527866.  if v2 >= v0 then goto L527890;
  #L52786a.  v3:= v1[v2] @kind object;
  #L52786e.  call `onComplete`(v3) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L527874.  v2:= v2 + 1;
  #L527878.  goto L527866;
  #L52787a.  v3:= length @variable v1;
  #L52787c.  if v2 >= v3 then goto L527890;
  #L527880.  v4:= v1[v2] @kind object;
  #L527884.  call `complete`(v4, v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L52788a.  v2:= v2 + 1;
  #L52788e.  goto L52787c;
  #L527890.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.AsyncSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5278a4.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L5278a8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5278ae.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5278b2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5278b8.  v0:= temp @kind object;
  #L5278ba.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L5278be.  if v0 != v1 then goto L5278ca;
  #L5278c2.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L5278c8.  return @kind void;
  #L5278ca.  v0:= 0I;
  #L5278cc.  v4.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v0 @kind object;
  #L5278d0.  v4.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` := v5 @kind object;
  #L5278d4.  v0:= v4.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5278d8.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5278de.  v0:= temp @kind object;
  #L5278e0.  v0:= (`io.reactivex.subjects.AsyncSubject$a`[]) v0 @kind object;
  #L5278e4.  v1:= length @variable v0;
  #L5278e6.  v2:= 0I;
  #L5278e8.  if v2 >= v1 then goto L5278fc;
  #L5278ec.  v3:= v0[v2] @kind object;
  #L5278f0.  call `onError`(v3, v5) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onError:(Ljava/lang/Throwable;)V` @kind virtual;
  #L5278f6.  v2:= v2 + 1;
  #L5278fa.  goto L5278e8;
  #L5278fc.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527910.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L527914.  call temp:= `requireNonNull`(v3, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52791a.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52791e.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527924.  v0:= temp @kind object;
  #L527926.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L52792a.  if v0 != v1 then goto L527930;
  #L52792e.  return @kind void;
  #L527930.  v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` := v3 @kind object;
  #L527934.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527948.  v0:= v2.`io.reactivex.subjects.AsyncSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52794c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527952.  v0:= temp @kind object;
  #L527954.  v1:= `@@io.reactivex.subjects.AsyncSubject.e` @type ^`io.reactivex.subjects.AsyncSubject$a`[] @kind object;
  #L527958.  if v0 != v1 then goto L527962;
  #L52795c.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L527962.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.AsyncSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/AsyncSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L5279fc.  v0:= new `io.reactivex.subjects.AsyncSubject$a`;
  #L527a00.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/AsyncSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/AsyncSubject;)V` @kind direct;
  #L527a06.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L527a0c.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.d:(Lio/reactivex/subjects/AsyncSubject$a;)Z` @kind virtual;
  #L527a12.  v1:= temp;
  #L527a14.  if v1 == 0 then goto L527a2c;
  #L527a18.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.isDisposed:()Z` @kind virtual;
  #L527a1e.  v3:= temp;
  #L527a20.  if v3 == 0 then goto L527a52;
  #L527a24.  call `e`(v2, v0) @signature `Lio/reactivex/subjects/AsyncSubject;.e:(Lio/reactivex/subjects/AsyncSubject$a;)V` @kind virtual;
  #L527a2a.  goto L527a52;
  #L527a2c.  v1:= v2.`io.reactivex.subjects.AsyncSubject.b` @type ^`java.lang.Throwable` @kind object;
  #L527a30.  if v1 == 0 then goto L527a3c;
  #L527a34.  call `onError`(v3, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L527a3a.  goto L527a52;
  #L527a3c.  v3:= v2.`io.reactivex.subjects.AsyncSubject.c` @type ^`java.lang.Object` @kind object;
  #L527a40.  if v3 == 0 then goto L527a4c;
  #L527a44.  call `complete`(v0, v3) @signature `Lio/reactivex/internal/observers/DeferredScalarDisposable;.complete:(Ljava/lang/Object;)V` @kind virtual;
  #L527a4a.  goto L527a52;
  #L527a4c.  call `onComplete`(v0) @signature `Lio/reactivex/subjects/AsyncSubject$a;.onComplete:()V` @kind virtual;
  #L527a52.  return @kind void;
}
