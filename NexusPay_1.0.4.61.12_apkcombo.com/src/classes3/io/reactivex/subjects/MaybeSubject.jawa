record `io.reactivex.subjects.MaybeSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.Maybe` @kind class, `io.reactivex.MaybeObserver` @kind interface {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.MaybeSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `io.reactivex.subjects.MaybeSubject.b` @AccessFlag FINAL;
  `java.lang.Object` `io.reactivex.subjects.MaybeSubject.c` @AccessFlag ;
  `java.lang.Throwable` `io.reactivex.subjects.MaybeSubject.d` @AccessFlag ;
}
global `io.reactivex.subjects.MaybeSubject$a`[] `@@io.reactivex.subjects.MaybeSubject.e` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.MaybeSubject$a`[] `@@io.reactivex.subjects.MaybeSubject.f` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/MaybeSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L528880.  v0:= 0I;
  #L528882.  v1:= new `io.reactivex.subjects.MaybeSubject$a`[v0];
  #L528886.  `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] := v1 @kind object;
  #L52888a.  v0:= new `io.reactivex.subjects.MaybeSubject$a`[v0];
  #L52888e.  `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] := v0 @kind object;
  #L528892.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5288a4.  call `<init>`(v2) @signature `Lio/reactivex/Maybe;.<init>:()V` @kind direct;
  #L5288aa.  v0:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L5288ae.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L5288b4.  v2.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v0 @kind object;
  #L5288b8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L5288bc.  v1:= `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5288c0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5288c6.  v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L5288ca.  return @kind void;
}
procedure `io.reactivex.subjects.MaybeSubject` `create`() @signature `Lio/reactivex/subjects/MaybeSubject;.create:()Lio/reactivex/subjects/MaybeSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L528804.  v0:= new `io.reactivex.subjects.MaybeSubject`;
  #L528808.  call `<init>`(v0) @signature `Lio/reactivex/subjects/MaybeSubject;.<init>:()V` @kind direct;
  #L52880e.  return v0 @kind object;
}
procedure `boolean` `a`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `io.reactivex.subjects.MaybeSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.a:(Lio/reactivex/subjects/MaybeSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5286dc.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5286e0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5286e6.  v0:= temp @kind object;
  #L5286e8.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L5286ec.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5286f0.  v2:= 0I;
  #L5286f2.  if v0 != v1 then goto L5286f8;
  #L5286f6.  return v2;
  #L5286f8.  v1:= length @variable v0;
  #L5286fa.  v3:= v1 + 1;
  #L5286fe.  v3:= new `io.reactivex.subjects.MaybeSubject$a`[v3];
  #L528702.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528708.  v3[v1]:= v5 @kind object;
  #L52870c.  v1:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528710.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528716.  v0:= temp;
  #L528718.  if v0 == 0 then goto L5286dc;
  #L52871c.  v5:= 1I;
  #L52871e.  return v5;
}
procedure `void` `b`(`io.reactivex.subjects.MaybeSubject` v6 @kind this, `io.reactivex.subjects.MaybeSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.b:(Lio/reactivex/subjects/MaybeSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528a28.  v0:= v6.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528a2c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528a32.  v0:= temp @kind object;
  #L528a34.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L528a38.  v1:= length @variable v0;
  #L528a3a.  if v1 != 0 then goto L528a40;
  #L528a3e.  return @kind void;
  #L528a40.  v2:= -1I;
  #L528a42.  v3:= 0I;
  #L528a44.  v4:= 0I;
  #L528a46.  if v4 >= v1 then goto L528a5c;
  #L528a4a.  v5:= v0[v4] @kind object;
  #L528a4e.  if v5 != v7 then goto L528a56;
  #L528a52.  v2:= v4;
  #L528a54.  goto L528a5c;
  #L528a56.  v4:= v4 + 1;
  #L528a5a.  goto L528a46;
  #L528a5c.  if v2 >= 0 then goto L528a62;
  #L528a60.  return @kind void;
  #L528a62.  v4:= 1I;
  #L528a64.  if v1 != v4 then goto L528a6e;
  #L528a68.  v1:= `@@io.reactivex.subjects.MaybeSubject.e` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L528a6c.  goto L528a8c;
  #L528a6e.  v5:= v1 + -1;
  #L528a72.  v5:= new `io.reactivex.subjects.MaybeSubject$a`[v5];
  #L528a76.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528a7c.  v3:= v2 + 1;
  #L528a80.  v1:= v1 - v2 @kind int;
  #L528a82.  v1:= v1 - v4 @kind int;
  #L528a84.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L528a8a.  v1:= v5 @kind object;
  #L528a8c.  v2:= v6.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528a90.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528a96.  v0:= temp;
  #L528a98.  if v0 == 0 then goto L528a28;
  #L528a9c.  return @kind void;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528850.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528854.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52885a.  v0:= temp @kind object;
  #L52885c.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L528860.  if v0 != v1 then goto L52886a;
  #L528864.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L528868.  return v0 @kind object;
  #L52886a.  v0:= 0I;
  #L52886c.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528820.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528824.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52882a.  v0:= temp @kind object;
  #L52882c.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L528830.  if v0 != v1 then goto L52883a;
  #L528834.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L528838.  return v0 @kind object;
  #L52883a.  v0:= 0I;
  #L52883c.  return v0 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528730.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528734.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52873a.  v0:= temp @kind object;
  #L52873c.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L528740.  if v0 != v1 then goto L528758;
  #L528744.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L528748.  if v0 != 0 then goto L528758;
  #L52874c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L528750.  if v0 != 0 then goto L528758;
  #L528754.  v0:= 1I;
  #L528756.  goto L52875a;
  #L528758.  v0:= 0I;
  #L52875a.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.MaybeSubject` v1 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52876c.  v0:= v1.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528770.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528776.  v0:= temp @kind object;
  #L528778.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L52877c.  v0:= length @variable v0;
  #L52877e.  if v0 == 0 then goto L528786;
  #L528782.  v0:= 1I;
  #L528784.  goto L528788;
  #L528786.  v0:= 0I;
  #L528788.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52879c.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5287a0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5287a6.  v0:= temp @kind object;
  #L5287a8.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5287ac.  if v0 != v1 then goto L5287bc;
  #L5287b0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L5287b4.  if v0 == 0 then goto L5287bc;
  #L5287b8.  v0:= 1I;
  #L5287ba.  goto L5287be;
  #L5287bc.  v0:= 0I;
  #L5287be.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.MaybeSubject` v2 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5287d0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5287d4.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5287da.  v0:= temp @kind object;
  #L5287dc.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5287e0.  if v0 != v1 then goto L5287f0;
  #L5287e4.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L5287e8.  if v0 == 0 then goto L5287f0;
  #L5287ec.  v0:= 1I;
  #L5287ee.  goto L5287f2;
  #L5287f0.  v0:= 0I;
  #L5287f2.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.MaybeSubject` v4 @kind this) @signature `Lio/reactivex/subjects/MaybeSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5288dc.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5288e0.  v1:= 0I;
  #L5288e2.  v2:= 1I;
  #L5288e4.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5288ea.  v0:= temp;
  #L5288ec.  if v0 == 0 then goto L52891e;
  #L5288f0.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5288f4.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5288f8.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5288fe.  v0:= temp @kind object;
  #L528900.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L528904.  v2:= length @variable v0;
  #L528906.  if v1 >= v2 then goto L52891e;
  #L52890a.  v3:= v0[v1] @kind object;
  #L52890e.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L528912.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L528918.  v1:= v1 + 1;
  #L52891c.  goto L528906;
  #L52891e.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Throwable` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L528930.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L528934.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52893a.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L52893e.  v1:= 0I;
  #L528940.  v2:= 1I;
  #L528942.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L528948.  v0:= temp;
  #L52894a.  if v0 == 0 then goto L528980;
  #L52894e.  v4.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` := v5 @kind object;
  #L528952.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528956.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L52895a.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L528960.  v0:= temp @kind object;
  #L528962.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L528966.  v2:= length @variable v0;
  #L528968.  if v1 >= v2 then goto L528986;
  #L52896c.  v3:= v0[v1] @kind object;
  #L528970.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L528974.  call `onError`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L52897a.  v1:= v1 + 1;
  #L52897e.  goto L528968;
  #L528980.  call `onError`(v5) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L528986.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.disposables.Disposable` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L528998.  v0:= v2.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52899c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5289a2.  v0:= temp @kind object;
  #L5289a4.  v1:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5289a8.  if v0 != v1 then goto L5289b2;
  #L5289ac.  call `dispose`(v3) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L5289b2.  return @kind void;
}
procedure `void` `onSuccess`(`io.reactivex.subjects.MaybeSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.onSuccess:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5289c4.  v0:= "onSuccess called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L5289c8.  call temp:= `requireNonNull`(v5, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5289ce.  v0:= v4.`io.reactivex.subjects.MaybeSubject.b` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L5289d2.  v1:= 0I;
  #L5289d4.  v2:= 1I;
  #L5289d6.  call temp:= `compareAndSet`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.compareAndSet:(ZZ)Z` @kind virtual;
  #L5289dc.  v0:= temp;
  #L5289de.  if v0 == 0 then goto L528a14;
  #L5289e2.  v4.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` := v5 @kind object;
  #L5289e6.  v0:= v4.`io.reactivex.subjects.MaybeSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5289ea.  v2:= `@@io.reactivex.subjects.MaybeSubject.f` @type ^`io.reactivex.subjects.MaybeSubject$a`[] @kind object;
  #L5289ee.  call temp:= `getAndSet`(v0, v2) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L5289f4.  v0:= temp @kind object;
  #L5289f6.  v0:= (`io.reactivex.subjects.MaybeSubject$a`[]) v0 @kind object;
  #L5289fa.  v2:= length @variable v0;
  #L5289fc.  if v1 >= v2 then goto L528a14;
  #L528a00.  v3:= v0[v1] @kind object;
  #L528a04.  v3:= v3.`io.reactivex.subjects.MaybeSubject$a.a` @type ^`io.reactivex.MaybeObserver` @kind object;
  #L528a08.  call `onSuccess`(v3, v5) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L528a0e.  v1:= v1 + 1;
  #L528a12.  goto L5289fc;
  #L528a14.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.MaybeSubject` v2 @kind this, `io.reactivex.MaybeObserver` v3 @kind object) @signature `Lio/reactivex/subjects/MaybeSubject;.subscribeActual:(Lio/reactivex/MaybeObserver;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L528ab0.  v0:= new `io.reactivex.subjects.MaybeSubject$a`;
  #L528ab4.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/MaybeSubject$a;.<init>:(Lio/reactivex/MaybeObserver;Lio/reactivex/subjects/MaybeSubject;)V` @kind direct;
  #L528aba.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L528ac0.  call temp:= `a`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.a:(Lio/reactivex/subjects/MaybeSubject$a;)Z` @kind virtual;
  #L528ac6.  v1:= temp;
  #L528ac8.  if v1 == 0 then goto L528ae0;
  #L528acc.  call temp:= `isDisposed`(v0) @signature `Lio/reactivex/subjects/MaybeSubject$a;.isDisposed:()Z` @kind virtual;
  #L528ad2.  v3:= temp;
  #L528ad4.  if v3 == 0 then goto L528b06;
  #L528ad8.  call `b`(v2, v0) @signature `Lio/reactivex/subjects/MaybeSubject;.b:(Lio/reactivex/subjects/MaybeSubject$a;)V` @kind virtual;
  #L528ade.  goto L528b06;
  #L528ae0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.d` @type ^`java.lang.Throwable` @kind object;
  #L528ae4.  if v0 == 0 then goto L528af0;
  #L528ae8.  call `onError`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L528aee.  goto L528b06;
  #L528af0.  v0:= v2.`io.reactivex.subjects.MaybeSubject.c` @type ^`java.lang.Object` @kind object;
  #L528af4.  if v0 != 0 then goto L528b00;
  #L528af8.  call `onComplete`(v3) @signature `Lio/reactivex/MaybeObserver;.onComplete:()V` @kind interface;
  #L528afe.  goto L528b06;
  #L528b00.  call `onSuccess`(v3, v0) @signature `Lio/reactivex/MaybeObserver;.onSuccess:(Ljava/lang/Object;)V` @kind interface;
  #L528b06.  return @kind void;
}
