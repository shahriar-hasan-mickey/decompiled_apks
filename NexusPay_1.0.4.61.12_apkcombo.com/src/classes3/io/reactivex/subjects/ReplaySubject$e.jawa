record `io.reactivex.subjects.ReplaySubject$e` @kind class @AccessFlag FINAL extends `java.util.concurrent.atomic.AtomicReference` @kind class, `io.reactivex.subjects.ReplaySubject$b` @kind interface {
  `int` `io.reactivex.subjects.ReplaySubject$e.a` @AccessFlag FINAL;
  `int` `io.reactivex.subjects.ReplaySubject$e.b` @AccessFlag ;
  `io.reactivex.subjects.ReplaySubject$a` `io.reactivex.subjects.ReplaySubject$e.c` @AccessFlag VOLATILE;
  `io.reactivex.subjects.ReplaySubject$a` `io.reactivex.subjects.ReplaySubject$e.d` @AccessFlag ;
  `boolean` `io.reactivex.subjects.ReplaySubject$e.e` @AccessFlag VOLATILE;
}
global `long` `@@io.reactivex.subjects.ReplaySubject$e.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.ReplaySubject$e` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/subjects/ReplaySubject$e;.<init>:(I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L529698.  call `<init>`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L52969e.  v0:= "maxSize" @kind object;
  #L5296a2.  call temp:= `verifyPositive`(v2, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L5296a8.  v2:= temp;
  #L5296aa.  v1.`io.reactivex.subjects.ReplaySubject$e.a` @type ^`int` := v2;
  #L5296ae.  v2:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L5296b2.  v0:= 0I;
  #L5296b4.  call `<init>`(v2, v0) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5296ba.  v1.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v2 @kind object;
  #L5296be.  v1.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` := v2 @kind object;
  #L5296c2.  return @kind void;
}
procedure `void` `a`(`io.reactivex.subjects.ReplaySubject$e` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.a:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L529710.  v0:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L529714.  call `<init>`(v0, v4) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52971a.  v4:= v3.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L52971e.  v3.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L529722.  v1:= v3.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L529726.  v2:= 1I;
  #L529728.  v1:= v1 + v2 @kind int;
  #L52972a.  v3.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L52972e.  call `lazySet`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L529734.  call `c`(v3) @signature `Lio/reactivex/subjects/ReplaySubject$e;.c:()V` @kind virtual;
  #L52973a.  v3.`io.reactivex.subjects.ReplaySubject$e.e` @type ^`boolean` := v2 @kind boolean;
  #L52973e.  return @kind void;
}
procedure `void` `add`(`io.reactivex.subjects.ReplaySubject$e` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5296d4.  v0:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L5296d8.  call `<init>`(v0, v3) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L5296de.  v3:= v2.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L5296e2.  v2.`io.reactivex.subjects.ReplaySubject$e.d` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L5296e6.  v1:= v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L5296ea.  v1:= v1 + 1;
  #L5296ee.  v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v1;
  #L5296f2.  call `set`(v3, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L5296f8.  call `e`(v2) @signature `Lio/reactivex/subjects/ReplaySubject$e;.e:()V` @kind virtual;
  #L5296fe.  return @kind void;
}
procedure `void` `b`(`io.reactivex.subjects.ReplaySubject$e` v7 @kind this, `io.reactivex.subjects.ReplaySubject$c` v8 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.b:(Lio/reactivex/subjects/ReplaySubject$c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L529750.  call temp:= `getAndIncrement`(v8) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L529756.  v0:= temp;
  #L529758.  if v0 == 0 then goto L52975e;
  #L52975c.  return @kind void;
  #L52975e.  v0:= v8.`io.reactivex.subjects.ReplaySubject$c.a` @type ^`io.reactivex.Observer` @kind object;
  #L529762.  v1:= v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` @kind object;
  #L529766.  v1:= (`io.reactivex.subjects.ReplaySubject$a`) v1 @kind object;
  #L52976a.  v2:= 1I;
  #L52976c.  if v1 != 0 then goto L529774;
  #L529770.  v1:= v7.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L529774.  v3:= 1I;
  #L529776.  v4:= v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` @kind boolean;
  #L52977a.  v5:= 0I;
  #L52977c.  if v4 == 0 then goto L529786;
  #L529780.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L529784.  return @kind void;
  #L529786.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52978c.  v4:= temp @kind object;
  #L52978e.  v4:= (`io.reactivex.subjects.ReplaySubject$a`) v4 @kind object;
  #L529792.  if v4 != 0 then goto L5297b8;
  #L529796.  call temp:= `get`(v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52979c.  v4:= temp @kind object;
  #L52979e.  if v4 == 0 then goto L5297a4;
  #L5297a2.  goto L529776;
  #L5297a4.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v1 @kind object;
  #L5297a8.  v3:= -v3 @kind int;
  #L5297aa.  call temp:= `addAndGet`(v8, v3) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.addAndGet:(I)I` @kind virtual;
  #L5297b0.  v3:= temp;
  #L5297b2.  if v3 != 0 then goto L529776;
  #L5297b6.  return @kind void;
  #L5297b8.  v1:= v4.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L5297bc.  v6:= v7.`io.reactivex.subjects.ReplaySubject$e.e` @type ^`boolean` @kind boolean;
  #L5297c0.  if v6 == 0 then goto L5297fc;
  #L5297c4.  call temp:= `get`(v4) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5297ca.  v6:= temp @kind object;
  #L5297cc.  if v6 != 0 then goto L5297fc;
  #L5297d0.  call temp:= `isComplete`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L5297d6.  v3:= temp;
  #L5297d8.  if v3 == 0 then goto L5297e4;
  #L5297dc.  call `onComplete`(v0) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L5297e2.  goto L5297f2;
  #L5297e4.  call temp:= `getError`(v1) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L5297ea.  v1:= temp @kind object;
  #L5297ec.  call `onError`(v0, v1) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L5297f2.  v8.`io.reactivex.subjects.ReplaySubject$c.c` @type ^`java.lang.Object` := v5 @kind object;
  #L5297f6.  v8.`io.reactivex.subjects.ReplaySubject$c.d` @type ^`boolean` := v2 @kind boolean;
  #L5297fa.  return @kind void;
  #L5297fc.  call `onNext`(v0, v1) @signature `Lio/reactivex/Observer;.onNext:(Ljava/lang/Object;)V` @kind interface;
  #L529802.  v1:= v4 @kind object;
  #L529804.  goto L529776;
}
procedure `void` `c`(`io.reactivex.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L529854.  v0:= v3.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L529858.  v1:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L52985c.  if v1 == 0 then goto L52987e;
  #L529860.  v1:= new `io.reactivex.subjects.ReplaySubject$a`;
  #L529864.  v2:= 0I;
  #L529866.  call `<init>`(v1, v2) @signature `Lio/reactivex/subjects/ReplaySubject$a;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52986c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529872.  v0:= temp @kind object;
  #L529874.  call `lazySet`(v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52987a.  v3.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` := v1 @kind object;
  #L52987e.  return @kind void;
}
procedure `java.lang.Object`[] `d`(`io.reactivex.subjects.ReplaySubject$e` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/ReplaySubject$e;.d:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L52961c.  v0:= v5.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L529620.  call temp:= `size`(v5) @signature `Lio/reactivex/subjects/ReplaySubject$e;.size:()I` @kind virtual;
  #L529626.  v1:= temp;
  #L529628.  v2:= 0I;
  #L52962a.  v3:= 0I;
  #L52962c.  if v1 != 0 then goto L52963c;
  #L529630.  v0:= length @variable v6;
  #L529632.  if v0 == 0 then goto L529686;
  #L529636.  v6[v3]:= v2 @kind object;
  #L52963a.  goto L529686;
  #L52963c.  v4:= length @variable v6;
  #L52963e.  if v4 >= v1 then goto L52965e;
  #L529642.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L529648.  v6:= temp @kind object;
  #L52964a.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L529650.  v6:= temp @kind object;
  #L529652.  call temp:= `newInstance`(v6, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L529658.  v6:= temp @kind object;
  #L52965a.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L52965e.  if v3 == v1 then goto L52967c;
  #L529662.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529668.  v0:= temp @kind object;
  #L52966a.  v0:= (`io.reactivex.subjects.ReplaySubject$a`) v0 @kind object;
  #L52966e.  v4:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L529672.  v6[v3]:= v4 @kind object;
  #L529676.  v3:= v3 + 1;
  #L52967a.  goto L52965e;
  #L52967c.  v0:= length @variable v6;
  #L52967e.  if v0 <= v1 then goto L529686;
  #L529682.  v6[v1]:= v2 @kind object;
  #L529686.  return v6 @kind object;
}
procedure `void` `e`(`io.reactivex.subjects.ReplaySubject$e` v2 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.e:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L529818.  v0:= v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int`;
  #L52981c.  v1:= v2.`io.reactivex.subjects.ReplaySubject$e.a` @type ^`int`;
  #L529820.  if v0 <= v1 then goto L529840;
  #L529824.  v0:= v0 + -1;
  #L529828.  v2.`io.reactivex.subjects.ReplaySubject$e.b` @type ^`int` := v0;
  #L52982c.  v0:= v2.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L529830.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L529836.  v0:= temp @kind object;
  #L529838.  v0:= (`io.reactivex.subjects.ReplaySubject$a`) v0 @kind object;
  #L52983c.  v2.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` := v0 @kind object;
  #L529840.  return @kind void;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.ReplaySubject$e` v4 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5295c0.  v0:= v4.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L5295c4.  v1:= 0I;
  #L5295c6.  v2:= v1 @kind object;
  #L5295c8.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5295ce.  v3:= temp @kind object;
  #L5295d0.  v3:= (`io.reactivex.subjects.ReplaySubject$a`) v3 @kind object;
  #L5295d4.  if v3 != 0 then goto L529604;
  #L5295d8.  v0:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L5295dc.  if v0 != 0 then goto L5295e2;
  #L5295e0.  return v1 @kind object;
  #L5295e2.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L5295e8.  v1:= temp;
  #L5295ea.  if v1 != 0 then goto L5295fe;
  #L5295ee.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L5295f4.  v1:= temp;
  #L5295f6.  if v1 == 0 then goto L5295fc;
  #L5295fa.  goto L5295fe;
  #L5295fc.  return v0 @kind object;
  #L5295fe.  v0:= v2.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L529602.  return v0 @kind object;
  #L529604.  v2:= v0 @kind object;
  #L529606.  v0:= v3 @kind object;
  #L529608.  goto L5295c8;
}
procedure `int` `size`(`io.reactivex.subjects.ReplaySubject$e` v3 @kind this) @signature `Lio/reactivex/subjects/ReplaySubject$e;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L529564.  v0:= v3.`io.reactivex.subjects.ReplaySubject$e.c` @type ^`io.reactivex.subjects.ReplaySubject$a` @kind object;
  #L529568.  v1:= 0I;
  #L52956a.  v2:= 2147483647I;
  #L529570.  if v1 == v2 then goto L5295ae;
  #L529574.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52957a.  v2:= temp @kind object;
  #L52957c.  v2:= (`io.reactivex.subjects.ReplaySubject$a`) v2 @kind object;
  #L529580.  if v2 != 0 then goto L5295a6;
  #L529584.  v0:= v0.`io.reactivex.subjects.ReplaySubject$a.a` @type ^`java.lang.Object` @kind object;
  #L529588.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L52958e.  v2:= temp;
  #L529590.  if v2 != 0 then goto L5295a0;
  #L529594.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L52959a.  v0:= temp;
  #L52959c.  if v0 == 0 then goto L5295ae;
  #L5295a0.  v1:= v1 + -1;
  #L5295a4.  goto L5295ae;
  #L5295a6.  v1:= v1 + 1;
  #L5295aa.  v0:= v2 @kind object;
  #L5295ac.  goto L52956a;
  #L5295ae.  return v1;
}
