record `io.reactivex.subjects.UnicastSubject$a` @kind class @AccessFlag FINAL extends `io.reactivex.internal.observers.BasicIntQueueDisposable` @kind class {
  `io.reactivex.subjects.UnicastSubject` `io.reactivex.subjects.UnicastSubject$a.a` @AccessFlag FINAL_SYNTHETIC;
}
global `long` `@@io.reactivex.subjects.UnicastSubject$a.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.subjects.UnicastSubject$a` v0 @kind this, `io.reactivex.subjects.UnicastSubject` v1 @kind object) @signature `Lio/reactivex/subjects/UnicastSubject$a;.<init>:(Lio/reactivex/subjects/UnicastSubject;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L52a940.  v0.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` := v1 @kind object;
  #L52a944.  call `<init>`(v0) @signature `Lio/reactivex/internal/observers/BasicIntQueueDisposable;.<init>:()V` @kind direct;
  #L52a94a.  return @kind void;
}
procedure `void` `clear`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a95c.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a960.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52a964.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L52a96a.  return @kind void;
}
procedure `void` `dispose`(`io.reactivex.subjects.UnicastSubject$a` v2 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.dispose:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a97c.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a980.  v0:= v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52a984.  if v0 != 0 then goto L52a9e4;
  #L52a988.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a98c.  v1:= 1I;
  #L52a98e.  v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` := v1 @kind boolean;
  #L52a992.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a996.  call `d`(v0) @signature `Lio/reactivex/subjects/UnicastSubject;.d:()V` @kind virtual;
  #L52a99c.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a9a0.  v0:= v0.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52a9a4.  v1:= 0I;
  #L52a9a6.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52a9ac.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a9b0.  v0:= v0.`io.reactivex.subjects.UnicastSubject.i` @type ^`io.reactivex.internal.observers.BasicIntQueueDisposable` @kind object;
  #L52a9b4.  call temp:= `getAndIncrement`(v0) @signature `Ljava/util/concurrent/atomic/AtomicInteger;.getAndIncrement:()I` @kind virtual;
  #L52a9ba.  v0:= temp;
  #L52a9bc.  if v0 != 0 then goto L52a9e4;
  #L52a9c0.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a9c4.  v0:= v0.`io.reactivex.subjects.UnicastSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52a9c8.  call `lazySet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52a9ce.  v0:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a9d2.  v1:= v0.`io.reactivex.subjects.UnicastSubject.j` @type ^`boolean` @kind boolean;
  #L52a9d6.  if v1 != 0 then goto L52a9e4;
  #L52a9da.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52a9de.  call `clear`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.clear:()V` @kind virtual;
  #L52a9e4.  return @kind void;
}
procedure `boolean` `isDisposed`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.isDisposed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a8b4.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a8b8.  v0:= v0.`io.reactivex.subjects.UnicastSubject.e` @type ^`boolean` @kind boolean;
  #L52a8bc.  return v0;
}
procedure `boolean` `isEmpty`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a8d0.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a8d4.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52a8d8.  call temp:= `isEmpty`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.isEmpty:()Z` @kind virtual;
  #L52a8de.  v0:= temp;
  #L52a8e0.  return v0;
}
procedure `java.lang.Object` `poll`(`io.reactivex.subjects.UnicastSubject$a` v1 @kind this) @signature `Lio/reactivex/subjects/UnicastSubject$a;.poll:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52a91c.  v0:= v1.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a920.  v0:= v0.`io.reactivex.subjects.UnicastSubject.a` @type ^`io.reactivex.internal.queue.SpscLinkedArrayQueue` @kind object;
  #L52a924.  call temp:= `poll`(v0) @signature `Lio/reactivex/internal/queue/SpscLinkedArrayQueue;.poll:()Ljava/lang/Object;` @kind virtual;
  #L52a92a.  v0:= temp @kind object;
  #L52a92c.  return v0 @kind object;
}
procedure `int` `requestFusion`(`io.reactivex.subjects.UnicastSubject$a` v2 @kind this, `int` v3 ) @signature `Lio/reactivex/subjects/UnicastSubject$a;.requestFusion:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52a8f4.  v0:= 2I;
  #L52a8f6.  v3:= v3 ^& v0 @kind int;
  #L52a8f8.  if v3 == 0 then goto L52a908;
  #L52a8fc.  v3:= v2.`io.reactivex.subjects.UnicastSubject$a.a` @type ^`io.reactivex.subjects.UnicastSubject` @kind object;
  #L52a900.  v1:= 1I;
  #L52a902.  v3.`io.reactivex.subjects.UnicastSubject.j` @type ^`boolean` := v1 @kind boolean;
  #L52a906.  return v0;
  #L52a908.  v3:= 0I;
  #L52a90a.  return v3;
}
