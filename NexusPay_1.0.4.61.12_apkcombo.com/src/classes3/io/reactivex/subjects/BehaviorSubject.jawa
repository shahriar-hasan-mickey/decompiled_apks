record `io.reactivex.subjects.BehaviorSubject` @kind class @AccessFlag PUBLIC_FINAL extends `io.reactivex.subjects.Subject` @kind class {
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.a` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.b` @AccessFlag FINAL;
  `java.util.concurrent.locks.ReadWriteLock` `io.reactivex.subjects.BehaviorSubject.c` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.d` @AccessFlag FINAL;
  `java.util.concurrent.locks.Lock` `io.reactivex.subjects.BehaviorSubject.e` @AccessFlag FINAL;
  `java.util.concurrent.atomic.AtomicReference` `io.reactivex.subjects.BehaviorSubject.f` @AccessFlag FINAL;
  `long` `io.reactivex.subjects.BehaviorSubject.g` @AccessFlag ;
}
global `java.lang.Object`[] `@@io.reactivex.subjects.BehaviorSubject.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `io.reactivex.subjects.BehaviorSubject$a`[] `@@io.reactivex.subjects.BehaviorSubject.i` @AccessFlag STATIC_FINAL;
global `io.reactivex.subjects.BehaviorSubject$a`[] `@@io.reactivex.subjects.BehaviorSubject.j` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/reactivex/subjects/BehaviorSubject;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L527f4c.  v0:= 0I;
  #L527f4e.  v1:= new `java.lang.Object`[v0];
  #L527f52.  `@@io.reactivex.subjects.BehaviorSubject.h` @type ^`java.lang.Object`[] := v1 @kind object;
  #L527f56.  v1:= new `io.reactivex.subjects.BehaviorSubject$a`[v0];
  #L527f5a.  `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] := v1 @kind object;
  #L527f5e.  v0:= new `io.reactivex.subjects.BehaviorSubject$a`[v0];
  #L527f62.  `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] := v0 @kind object;
  #L527f66.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L527f78.  call `<init>`(v2) @signature `Lio/reactivex/subjects/Subject;.<init>:()V` @kind direct;
  #L527f7e.  v0:= new `java.util.concurrent.locks.ReentrantReadWriteLock`;
  #L527f82.  call `<init>`(v0) @signature `Ljava/util/concurrent/locks/ReentrantReadWriteLock;.<init>:()V` @kind direct;
  #L527f88.  v2.`io.reactivex.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` := v0 @kind object;
  #L527f8c.  call temp:= `readLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.readLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L527f92.  v0:= temp @kind object;
  #L527f94.  v2.`io.reactivex.subjects.BehaviorSubject.d` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L527f98.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.c` @type ^`java.util.concurrent.locks.ReadWriteLock` @kind object;
  #L527f9c.  call temp:= `writeLock`(v0) @signature `Ljava/util/concurrent/locks/ReadWriteLock;.writeLock:()Ljava/util/concurrent/locks/Lock;` @kind interface;
  #L527fa2.  v0:= temp @kind object;
  #L527fa4.  v2.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` := v0 @kind object;
  #L527fa8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L527fac.  v1:= `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L527fb0.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L527fb6.  v2.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L527fba.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L527fbe.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L527fc4.  v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L527fc8.  v0:= new `java.util.concurrent.atomic.AtomicReference`;
  #L527fcc.  call `<init>`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.<init>:()V` @kind direct;
  #L527fd2.  v2.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` := v0 @kind object;
  #L527fd6.  return @kind void;
}
procedure `void` `<init>`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L527fe8.  call `<init>`(v2) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L527fee.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527ff2.  v1:= "defaultValue is null" @kind object;
  #L527ff6.  call temp:= `requireNonNull`(v3, v1) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L527ffc.  v3:= temp @kind object;
  #L527ffe.  call `lazySet`(v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L528004.  return @kind void;
}
procedure `io.reactivex.subjects.BehaviorSubject` `create`() @signature `Lio/reactivex/subjects/BehaviorSubject;.create:()Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L527dac.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L527db0.  call `<init>`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:()V` @kind direct;
  #L527db6.  return v0 @kind object;
}
procedure `io.reactivex.subjects.BehaviorSubject` `createDefault`(`java.lang.Object` v1 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.createDefault:(Ljava/lang/Object;)Lio/reactivex/subjects/BehaviorSubject;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L527dc8.  v0:= new `io.reactivex.subjects.BehaviorSubject`;
  #L527dcc.  call `<init>`(v0, v1) @signature `Lio/reactivex/subjects/BehaviorSubject;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L527dd2.  return v0 @kind object;
}
procedure `boolean` `d`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `io.reactivex.subjects.BehaviorSubject$a` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.d:(Lio/reactivex/subjects/BehaviorSubject$a;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L527c98.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527c9c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527ca2.  v0:= temp @kind object;
  #L527ca4.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L527ca8.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L527cac.  v2:= 0I;
  #L527cae.  if v0 != v1 then goto L527cb4;
  #L527cb2.  return v2;
  #L527cb4.  v1:= length @variable v0;
  #L527cb6.  v3:= v1 + 1;
  #L527cba.  v3:= new `io.reactivex.subjects.BehaviorSubject$a`[v3];
  #L527cbe.  call `arraycopy`(v0, v2, v3, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L527cc4.  v3[v1]:= v5 @kind object;
  #L527cc8.  v1:= v4.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527ccc.  call temp:= `compareAndSet`(v1, v0, v3) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L527cd2.  v0:= temp;
  #L527cd4.  if v0 == 0 then goto L527c98;
  #L527cd8.  v5:= 1I;
  #L527cda.  return v5;
}
procedure `void` `e`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `io.reactivex.subjects.BehaviorSubject$a` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.e:(Lio/reactivex/subjects/BehaviorSubject$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528164.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528168.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52816e.  v0:= temp @kind object;
  #L528170.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L528174.  v1:= length @variable v0;
  #L528176.  if v1 != 0 then goto L52817c;
  #L52817a.  return @kind void;
  #L52817c.  v2:= -1I;
  #L52817e.  v3:= 0I;
  #L528180.  v4:= 0I;
  #L528182.  if v4 >= v1 then goto L528198;
  #L528186.  v5:= v0[v4] @kind object;
  #L52818a.  if v5 != v7 then goto L528192;
  #L52818e.  v2:= v4;
  #L528190.  goto L528198;
  #L528192.  v4:= v4 + 1;
  #L528196.  goto L528182;
  #L528198.  if v2 >= 0 then goto L52819e;
  #L52819c.  return @kind void;
  #L52819e.  v4:= 1I;
  #L5281a0.  if v1 != v4 then goto L5281aa;
  #L5281a4.  v1:= `@@io.reactivex.subjects.BehaviorSubject.i` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L5281a8.  goto L5281c8;
  #L5281aa.  v5:= v1 + -1;
  #L5281ae.  v5:= new `io.reactivex.subjects.BehaviorSubject$a`[v5];
  #L5281b2.  call `arraycopy`(v0, v3, v5, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5281b8.  v3:= v2 + 1;
  #L5281bc.  v1:= v1 - v2 @kind int;
  #L5281be.  v1:= v1 - v4 @kind int;
  #L5281c0.  call `arraycopy`(v0, v3, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5281c6.  v1:= v5 @kind object;
  #L5281c8.  v2:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5281cc.  call temp:= `compareAndSet`(v2, v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L5281d2.  v0:= temp;
  #L5281d4.  if v0 == 0 then goto L528164;
  #L5281d8.  return @kind void;
}
procedure `void` `f`(`io.reactivex.subjects.BehaviorSubject` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5281ec.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L5281f0.  call `lock`(v0) @signature `Ljava/util/concurrent/locks/Lock;.lock:()V` @kind interface;
  #L5281f6.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L5281fa.  v2:= 1L;
  #L5281fe.  v0:= v0 + v2 @kind long;
  #L528200.  v4.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` := v0 @kind wide;
  #L528204.  v0:= v4.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528208.  call `lazySet`(v0, v5) @signature `Ljava/util/concurrent/atomic/AtomicReference;.lazySet:(Ljava/lang/Object;)V` @kind virtual;
  #L52820e.  v5:= v4.`io.reactivex.subjects.BehaviorSubject.e` @type ^`java.util.concurrent.locks.Lock` @kind object;
  #L528212.  call `unlock`(v5) @signature `Ljava/util/concurrent/locks/Lock;.unlock:()V` @kind interface;
  #L528218.  return @kind void;
}
procedure `io.reactivex.subjects.BehaviorSubject$a`[] `g`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L527de4.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527de8.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L527dec.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.getAndSet:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L527df2.  v0:= temp @kind object;
  #L527df4.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L527df8.  v1:= `@@io.reactivex.subjects.BehaviorSubject.j` @type ^`io.reactivex.subjects.BehaviorSubject$a`[] @kind object;
  #L527dfc.  if v0 == v1 then goto L527e06;
  #L527e00.  call `f`(v2, v3) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L527e06.  return v0 @kind object;
}
procedure `java.lang.Throwable` `getThrowable`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getThrowable:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527f14.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527f18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527f1e.  v0:= temp @kind object;
  #L527f20.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L527f26.  v1:= temp;
  #L527f28.  if v1 == 0 then goto L527f36;
  #L527f2c.  call temp:= `getError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getError:(Ljava/lang/Object;)Ljava/lang/Throwable;` @kind static;
  #L527f32.  v0:= temp @kind object;
  #L527f34.  return v0 @kind object;
  #L527f36.  v0:= 0I;
  #L527f38.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527e18.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527e1c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527e22.  v0:= temp @kind object;
  #L527e24.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L527e2a.  v1:= temp;
  #L527e2c.  if v1 != 0 then goto L527e48;
  #L527e30.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L527e36.  v1:= temp;
  #L527e38.  if v1 == 0 then goto L527e3e;
  #L527e3c.  goto L527e48;
  #L527e3e.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L527e44.  v0:= temp @kind object;
  #L527e46.  return v0 @kind object;
  #L527e48.  v0:= 0I;
  #L527e4a.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527e5c.  v0:= `@@io.reactivex.subjects.BehaviorSubject.h` @type ^`java.lang.Object`[] @kind object;
  #L527e60.  call temp:= `getValues`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L527e66.  v0:= temp @kind object;
  #L527e68.  v1:= `@@io.reactivex.subjects.BehaviorSubject.h` @type ^`java.lang.Object`[] @kind object;
  #L527e6c.  if v0 != v1 then goto L527e76;
  #L527e70.  v0:= 0I;
  #L527e72.  v0:= new `java.lang.Object`[v0];
  #L527e76.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getValues`(`io.reactivex.subjects.BehaviorSubject` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.getValues:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L527e88.  v0:= v5.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527e8c.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527e92.  v0:= temp @kind object;
  #L527e94.  v1:= 0I;
  #L527e96.  v2:= 0I;
  #L527e98.  if v0 == 0 then goto L527ef8;
  #L527e9c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L527ea2.  v3:= temp;
  #L527ea4.  if v3 != 0 then goto L527ef8;
  #L527ea8.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L527eae.  v3:= temp;
  #L527eb0.  if v3 == 0 then goto L527eb6;
  #L527eb4.  goto L527ef8;
  #L527eb6.  call temp:= `getValue`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.getValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L527ebc.  v0:= temp @kind object;
  #L527ebe.  v3:= length @variable v6;
  #L527ec0.  v4:= 1I;
  #L527ec2.  if v3 == 0 then goto L527ed6;
  #L527ec6.  v6[v2]:= v0 @kind object;
  #L527eca.  v0:= length @variable v6;
  #L527ecc.  if v0 == v4 then goto L527ef6;
  #L527ed0.  v6[v4]:= v1 @kind object;
  #L527ed4.  goto L527ef6;
  #L527ed6.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L527edc.  v6:= temp @kind object;
  #L527ede.  call temp:= `getComponentType`(v6) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L527ee4.  v6:= temp @kind object;
  #L527ee6.  call temp:= `newInstance`(v6, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L527eec.  v6:= temp @kind object;
  #L527eee.  v6:= (`java.lang.Object`[]) v6 @kind object;
  #L527ef2.  v6[v2]:= v0 @kind object;
  #L527ef6.  return v6 @kind object;
  #L527ef8.  v0:= length @variable v6;
  #L527efa.  if v0 == 0 then goto L527f02;
  #L527efe.  v6[v2]:= v1 @kind object;
  #L527f02.  return v6 @kind object;
}
procedure `boolean` `hasComplete`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasComplete:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527cec.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527cf0.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527cf6.  v0:= temp @kind object;
  #L527cf8.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L527cfe.  v0:= temp;
  #L527d00.  return v0;
}
procedure `boolean` `hasObservers`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasObservers:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527d14.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527d18.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527d1e.  v0:= temp @kind object;
  #L527d20.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L527d24.  v0:= length @variable v0;
  #L527d26.  if v0 == 0 then goto L527d2e;
  #L527d2a.  v0:= 1I;
  #L527d2c.  goto L527d30;
  #L527d2e.  v0:= 0I;
  #L527d30.  return v0;
}
procedure `boolean` `hasThrowable`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasThrowable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L527d44.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527d48.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527d4e.  v0:= temp @kind object;
  #L527d50.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L527d56.  v0:= temp;
  #L527d58.  return v0;
}
procedure `boolean` `hasValue`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.hasValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L527d6c.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.a` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L527d70.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L527d76.  v0:= temp @kind object;
  #L527d78.  if v0 == 0 then goto L527d98;
  #L527d7c.  call temp:= `isComplete`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isComplete:(Ljava/lang/Object;)Z` @kind static;
  #L527d82.  v1:= temp;
  #L527d84.  if v1 != 0 then goto L527d98;
  #L527d88.  call temp:= `isError`(v0) @signature `Lio/reactivex/internal/util/NotificationLite;.isError:(Ljava/lang/Object;)Z` @kind static;
  #L527d8e.  v0:= temp;
  #L527d90.  if v0 != 0 then goto L527d98;
  #L527d94.  v0:= 1I;
  #L527d96.  goto L527d9a;
  #L527d98.  v0:= 0I;
  #L527d9a.  return v0;
}
procedure `void` `onComplete`(`io.reactivex.subjects.BehaviorSubject` v7 @kind this) @signature `Lio/reactivex/subjects/BehaviorSubject;.onComplete:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L528018.  v0:= v7.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52801c.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L528020.  v2:= 0I;
  #L528022.  call temp:= `compareAndSet`(v0, v2, v1) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528028.  v0:= temp;
  #L52802a.  if v0 != 0 then goto L528030;
  #L52802e.  return @kind void;
  #L528030.  call temp:= `complete`() @signature `Lio/reactivex/internal/util/NotificationLite;.complete:()Ljava/lang/Object;` @kind static;
  #L528036.  v0:= temp @kind object;
  #L528038.  call temp:= `g`(v7, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @kind virtual;
  #L52803e.  v1:= temp @kind object;
  #L528040.  v2:= length @variable v1;
  #L528042.  v3:= 0I;
  #L528044.  if v3 >= v2 then goto L52805c;
  #L528048.  v4:= v1[v3] @kind object;
  #L52804c.  v5:= v7.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L528050.  call `c`(v4, v0, v5) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L528056.  v3:= v3 + 1;
  #L52805a.  goto L528044;
  #L52805c.  return @kind void;
}
procedure `void` `onError`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Throwable` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onError:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L528070.  v0:= "onError called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L528074.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L52807a.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L52807e.  v1:= 0I;
  #L528080.  call temp:= `compareAndSet`(v0, v1, v7) @signature `Ljava/util/concurrent/atomic/AtomicReference;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L528086.  v0:= temp;
  #L528088.  if v0 != 0 then goto L528094;
  #L52808c.  call `onError`(v7) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onError:(Ljava/lang/Throwable;)V` @kind static;
  #L528092.  return @kind void;
  #L528094.  call temp:= `error`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.error:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L52809a.  v7:= temp @kind object;
  #L52809c.  call temp:= `g`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.g:(Ljava/lang/Object;)[Lio/reactivex/subjects/BehaviorSubject$a;` @kind virtual;
  #L5280a2.  v0:= temp @kind object;
  #L5280a4.  v1:= length @variable v0;
  #L5280a6.  v2:= 0I;
  #L5280a8.  if v2 >= v1 then goto L5280c0;
  #L5280ac.  v3:= v0[v2] @kind object;
  #L5280b0.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L5280b4.  call `c`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L5280ba.  v2:= v2 + 1;
  #L5280be.  goto L5280a8;
  #L5280c0.  return @kind void;
}
procedure `void` `onNext`(`io.reactivex.subjects.BehaviorSubject` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onNext:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5280d4.  v0:= "onNext called with null. Null values are generally not allowed in 2.x operators and sources." @kind object;
  #L5280d8.  call temp:= `requireNonNull`(v7, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L5280de.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L5280e2.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L5280e8.  v0:= temp @kind object;
  #L5280ea.  if v0 == 0 then goto L5280f0;
  #L5280ee.  return @kind void;
  #L5280f0.  call temp:= `next`(v7) @signature `Lio/reactivex/internal/util/NotificationLite;.next:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L5280f6.  v7:= temp @kind object;
  #L5280f8.  call `f`(v6, v7) @signature `Lio/reactivex/subjects/BehaviorSubject;.f:(Ljava/lang/Object;)V` @kind virtual;
  #L5280fe.  v0:= v6.`io.reactivex.subjects.BehaviorSubject.b` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528102.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528108.  v0:= temp @kind object;
  #L52810a.  v0:= (`io.reactivex.subjects.BehaviorSubject$a`[]) v0 @kind object;
  #L52810e.  v1:= length @variable v0;
  #L528110.  v2:= 0I;
  #L528112.  if v2 >= v1 then goto L52812a;
  #L528116.  v3:= v0[v2] @kind object;
  #L52811a.  v4:= v6.`io.reactivex.subjects.BehaviorSubject.g` @type ^`long` @kind wide;
  #L52811e.  call `c`(v3, v7, v4) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.c:(Ljava/lang/Object;J)V` @kind virtual;
  #L528124.  v2:= v2 + 1;
  #L528128.  goto L528112;
  #L52812a.  return @kind void;
}
procedure `void` `onSubscribe`(`io.reactivex.subjects.BehaviorSubject` v1 @kind this, `io.reactivex.disposables.Disposable` v2 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52813c.  v0:= v1.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528140.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L528146.  v0:= temp @kind object;
  #L528148.  if v0 == 0 then goto L528152;
  #L52814c.  call `dispose`(v2) @signature `Lio/reactivex/disposables/Disposable;.dispose:()V` @kind interface;
  #L528152.  return @kind void;
}
procedure `void` `subscribeActual`(`io.reactivex.subjects.BehaviorSubject` v2 @kind this, `io.reactivex.Observer` v3 @kind object) @signature `Lio/reactivex/subjects/BehaviorSubject;.subscribeActual:(Lio/reactivex/Observer;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L52822c.  v0:= new `io.reactivex.subjects.BehaviorSubject$a`;
  #L528230.  call `<init>`(v0, v3, v2) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.<init>:(Lio/reactivex/Observer;Lio/reactivex/subjects/BehaviorSubject;)V` @kind direct;
  #L528236.  call `onSubscribe`(v3, v0) @signature `Lio/reactivex/Observer;.onSubscribe:(Lio/reactivex/disposables/Disposable;)V` @kind interface;
  #L52823c.  call temp:= `d`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.d:(Lio/reactivex/subjects/BehaviorSubject$a;)Z` @kind virtual;
  #L528242.  v1:= temp;
  #L528244.  if v1 == 0 then goto L528260;
  #L528248.  v3:= v0.`io.reactivex.subjects.BehaviorSubject$a.g` @type ^`boolean` @kind boolean;
  #L52824c.  if v3 == 0 then goto L528258;
  #L528250.  call `e`(v2, v0) @signature `Lio/reactivex/subjects/BehaviorSubject;.e:(Lio/reactivex/subjects/BehaviorSubject$a;)V` @kind virtual;
  #L528256.  goto L528286;
  #L528258.  call `a`(v0) @signature `Lio/reactivex/subjects/BehaviorSubject$a;.a:()V` @kind virtual;
  #L52825e.  goto L528286;
  #L528260.  v0:= v2.`io.reactivex.subjects.BehaviorSubject.f` @type ^`java.util.concurrent.atomic.AtomicReference` @kind object;
  #L528264.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L52826a.  v0:= temp @kind object;
  #L52826c.  v0:= (`java.lang.Throwable`) v0 @kind object;
  #L528270.  v1:= `@@io.reactivex.internal.util.ExceptionHelper.TERMINATED` @type ^`java.lang.Throwable` @kind object;
  #L528274.  if v0 != v1 then goto L528280;
  #L528278.  call `onComplete`(v3) @signature `Lio/reactivex/Observer;.onComplete:()V` @kind interface;
  #L52827e.  goto L528286;
  #L528280.  call `onError`(v3, v0) @signature `Lio/reactivex/Observer;.onError:(Ljava/lang/Throwable;)V` @kind interface;
  #L528286.  return @kind void;
}
