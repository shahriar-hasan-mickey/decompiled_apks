record `io.reactivex.observables.ConnectableObservable` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.reactivex.Observable` @kind class {
}
procedure `void` `<init>`(`io.reactivex.observables.ConnectableObservable` v0 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L48bc30.  call `<init>`(v0) @signature `Lio/reactivex/Observable;.<init>:()V` @kind direct;
  #L48bc36.  return @kind void;
}
procedure `io.reactivex.observables.ConnectableObservable` `d`(`io.reactivex.observables.ConnectableObservable` v2 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.d:()Lio/reactivex/observables/ConnectableObservable;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L48bbf4.  v0:= instanceof @variable v2 @type ^`io.reactivex.internal.operators.observable.ObservablePublishClassic` @kind boolean;
  #L48bbf8.  if v0 == 0 then goto L48bc1e;
  #L48bbfc.  v0:= new `io.reactivex.internal.operators.observable.ObservablePublishAlt`;
  #L48bc00.  v1:= v2 @kind object;
  #L48bc02.  v1:= (`io.reactivex.internal.operators.observable.ObservablePublishClassic`) v1 @kind object;
  #L48bc06.  call temp:= `publishSource`(v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishClassic;.publishSource:()Lio/reactivex/ObservableSource;` @kind interface;
  #L48bc0c.  v1:= temp @kind object;
  #L48bc0e.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservablePublishAlt;.<init>:(Lio/reactivex/ObservableSource;)V` @kind direct;
  #L48bc14.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L48bc1a.  v0:= temp @kind object;
  #L48bc1c.  return v0 @kind object;
  #L48bc1e.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ba28.  v0:= 1I;
  #L48ba2a.  call temp:= `autoConnect`(v1, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(I)Lio/reactivex/Observable;` @kind virtual;
  #L48ba30.  v0:= temp @kind object;
  #L48ba32.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this, `int` v2 ) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(I)Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ba44.  call temp:= `emptyConsumer`() @signature `Lio/reactivex/internal/functions/Functions;.emptyConsumer:()Lio/reactivex/functions/Consumer;` @kind static;
  #L48ba4a.  v0:= temp @kind object;
  #L48ba4c.  call temp:= `autoConnect`(v1, v2, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Observable;` @kind virtual;
  #L48ba52.  v2:= temp @kind object;
  #L48ba54.  return v2 @kind object;
}
procedure `io.reactivex.Observable` `autoConnect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this, `int` v2 , `io.reactivex.functions.Consumer` v3 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.autoConnect:(ILio/reactivex/functions/Consumer;)Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L48ba68.  if v2 > 0 then goto L48ba7c;
  #L48ba6c.  call `connect`(v1, v3) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L48ba72.  call temp:= `onAssembly`(v1) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/observables/ConnectableObservable;)Lio/reactivex/observables/ConnectableObservable;` @kind static;
  #L48ba78.  v2:= temp @kind object;
  #L48ba7a.  return v2 @kind object;
  #L48ba7c.  v0:= new `io.reactivex.internal.operators.observable.ObservableAutoConnect`;
  #L48ba80.  call `<init>`(v0, v1, v2, v3) @signature `Lio/reactivex/internal/operators/observable/ObservableAutoConnect;.<init>:(Lio/reactivex/observables/ConnectableObservable;ILio/reactivex/functions/Consumer;)V` @kind direct;
  #L48ba86.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L48ba8c.  v2:= temp @kind object;
  #L48ba8e.  return v2 @kind object;
}
procedure `io.reactivex.disposables.Disposable` `connect`(`io.reactivex.observables.ConnectableObservable` v1 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:()Lio/reactivex/disposables/Disposable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L48bbcc.  v0:= new `io.reactivex.internal.util.ConnectConsumer`;
  #L48bbd0.  call `<init>`(v0) @signature `Lio/reactivex/internal/util/ConnectConsumer;.<init>:()V` @kind direct;
  #L48bbd6.  call `connect`(v1, v0) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @kind virtual;
  #L48bbdc.  v0:= v0.`io.reactivex.internal.util.ConnectConsumer.disposable` @type ^`io.reactivex.disposables.Disposable` @kind object;
  #L48bbe0.  return v0 @kind object;
}
procedure `void` `connect`(`io.reactivex.functions.Consumer` v0 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.connect:(Lio/reactivex/functions/Consumer;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v2 @kind this) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:()Lio/reactivex/Observable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L48baa0.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount`;
  #L48baa4.  call temp:= `d`(v2) @signature `Lio/reactivex/observables/ConnectableObservable;.d:()Lio/reactivex/observables/ConnectableObservable;` @kind direct;
  #L48baaa.  v1:= temp @kind object;
  #L48baac.  call `<init>`(v0, v1) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;)V` @kind direct;
  #L48bab2.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L48bab8.  v0:= temp @kind object;
  #L48baba.  return v0 @kind object;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v6 @kind this, `int` v7 ) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(I)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bacc.  v4:= `@@java.util.concurrent.TimeUnit.NANOSECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L48bad0.  call temp:= `trampoline`() @signature `Lio/reactivex/schedulers/Schedulers;.trampoline:()Lio/reactivex/Scheduler;` @kind static;
  #L48bad6.  v5:= temp @kind object;
  #L48bad8.  v2:= 0L;
  #L48badc.  v0:= v6 @kind object;
  #L48bade.  v1:= v7;
  #L48bae0.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L48bae6.  v7:= temp @kind object;
  #L48bae8.  return v7 @kind object;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v6 @kind this, `int` v7 , `long` v8 , `java.util.concurrent.TimeUnit` v10 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bafc.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L48bb02.  v5:= temp @kind object;
  #L48bb04.  v0:= v6 @kind object;
  #L48bb06.  v1:= v7;
  #L48bb08.  v2:= v8 @kind wide;
  #L48bb0a.  v4:= v10 @kind object;
  #L48bb0c.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L48bb12.  v7:= temp @kind object;
  #L48bb14.  return v7 @kind object;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v8 @kind this, `int` v9 , `long` v10 , `java.util.concurrent.TimeUnit` v12 @kind object, `io.reactivex.Scheduler` v13 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L48bb28.  v0:= "subscriberCount" @kind object;
  #L48bb2c.  call temp:= `verifyPositive`(v9, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.verifyPositive:(ILjava/lang/String;)I` @kind static;
  #L48bb32.  v0:= "unit is null" @kind object;
  #L48bb36.  call temp:= `requireNonNull`(v12, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48bb3c.  v0:= "scheduler is null" @kind object;
  #L48bb40.  call temp:= `requireNonNull`(v13, v0) @signature `Lio/reactivex/internal/functions/ObjectHelper;.requireNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L48bb46.  v0:= new `io.reactivex.internal.operators.observable.ObservableRefCount`;
  #L48bb4a.  call temp:= `d`(v8) @signature `Lio/reactivex/observables/ConnectableObservable;.d:()Lio/reactivex/observables/ConnectableObservable;` @kind direct;
  #L48bb50.  v2:= temp @kind object;
  #L48bb52.  v1:= v0 @kind object;
  #L48bb54.  v3:= v9;
  #L48bb56.  v4:= v10 @kind wide;
  #L48bb58.  v6:= v12 @kind object;
  #L48bb5a.  v7:= v13 @kind object;
  #L48bb5c.  call `<init>`(v1, v2, v3, v4, v6, v7) @signature `Lio/reactivex/internal/operators/observable/ObservableRefCount;.<init>:(Lio/reactivex/observables/ConnectableObservable;IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)V` @kind direct;
  #L48bb62.  call temp:= `onAssembly`(v0) @signature `Lio/reactivex/plugins/RxJavaPlugins;.onAssembly:(Lio/reactivex/Observable;)Lio/reactivex/Observable;` @kind static;
  #L48bb68.  v9:= temp @kind object;
  #L48bb6a.  return v9 @kind object;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(JLjava/util/concurrent/TimeUnit;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bb7c.  call temp:= `computation`() @signature `Lio/reactivex/schedulers/Schedulers;.computation:()Lio/reactivex/Scheduler;` @kind static;
  #L48bb82.  v5:= temp @kind object;
  #L48bb84.  v1:= 1I;
  #L48bb86.  v0:= v6 @kind object;
  #L48bb88.  v2:= v7 @kind wide;
  #L48bb8a.  v4:= v9 @kind object;
  #L48bb8c.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L48bb92.  v7:= temp @kind object;
  #L48bb94.  return v7 @kind object;
}
procedure `io.reactivex.Observable` `refCount`(`io.reactivex.observables.ConnectableObservable` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `io.reactivex.Scheduler` v10 @kind object) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(JLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L48bba8.  v1:= 1I;
  #L48bbaa.  v0:= v6 @kind object;
  #L48bbac.  v2:= v7 @kind wide;
  #L48bbae.  v4:= v9 @kind object;
  #L48bbb0.  v5:= v10 @kind object;
  #L48bbb2.  call temp:= `refCount`(v0, v1, v2, v4, v5) @signature `Lio/reactivex/observables/ConnectableObservable;.refCount:(IJLjava/util/concurrent/TimeUnit;Lio/reactivex/Scheduler;)Lio/reactivex/Observable;` @kind virtual;
  #L48bbb8.  v7:= temp @kind object;
  #L48bbba.  return v7 @kind object;
}
