record `io.reactivex.exceptions.CompositeException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.util.List` `io.reactivex.exceptions.CompositeException.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `io.reactivex.exceptions.CompositeException.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Throwable` `io.reactivex.exceptions.CompositeException.c` @AccessFlag PRIVATE;
}
global `long` `@@io.reactivex.exceptions.CompositeException.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v4 @kind this, `java.lang.Iterable` v5 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L427a10.  call `<init>`(v4) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L427a16.  v0:= new `java.util.LinkedHashSet`;
  #L427a1a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L427a20.  v1:= new `java.util.ArrayList`;
  #L427a24.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L427a2a.  if v5 == 0 then goto L427a8c;
  #L427a2e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L427a34.  v5:= temp @kind object;
  #L427a36.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427a3c.  v2:= temp;
  #L427a3e.  if v2 == 0 then goto L427aa0;
  #L427a42.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L427a48.  v2:= temp @kind object;
  #L427a4a.  v2:= (`java.lang.Throwable`) v2 @kind object;
  #L427a4e.  v3:= instanceof @variable v2 @type ^`io.reactivex.exceptions.CompositeException` @kind boolean;
  #L427a52.  if v3 == 0 then goto L427a6a;
  #L427a56.  v2:= (`io.reactivex.exceptions.CompositeException`) v2 @kind object;
  #L427a5a.  call temp:= `getExceptions`(v2) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @kind virtual;
  #L427a60.  v2:= temp @kind object;
  #L427a62.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/Set;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L427a68.  goto L427a36;
  #L427a6a.  if v2 == 0 then goto L427a76;
  #L427a6e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L427a74.  goto L427a36;
  #L427a76.  v2:= new `java.lang.NullPointerException`;
  #L427a7a.  v3:= "Throwable was null!" @kind object;
  #L427a7e.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427a84.  call temp:= `add`(v0, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L427a8a.  goto L427a36;
  #L427a8c.  v5:= new `java.lang.NullPointerException`;
  #L427a90.  v2:= "errors was null" @kind object;
  #L427a94.  call `<init>`(v5, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427a9a.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L427aa0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L427aa6.  v5:= temp;
  #L427aa8.  if v5 != 0 then goto L427af2;
  #L427aac.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L427ab2.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L427ab8.  v5:= temp @kind object;
  #L427aba.  v4.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` := v5 @kind object;
  #L427abe.  v5:= new `java.lang.StringBuilder`;
  #L427ac2.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L427ac8.  v0:= v4.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L427acc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L427ad2.  v0:= temp;
  #L427ad4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L427ada.  v0:= " exceptions occurred. " @kind object;
  #L427ade.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427ae4.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427aea.  v5:= temp @kind object;
  #L427aec.  v4.`io.reactivex.exceptions.CompositeException.b` @type ^`java.lang.String` := v5 @kind object;
  #L427af0.  return @kind void;
  #L427af2.  v5:= new `java.lang.IllegalArgumentException`;
  #L427af6.  v0:= "errors is empty" @kind object;
  #L427afa.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427b00.  throw v5;
}
procedure `void` `<init>`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable`[] v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:([Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L427b14.  if v2 != 0 then goto L427b30;
  #L427b18.  v2:= new `java.lang.NullPointerException`;
  #L427b1c.  v0:= "exceptions was null" @kind object;
  #L427b20.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427b26.  call temp:= `singletonList`(v2) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L427b2c.  v2:= temp @kind object;
  #L427b2e.  goto L427b38;
  #L427b30.  call temp:= `asList`(v2) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L427b36.  v2:= temp @kind object;
  #L427b38.  call `<init>`(v1, v2) @signature `Lio/reactivex/exceptions/CompositeException;.<init>:(Ljava/lang/Iterable;)V` @kind direct;
  #L427b3e.  return @kind void;
}
procedure `void` `a`(`io.reactivex.exceptions.CompositeException` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.lang.Throwable` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L427b50.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b56.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b5c.  v8:= 10I;
  #L427b60.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b66.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/Throwable;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L427b6c.  v0:= temp @kind object;
  #L427b6e.  v1:= length @variable v0;
  #L427b70.  v2:= 0I;
  #L427b72.  if v2 >= v1 then goto L427b96;
  #L427b76.  v3:= v0[v2] @kind object;
  #L427b7a.  v4:= "\t\tat " @kind object;
  #L427b7e.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b84.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b8a.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L427b90.  v2:= v2 + 1;
  #L427b94.  goto L427b72;
  #L427b96.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L427b9c.  v8:= temp @kind object;
  #L427b9e.  if v8 == 0 then goto L427bbe;
  #L427ba2.  v8:= "\tCaused by: " @kind object;
  #L427ba6.  call temp:= `append`(v6, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427bac.  call temp:= `getCause`(v7) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L427bb2.  v7:= temp @kind object;
  #L427bb4.  v8:= "" @kind object;
  #L427bb8.  call `a`(v5, v6, v7, v8) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L427bbe.  return @kind void;
}
procedure `java.util.List` `b`(`io.reactivex.exceptions.CompositeException` v2 @kind this, `java.lang.Throwable` v3 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L4279c4.  v0:= new `java.util.ArrayList`;
  #L4279c8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L4279ce.  call temp:= `getCause`(v3) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4279d4.  v1:= temp @kind object;
  #L4279d6.  if v1 == 0 then goto L4279fc;
  #L4279da.  if v1 != v3 then goto L4279e0;
  #L4279de.  goto L4279fc;
  #L4279e0.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4279e6.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L4279ec.  v3:= temp @kind object;
  #L4279ee.  if v3 == 0 then goto L4279fc;
  #L4279f2.  if v3 != v1 then goto L4279f8;
  #L4279f6.  goto L4279fc;
  #L4279f8.  v1:= v3 @kind object;
  #L4279fa.  goto L4279e0;
  #L4279fc.  return v0 @kind object;
}
procedure `void` `d`(`io.reactivex.exceptions.CompositeException` v7 @kind this, `io.reactivex.exceptions.CompositeException$b` v8 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L427bec.  v0:= new `java.lang.StringBuilder`;
  #L427bf0.  v1:= 128I;
  #L427bf4.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L427bfa.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c00.  v1:= 10I;
  #L427c04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c0a.  call temp:= `getStackTrace`(v7) @signature `Ljava/lang/RuntimeException;.getStackTrace:()[Ljava/lang/StackTraceElement;` @kind virtual;
  #L427c10.  v2:= temp @kind object;
  #L427c12.  v3:= length @variable v2;
  #L427c14.  v4:= 0I;
  #L427c16.  if v4 >= v3 then goto L427c3a;
  #L427c1a.  v5:= v2[v4] @kind object;
  #L427c1e.  v6:= "\tat " @kind object;
  #L427c22.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c28.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c34.  v4:= v4 + 1;
  #L427c38.  goto L427c16;
  #L427c3a.  v1:= v7.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L427c3e.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L427c44.  v1:= temp @kind object;
  #L427c46.  v2:= 1I;
  #L427c48.  v3:= 1I;
  #L427c4a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L427c50.  v4:= temp;
  #L427c52.  if v4 == 0 then goto L427c8a;
  #L427c56.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L427c5c.  v4:= temp @kind object;
  #L427c5e.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L427c62.  v5:= "  ComposedException " @kind object;
  #L427c66.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c6c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c72.  v5:= " :\n" @kind object;
  #L427c76.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L427c7c.  v5:= "\t" @kind object;
  #L427c80.  call `a`(v7, v0, v4, v5) @signature `Lio/reactivex/exceptions/CompositeException;.a:(Ljava/lang/StringBuilder;Ljava/lang/Throwable;Ljava/lang/String;)V` @kind direct;
  #L427c86.  v3:= v3 + v2 @kind int;
  #L427c88.  goto L427c4a;
  #L427c8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L427c90.  v0:= temp @kind object;
  #L427c92.  call `a`(v8, v0) @signature `Lio/reactivex/exceptions/CompositeException$b;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L427c98.  return @kind void;
}
procedure `java.lang.Throwable` `c`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.lang.Throwable` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @AccessFlag  {
    temp;
    v0;

  #L427970.  call temp:= `getCause`(v2) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L427976.  v0:= temp @kind object;
  #L427978.  if v0 == 0 then goto L42799a;
  #L42797c.  if v2 != v0 then goto L427982;
  #L427980.  goto L42799a;
  #L427982.  call temp:= `getCause`(v0) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L427988.  v2:= temp @kind object;
  #L42798a.  if v2 == 0 then goto L427998;
  #L42798e.  if v2 != v0 then goto L427994;
  #L427992.  goto L427998;
  #L427994.  v0:= v2 @kind object;
  #L427996.  goto L427982;
  #L427998.  return v0 @kind object;
  #L42799a.  return v2 @kind object;
}
procedure `java.lang.Throwable` `getCause`(`io.reactivex.exceptions.CompositeException` v8 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getCause:()Ljava/lang/Throwable;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L427878.  @monitorenter v8
  #L42787a.  v0:= v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L42787e.  if v0 != 0 then goto L427930;
  #L427882.  v0:= new `io.reactivex.exceptions.CompositeException$a`;
  #L427886.  call `<init>`(v0) @signature `Lio/reactivex/exceptions/CompositeException$a;.<init>:()V` @kind direct;
  #L42788c.  v1:= new `java.util.HashSet`;
  #L427890.  call `<init>`(v1) @signature `Ljava/util/HashSet;.<init>:()V` @kind direct;
  #L427896.  v2:= v8.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L42789a.  call temp:= `iterator`(v2) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4278a0.  v2:= temp @kind object;
  #L4278a2.  v3:= v0 @kind object;
  #L4278a4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4278aa.  v4:= temp;
  #L4278ac.  if v4 == 0 then goto L42792c;
  #L4278b0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4278b6.  v4:= temp @kind object;
  #L4278b8.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L4278bc.  call temp:= `contains`(v1, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4278c2.  v5:= temp;
  #L4278c4.  if v5 == 0 then goto L4278ca;
  #L4278c8.  goto L4278a4;
  #L4278ca.  call temp:= `add`(v1, v4) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4278d0.  call temp:= `b`(v8, v4) @signature `Lio/reactivex/exceptions/CompositeException;.b:(Ljava/lang/Throwable;)Ljava/util/List;` @kind direct;
  #L4278d6.  v5:= temp @kind object;
  #L4278d8.  call temp:= `iterator`(v5) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4278de.  v5:= temp @kind object;
  #L4278e0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4278e6.  v6:= temp;
  #L4278e8.  if v6 == 0 then goto L42791c;
  #L4278ec.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4278f2.  v6:= temp @kind object;
  #L4278f4.  v6:= (`java.lang.Throwable`) v6 @kind object;
  #L4278f8.  call temp:= `contains`(v1, v6) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L4278fe.  v7:= temp;
  #L427900.  if v7 == 0 then goto L427914;
  #L427904.  v4:= new `java.lang.RuntimeException`;
  #L427908.  v6:= "Duplicate found in causal chain so cropping to prevent loop ..." @kind object;
  #L42790c.  call `<init>`(v4, v6) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L427912.  goto L4278e0;
  #L427914.  call temp:= `add`(v1, v6) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L42791a.  goto L4278e0;
  #L42791c.  call temp:= `initCause`(v3, v4) @signature `Ljava/lang/Throwable;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L427922.  call temp:= `c`(v8, v3) @signature `Lio/reactivex/exceptions/CompositeException;.c:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L427928.  v3:= temp @kind object;
  #L42792a.  goto L4278a4;
  #L42792c.  v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` := v0 @kind object;
  #L427930.  v0:= v8.`io.reactivex.exceptions.CompositeException.c` @type ^`java.lang.Throwable` @kind object;
  #L427934.  @monitorexit v8
  #L427936.  return v0 @kind object;
  #L427938.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L42793a.  @monitorexit v8
  #L42793c.  throw v0;
  catch `java.lang.Throwable` @[L42787a..L42791a] goto L427938;
  catch `java.lang.Throwable` @[L42791c..L427922] goto L427922;
  catch `java.lang.Throwable` @[L427922..L427934] goto L427938;
}
procedure `java.util.List` `getExceptions`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getExceptions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4279ac.  v0:= v1.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L4279b0.  return v0 @kind object;
}
procedure `java.lang.String` `getMessage`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.getMessage:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427860.  v0:= v1.`io.reactivex.exceptions.CompositeException.b` @type ^`java.lang.String` @kind object;
  #L427864.  return v0 @kind object;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427bd0.  v0:= `@@java.lang.System.err` @type ^`java.io.PrintStream` @kind object;
  #L427bd4.  call `printStackTrace`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @kind virtual;
  #L427bda.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintStream` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427cac.  v0:= new `io.reactivex.exceptions.CompositeException$c`;
  #L427cb0.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$c;.<init>:(Ljava/io/PrintStream;)V` @kind direct;
  #L427cb6.  call `d`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @kind direct;
  #L427cbc.  return @kind void;
}
procedure `void` `printStackTrace`(`io.reactivex.exceptions.CompositeException` v1 @kind this, `java.io.PrintWriter` v2 @kind object) @signature `Lio/reactivex/exceptions/CompositeException;.printStackTrace:(Ljava/io/PrintWriter;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427cd0.  v0:= new `io.reactivex.exceptions.CompositeException$d`;
  #L427cd4.  call `<init>`(v0, v2) @signature `Lio/reactivex/exceptions/CompositeException$d;.<init>:(Ljava/io/PrintWriter;)V` @kind direct;
  #L427cda.  call `d`(v1, v0) @signature `Lio/reactivex/exceptions/CompositeException;.d:(Lio/reactivex/exceptions/CompositeException$b;)V` @kind direct;
  #L427ce0.  return @kind void;
}
procedure `int` `size`(`io.reactivex.exceptions.CompositeException` v1 @kind this) @signature `Lio/reactivex/exceptions/CompositeException;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L427840.  v0:= v1.`io.reactivex.exceptions.CompositeException.a` @type ^`java.util.List` @kind object;
  #L427844.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L42784a.  v0:= temp;
  #L42784c.  return v0;
}
