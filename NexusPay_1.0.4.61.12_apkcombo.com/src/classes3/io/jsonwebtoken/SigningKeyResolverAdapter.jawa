record `io.jsonwebtoken.SigningKeyResolverAdapter` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.SigningKeyResolver` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.SigningKeyResolverAdapter` v0 @kind this) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bc48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40bc4e.  return @kind void;
}
procedure `java.security.Key` `resolveSigningKey`(`io.jsonwebtoken.SigningKeyResolverAdapter` v4 @kind this, `io.jsonwebtoken.JwsHeader` v5 @kind object, `io.jsonwebtoken.Claims` v6 @kind object) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKey:(Lio/jsonwebtoken/JwsHeader;Lio/jsonwebtoken/Claims;)Ljava/security/Key;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40bb48.  call temp:= `getAlgorithm`(v5) @signature `Lio/jsonwebtoken/JwsHeader;.getAlgorithm:()Ljava/lang/String;` @kind interface;
  #L40bb4e.  v0:= temp @kind object;
  #L40bb50.  call temp:= `forName`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.forName:(Ljava/lang/String;)Lio/jsonwebtoken/SignatureAlgorithm;` @kind static;
  #L40bb56.  v0:= temp @kind object;
  #L40bb58.  call temp:= `isHmac`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.isHmac:()Z` @kind virtual;
  #L40bb5e.  v1:= temp;
  #L40bb60.  v2:= new `java.lang.StringBuilder`;
  #L40bb64.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40bb6a.  v3:= "The default resolveSigningKey(JwsHeader, Claims) implementation cannot be used for asymmetric key algorithms (RSA, Elliptic Curve).  Override the resolveSigningKey(JwsHeader, Claims) method instead and return a Key instance appropriate for the " @kind object;
  #L40bb6e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bb74.  call temp:= `name`(v0) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40bb7a.  v3:= temp @kind object;
  #L40bb7c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bb82.  v3:= " algorithm." @kind object;
  #L40bb86.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bb8c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40bb92.  v2:= temp @kind object;
  #L40bb94.  call `isTrue`(v1, v2) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @kind static;
  #L40bb9a.  call temp:= `resolveSigningKeyBytes`(v4, v5, v6) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKeyBytes:(Lio/jsonwebtoken/JwsHeader;Lio/jsonwebtoken/Claims;)[B` @kind virtual;
  #L40bba0.  v5:= temp @kind object;
  #L40bba2.  v6:= new `javax.crypto.spec.SecretKeySpec`;
  #L40bba6.  call temp:= `getJcaName`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.getJcaName:()Ljava/lang/String;` @kind virtual;
  #L40bbac.  v0:= temp @kind object;
  #L40bbae.  call `<init>`(v6, v5, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L40bbb4.  return v6 @kind object;
}
procedure `java.security.Key` `resolveSigningKey`(`io.jsonwebtoken.SigningKeyResolverAdapter` v4 @kind this, `io.jsonwebtoken.JwsHeader` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKey:(Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;)Ljava/security/Key;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L40bbc8.  call temp:= `getAlgorithm`(v5) @signature `Lio/jsonwebtoken/JwsHeader;.getAlgorithm:()Ljava/lang/String;` @kind interface;
  #L40bbce.  v0:= temp @kind object;
  #L40bbd0.  call temp:= `forName`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.forName:(Ljava/lang/String;)Lio/jsonwebtoken/SignatureAlgorithm;` @kind static;
  #L40bbd6.  v0:= temp @kind object;
  #L40bbd8.  call temp:= `isHmac`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.isHmac:()Z` @kind virtual;
  #L40bbde.  v1:= temp;
  #L40bbe0.  v2:= new `java.lang.StringBuilder`;
  #L40bbe4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40bbea.  v3:= "The default resolveSigningKey(JwsHeader, String) implementation cannot be used for asymmetric key algorithms (RSA, Elliptic Curve).  Override the resolveSigningKey(JwsHeader, String) method instead and return a Key instance appropriate for the " @kind object;
  #L40bbee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bbf4.  call temp:= `name`(v0) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40bbfa.  v3:= temp @kind object;
  #L40bbfc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bc02.  v3:= " algorithm." @kind object;
  #L40bc06.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40bc0c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40bc12.  v2:= temp @kind object;
  #L40bc14.  call `isTrue`(v1, v2) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @kind static;
  #L40bc1a.  call temp:= `resolveSigningKeyBytes`(v4, v5, v6) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKeyBytes:(Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;)[B` @kind virtual;
  #L40bc20.  v5:= temp @kind object;
  #L40bc22.  v6:= new `javax.crypto.spec.SecretKeySpec`;
  #L40bc26.  call temp:= `getJcaName`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.getJcaName:()Ljava/lang/String;` @kind virtual;
  #L40bc2c.  v0:= temp @kind object;
  #L40bc2e.  call `<init>`(v6, v5, v0) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L40bc34.  return v6 @kind object;
}
procedure `byte`[] `resolveSigningKeyBytes`(`io.jsonwebtoken.SigningKeyResolverAdapter` v0 @kind this, `io.jsonwebtoken.JwsHeader` v1 @kind object, `io.jsonwebtoken.Claims` v2 @kind object) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKeyBytes:(Lio/jsonwebtoken/JwsHeader;Lio/jsonwebtoken/Claims;)[B` @AccessFlag PUBLIC {
    temp;

  #L40bb08.  v1:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40bb0c.  v2:= "The specified SigningKeyResolver implementation does not support Claims JWS signing key resolution.  Consider overriding either the resolveSigningKey(JwsHeader, Claims) method or, for HMAC algorithms, the resolveSigningKeyBytes(JwsHeader, Claims) method." @kind object;
  #L40bb10.  call `<init>`(v1, v2) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40bb16.  throw v1;
}
procedure `byte`[] `resolveSigningKeyBytes`(`io.jsonwebtoken.SigningKeyResolverAdapter` v0 @kind this, `io.jsonwebtoken.JwsHeader` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/SigningKeyResolverAdapter;.resolveSigningKeyBytes:(Lio/jsonwebtoken/JwsHeader;Ljava/lang/String;)[B` @AccessFlag PUBLIC {
    temp;

  #L40bb28.  v1:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40bb2c.  v2:= "The specified SigningKeyResolver implementation does not support plaintext JWS signing key resolution.  Consider overriding either the resolveSigningKey(JwsHeader, String) method or, for HMAC algorithms, the resolveSigningKeyBytes(JwsHeader, String) method." @kind object;
  #L40bb30.  call `<init>`(v1, v2) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40bb36.  throw v1;
}
