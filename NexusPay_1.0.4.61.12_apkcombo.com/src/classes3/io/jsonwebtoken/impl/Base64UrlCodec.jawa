record `io.jsonwebtoken.impl.Base64UrlCodec` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.AbstractTextCodec` @kind class {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.Base64UrlCodec` v0 @kind this) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bf68.  call `<init>`(v0) @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.<init>:()V` @kind direct;
  #L40bf6e.  return @kind void;
}
procedure `byte`[] `decode`(`io.jsonwebtoken.impl.Base64UrlCodec` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40bdd4.  call temp:= `toCharArray`(v4) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L40bdda.  v4:= temp @kind object;
  #L40bddc.  call temp:= `ensurePadding`(v3, v4) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.ensurePadding:([C)[C` @kind virtual;
  #L40bde2.  v4:= temp @kind object;
  #L40bde4.  v0:= 0I;
  #L40bde6.  v1:= length @variable v4;
  #L40bde8.  if v0 >= v1 then goto L40be1c;
  #L40bdec.  v1:= v4[v0] @kind char;
  #L40bdf0.  v2:= 45I;
  #L40bdf4.  if v1 != v2 then goto L40be02;
  #L40bdf8.  v1:= 43I;
  #L40bdfc.  v4[v0]:= v1 @kind char;
  #L40be00.  goto L40be16;
  #L40be02.  v1:= v4[v0] @kind char;
  #L40be06.  v2:= 95I;
  #L40be0a.  if v1 != v2 then goto L40be16;
  #L40be0e.  v1:= 47I;
  #L40be12.  v4[v0]:= v1 @kind char;
  #L40be16.  v0:= v0 + 1;
  #L40be1a.  goto L40bde6;
  #L40be1c.  v0:= new `java.lang.String`;
  #L40be20.  call `<init>`(v0, v4) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L40be26.  v4:= `@@io.jsonwebtoken.impl.TextCodec.BASE64` @type ^`io.jsonwebtoken.impl.TextCodec` @kind object;
  #L40be2a.  call temp:= `decode`(v4, v0) @signature `Lio/jsonwebtoken/impl/TextCodec;.decode:(Ljava/lang/String;)[B` @kind interface;
  #L40be30.  v4:= temp @kind object;
  #L40be32.  return v4 @kind object;
}
procedure `java.lang.String` `encode`(`io.jsonwebtoken.impl.Base64UrlCodec` v3 @kind this, `byte`[] v4 @kind object) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40bef0.  v0:= `@@io.jsonwebtoken.impl.TextCodec.BASE64` @type ^`io.jsonwebtoken.impl.TextCodec` @kind object;
  #L40bef4.  call temp:= `encode`(v0, v4) @signature `Lio/jsonwebtoken/impl/TextCodec;.encode:([B)Ljava/lang/String;` @kind interface;
  #L40befa.  v4:= temp @kind object;
  #L40befc.  v0:= `@@io.jsonwebtoken.impl.AbstractTextCodec.US_ASCII` @type ^`java.nio.charset.Charset` @kind object;
  #L40bf00.  call temp:= `getBytes`(v4, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L40bf06.  v4:= temp @kind object;
  #L40bf08.  call temp:= `removePadding`(v3, v4) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.removePadding:([B)[B` @kind virtual;
  #L40bf0e.  v4:= temp @kind object;
  #L40bf10.  v0:= 0I;
  #L40bf12.  v1:= length @variable v4;
  #L40bf14.  if v0 >= v1 then goto L40bf48;
  #L40bf18.  v1:= v4[v0] @kind byte;
  #L40bf1c.  v2:= 43I;
  #L40bf20.  if v1 != v2 then goto L40bf2e;
  #L40bf24.  v1:= 45I;
  #L40bf28.  v4[v0]:= v1 @kind byte;
  #L40bf2c.  goto L40bf42;
  #L40bf2e.  v1:= v4[v0] @kind byte;
  #L40bf32.  v2:= 47I;
  #L40bf36.  if v1 != v2 then goto L40bf42;
  #L40bf3a.  v1:= 95I;
  #L40bf3e.  v4[v0]:= v1 @kind byte;
  #L40bf42.  v0:= v0 + 1;
  #L40bf46.  goto L40bf12;
  #L40bf48.  v0:= new `java.lang.String`;
  #L40bf4c.  v1:= `@@io.jsonwebtoken.impl.AbstractTextCodec.US_ASCII` @type ^`java.nio.charset.Charset` @kind object;
  #L40bf50.  call `<init>`(v0, v4, v1) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L40bf56.  return v0 @kind object;
}
procedure `char`[] `ensurePadding`(`io.jsonwebtoken.impl.Base64UrlCodec` v5 @kind this, `char`[] v6 @kind object) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.ensurePadding:([C)[C` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40be94.  v0:= length @variable v6;
  #L40be96.  v0:= v0 %% 4;
  #L40be9a.  v1:= 0I;
  #L40be9c.  v2:= 2I;
  #L40be9e.  if v0 == v2 then goto L40beae;
  #L40bea2.  v2:= 3I;
  #L40bea4.  if v0 != v2 then goto L40beaa;
  #L40bea8.  goto L40beae;
  #L40beaa.  v0:= 0I;
  #L40beac.  goto L40beb2;
  #L40beae.  v0:= v0 - 4;
  #L40beb2.  if v0 <= 0 then goto L40bede;
  #L40beb6.  v2:= length @variable v6;
  #L40beb8.  v2:= v2 + v0 @kind int;
  #L40beba.  v2:= new `char`[v2];
  #L40bebe.  v3:= length @variable v6;
  #L40bec0.  call `arraycopy`(v6, v1, v2, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40bec6.  if v1 >= v0 then goto L40bedc;
  #L40beca.  v3:= length @variable v6;
  #L40becc.  v3:= v3 + v1 @kind int;
  #L40bece.  v4:= 61I;
  #L40bed2.  v2[v3]:= v4 @kind char;
  #L40bed6.  v1:= v1 + 1;
  #L40beda.  goto L40bec6;
  #L40bedc.  v6:= v2 @kind object;
  #L40bede.  return v6 @kind object;
}
procedure `byte`[] `removePadding`(`io.jsonwebtoken.impl.Base64UrlCodec` v5 @kind this, `byte`[] v6 @kind object) @signature `Lio/jsonwebtoken/impl/Base64UrlCodec;.removePadding:([B)[B` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L40be44.  v0:= length @variable v6;
  #L40be46.  v0:= v0 + -1;
  #L40be4a.  v1:= 0I;
  #L40be4c.  v2:= 0I;
  #L40be4e.  if v0 <= 0 then goto L40be68;
  #L40be52.  v3:= v6[v0] @kind byte;
  #L40be56.  v4:= 61I;
  #L40be5a.  if v3 != v4 then goto L40be68;
  #L40be5e.  v2:= v2 + 1;
  #L40be62.  v0:= v0 + -1;
  #L40be66.  goto L40be4e;
  #L40be68.  if v2 <= 0 then goto L40be80;
  #L40be6c.  v0:= length @variable v6;
  #L40be6e.  v0:= v0 - v2 @kind int;
  #L40be70.  v0:= new `byte`[v0];
  #L40be74.  v3:= length @variable v6;
  #L40be76.  v3:= v3 - v2 @kind int;
  #L40be78.  call `arraycopy`(v6, v1, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40be7e.  v6:= v0 @kind object;
  #L40be80.  return v6 @kind object;
}
