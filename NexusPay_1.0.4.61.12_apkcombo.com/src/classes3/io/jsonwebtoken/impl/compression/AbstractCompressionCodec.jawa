record `io.jsonwebtoken.impl.compression.AbstractCompressionCodec` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.jsonwebtoken.CompressionCodec` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.compression.AbstractCompressionCodec` v0 @kind this) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40e12c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e132.  return @kind void;
}
procedure `byte`[] `compress`(`io.jsonwebtoken.impl.compression.AbstractCompressionCodec` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.compress:([B)[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L40e09c.  v0:= "payload cannot be null." @kind object;
  #L40e0a0.  call `notNull`(v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e0a6.  call temp:= `doCompress`(v2, v3) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.doCompress:([B)[B` @kind virtual;
  #L40e0ac.  v3:= temp @kind object;
  #L40e0ae.  return v3 @kind object;
  #L40e0b0.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L40e0b2.  v0:= new `io.jsonwebtoken.CompressionException`;
  #L40e0b6.  v1:= "Unable to compress payload." @kind object;
  #L40e0ba.  call `<init>`(v0, v1, v3) @signature `Lio/jsonwebtoken/CompressionException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40e0c0.  throw v0;
  catch `java.io.IOException` @[L40e0a6..L40e0ae] goto L40e0b0;
}
procedure `byte`[] `decompress`(`io.jsonwebtoken.impl.compression.AbstractCompressionCodec` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.decompress:([B)[B` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L40e0e4.  v0:= "compressed bytes cannot be null." @kind object;
  #L40e0e8.  call `notNull`(v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e0ee.  call temp:= `doDecompress`(v2, v3) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.doDecompress:([B)[B` @kind virtual;
  #L40e0f4.  v3:= temp @kind object;
  #L40e0f6.  return v3 @kind object;
  #L40e0f8.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L40e0fa.  v0:= new `io.jsonwebtoken.CompressionException`;
  #L40e0fe.  v1:= "Unable to decompress bytes." @kind object;
  #L40e102.  call `<init>`(v0, v1, v3) @signature `Lio/jsonwebtoken/CompressionException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40e108.  throw v0;
  catch `java.io.IOException` @[L40e0ee..L40e0f6] goto L40e0f8;
}
procedure `byte`[] `doCompress`(`byte`[] v0 @kind object) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.doCompress:([B)[B` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `byte`[] `doDecompress`(`byte`[] v0 @kind object) @signature `Lio/jsonwebtoken/impl/compression/AbstractCompressionCodec;.doDecompress:([B)[B` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
