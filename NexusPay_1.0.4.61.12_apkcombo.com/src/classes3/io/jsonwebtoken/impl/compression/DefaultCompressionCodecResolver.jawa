record `io.jsonwebtoken.impl.compression.DefaultCompressionCodecResolver` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.CompressionCodecResolver` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.compression.DefaultCompressionCodecResolver` v0 @kind this) @signature `Lio/jsonwebtoken/impl/compression/DefaultCompressionCodecResolver;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40e240.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e246.  return @kind void;
}
procedure `java.lang.String` `a`(`io.jsonwebtoken.impl.compression.DefaultCompressionCodecResolver` v1 @kind this, `io.jsonwebtoken.Header` v2 @kind object) @signature `Lio/jsonwebtoken/impl/compression/DefaultCompressionCodecResolver;.a:(Lio/jsonwebtoken/Header;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L40e21c.  v0:= "header cannot be null." @kind object;
  #L40e220.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e226.  call temp:= `getCompressionAlgorithm`(v2) @signature `Lio/jsonwebtoken/Header;.getCompressionAlgorithm:()Ljava/lang/String;` @kind interface;
  #L40e22c.  v2:= temp @kind object;
  #L40e22e.  return v2 @kind object;
}
procedure `io.jsonwebtoken.CompressionCodec` `resolveCompressionCodec`(`io.jsonwebtoken.impl.compression.DefaultCompressionCodecResolver` v3 @kind this, `io.jsonwebtoken.Header` v4 @kind object) @signature `Lio/jsonwebtoken/impl/compression/DefaultCompressionCodecResolver;.resolveCompressionCodec:(Lio/jsonwebtoken/Header;)Lio/jsonwebtoken/CompressionCodec;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40e180.  call temp:= `a`(v3, v4) @signature `Lio/jsonwebtoken/impl/compression/DefaultCompressionCodecResolver;.a:(Lio/jsonwebtoken/Header;)Ljava/lang/String;` @kind direct;
  #L40e186.  v4:= temp @kind object;
  #L40e188.  call temp:= `hasText`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/String;)Z` @kind static;
  #L40e18e.  v0:= temp;
  #L40e190.  if v0 != 0 then goto L40e198;
  #L40e194.  v4:= 0I;
  #L40e196.  return v4 @kind object;
  #L40e198.  v0:= `@@io.jsonwebtoken.impl.compression.CompressionCodecs.DEFLATE` @type ^`io.jsonwebtoken.CompressionCodec` @kind object;
  #L40e19c.  call temp:= `getAlgorithmName`(v0) @signature `Lio/jsonwebtoken/CompressionCodec;.getAlgorithmName:()Ljava/lang/String;` @kind interface;
  #L40e1a2.  v0:= temp @kind object;
  #L40e1a4.  call temp:= `equalsIgnoreCase`(v0, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L40e1aa.  v0:= temp;
  #L40e1ac.  if v0 == 0 then goto L40e1b6;
  #L40e1b0.  v4:= `@@io.jsonwebtoken.impl.compression.CompressionCodecs.DEFLATE` @type ^`io.jsonwebtoken.CompressionCodec` @kind object;
  #L40e1b4.  return v4 @kind object;
  #L40e1b6.  v0:= `@@io.jsonwebtoken.impl.compression.CompressionCodecs.GZIP` @type ^`io.jsonwebtoken.CompressionCodec` @kind object;
  #L40e1ba.  call temp:= `getAlgorithmName`(v0) @signature `Lio/jsonwebtoken/CompressionCodec;.getAlgorithmName:()Ljava/lang/String;` @kind interface;
  #L40e1c0.  v0:= temp @kind object;
  #L40e1c2.  call temp:= `equalsIgnoreCase`(v0, v4) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L40e1c8.  v0:= temp;
  #L40e1ca.  if v0 == 0 then goto L40e1d4;
  #L40e1ce.  v4:= `@@io.jsonwebtoken.impl.compression.CompressionCodecs.GZIP` @type ^`io.jsonwebtoken.CompressionCodec` @kind object;
  #L40e1d2.  return v4 @kind object;
  #L40e1d4.  v0:= new `io.jsonwebtoken.CompressionException`;
  #L40e1d8.  v1:= new `java.lang.StringBuilder`;
  #L40e1dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40e1e2.  v2:= "Unsupported compression algorithm '" @kind object;
  #L40e1e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e1ec.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e1f2.  v4:= "'" @kind object;
  #L40e1f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e1fc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40e202.  v4:= temp @kind object;
  #L40e204.  call `<init>`(v0, v4) @signature `Lio/jsonwebtoken/CompressionException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e20a.  throw v0;
}
