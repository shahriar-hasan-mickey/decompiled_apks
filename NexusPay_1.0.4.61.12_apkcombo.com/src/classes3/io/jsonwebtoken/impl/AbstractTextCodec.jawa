record `io.jsonwebtoken.impl.AbstractTextCodec` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.jsonwebtoken.impl.TextCodec` @kind interface {
}
global `java.nio.charset.Charset` `@@io.jsonwebtoken.impl.AbstractTextCodec.US_ASCII` @AccessFlag PROTECTED_STATIC_FINAL;
global `java.nio.charset.Charset` `@@io.jsonwebtoken.impl.AbstractTextCodec.UTF8` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40bce8.  v0:= "UTF-8" @kind object;
  #L40bcec.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L40bcf2.  v0:= temp @kind object;
  #L40bcf4.  `@@io.jsonwebtoken.impl.AbstractTextCodec.UTF8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L40bcf8.  v0:= "US-ASCII" @kind object;
  #L40bcfc.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L40bd02.  v0:= temp @kind object;
  #L40bd04.  `@@io.jsonwebtoken.impl.AbstractTextCodec.US_ASCII` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L40bd08.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.AbstractTextCodec` v0 @kind this) @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bd1c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40bd22.  return @kind void;
}
procedure `java.lang.String` `decodeToString`(`io.jsonwebtoken.impl.AbstractTextCodec` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.decodeToString:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40bc90.  call temp:= `decode`(v2, v3) @signature `Lio/jsonwebtoken/impl/TextCodec;.decode:(Ljava/lang/String;)[B` @kind interface;
  #L40bc96.  v3:= temp @kind object;
  #L40bc98.  v0:= new `java.lang.String`;
  #L40bc9c.  v1:= `@@io.jsonwebtoken.impl.AbstractTextCodec.UTF8` @type ^`java.nio.charset.Charset` @kind object;
  #L40bca0.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L40bca6.  return v0 @kind object;
}
procedure `java.lang.String` `encode`(`io.jsonwebtoken.impl.AbstractTextCodec` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.encode:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40bcb8.  v0:= "String argument to encode cannot be null or empty." @kind object;
  #L40bcbc.  call `hasText`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.hasText:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L40bcc2.  v0:= `@@io.jsonwebtoken.impl.AbstractTextCodec.UTF8` @type ^`java.nio.charset.Charset` @kind object;
  #L40bcc6.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L40bccc.  v2:= temp @kind object;
  #L40bcce.  call temp:= `encode`(v1, v2) @signature `Lio/jsonwebtoken/impl/TextCodec;.encode:([B)Ljava/lang/String;` @kind interface;
  #L40bcd4.  v2:= temp @kind object;
  #L40bcd6.  return v2 @kind object;
}
