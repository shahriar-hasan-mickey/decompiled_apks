record `io.jsonwebtoken.impl.crypto.EllipticCurveSigner` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.EllipticCurveProvider` @kind class, `io.jsonwebtoken.impl.crypto.Signer` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.EllipticCurveSigner` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40f330.  call `<init>`(v1, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40f336.  v2:= instanceof @variable v3 @type ^`java.security.interfaces.ECPrivateKey` @kind boolean;
  #L40f33a.  if v2 == 0 then goto L40f340;
  #L40f33e.  return @kind void;
  #L40f340.  v2:= new `java.lang.StringBuilder`;
  #L40f344.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40f34a.  v0:= "Elliptic Curve signatures must be computed using an ECPrivateKey.  The specified key of type " @kind object;
  #L40f34e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f354.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L40f35a.  v3:= temp @kind object;
  #L40f35c.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L40f362.  v3:= temp @kind object;
  #L40f364.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f36a.  v3:= " is not an ECPrivateKey." @kind object;
  #L40f36e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f374.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f37a.  v2:= temp @kind object;
  #L40f37c.  v3:= new `java.lang.IllegalArgumentException`;
  #L40f380.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40f386.  throw v3;
}
procedure `byte`[] `doSign`(`io.jsonwebtoken.impl.crypto.EllipticCurveSigner` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSigner;.doSign:([B)[B` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L40f20c.  v0:= v2.`io.jsonwebtoken.impl.crypto.a.key` @type ^`java.security.Key` @kind object;
  #L40f210.  v0:= (`java.security.PrivateKey`) v0 @kind object;
  #L40f214.  call temp:= `createSignatureInstance`(v2) @signature `Lio/jsonwebtoken/impl/crypto/a;.createSignatureInstance:()Ljava/security/Signature;` @kind virtual;
  #L40f21a.  v1:= temp @kind object;
  #L40f21c.  call `initSign`(v1, v0) @signature `Ljava/security/Signature;.initSign:(Ljava/security/PrivateKey;)V` @kind virtual;
  #L40f222.  call `update`(v1, v3) @signature `Ljava/security/Signature;.update:([B)V` @kind virtual;
  #L40f228.  call temp:= `sign`(v1) @signature `Ljava/security/Signature;.sign:()[B` @kind virtual;
  #L40f22e.  v3:= temp @kind object;
  #L40f230.  v0:= v2.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40f234.  call temp:= `getSignatureByteArrayLength`(v0) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.getSignatureByteArrayLength:(Lio/jsonwebtoken/SignatureAlgorithm;)I` @kind static;
  #L40f23a.  v0:= temp;
  #L40f23c.  call temp:= `transcodeSignatureToConcat`(v3, v0) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.transcodeSignatureToConcat:([BI)[B` @kind static;
  #L40f242.  v3:= temp @kind object;
  #L40f244.  return v3 @kind object;
}
procedure `byte`[] `sign`(`io.jsonwebtoken.impl.crypto.EllipticCurveSigner` v3 @kind this, `byte`[] v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSigner;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40f258.  call temp:= `doSign`(v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSigner;.doSign:([B)[B` @kind virtual;
  #L40f25e.  v4:= temp @kind object;
  #L40f260.  return v4 @kind object;
  #L40f262.  v4:= Exception @type ^`io.jsonwebtoken.JwtException` @kind object;
  #L40f264.  v0:= new `io.jsonwebtoken.SignatureException`;
  #L40f268.  v1:= new `java.lang.StringBuilder`;
  #L40f26c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40f272.  v2:= "Unable to convert signature to JOSE format. " @kind object;
  #L40f276.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f27c.  call temp:= `getMessage`(v4) @signature `Ljava/lang/RuntimeException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40f282.  v2:= temp @kind object;
  #L40f284.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f28a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f290.  v1:= temp @kind object;
  #L40f292.  call `<init>`(v0, v1, v4) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40f298.  throw v0;
  #L40f29a.  v4:= Exception @type ^`java.security.SignatureException` @kind object;
  #L40f29c.  v0:= new `io.jsonwebtoken.SignatureException`;
  #L40f2a0.  v1:= new `java.lang.StringBuilder`;
  #L40f2a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40f2aa.  v2:= "Unable to calculate signature using Elliptic Curve PrivateKey. " @kind object;
  #L40f2ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f2b4.  call temp:= `getMessage`(v4) @signature `Ljava/security/SignatureException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40f2ba.  v2:= temp @kind object;
  #L40f2bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f2c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f2c8.  v1:= temp @kind object;
  #L40f2ca.  call `<init>`(v0, v1, v4) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40f2d0.  throw v0;
  #L40f2d2.  v4:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L40f2d4.  v0:= new `io.jsonwebtoken.SignatureException`;
  #L40f2d8.  v1:= new `java.lang.StringBuilder`;
  #L40f2dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40f2e2.  v2:= "Invalid Elliptic Curve PrivateKey. " @kind object;
  #L40f2e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f2ec.  call temp:= `getMessage`(v4) @signature `Ljava/security/InvalidKeyException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40f2f2.  v2:= temp @kind object;
  #L40f2f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f2fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f300.  v1:= temp @kind object;
  #L40f302.  call `<init>`(v0, v1, v4) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40f308.  throw v0;
  catch `java.security.InvalidKeyException` @[L40f258..L40f260] goto L40f2d2;
  catch `java.security.SignatureException` @[L40f258..L40f260] goto L40f29a;
  catch `io.jsonwebtoken.JwtException` @[L40f258..L40f260] goto L40f262;
}
