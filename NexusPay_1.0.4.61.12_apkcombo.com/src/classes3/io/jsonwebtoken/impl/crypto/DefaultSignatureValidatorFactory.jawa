record `io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.SignatureValidatorFactory` @kind interface {
}
global `io.jsonwebtoken.impl.crypto.SignatureValidatorFactory` `@@io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignatureValidatorFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e934.  v0:= new `io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory`;
  #L40e938.  call `<init>`(v0) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignatureValidatorFactory;.<init>:()V` @kind direct;
  #L40e93e.  `@@io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory.INSTANCE` @type ^`io.jsonwebtoken.impl.crypto.SignatureValidatorFactory` := v0 @kind object;
  #L40e942.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory` v0 @kind this) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignatureValidatorFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40e954.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e95a.  return @kind void;
}
procedure `io.jsonwebtoken.impl.crypto.SignatureValidator` `createSignatureValidator`(`io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory` v2 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v3 @kind object, `java.security.Key` v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignatureValidatorFactory;.createSignatureValidator:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)Lio/jsonwebtoken/impl/crypto/SignatureValidator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40e85c.  v0:= "SignatureAlgorithm cannot be null." @kind object;
  #L40e860.  call `notNull`(v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e866.  v0:= "Signing Key cannot be null." @kind object;
  #L40e86a.  call `notNull`(v4, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e870.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory$a.a` @type ^`int`[] @kind object;
  #L40e874.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40e87a.  v1:= temp;
  #L40e87c.  v0:= v0[v1];
  #L40e880.  goto L40e8ec;
  #L40e886.  v4:= new `java.lang.IllegalArgumentException`;
  #L40e88a.  v0:= new `java.lang.StringBuilder`;
  #L40e88e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40e894.  v1:= "The '" @kind object;
  #L40e898.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e89e.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40e8a4.  v3:= temp @kind object;
  #L40e8a6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e8ac.  v3:= "' algorithm cannot be used for signing." @kind object;
  #L40e8b0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40e8b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40e8bc.  v3:= temp @kind object;
  #L40e8be.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40e8c4.  throw v4;
  #L40e8c6.  v0:= new `io.jsonwebtoken.impl.crypto.EllipticCurveSignatureValidator`;
  #L40e8ca.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSignatureValidator;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40e8d0.  return v0 @kind object;
  #L40e8d2.  v0:= new `io.jsonwebtoken.impl.crypto.RsaSignatureValidator`;
  #L40e8d6.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/RsaSignatureValidator;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40e8dc.  return v0 @kind object;
  #L40e8de.  v0:= new `io.jsonwebtoken.impl.crypto.MacValidator`;
  #L40e8e2.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/MacValidator;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40e8e8.  return v0 @kind object;
  #L40e8ea.  
  #L40e8ec.  switch v0
                  | 1 => goto L40e8de
                  | 2 => goto L40e8de
                  | 3 => goto L40e8de
                  | 4 => goto L40e8d2
                  | 5 => goto L40e8d2
                  | 6 => goto L40e8d2
                  | 7 => goto L40e8d2
                  | 8 => goto L40e8d2
                  | 9 => goto L40e8d2
                  | 10 => goto L40e8c6
                  | 11 => goto L40e8c6
                  | 12 => goto L40e8c6
                  | else => goto L40e886;
}
