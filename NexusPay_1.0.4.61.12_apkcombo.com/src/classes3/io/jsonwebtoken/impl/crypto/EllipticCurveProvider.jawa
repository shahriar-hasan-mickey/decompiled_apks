record `io.jsonwebtoken.impl.crypto.EllipticCurveProvider` @kind class @AccessFlag PUBLIC_ABSTRACT extends `io.jsonwebtoken.impl.crypto.a` @kind class {
}
global `java.util.Map` `@@io.jsonwebtoken.impl.crypto.EllipticCurveProvider.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40f0d4.  call temp:= `a`() @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.a:()Ljava/util/Map;` @kind static;
  #L40f0da.  v0:= temp @kind object;
  #L40f0dc.  `@@io.jsonwebtoken.impl.crypto.EllipticCurveProvider.a` @type ^`java.util.Map` := v0 @kind object;
  #L40f0e0.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.EllipticCurveProvider` v0 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v1 @kind object, `java.security.Key` v2 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L40f0f4.  call `<init>`(v0, v1, v2) @signature `Lio/jsonwebtoken/impl/crypto/a;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40f0fa.  call temp:= `isEllipticCurve`(v1) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.isEllipticCurve:()Z` @kind virtual;
  #L40f100.  v1:= temp;
  #L40f102.  v2:= "SignatureAlgorithm must be an Elliptic Curve algorithm." @kind object;
  #L40f106.  call `isTrue`(v1, v2) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @kind static;
  #L40f10c.  return @kind void;
}
procedure `java.util.Map` `a`() @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.a:()Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40f08c.  v0:= new `java.util.HashMap`;
  #L40f090.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L40f096.  v1:= `@@io.jsonwebtoken.SignatureAlgorithm.ES256` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40f09a.  v2:= "secp256r1" @kind object;
  #L40f09e.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f0a4.  v1:= `@@io.jsonwebtoken.SignatureAlgorithm.ES384` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40f0a8.  v2:= "secp384r1" @kind object;
  #L40f0ac.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f0b2.  v1:= `@@io.jsonwebtoken.SignatureAlgorithm.ES512` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40f0b6.  v2:= "secp521r1" @kind object;
  #L40f0ba.  call temp:= `put`(v0, v1, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f0c0.  return v0 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`() @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:()Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40ef84.  v0:= `@@io.jsonwebtoken.SignatureAlgorithm.ES512` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40ef88.  call temp:= `generateKeyPair`(v0) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Lio/jsonwebtoken/SignatureAlgorithm;)Ljava/security/KeyPair;` @kind static;
  #L40ef8e.  v0:= temp @kind object;
  #L40ef90.  return v0 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`(`io.jsonwebtoken.SignatureAlgorithm` v1 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Lio/jsonwebtoken/SignatureAlgorithm;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40efa4.  v0:= `@@io.jsonwebtoken.impl.crypto.a.DEFAULT_SECURE_RANDOM` @type ^`java.security.SecureRandom` @kind object;
  #L40efa8.  call temp:= `generateKeyPair`(v1, v0) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/SecureRandom;)Ljava/security/KeyPair;` @kind static;
  #L40efae.  v1:= temp @kind object;
  #L40efb0.  return v1 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`(`io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.SecureRandom` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/SecureRandom;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40efc4.  v0:= "ECDSA" @kind object;
  #L40efc8.  v1:= "BC" @kind object;
  #L40efcc.  call temp:= `generateKeyPair`(v0, v1, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Ljava/lang/String;Ljava/lang/String;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/SecureRandom;)Ljava/security/KeyPair;` @kind static;
  #L40efd2.  v2:= temp @kind object;
  #L40efd4.  return v2 @kind object;
}
procedure `java.security.KeyPair` `generateKeyPair`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `io.jsonwebtoken.SignatureAlgorithm` v4 @kind object, `java.security.SecureRandom` v5 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.generateKeyPair:(Ljava/lang/String;Ljava/lang/String;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/SecureRandom;)Ljava/security/KeyPair;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40efe8.  v0:= "SignatureAlgorithm argument cannot be null." @kind object;
  #L40efec.  call `notNull`(v4, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40eff2.  call temp:= `isEllipticCurve`(v4) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.isEllipticCurve:()Z` @kind virtual;
  #L40eff8.  v0:= temp;
  #L40effa.  v1:= "SignatureAlgorithm argument must represent an Elliptic Curve algorithm." @kind object;
  #L40effe.  call `isTrue`(v0, v1) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @kind static;
  #L40f004.  call temp:= `getInstance`(v2, v3) @signature `Ljava/security/KeyPairGenerator;.getInstance:(Ljava/lang/String;Ljava/lang/String;)Ljava/security/KeyPairGenerator;` @kind static;
  #L40f00a.  v2:= temp @kind object;
  #L40f00c.  v3:= `@@io.jsonwebtoken.impl.crypto.EllipticCurveProvider.a` @type ^`java.util.Map` @kind object;
  #L40f010.  call temp:= `get`(v3, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L40f016.  v3:= temp @kind object;
  #L40f018.  v3:= (`java.lang.String`) v3 @kind object;
  #L40f01c.  call temp:= `getParameterSpec`(v3) @signature `Lorg/bouncycastle/jce/ECNamedCurveTable;.getParameterSpec:(Ljava/lang/String;)Lorg/bouncycastle/jce/spec/ECNamedCurveParameterSpec;` @kind static;
  #L40f022.  v3:= temp @kind object;
  #L40f024.  call `initialize`(v2, v3, v5) @signature `Ljava/security/KeyPairGenerator;.initialize:(Ljava/security/spec/AlgorithmParameterSpec;Ljava/security/SecureRandom;)V` @kind virtual;
  #L40f02a.  call temp:= `generateKeyPair`(v2) @signature `Ljava/security/KeyPairGenerator;.generateKeyPair:()Ljava/security/KeyPair;` @kind virtual;
  #L40f030.  v2:= temp @kind object;
  #L40f032.  return v2 @kind object;
  #L40f034.  v2:= Exception @type ^`java.lang.Exception` @kind object;
  #L40f036.  v3:= new `java.lang.IllegalStateException`;
  #L40f03a.  v4:= new `java.lang.StringBuilder`;
  #L40f03e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40f044.  v5:= "Unable to generate Elliptic Curve KeyPair: " @kind object;
  #L40f048.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f04e.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Exception;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40f054.  v5:= temp @kind object;
  #L40f056.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40f05c.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40f062.  v4:= temp @kind object;
  #L40f064.  call `<init>`(v3, v4, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40f06a.  throw v3;
  catch `java.lang.Exception` @[L40f004..L40f032] goto L40f034;
}
procedure `int` `getSignatureByteArrayLength`(`io.jsonwebtoken.SignatureAlgorithm` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.getSignatureByteArrayLength:(Lio/jsonwebtoken/SignatureAlgorithm;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40ef08.  v0:= `@@io.jsonwebtoken.impl.crypto.EllipticCurveProvider$a.a` @type ^`int`[] @kind object;
  #L40ef0c.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40ef12.  v1:= temp;
  #L40ef14.  v0:= v0[v1];
  #L40ef18.  v1:= 1I;
  #L40ef1a.  if v0 == v1 then goto L40ef6c;
  #L40ef1e.  v1:= 2I;
  #L40ef20.  if v0 == v1 then goto L40ef66;
  #L40ef24.  v1:= 3I;
  #L40ef26.  if v0 != v1 then goto L40ef30;
  #L40ef2a.  v3:= 132I;
  #L40ef2e.  return v3;
  #L40ef30.  v0:= new `io.jsonwebtoken.JwtException`;
  #L40ef34.  v1:= new `java.lang.StringBuilder`;
  #L40ef38.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40ef3e.  v2:= "Unsupported Algorithm: " @kind object;
  #L40ef42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ef48.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40ef4e.  v3:= temp @kind object;
  #L40ef50.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ef56.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40ef5c.  v3:= temp @kind object;
  #L40ef5e.  call `<init>`(v0, v3) @signature `Lio/jsonwebtoken/JwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40ef64.  throw v0;
  #L40ef66.  v3:= 96I;
  #L40ef6a.  return v3;
  #L40ef6c.  v3:= 64I;
  #L40ef70.  return v3;
}
procedure `byte`[] `transcodeSignatureToConcat`(`byte`[] v11 @kind object, `int` v12 ) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.transcodeSignatureToConcat:([BI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L40ecd0.  v0:= length @variable v11;
  #L40ecd2.  v1:= "Invalid ECDSA signature format" @kind object;
  #L40ecd6.  v2:= 8I;
  #L40ecda.  if v0 < v2 then goto L40eddc;
  #L40ecde.  v0:= 0I;
  #L40ece0.  v0:= v11[v0] @kind byte;
  #L40ece4.  v2:= 48I;
  #L40ece8.  if v0 != v2 then goto L40eddc;
  #L40ecec.  v0:= 1I;
  #L40ecee.  v2:= v11[v0] @kind byte;
  #L40ecf2.  v3:= 2I;
  #L40ecf4.  if v2 <= 0 then goto L40ecfc;
  #L40ecf8.  v0:= 2I;
  #L40ecfa.  goto L40ed0a;
  #L40ecfc.  v0:= v11[v0] @kind byte;
  #L40ed00.  v2:= -127I;
  #L40ed04.  if v0 != v2 then goto L40edd0;
  #L40ed08.  v0:= 3I;
  #L40ed0a.  v2:= v0 + 1;
  #L40ed0e.  v2:= v11[v2] @kind byte;
  #L40ed12.  v4:= v2;
  #L40ed14.  if v4 <= 0 then goto L40ed2e;
  #L40ed18.  v5:= v0 + 2;
  #L40ed1c.  v5:= v5 + v2 @kind int;
  #L40ed1e.  v5:= v5 - v4 @kind int;
  #L40ed20.  v5:= v11[v5] @kind byte;
  #L40ed24.  if v5 != 0 then goto L40ed2e;
  #L40ed28.  v4:= v4 + -1;
  #L40ed2c.  goto L40ed14;
  #L40ed2e.  v5:= v0 + 2;
  #L40ed32.  v5:= v5 + v2 @kind int;
  #L40ed34.  v6:= v5 + 1;
  #L40ed38.  v6:= v11[v6] @kind byte;
  #L40ed3c.  v7:= v6;
  #L40ed3e.  if v7 <= 0 then goto L40ed58;
  #L40ed42.  v8:= v5 + 2;
  #L40ed46.  v8:= v8 + v6 @kind int;
  #L40ed48.  v8:= v8 - v7 @kind int;
  #L40ed4a.  v8:= v11[v8] @kind byte;
  #L40ed4e.  if v8 != 0 then goto L40ed58;
  #L40ed52.  v7:= v7 + -1;
  #L40ed56.  goto L40ed3e;
  #L40ed58.  call temp:= `max`(v4, v7) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L40ed5e.  v8:= temp;
  #L40ed60.  v12:= v12 / v3 @kind int;
  #L40ed62.  call temp:= `max`(v8, v12) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L40ed68.  v12:= temp;
  #L40ed6a.  v8:= v0 + -1;
  #L40ed6e.  v9:= v11[v8] @kind byte;
  #L40ed72.  v9:= v9 ^& 255;
  #L40ed76.  v10:= length @variable v11;
  #L40ed78.  v10:= v10 - v0 @kind int;
  #L40ed7a.  if v9 != v10 then goto L40edc4;
  #L40ed7e.  v8:= v11[v8] @kind byte;
  #L40ed82.  v8:= v8 ^& 255;
  #L40ed86.  v2:= v2 + v3 @kind int;
  #L40ed88.  v2:= v2 + v3 @kind int;
  #L40ed8a.  v2:= v2 + v6 @kind int;
  #L40ed8c.  if v8 != v2 then goto L40edc4;
  #L40ed90.  v0:= v11[v0] @kind byte;
  #L40ed94.  if v0 != v3 then goto L40edc4;
  #L40ed98.  v0:= v11[v5] @kind byte;
  #L40ed9c.  if v0 != v3 then goto L40edc4;
  #L40eda0.  v0:= v12 * 2;
  #L40eda4.  v1:= new `byte`[v0];
  #L40eda8.  v2:= v5 - v4 @kind int;
  #L40edac.  v12:= v12 - v4 @kind int;
  #L40edae.  call `arraycopy`(v11, v2, v1, v12, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40edb4.  v5:= v5 + v3 @kind int;
  #L40edb6.  v5:= v5 + v6 @kind int;
  #L40edb8.  v5:= v5 - v7 @kind int;
  #L40edba.  v0:= v0 - v7 @kind int;
  #L40edbc.  call `arraycopy`(v11, v5, v1, v0, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40edc2.  return v1 @kind object;
  #L40edc4.  v11:= new `io.jsonwebtoken.JwtException`;
  #L40edc8.  call `<init>`(v11, v1) @signature `Lio/jsonwebtoken/JwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40edce.  throw v11;
  #L40edd0.  v11:= new `io.jsonwebtoken.JwtException`;
  #L40edd4.  call `<init>`(v11, v1) @signature `Lio/jsonwebtoken/JwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40edda.  throw v11;
  #L40eddc.  v11:= new `io.jsonwebtoken.JwtException`;
  #L40ede0.  call `<init>`(v11, v1) @signature `Lio/jsonwebtoken/JwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40ede6.  throw v11;
}
procedure `byte`[] `transcodeSignatureToDER`(`byte`[] v12 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveProvider;.transcodeSignatureToDER:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L40edf8.  v0:= length @variable v12;
  #L40edfa.  v1:= 2I;
  #L40edfc.  v0:= v0 / v1 @kind int;
  #L40edfe.  v2:= v0;
  #L40ee00.  if v2 <= 0 then goto L40ee16;
  #L40ee04.  v3:= v0 - v2 @kind int;
  #L40ee08.  v3:= v12[v3] @kind byte;
  #L40ee0c.  if v3 != 0 then goto L40ee16;
  #L40ee10.  v2:= v2 + -1;
  #L40ee14.  goto L40ee00;
  #L40ee16.  v3:= v0 - v2 @kind int;
  #L40ee1a.  v4:= v12[v3] @kind byte;
  #L40ee1e.  if v4 >= 0 then goto L40ee28;
  #L40ee22.  v4:= v2 + 1;
  #L40ee26.  goto L40ee2a;
  #L40ee28.  v4:= v2;
  #L40ee2a.  v5:= v0;
  #L40ee2c.  if v5 <= 0 then goto L40ee44;
  #L40ee30.  v6:= v0 * 2;
  #L40ee34.  v6:= v6 - v5 @kind int;
  #L40ee36.  v6:= v12[v6] @kind byte;
  #L40ee3a.  if v6 != 0 then goto L40ee44;
  #L40ee3e.  v5:= v5 + -1;
  #L40ee42.  goto L40ee2c;
  #L40ee44.  v0:= v0 * 2;
  #L40ee48.  v0:= v0 - v5 @kind int;
  #L40ee4a.  v6:= v12[v0] @kind byte;
  #L40ee4e.  if v6 >= 0 then goto L40ee58;
  #L40ee52.  v6:= v5 + 1;
  #L40ee56.  goto L40ee5a;
  #L40ee58.  v6:= v5;
  #L40ee5a.  v7:= v4 + 2;
  #L40ee5e.  v7:= v7 + v1 @kind int;
  #L40ee60.  v7:= v7 + v6 @kind int;
  #L40ee62.  v8:= 255I;
  #L40ee66.  if v7 > v8 then goto L40eee8;
  #L40ee6a.  v8:= 128I;
  #L40ee6e.  v9:= 1I;
  #L40ee70.  if v7 >= v8 then goto L40ee82;
  #L40ee74.  v8:= v4 + 4;
  #L40ee78.  v8:= v8 + v1 @kind int;
  #L40ee7a.  v8:= v8 + v6 @kind int;
  #L40ee7c.  v8:= new `byte`[v8];
  #L40ee80.  goto L40ee98;
  #L40ee82.  v8:= v4 + 5;
  #L40ee86.  v8:= v8 + v1 @kind int;
  #L40ee88.  v8:= v8 + v6 @kind int;
  #L40ee8a.  v8:= new `byte`[v8];
  #L40ee8e.  v10:= -127I;
  #L40ee92.  v8[v9]:= v10 @kind byte;
  #L40ee96.  v9:= 2I;
  #L40ee98.  v10:= 0I;
  #L40ee9a.  v11:= 48I;
  #L40ee9e.  v8[v10]:= v11 @kind byte;
  #L40eea2.  v10:= v9 + 1;
  #L40eea6.  v7:= (`byte`) v7 @kind i2b;
  #L40eea8.  v8[v9]:= v7 @kind byte;
  #L40eeac.  v7:= v10 + 1;
  #L40eeb0.  v8[v10]:= v1 @kind byte;
  #L40eeb4.  v9:= v7 + 1;
  #L40eeb8.  v10:= (`byte`) v4 @kind i2b;
  #L40eeba.  v8[v7]:= v10 @kind byte;
  #L40eebe.  v9:= v9 + v4 @kind int;
  #L40eec0.  v4:= v9 - v2 @kind int;
  #L40eec4.  call `arraycopy`(v12, v3, v8, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40eeca.  v2:= v9 + 1;
  #L40eece.  v8[v9]:= v1 @kind byte;
  #L40eed2.  v1:= v2 + 1;
  #L40eed6.  v3:= (`byte`) v6 @kind i2b;
  #L40eed8.  v8[v2]:= v3 @kind byte;
  #L40eedc.  v1:= v1 + v6 @kind int;
  #L40eede.  v1:= v1 - v5 @kind int;
  #L40eee0.  call `arraycopy`(v12, v0, v8, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L40eee6.  return v8 @kind object;
  #L40eee8.  v12:= new `io.jsonwebtoken.JwtException`;
  #L40eeec.  v0:= "Invalid ECDSA signature format" @kind object;
  #L40eef0.  call `<init>`(v12, v0) @signature `Lio/jsonwebtoken/JwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40eef6.  throw v12;
}
