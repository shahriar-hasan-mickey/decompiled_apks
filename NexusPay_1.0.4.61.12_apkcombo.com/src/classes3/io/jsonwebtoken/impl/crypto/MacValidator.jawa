record `io.jsonwebtoken.impl.crypto.MacValidator` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.SignatureValidator` @kind interface {
  `io.jsonwebtoken.impl.crypto.MacSigner` `io.jsonwebtoken.impl.crypto.MacValidator.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.MacValidator` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/MacValidator;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40f6d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40f6de.  v0:= new `io.jsonwebtoken.impl.crypto.MacSigner`;
  #L40f6e2.  call `<init>`(v0, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/MacSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40f6e8.  v1.`io.jsonwebtoken.impl.crypto.MacValidator.a` @type ^`io.jsonwebtoken.impl.crypto.MacSigner` := v0 @kind object;
  #L40f6ec.  return @kind void;
}
procedure `boolean` `isValid`(`io.jsonwebtoken.impl.crypto.MacValidator` v1 @kind this, `byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/MacValidator;.isValid:([B[B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40f6b0.  v0:= v1.`io.jsonwebtoken.impl.crypto.MacValidator.a` @type ^`io.jsonwebtoken.impl.crypto.MacSigner` @kind object;
  #L40f6b4.  call temp:= `sign`(v0, v2) @signature `Lio/jsonwebtoken/impl/crypto/MacSigner;.sign:([B)[B` @kind virtual;
  #L40f6ba.  v2:= temp @kind object;
  #L40f6bc.  call temp:= `isEqual`(v2, v3) @signature `Ljava/security/MessageDigest;.isEqual:([B[B)Z` @kind static;
  #L40f6c2.  v2:= temp;
  #L40f6c4.  return v2;
}
