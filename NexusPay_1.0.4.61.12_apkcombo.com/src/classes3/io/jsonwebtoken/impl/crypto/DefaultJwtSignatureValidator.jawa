record `io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.JwtSignatureValidator` @kind interface {
  `io.jsonwebtoken.impl.crypto.SignatureValidator` `io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.a` @AccessFlag PRIVATE_FINAL;
}
global `java.nio.charset.Charset` `@@io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSignatureValidator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e57c.  v0:= "US-ASCII" @kind object;
  #L40e580.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L40e586.  v0:= temp @kind object;
  #L40e588.  `@@io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.b` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L40e58c.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSignatureValidator;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e5a0.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultSignatureValidatorFactory.INSTANCE` @type ^`io.jsonwebtoken.impl.crypto.SignatureValidatorFactory` @kind object;
  #L40e5a4.  call `<init>`(v1, v0, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSignatureValidator;.<init>:(Lio/jsonwebtoken/impl/crypto/SignatureValidatorFactory;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40e5aa.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator` v1 @kind this, `io.jsonwebtoken.impl.crypto.SignatureValidatorFactory` v2 @kind object, `io.jsonwebtoken.SignatureAlgorithm` v3 @kind object, `java.security.Key` v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSignatureValidator;.<init>:(Lio/jsonwebtoken/impl/crypto/SignatureValidatorFactory;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e5bc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e5c2.  v0:= "SignerFactory argument cannot be null." @kind object;
  #L40e5c6.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e5cc.  call temp:= `createSignatureValidator`(v2, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/SignatureValidatorFactory;.createSignatureValidator:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)Lio/jsonwebtoken/impl/crypto/SignatureValidator;` @kind interface;
  #L40e5d2.  v2:= temp @kind object;
  #L40e5d4.  v1.`io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.a` @type ^`io.jsonwebtoken.impl.crypto.SignatureValidator` := v2 @kind object;
  #L40e5d8.  return @kind void;
}
procedure `boolean` `isValid`(`io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSignatureValidator;.isValid:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e544.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.b` @type ^`java.nio.charset.Charset` @kind object;
  #L40e548.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L40e54e.  v2:= temp @kind object;
  #L40e550.  v0:= `@@io.jsonwebtoken.impl.TextCodec.BASE64URL` @type ^`io.jsonwebtoken.impl.TextCodec` @kind object;
  #L40e554.  call temp:= `decode`(v0, v3) @signature `Lio/jsonwebtoken/impl/TextCodec;.decode:(Ljava/lang/String;)[B` @kind interface;
  #L40e55a.  v3:= temp @kind object;
  #L40e55c.  v0:= v1.`io.jsonwebtoken.impl.crypto.DefaultJwtSignatureValidator.a` @type ^`io.jsonwebtoken.impl.crypto.SignatureValidator` @kind object;
  #L40e560.  call temp:= `isValid`(v0, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/SignatureValidator;.isValid:([B[B)Z` @kind interface;
  #L40e566.  v2:= temp;
  #L40e568.  return v2;
}
