record `io.jsonwebtoken.impl.crypto.DefaultSignerFactory` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.SignerFactory` @kind interface {
}
global `io.jsonwebtoken.impl.crypto.SignerFactory` `@@io.jsonwebtoken.impl.crypto.DefaultSignerFactory.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignerFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40ec0c.  v0:= new `io.jsonwebtoken.impl.crypto.DefaultSignerFactory`;
  #L40ec10.  call `<init>`(v0) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignerFactory;.<init>:()V` @kind direct;
  #L40ec16.  `@@io.jsonwebtoken.impl.crypto.DefaultSignerFactory.INSTANCE` @type ^`io.jsonwebtoken.impl.crypto.SignerFactory` := v0 @kind object;
  #L40ec1a.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultSignerFactory` v0 @kind this) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignerFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40ec2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40ec32.  return @kind void;
}
procedure `io.jsonwebtoken.impl.crypto.Signer` `createSigner`(`io.jsonwebtoken.impl.crypto.DefaultSignerFactory` v2 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v3 @kind object, `java.security.Key` v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultSignerFactory;.createSigner:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)Lio/jsonwebtoken/impl/crypto/Signer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L40eb34.  v0:= "SignatureAlgorithm cannot be null." @kind object;
  #L40eb38.  call `notNull`(v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40eb3e.  v0:= "Signing Key cannot be null." @kind object;
  #L40eb42.  call `notNull`(v4, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40eb48.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultSignerFactory$a.a` @type ^`int`[] @kind object;
  #L40eb4c.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L40eb52.  v1:= temp;
  #L40eb54.  v0:= v0[v1];
  #L40eb58.  goto L40ebc4;
  #L40eb5e.  v4:= new `java.lang.IllegalArgumentException`;
  #L40eb62.  v0:= new `java.lang.StringBuilder`;
  #L40eb66.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40eb6c.  v1:= "The '" @kind object;
  #L40eb70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40eb76.  call temp:= `name`(v3) @signature `Ljava/lang/Enum;.name:()Ljava/lang/String;` @kind virtual;
  #L40eb7c.  v3:= temp @kind object;
  #L40eb7e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40eb84.  v3:= "' algorithm cannot be used for signing." @kind object;
  #L40eb88.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40eb8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40eb94.  v3:= temp @kind object;
  #L40eb96.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40eb9c.  throw v4;
  #L40eb9e.  v0:= new `io.jsonwebtoken.impl.crypto.EllipticCurveSigner`;
  #L40eba2.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/EllipticCurveSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40eba8.  return v0 @kind object;
  #L40ebaa.  v0:= new `io.jsonwebtoken.impl.crypto.RsaSigner`;
  #L40ebae.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/RsaSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40ebb4.  return v0 @kind object;
  #L40ebb6.  v0:= new `io.jsonwebtoken.impl.crypto.MacSigner`;
  #L40ebba.  call `<init>`(v0, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/MacSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40ebc0.  return v0 @kind object;
  #L40ebc2.  
  #L40ebc4.  switch v0
                  | 1 => goto L40ebb6
                  | 2 => goto L40ebb6
                  | 3 => goto L40ebb6
                  | 4 => goto L40ebaa
                  | 5 => goto L40ebaa
                  | 6 => goto L40ebaa
                  | 7 => goto L40ebaa
                  | 8 => goto L40ebaa
                  | 9 => goto L40ebaa
                  | 10 => goto L40eb9e
                  | 11 => goto L40eb9e
                  | 12 => goto L40eb9e
                  | else => goto L40eb5e;
}
