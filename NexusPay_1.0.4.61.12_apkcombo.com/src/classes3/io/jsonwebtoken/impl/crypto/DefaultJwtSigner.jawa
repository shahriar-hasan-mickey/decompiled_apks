record `io.jsonwebtoken.impl.crypto.DefaultJwtSigner` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.JwtSigner` @kind interface {
  `io.jsonwebtoken.impl.crypto.Signer` `io.jsonwebtoken.impl.crypto.DefaultJwtSigner.a` @AccessFlag PRIVATE_FINAL;
}
global `java.nio.charset.Charset` `@@io.jsonwebtoken.impl.crypto.DefaultJwtSigner.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSigner;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e624.  v0:= "US-ASCII" @kind object;
  #L40e628.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L40e62e.  v0:= temp @kind object;
  #L40e630.  `@@io.jsonwebtoken.impl.crypto.DefaultJwtSigner.b` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L40e634.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultJwtSigner` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e648.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultSignerFactory.INSTANCE` @type ^`io.jsonwebtoken.impl.crypto.SignerFactory` @kind object;
  #L40e64c.  call `<init>`(v1, v0, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSigner;.<init>:(Lio/jsonwebtoken/impl/crypto/SignerFactory;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40e652.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.DefaultJwtSigner` v1 @kind this, `io.jsonwebtoken.impl.crypto.SignerFactory` v2 @kind object, `io.jsonwebtoken.SignatureAlgorithm` v3 @kind object, `java.security.Key` v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSigner;.<init>:(Lio/jsonwebtoken/impl/crypto/SignerFactory;Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40e664.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40e66a.  v0:= "SignerFactory argument cannot be null." @kind object;
  #L40e66e.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40e674.  call temp:= `createSigner`(v2, v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/SignerFactory;.createSigner:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)Lio/jsonwebtoken/impl/crypto/Signer;` @kind interface;
  #L40e67a.  v2:= temp @kind object;
  #L40e67c.  v1.`io.jsonwebtoken.impl.crypto.DefaultJwtSigner.a` @type ^`io.jsonwebtoken.impl.crypto.Signer` := v2 @kind object;
  #L40e680.  return @kind void;
}
procedure `java.lang.String` `sign`(`io.jsonwebtoken.impl.crypto.DefaultJwtSigner` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/DefaultJwtSigner;.sign:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40e5ec.  v0:= `@@io.jsonwebtoken.impl.crypto.DefaultJwtSigner.b` @type ^`java.nio.charset.Charset` @kind object;
  #L40e5f0.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L40e5f6.  v2:= temp @kind object;
  #L40e5f8.  v0:= v1.`io.jsonwebtoken.impl.crypto.DefaultJwtSigner.a` @type ^`io.jsonwebtoken.impl.crypto.Signer` @kind object;
  #L40e5fc.  call temp:= `sign`(v0, v2) @signature `Lio/jsonwebtoken/impl/crypto/Signer;.sign:([B)[B` @kind interface;
  #L40e602.  v2:= temp @kind object;
  #L40e604.  v0:= `@@io.jsonwebtoken.impl.TextCodec.BASE64URL` @type ^`io.jsonwebtoken.impl.TextCodec` @kind object;
  #L40e608.  call temp:= `encode`(v0, v2) @signature `Lio/jsonwebtoken/impl/TextCodec;.encode:([B)Ljava/lang/String;` @kind interface;
  #L40e60e.  v2:= temp @kind object;
  #L40e610.  return v2 @kind object;
}
