record `io.jsonwebtoken.impl.crypto.a` @kind class @AccessFlag ABSTRACT {
  `io.jsonwebtoken.SignatureAlgorithm` `io.jsonwebtoken.impl.crypto.a.alg` @AccessFlag PROTECTED_FINAL;
  `java.security.Key` `io.jsonwebtoken.impl.crypto.a.key` @AccessFlag PROTECTED_FINAL;
}
global `java.security.SecureRandom` `@@io.jsonwebtoken.impl.crypto.a.DEFAULT_SECURE_RANDOM` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/impl/crypto/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L40fce8.  v0:= new `java.security.SecureRandom`;
  #L40fcec.  call `<init>`(v0) @signature `Ljava/security/SecureRandom;.<init>:()V` @kind direct;
  #L40fcf2.  `@@io.jsonwebtoken.impl.crypto.a.DEFAULT_SECURE_RANDOM` @type ^`java.security.SecureRandom` := v0 @kind object;
  #L40fcf6.  v1:= 64I;
  #L40fcfa.  v1:= new `byte`[v1];
  #L40fcfe.  call `nextBytes`(v0, v1) @signature `Ljava/security/SecureRandom;.nextBytes:([B)V` @kind virtual;
  #L40fd04.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.a` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/a;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L40fd18.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40fd1e.  v0:= "SignatureAlgorithm cannot be null." @kind object;
  #L40fd22.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40fd28.  v0:= "Key cannot be null." @kind object;
  #L40fd2c.  call `notNull`(v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40fd32.  v1.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` := v2 @kind object;
  #L40fd36.  v1.`io.jsonwebtoken.impl.crypto.a.key` @type ^`java.security.Key` := v3 @kind object;
  #L40fd3a.  return @kind void;
}
procedure `java.security.Signature` `createSignatureInstance`(`io.jsonwebtoken.impl.crypto.a` v3 @kind this) @signature `Lio/jsonwebtoken/impl/crypto/a;.createSignatureInstance:()Ljava/security/Signature;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L40fbf4.  call temp:= `getSignatureInstance`(v3) @signature `Lio/jsonwebtoken/impl/crypto/a;.getSignatureInstance:()Ljava/security/Signature;` @kind virtual;
  #L40fbfa.  v0:= temp @kind object;
  #L40fbfc.  return v0 @kind object;
  #L40fbfe.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L40fc00.  v1:= new `java.lang.StringBuilder`;
  #L40fc04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40fc0a.  v2:= "Unavailable " @kind object;
  #L40fc0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc14.  v2:= v3.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40fc18.  call temp:= `getFamilyName`(v2) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.getFamilyName:()Ljava/lang/String;` @kind virtual;
  #L40fc1e.  v2:= temp @kind object;
  #L40fc20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc26.  v2:= " Signature algorithm '" @kind object;
  #L40fc2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc30.  v2:= v3.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40fc34.  call temp:= `getJcaName`(v2) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.getJcaName:()Ljava/lang/String;` @kind virtual;
  #L40fc3a.  v2:= temp @kind object;
  #L40fc3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc42.  v2:= "'." @kind object;
  #L40fc46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fc52.  v1:= temp @kind object;
  #L40fc54.  v2:= v3.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40fc58.  call temp:= `isJdkStandard`(v2) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.isJdkStandard:()Z` @kind virtual;
  #L40fc5e.  v2:= temp;
  #L40fc60.  if v2 != 0 then goto L40fc92;
  #L40fc64.  call temp:= `isBouncyCastleAvailable`(v3) @signature `Lio/jsonwebtoken/impl/crypto/a;.isBouncyCastleAvailable:()Z` @kind virtual;
  #L40fc6a.  v2:= temp;
  #L40fc6c.  if v2 != 0 then goto L40fc92;
  #L40fc70.  v2:= new `java.lang.StringBuilder`;
  #L40fc74.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40fc7a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc80.  v1:= " This is not a standard JDK algorithm. Try including BouncyCastle in the runtime classpath." @kind object;
  #L40fc84.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fc8a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fc90.  v1:= temp @kind object;
  #L40fc92.  v2:= new `io.jsonwebtoken.SignatureException`;
  #L40fc96.  call `<init>`(v2, v1, v0) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40fc9c.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L40fbf4..L40fbfc] goto L40fbfe;
}
procedure `java.security.Signature` `getSignatureInstance`(`io.jsonwebtoken.impl.crypto.a` v1 @kind this) @signature `Lio/jsonwebtoken/impl/crypto/a;.getSignatureInstance:()Ljava/security/Signature;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L40fcc0.  v0:= v1.`io.jsonwebtoken.impl.crypto.a.alg` @type ^`io.jsonwebtoken.SignatureAlgorithm` @kind object;
  #L40fcc4.  call temp:= `getJcaName`(v0) @signature `Lio/jsonwebtoken/SignatureAlgorithm;.getJcaName:()Ljava/lang/String;` @kind virtual;
  #L40fcca.  v0:= temp @kind object;
  #L40fccc.  call temp:= `getInstance`(v0) @signature `Ljava/security/Signature;.getInstance:(Ljava/lang/String;)Ljava/security/Signature;` @kind static;
  #L40fcd2.  v0:= temp @kind object;
  #L40fcd4.  return v0 @kind object;
}
procedure `boolean` `isBouncyCastleAvailable`(`io.jsonwebtoken.impl.crypto.a` v1 @kind this) @signature `Lio/jsonwebtoken/impl/crypto/a;.isBouncyCastleAvailable:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L40fbdc.  v0:= `@@io.jsonwebtoken.lang.RuntimeEnvironment.BOUNCY_CASTLE_AVAILABLE` @type ^`boolean` @kind boolean;
  #L40fbe0.  return v0;
}
