record `io.jsonwebtoken.impl.crypto.RsaSigner` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.crypto.RsaProvider` @kind class, `io.jsonwebtoken.impl.crypto.Signer` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.crypto.RsaSigner` v1 @kind this, `io.jsonwebtoken.SignatureAlgorithm` v2 @kind object, `java.security.Key` v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/RsaSigner;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L40fb6c.  call `<init>`(v1, v2, v3) @signature `Lio/jsonwebtoken/impl/crypto/RsaProvider;.<init>:(Lio/jsonwebtoken/SignatureAlgorithm;Ljava/security/Key;)V` @kind direct;
  #L40fb72.  v2:= instanceof @variable v3 @type ^`java.security.PrivateKey` @kind boolean;
  #L40fb76.  if v2 == 0 then goto L40fb84;
  #L40fb7a.  v2:= instanceof @variable v3 @type ^`java.security.interfaces.RSAKey` @kind boolean;
  #L40fb7e.  if v2 == 0 then goto L40fb84;
  #L40fb82.  return @kind void;
  #L40fb84.  v2:= new `java.lang.StringBuilder`;
  #L40fb88.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40fb8e.  v0:= "RSA signatures must be computed using an RSA PrivateKey.  The specified key of type " @kind object;
  #L40fb92.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fb98.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L40fb9e.  v3:= temp @kind object;
  #L40fba0.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L40fba6.  v3:= temp @kind object;
  #L40fba8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fbae.  v3:= " is not an RSA PrivateKey." @kind object;
  #L40fbb2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fbb8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fbbe.  v2:= temp @kind object;
  #L40fbc0.  v3:= new `java.lang.IllegalArgumentException`;
  #L40fbc4.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fbca.  throw v3;
}
procedure `byte`[] `doSign`(`io.jsonwebtoken.impl.crypto.RsaSigner` v2 @kind this, `byte`[] v3 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/RsaSigner;.doSign:([B)[B` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L40fa98.  v0:= v2.`io.jsonwebtoken.impl.crypto.a.key` @type ^`java.security.Key` @kind object;
  #L40fa9c.  v0:= (`java.security.PrivateKey`) v0 @kind object;
  #L40faa0.  call temp:= `createSignatureInstance`(v2) @signature `Lio/jsonwebtoken/impl/crypto/RsaProvider;.createSignatureInstance:()Ljava/security/Signature;` @kind virtual;
  #L40faa6.  v1:= temp @kind object;
  #L40faa8.  call `initSign`(v1, v0) @signature `Ljava/security/Signature;.initSign:(Ljava/security/PrivateKey;)V` @kind virtual;
  #L40faae.  call `update`(v1, v3) @signature `Ljava/security/Signature;.update:([B)V` @kind virtual;
  #L40fab4.  call temp:= `sign`(v1) @signature `Ljava/security/Signature;.sign:()[B` @kind virtual;
  #L40faba.  v3:= temp @kind object;
  #L40fabc.  return v3 @kind object;
}
procedure `byte`[] `sign`(`io.jsonwebtoken.impl.crypto.RsaSigner` v3 @kind this, `byte`[] v4 @kind object) @signature `Lio/jsonwebtoken/impl/crypto/RsaSigner;.sign:([B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L40fad0.  call temp:= `doSign`(v3, v4) @signature `Lio/jsonwebtoken/impl/crypto/RsaSigner;.doSign:([B)[B` @kind virtual;
  #L40fad6.  v4:= temp @kind object;
  #L40fad8.  return v4 @kind object;
  #L40fada.  v4:= Exception @type ^`java.security.SignatureException` @kind object;
  #L40fadc.  v0:= new `io.jsonwebtoken.SignatureException`;
  #L40fae0.  v1:= new `java.lang.StringBuilder`;
  #L40fae4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40faea.  v2:= "Unable to calculate signature using RSA PrivateKey. " @kind object;
  #L40faee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40faf4.  call temp:= `getMessage`(v4) @signature `Ljava/security/SignatureException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40fafa.  v2:= temp @kind object;
  #L40fafc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fb02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fb08.  v1:= temp @kind object;
  #L40fb0a.  call `<init>`(v0, v1, v4) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40fb10.  throw v0;
  #L40fb12.  v4:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L40fb14.  v0:= new `io.jsonwebtoken.SignatureException`;
  #L40fb18.  v1:= new `java.lang.StringBuilder`;
  #L40fb1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40fb22.  v2:= "Invalid RSA PrivateKey. " @kind object;
  #L40fb26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fb2c.  call temp:= `getMessage`(v4) @signature `Ljava/security/InvalidKeyException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L40fb32.  v2:= temp @kind object;
  #L40fb34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fb3a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fb40.  v1:= temp @kind object;
  #L40fb42.  call `<init>`(v0, v1, v4) @signature `Lio/jsonwebtoken/SignatureException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L40fb48.  throw v0;
  catch `java.security.InvalidKeyException` @[L40fad0..L40fad8] goto L40fb12;
  catch `java.security.SignatureException` @[L40fad0..L40fad8] goto L40fada;
}
