record `io.jsonwebtoken.impl.Base64Codec` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.impl.AbstractTextCodec` @kind class {
}
procedure `void` `<init>`(`io.jsonwebtoken.impl.Base64Codec` v0 @kind this) @signature `Lio/jsonwebtoken/impl/Base64Codec;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40bdbc.  call `<init>`(v0) @signature `Lio/jsonwebtoken/impl/AbstractTextCodec;.<init>:()V` @kind direct;
  #L40bdc2.  return @kind void;
}
procedure `byte`[] `decode`(`io.jsonwebtoken.impl.Base64Codec` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/impl/Base64Codec;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC {
    temp;

  #L40bd84.  call temp:= `parseBase64Binary`(v1) @signature `Ljavax/xml/bind/DatatypeConverter;.parseBase64Binary:(Ljava/lang/String;)[B` @kind static;
  #L40bd8a.  v1:= temp @kind object;
  #L40bd8c.  return v1 @kind object;
}
procedure `java.lang.String` `encode`(`io.jsonwebtoken.impl.Base64Codec` v0 @kind this, `byte`[] v1 @kind object) @signature `Lio/jsonwebtoken/impl/Base64Codec;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L40bda0.  call temp:= `printBase64Binary`(v1) @signature `Ljavax/xml/bind/DatatypeConverter;.printBase64Binary:([B)Ljava/lang/String;` @kind static;
  #L40bda6.  v1:= temp @kind object;
  #L40bda8.  return v1 @kind object;
}
