record `io.jsonwebtoken.JwtHandlerAdapter` @kind class @AccessFlag PUBLIC extends `io.jsonwebtoken.JwtHandler` @kind interface {
}
procedure `void` `<init>`(`io.jsonwebtoken.JwtHandlerAdapter` v0 @kind this) @signature `Lio/jsonwebtoken/JwtHandlerAdapter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L40b47c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40b482.  return @kind void;
}
procedure `java.lang.Object` `onClaimsJws`(`io.jsonwebtoken.JwtHandlerAdapter` v1 @kind this, `io.jsonwebtoken.Jws` v2 @kind object) @signature `Lio/jsonwebtoken/JwtHandlerAdapter;.onClaimsJws:(Lio/jsonwebtoken/Jws;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b3fc.  v2:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40b400.  v0:= "Signed Claims JWSs are not supported." @kind object;
  #L40b404.  call `<init>`(v2, v0) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40b40a.  throw v2;
}
procedure `java.lang.Object` `onClaimsJwt`(`io.jsonwebtoken.JwtHandlerAdapter` v1 @kind this, `io.jsonwebtoken.Jwt` v2 @kind object) @signature `Lio/jsonwebtoken/JwtHandlerAdapter;.onClaimsJwt:(Lio/jsonwebtoken/Jwt;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b41c.  v2:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40b420.  v0:= "Unsigned Claims JWTs are not supported." @kind object;
  #L40b424.  call `<init>`(v2, v0) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40b42a.  throw v2;
}
procedure `java.lang.Object` `onPlaintextJws`(`io.jsonwebtoken.JwtHandlerAdapter` v1 @kind this, `io.jsonwebtoken.Jws` v2 @kind object) @signature `Lio/jsonwebtoken/JwtHandlerAdapter;.onPlaintextJws:(Lio/jsonwebtoken/Jws;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b43c.  v2:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40b440.  v0:= "Signed plaintext JWSs are not supported." @kind object;
  #L40b444.  call `<init>`(v2, v0) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40b44a.  throw v2;
}
procedure `java.lang.Object` `onPlaintextJwt`(`io.jsonwebtoken.JwtHandlerAdapter` v1 @kind this, `io.jsonwebtoken.Jwt` v2 @kind object) @signature `Lio/jsonwebtoken/JwtHandlerAdapter;.onPlaintextJwt:(Lio/jsonwebtoken/Jwt;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L40b45c.  v2:= new `io.jsonwebtoken.UnsupportedJwtException`;
  #L40b460.  v0:= "Unsigned plaintext JWTs are not supported." @kind object;
  #L40b464.  call `<init>`(v2, v0) @signature `Lio/jsonwebtoken/UnsupportedJwtException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40b46a.  throw v2;
}
