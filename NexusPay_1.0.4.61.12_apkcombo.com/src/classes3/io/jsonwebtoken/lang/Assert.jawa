record `io.jsonwebtoken.lang.Assert` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/lang/Assert;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L40fdb8.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.lang.Assert` v0 @kind this) @signature `Lio/jsonwebtoken/lang/Assert;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L40fdcc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40fdd2.  return @kind void;
}
procedure `void` `doesNotContain`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.doesNotContain:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40fde4.  v0:= new `java.lang.StringBuilder`;
  #L40fde8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40fdee.  v1:= "[Assertion failed] - this String argument must not contain the substring [" @kind object;
  #L40fdf2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fdf8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fdfe.  v1:= "]" @kind object;
  #L40fe02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fe08.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40fe0e.  v0:= temp @kind object;
  #L40fe10.  call `doesNotContain`(v2, v3, v0) @signature `Lio/jsonwebtoken/lang/Assert;.doesNotContain:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L40fe16.  return @kind void;
}
procedure `void` `doesNotContain`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.doesNotContain:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40fe28.  call temp:= `hasLength`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L40fe2e.  v0:= temp;
  #L40fe30.  if v0 == 0 then goto L40fe5c;
  #L40fe34.  call temp:= `hasLength`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L40fe3a.  v0:= temp;
  #L40fe3c.  if v0 == 0 then goto L40fe5c;
  #L40fe40.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L40fe46.  v1:= temp;
  #L40fe48.  v2:= -1I;
  #L40fe4a.  if v1 != v2 then goto L40fe50;
  #L40fe4e.  goto L40fe5c;
  #L40fe50.  v1:= new `java.lang.IllegalArgumentException`;
  #L40fe54.  call `<init>`(v1, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fe5a.  throw v1;
  #L40fe5c.  return @kind void;
}
procedure `void` `hasLength`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.hasLength:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40fe70.  v0:= "[Assertion failed] - this String argument must have length; it must not be null or empty" @kind object;
  #L40fe74.  call `hasLength`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.hasLength:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L40fe7a.  return @kind void;
}
procedure `void` `hasLength`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.hasLength:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L40fe8c.  call temp:= `hasLength`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L40fe92.  v0:= temp;
  #L40fe94.  if v0 == 0 then goto L40fe9a;
  #L40fe98.  return @kind void;
  #L40fe9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L40fe9e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40fea4.  throw v0;
}
procedure `void` `hasText`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.hasText:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40feb8.  v0:= "[Assertion failed] - this String argument must have text; it must not be null, empty, or blank" @kind object;
  #L40febc.  call `hasText`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.hasText:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L40fec2.  return @kind void;
}
procedure `void` `hasText`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.hasText:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L40fed4.  call temp:= `hasText`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/String;)Z` @kind static;
  #L40feda.  v0:= temp;
  #L40fedc.  if v0 == 0 then goto L40fee2;
  #L40fee0.  return @kind void;
  #L40fee2.  v0:= new `java.lang.IllegalArgumentException`;
  #L40fee6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40feec.  throw v0;
}
procedure `void` `isAssignable`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isAssignable:(Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40ff00.  v0:= "" @kind object;
  #L40ff04.  call `isAssignable`(v1, v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.isAssignable:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)V` @kind static;
  #L40ff0a.  return @kind void;
}
procedure `void` `isAssignable`(`java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isAssignable:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40ff1c.  v0:= "Type to check against must not be null" @kind object;
  #L40ff20.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40ff26.  if v3 == 0 then goto L40ff38;
  #L40ff2a.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L40ff30.  v0:= temp;
  #L40ff32.  if v0 == 0 then goto L40ff38;
  #L40ff36.  return @kind void;
  #L40ff38.  v0:= new `java.lang.IllegalArgumentException`;
  #L40ff3c.  v1:= new `java.lang.StringBuilder`;
  #L40ff40.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40ff46.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ff4c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ff52.  v3:= " is not assignable to " @kind object;
  #L40ff56.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ff5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ff62.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L40ff68.  v2:= temp @kind object;
  #L40ff6a.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40ff70.  throw v0;
}
procedure `void` `isInstanceOf`(`java.lang.Class` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isInstanceOf:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40ff84.  v0:= "" @kind object;
  #L40ff88.  call `isInstanceOf`(v1, v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.isInstanceOf:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40ff8e.  return @kind void;
}
procedure `void` `isInstanceOf`(`java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isInstanceOf:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40ffa0.  v0:= "Type to check against must not be null" @kind object;
  #L40ffa4.  call `notNull`(v2, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L40ffaa.  call temp:= `isInstance`(v2, v3) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L40ffb0.  v0:= temp;
  #L40ffb2.  if v0 != 0 then goto L410014;
  #L40ffb6.  v0:= new `java.lang.IllegalArgumentException`;
  #L40ffba.  v1:= new `java.lang.StringBuilder`;
  #L40ffbe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L40ffc4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ffca.  v4:= "Object of class [" @kind object;
  #L40ffce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40ffd4.  if v3 == 0 then goto L40ffea;
  #L40ffd8.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L40ffde.  v3:= temp @kind object;
  #L40ffe0.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L40ffe6.  v3:= temp @kind object;
  #L40ffe8.  goto L40ffee;
  #L40ffea.  v3:= "null" @kind object;
  #L40ffee.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fff4.  v3:= "] must be an instance of " @kind object;
  #L40fff8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40fffe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L410004.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41000a.  v2:= temp @kind object;
  #L41000c.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410012.  throw v0;
  #L410014.  return @kind void;
}
procedure `void` `isNull`(`java.lang.Object` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isNull:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410028.  v0:= "[Assertion failed] - the object argument must be null" @kind object;
  #L41002c.  call `isNull`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.isNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L410032.  return @kind void;
}
procedure `void` `isNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isNull:(Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L410044.  if v0 != 0 then goto L41004a;
  #L410048.  return @kind void;
  #L41004a.  v0:= new `java.lang.IllegalArgumentException`;
  #L41004e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410054.  throw v0;
}
procedure `void` `isTrue`(`boolean` v1 ) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410068.  v0:= "[Assertion failed] - this expression must be true" @kind object;
  #L41006c.  call `isTrue`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @kind static;
  #L410072.  return @kind void;
}
procedure `void` `isTrue`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.isTrue:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L410084.  if v0 == 0 then goto L41008a;
  #L410088.  return @kind void;
  #L41008a.  v0:= new `java.lang.IllegalArgumentException`;
  #L41008e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410094.  throw v0;
}
procedure `void` `noNullElements`(`java.lang.Object`[] v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.noNullElements:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4100a8.  v0:= "[Assertion failed] - this array must not contain any null elements" @kind object;
  #L4100ac.  call `noNullElements`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.noNullElements:([Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L4100b2.  return @kind void;
}
procedure `void` `noNullElements`(`java.lang.Object`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.noNullElements:([Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4100c4.  if v2 == 0 then goto L4100ea;
  #L4100c8.  v0:= 0I;
  #L4100ca.  v1:= length @variable v2;
  #L4100cc.  if v0 >= v1 then goto L4100ea;
  #L4100d0.  v1:= v2[v0] @kind object;
  #L4100d4.  if v1 == 0 then goto L4100de;
  #L4100d8.  v0:= v0 + 1;
  #L4100dc.  goto L4100ca;
  #L4100de.  v2:= new `java.lang.IllegalArgumentException`;
  #L4100e2.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4100e8.  throw v2;
  #L4100ea.  return @kind void;
}
procedure `void` `notEmpty`(`java.util.Collection` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410170.  v0:= "[Assertion failed] - this collection must not be empty: it must contain at least 1 element" @kind object;
  #L410174.  call `notEmpty`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V` @kind static;
  #L41017a.  return @kind void;
}
procedure `void` `notEmpty`(`java.util.Collection` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Collection;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41018c.  call temp:= `isEmpty`(v0) @signature `Lio/jsonwebtoken/lang/Collections;.isEmpty:(Ljava/util/Collection;)Z` @kind static;
  #L410192.  v0:= temp;
  #L410194.  if v0 != 0 then goto L41019a;
  #L410198.  return @kind void;
  #L41019a.  v0:= new `java.lang.IllegalArgumentException`;
  #L41019e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4101a4.  throw v0;
}
procedure `void` `notEmpty`(`java.util.Map` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Map;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4101b8.  v0:= "[Assertion failed] - this map must not be empty; it must contain at least one entry" @kind object;
  #L4101bc.  call `notEmpty`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Map;Ljava/lang/String;)V` @kind static;
  #L4101c2.  return @kind void;
}
procedure `void` `notEmpty`(`java.util.Map` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:(Ljava/util/Map;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4101d4.  call temp:= `isEmpty`(v0) @signature `Lio/jsonwebtoken/lang/Collections;.isEmpty:(Ljava/util/Map;)Z` @kind static;
  #L4101da.  v0:= temp;
  #L4101dc.  if v0 != 0 then goto L4101e2;
  #L4101e0.  return @kind void;
  #L4101e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L4101e6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4101ec.  throw v0;
}
procedure `void` `notEmpty`(`byte`[] v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:([BLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4100fc.  call temp:= `isEmpty`(v0) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([B)Z` @kind static;
  #L410102.  v0:= temp;
  #L410104.  if v0 != 0 then goto L41010a;
  #L410108.  return @kind void;
  #L41010a.  v0:= new `java.lang.IllegalArgumentException`;
  #L41010e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L410114.  throw v0;
}
procedure `void` `notEmpty`(`java.lang.Object`[] v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:([Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410128.  v0:= "[Assertion failed] - this array must not be empty: it must contain at least 1 element" @kind object;
  #L41012c.  call `notEmpty`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:([Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L410132.  return @kind void;
}
procedure `void` `notEmpty`(`java.lang.Object`[] v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notEmpty:([Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L410144.  call temp:= `isEmpty`(v0) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L41014a.  v0:= temp;
  #L41014c.  if v0 != 0 then goto L410152;
  #L410150.  return @kind void;
  #L410152.  v0:= new `java.lang.IllegalArgumentException`;
  #L410156.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41015c.  throw v0;
}
procedure `void` `notNull`(`java.lang.Object` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410200.  v0:= "[Assertion failed] - this argument is required; it must not be null" @kind object;
  #L410204.  call `notNull`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L41020a.  return @kind void;
}
procedure `void` `notNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.notNull:(Ljava/lang/Object;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41021c.  if v0 == 0 then goto L410222;
  #L410220.  return @kind void;
  #L410222.  v0:= new `java.lang.IllegalArgumentException`;
  #L410226.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41022c.  throw v0;
}
procedure `void` `state`(`boolean` v1 ) @signature `Lio/jsonwebtoken/lang/Assert;.state:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L410240.  v0:= "[Assertion failed] - this state invariant must be true" @kind object;
  #L410244.  call `state`(v1, v0) @signature `Lio/jsonwebtoken/lang/Assert;.state:(ZLjava/lang/String;)V` @kind static;
  #L41024a.  return @kind void;
}
procedure `void` `state`(`boolean` v0 , `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Assert;.state:(ZLjava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41025c.  if v0 == 0 then goto L410262;
  #L410260.  return @kind void;
  #L410262.  v0:= new `java.lang.IllegalStateException`;
  #L410266.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L41026c.  throw v0;
}
