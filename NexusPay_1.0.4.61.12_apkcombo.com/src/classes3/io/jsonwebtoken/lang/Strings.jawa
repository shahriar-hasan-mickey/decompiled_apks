record `io.jsonwebtoken.lang.Strings` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.nio.charset.Charset` `@@io.jsonwebtoken.lang.Strings.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/lang/Strings;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L412e40.  v0:= "UTF-8" @kind object;
  #L412e44.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L412e4a.  v0:= temp @kind object;
  #L412e4c.  `@@io.jsonwebtoken.lang.Strings.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L412e50.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.lang.Strings` v0 @kind this) @signature `Lio/jsonwebtoken/lang/Strings;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L412e64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L412e6a.  return @kind void;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lio/jsonwebtoken/lang/Strings;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L4120cc.  if v2 == 0 then goto L41213c;
  #L4120d0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4120d6.  v0:= temp;
  #L4120d8.  if v0 != 0 then goto L4120de;
  #L4120dc.  goto L41213c;
  #L4120de.  v0:= new `java.lang.StringBuilder`;
  #L4120e2.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4120e8.  v1:= temp;
  #L4120ea.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L4120f0.  v1:= 0I;
  #L4120f2.  if v3 == 0 then goto L41210e;
  #L4120f6.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4120fc.  v3:= temp;
  #L4120fe.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L412104.  v3:= temp;
  #L412106.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L41210c.  goto L412124;
  #L41210e.  call temp:= `charAt`(v2, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L412114.  v3:= temp;
  #L412116.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/Character;.toLowerCase:(C)C` @kind static;
  #L41211c.  v3:= temp;
  #L41211e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L412124.  v3:= 1I;
  #L412126.  call temp:= `substring`(v2, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L41212c.  v2:= temp @kind object;
  #L41212e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412134.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41213a.  v2:= temp @kind object;
  #L41213c.  return v2 @kind object;
}
procedure `java.lang.String`[] `addStringToArray`(`java.lang.String`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.addStringToArray:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412874.  call temp:= `isEmpty`(v3) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L41287a.  v0:= temp;
  #L41287c.  v1:= 1I;
  #L41287e.  v2:= 0I;
  #L412880.  if v0 == 0 then goto L41288e;
  #L412884.  v3:= new `java.lang.String`[v1];
  #L412888.  v3[v2]:= v4 @kind object;
  #L41288c.  return v3 @kind object;
  #L41288e.  v0:= length @variable v3;
  #L412890.  v0:= v0 + v1 @kind int;
  #L412892.  v0:= new `java.lang.String`[v0];
  #L412896.  v1:= length @variable v3;
  #L412898.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L41289e.  v3:= length @variable v3;
  #L4128a0.  v0[v3]:= v4 @kind object;
  #L4128a4.  return v0 @kind object;
}
procedure `java.lang.String` `applyRelativePath`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.applyRelativePath:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L411fa8.  v0:= "/" @kind object;
  #L411fac.  call temp:= `lastIndexOf`(v3, v0) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L411fb2.  v1:= temp;
  #L411fb4.  v2:= -1I;
  #L411fb6.  if v1 == v2 then goto L41200e;
  #L411fba.  v2:= 0I;
  #L411fbc.  call temp:= `substring`(v3, v2, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L411fc2.  v3:= temp @kind object;
  #L411fc4.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411fca.  v1:= temp;
  #L411fcc.  if v1 != 0 then goto L411fee;
  #L411fd0.  v1:= new `java.lang.StringBuilder`;
  #L411fd4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411fda.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411fe0.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411fe6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L411fec.  v3:= temp @kind object;
  #L411fee.  v0:= new `java.lang.StringBuilder`;
  #L411ff2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L411ff8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L411ffe.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412004.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41200a.  v3:= temp @kind object;
  #L41200c.  return v3 @kind object;
  #L41200e.  return v4 @kind object;
}
procedure `java.lang.String` `arrayToCommaDelimitedString`(`java.lang.Object`[] v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.arrayToCommaDelimitedString:([Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412020.  v0:= "," @kind object;
  #L412024.  call temp:= `arrayToDelimitedString`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.arrayToDelimitedString:([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L41202a.  v1:= temp @kind object;
  #L41202c.  return v1 @kind object;
}
procedure `java.lang.String` `arrayToDelimitedString`(`java.lang.Object`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.arrayToDelimitedString:([Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412040.  call temp:= `isEmpty`(v3) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412046.  v0:= temp;
  #L412048.  if v0 == 0 then goto L412052;
  #L41204c.  v3:= "" @kind object;
  #L412050.  return v3 @kind object;
  #L412052.  v0:= length @variable v3;
  #L412054.  v1:= 0I;
  #L412056.  v2:= 1I;
  #L412058.  if v0 != v2 then goto L41206a;
  #L41205c.  v3:= v3[v1] @kind object;
  #L412060.  call temp:= `nullSafeToString`(v3) @signature `Lio/jsonwebtoken/lang/Objects;.nullSafeToString:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L412066.  v3:= temp @kind object;
  #L412068.  return v3 @kind object;
  #L41206a.  v0:= new `java.lang.StringBuilder`;
  #L41206e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412074.  v2:= length @variable v3;
  #L412076.  if v1 >= v2 then goto L412094;
  #L41207a.  if v1 <= 0 then goto L412084;
  #L41207e.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412084.  v2:= v3[v1] @kind object;
  #L412088.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41208e.  v1:= v1 + 1;
  #L412092.  goto L412074;
  #L412094.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41209a.  v3:= temp @kind object;
  #L41209c.  return v3 @kind object;
}
procedure `java.lang.CharSequence` `b`(`java.lang.CharSequence` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.b:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411f04.  call temp:= `hasLength`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411f0a.  v0:= temp;
  #L411f0c.  if v0 != 0 then goto L411f12;
  #L411f10.  return v4 @kind object;
  #L411f12.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411f18.  v0:= temp;
  #L411f1a.  v1:= 0I;
  #L411f1c.  if v1 >= v0 then goto L411f3a;
  #L411f20.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411f26.  v2:= temp;
  #L411f28.  call temp:= `isWhitespace`(v2) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L411f2e.  v2:= temp;
  #L411f30.  if v2 == 0 then goto L411f3a;
  #L411f34.  v1:= v1 + 1;
  #L411f38.  goto L411f1c;
  #L411f3a.  v2:= v0;
  #L411f3c.  if v1 >= v0 then goto L411f5e;
  #L411f40.  v3:= v2 + -1;
  #L411f44.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411f4a.  v3:= temp;
  #L411f4c.  call temp:= `isWhitespace`(v3) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L411f52.  v3:= temp;
  #L411f54.  if v3 == 0 then goto L411f5e;
  #L411f58.  v2:= v2 + -1;
  #L411f5c.  goto L411f3c;
  #L411f5e.  if v1 > 0 then goto L411f66;
  #L411f62.  if v2 >= v0 then goto L411f6e;
  #L411f66.  call temp:= `subSequence`(v4, v1, v2) @signature `Ljava/lang/CharSequence;.subSequence:(II)Ljava/lang/CharSequence;` @kind interface;
  #L411f6c.  v4:= temp @kind object;
  #L411f6e.  return v4 @kind object;
}
procedure `void` `c`(`java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.c:(Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412e7c.  v0:= 0I;
  #L412e7e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412e84.  v1:= temp;
  #L412e86.  if v0 >= v1 then goto L412eee;
  #L412e8a.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L412e90.  v1:= temp;
  #L412e92.  v2:= 95I;
  #L412e96.  if v1 == v2 then goto L412ee8;
  #L412e9a.  v2:= 32I;
  #L412e9e.  if v1 == v2 then goto L412ee8;
  #L412ea2.  call temp:= `isLetterOrDigit`(v1) @signature `Ljava/lang/Character;.isLetterOrDigit:(C)Z` @kind static;
  #L412ea8.  v1:= temp;
  #L412eaa.  if v1 == 0 then goto L412eb0;
  #L412eae.  goto L412ee8;
  #L412eb0.  v0:= new `java.lang.IllegalArgumentException`;
  #L412eb4.  v1:= new `java.lang.StringBuilder`;
  #L412eb8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412ebe.  v2:= "Locale part \"" @kind object;
  #L412ec2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412ec8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412ece.  v3:= "\" contains invalid characters" @kind object;
  #L412ed2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412ed8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412ede.  v3:= temp @kind object;
  #L412ee0.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L412ee6.  throw v0;
  #L412ee8.  v0:= v0 + 1;
  #L412eec.  goto L412e7e;
  #L412eee.  return @kind void;
}
procedure `java.lang.String` `capitalize`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.capitalize:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4120b0.  v0:= 1I;
  #L4120b2.  call temp:= `a`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L4120b8.  v1:= temp @kind object;
  #L4120ba.  return v1 @kind object;
}
procedure `java.lang.CharSequence` `clean`(`java.lang.CharSequence` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.clean:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L411edc.  call temp:= `b`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.b:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L411ee2.  v1:= temp @kind object;
  #L411ee4.  call temp:= `hasLength`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411eea.  v0:= temp;
  #L411eec.  if v0 != 0 then goto L411ef2;
  #L411ef0.  v1:= 0I;
  #L411ef2.  return v1 @kind object;
}
procedure `java.lang.String` `clean`(`java.lang.String` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.clean:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L412150.  call temp:= `clean`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.clean:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L412156.  v0:= temp @kind object;
  #L412158.  if v0 == 0 then goto L412166;
  #L41215c.  call temp:= `toString`(v0) @signature `Ljava/lang/CharSequence;.toString:()Ljava/lang/String;` @kind interface;
  #L412162.  v0:= temp @kind object;
  #L412164.  goto L412168;
  #L412166.  v0:= 0I;
  #L412168.  return v0 @kind object;
}
procedure `java.lang.String` `cleanPath`(`java.lang.String` v9 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.cleanPath:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L41217c.  if v9 != 0 then goto L412184;
  #L412180.  v9:= 0I;
  #L412182.  return v9 @kind object;
  #L412184.  v0:= "\\" @kind object;
  #L412188.  v1:= "/" @kind object;
  #L41218c.  call temp:= `replace`(v9, v0, v1) @signature `Lio/jsonwebtoken/lang/Strings;.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L412192.  v9:= temp @kind object;
  #L412194.  v0:= ":" @kind object;
  #L412198.  call temp:= `indexOf`(v9, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L41219e.  v0:= temp;
  #L4121a0.  v2:= -1I;
  #L4121a2.  v3:= 1I;
  #L4121a4.  v4:= 0I;
  #L4121a6.  if v0 == v2 then goto L4121be;
  #L4121aa.  v0:= v0 + v3 @kind int;
  #L4121ac.  call temp:= `substring`(v9, v4, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4121b2.  v2:= temp @kind object;
  #L4121b4.  call temp:= `substring`(v9, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4121ba.  v9:= temp @kind object;
  #L4121bc.  goto L4121c2;
  #L4121be.  v2:= "" @kind object;
  #L4121c2.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L4121c8.  v0:= temp;
  #L4121ca.  if v0 == 0 then goto L4121f4;
  #L4121ce.  v0:= new `java.lang.StringBuilder`;
  #L4121d2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4121d8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4121de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4121e4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4121ea.  v2:= temp @kind object;
  #L4121ec.  call temp:= `substring`(v9, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4121f2.  v9:= temp @kind object;
  #L4121f4.  call temp:= `delimitedListToStringArray`(v9, v1) @signature `Lio/jsonwebtoken/lang/Strings;.delimitedListToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L4121fa.  v9:= temp @kind object;
  #L4121fc.  v0:= new `java.util.LinkedList`;
  #L412200.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L412206.  v5:= length @variable v9;
  #L412208.  v5:= v5 - v3 @kind int;
  #L41220a.  v3:= 0I;
  #L41220c.  v6:= ".." @kind object;
  #L412210.  if v5 < 0 then goto L412252;
  #L412214.  v7:= v9[v5] @kind object;
  #L412218.  v8:= "." @kind object;
  #L41221c.  call temp:= `equals`(v8, v7) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L412222.  v8:= temp;
  #L412224.  if v8 == 0 then goto L41222a;
  #L412228.  goto L41224c;
  #L41222a.  call temp:= `equals`(v6, v7) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L412230.  v6:= temp;
  #L412232.  if v6 == 0 then goto L41223c;
  #L412236.  v3:= v3 + 1;
  #L41223a.  goto L41224c;
  #L41223c.  if v3 <= 0 then goto L412246;
  #L412240.  v3:= v3 + -1;
  #L412244.  goto L41224c;
  #L412246.  call `add`(v0, v4, v7) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L41224c.  v5:= v5 + -1;
  #L412250.  goto L41220c;
  #L412252.  v9:= 0I;
  #L412254.  if v9 >= v3 then goto L412264;
  #L412258.  call `add`(v0, v4, v6) @signature `Ljava/util/List;.add:(ILjava/lang/Object;)V` @kind interface;
  #L41225e.  v9:= v9 + 1;
  #L412262.  goto L412254;
  #L412264.  v9:= new `java.lang.StringBuilder`;
  #L412268.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41226e.  call temp:= `append`(v9, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412274.  call temp:= `collectionToDelimitedString`(v0, v1) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToDelimitedString:(Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L41227a.  v0:= temp @kind object;
  #L41227c.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412282.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412288.  v9:= temp @kind object;
  #L41228a.  return v9 @kind object;
}
procedure `java.lang.String` `collectionToCommaDelimitedString`(`java.util.Collection` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToCommaDelimitedString:(Ljava/util/Collection;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41229c.  v0:= "," @kind object;
  #L4122a0.  call temp:= `collectionToDelimitedString`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToDelimitedString:(Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4122a6.  v1:= temp @kind object;
  #L4122a8.  return v1 @kind object;
}
procedure `java.lang.String` `collectionToDelimitedString`(`java.util.Collection` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToDelimitedString:(Ljava/util/Collection;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4122bc.  v0:= "" @kind object;
  #L4122c0.  call temp:= `collectionToDelimitedString`(v1, v2, v0, v0) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToDelimitedString:(Ljava/util/Collection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4122c6.  v1:= temp @kind object;
  #L4122c8.  return v1 @kind object;
}
procedure `java.lang.String` `collectionToDelimitedString`(`java.util.Collection` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.collectionToDelimitedString:(Ljava/util/Collection;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4122dc.  call temp:= `isEmpty`(v2) @signature `Lio/jsonwebtoken/lang/Collections;.isEmpty:(Ljava/util/Collection;)Z` @kind static;
  #L4122e2.  v0:= temp;
  #L4122e4.  if v0 == 0 then goto L4122ee;
  #L4122e8.  v2:= "" @kind object;
  #L4122ec.  return v2 @kind object;
  #L4122ee.  v0:= new `java.lang.StringBuilder`;
  #L4122f2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4122f8.  call temp:= `iterator`(v2) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4122fe.  v2:= temp @kind object;
  #L412300.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L412306.  v1:= temp;
  #L412308.  if v1 == 0 then goto L41233a;
  #L41230c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412312.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L412318.  v1:= temp @kind object;
  #L41231a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412320.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412326.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L41232c.  v1:= temp;
  #L41232e.  if v1 == 0 then goto L412300;
  #L412332.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412338.  goto L412300;
  #L41233a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412340.  v2:= temp @kind object;
  #L412342.  return v2 @kind object;
}
procedure `java.util.Set` `commaDelimitedListToSet`(`java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.commaDelimitedListToSet:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412e04.  v0:= new `java.util.TreeSet`;
  #L412e08.  call `<init>`(v0) @signature `Ljava/util/TreeSet;.<init>:()V` @kind direct;
  #L412e0e.  call temp:= `commaDelimitedListToStringArray`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.commaDelimitedListToStringArray:(Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L412e14.  v4:= temp @kind object;
  #L412e16.  v1:= length @variable v4;
  #L412e18.  v2:= 0I;
  #L412e1a.  if v2 >= v1 then goto L412e2e;
  #L412e1e.  v3:= v4[v2] @kind object;
  #L412e22.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L412e28.  v2:= v2 + 1;
  #L412e2c.  goto L412e1a;
  #L412e2e.  return v0 @kind object;
}
procedure `java.lang.String`[] `commaDelimitedListToStringArray`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.commaDelimitedListToStringArray:(Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4128b8.  v0:= "," @kind object;
  #L4128bc.  call temp:= `delimitedListToStringArray`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.delimitedListToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L4128c2.  v1:= temp @kind object;
  #L4128c4.  return v1 @kind object;
}
procedure `java.lang.String`[] `concatenateStringArrays`(`java.lang.String`[] v3 @kind object, `java.lang.String`[] v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.concatenateStringArrays:([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4128d8.  call temp:= `isEmpty`(v3) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L4128de.  v0:= temp;
  #L4128e0.  if v0 == 0 then goto L4128e6;
  #L4128e4.  return v4 @kind object;
  #L4128e6.  call temp:= `isEmpty`(v4) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L4128ec.  v0:= temp;
  #L4128ee.  if v0 == 0 then goto L4128f4;
  #L4128f2.  return v3 @kind object;
  #L4128f4.  v0:= length @variable v3;
  #L4128f6.  v1:= length @variable v4;
  #L4128f8.  v0:= v0 + v1 @kind int;
  #L4128fa.  v0:= new `java.lang.String`[v0];
  #L4128fe.  v1:= length @variable v3;
  #L412900.  v2:= 0I;
  #L412902.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L412908.  v3:= length @variable v3;
  #L41290a.  v1:= length @variable v4;
  #L41290c.  call `arraycopy`(v4, v2, v0, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L412912.  return v0 @kind object;
}
procedure `boolean` `containsWhitespace`(`java.lang.CharSequence` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.containsWhitespace:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411c00.  call temp:= `hasLength`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411c06.  v0:= temp;
  #L411c08.  v1:= 0I;
  #L411c0a.  if v0 != 0 then goto L411c10;
  #L411c0e.  return v1;
  #L411c10.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411c16.  v0:= temp;
  #L411c18.  v2:= 0I;
  #L411c1a.  if v2 >= v0 then goto L411c3c;
  #L411c1e.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411c24.  v3:= temp;
  #L411c26.  call temp:= `isWhitespace`(v3) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L411c2c.  v3:= temp;
  #L411c2e.  if v3 == 0 then goto L411c36;
  #L411c32.  v4:= 1I;
  #L411c34.  return v4;
  #L411c36.  v2:= v2 + 1;
  #L411c3a.  goto L411c1a;
  #L411c3c.  return v1;
}
procedure `boolean` `containsWhitespace`(`java.lang.String` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.containsWhitespace:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L411c50.  call temp:= `containsWhitespace`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.containsWhitespace:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411c56.  v0:= temp;
  #L411c58.  return v0;
}
procedure `int` `countOccurrencesOf`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.countOccurrencesOf:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L411e84.  v0:= 0I;
  #L411e86.  if v3 == 0 then goto L411eca;
  #L411e8a.  if v4 == 0 then goto L411eca;
  #L411e8e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411e94.  v1:= temp;
  #L411e96.  if v1 == 0 then goto L411eca;
  #L411e9a.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411ea0.  v1:= temp;
  #L411ea2.  if v1 != 0 then goto L411ea8;
  #L411ea6.  goto L411eca;
  #L411ea8.  v1:= 0I;
  #L411eaa.  call temp:= `indexOf`(v3, v4, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L411eb0.  v0:= temp;
  #L411eb2.  v2:= -1I;
  #L411eb4.  if v0 == v2 then goto L411ec8;
  #L411eb8.  v1:= v1 + 1;
  #L411ebc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411ec2.  v2:= temp;
  #L411ec4.  v0:= v0 + v2 @kind int;
  #L411ec6.  goto L411eaa;
  #L411ec8.  return v1;
  #L411eca.  return v0;
}
procedure `java.lang.String` `delete`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.delete:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412354.  v0:= "" @kind object;
  #L412358.  call temp:= `replace`(v1, v2, v0) @signature `Lio/jsonwebtoken/lang/Strings;.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L41235e.  v1:= temp @kind object;
  #L412360.  return v1 @kind object;
}
procedure `java.lang.String` `deleteAny`(`java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.deleteAny:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L412374.  call temp:= `hasLength`(v5) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L41237a.  v0:= temp;
  #L41237c.  if v0 == 0 then goto L4123d0;
  #L412380.  call temp:= `hasLength`(v6) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412386.  v0:= temp;
  #L412388.  if v0 != 0 then goto L41238e;
  #L41238c.  goto L4123d0;
  #L41238e.  v0:= new `java.lang.StringBuilder`;
  #L412392.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412398.  v1:= 0I;
  #L41239a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4123a0.  v2:= temp;
  #L4123a2.  if v1 >= v2 then goto L4123c8;
  #L4123a6.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L4123ac.  v2:= temp;
  #L4123ae.  call temp:= `indexOf`(v6, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L4123b4.  v3:= temp;
  #L4123b6.  v4:= -1I;
  #L4123b8.  if v3 != v4 then goto L4123c2;
  #L4123bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L4123c2.  v1:= v1 + 1;
  #L4123c6.  goto L41239a;
  #L4123c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4123ce.  v5:= temp @kind object;
  #L4123d0.  return v5 @kind object;
}
procedure `java.lang.String`[] `delimitedListToStringArray`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.delimitedListToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412924.  v0:= 0I;
  #L412926.  call temp:= `delimitedListToStringArray`(v1, v2, v0) @signature `Lio/jsonwebtoken/lang/Strings;.delimitedListToStringArray:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L41292c.  v1:= temp @kind object;
  #L41292e.  return v1 @kind object;
}
procedure `java.lang.String`[] `delimitedListToStringArray`(`java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.delimitedListToStringArray:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412940.  v0:= 0I;
  #L412942.  if v4 != 0 then goto L41294c;
  #L412946.  v4:= new `java.lang.String`[v0];
  #L41294a.  return v4 @kind object;
  #L41294c.  if v5 != 0 then goto L41295c;
  #L412950.  v5:= 1I;
  #L412952.  v5:= new `java.lang.String`[v5];
  #L412956.  v5[v0]:= v4 @kind object;
  #L41295a.  return v5 @kind object;
  #L41295c.  v1:= new `java.util.ArrayList`;
  #L412960.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L412966.  v2:= "" @kind object;
  #L41296a.  call temp:= `equals`(v2, v5) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L412970.  v2:= temp;
  #L412972.  if v2 == 0 then goto L4129a0;
  #L412976.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L41297c.  v5:= temp;
  #L41297e.  if v0 >= v5 then goto L4129fe;
  #L412982.  v5:= v0 + 1;
  #L412986.  call temp:= `substring`(v4, v0, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L41298c.  v0:= temp @kind object;
  #L41298e.  call temp:= `deleteAny`(v0, v6) @signature `Lio/jsonwebtoken/lang/Strings;.deleteAny:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L412994.  v0:= temp @kind object;
  #L412996.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L41299c.  v0:= v5;
  #L41299e.  goto L412976;
  #L4129a0.  call temp:= `indexOf`(v4, v5, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L4129a6.  v2:= temp;
  #L4129a8.  v3:= -1I;
  #L4129aa.  if v2 == v3 then goto L4129d0;
  #L4129ae.  call temp:= `substring`(v4, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4129b4.  v0:= temp @kind object;
  #L4129b6.  call temp:= `deleteAny`(v0, v6) @signature `Lio/jsonwebtoken/lang/Strings;.deleteAny:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4129bc.  v0:= temp @kind object;
  #L4129be.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4129c4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4129ca.  v0:= temp;
  #L4129cc.  v0:= v0 + v2 @kind int;
  #L4129ce.  goto L4129a0;
  #L4129d0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4129d6.  v5:= temp;
  #L4129d8.  if v5 <= 0 then goto L4129fe;
  #L4129dc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4129e2.  v5:= temp;
  #L4129e4.  if v0 > v5 then goto L4129fe;
  #L4129e8.  call temp:= `substring`(v4, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L4129ee.  v4:= temp @kind object;
  #L4129f0.  call temp:= `deleteAny`(v4, v6) @signature `Lio/jsonwebtoken/lang/Strings;.deleteAny:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L4129f6.  v4:= temp @kind object;
  #L4129f8.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4129fe.  call temp:= `toStringArray`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Collection;)[Ljava/lang/String;` @kind static;
  #L412a04.  v4:= temp @kind object;
  #L412a06.  return v4 @kind object;
}
procedure `boolean` `endsWithIgnoreCase`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.endsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L411c6c.  v0:= 0I;
  #L411c6e.  if v3 == 0 then goto L411cd2;
  #L411c72.  if v4 != 0 then goto L411c78;
  #L411c76.  goto L411cd2;
  #L411c78.  call temp:= `endsWith`(v3, v4) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411c7e.  v1:= temp;
  #L411c80.  if v1 == 0 then goto L411c88;
  #L411c84.  v3:= 1I;
  #L411c86.  return v3;
  #L411c88.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411c8e.  v1:= temp;
  #L411c90.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411c96.  v2:= temp;
  #L411c98.  if v1 >= v2 then goto L411c9e;
  #L411c9c.  return v0;
  #L411c9e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411ca4.  v0:= temp;
  #L411ca6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411cac.  v1:= temp;
  #L411cae.  v0:= v0 - v1 @kind int;
  #L411cb0.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L411cb6.  v3:= temp @kind object;
  #L411cb8.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L411cbe.  v3:= temp @kind object;
  #L411cc0.  call temp:= `toLowerCase`(v4) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L411cc6.  v4:= temp @kind object;
  #L411cc8.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411cce.  v3:= temp;
  #L411cd0.  return v3;
  #L411cd2.  return v0;
}
procedure `java.lang.String` `getFilename`(`java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.getFilename:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4123e4.  if v2 != 0 then goto L4123ec;
  #L4123e8.  v2:= 0I;
  #L4123ea.  return v2 @kind object;
  #L4123ec.  v0:= "/" @kind object;
  #L4123f0.  call temp:= `lastIndexOf`(v2, v0) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L4123f6.  v0:= temp;
  #L4123f8.  v1:= -1I;
  #L4123fa.  if v0 == v1 then goto L41240a;
  #L4123fe.  v0:= v0 + 1;
  #L412402.  call temp:= `substring`(v2, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L412408.  v2:= temp @kind object;
  #L41240a.  return v2 @kind object;
}
procedure `java.lang.String` `getFilenameExtension`(`java.lang.String` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.getFilenameExtension:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L41241c.  v0:= 0I;
  #L41241e.  if v3 != 0 then goto L412424;
  #L412422.  return v0 @kind object;
  #L412424.  v1:= 46I;
  #L412428.  call temp:= `lastIndexOf`(v3, v1) @signature `Ljava/lang/String;.lastIndexOf:(I)I` @kind virtual;
  #L41242e.  v1:= temp;
  #L412430.  v2:= -1I;
  #L412432.  if v1 != v2 then goto L412438;
  #L412436.  return v0 @kind object;
  #L412438.  v2:= "/" @kind object;
  #L41243c.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L412442.  v2:= temp;
  #L412444.  if v2 <= v1 then goto L41244a;
  #L412448.  return v0 @kind object;
  #L41244a.  v1:= v1 + 1;
  #L41244e.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L412454.  v3:= temp @kind object;
  #L412456.  return v3 @kind object;
}
procedure `boolean` `hasLength`(`java.lang.CharSequence` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L411ce4.  if v0 == 0 then goto L411cf8;
  #L411ce8.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411cee.  v0:= temp;
  #L411cf0.  if v0 <= 0 then goto L411cf8;
  #L411cf4.  v0:= 1I;
  #L411cf6.  goto L411cfa;
  #L411cf8.  v0:= 0I;
  #L411cfa.  return v0;
}
procedure `boolean` `hasLength`(`java.lang.String` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L411d0c.  call temp:= `hasLength`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411d12.  v0:= temp;
  #L411d14.  return v0;
}
procedure `boolean` `hasText`(`java.lang.CharSequence` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/CharSequence;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411d28.  call temp:= `hasLength`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411d2e.  v0:= temp;
  #L411d30.  v1:= 0I;
  #L411d32.  if v0 != 0 then goto L411d38;
  #L411d36.  return v1;
  #L411d38.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411d3e.  v0:= temp;
  #L411d40.  v2:= 0I;
  #L411d42.  if v2 >= v0 then goto L411d64;
  #L411d46.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411d4c.  v3:= temp;
  #L411d4e.  call temp:= `isWhitespace`(v3) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L411d54.  v3:= temp;
  #L411d56.  if v3 != 0 then goto L411d5e;
  #L411d5a.  v4:= 1I;
  #L411d5c.  return v4;
  #L411d5e.  v2:= v2 + 1;
  #L411d62.  goto L411d42;
  #L411d64.  return v1;
}
procedure `boolean` `hasText`(`java.lang.String` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L411d78.  call temp:= `hasText`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/CharSequence;)Z` @kind static;
  #L411d7e.  v0:= temp;
  #L411d80.  return v0;
}
procedure `java.lang.String`[] `mergeStringArrays`(`java.lang.String`[] v4 @kind object, `java.lang.String`[] v5 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.mergeStringArrays:([Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412a18.  call temp:= `isEmpty`(v4) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412a1e.  v0:= temp;
  #L412a20.  if v0 == 0 then goto L412a26;
  #L412a24.  return v5 @kind object;
  #L412a26.  call temp:= `isEmpty`(v5) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412a2c.  v0:= temp;
  #L412a2e.  if v0 == 0 then goto L412a34;
  #L412a32.  return v4 @kind object;
  #L412a34.  v0:= new `java.util.ArrayList`;
  #L412a38.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L412a3e.  call temp:= `asList`(v4) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L412a44.  v4:= temp @kind object;
  #L412a46.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L412a4c.  v4:= length @variable v5;
  #L412a4e.  v1:= 0I;
  #L412a50.  if v1 >= v4 then goto L412a70;
  #L412a54.  v2:= v5[v1] @kind object;
  #L412a58.  call temp:= `contains`(v0, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L412a5e.  v3:= temp;
  #L412a60.  if v3 != 0 then goto L412a6a;
  #L412a64.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L412a6a.  v1:= v1 + 1;
  #L412a6e.  goto L412a50;
  #L412a70.  call temp:= `toStringArray`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Collection;)[Ljava/lang/String;` @kind static;
  #L412a76.  v4:= temp @kind object;
  #L412a78.  return v4 @kind object;
}
procedure `java.util.Locale` `parseLocaleString`(`java.lang.String` v5 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.parseLocaleString:(Ljava/lang/String;)Ljava/util/Locale;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L412cbc.  v0:= "_ " @kind object;
  #L412cc0.  v1:= 0I;
  #L412cc2.  call temp:= `tokenizeToStringArray`(v5, v0, v1, v1) @signature `Lio/jsonwebtoken/lang/Strings;.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;ZZ)[Ljava/lang/String;` @kind static;
  #L412cc8.  v0:= temp @kind object;
  #L412cca.  v2:= length @variable v0;
  #L412ccc.  v3:= "" @kind object;
  #L412cd0.  if v2 <= 0 then goto L412cda;
  #L412cd4.  v1:= v0[v1] @kind object;
  #L412cd8.  goto L412cdc;
  #L412cda.  v1:= v3 @kind object;
  #L412cdc.  v2:= length @variable v0;
  #L412cde.  v4:= 1I;
  #L412ce0.  if v2 <= v4 then goto L412cea;
  #L412ce4.  v2:= v0[v4] @kind object;
  #L412ce8.  goto L412cec;
  #L412cea.  v2:= v3 @kind object;
  #L412cec.  call `c`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.c:(Ljava/lang/String;)V` @kind static;
  #L412cf2.  call `c`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.c:(Ljava/lang/String;)V` @kind static;
  #L412cf8.  v0:= length @variable v0;
  #L412cfa.  v4:= 2I;
  #L412cfc.  if v0 < v4 then goto L412d3e;
  #L412d00.  call temp:= `indexOf`(v5, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L412d06.  v0:= temp;
  #L412d08.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412d0e.  v3:= temp;
  #L412d10.  v0:= v0 + v3 @kind int;
  #L412d12.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L412d18.  v5:= temp @kind object;
  #L412d1a.  call temp:= `trimLeadingWhitespace`(v5) @signature `Lio/jsonwebtoken/lang/Strings;.trimLeadingWhitespace:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L412d20.  v3:= temp @kind object;
  #L412d22.  v5:= "_" @kind object;
  #L412d26.  call temp:= `startsWith`(v3, v5) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L412d2c.  v5:= temp;
  #L412d2e.  if v5 == 0 then goto L412d3e;
  #L412d32.  v5:= 95I;
  #L412d36.  call temp:= `trimLeadingCharacter`(v3, v5) @signature `Lio/jsonwebtoken/lang/Strings;.trimLeadingCharacter:(Ljava/lang/String;C)Ljava/lang/String;` @kind static;
  #L412d3c.  v3:= temp @kind object;
  #L412d3e.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412d44.  v5:= temp;
  #L412d46.  if v5 <= 0 then goto L412d56;
  #L412d4a.  v5:= new `java.util.Locale`;
  #L412d4e.  call `<init>`(v5, v1, v2, v3) @signature `Ljava/util/Locale;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L412d54.  goto L412d58;
  #L412d56.  v5:= 0I;
  #L412d58.  return v5 @kind object;
}
procedure `boolean` `pathEquals`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.pathEquals:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L411d94.  call temp:= `cleanPath`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.cleanPath:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L411d9a.  v0:= temp @kind object;
  #L411d9c.  call temp:= `cleanPath`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.cleanPath:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L411da2.  v1:= temp @kind object;
  #L411da4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411daa.  v0:= temp;
  #L411dac.  return v0;
}
procedure `java.lang.String` `quote`(`java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.quote:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L412468.  if v2 == 0 then goto L412496;
  #L41246c.  v0:= new `java.lang.StringBuilder`;
  #L412470.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L412476.  v1:= "'" @kind object;
  #L41247a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412480.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412486.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41248c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412492.  v2:= temp @kind object;
  #L412494.  goto L412498;
  #L412496.  v2:= 0I;
  #L412498.  return v2 @kind object;
}
procedure `java.lang.Object` `quoteIfString`(`java.lang.Object` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.quoteIfString:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L411f80.  v0:= instanceof @variable v1 @type ^`java.lang.String` @kind boolean;
  #L411f84.  if v0 == 0 then goto L411f94;
  #L411f88.  v1:= (`java.lang.String`) v1 @kind object;
  #L411f8c.  call temp:= `quote`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.quote:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L411f92.  v1:= temp @kind object;
  #L411f94.  return v1 @kind object;
}
procedure `java.lang.String`[] `removeDuplicateStrings`(`java.lang.String`[] v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.removeDuplicateStrings:([Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L412a8c.  call temp:= `isEmpty`(v4) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412a92.  v0:= temp;
  #L412a94.  if v0 == 0 then goto L412a9a;
  #L412a98.  return v4 @kind object;
  #L412a9a.  v0:= new `java.util.TreeSet`;
  #L412a9e.  call `<init>`(v0) @signature `Ljava/util/TreeSet;.<init>:()V` @kind direct;
  #L412aa4.  v1:= length @variable v4;
  #L412aa6.  v2:= 0I;
  #L412aa8.  if v2 >= v1 then goto L412abc;
  #L412aac.  v3:= v4[v2] @kind object;
  #L412ab0.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L412ab6.  v2:= v2 + 1;
  #L412aba.  goto L412aa8;
  #L412abc.  call temp:= `toStringArray`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Collection;)[Ljava/lang/String;` @kind static;
  #L412ac2.  v4:= temp @kind object;
  #L412ac4.  return v4 @kind object;
}
procedure `java.lang.String` `replace`(`java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.replace:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L4124ac.  call temp:= `hasLength`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L4124b2.  v0:= temp;
  #L4124b4.  if v0 == 0 then goto L412522;
  #L4124b8.  call temp:= `hasLength`(v5) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L4124be.  v0:= temp;
  #L4124c0.  if v0 == 0 then goto L412522;
  #L4124c4.  if v6 != 0 then goto L4124ca;
  #L4124c8.  goto L412522;
  #L4124ca.  v0:= new `java.lang.StringBuilder`;
  #L4124ce.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4124d4.  v1:= 0I;
  #L4124d6.  call temp:= `indexOf`(v4, v5) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L4124dc.  v2:= temp;
  #L4124de.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L4124e4.  v3:= temp;
  #L4124e6.  if v2 < 0 then goto L41250c;
  #L4124ea.  call temp:= `substring`(v4, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L4124f0.  v1:= temp @kind object;
  #L4124f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4124f8.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4124fe.  v1:= v2 + v3 @kind int;
  #L412502.  call temp:= `indexOf`(v4, v5, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L412508.  v2:= temp;
  #L41250a.  goto L4124e6;
  #L41250c.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L412512.  v4:= temp @kind object;
  #L412514.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L41251a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412520.  v4:= temp @kind object;
  #L412522.  return v4 @kind object;
}
procedure `java.lang.String`[] `sortStringArray`(`java.lang.String`[] v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.sortStringArray:([Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412ad8.  call temp:= `isEmpty`(v1) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412ade.  v0:= temp;
  #L412ae0.  if v0 == 0 then goto L412aec;
  #L412ae4.  v1:= 0I;
  #L412ae6.  v1:= new `java.lang.String`[v1];
  #L412aea.  return v1 @kind object;
  #L412aec.  call `sort`(v1) @signature `Ljava/util/Arrays;.sort:([Ljava/lang/Object;)V` @kind static;
  #L412af2.  return v1 @kind object;
}
procedure `java.lang.String`[] `split`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.split:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412b04.  call temp:= `hasLength`(v3) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412b0a.  v0:= temp;
  #L412b0c.  v1:= 0I;
  #L412b0e.  if v0 == 0 then goto L412b5c;
  #L412b12.  call temp:= `hasLength`(v4) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412b18.  v0:= temp;
  #L412b1a.  if v0 != 0 then goto L412b20;
  #L412b1e.  goto L412b5c;
  #L412b20.  call temp:= `indexOf`(v3, v4) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L412b26.  v0:= temp;
  #L412b28.  if v0 >= 0 then goto L412b2e;
  #L412b2c.  return v1 @kind object;
  #L412b2e.  v1:= 0I;
  #L412b30.  call temp:= `substring`(v3, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L412b36.  v2:= temp @kind object;
  #L412b38.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412b3e.  v4:= temp;
  #L412b40.  v0:= v0 + v4 @kind int;
  #L412b42.  call temp:= `substring`(v3, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L412b48.  v3:= temp @kind object;
  #L412b4a.  v4:= 2I;
  #L412b4c.  v4:= new `java.lang.String`[v4];
  #L412b50.  v4[v1]:= v2 @kind object;
  #L412b54.  v0:= 1I;
  #L412b56.  v4[v0]:= v3 @kind object;
  #L412b5a.  return v4 @kind object;
  #L412b5c.  return v1 @kind object;
}
procedure `java.util.Properties` `splitArrayElementsIntoProperties`(`java.lang.String`[] v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.splitArrayElementsIntoProperties:([Ljava/lang/String;Ljava/lang/String;)Ljava/util/Properties;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412d6c.  v0:= 0I;
  #L412d6e.  call temp:= `splitArrayElementsIntoProperties`(v1, v2, v0) @signature `Lio/jsonwebtoken/lang/Strings;.splitArrayElementsIntoProperties:([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Properties;` @kind static;
  #L412d74.  v1:= temp @kind object;
  #L412d76.  return v1 @kind object;
}
procedure `java.util.Properties` `splitArrayElementsIntoProperties`(`java.lang.String`[] v7 @kind object, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.splitArrayElementsIntoProperties:([Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/util/Properties;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L412d88.  call temp:= `isEmpty`(v7) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412d8e.  v0:= temp;
  #L412d90.  if v0 == 0 then goto L412d98;
  #L412d94.  v7:= 0I;
  #L412d96.  return v7 @kind object;
  #L412d98.  v0:= new `java.util.Properties`;
  #L412d9c.  call `<init>`(v0) @signature `Ljava/util/Properties;.<init>:()V` @kind direct;
  #L412da2.  v1:= length @variable v7;
  #L412da4.  v2:= 0I;
  #L412da6.  v3:= 0I;
  #L412da8.  if v3 >= v1 then goto L412df0;
  #L412dac.  v4:= v7[v3] @kind object;
  #L412db0.  if v9 == 0 then goto L412dbc;
  #L412db4.  call temp:= `deleteAny`(v4, v9) @signature `Lio/jsonwebtoken/lang/Strings;.deleteAny:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L412dba.  v4:= temp @kind object;
  #L412dbc.  call temp:= `split`(v4, v8) @signature `Lio/jsonwebtoken/lang/Strings;.split:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L412dc2.  v4:= temp @kind object;
  #L412dc4.  if v4 != 0 then goto L412dca;
  #L412dc8.  goto L412dea;
  #L412dca.  v5:= v4[v2] @kind object;
  #L412dce.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L412dd4.  v5:= temp @kind object;
  #L412dd6.  v6:= 1I;
  #L412dd8.  v4:= v4[v6] @kind object;
  #L412ddc.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L412de2.  v4:= temp @kind object;
  #L412de4.  call temp:= `setProperty`(v0, v5, v4) @signature `Ljava/util/Properties;.setProperty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L412dea.  v3:= v3 + 1;
  #L412dee.  goto L412da8;
  #L412df0.  return v0 @kind object;
}
procedure `boolean` `startsWithIgnoreCase`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.startsWithIgnoreCase:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L411dc0.  v0:= 0I;
  #L411dc2.  if v3 == 0 then goto L411e1c;
  #L411dc6.  if v4 != 0 then goto L411dcc;
  #L411dca.  goto L411e1c;
  #L411dcc.  call temp:= `startsWith`(v3, v4) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L411dd2.  v1:= temp;
  #L411dd4.  if v1 == 0 then goto L411ddc;
  #L411dd8.  v3:= 1I;
  #L411dda.  return v3;
  #L411ddc.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411de2.  v1:= temp;
  #L411de4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411dea.  v2:= temp;
  #L411dec.  if v1 >= v2 then goto L411df2;
  #L411df0.  return v0;
  #L411df2.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L411df8.  v1:= temp;
  #L411dfa.  call temp:= `substring`(v3, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L411e00.  v3:= temp @kind object;
  #L411e02.  call temp:= `toLowerCase`(v3) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L411e08.  v3:= temp @kind object;
  #L411e0a.  call temp:= `toLowerCase`(v4) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L411e10.  v4:= temp @kind object;
  #L411e12.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L411e18.  v3:= temp;
  #L411e1a.  return v3;
  #L411e1c.  return v0;
}
procedure `java.lang.String` `stripFilenameExtension`(`java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.stripFilenameExtension:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L412534.  if v2 != 0 then goto L41253c;
  #L412538.  v2:= 0I;
  #L41253a.  return v2 @kind object;
  #L41253c.  v0:= 46I;
  #L412540.  call temp:= `lastIndexOf`(v2, v0) @signature `Ljava/lang/String;.lastIndexOf:(I)I` @kind virtual;
  #L412546.  v0:= temp;
  #L412548.  v1:= -1I;
  #L41254a.  if v0 != v1 then goto L412550;
  #L41254e.  return v2 @kind object;
  #L412550.  v1:= "/" @kind object;
  #L412554.  call temp:= `lastIndexOf`(v2, v1) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L41255a.  v1:= temp;
  #L41255c.  if v1 <= v0 then goto L412562;
  #L412560.  return v2 @kind object;
  #L412562.  v1:= 0I;
  #L412564.  call temp:= `substring`(v2, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L41256a.  v2:= temp @kind object;
  #L41256c.  return v2 @kind object;
}
procedure `boolean` `substringMatch`(`java.lang.CharSequence` v4 @kind object, `int` v5 , `java.lang.CharSequence` v6 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.substringMatch:(Ljava/lang/CharSequence;ILjava/lang/CharSequence;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L411e30.  v0:= 0I;
  #L411e32.  v1:= 0I;
  #L411e34.  call temp:= `length`(v6) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411e3a.  v2:= temp;
  #L411e3c.  if v1 >= v2 then goto L411e6e;
  #L411e40.  v2:= v5 + v1 @kind int;
  #L411e44.  call temp:= `length`(v4) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L411e4a.  v3:= temp;
  #L411e4c.  if v2 >= v3 then goto L411e6c;
  #L411e50.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411e56.  v2:= temp;
  #L411e58.  call temp:= `charAt`(v6, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L411e5e.  v3:= temp;
  #L411e60.  if v2 == v3 then goto L411e66;
  #L411e64.  goto L411e6c;
  #L411e66.  v1:= v1 + 1;
  #L411e6a.  goto L411e34;
  #L411e6c.  return v0;
  #L411e6e.  v4:= 1I;
  #L411e70.  return v4;
}
procedure `java.lang.String` `toLanguageTag`(`java.util.Locale` v3 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.toLanguageTag:(Ljava/util/Locale;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412580.  v0:= new `java.lang.StringBuilder`;
  #L412584.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L41258a.  call temp:= `getLanguage`(v3) @signature `Ljava/util/Locale;.getLanguage:()Ljava/lang/String;` @kind virtual;
  #L412590.  v1:= temp @kind object;
  #L412592.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L412598.  call temp:= `getCountry`(v3) @signature `Ljava/util/Locale;.getCountry:()Ljava/lang/String;` @kind virtual;
  #L41259e.  v1:= temp @kind object;
  #L4125a0.  call temp:= `hasText`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.hasText:(Ljava/lang/String;)Z` @kind static;
  #L4125a6.  v1:= temp;
  #L4125a8.  if v1 == 0 then goto L4125d8;
  #L4125ac.  v1:= new `java.lang.StringBuilder`;
  #L4125b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4125b6.  v2:= "-" @kind object;
  #L4125ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4125c0.  call temp:= `getCountry`(v3) @signature `Ljava/util/Locale;.getCountry:()Ljava/lang/String;` @kind virtual;
  #L4125c6.  v3:= temp @kind object;
  #L4125c8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4125ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4125d4.  v3:= temp @kind object;
  #L4125d6.  goto L4125dc;
  #L4125d8.  v3:= "" @kind object;
  #L4125dc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4125e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4125e8.  v3:= temp @kind object;
  #L4125ea.  return v3 @kind object;
}
procedure `java.lang.String`[] `toStringArray`(`java.util.Collection` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Collection;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412b70.  if v1 != 0 then goto L412b78;
  #L412b74.  v1:= 0I;
  #L412b76.  return v1 @kind object;
  #L412b78.  call temp:= `size`(v1) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L412b7e.  v0:= temp;
  #L412b80.  v0:= new `java.lang.String`[v0];
  #L412b84.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L412b8a.  v1:= temp @kind object;
  #L412b8c.  v1:= (`java.lang.String`[]) v1 @kind object;
  #L412b90.  return v1 @kind object;
}
procedure `java.lang.String`[] `toStringArray`(`java.util.Enumeration` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Enumeration;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412ba4.  if v1 != 0 then goto L412bac;
  #L412ba8.  v1:= 0I;
  #L412baa.  return v1 @kind object;
  #L412bac.  call temp:= `list`(v1) @signature `Ljava/util/Collections;.list:(Ljava/util/Enumeration;)Ljava/util/ArrayList;` @kind static;
  #L412bb2.  v1:= temp @kind object;
  #L412bb4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L412bba.  v0:= temp;
  #L412bbc.  v0:= new `java.lang.String`[v0];
  #L412bc0.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L412bc6.  v1:= temp @kind object;
  #L412bc8.  v1:= (`java.lang.String`[]) v1 @kind object;
  #L412bcc.  return v1 @kind object;
}
procedure `java.lang.String`[] `tokenizeToStringArray`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412be0.  v0:= 1I;
  #L412be2.  call temp:= `tokenizeToStringArray`(v1, v2, v0, v0) @signature `Lio/jsonwebtoken/lang/Strings;.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;ZZ)[Ljava/lang/String;` @kind static;
  #L412be8.  v1:= temp @kind object;
  #L412bea.  return v1 @kind object;
}
procedure `java.lang.String`[] `tokenizeToStringArray`(`java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `boolean` v4 , `boolean` v5 ) @signature `Lio/jsonwebtoken/lang/Strings;.tokenizeToStringArray:(Ljava/lang/String;Ljava/lang/String;ZZ)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L412bfc.  if v2 != 0 then goto L412c04;
  #L412c00.  v2:= 0I;
  #L412c02.  return v2 @kind object;
  #L412c04.  v0:= new `java.util.StringTokenizer`;
  #L412c08.  call `<init>`(v0, v2, v3) @signature `Ljava/util/StringTokenizer;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L412c0e.  v2:= new `java.util.ArrayList`;
  #L412c12.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L412c18.  call temp:= `hasMoreTokens`(v0) @signature `Ljava/util/StringTokenizer;.hasMoreTokens:()Z` @kind virtual;
  #L412c1e.  v3:= temp;
  #L412c20.  if v3 == 0 then goto L412c50;
  #L412c24.  call temp:= `nextToken`(v0) @signature `Ljava/util/StringTokenizer;.nextToken:()Ljava/lang/String;` @kind virtual;
  #L412c2a.  v3:= temp @kind object;
  #L412c2c.  if v4 == 0 then goto L412c38;
  #L412c30.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L412c36.  v3:= temp @kind object;
  #L412c38.  if v5 == 0 then goto L412c48;
  #L412c3c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L412c42.  v1:= temp;
  #L412c44.  if v1 <= 0 then goto L412c18;
  #L412c48.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L412c4e.  goto L412c18;
  #L412c50.  call temp:= `toStringArray`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.toStringArray:(Ljava/util/Collection;)[Ljava/lang/String;` @kind static;
  #L412c56.  v2:= temp @kind object;
  #L412c58.  return v2 @kind object;
}
procedure `java.lang.String` `trimAllWhitespace`(`java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.trimAllWhitespace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4125fc.  call temp:= `hasLength`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412602.  v0:= temp;
  #L412604.  if v0 != 0 then goto L41260a;
  #L412608.  return v2 @kind object;
  #L41260a.  v0:= new `java.lang.StringBuilder`;
  #L41260e.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L412614.  v2:= 0I;
  #L412616.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41261c.  v1:= temp;
  #L41261e.  if v1 <= v2 then goto L412644;
  #L412622.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L412628.  v1:= temp;
  #L41262a.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L412630.  v1:= temp;
  #L412632.  if v1 == 0 then goto L41263e;
  #L412636.  call temp:= `deleteCharAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41263c.  goto L412616;
  #L41263e.  v2:= v2 + 1;
  #L412642.  goto L412616;
  #L412644.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L41264a.  v2:= temp @kind object;
  #L41264c.  return v2 @kind object;
}
procedure `java.lang.String`[] `trimArrayElements`(`java.lang.String`[] v3 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.trimArrayElements:([Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L412c6c.  call temp:= `isEmpty`(v3) @signature `Lio/jsonwebtoken/lang/Objects;.isEmpty:([Ljava/lang/Object;)Z` @kind static;
  #L412c72.  v0:= temp;
  #L412c74.  v1:= 0I;
  #L412c76.  if v0 == 0 then goto L412c80;
  #L412c7a.  v3:= new `java.lang.String`[v1];
  #L412c7e.  return v3 @kind object;
  #L412c80.  v0:= length @variable v3;
  #L412c82.  v0:= new `java.lang.String`[v0];
  #L412c86.  v2:= length @variable v3;
  #L412c88.  if v1 >= v2 then goto L412caa;
  #L412c8c.  v2:= v3[v1] @kind object;
  #L412c90.  if v2 == 0 then goto L412c9e;
  #L412c94.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L412c9a.  v2:= temp @kind object;
  #L412c9c.  goto L412ca0;
  #L412c9e.  v2:= 0I;
  #L412ca0.  v0[v1]:= v2 @kind object;
  #L412ca4.  v1:= v1 + 1;
  #L412ca8.  goto L412c86;
  #L412caa.  return v0 @kind object;
}
procedure `java.lang.String` `trimLeadingCharacter`(`java.lang.String` v2 @kind object, `char` v3 ) @signature `Lio/jsonwebtoken/lang/Strings;.trimLeadingCharacter:(Ljava/lang/String;C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L412660.  call temp:= `hasLength`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412666.  v0:= temp;
  #L412668.  if v0 != 0 then goto L41266e;
  #L41266c.  return v2 @kind object;
  #L41266e.  v0:= new `java.lang.StringBuilder`;
  #L412672.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L412678.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41267e.  v2:= temp;
  #L412680.  if v2 <= 0 then goto L41269a;
  #L412684.  v2:= 0I;
  #L412686.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L41268c.  v1:= temp;
  #L41268e.  if v1 != v3 then goto L41269a;
  #L412692.  call temp:= `deleteCharAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L412698.  goto L412678;
  #L41269a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4126a0.  v2:= temp @kind object;
  #L4126a2.  return v2 @kind object;
}
procedure `java.lang.String` `trimLeadingWhitespace`(`java.lang.String` v2 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.trimLeadingWhitespace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L4126b4.  call temp:= `hasLength`(v2) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L4126ba.  v0:= temp;
  #L4126bc.  if v0 != 0 then goto L4126c2;
  #L4126c0.  return v2 @kind object;
  #L4126c2.  v0:= new `java.lang.StringBuilder`;
  #L4126c6.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4126cc.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4126d2.  v2:= temp;
  #L4126d4.  if v2 <= 0 then goto L4126f6;
  #L4126d8.  v2:= 0I;
  #L4126da.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L4126e0.  v1:= temp;
  #L4126e2.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L4126e8.  v1:= temp;
  #L4126ea.  if v1 == 0 then goto L4126f6;
  #L4126ee.  call temp:= `deleteCharAt`(v0, v2) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4126f4.  goto L4126cc;
  #L4126f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4126fc.  v2:= temp @kind object;
  #L4126fe.  return v2 @kind object;
}
procedure `java.lang.String` `trimTrailingCharacter`(`java.lang.String` v1 @kind object, `char` v2 ) @signature `Lio/jsonwebtoken/lang/Strings;.trimTrailingCharacter:(Ljava/lang/String;C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412710.  call temp:= `hasLength`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412716.  v0:= temp;
  #L412718.  if v0 != 0 then goto L41271e;
  #L41271c.  return v1 @kind object;
  #L41271e.  v0:= new `java.lang.StringBuilder`;
  #L412722.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L412728.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41272e.  v1:= temp;
  #L412730.  if v1 <= 0 then goto L412760;
  #L412734.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41273a.  v1:= temp;
  #L41273c.  v1:= v1 + -1;
  #L412740.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L412746.  v1:= temp;
  #L412748.  if v1 != v2 then goto L412760;
  #L41274c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L412752.  v1:= temp;
  #L412754.  v1:= v1 + -1;
  #L412758.  call temp:= `deleteCharAt`(v0, v1) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L41275e.  goto L412728;
  #L412760.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L412766.  v1:= temp @kind object;
  #L412768.  return v1 @kind object;
}
procedure `java.lang.String` `trimTrailingWhitespace`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.trimTrailingWhitespace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41277c.  call temp:= `hasLength`(v1) @signature `Lio/jsonwebtoken/lang/Strings;.hasLength:(Ljava/lang/String;)Z` @kind static;
  #L412782.  v0:= temp;
  #L412784.  if v0 != 0 then goto L41278a;
  #L412788.  return v1 @kind object;
  #L41278a.  v0:= new `java.lang.StringBuilder`;
  #L41278e.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L412794.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L41279a.  v1:= temp;
  #L41279c.  if v1 <= 0 then goto L4127d4;
  #L4127a0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4127a6.  v1:= temp;
  #L4127a8.  v1:= v1 + -1;
  #L4127ac.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/StringBuilder;.charAt:(I)C` @kind virtual;
  #L4127b2.  v1:= temp;
  #L4127b4.  call temp:= `isWhitespace`(v1) @signature `Ljava/lang/Character;.isWhitespace:(C)Z` @kind static;
  #L4127ba.  v1:= temp;
  #L4127bc.  if v1 == 0 then goto L4127d4;
  #L4127c0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L4127c6.  v1:= temp;
  #L4127c8.  v1:= v1 + -1;
  #L4127cc.  call temp:= `deleteCharAt`(v0, v1) @signature `Ljava/lang/StringBuilder;.deleteCharAt:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L4127d2.  goto L412794;
  #L4127d4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4127da.  v1:= temp @kind object;
  #L4127dc.  return v1 @kind object;
}
procedure `java.lang.String` `trimWhitespace`(`java.lang.String` v0 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.trimWhitespace:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L4127f0.  call temp:= `b`(v0) @signature `Lio/jsonwebtoken/lang/Strings;.b:(Ljava/lang/CharSequence;)Ljava/lang/CharSequence;` @kind static;
  #L4127f6.  v0:= temp @kind object;
  #L4127f8.  v0:= (`java.lang.String`) v0 @kind object;
  #L4127fc.  return v0 @kind object;
}
procedure `java.lang.String` `uncapitalize`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.uncapitalize:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L412810.  v0:= 0I;
  #L412812.  call temp:= `a`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L412818.  v1:= temp @kind object;
  #L41281a.  return v1 @kind object;
}
procedure `java.lang.String` `unqualify`(`java.lang.String` v1 @kind object) @signature `Lio/jsonwebtoken/lang/Strings;.unqualify:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L41282c.  v0:= 46I;
  #L412830.  call temp:= `unqualify`(v1, v0) @signature `Lio/jsonwebtoken/lang/Strings;.unqualify:(Ljava/lang/String;C)Ljava/lang/String;` @kind static;
  #L412836.  v1:= temp @kind object;
  #L412838.  return v1 @kind object;
}
procedure `java.lang.String` `unqualify`(`java.lang.String` v0 @kind object, `char` v1 ) @signature `Lio/jsonwebtoken/lang/Strings;.unqualify:(Ljava/lang/String;C)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L41284c.  call temp:= `lastIndexOf`(v0, v1) @signature `Ljava/lang/String;.lastIndexOf:(I)I` @kind virtual;
  #L412852.  v1:= temp;
  #L412854.  v1:= v1 + 1;
  #L412858.  call temp:= `substring`(v0, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L41285e.  v0:= temp @kind object;
  #L412860.  return v0 @kind object;
}
