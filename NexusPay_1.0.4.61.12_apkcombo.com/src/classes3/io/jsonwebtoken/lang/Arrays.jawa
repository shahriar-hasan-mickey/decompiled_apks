record `io.jsonwebtoken.lang.Arrays` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<clinit>`() @signature `Lio/jsonwebtoken/lang/Arrays;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L40fd8c.  return @kind void;
}
procedure `void` `<init>`(`io.jsonwebtoken.lang.Arrays` v0 @kind this) @signature `Lio/jsonwebtoken/lang/Arrays;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L40fda0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40fda6.  return @kind void;
}
procedure `byte`[] `clean`(`byte`[] v1 @kind object) @signature `Lio/jsonwebtoken/lang/Arrays;.clean:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L40fd4c.  call temp:= `length`(v1) @signature `Lio/jsonwebtoken/lang/Arrays;.length:([B)I` @kind static;
  #L40fd52.  v0:= temp;
  #L40fd54.  if v0 <= 0 then goto L40fd5a;
  #L40fd58.  goto L40fd5c;
  #L40fd5a.  v1:= 0I;
  #L40fd5c.  return v1 @kind object;
}
procedure `int` `length`(`byte`[] v0 @kind object) @signature `Lio/jsonwebtoken/lang/Arrays;.length:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L40fd70.  if v0 == 0 then goto L40fd78;
  #L40fd74.  v0:= length @variable v0;
  #L40fd76.  goto L40fd7a;
  #L40fd78.  v0:= 0I;
  #L40fd7a.  return v0;
}
