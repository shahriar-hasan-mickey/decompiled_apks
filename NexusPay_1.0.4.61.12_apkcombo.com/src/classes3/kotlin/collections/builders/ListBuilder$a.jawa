record `kotlin.collections.builders.ListBuilder$a` @kind class @AccessFlag FINAL extends `java.util.ListIterator` @kind interface, `kotlin.jvm.internal.markers.KMutableListIterator` @kind interface {
  `kotlin.collections.builders.ListBuilder` `kotlin.collections.builders.ListBuilder$a.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.builders.ListBuilder$a.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.builders.ListBuilder$a.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this, `kotlin.collections.builders.ListBuilder` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/builders/ListBuilder$a;.<init>:(Lkotlin/collections/builders/ListBuilder;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L562cb4.  v0:= "list" @kind object;
  #L562cb8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L562cbe.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L562cc4.  v1.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` := v2 @kind object;
  #L562cc8.  v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v3;
  #L562ccc.  v2:= -1I;
  #L562cce.  v1.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v2;
  #L562cd2.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$a;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L562ce4.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562ce8.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562cec.  v2:= v1 + 1;
  #L562cf0.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v2;
  #L562cf4.  call `add`(v0, v1, v4) @signature `Lkotlin/collections/builders/ListBuilder;.add:(ILjava/lang/Object;)V` @kind virtual;
  #L562cfa.  v4:= -1I;
  #L562cfc.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v4;
  #L562d00.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.builders.ListBuilder$a` v2 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L562b7c.  v0:= v2.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562b80.  v1:= v2.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562b84.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L562b8a.  v1:= temp;
  #L562b8c.  if v0 >= v1 then goto L562b94;
  #L562b90.  v0:= 1I;
  #L562b92.  goto L562b96;
  #L562b94.  v0:= 0I;
  #L562b96.  return v0;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L562ba8.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562bac.  if v0 <= 0 then goto L562bb4;
  #L562bb0.  v0:= 1I;
  #L562bb2.  goto L562bb6;
  #L562bb4.  v0:= 0I;
  #L562bb6.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L562bfc.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562c00.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562c04.  call temp:= `access$getLength$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getLength$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L562c0a.  v1:= temp;
  #L562c0c.  if v0 >= v1 then goto L562c44;
  #L562c10.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562c14.  v1:= v0 + 1;
  #L562c18.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v1;
  #L562c1c.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v0;
  #L562c20.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562c24.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L562c2a.  v0:= temp @kind object;
  #L562c2c.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562c30.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L562c36.  v1:= temp;
  #L562c38.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562c3c.  v1:= v1 + v2 @kind int;
  #L562c3e.  v0:= v0[v1] @kind object;
  #L562c42.  return v0 @kind object;
  #L562c44.  v0:= new `java.util.NoSuchElementException`;
  #L562c48.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L562c4e.  throw v0;
}
procedure `int` `nextIndex`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L562bc8.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562bcc.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L562c60.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562c64.  if v0 <= 0 then goto L562c98;
  #L562c68.  v0:= v0 + -1;
  #L562c6c.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v0;
  #L562c70.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v0;
  #L562c74.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562c78.  call temp:= `access$getArray$p`(v0) @signature `Lkotlin/collections/builders/ListBuilder;.access$getArray$p:(Lkotlin/collections/builders/ListBuilder;)[Ljava/lang/Object;` @kind static;
  #L562c7e.  v0:= temp @kind object;
  #L562c80.  v1:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562c84.  call temp:= `access$getOffset$p`(v1) @signature `Lkotlin/collections/builders/ListBuilder;.access$getOffset$p:(Lkotlin/collections/builders/ListBuilder;)I` @kind static;
  #L562c8a.  v1:= temp;
  #L562c8c.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562c90.  v1:= v1 + v2 @kind int;
  #L562c92.  v0:= v0[v1] @kind object;
  #L562c96.  return v0 @kind object;
  #L562c98.  v0:= new `java.util.NoSuchElementException`;
  #L562c9c.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L562ca2.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.builders.ListBuilder$a` v1 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L562be0.  v0:= v1.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int`;
  #L562be4.  v0:= v0 + -1;
  #L562be8.  return v0;
}
procedure `void` `remove`(`kotlin.collections.builders.ListBuilder$a` v3 @kind this) @signature `Lkotlin/collections/builders/ListBuilder$a;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L562d14.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562d18.  v1:= -1I;
  #L562d1a.  if v0 == v1 then goto L562d22;
  #L562d1e.  v0:= 1I;
  #L562d20.  goto L562d24;
  #L562d22.  v0:= 0I;
  #L562d24.  if v0 == 0 then goto L562d44;
  #L562d28.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562d2c.  v2:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562d30.  call temp:= `remove`(v0, v2) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L562d36.  v0:= v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562d3a.  v3.`kotlin.collections.builders.ListBuilder$a.b` @type ^`int` := v0;
  #L562d3e.  v3.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int` := v1;
  #L562d42.  return @kind void;
  #L562d44.  v0:= new `java.lang.IllegalStateException`;
  #L562d48.  v1:= "Call next() or previous() before removing element from the iterator." @kind object;
  #L562d4c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L562d52.  v1:= temp @kind object;
  #L562d54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L562d5a.  throw v0;
}
procedure `void` `set`(`kotlin.collections.builders.ListBuilder$a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/builders/ListBuilder$a;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L562d6c.  v0:= v2.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562d70.  v1:= -1I;
  #L562d72.  if v0 == v1 then goto L562d7a;
  #L562d76.  v0:= 1I;
  #L562d78.  goto L562d7c;
  #L562d7a.  v0:= 0I;
  #L562d7c.  if v0 == 0 then goto L562d90;
  #L562d80.  v0:= v2.`kotlin.collections.builders.ListBuilder$a.a` @type ^`kotlin.collections.builders.ListBuilder` @kind object;
  #L562d84.  v1:= v2.`kotlin.collections.builders.ListBuilder$a.c` @type ^`int`;
  #L562d88.  call temp:= `set`(v0, v1, v3) @signature `Lkotlin/collections/builders/ListBuilder;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L562d8e.  return @kind void;
  #L562d90.  v3:= new `java.lang.IllegalStateException`;
  #L562d94.  v0:= "Call next() or previous() before replacing element from the iterator." @kind object;
  #L562d98.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L562d9e.  v0:= temp @kind object;
  #L562da0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L562da6.  throw v3;
}
