record `kotlin.collections.AbstractIterator` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `kotlin.collections.b0` `kotlin.collections.AbstractIterator.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.collections.AbstractIterator.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L532468.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53246e.  v0:= `@@kotlin.collections.b0.NotReady` @type ^`kotlin.collections.b0` @kind object;
  #L532472.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` := v0 @kind object;
  #L532476.  return @kind void;
}
procedure `boolean` `b`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.b:()Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L5323fc.  v0:= `@@kotlin.collections.b0.Failed` @type ^`kotlin.collections.b0` @kind object;
  #L532400.  v2.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` := v0 @kind object;
  #L532404.  call `computeNext`(v2) @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @kind virtual;
  #L53240a.  v0:= v2.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` @kind object;
  #L53240e.  v1:= `@@kotlin.collections.b0.Ready` @type ^`kotlin.collections.b0` @kind object;
  #L532412.  if v0 != v1 then goto L53241a;
  #L532416.  v0:= 1I;
  #L532418.  goto L53241c;
  #L53241a.  v0:= 0I;
  #L53241c.  return v0;
}
procedure `void` `computeNext`() @signature `Lkotlin/collections/AbstractIterator;.computeNext:()V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `done`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;

  #L532488.  v0:= `@@kotlin.collections.b0.Done` @type ^`kotlin.collections.b0` @kind object;
  #L53248c.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` := v0 @kind object;
  #L532490.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractIterator` v4 @kind this) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53238c.  v0:= v4.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` @kind object;
  #L532390.  v1:= `@@kotlin.collections.b0.Failed` @type ^`kotlin.collections.b0` @kind object;
  #L532394.  v2:= 0I;
  #L532396.  v3:= 1I;
  #L532398.  if v0 == v1 then goto L5323a0;
  #L53239c.  v0:= 1I;
  #L53239e.  goto L5323a2;
  #L5323a0.  v0:= 0I;
  #L5323a2.  if v0 == 0 then goto L5323d2;
  #L5323a6.  v0:= v4.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` @kind object;
  #L5323aa.  v1:= `@@kotlin.collections.AbstractIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L5323ae.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L5323b4.  v0:= temp;
  #L5323b6.  v0:= v1[v0];
  #L5323ba.  if v0 == v3 then goto L5323d0;
  #L5323be.  v1:= 2I;
  #L5323c0.  if v0 == v1 then goto L5323ce;
  #L5323c4.  call temp:= `b`(v4) @signature `Lkotlin/collections/AbstractIterator;.b:()Z` @kind direct;
  #L5323ca.  v2:= temp;
  #L5323cc.  goto L5323d0;
  #L5323ce.  v2:= 1I;
  #L5323d0.  return v2;
  #L5323d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L5323d6.  v1:= "Failed requirement." @kind object;
  #L5323da.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L5323e0.  v1:= temp @kind object;
  #L5323e2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5323e8.  throw v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractIterator` v1 @kind this) @signature `Lkotlin/collections/AbstractIterator;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532430.  call temp:= `hasNext`(v1) @signature `Lkotlin/collections/AbstractIterator;.hasNext:()Z` @kind virtual;
  #L532436.  v0:= temp;
  #L532438.  if v0 == 0 then goto L53244a;
  #L53243c.  v0:= `@@kotlin.collections.b0.NotReady` @type ^`kotlin.collections.b0` @kind object;
  #L532440.  v1.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` := v0 @kind object;
  #L532444.  v0:= v1.`kotlin.collections.AbstractIterator.b` @type ^`java.lang.Object` @kind object;
  #L532448.  return v0 @kind object;
  #L53244a.  v0:= new `java.util.NoSuchElementException`;
  #L53244e.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L532454.  throw v0;
}
procedure `void` `remove`(`kotlin.collections.AbstractIterator` v2 @kind this) @signature `Lkotlin/collections/AbstractIterator;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5324a4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L5324a8.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L5324ac.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5324b2.  throw v0;
}
procedure `void` `setNext`(`kotlin.collections.AbstractIterator` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @AccessFlag PROTECTED_FINAL {
    temp;

  #L5324c4.  v0.`kotlin.collections.AbstractIterator.b` @type ^`java.lang.Object` := v1 @kind object;
  #L5324c8.  v1:= `@@kotlin.collections.b0.Ready` @type ^`kotlin.collections.b0` @kind object;
  #L5324cc.  v0.`kotlin.collections.AbstractIterator.a` @type ^`kotlin.collections.b0` := v1 @kind object;
  #L5324d0.  return @kind void;
}
