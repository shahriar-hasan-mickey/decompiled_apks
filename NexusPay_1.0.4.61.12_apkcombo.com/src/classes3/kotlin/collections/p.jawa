record `kotlin.collections.p` @kind class @AccessFlag FINAL extends `kotlin.collections.o` @kind interface {
  `java.util.Map` `kotlin.collections.p.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.jvm.functions.Function1` `kotlin.collections.p.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.p` v1 @kind this, `java.util.Map` v2 @kind object, `kotlin.jvm.functions.Function1` v3 @kind object) @signature `Lkotlin/collections/p;.<init>:(Ljava/util/Map;Lkotlin/jvm/functions/Function1;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L55ef4c.  v0:= "map" @kind object;
  #L55ef50.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L55ef56.  v0:= "default" @kind object;
  #L55ef5a.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L55ef60.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55ef66.  v1.`kotlin.collections.p.a` @type ^`java.util.Map` := v2 @kind object;
  #L55ef6a.  v1.`kotlin.collections.p.b` @type ^`kotlin.jvm.functions.Function1` := v3 @kind object;
  #L55ef6e.  return @kind void;
}
procedure `java.lang.Object` `a`(`kotlin.collections.p` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/p;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55edd0.  call temp:= `getMap`(v2) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55edd6.  v0:= temp @kind object;
  #L55edd8.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L55edde.  v1:= temp @kind object;
  #L55ede0.  if v1 != 0 then goto L55edfc;
  #L55ede4.  call temp:= `containsKey`(v0, v3) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L55edea.  v0:= temp;
  #L55edec.  if v0 != 0 then goto L55edfc;
  #L55edf0.  v0:= v2.`kotlin.collections.p.b` @type ^`kotlin.jvm.functions.Function1` @kind object;
  #L55edf4.  call temp:= `invoke`(v0, v3) @signature `Lkotlin/jvm/functions/Function1;.invoke:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L55edfa.  v1:= temp @kind object;
  #L55edfc.  return v1 @kind object;
}
procedure `java.util.Set` `b`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.b:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55eee8.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55eeee.  v0:= temp @kind object;
  #L55eef0.  call temp:= `entrySet`(v0) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L55eef6.  v0:= temp @kind object;
  #L55eef8.  return v0 @kind object;
}
procedure `java.util.Set` `c`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.c:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ef0c.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ef12.  v0:= temp @kind object;
  #L55ef14.  call temp:= `keySet`(v0) @signature `Ljava/util/Map;.keySet:()Ljava/util/Set;` @kind interface;
  #L55ef1a.  v0:= temp @kind object;
  #L55ef1c.  return v0 @kind object;
}
procedure `void` `clear`(`kotlin.collections.p` v2 @kind this) @signature `Lkotlin/collections/p;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55ef80.  v0:= new `java.lang.UnsupportedOperationException`;
  #L55ef84.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L55ef88.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55ef8e.  throw v0;
}
procedure `boolean` `containsKey`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ecb8.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ecbe.  v0:= temp @kind object;
  #L55ecc0.  call temp:= `containsKey`(v0, v2) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L55ecc6.  v2:= temp;
  #L55ecc8.  return v2;
}
procedure `boolean` `containsValue`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ecdc.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ece2.  v0:= temp @kind object;
  #L55ece4.  call temp:= `containsValue`(v0, v2) @signature `Ljava/util/Map;.containsValue:(Ljava/lang/Object;)Z` @kind interface;
  #L55ecea.  v2:= temp;
  #L55ecec.  return v2;
}
procedure `int` `d`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.d:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ed48.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ed4e.  v0:= temp @kind object;
  #L55ed50.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L55ed56.  v0:= temp;
  #L55ed58.  return v0;
}
procedure `java.util.Collection` `e`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.e:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ee74.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ee7a.  v0:= temp @kind object;
  #L55ee7c.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L55ee82.  v0:= temp @kind object;
  #L55ee84.  return v0 @kind object;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55eecc.  call temp:= `b`(v1) @signature `Lkotlin/collections/p;.b:()Ljava/util/Set;` @kind virtual;
  #L55eed2.  v0:= temp @kind object;
  #L55eed4.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ed00.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ed06.  v0:= temp @kind object;
  #L55ed08.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L55ed0e.  v2:= temp;
  #L55ed10.  return v2;
}
procedure `java.lang.Object` `get`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55edac.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55edb2.  v0:= temp @kind object;
  #L55edb4.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L55edba.  v2:= temp @kind object;
  #L55edbc.  return v2 @kind object;
}
procedure `java.util.Map` `getMap`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55eeb4.  v0:= v1.`kotlin.collections.p.a` @type ^`java.util.Map` @kind object;
  #L55eeb8.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ed6c.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ed72.  v0:= temp @kind object;
  #L55ed74.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L55ed7a.  v0:= temp;
  #L55ed7c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ed24.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ed2a.  v0:= temp @kind object;
  #L55ed2c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L55ed32.  v0:= temp;
  #L55ed34.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55ef30.  call temp:= `c`(v1) @signature `Lkotlin/collections/p;.c:()Ljava/util/Set;` @kind virtual;
  #L55ef36.  v0:= temp @kind object;
  #L55ef38.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.p` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L55ee10.  v1:= new `java.lang.UnsupportedOperationException`;
  #L55ee14.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L55ee18.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55ee1e.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.p` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/p;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55efa0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55efa4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55efa8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55efae.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.p` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/p;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ee30.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55ee34.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55ee38.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55ee3e.  throw v2;
}
procedure `int` `size`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55ed90.  call temp:= `d`(v1) @signature `Lkotlin/collections/p;.d:()I` @kind virtual;
  #L55ed96.  v0:= temp;
  #L55ed98.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55ee50.  call temp:= `getMap`(v1) @signature `Lkotlin/collections/p;.getMap:()Ljava/util/Map;` @kind virtual;
  #L55ee56.  v0:= temp @kind object;
  #L55ee58.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L55ee5e.  v0:= temp @kind object;
  #L55ee60.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.p` v1 @kind this) @signature `Lkotlin/collections/p;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55ee98.  call temp:= `e`(v1) @signature `Lkotlin/collections/p;.e:()Ljava/util/Collection;` @kind virtual;
  #L55ee9e.  v0:= temp @kind object;
  #L55eea0.  return v0 @kind object;
}
