record `kotlin.collections.RingBuffer` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `int` `kotlin.collections.RingBuffer.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.collections.RingBuffer.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer.c` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.collections.RingBuffer.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/RingBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56124c.  v2:= new `java.lang.Object`[v2];
  #L561250.  v0:= 0I;
  #L561252.  call `<init>`(v1, v2, v0) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L561258.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer` v2 @kind this, `java.lang.Object`[] v3 @kind object, `int` v4 ) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L56126c.  v0:= "buffer" @kind object;
  #L561270.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L561276.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L56127c.  v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] := v3 @kind object;
  #L561280.  v3:= 1I;
  #L561282.  v0:= 0I;
  #L561284.  if v4 < 0 then goto L56128c;
  #L561288.  v1:= 1I;
  #L56128a.  goto L56128e;
  #L56128c.  v1:= 0I;
  #L56128e.  if v1 == 0 then goto L561300;
  #L561292.  v1:= v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L561296.  v1:= length @variable v1;
  #L561298.  if v4 > v1 then goto L56129e;
  #L56129c.  goto L5612a0;
  #L56129e.  v3:= 0I;
  #L5612a0.  if v3 == 0 then goto L5612b4;
  #L5612a4.  v3:= v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5612a8.  v3:= length @variable v3;
  #L5612aa.  v2.`kotlin.collections.RingBuffer.a` @type ^`int` := v3;
  #L5612ae.  v2.`kotlin.collections.RingBuffer.c` @type ^`int` := v4;
  #L5612b2.  return @kind void;
  #L5612b4.  v3:= new `java.lang.StringBuilder`;
  #L5612b8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5612be.  v0:= "ring buffer filled size: " @kind object;
  #L5612c2.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5612c8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L5612ce.  v4:= " cannot be larger than the buffer size: " @kind object;
  #L5612d2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L5612d8.  v4:= v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5612dc.  v4:= length @variable v4;
  #L5612de.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L5612e4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5612ea.  v3:= temp @kind object;
  #L5612ec.  v4:= new `java.lang.IllegalArgumentException`;
  #L5612f0.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L5612f6.  v3:= temp @kind object;
  #L5612f8.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5612fe.  throw v4;
  #L561300.  v3:= new `java.lang.StringBuilder`;
  #L561304.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56130a.  v0:= "ring buffer filled size should not be negative but it is " @kind object;
  #L56130e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L561314.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L56131a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L561320.  v3:= temp @kind object;
  #L561322.  v4:= new `java.lang.IllegalArgumentException`;
  #L561326.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L56132c.  v3:= temp @kind object;
  #L56132e.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L561334.  throw v4;
}
procedure `java.lang.Object`[] `b`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.b:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L5610c8.  v0:= v0.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5610cc.  return v0 @kind object;
}
procedure `int` `c`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L561044.  v0:= v0.`kotlin.collections.RingBuffer.a` @type ^`int`;
  #L561048.  return v0;
}
procedure `int` `d`(`kotlin.collections.RingBuffer` v0 @kind object) @signature `Lkotlin/collections/RingBuffer;.d:(Lkotlin/collections/RingBuffer;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L56105c.  v0:= v0.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L561060.  return v0;
}
procedure `void` `e`(`kotlin.collections.RingBuffer` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/RingBuffer;.e:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L561348.  call temp:= `g`(v3) @signature `Lkotlin/collections/RingBuffer;.g:()Z` @kind virtual;
  #L56134e.  v0:= temp;
  #L561350.  if v0 != 0 then goto L561386;
  #L561354.  v0:= v3.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L561358.  v1:= v3.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L56135c.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561362.  v2:= temp;
  #L561364.  v1:= v1 + v2 @kind int;
  #L561366.  call temp:= `c`(v3) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L56136c.  v2:= temp;
  #L56136e.  v1:= v1 %% v2 @kind int;
  #L561370.  v0[v1]:= v4 @kind object;
  #L561374.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L56137a.  v4:= temp;
  #L56137c.  v4:= v4 + 1;
  #L561380.  v3.`kotlin.collections.RingBuffer.c` @type ^`int` := v4;
  #L561384.  return @kind void;
  #L561386.  v4:= new `java.lang.IllegalStateException`;
  #L56138a.  v0:= "ring buffer is full" @kind object;
  #L56138e.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L561394.  throw v4;
}
procedure `kotlin.collections.RingBuffer` `f`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.f:(I)Lkotlin/collections/RingBuffer;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L5611e4.  v0:= v2.`kotlin.collections.RingBuffer.a` @type ^`int`;
  #L5611e8.  v1:= v0 ^> 1;
  #L5611ec.  v0:= v0 + v1 @kind int;
  #L5611ee.  v0:= v0 + 1;
  #L5611f2.  call temp:= `coerceAtMost`(v0, v3) @signature `Lkotlin/ranges/RangesKt;.coerceAtMost:(II)I` @kind static;
  #L5611f8.  v3:= temp;
  #L5611fa.  v0:= v2.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L5611fe.  if v0 != 0 then goto L56121a;
  #L561202.  v0:= v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L561206.  call temp:= `copyOf`(v0, v3) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L56120c.  v3:= temp @kind object;
  #L56120e.  v0:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L561212.  call `checkNotNullExpressionValue`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L561218.  goto L561226;
  #L56121a.  v3:= new `java.lang.Object`[v3];
  #L56121e.  call temp:= `toArray`(v2, v3) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L561224.  v3:= temp @kind object;
  #L561226.  v0:= new `kotlin.collections.RingBuffer`;
  #L56122a.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561230.  v1:= temp;
  #L561232.  call `<init>`(v0, v3, v1) @signature `Lkotlin/collections/RingBuffer;.<init>:([Ljava/lang/Object;I)V` @kind direct;
  #L561238.  return v0 @kind object;
}
procedure `boolean` `g`(`kotlin.collections.RingBuffer` v2 @kind this) @signature `Lkotlin/collections/RingBuffer;.g:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L56101c.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561022.  v0:= temp;
  #L561024.  v1:= v2.`kotlin.collections.RingBuffer.a` @type ^`int`;
  #L561028.  if v0 != v1 then goto L561030;
  #L56102c.  v0:= 1I;
  #L56102e.  goto L561032;
  #L561030.  v0:= 0I;
  #L561032.  return v0;
}
procedure `java.lang.Object` `get`(`kotlin.collections.RingBuffer` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/RingBuffer;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56108c.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L561090.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561096.  v1:= temp;
  #L561098.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L56109e.  v0:= v2.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5610a2.  v1:= v2.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L5610a6.  v1:= v1 + v3 @kind int;
  #L5610a8.  call temp:= `c`(v2) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L5610ae.  v3:= temp;
  #L5610b0.  v1:= v1 %% v3 @kind int;
  #L5610b2.  v3:= v0[v1] @kind object;
  #L5610b6.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L561074.  v0:= v1.`kotlin.collections.RingBuffer.c` @type ^`int`;
  #L561078.  return v0;
}
procedure `void` `h`(`kotlin.collections.RingBuffer` v6 @kind this, `int` v7 ) @signature `Lkotlin/collections/RingBuffer;.h:(I)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L5613a8.  v0:= 1I;
  #L5613aa.  v1:= 0I;
  #L5613ac.  if v7 < 0 then goto L5613b4;
  #L5613b0.  v2:= 1I;
  #L5613b2.  goto L5613b6;
  #L5613b4.  v2:= 0I;
  #L5613b6.  if v2 == 0 then goto L561470;
  #L5613ba.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L5613c0.  v2:= temp;
  #L5613c2.  if v7 > v2 then goto L5613c8;
  #L5613c6.  goto L5613ca;
  #L5613c8.  v0:= 0I;
  #L5613ca.  if v0 == 0 then goto L561422;
  #L5613ce.  if v7 <= 0 then goto L561420;
  #L5613d2.  v0:= v6.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L5613d6.  v2:= v0 + v7 @kind int;
  #L5613da.  call temp:= `c`(v6) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L5613e0.  v3:= temp;
  #L5613e2.  v2:= v2 %% v3 @kind int;
  #L5613e4.  v3:= 0I;
  #L5613e6.  if v0 <= v2 then goto L561404;
  #L5613ea.  v4:= v6.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5613ee.  v5:= v6.`kotlin.collections.RingBuffer.a` @type ^`int`;
  #L5613f2.  call `fill`(v4, v3, v0, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L5613f8.  v0:= v6.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L5613fc.  call `fill`(v0, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L561402.  goto L56140e;
  #L561404.  v1:= v6.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L561408.  call `fill`(v1, v3, v0, v2) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L56140e.  v6.`kotlin.collections.RingBuffer.b` @type ^`int` := v2;
  #L561412.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561418.  v0:= temp;
  #L56141a.  v0:= v0 - v7 @kind int;
  #L56141c.  v6.`kotlin.collections.RingBuffer.c` @type ^`int` := v0;
  #L561420.  return @kind void;
  #L561422.  v0:= new `java.lang.StringBuilder`;
  #L561426.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56142c.  v1:= "n shouldn't be greater than the buffer size: n = " @kind object;
  #L561430.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L561436.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L56143c.  v7:= ", size = " @kind object;
  #L561440.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L561446.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L56144c.  v7:= temp;
  #L56144e.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L561454.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L56145a.  v7:= temp @kind object;
  #L56145c.  v0:= new `java.lang.IllegalArgumentException`;
  #L561460.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L561466.  v7:= temp @kind object;
  #L561468.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56146e.  throw v0;
  #L561470.  v0:= new `java.lang.StringBuilder`;
  #L561474.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56147a.  v1:= "n shouldn't be negative but it is " @kind object;
  #L56147e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L561484.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L56148a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L561490.  v7:= temp @kind object;
  #L561492.  v0:= new `java.lang.IllegalArgumentException`;
  #L561496.  call temp:= `toString`(v7) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L56149c.  v7:= temp @kind object;
  #L56149e.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5614a4.  throw v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5611c8.  v0:= new `kotlin.collections.RingBuffer$iterator$1`;
  #L5611cc.  call `<init>`(v0, v1) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @kind direct;
  #L5611d2.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v1 @kind this) @signature `Lkotlin/collections/RingBuffer;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5610e0.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L5610e6.  v0:= temp;
  #L5610e8.  v0:= new `java.lang.Object`[v0];
  #L5610ec.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L5610f2.  v0:= temp @kind object;
  #L5610f4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.RingBuffer` v5 @kind this, `java.lang.Object`[] v6 @kind object) @signature `Lkotlin/collections/RingBuffer;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L561108.  v0:= "array" @kind object;
  #L56110c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L561112.  v0:= length @variable v6;
  #L561114.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L56111a.  v1:= temp;
  #L56111c.  if v0 >= v1 then goto L56113a;
  #L561120.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561126.  v0:= temp;
  #L561128.  call temp:= `copyOf`(v6, v0) @signature `Ljava/util/Arrays;.copyOf:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L56112e.  v6:= temp @kind object;
  #L561130.  v0:= "java.util.Arrays.copyOf(this, newSize)" @kind object;
  #L561134.  call `checkNotNullExpressionValue`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56113a.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L561140.  v0:= temp;
  #L561142.  v1:= v5.`kotlin.collections.RingBuffer.b` @type ^`int`;
  #L561146.  v2:= 0I;
  #L561148.  v3:= 0I;
  #L56114a.  if v3 >= v0 then goto L56116c;
  #L56114e.  v4:= v5.`kotlin.collections.RingBuffer.a` @type ^`int`;
  #L561152.  if v1 >= v4 then goto L56116c;
  #L561156.  v4:= v5.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L56115a.  v4:= v4[v1] @kind object;
  #L56115e.  v6[v3]:= v4 @kind object;
  #L561162.  v3:= v3 + 1;
  #L561166.  v1:= v1 + 1;
  #L56116a.  goto L56114a;
  #L56116c.  if v3 >= v0 then goto L561186;
  #L561170.  v1:= v5.`kotlin.collections.RingBuffer.d` @type ^`java.lang.Object`[] @kind object;
  #L561174.  v1:= v1[v2] @kind object;
  #L561178.  v6[v3]:= v1 @kind object;
  #L56117c.  v3:= v3 + 1;
  #L561180.  v2:= v2 + 1;
  #L561184.  goto L56116c;
  #L561186.  v0:= length @variable v6;
  #L561188.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L56118e.  v1:= temp;
  #L561190.  if v0 <= v1 then goto L5611a2;
  #L561194.  call temp:= `size`(v5) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L56119a.  v0:= temp;
  #L56119c.  v1:= 0I;
  #L56119e.  v6[v0]:= v1 @kind object;
  #L5611a2.  if v6 == 0 then goto L5611a8;
  #L5611a6.  return v6 @kind object;
  #L5611a8.  v6:= new `java.lang.NullPointerException`;
  #L5611ac.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L5611b0.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5611b6.  throw v6;
}
