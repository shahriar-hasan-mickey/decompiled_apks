record `kotlin.collections.AbstractMap` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Map` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Set` `kotlin.collections.AbstractMap.a` @AccessFlag PRIVATE_VOLATILE;
  `java.util.Collection` `kotlin.collections.AbstractMap.b` @AccessFlag PRIVATE_VOLATILE;
}
global `kotlin.collections.AbstractMap$Companion` `@@kotlin.collections.AbstractMap.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractMap;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5334c0.  v0:= new `kotlin.collections.AbstractMap$Companion`;
  #L5334c4.  v1:= 0I;
  #L5334c6.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L5334cc.  `@@kotlin.collections.AbstractMap.Companion` @type ^`kotlin.collections.AbstractMap$Companion` := v0 @kind object;
  #L5334d0.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractMap` v0 @kind this) @signature `Lkotlin/collections/AbstractMap;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L5334e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5334ea.  return @kind void;
}
procedure `java.lang.String` `access$toString`(`kotlin.collections.AbstractMap` v0 @kind object, `java.util.Map$Entry` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.access$toString:(Lkotlin/collections/AbstractMap;Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L5332cc.  call temp:= `d`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.d:(Ljava/util/Map$Entry;)Ljava/lang/String;` @kind direct;
  #L5332d2.  v0:= temp @kind object;
  #L5332d4.  return v0 @kind object;
}
procedure `java.util.Map$Entry` `b`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L5333fc.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L533402.  v0:= temp @kind object;
  #L533404.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L53340a.  v0:= temp @kind object;
  #L53340c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L533412.  v1:= temp;
  #L533414.  if v1 == 0 then goto L53343c;
  #L533418.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L53341e.  v1:= temp @kind object;
  #L533420.  v2:= v1 @kind object;
  #L533422.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L533426.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L53342c.  v2:= temp @kind object;
  #L53342e.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L533434.  v2:= temp;
  #L533436.  if v2 == 0 then goto L53340c;
  #L53343a.  goto L53343e;
  #L53343c.  v1:= 0I;
  #L53343e.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L533442.  return v1 @kind object;
}
procedure `java.lang.String` `c`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;

  #L53332c.  if v1 != v0 then goto L533336;
  #L533330.  v1:= "(this Map)" @kind object;
  #L533334.  goto L53333e;
  #L533336.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L53333c.  v1:= temp @kind object;
  #L53333e.  return v1 @kind object;
}
procedure `java.lang.String` `d`(`kotlin.collections.AbstractMap` v2 @kind this, `java.util.Map$Entry` v3 @kind object) @signature `Lkotlin/collections/AbstractMap;.d:(Ljava/util/Map$Entry;)Ljava/lang/String;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L533350.  v0:= new `java.lang.StringBuilder`;
  #L533354.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L53335a.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L533360.  v1:= temp @kind object;
  #L533362.  call temp:= `c`(v2, v1) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L533368.  v1:= temp @kind object;
  #L53336a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533370.  v1:= "=" @kind object;
  #L533374.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53337a.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L533380.  v3:= temp @kind object;
  #L533382.  call temp:= `c`(v2, v3) @signature `Lkotlin/collections/AbstractMap;.c:(Ljava/lang/Object;)Ljava/lang/String;` @kind direct;
  #L533388.  v3:= temp @kind object;
  #L53338a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L533390.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L533396.  v3:= temp @kind object;
  #L533398.  return v3 @kind object;
}
procedure `void` `clear`(`kotlin.collections.AbstractMap` v2 @kind this) @signature `Lkotlin/collections/AbstractMap;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5334fc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L533500.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L533504.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53350a.  throw v0;
}
procedure `boolean` `containsEntry$kotlin_stdlib`(`kotlin.collections.AbstractMap` v4 @kind this, `java.util.Map$Entry` v5 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L533064.  v0:= instanceof @variable v5 @type ^`java.util.Map$Entry` @kind boolean;
  #L533068.  v1:= 0I;
  #L53306a.  if v0 != 0 then goto L533070;
  #L53306e.  return v1;
  #L533070.  call temp:= `getKey`(v5) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L533076.  v0:= temp @kind object;
  #L533078.  call temp:= `getValue`(v5) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L53307e.  v5:= temp @kind object;
  #L533080.  call temp:= `get`(v4, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L533086.  v2:= temp @kind object;
  #L533088.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L53308e.  v5:= temp;
  #L533090.  v3:= 1I;
  #L533092.  v5:= v5 ^~ v3 @kind int;
  #L533094.  if v5 == 0 then goto L53309a;
  #L533098.  return v1;
  #L53309a.  if v2 != 0 then goto L5330ac;
  #L53309e.  call temp:= `containsKey`(v4, v0) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L5330a4.  v5:= temp;
  #L5330a6.  if v5 != 0 then goto L5330ac;
  #L5330aa.  return v1;
  #L5330ac.  return v3;
}
procedure `boolean` `containsKey`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L5330c0.  call temp:= `b`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L5330c6.  v1:= temp @kind object;
  #L5330c8.  if v1 == 0 then goto L5330d0;
  #L5330cc.  v1:= 1I;
  #L5330ce.  goto L5330d2;
  #L5330d0.  v1:= 0I;
  #L5330d2.  return v1;
}
procedure `boolean` `containsValue`(`kotlin.collections.AbstractMap` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractMap;.containsValue:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L5330e4.  call temp:= `entrySet`(v3) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L5330ea.  v0:= temp @kind object;
  #L5330ec.  v1:= instanceof @variable v0 @type ^`java.util.Collection` @kind boolean;
  #L5330f0.  v2:= 0I;
  #L5330f2.  if v1 == 0 then goto L533104;
  #L5330f6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L5330fc.  v1:= temp;
  #L5330fe.  if v1 == 0 then goto L533104;
  #L533102.  goto L53313a;
  #L533104.  call temp:= `iterator`(v0) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L53310a.  v0:= temp @kind object;
  #L53310c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L533112.  v1:= temp;
  #L533114.  if v1 == 0 then goto L53313a;
  #L533118.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L53311e.  v1:= temp @kind object;
  #L533120.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L533124.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L53312a.  v1:= temp @kind object;
  #L53312c.  call temp:= `areEqual`(v1, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L533132.  v1:= temp;
  #L533134.  if v1 == 0 then goto L53310c;
  #L533138.  v2:= 1I;
  #L53313a.  return v2;
}
procedure `java.util.Set` `entrySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L533454.  call temp:= `getEntries`(v1) @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @kind virtual;
  #L53345a.  v0:= temp @kind object;
  #L53345c.  return v0 @kind object;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractMap` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/AbstractMap;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L53314c.  v0:= 1I;
  #L53314e.  if v5 != v4 then goto L533154;
  #L533152.  return v0;
  #L533154.  v1:= instanceof @variable v5 @type ^`java.util.Map` @kind boolean;
  #L533158.  v2:= 0I;
  #L53315a.  if v1 != 0 then goto L533160;
  #L53315e.  return v2;
  #L533160.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L533166.  v1:= temp;
  #L533168.  v5:= (`java.util.Map`) v5 @kind object;
  #L53316c.  call temp:= `size`(v5) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L533172.  v3:= temp;
  #L533174.  if v1 == v3 then goto L53317a;
  #L533178.  return v2;
  #L53317a.  call temp:= `entrySet`(v5) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L533180.  v5:= temp @kind object;
  #L533182.  v1:= instanceof @variable v5 @type ^`java.util.Collection` @kind boolean;
  #L533186.  if v1 == 0 then goto L533198;
  #L53318a.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L533190.  v1:= temp;
  #L533192.  if v1 == 0 then goto L533198;
  #L533196.  goto L5331c6;
  #L533198.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L53319e.  v5:= temp @kind object;
  #L5331a0.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5331a6.  v1:= temp;
  #L5331a8.  if v1 == 0 then goto L5331c6;
  #L5331ac.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5331b2.  v1:= temp @kind object;
  #L5331b4.  v1:= (`java.util.Map$Entry`) v1 @kind object;
  #L5331b8.  call temp:= `containsEntry$kotlin_stdlib`(v4, v1) @signature `Lkotlin/collections/AbstractMap;.containsEntry$kotlin_stdlib:(Ljava/util/Map$Entry;)Z` @kind virtual;
  #L5331be.  v1:= temp;
  #L5331c0.  if v1 != 0 then goto L5331a0;
  #L5331c4.  v0:= 0I;
  #L5331c6.  return v0;
}
procedure `java.lang.Object` `get`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/AbstractMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L533260.  call temp:= `b`(v0, v1) @signature `Lkotlin/collections/AbstractMap;.b:(Ljava/lang/Object;)Ljava/util/Map$Entry;` @kind direct;
  #L533266.  v1:= temp @kind object;
  #L533268.  if v1 == 0 then goto L533276;
  #L53326c.  call temp:= `getValue`(v1) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L533272.  v1:= temp @kind object;
  #L533274.  goto L533278;
  #L533276.  v1:= 0I;
  #L533278.  return v1 @kind object;
}
procedure `java.util.Set` `getEntries`() @signature `Lkotlin/collections/AbstractMap;.getEntries:()Ljava/util/Set;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.util.Set` `getKeys`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533470.  v0:= v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` @kind object;
  #L533474.  if v0 != 0 then goto L533486;
  #L533478.  v0:= new `kotlin.collections.AbstractMap$keys$1`;
  #L53347c.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$keys$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L533482.  v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` := v0 @kind object;
  #L533486.  v0:= v1.`kotlin.collections.AbstractMap.a` @type ^`java.util.Set` @kind object;
  #L53348a.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L533490.  return v0 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5331fc.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L533202.  v0:= temp @kind object;
  #L533204.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L53320a.  v0:= temp;
  #L53320c.  return v0;
}
procedure `java.util.Collection` `getValues`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5333ac.  v0:= v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` @kind object;
  #L5333b0.  if v0 != 0 then goto L5333c2;
  #L5333b4.  v0:= new `kotlin.collections.AbstractMap$values$1`;
  #L5333b8.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractMap$values$1;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L5333be.  v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` := v0 @kind object;
  #L5333c2.  v0:= v1.`kotlin.collections.AbstractMap.b` @type ^`java.util.Collection` @kind object;
  #L5333c6.  call `checkNotNull`(v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L5333cc.  return v0 @kind object;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533220.  call temp:= `entrySet`(v1) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L533226.  v0:= temp @kind object;
  #L533228.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L53322e.  v0:= temp;
  #L533230.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5331d8.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMap;.size:()I` @kind virtual;
  #L5331de.  v0:= temp;
  #L5331e0.  if v0 != 0 then goto L5331e8;
  #L5331e4.  v0:= 1I;
  #L5331e6.  goto L5331ea;
  #L5331e8.  v0:= 0I;
  #L5331ea.  return v0;
}
procedure `java.util.Set` `keySet`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5334a4.  call temp:= `getKeys`(v1) @signature `Lkotlin/collections/AbstractMap;.getKeys:()Ljava/util/Set;` @kind virtual;
  #L5334aa.  v0:= temp @kind object;
  #L5334ac.  return v0 @kind object;
}
procedure `java.lang.Object` `put`(`kotlin.collections.AbstractMap` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L53328c.  v1:= new `java.lang.UnsupportedOperationException`;
  #L533290.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L533294.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53329a.  throw v1;
}
procedure `void` `putAll`(`kotlin.collections.AbstractMap` v1 @kind this, `java.util.Map` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.putAll:(Ljava/util/Map;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53351c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L533520.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L533524.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53352a.  throw v2;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractMap` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5332ac.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5332b0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5332b4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5332ba.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L533244.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractMap;.getSize:()I` @kind virtual;
  #L53324a.  v0:= temp;
  #L53324c.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractMap` v9 @kind this) @signature `Lkotlin/collections/AbstractMap;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5332e8.  call temp:= `entrySet`(v9) @signature `Lkotlin/collections/AbstractMap;.entrySet:()Ljava/util/Set;` @kind virtual;
  #L5332ee.  v0:= temp @kind object;
  #L5332f0.  v6:= new `kotlin.collections.AbstractMap$a`;
  #L5332f4.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractMap$a;.<init>:(Lkotlin/collections/AbstractMap;)V` @kind direct;
  #L5332fa.  v1:= ", " @kind object;
  #L5332fe.  v2:= "{" @kind object;
  #L533302.  v3:= "}" @kind object;
  #L533306.  v4:= 0I;
  #L533308.  v5:= 0I;
  #L53330a.  v7:= 24I;
  #L53330e.  v8:= 0I;
  #L533310.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L533316.  v0:= temp @kind object;
  #L533318.  return v0 @kind object;
}
procedure `java.util.Collection` `values`(`kotlin.collections.AbstractMap` v1 @kind this) @signature `Lkotlin/collections/AbstractMap;.values:()Ljava/util/Collection;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5333e0.  call temp:= `getValues`(v1) @signature `Lkotlin/collections/AbstractMap;.getValues:()Ljava/util/Collection;` @kind virtual;
  #L5333e6.  v0:= temp @kind object;
  #L5333e8.  return v0 @kind object;
}
