record `kotlin.collections.AbstractSet` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.collections.AbstractCollection` @kind class, `java.util.Set` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.AbstractSet$Companion` `@@kotlin.collections.AbstractSet.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractSet;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L533810.  v0:= new `kotlin.collections.AbstractSet$Companion`;
  #L533814.  v1:= 0I;
  #L533816.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractSet$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L53381c.  `@@kotlin.collections.AbstractSet.Companion` @type ^`kotlin.collections.AbstractSet$Companion` := v0 @kind object;
  #L533820.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractSet` v0 @kind this) @signature `Lkotlin/collections/AbstractSet;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L533834.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L53383a.  return @kind void;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractSet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractSet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533798.  if v2 != v1 then goto L5337a0;
  #L53379c.  v2:= 1I;
  #L53379e.  return v2;
  #L5337a0.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L5337a4.  if v0 != 0 then goto L5337ac;
  #L5337a8.  v2:= 0I;
  #L5337aa.  return v2;
  #L5337ac.  v0:= `@@kotlin.collections.AbstractSet.Companion` @type ^`kotlin.collections.AbstractSet$Companion` @kind object;
  #L5337b0.  v2:= (`java.util.Set`) v2 @kind object;
  #L5337b4.  call temp:= `setEquals$kotlin_stdlib`(v0, v1, v2) @signature `Lkotlin/collections/AbstractSet$Companion;.setEquals$kotlin_stdlib:(Ljava/util/Set;Ljava/util/Set;)Z` @kind virtual;
  #L5337ba.  v2:= temp;
  #L5337bc.  return v2;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractSet` v1 @kind this) @signature `Lkotlin/collections/AbstractSet;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5337d0.  v0:= `@@kotlin.collections.AbstractSet.Companion` @type ^`kotlin.collections.AbstractSet$Companion` @kind object;
  #L5337d4.  call temp:= `unorderedHashCode$kotlin_stdlib`(v0, v1) @signature `Lkotlin/collections/AbstractSet$Companion;.unorderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @kind virtual;
  #L5337da.  v0:= temp;
  #L5337dc.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.AbstractSet` v2 @kind this) @signature `Lkotlin/collections/AbstractSet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5337f0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L5337f4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L5337f8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5337fe.  throw v0;
}
