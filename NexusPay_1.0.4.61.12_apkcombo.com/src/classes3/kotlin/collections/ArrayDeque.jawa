record `kotlin.collections.ArrayDeque` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractMutableList` @kind class {
  `int` `kotlin.collections.ArrayDeque.a` @AccessFlag PRIVATE;
  `java.lang.Object`[] `kotlin.collections.ArrayDeque.b` @AccessFlag PRIVATE;
  `int` `kotlin.collections.ArrayDeque.c` @AccessFlag PRIVATE;
}
global `kotlin.collections.ArrayDeque$Companion` `@@kotlin.collections.ArrayDeque.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.Object`[] `@@kotlin.collections.ArrayDeque.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/ArrayDeque;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L53491c.  v0:= new `kotlin.collections.ArrayDeque$Companion`;
  #L534920.  v1:= 0I;
  #L534922.  call `<init>`(v0, v1) @signature `Lkotlin/collections/ArrayDeque$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L534928.  `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` := v0 @kind object;
  #L53492c.  v0:= 0I;
  #L53492e.  v0:= new `java.lang.Object`[v0];
  #L534932.  `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L534936.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L534948.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L53494e.  v0:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L534952.  v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v0 @kind object;
  #L534956.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v3 @kind this, `int` v4 ) @signature `Lkotlin/collections/ArrayDeque;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L534968.  call `<init>`(v3) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L53496e.  if v4 != 0 then goto L534978;
  #L534972.  v4:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L534976.  goto L534980;
  #L534978.  if v4 <= 0 then goto L534986;
  #L53497c.  v4:= new `java.lang.Object`[v4];
  #L534980.  v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v4 @kind object;
  #L534984.  return @kind void;
  #L534986.  v0:= new `java.lang.IllegalArgumentException`;
  #L53498a.  v1:= new `java.lang.StringBuilder`;
  #L53498e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L534994.  v2:= "Illegal Capacity: " @kind object;
  #L534998.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53499e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L5349a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L5349aa.  v4:= temp @kind object;
  #L5349ac.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5349b2.  throw v0;
}
procedure `void` `<init>`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L5349c4.  v0:= "elements" @kind object;
  #L5349c8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5349ce.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractMutableList;.<init>:()V` @kind direct;
  #L5349d4.  v0:= 0I;
  #L5349d6.  v1:= new `java.lang.Object`[v0];
  #L5349da.  call temp:= `toArray`(v3, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L5349e0.  v3:= temp @kind object;
  #L5349e2.  if v3 == 0 then goto L534a06;
  #L5349e6.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L5349ea.  v1:= length @variable v3;
  #L5349ec.  v2.`kotlin.collections.ArrayDeque.c` @type ^`int` := v1;
  #L5349f0.  v3:= length @variable v3;
  #L5349f2.  if v3 != 0 then goto L5349f8;
  #L5349f6.  v0:= 1I;
  #L5349f8.  if v0 == 0 then goto L534a04;
  #L5349fc.  v3:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L534a00.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L534a04.  return @kind void;
  #L534a06.  v3:= new `java.lang.NullPointerException`;
  #L534a0a.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L534a0e.  call `<init>`(v3, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L534a14.  throw v3;
}
procedure `java.lang.Object`[] `access$getElementData$p`(`kotlin.collections.ArrayDeque` v0 @kind object) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L5347b0.  v0:= v0.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5347b4.  return v0 @kind object;
}
procedure `int` `access$getHead$p`(`kotlin.collections.ArrayDeque` v0 @kind object) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L5340d8.  v0:= v0.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5340dc.  return v0;
}
procedure `int` `access$getSize$p`(`kotlin.collections.ArrayDeque` v0 @kind object) @signature `Lkotlin/collections/ArrayDeque;.access$getSize$p:(Lkotlin/collections/ArrayDeque;)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L5340f0.  call temp:= `size`(v0) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L5340f6.  v0:= temp;
  #L5340f8.  return v0;
}
procedure `int` `access$incremented`(`kotlin.collections.ArrayDeque` v0 @kind object, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.access$incremented:(Lkotlin/collections/ArrayDeque;I)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L53410c.  call temp:= `f`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L534112.  v0:= temp;
  #L534114.  return v0;
}
procedure `int` `access$negativeMod`(`kotlin.collections.ArrayDeque` v0 @kind object, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.access$negativeMod:(Lkotlin/collections/ArrayDeque;I)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L534128.  call temp:= `g`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @kind direct;
  #L53412e.  v0:= temp;
  #L534130.  return v0;
}
procedure `int` `access$positiveMod`(`kotlin.collections.ArrayDeque` v0 @kind object, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L534144.  call temp:= `h`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @kind direct;
  #L53414a.  v0:= temp;
  #L53414c.  return v0;
}
procedure `void` `access$setElementData$p`(`kotlin.collections.ArrayDeque` v0 @kind object, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/collections/ArrayDeque;.access$setElementData$p:(Lkotlin/collections/ArrayDeque;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L534a28.  v0.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v1 @kind object;
  #L534a2c.  return @kind void;
}
procedure `void` `access$setHead$p`(`kotlin.collections.ArrayDeque` v0 @kind object, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.access$setHead$p:(Lkotlin/collections/ArrayDeque;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L534a40.  v0.`kotlin.collections.ArrayDeque.a` @type ^`int` := v1;
  #L534a44.  return @kind void;
}
procedure `void` `access$setSize$p`(`kotlin.collections.ArrayDeque` v0 @kind object, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.access$setSize$p:(Lkotlin/collections/ArrayDeque;I)V` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;

  #L534a58.  v0.`kotlin.collections.ArrayDeque.c` @type ^`int` := v1;
  #L534a5c.  return @kind void;
}
procedure `void` `b`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 , `java.util.Collection` v6 @kind object) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L534ce4.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L534cea.  v0:= temp @kind object;
  #L534cec.  v1:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534cf0.  v1:= length @variable v1;
  #L534cf2.  if v5 >= v1 then goto L534d1a;
  #L534cf6.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L534cfc.  v2:= temp;
  #L534cfe.  if v2 != 0 then goto L534d04;
  #L534d02.  goto L534d1a;
  #L534d04.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534d08.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L534d0e.  v3:= temp @kind object;
  #L534d10.  v2[v5]:= v3 @kind object;
  #L534d14.  v5:= v5 + 1;
  #L534d18.  goto L534cf2;
  #L534d1a.  v5:= 0I;
  #L534d1c.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534d20.  if v5 >= v1 then goto L534d48;
  #L534d24.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L534d2a.  v2:= temp;
  #L534d2c.  if v2 != 0 then goto L534d32;
  #L534d30.  goto L534d48;
  #L534d32.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534d36.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L534d3c.  v3:= temp @kind object;
  #L534d3e.  v2[v5]:= v3 @kind object;
  #L534d42.  v5:= v5 + 1;
  #L534d46.  goto L534d20;
  #L534d48.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534d4e.  v5:= temp;
  #L534d50.  call temp:= `size`(v6) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L534d56.  v6:= temp;
  #L534d58.  v5:= v5 + v6 @kind int;
  #L534d5a.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v5;
  #L534d5e.  return @kind void;
}
procedure `void` `c`(`kotlin.collections.ArrayDeque` v4 @kind this, `int` v5 ) @signature `Lkotlin/collections/ArrayDeque;.c:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L534d70.  v5:= new `java.lang.Object`[v5];
  #L534d74.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534d78.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534d7c.  v2:= length @variable v0;
  #L534d7e.  v3:= 0I;
  #L534d80.  call temp:= `copyInto`(v0, v5, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534d86.  v0:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534d8a.  v1:= length @variable v0;
  #L534d8c.  v2:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534d90.  v1:= v1 - v2 @kind int;
  #L534d92.  call temp:= `copyInto`(v0, v5, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534d98.  v4.`kotlin.collections.ArrayDeque.a` @type ^`int` := v3;
  #L534d9c.  v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v5 @kind object;
  #L534da0.  return @kind void;
}
procedure `int` `d`(`kotlin.collections.ArrayDeque` v0 @kind this, `int` v1 ) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;

  #L534160.  if v1 != 0 then goto L534172;
  #L534164.  v1:= v0.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534168.  call temp:= `getLastIndex`(v1) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L53416e.  v1:= temp;
  #L534170.  goto L534176;
  #L534172.  v1:= v1 + -1;
  #L534176.  return v1;
}
procedure `void` `e`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L534db4.  if v3 < 0 then goto L534df8;
  #L534db8.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534dbc.  v1:= length @variable v0;
  #L534dbe.  if v3 > v1 then goto L534dc4;
  #L534dc2.  return @kind void;
  #L534dc4.  v1:= `@@kotlin.collections.ArrayDeque.d` @type ^`java.lang.Object`[] @kind object;
  #L534dc8.  if v0 != v1 then goto L534de2;
  #L534dcc.  v0:= 10I;
  #L534dd0.  call temp:= `coerceAtLeast`(v3, v0) @signature `Lkotlin/ranges/RangesKt;.coerceAtLeast:(II)I` @kind static;
  #L534dd6.  v3:= temp;
  #L534dd8.  v3:= new `java.lang.Object`[v3];
  #L534ddc.  v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] := v3 @kind object;
  #L534de0.  return @kind void;
  #L534de2.  v1:= `@@kotlin.collections.ArrayDeque.Companion` @type ^`kotlin.collections.ArrayDeque$Companion` @kind object;
  #L534de6.  v0:= length @variable v0;
  #L534de8.  call temp:= `newCapacity$kotlin_stdlib`(v1, v0, v3) @signature `Lkotlin/collections/ArrayDeque$Companion;.newCapacity$kotlin_stdlib:(II)I` @kind virtual;
  #L534dee.  v3:= temp;
  #L534df0.  call `c`(v2, v3) @signature `Lkotlin/collections/ArrayDeque;.c:(I)V` @kind direct;
  #L534df6.  return @kind void;
  #L534df8.  v3:= new `java.lang.IllegalStateException`;
  #L534dfc.  v0:= "Deque is too big." @kind object;
  #L534e00.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L534e06.  throw v3;
}
procedure `int` `f`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L5341a0.  v0:= v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5341a4.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L5341aa.  v0:= temp;
  #L5341ac.  if v2 != v0 then goto L5341b4;
  #L5341b0.  v2:= 0I;
  #L5341b2.  goto L5341b8;
  #L5341b4.  v2:= v2 + 1;
  #L5341b8.  return v2;
}
procedure `int` `g`(`kotlin.collections.ArrayDeque` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L534354.  if v2 >= 0 then goto L534360;
  #L534358.  v0:= v1.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53435c.  v0:= length @variable v0;
  #L53435e.  v2:= v2 + v0 @kind int;
  #L534360.  return v2;
}
procedure `int` `h`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.h:(I)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L534374.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534378.  v1:= length @variable v0;
  #L53437a.  if v3 < v1 then goto L534382;
  #L53437e.  v0:= length @variable v0;
  #L534380.  v3:= v3 - v0 @kind int;
  #L534382.  return v3;
}
procedure `void` `add`(`kotlin.collections.ArrayDeque` v7 @kind this, `int` v8 , `java.lang.Object` v9 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L534a70.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L534a74.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534a7a.  v1:= temp;
  #L534a7c.  call `checkPositionIndex$kotlin_stdlib`(v0, v8, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L534a82.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534a88.  v0:= temp;
  #L534a8a.  if v8 != v0 then goto L534a96;
  #L534a8e.  call `addLast`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L534a94.  return @kind void;
  #L534a96.  if v8 != 0 then goto L534aa2;
  #L534a9a.  call `addFirst`(v7, v9) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @kind virtual;
  #L534aa0.  return @kind void;
  #L534aa2.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534aa8.  v0:= temp;
  #L534aaa.  v1:= 1I;
  #L534aac.  v0:= v0 + v1 @kind int;
  #L534aae.  call `e`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L534ab4.  call temp:= `access$getHead$p`(v7) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534aba.  v0:= temp;
  #L534abc.  v0:= v0 + v8 @kind int;
  #L534abe.  call temp:= `access$positiveMod`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534ac4.  v0:= temp;
  #L534ac6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534acc.  v2:= temp;
  #L534ace.  v2:= v2 + v1 @kind int;
  #L534ad0.  v2:= v2 ^> v1 @kind int;
  #L534ad2.  v3:= 0I;
  #L534ad4.  if v8 >= v2 then goto L534b48;
  #L534ad8.  call temp:= `d`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L534ade.  v8:= temp;
  #L534ae0.  v0:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534ae4.  call temp:= `d`(v7, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L534aea.  v0:= temp;
  #L534aec.  v2:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534af0.  if v8 < v2 then goto L534b10;
  #L534af4.  v3:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534af8.  v4:= v3[v2] @kind object;
  #L534afc.  v3[v0]:= v4 @kind object;
  #L534b00.  v4:= v2 + 1;
  #L534b04.  v5:= v8 + 1;
  #L534b08.  call temp:= `copyInto`(v3, v3, v2, v4, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b0e.  goto L534b3a;
  #L534b10.  v4:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b14.  v5:= v2 + -1;
  #L534b18.  v6:= length @variable v4;
  #L534b1a.  call temp:= `copyInto`(v4, v4, v5, v2, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b20.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b24.  v4:= length @variable v2;
  #L534b26.  v4:= v4 - v1 @kind int;
  #L534b28.  v5:= v2[v3] @kind object;
  #L534b2c.  v2[v4]:= v5 @kind object;
  #L534b30.  v4:= v8 + 1;
  #L534b34.  call temp:= `copyInto`(v2, v2, v3, v1, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b3a.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b3e.  v2[v8]:= v9 @kind object;
  #L534b42.  v7.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L534b46.  goto L534ba6;
  #L534b48.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534b4e.  v8:= temp;
  #L534b50.  call temp:= `access$getHead$p`(v7) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534b56.  v2:= temp;
  #L534b58.  v2:= v2 + v8 @kind int;
  #L534b5a.  call temp:= `access$positiveMod`(v7, v2) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534b60.  v8:= temp;
  #L534b62.  if v0 >= v8 then goto L534b76;
  #L534b66.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b6a.  v3:= v0 + 1;
  #L534b6e.  call temp:= `copyInto`(v2, v2, v3, v0, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b74.  goto L534b9e;
  #L534b76.  v2:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b7a.  call temp:= `copyInto`(v2, v2, v1, v3, v8) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b80.  v8:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534b84.  v2:= length @variable v8;
  #L534b86.  v2:= v2 - v1 @kind int;
  #L534b88.  v2:= v8[v2] @kind object;
  #L534b8c.  v8[v3]:= v2 @kind object;
  #L534b90.  v2:= v0 + 1;
  #L534b94.  v3:= length @variable v8;
  #L534b96.  v3:= v3 - v1 @kind int;
  #L534b98.  call temp:= `copyInto`(v8, v8, v2, v0, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534b9e.  v8:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534ba2.  v8[v0]:= v9 @kind object;
  #L534ba6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534bac.  v8:= temp;
  #L534bae.  v8:= v8 + v1 @kind int;
  #L534bb0.  v7.`kotlin.collections.ArrayDeque.c` @type ^`int` := v8;
  #L534bb4.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.ArrayDeque` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/collections/ArrayDeque;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L533adc.  call `addLast`(v0, v1) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @kind virtual;
  #L533ae2.  v1:= 1I;
  #L533ae4.  return v1;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 , `java.util.Collection` v10 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L533af8.  v0:= "elements" @kind object;
  #L533afc.  call `checkNotNullParameter`(v10, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L533b02.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L533b06.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533b0c.  v1:= temp;
  #L533b0e.  call `checkPositionIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L533b14.  call temp:= `isEmpty`(v10) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L533b1a.  v0:= temp;
  #L533b1c.  v1:= 0I;
  #L533b1e.  if v0 == 0 then goto L533b24;
  #L533b22.  return v1;
  #L533b24.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533b2a.  v0:= temp;
  #L533b2c.  if v9 != v0 then goto L533b3a;
  #L533b30.  call temp:= `addAll`(v8, v10) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @kind virtual;
  #L533b36.  v9:= temp;
  #L533b38.  return v9;
  #L533b3a.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533b40.  v0:= temp;
  #L533b42.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L533b48.  v2:= temp;
  #L533b4a.  v0:= v0 + v2 @kind int;
  #L533b4c.  call `e`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L533b52.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533b58.  v0:= temp;
  #L533b5a.  call temp:= `access$getHead$p`(v8) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533b60.  v2:= temp;
  #L533b62.  v2:= v2 + v0 @kind int;
  #L533b64.  call temp:= `access$positiveMod`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533b6a.  v0:= temp;
  #L533b6c.  call temp:= `access$getHead$p`(v8) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533b72.  v2:= temp;
  #L533b74.  v2:= v2 + v9 @kind int;
  #L533b76.  call temp:= `access$positiveMod`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533b7c.  v2:= temp;
  #L533b7e.  call temp:= `size`(v10) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L533b84.  v3:= temp;
  #L533b86.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533b8c.  v4:= temp;
  #L533b8e.  v5:= 1I;
  #L533b90.  v4:= v4 + v5 @kind int;
  #L533b92.  v4:= v4 ^> v5 @kind int;
  #L533b94.  if v9 >= v4 then goto L533c3a;
  #L533b98.  v9:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L533b9c.  v0:= v9 - v3 @kind int;
  #L533ba0.  if v2 < v9 then goto L533bec;
  #L533ba4.  if v0 < 0 then goto L533bb4;
  #L533ba8.  v1:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533bac.  call temp:= `copyInto`(v1, v1, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533bb2.  goto L533c24;
  #L533bb4.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533bb8.  v6:= length @variable v4;
  #L533bba.  v0:= v0 + v6 @kind int;
  #L533bbc.  v6:= v2 - v9 @kind int;
  #L533bc0.  v7:= length @variable v4;
  #L533bc2.  v7:= v7 - v0 @kind int;
  #L533bc4.  if v7 < v6 then goto L533bd0;
  #L533bc8.  call temp:= `copyInto`(v4, v4, v0, v9, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533bce.  goto L533c24;
  #L533bd0.  v6:= v9 + v7 @kind int;
  #L533bd4.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533bda.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533bde.  v4:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L533be2.  v4:= v4 + v7 @kind int;
  #L533be4.  call temp:= `copyInto`(v9, v9, v1, v4, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533bea.  goto L533c24;
  #L533bec.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533bf0.  v6:= length @variable v4;
  #L533bf2.  call temp:= `copyInto`(v4, v4, v0, v9, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533bf8.  if v3 < v2 then goto L533c0c;
  #L533bfc.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c00.  v4:= length @variable v9;
  #L533c02.  v4:= v4 - v3 @kind int;
  #L533c04.  call temp:= `copyInto`(v9, v9, v4, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c0a.  goto L533c24;
  #L533c0c.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c10.  v4:= length @variable v9;
  #L533c12.  v4:= v4 - v3 @kind int;
  #L533c14.  call temp:= `copyInto`(v9, v9, v4, v1, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c1a.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c1e.  call temp:= `copyInto`(v9, v9, v1, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c24.  v8.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L533c28.  v2:= v2 - v3 @kind int;
  #L533c2a.  call temp:= `g`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.g:(I)I` @kind direct;
  #L533c30.  v9:= temp;
  #L533c32.  call `b`(v8, v9, v10) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L533c38.  goto L533cc4;
  #L533c3a.  v9:= v2 + v3 @kind int;
  #L533c3e.  if v2 >= v0 then goto L533c82;
  #L533c42.  v3:= v3 + v0 @kind int;
  #L533c44.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c48.  v6:= length @variable v4;
  #L533c4a.  if v3 > v6 then goto L533c56;
  #L533c4e.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c54.  goto L533cbe;
  #L533c56.  v6:= length @variable v4;
  #L533c58.  if v9 < v6 then goto L533c68;
  #L533c5c.  v1:= length @variable v4;
  #L533c5e.  v9:= v9 - v1 @kind int;
  #L533c60.  call temp:= `copyInto`(v4, v4, v9, v2, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c66.  goto L533cbe;
  #L533c68.  v6:= length @variable v4;
  #L533c6a.  v3:= v3 - v6 @kind int;
  #L533c6c.  v3:= v0 - v3 @kind int;
  #L533c70.  call temp:= `copyInto`(v4, v4, v1, v3, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c76.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c7a.  call temp:= `copyInto`(v0, v0, v9, v2, v3) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c80.  goto L533cbe;
  #L533c82.  v4:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c86.  call temp:= `copyInto`(v4, v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533c8c.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533c90.  v4:= length @variable v0;
  #L533c92.  if v9 < v4 then goto L533ca4;
  #L533c96.  v1:= length @variable v0;
  #L533c98.  v9:= v9 - v1 @kind int;
  #L533c9a.  v1:= length @variable v0;
  #L533c9c.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533ca2.  goto L533cbe;
  #L533ca4.  v4:= length @variable v0;
  #L533ca6.  v4:= v4 - v3 @kind int;
  #L533ca8.  v6:= length @variable v0;
  #L533caa.  call temp:= `copyInto`(v0, v0, v1, v4, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533cb0.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L533cb4.  v1:= length @variable v0;
  #L533cb6.  v1:= v1 - v3 @kind int;
  #L533cb8.  call temp:= `copyInto`(v0, v0, v9, v2, v1) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L533cbe.  call `b`(v8, v2, v10) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L533cc4.  return v5;
}
procedure `boolean` `addAll`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L533cd8.  v0:= "elements" @kind object;
  #L533cdc.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L533ce2.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L533ce8.  v0:= temp;
  #L533cea.  if v0 == 0 then goto L533cf2;
  #L533cee.  v3:= 0I;
  #L533cf0.  return v3;
  #L533cf2.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533cf8.  v0:= temp;
  #L533cfa.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L533d00.  v1:= temp;
  #L533d02.  v0:= v0 + v1 @kind int;
  #L533d04.  call `e`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L533d0a.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533d10.  v0:= temp;
  #L533d12.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533d18.  v1:= temp;
  #L533d1a.  v1:= v1 + v0 @kind int;
  #L533d1c.  call temp:= `access$positiveMod`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533d22.  v0:= temp;
  #L533d24.  call `b`(v2, v0, v3) @signature `Lkotlin/collections/ArrayDeque;.b:(ILjava/util/Collection;)V` @kind direct;
  #L533d2a.  v3:= 1I;
  #L533d2c.  return v3;
}
procedure `void` `addFirst`(`kotlin.collections.ArrayDeque` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addFirst:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L534bc8.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534bce.  v0:= temp;
  #L534bd0.  v0:= v0 + 1;
  #L534bd4.  call `e`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L534bda.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534bde.  call temp:= `d`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.d:(I)I` @kind direct;
  #L534be4.  v0:= temp;
  #L534be6.  v2.`kotlin.collections.ArrayDeque.a` @type ^`int` := v0;
  #L534bea.  v1:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534bee.  v1[v0]:= v3 @kind object;
  #L534bf2.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534bf8.  v3:= temp;
  #L534bfa.  v3:= v3 + 1;
  #L534bfe.  v2.`kotlin.collections.ArrayDeque.c` @type ^`int` := v3;
  #L534c02.  return @kind void;
}
procedure `void` `addLast`(`kotlin.collections.ArrayDeque` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.addLast:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L534c14.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534c1a.  v0:= temp;
  #L534c1c.  v0:= v0 + 1;
  #L534c20.  call `e`(v3, v0) @signature `Lkotlin/collections/ArrayDeque;.e:(I)V` @kind direct;
  #L534c26.  v0:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534c2a.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534c30.  v1:= temp;
  #L534c32.  call temp:= `access$getHead$p`(v3) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534c38.  v2:= temp;
  #L534c3a.  v2:= v2 + v1 @kind int;
  #L534c3c.  call temp:= `access$positiveMod`(v3, v2) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534c42.  v1:= temp;
  #L534c44.  v0[v1]:= v4 @kind object;
  #L534c48.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534c4e.  v4:= temp;
  #L534c50.  v4:= v4 + 1;
  #L534c54.  v3.`kotlin.collections.ArrayDeque.c` @type ^`int` := v4;
  #L534c58.  return @kind void;
}
procedure `void` `clear`(`kotlin.collections.ArrayDeque` v6 @kind this) @signature `Lkotlin/collections/ArrayDeque;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L534c6c.  call temp:= `size`(v6) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534c72.  v0:= temp;
  #L534c74.  call temp:= `access$getHead$p`(v6) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534c7a.  v1:= temp;
  #L534c7c.  v1:= v1 + v0 @kind int;
  #L534c7e.  call temp:= `access$positiveMod`(v6, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534c84.  v0:= temp;
  #L534c86.  v1:= v6.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534c8a.  v2:= 0I;
  #L534c8c.  v3:= 0I;
  #L534c8e.  if v1 >= v0 then goto L534c9e;
  #L534c92.  v4:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534c96.  call `fill`(v4, v3, v1, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L534c9c.  goto L534cc8;
  #L534c9e.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L534ca4.  v1:= temp;
  #L534ca6.  v1:= v1 ^~ 1;
  #L534caa.  if v1 == 0 then goto L534cc8;
  #L534cae.  v1:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534cb2.  v4:= v6.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534cb6.  v5:= length @variable v1;
  #L534cb8.  call `fill`(v1, v3, v4, v5) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L534cbe.  v1:= v6.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534cc2.  call `fill`(v1, v3, v2, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L534cc8.  v6.`kotlin.collections.ArrayDeque.a` @type ^`int` := v2;
  #L534ccc.  v6.`kotlin.collections.ArrayDeque.c` @type ^`int` := v2;
  #L534cd0.  return @kind void;
}
procedure `boolean` `contains`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533d40.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L533d46.  v2:= temp;
  #L533d48.  v0:= -1I;
  #L533d4a.  if v2 == v0 then goto L533d52;
  #L533d4e.  v2:= 1I;
  #L533d50.  goto L533d54;
  #L533d52.  v2:= 0I;
  #L533d54.  return v2;
}
procedure `java.lang.Object` `first`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L534394.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L53439a.  v0:= temp;
  #L53439c.  if v0 != 0 then goto L5343b2;
  #L5343a0.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5343a4.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L5343aa.  v1:= temp @kind object;
  #L5343ac.  v0:= v1[v0] @kind object;
  #L5343b0.  return v0 @kind object;
  #L5343b2.  v0:= new `java.util.NoSuchElementException`;
  #L5343b6.  v1:= "ArrayDeque is empty." @kind object;
  #L5343ba.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5343c0.  throw v0;
}
procedure `java.lang.Object` `firstOrNull`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.firstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L5343d4.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L5343da.  v0:= temp;
  #L5343dc.  if v0 == 0 then goto L5343e4;
  #L5343e0.  v0:= 0I;
  #L5343e2.  goto L5343f4;
  #L5343e4.  v0:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5343e8.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L5343ee.  v1:= temp @kind object;
  #L5343f0.  v0:= v1[v0] @kind object;
  #L5343f4.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/ArrayDeque;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534408.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L53440c.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534412.  v1:= temp;
  #L534414.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L53441a.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534420.  v0:= temp;
  #L534422.  v0:= v0 + v3 @kind int;
  #L534424.  call temp:= `access$positiveMod`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L53442a.  v3:= temp;
  #L53442c.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534432.  v0:= temp @kind object;
  #L534434.  v3:= v0[v3] @kind object;
  #L534438.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L534188.  v0:= v1.`kotlin.collections.ArrayDeque.c` @type ^`int`;
  #L53418c.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.ArrayDeque` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5341cc.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L5341d2.  v0:= temp;
  #L5341d4.  call temp:= `access$getHead$p`(v4) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L5341da.  v1:= temp;
  #L5341dc.  v1:= v1 + v0 @kind int;
  #L5341de.  call temp:= `access$positiveMod`(v4, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L5341e4.  v0:= temp;
  #L5341e6.  v1:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5341ea.  if v1 >= v0 then goto L534214;
  #L5341ee.  if v1 >= v0 then goto L534270;
  #L5341f2.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5341f6.  v2:= v2[v1] @kind object;
  #L5341fa.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L534200.  v2:= temp;
  #L534202.  if v2 == 0 then goto L53420e;
  #L534206.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L53420a.  v1:= v1 - v5 @kind int;
  #L53420c.  return v1;
  #L53420e.  v1:= v1 + 1;
  #L534212.  goto L5341ee;
  #L534214.  if v1 < v0 then goto L534270;
  #L534218.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53421c.  v2:= length @variable v2;
  #L53421e.  if v1 >= v2 then goto L534242;
  #L534222.  v3:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534226.  v3:= v3[v1] @kind object;
  #L53422a.  call temp:= `areEqual`(v5, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L534230.  v3:= temp;
  #L534232.  if v3 == 0 then goto L53423c;
  #L534236.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L53423a.  goto L53420a;
  #L53423c.  v1:= v1 + 1;
  #L534240.  goto L53421e;
  #L534242.  v1:= 0I;
  #L534244.  if v1 >= v0 then goto L534270;
  #L534248.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53424c.  v2:= v2[v1] @kind object;
  #L534250.  call temp:= `areEqual`(v5, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L534256.  v2:= temp;
  #L534258.  if v2 == 0 then goto L53426a;
  #L53425c.  v5:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534260.  v5:= length @variable v5;
  #L534262.  v1:= v1 + v5 @kind int;
  #L534264.  v5:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534268.  goto L53420a;
  #L53426a.  v1:= v1 + 1;
  #L53426e.  goto L534244;
  #L534270.  v5:= -1I;
  #L534272.  return v5;
}
procedure `void` `internalStructure$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v2 @kind this, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/collections/ArrayDeque;.internalStructure$kotlin_stdlib:(Lkotlin/jvm/functions/Function2;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L534e18.  v0:= "structure" @kind object;
  #L534e1c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L534e22.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534e28.  v0:= temp;
  #L534e2a.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534e30.  v1:= temp;
  #L534e32.  v1:= v1 + v0 @kind int;
  #L534e34.  call temp:= `access$positiveMod`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534e3a.  v0:= temp;
  #L534e3c.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L534e42.  v1:= temp;
  #L534e44.  if v1 != 0 then goto L534e5c;
  #L534e48.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534e4c.  if v1 >= v0 then goto L534e52;
  #L534e50.  goto L534e5c;
  #L534e52.  v0:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534e56.  v0:= length @variable v0;
  #L534e58.  v1:= v1 - v0 @kind int;
  #L534e5a.  goto L534e60;
  #L534e5c.  v1:= v2.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534e60.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L534e66.  v0:= temp @kind object;
  #L534e68.  call temp:= `toArray`(v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L534e6e.  v1:= temp @kind object;
  #L534e70.  call temp:= `invoke`(v3, v0, v1) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L534e76.  return @kind void;
}
procedure `boolean` `isEmpty`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533d68.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533d6e.  v0:= temp;
  #L533d70.  if v0 != 0 then goto L533d78;
  #L533d74.  v0:= 1I;
  #L533d76.  goto L533d7a;
  #L533d78.  v0:= 0I;
  #L533d7a.  return v0;
}
procedure `java.lang.Object` `last`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.last:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L53444c.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L534452.  v0:= temp;
  #L534454.  if v0 != 0 then goto L534480;
  #L534458.  call temp:= `getLastIndex`(v2) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L53445e.  v0:= temp;
  #L534460.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534466.  v1:= temp;
  #L534468.  v1:= v1 + v0 @kind int;
  #L53446a.  call temp:= `access$positiveMod`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534470.  v0:= temp;
  #L534472.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534478.  v1:= temp @kind object;
  #L53447a.  v0:= v1[v0] @kind object;
  #L53447e.  return v0 @kind object;
  #L534480.  v0:= new `java.util.NoSuchElementException`;
  #L534484.  v1:= "ArrayDeque is empty." @kind object;
  #L534488.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53448e.  throw v0;
}
procedure `int` `lastIndexOf`(`kotlin.collections.ArrayDeque` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L534284.  call temp:= `size`(v3) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L53428a.  v0:= temp;
  #L53428c.  call temp:= `access$getHead$p`(v3) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534292.  v1:= temp;
  #L534294.  v1:= v1 + v0 @kind int;
  #L534296.  call temp:= `access$positiveMod`(v3, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L53429c.  v0:= temp;
  #L53429e.  v1:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5342a2.  if v1 >= v0 then goto L5342d4;
  #L5342a6.  v0:= v0 + -1;
  #L5342aa.  if v0 < v1 then goto L534340;
  #L5342ae.  v2:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5342b2.  v2:= v2[v0] @kind object;
  #L5342b6.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L5342bc.  v2:= temp;
  #L5342be.  if v2 == 0 then goto L5342ca;
  #L5342c2.  v4:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5342c6.  v0:= v0 - v4 @kind int;
  #L5342c8.  return v0;
  #L5342ca.  if v0 == v1 then goto L534340;
  #L5342ce.  v0:= v0 + -1;
  #L5342d2.  goto L5342ae;
  #L5342d4.  if v1 <= v0 then goto L534340;
  #L5342d8.  v0:= v0 + -1;
  #L5342dc.  if v0 < 0 then goto L534308;
  #L5342e0.  v1:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5342e4.  v1:= v1[v0] @kind object;
  #L5342e8.  call temp:= `areEqual`(v4, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L5342ee.  v1:= temp;
  #L5342f0.  if v1 == 0 then goto L534302;
  #L5342f4.  v4:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5342f8.  v4:= length @variable v4;
  #L5342fa.  v0:= v0 + v4 @kind int;
  #L5342fc.  v4:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534300.  goto L5342c6;
  #L534302.  v0:= v0 + -1;
  #L534306.  goto L5342dc;
  #L534308.  v0:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53430c.  call temp:= `getLastIndex`(v0) @signature `Lkotlin/collections/ArraysKt;.getLastIndex:([Ljava/lang/Object;)I` @kind static;
  #L534312.  v0:= temp;
  #L534314.  v1:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534318.  if v0 < v1 then goto L534340;
  #L53431c.  v2:= v3.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534320.  v2:= v2[v0] @kind object;
  #L534324.  call temp:= `areEqual`(v4, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L53432a.  v2:= temp;
  #L53432c.  if v2 == 0 then goto L534336;
  #L534330.  v4:= v3.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534334.  goto L5342c6;
  #L534336.  if v0 == v1 then goto L534340;
  #L53433a.  v0:= v0 + -1;
  #L53433e.  goto L53431c;
  #L534340.  v4:= -1I;
  #L534342.  return v4;
}
procedure `java.lang.Object` `lastOrNull`(`kotlin.collections.ArrayDeque` v2 @kind this) @signature `Lkotlin/collections/ArrayDeque;.lastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L5344a0.  call temp:= `isEmpty`(v2) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L5344a6.  v0:= temp;
  #L5344a8.  if v0 == 0 then goto L5344b0;
  #L5344ac.  v0:= 0I;
  #L5344ae.  goto L5344d6;
  #L5344b0.  call temp:= `getLastIndex`(v2) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L5344b6.  v0:= temp;
  #L5344b8.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L5344be.  v1:= temp;
  #L5344c0.  v1:= v1 + v0 @kind int;
  #L5344c2.  call temp:= `access$positiveMod`(v2, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L5344c8.  v0:= temp;
  #L5344ca.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L5344d0.  v1:= temp @kind object;
  #L5344d2.  v0:= v1[v0] @kind object;
  #L5344d6.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L533d8c.  call temp:= `indexOf`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L533d92.  v2:= temp;
  #L533d94.  v0:= -1I;
  #L533d96.  if v2 != v0 then goto L533d9e;
  #L533d9a.  v2:= 0I;
  #L533d9c.  return v2;
  #L533d9e.  call temp:= `remove`(v1, v2) @signature `Lkotlin/collections/AbstractMutableList;.remove:(I)Ljava/lang/Object;` @kind virtual;
  #L533da4.  v2:= 1I;
  #L533da6.  return v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L533db8.  v0:= "elements" @kind object;
  #L533dbc.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L533dc2.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L533dc8.  v0:= temp;
  #L533dca.  v1:= 0I;
  #L533dcc.  if v0 != 0 then goto L533f38;
  #L533dd0.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533dd6.  v0:= temp @kind object;
  #L533dd8.  v0:= length @variable v0;
  #L533dda.  v2:= 1I;
  #L533ddc.  if v0 != 0 then goto L533de4;
  #L533de0.  v0:= 1I;
  #L533de2.  goto L533de6;
  #L533de4.  v0:= 0I;
  #L533de6.  if v0 == 0 then goto L533dee;
  #L533dea.  goto L533f38;
  #L533dee.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533df4.  v0:= temp;
  #L533df6.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533dfc.  v3:= temp;
  #L533dfe.  v3:= v3 + v0 @kind int;
  #L533e00.  call temp:= `access$positiveMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533e06.  v0:= temp;
  #L533e08.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533e0e.  v3:= temp;
  #L533e10.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533e16.  v4:= temp;
  #L533e18.  v5:= 0I;
  #L533e1a.  if v4 >= v0 then goto L533e70;
  #L533e1e.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533e24.  v4:= temp;
  #L533e26.  if v4 >= v0 then goto L533e60;
  #L533e2a.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e30.  v6:= temp @kind object;
  #L533e32.  v6:= v6[v4] @kind object;
  #L533e36.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L533e3c.  v7:= temp;
  #L533e3e.  v7:= v7 ^~ v2 @kind int;
  #L533e40.  if v7 == 0 then goto L533e58;
  #L533e44.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e4a.  v7:= temp @kind object;
  #L533e4c.  v8:= v3 + 1;
  #L533e50.  v7[v3]:= v6 @kind object;
  #L533e54.  v3:= v8;
  #L533e56.  goto L533e5a;
  #L533e58.  v1:= 1I;
  #L533e5a.  v4:= v4 + 1;
  #L533e5e.  goto L533e26;
  #L533e60.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e66.  v12:= temp @kind object;
  #L533e68.  call `fill`(v12, v5, v3, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L533e6e.  goto L533f1c;
  #L533e70.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533e76.  v4:= temp;
  #L533e78.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e7e.  v6:= temp @kind object;
  #L533e80.  v6:= length @variable v6;
  #L533e82.  v7:= 0I;
  #L533e84.  if v4 >= v6 then goto L533eca;
  #L533e88.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e8e.  v8:= temp @kind object;
  #L533e90.  v8:= v8[v4] @kind object;
  #L533e94.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533e9a.  v9:= temp @kind object;
  #L533e9c.  v9[v4]:= v5 @kind object;
  #L533ea0.  call temp:= `contains`(v12, v8) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L533ea6.  v9:= temp;
  #L533ea8.  v9:= v9 ^~ v2 @kind int;
  #L533eaa.  if v9 == 0 then goto L533ec2;
  #L533eae.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533eb4.  v9:= temp @kind object;
  #L533eb6.  v10:= v3 + 1;
  #L533eba.  v9[v3]:= v8 @kind object;
  #L533ebe.  v3:= v10;
  #L533ec0.  goto L533ec4;
  #L533ec2.  v7:= 1I;
  #L533ec4.  v4:= v4 + 1;
  #L533ec8.  goto L533e84;
  #L533eca.  call temp:= `access$positiveMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533ed0.  v3:= temp;
  #L533ed2.  if v1 >= v0 then goto L533f1a;
  #L533ed6.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533edc.  v4:= temp @kind object;
  #L533ede.  v4:= v4[v1] @kind object;
  #L533ee2.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533ee8.  v6:= temp @kind object;
  #L533eea.  v6[v1]:= v5 @kind object;
  #L533eee.  call temp:= `contains`(v12, v4) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L533ef4.  v6:= temp;
  #L533ef6.  v6:= v6 ^~ v2 @kind int;
  #L533ef8.  if v6 == 0 then goto L533f12;
  #L533efc.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533f02.  v6:= temp @kind object;
  #L533f04.  v6[v3]:= v4 @kind object;
  #L533f08.  call temp:= `access$incremented`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$incremented:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533f0e.  v3:= temp;
  #L533f10.  goto L533f14;
  #L533f12.  v7:= 1I;
  #L533f14.  v1:= v1 + 1;
  #L533f18.  goto L533ed2;
  #L533f1a.  v1:= v7;
  #L533f1c.  if v1 == 0 then goto L533f38;
  #L533f20.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533f26.  v12:= temp;
  #L533f28.  v3:= v3 - v12 @kind int;
  #L533f2a.  call temp:= `access$negativeMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$negativeMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533f30.  v12:= temp;
  #L533f32.  call `access$setSize$p`(v11, v12) @signature `Lkotlin/collections/ArrayDeque;.access$setSize$p:(Lkotlin/collections/ArrayDeque;I)V` @kind static;
  #L533f38.  return v1;
}
procedure `java.lang.Object` `removeAt`(`kotlin.collections.ArrayDeque` v8 @kind this, `int` v9 ) @signature `Lkotlin/collections/ArrayDeque;.removeAt:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5344e8.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L5344ec.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L5344f2.  v1:= temp;
  #L5344f4.  call `checkElementIndex$kotlin_stdlib`(v0, v9, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L5344fa.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L534500.  v0:= temp;
  #L534502.  if v9 != v0 then goto L534510;
  #L534506.  call temp:= `removeLast`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L53450c.  v9:= temp @kind object;
  #L53450e.  return v9 @kind object;
  #L534510.  if v9 != 0 then goto L53451e;
  #L534514.  call temp:= `removeFirst`(v8) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L53451a.  v9:= temp @kind object;
  #L53451c.  return v9 @kind object;
  #L53451e.  call temp:= `access$getHead$p`(v8) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534524.  v0:= temp;
  #L534526.  v0:= v0 + v9 @kind int;
  #L534528.  call temp:= `access$positiveMod`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L53452e.  v0:= temp;
  #L534530.  call temp:= `access$getElementData$p`(v8) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534536.  v1:= temp @kind object;
  #L534538.  v1:= v1[v0] @kind object;
  #L53453c.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534542.  v2:= temp;
  #L534544.  v3:= 1I;
  #L534546.  v2:= v2 ^> v3 @kind int;
  #L534548.  v4:= 0I;
  #L53454a.  v5:= 0I;
  #L53454c.  if v9 >= v2 then goto L5345ae;
  #L534550.  v9:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534554.  if v0 < v9 then goto L534568;
  #L534558.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53455c.  v5:= v9 + 1;
  #L534560.  call temp:= `copyInto`(v2, v2, v5, v9, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534566.  goto L534594;
  #L534568.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53456c.  call temp:= `copyInto`(v9, v9, v3, v5, v0) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534572.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534576.  v0:= length @variable v9;
  #L534578.  v0:= v0 - v3 @kind int;
  #L53457a.  v0:= v9[v0] @kind object;
  #L53457e.  v9[v5]:= v0 @kind object;
  #L534582.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534586.  v2:= v0 + 1;
  #L53458a.  v5:= length @variable v9;
  #L53458c.  v5:= v5 - v3 @kind int;
  #L53458e.  call temp:= `copyInto`(v9, v9, v2, v0, v5) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L534594.  v9:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534598.  v0:= v8.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L53459c.  v9[v0]:= v4 @kind object;
  #L5345a0.  call temp:= `f`(v8, v0) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L5345a6.  v9:= temp;
  #L5345a8.  v8.`kotlin.collections.ArrayDeque.a` @type ^`int` := v9;
  #L5345ac.  goto L534612;
  #L5345ae.  call temp:= `getLastIndex`(v8) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L5345b4.  v9:= temp;
  #L5345b6.  call temp:= `access$getHead$p`(v8) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L5345bc.  v2:= temp;
  #L5345be.  v2:= v2 + v9 @kind int;
  #L5345c0.  call temp:= `access$positiveMod`(v8, v2) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L5345c6.  v9:= temp;
  #L5345c8.  if v0 > v9 then goto L5345e0;
  #L5345cc.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5345d0.  v5:= v0 + 1;
  #L5345d4.  v6:= v9 + 1;
  #L5345d8.  call temp:= `copyInto`(v2, v2, v0, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L5345de.  goto L53460a;
  #L5345e0.  v2:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5345e4.  v6:= v0 + 1;
  #L5345e8.  v7:= length @variable v2;
  #L5345ea.  call temp:= `copyInto`(v2, v2, v0, v6, v7) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L5345f0.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5345f4.  v2:= length @variable v0;
  #L5345f6.  v2:= v2 - v3 @kind int;
  #L5345f8.  v6:= v0[v5] @kind object;
  #L5345fc.  v0[v2]:= v6 @kind object;
  #L534600.  v2:= v9 + 1;
  #L534604.  call temp:= `copyInto`(v0, v0, v5, v3, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L53460a.  v0:= v8.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L53460e.  v0[v9]:= v4 @kind object;
  #L534612.  call temp:= `size`(v8) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534618.  v9:= temp;
  #L53461a.  v9:= v9 - v3 @kind int;
  #L53461c.  v8.`kotlin.collections.ArrayDeque.c` @type ^`int` := v9;
  #L534620.  return v1 @kind object;
}
procedure `java.lang.Object` `removeFirst`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L534634.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L53463a.  v0:= temp;
  #L53463c.  if v0 != 0 then goto L53467c;
  #L534640.  v0:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534644.  call temp:= `access$getElementData$p`(v4) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L53464a.  v1:= temp @kind object;
  #L53464c.  v0:= v1[v0] @kind object;
  #L534650.  v1:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534654.  v2:= v4.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L534658.  v3:= 0I;
  #L53465a.  v1[v2]:= v3 @kind object;
  #L53465e.  call temp:= `f`(v4, v2) @signature `Lkotlin/collections/ArrayDeque;.f:(I)I` @kind direct;
  #L534664.  v1:= temp;
  #L534666.  v4.`kotlin.collections.ArrayDeque.a` @type ^`int` := v1;
  #L53466a.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534670.  v1:= temp;
  #L534672.  v1:= v1 + -1;
  #L534676.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v1;
  #L53467a.  return v0 @kind object;
  #L53467c.  v0:= new `java.util.NoSuchElementException`;
  #L534680.  v1:= "ArrayDeque is empty." @kind object;
  #L534684.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53468a.  throw v0;
}
procedure `java.lang.Object` `removeFirstOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeFirstOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L53469c.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L5346a2.  v0:= temp;
  #L5346a4.  if v0 == 0 then goto L5346ac;
  #L5346a8.  v0:= 0I;
  #L5346aa.  goto L5346b4;
  #L5346ac.  call temp:= `removeFirst`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeFirst:()Ljava/lang/Object;` @kind virtual;
  #L5346b2.  v0:= temp @kind object;
  #L5346b4.  return v0 @kind object;
}
procedure `java.lang.Object` `removeLast`(`kotlin.collections.ArrayDeque` v4 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5346c8.  call temp:= `isEmpty`(v4) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L5346ce.  v0:= temp;
  #L5346d0.  if v0 != 0 then goto L534716;
  #L5346d4.  call temp:= `getLastIndex`(v4) @signature `Lkotlin/collections/CollectionsKt;.getLastIndex:(Ljava/util/List;)I` @kind static;
  #L5346da.  v0:= temp;
  #L5346dc.  call temp:= `access$getHead$p`(v4) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L5346e2.  v1:= temp;
  #L5346e4.  v1:= v1 + v0 @kind int;
  #L5346e6.  call temp:= `access$positiveMod`(v4, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L5346ec.  v0:= temp;
  #L5346ee.  call temp:= `access$getElementData$p`(v4) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L5346f4.  v1:= temp @kind object;
  #L5346f6.  v1:= v1[v0] @kind object;
  #L5346fa.  v2:= v4.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5346fe.  v3:= 0I;
  #L534700.  v2[v0]:= v3 @kind object;
  #L534704.  call temp:= `size`(v4) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L53470a.  v0:= temp;
  #L53470c.  v0:= v0 + -1;
  #L534710.  v4.`kotlin.collections.ArrayDeque.c` @type ^`int` := v0;
  #L534714.  return v1 @kind object;
  #L534716.  v0:= new `java.util.NoSuchElementException`;
  #L53471a.  v1:= "ArrayDeque is empty." @kind object;
  #L53471e.  call `<init>`(v0, v1) @signature `Ljava/util/NoSuchElementException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L534724.  throw v0;
}
procedure `java.lang.Object` `removeLastOrNull`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.removeLastOrNull:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L534738.  call temp:= `isEmpty`(v1) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L53473e.  v0:= temp;
  #L534740.  if v0 == 0 then goto L534748;
  #L534744.  v0:= 0I;
  #L534746.  goto L534750;
  #L534748.  call temp:= `removeLast`(v1) @signature `Lkotlin/collections/ArrayDeque;.removeLast:()Ljava/lang/Object;` @kind virtual;
  #L53474e.  v0:= temp @kind object;
  #L534750.  return v0 @kind object;
}
procedure `boolean` `retainAll`(`kotlin.collections.ArrayDeque` v11 @kind this, `java.util.Collection` v12 @kind object) @signature `Lkotlin/collections/ArrayDeque;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L533f4c.  v0:= "elements" @kind object;
  #L533f50.  call `checkNotNullParameter`(v12, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L533f56.  call temp:= `isEmpty`(v11) @signature `Lkotlin/collections/ArrayDeque;.isEmpty:()Z` @kind virtual;
  #L533f5c.  v0:= temp;
  #L533f5e.  v1:= 0I;
  #L533f60.  if v0 != 0 then goto L5340c6;
  #L533f64.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533f6a.  v0:= temp @kind object;
  #L533f6c.  v0:= length @variable v0;
  #L533f6e.  v2:= 1I;
  #L533f70.  if v0 != 0 then goto L533f78;
  #L533f74.  v0:= 1I;
  #L533f76.  goto L533f7a;
  #L533f78.  v0:= 0I;
  #L533f7a.  if v0 == 0 then goto L533f82;
  #L533f7e.  goto L5340c6;
  #L533f82.  call temp:= `size`(v11) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L533f88.  v0:= temp;
  #L533f8a.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533f90.  v3:= temp;
  #L533f92.  v3:= v3 + v0 @kind int;
  #L533f94.  call temp:= `access$positiveMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L533f9a.  v0:= temp;
  #L533f9c.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533fa2.  v3:= temp;
  #L533fa4.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533faa.  v4:= temp;
  #L533fac.  v5:= 0I;
  #L533fae.  if v4 >= v0 then goto L534002;
  #L533fb2.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L533fb8.  v4:= temp;
  #L533fba.  if v4 >= v0 then goto L533ff2;
  #L533fbe.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533fc4.  v6:= temp @kind object;
  #L533fc6.  v6:= v6[v4] @kind object;
  #L533fca.  call temp:= `contains`(v12, v6) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L533fd0.  v7:= temp;
  #L533fd2.  if v7 == 0 then goto L533fea;
  #L533fd6.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533fdc.  v7:= temp @kind object;
  #L533fde.  v8:= v3 + 1;
  #L533fe2.  v7[v3]:= v6 @kind object;
  #L533fe6.  v3:= v8;
  #L533fe8.  goto L533fec;
  #L533fea.  v1:= 1I;
  #L533fec.  v4:= v4 + 1;
  #L533ff0.  goto L533fba;
  #L533ff2.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L533ff8.  v12:= temp @kind object;
  #L533ffa.  call `fill`(v12, v5, v3, v0) @signature `Lkotlin/collections/ArraysKt;.fill:([Ljava/lang/Object;Ljava/lang/Object;II)V` @kind static;
  #L534000.  goto L5340aa;
  #L534002.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L534008.  v4:= temp;
  #L53400a.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534010.  v6:= temp @kind object;
  #L534012.  v6:= length @variable v6;
  #L534014.  v7:= 0I;
  #L534016.  if v4 >= v6 then goto L53405a;
  #L53401a.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534020.  v8:= temp @kind object;
  #L534022.  v8:= v8[v4] @kind object;
  #L534026.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L53402c.  v9:= temp @kind object;
  #L53402e.  v9[v4]:= v5 @kind object;
  #L534032.  call temp:= `contains`(v12, v8) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L534038.  v9:= temp;
  #L53403a.  if v9 == 0 then goto L534052;
  #L53403e.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534044.  v9:= temp @kind object;
  #L534046.  v10:= v3 + 1;
  #L53404a.  v9[v3]:= v8 @kind object;
  #L53404e.  v3:= v10;
  #L534050.  goto L534054;
  #L534052.  v7:= 1I;
  #L534054.  v4:= v4 + 1;
  #L534058.  goto L534016;
  #L53405a.  call temp:= `access$positiveMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534060.  v3:= temp;
  #L534062.  if v1 >= v0 then goto L5340a8;
  #L534066.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L53406c.  v4:= temp @kind object;
  #L53406e.  v4:= v4[v1] @kind object;
  #L534072.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534078.  v6:= temp @kind object;
  #L53407a.  v6[v1]:= v5 @kind object;
  #L53407e.  call temp:= `contains`(v12, v4) @signature `Ljava/util/Collection;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L534084.  v6:= temp;
  #L534086.  if v6 == 0 then goto L5340a0;
  #L53408a.  call temp:= `access$getElementData$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L534090.  v6:= temp @kind object;
  #L534092.  v6[v3]:= v4 @kind object;
  #L534096.  call temp:= `access$incremented`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$incremented:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L53409c.  v3:= temp;
  #L53409e.  goto L5340a2;
  #L5340a0.  v7:= 1I;
  #L5340a2.  v1:= v1 + 1;
  #L5340a6.  goto L534062;
  #L5340a8.  v1:= v7;
  #L5340aa.  if v1 == 0 then goto L5340c6;
  #L5340ae.  call temp:= `access$getHead$p`(v11) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L5340b4.  v12:= temp;
  #L5340b6.  v3:= v3 - v12 @kind int;
  #L5340b8.  call temp:= `access$negativeMod`(v11, v3) @signature `Lkotlin/collections/ArrayDeque;.access$negativeMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L5340be.  v12:= temp;
  #L5340c0.  call `access$setSize$p`(v11, v12) @signature `Lkotlin/collections/ArrayDeque;.access$setSize$p:(Lkotlin/collections/ArrayDeque;I)V` @kind static;
  #L5340c6.  return v1;
}
procedure `java.lang.Object` `set`(`kotlin.collections.ArrayDeque` v2 @kind this, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/ArrayDeque;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L534764.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L534768.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L53476e.  v1:= temp;
  #L534770.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L534776.  call temp:= `access$getHead$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L53477c.  v0:= temp;
  #L53477e.  v0:= v0 + v3 @kind int;
  #L534780.  call temp:= `access$positiveMod`(v2, v0) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534786.  v3:= temp;
  #L534788.  call temp:= `access$getElementData$p`(v2) @signature `Lkotlin/collections/ArrayDeque;.access$getElementData$p:(Lkotlin/collections/ArrayDeque;)[Ljava/lang/Object;` @kind static;
  #L53478e.  v0:= temp @kind object;
  #L534790.  v0:= v0[v3] @kind object;
  #L534794.  v1:= v2.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534798.  v1[v3]:= v4 @kind object;
  #L53479c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:()[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5347c8.  call temp:= `toArray`(v1) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @kind virtual;
  #L5347ce.  v0:= temp @kind object;
  #L5347d0.  return v0 @kind object;
}
procedure `java.lang.Object`[] `testToArray$kotlin_stdlib`(`kotlin.collections.ArrayDeque` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/ArrayDeque;.testToArray$kotlin_stdlib:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5347e4.  v0:= "array" @kind object;
  #L5347e8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5347ee.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L5347f4.  v2:= temp @kind object;
  #L5347f6.  return v2 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v1 @kind this) @signature `Lkotlin/collections/ArrayDeque;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L534808.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L53480e.  v0:= temp;
  #L534810.  v0:= new `java.lang.Object`[v0];
  #L534814.  call temp:= `toArray`(v1, v0) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L53481a.  v0:= temp @kind object;
  #L53481c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.ArrayDeque` v7 @kind this, `java.lang.Object`[] v8 @kind object) @signature `Lkotlin/collections/ArrayDeque;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L534830.  v0:= "array" @kind object;
  #L534834.  call `checkNotNullParameter`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L53483a.  v0:= length @variable v8;
  #L53483c.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534842.  v1:= temp;
  #L534844.  if v0 < v1 then goto L53484a;
  #L534848.  goto L53485a;
  #L53484a.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534850.  v0:= temp;
  #L534852.  call temp:= `arrayOfNulls`(v8, v0) @signature `Lkotlin/collections/b;.arrayOfNulls:([Ljava/lang/Object;I)[Ljava/lang/Object;` @kind static;
  #L534858.  v8:= temp @kind object;
  #L53485a.  if v8 == 0 then goto L5348fa;
  #L53485e.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L534864.  v0:= temp;
  #L534866.  call temp:= `access$getHead$p`(v7) @signature `Lkotlin/collections/ArrayDeque;.access$getHead$p:(Lkotlin/collections/ArrayDeque;)I` @kind static;
  #L53486c.  v1:= temp;
  #L53486e.  v1:= v1 + v0 @kind int;
  #L534870.  call temp:= `access$positiveMod`(v7, v1) @signature `Lkotlin/collections/ArrayDeque;.access$positiveMod:(Lkotlin/collections/ArrayDeque;I)I` @kind static;
  #L534876.  v4:= temp;
  #L534878.  v3:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L53487c.  if v3 >= v4 then goto L534894;
  #L534880.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L534884.  v2:= 0I;
  #L534886.  v5:= 2I;
  #L534888.  v6:= 0I;
  #L53488a.  v1:= v8 @kind object;
  #L53488c.  call temp:= `copyInto$default`(v0, v1, v2, v3, v4, v5, v6) @signature `Lkotlin/collections/ArraysKt;.copyInto$default:([Ljava/lang/Object;[Ljava/lang/Object;IIIILjava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L534892.  goto L5348c8;
  #L534894.  call temp:= `isEmpty`(v7) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L53489a.  v0:= temp;
  #L53489c.  v0:= v0 ^~ 1;
  #L5348a0.  if v0 == 0 then goto L5348c8;
  #L5348a4.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5348a8.  v1:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5348ac.  v2:= length @variable v0;
  #L5348ae.  v3:= 0I;
  #L5348b0.  call temp:= `copyInto`(v0, v8, v3, v1, v2) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L5348b6.  v0:= v7.`kotlin.collections.ArrayDeque.b` @type ^`java.lang.Object`[] @kind object;
  #L5348ba.  v1:= length @variable v0;
  #L5348bc.  v2:= v7.`kotlin.collections.ArrayDeque.a` @type ^`int`;
  #L5348c0.  v1:= v1 - v2 @kind int;
  #L5348c2.  call temp:= `copyInto`(v0, v8, v1, v3, v4) @signature `Lkotlin/collections/ArraysKt;.copyInto:([Ljava/lang/Object;[Ljava/lang/Object;III)[Ljava/lang/Object;` @kind static;
  #L5348c8.  v0:= length @variable v8;
  #L5348ca.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L5348d0.  v1:= temp;
  #L5348d2.  if v0 <= v1 then goto L5348e4;
  #L5348d6.  call temp:= `size`(v7) @signature `Lkotlin/collections/AbstractMutableList;.size:()I` @kind virtual;
  #L5348dc.  v0:= temp;
  #L5348de.  v1:= 0I;
  #L5348e0.  v8[v0]:= v1 @kind object;
  #L5348e4.  if v8 == 0 then goto L5348ea;
  #L5348e8.  return v8 @kind object;
  #L5348ea.  v8:= new `java.lang.NullPointerException`;
  #L5348ee.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L5348f2.  call `<init>`(v8, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5348f8.  throw v8;
  #L5348fa.  v8:= new `java.lang.NullPointerException`;
  #L5348fe.  v0:= "null cannot be cast to non-null type kotlin.Array<kotlin.Any?>" @kind object;
  #L534902.  call `<init>`(v8, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L534908.  throw v8;
}
