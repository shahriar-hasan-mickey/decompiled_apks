record `kotlin.collections.EmptySet` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Set` @kind interface, `java.io.Serializable` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.EmptySet` `@@kotlin.collections.EmptySet.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@kotlin.collections.EmptySet.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/EmptySet;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L55e1f8.  v0:= new `kotlin.collections.EmptySet`;
  #L55e1fc.  call `<init>`(v0) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @kind direct;
  #L55e202.  `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` := v0 @kind object;
  #L55e206.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.EmptySet` v0 @kind this) @signature `Lkotlin/collections/EmptySet;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L55e218.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L55e21e.  return @kind void;
}
procedure `java.lang.Object` `readResolve`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.readResolve:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L55e178.  v0:= `@@kotlin.collections.EmptySet.INSTANCE` @type ^`kotlin.collections.EmptySet` @kind object;
  #L55e17c.  return v0 @kind object;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L55dfc0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55dfc4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55dfc8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55dfce.  throw v2;
}
procedure `boolean` `add`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.add:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55dfe0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55dfe4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55dfe8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55dfee.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e000.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55e004.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55e008.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55e00e.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.EmptySet` v2 @kind this) @signature `Lkotlin/collections/EmptySet;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L55e230.  v0:= new `java.lang.UnsupportedOperationException`;
  #L55e234.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L55e238.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55e23e.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55e020.  v0:= instanceof @variable v2 @type ^`java.lang.Void` @kind boolean;
  #L55e024.  if v0 == 0 then goto L55e036;
  #L55e028.  v2:= (`java.lang.Void`) v2 @kind object;
  #L55e02c.  call temp:= `contains`(v1, v2) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @kind virtual;
  #L55e032.  v2:= temp;
  #L55e034.  return v2;
  #L55e036.  v2:= 0I;
  #L55e038.  return v2;
}
procedure `boolean` `contains`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Void` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.contains:(Ljava/lang/Void;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e04c.  v0:= "element" @kind object;
  #L55e050.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L55e056.  v2:= 0I;
  #L55e058.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e06c.  v0:= "elements" @kind object;
  #L55e070.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L55e076.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L55e07c.  v2:= temp;
  #L55e07e.  return v2;
}
procedure `boolean` `equals`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e090.  v0:= instanceof @variable v2 @type ^`java.util.Set` @kind boolean;
  #L55e094.  if v0 == 0 then goto L55e0ac;
  #L55e098.  v2:= (`java.util.Set`) v2 @kind object;
  #L55e09c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/Set;.isEmpty:()Z` @kind interface;
  #L55e0a2.  v2:= temp;
  #L55e0a4.  if v2 == 0 then goto L55e0ac;
  #L55e0a8.  v2:= 1I;
  #L55e0aa.  goto L55e0ae;
  #L55e0ac.  v2:= 0I;
  #L55e0ae.  return v2;
}
procedure `int` `getSize`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e134.  v0:= 0I;
  #L55e136.  return v0;
}
procedure `int` `hashCode`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e148.  v0:= 0I;
  #L55e14a.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e0c0.  v0:= 1I;
  #L55e0c2.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e1e0.  v0:= `@@kotlin.collections.EmptyIterator.INSTANCE` @type ^`kotlin.collections.EmptyIterator` @kind object;
  #L55e1e4.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.collections.EmptySet` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e0d4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55e0d8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55e0dc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55e0e2.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e0f4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55e0f8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55e0fc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55e102.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.EmptySet` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/EmptySet;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e114.  v2:= new `java.lang.UnsupportedOperationException`;
  #L55e118.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L55e11c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L55e122.  throw v2;
}
procedure `int` `size`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L55e15c.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/EmptySet;.getSize:()I` @kind virtual;
  #L55e162.  v0:= temp;
  #L55e164.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e190.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L55e196.  v0:= temp @kind object;
  #L55e198.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.EmptySet` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/collections/EmptySet;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L55e1ac.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L55e1b2.  v1:= temp @kind object;
  #L55e1b4.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.collections.EmptySet` v1 @kind this) @signature `Lkotlin/collections/EmptySet;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L55e1c8.  v0:= "[]" @kind object;
  #L55e1cc.  return v0 @kind object;
}
