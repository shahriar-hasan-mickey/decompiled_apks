record `kotlin.collections.AbstractList` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.collections.AbstractCollection` @kind class, `java.util.List` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
global `kotlin.collections.AbstractList$Companion` `@@kotlin.collections.AbstractList.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/collections/AbstractList;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L532c3c.  v0:= new `kotlin.collections.AbstractList$Companion`;
  #L532c40.  v1:= 0I;
  #L532c42.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L532c48.  `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` := v0 @kind object;
  #L532c4c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList` v0 @kind this) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L532c60.  call `<init>`(v0) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @kind direct;
  #L532c66.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.add:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L532c78.  v1:= new `java.lang.UnsupportedOperationException`;
  #L532c7c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L532c80.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532c86.  throw v1;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.addAll:(ILjava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;

  #L532a78.  v1:= new `java.lang.UnsupportedOperationException`;
  #L532a7c.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L532a80.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532a86.  throw v1;
}
procedure `boolean` `equals`(`kotlin.collections.AbstractList` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532a98.  if v2 != v1 then goto L532aa0;
  #L532a9c.  v2:= 1I;
  #L532a9e.  return v2;
  #L532aa0.  v0:= instanceof @variable v2 @type ^`java.util.List` @kind boolean;
  #L532aa4.  if v0 != 0 then goto L532aac;
  #L532aa8.  v2:= 0I;
  #L532aaa.  return v2;
  #L532aac.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L532ab0.  v2:= (`java.util.Collection`) v2 @kind object;
  #L532ab4.  call temp:= `orderedEquals$kotlin_stdlib`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$Companion;.orderedEquals$kotlin_stdlib:(Ljava/util/Collection;Ljava/util/Collection;)Z` @kind virtual;
  #L532aba.  v2:= temp;
  #L532abc.  return v2;
}
procedure `java.lang.Object` `get`(`int` v0 ) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractList;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `hashCode`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532ad0.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L532ad4.  call temp:= `orderedHashCode$kotlin_stdlib`(v0, v1) @signature `Lkotlin/collections/AbstractList$Companion;.orderedHashCode$kotlin_stdlib:(Ljava/util/Collection;)I` @kind virtual;
  #L532ada.  v0:= temp;
  #L532adc.  return v0;
}
procedure `int` `indexOf`(`kotlin.collections.AbstractList` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractList;.indexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L532af0.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L532af6.  v0:= temp @kind object;
  #L532af8.  v1:= 0I;
  #L532afa.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L532b00.  v2:= temp;
  #L532b02.  if v2 == 0 then goto L532b22;
  #L532b06.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L532b0c.  v2:= temp @kind object;
  #L532b0e.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L532b14.  v2:= temp;
  #L532b16.  if v2 == 0 then goto L532b1c;
  #L532b1a.  goto L532b24;
  #L532b1c.  v1:= v1 + 1;
  #L532b20.  goto L532afa;
  #L532b22.  v1:= -1I;
  #L532b24.  return v1;
}
procedure `java.util.Iterator` `iterator`(`kotlin.collections.AbstractList` v1 @kind this) @signature `Lkotlin/collections/AbstractList;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532bc8.  v0:= new `kotlin.collections.AbstractList$a`;
  #L532bcc.  call `<init>`(v0, v1) @signature `Lkotlin/collections/AbstractList$a;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L532bd2.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`kotlin.collections.AbstractList` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/collections/AbstractList;.lastIndexOf:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532b38.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L532b3e.  v0:= temp;
  #L532b40.  call temp:= `listIterator`(v2, v0) @signature `Ljava/util/List;.listIterator:(I)Ljava/util/ListIterator;` @kind interface;
  #L532b46.  v0:= temp @kind object;
  #L532b48.  call temp:= `hasPrevious`(v0) @signature `Ljava/util/ListIterator;.hasPrevious:()Z` @kind interface;
  #L532b4e.  v1:= temp;
  #L532b50.  if v1 == 0 then goto L532b72;
  #L532b54.  call temp:= `previous`(v0) @signature `Ljava/util/ListIterator;.previous:()Ljava/lang/Object;` @kind interface;
  #L532b5a.  v1:= temp @kind object;
  #L532b5c.  call temp:= `areEqual`(v1, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L532b62.  v1:= temp;
  #L532b64.  if v1 == 0 then goto L532b48;
  #L532b68.  call temp:= `nextIndex`(v0) @signature `Ljava/util/ListIterator;.nextIndex:()I` @kind interface;
  #L532b6e.  v3:= temp;
  #L532b70.  goto L532b74;
  #L532b72.  v3:= -1I;
  #L532b74.  return v3;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v2 @kind this) @signature `Lkotlin/collections/AbstractList;.listIterator:()Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532c00.  v0:= new `kotlin.collections.AbstractList$b`;
  #L532c04.  v1:= 0I;
  #L532c06.  call `<init>`(v0, v2, v1) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L532c0c.  return v0 @kind object;
}
procedure `java.util.ListIterator` `listIterator`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.listIterator:(I)Ljava/util/ListIterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532c20.  v0:= new `kotlin.collections.AbstractList$b`;
  #L532c24.  call `<init>`(v0, v1, v2) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @kind direct;
  #L532c2a.  return v0 @kind object;
}
procedure `java.lang.Object` `remove`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 ) @signature `Lkotlin/collections/AbstractList;.remove:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532b88.  v2:= new `java.lang.UnsupportedOperationException`;
  #L532b8c.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L532b90.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532b96.  throw v2;
}
procedure `java.lang.Object` `set`(`kotlin.collections.AbstractList` v0 @kind this, `int` v1 , `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList;.set:(ILjava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L532ba8.  v1:= new `java.lang.UnsupportedOperationException`;
  #L532bac.  v2:= "Operation is not supported for read-only collection" @kind object;
  #L532bb0.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532bb6.  throw v1;
}
procedure `java.util.List` `subList`(`kotlin.collections.AbstractList` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/collections/AbstractList;.subList:(II)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532be4.  v0:= new `kotlin.collections.AbstractList$c`;
  #L532be8.  call `<init>`(v0, v1, v2, v3) @signature `Lkotlin/collections/AbstractList$c;.<init>:(Lkotlin/collections/AbstractList;II)V` @kind direct;
  #L532bee.  return v0 @kind object;
}
