record `kotlin.collections.AbstractCollection` @kind class @AccessFlag PUBLIC_ABSTRACT extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
}
procedure `void` `<init>`(`kotlin.collections.AbstractCollection` v0 @kind this) @signature `Lkotlin/collections/AbstractCollection;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L532308.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L53230e.  return @kind void;
}
procedure `boolean` `add`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5320f4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5320f8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5320fc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532102.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532114.  v2:= new `java.lang.UnsupportedOperationException`;
  #L532118.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L53211c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532122.  throw v2;
}
procedure `void` `clear`(`kotlin.collections.AbstractCollection` v2 @kind this) @signature `Lkotlin/collections/AbstractCollection;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532320.  v0:= new `java.lang.UnsupportedOperationException`;
  #L532324.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L532328.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53232e.  throw v0;
}
procedure `boolean` `contains`(`kotlin.collections.AbstractCollection` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L532134.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L53213a.  v0:= temp;
  #L53213c.  v1:= 0I;
  #L53213e.  if v0 == 0 then goto L532144;
  #L532142.  goto L53216e;
  #L532144.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L53214a.  v0:= temp @kind object;
  #L53214c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L532152.  v2:= temp;
  #L532154.  if v2 == 0 then goto L53216e;
  #L532158.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L53215e.  v2:= temp @kind object;
  #L532160.  call temp:= `areEqual`(v2, v4) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L532166.  v2:= temp;
  #L532168.  if v2 == 0 then goto L53214c;
  #L53216c.  v1:= 1I;
  #L53216e.  return v1;
}
procedure `boolean` `containsAll`(`kotlin.collections.AbstractCollection` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lkotlin/collections/AbstractCollection;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532180.  v0:= "elements" @kind object;
  #L532184.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L53218a.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L532190.  v0:= temp;
  #L532192.  v1:= 1I;
  #L532194.  if v0 == 0 then goto L53219a;
  #L532198.  goto L5321c4;
  #L53219a.  call temp:= `iterator`(v3) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L5321a0.  v3:= temp @kind object;
  #L5321a2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5321a8.  v0:= temp;
  #L5321aa.  if v0 == 0 then goto L5321c4;
  #L5321ae.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5321b4.  v0:= temp @kind object;
  #L5321b6.  call temp:= `contains`(v2, v0) @signature `Lkotlin/collections/AbstractCollection;.contains:(Ljava/lang/Object;)Z` @kind virtual;
  #L5321bc.  v0:= temp;
  #L5321be.  if v0 != 0 then goto L5321a2;
  #L5321c2.  v1:= 0I;
  #L5321c4.  return v1;
}
procedure `int` `getSize`() @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEmpty`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5321d8.  call temp:= `size`(v1) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L5321de.  v0:= temp;
  #L5321e0.  if v0 != 0 then goto L5321e8;
  #L5321e4.  v0:= 1I;
  #L5321e6.  goto L5321ea;
  #L5321e8.  v0:= 0I;
  #L5321ea.  return v0;
}
procedure `java.util.Iterator` `iterator`() @signature `Lkotlin/collections/AbstractCollection;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `remove`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5321fc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L532200.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L532204.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53220a.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53221c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L532220.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L532224.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53222a.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53223c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L532240.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L532244.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53224a.  throw v2;
}
procedure `int` `size`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L53225c.  call temp:= `getSize`(v1) @signature `Lkotlin/collections/AbstractCollection;.getSize:()I` @kind virtual;
  #L532262.  v0:= temp;
  #L532264.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532278.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L53227e.  v0:= temp @kind object;
  #L532280.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.collections.AbstractCollection` v1 @kind this, `java.lang.Object`[] v2 @kind object) @signature `Lkotlin/collections/AbstractCollection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532294.  v0:= "array" @kind object;
  #L532298.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L53229e.  call temp:= `toArray`(v1, v2) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L5322a4.  v2:= temp @kind object;
  #L5322a6.  if v2 == 0 then goto L5322ac;
  #L5322aa.  return v2 @kind object;
  #L5322ac.  v2:= new `java.lang.NullPointerException`;
  #L5322b0.  v0:= "null cannot be cast to non-null type kotlin.Array<T>" @kind object;
  #L5322b4.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5322ba.  throw v2;
}
procedure `java.lang.String` `toString`(`kotlin.collections.AbstractCollection` v9 @kind this) @signature `Lkotlin/collections/AbstractCollection;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L5322cc.  v6:= new `kotlin.collections.AbstractCollection$a`;
  #L5322d0.  call `<init>`(v6, v9) @signature `Lkotlin/collections/AbstractCollection$a;.<init>:(Lkotlin/collections/AbstractCollection;)V` @kind direct;
  #L5322d6.  v1:= ", " @kind object;
  #L5322da.  v2:= "[" @kind object;
  #L5322de.  v3:= "]" @kind object;
  #L5322e2.  v4:= 0I;
  #L5322e4.  v5:= 0I;
  #L5322e6.  v7:= 24I;
  #L5322ea.  v8:= 0I;
  #L5322ec.  v0:= v9 @kind object;
  #L5322ee.  call temp:= `joinToString$default`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lkotlin/collections/CollectionsKt;.joinToString$default:(Ljava/lang/Iterable;Ljava/lang/CharSequence;Ljava/lang/CharSequence;Ljava/lang/CharSequence;ILjava/lang/CharSequence;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Ljava/lang/String;` @kind static;
  #L5322f4.  v0:= temp @kind object;
  #L5322f6.  return v0 @kind object;
}
