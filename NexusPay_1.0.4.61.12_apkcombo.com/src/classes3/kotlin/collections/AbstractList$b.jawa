record `kotlin.collections.AbstractList$b` @kind class @AccessFlag  extends `kotlin.collections.AbstractList$a` @kind class, `java.util.ListIterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `kotlin.collections.AbstractList` `kotlin.collections.AbstractList$b.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractList$b` v1 @kind this, `kotlin.collections.AbstractList` v2 @kind object, `int` v3 ) @signature `Lkotlin/collections/AbstractList$b;.<init>:(Lkotlin/collections/AbstractList;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L532970.  v1.`kotlin.collections.AbstractList$b.c` @type ^`kotlin.collections.AbstractList` := v2 @kind object;
  #L532974.  call `<init>`(v1, v2) @signature `Lkotlin/collections/AbstractList$a;.<init>:(Lkotlin/collections/AbstractList;)V` @kind direct;
  #L53297a.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L53297e.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L532984.  v2:= temp;
  #L532986.  call `checkPositionIndex$kotlin_stdlib`(v0, v3, v2) @signature `Lkotlin/collections/AbstractList$Companion;.checkPositionIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L53298c.  call `c`(v1, v3) @signature `Lkotlin/collections/AbstractList$a;.c:(I)V` @kind virtual;
  #L532992.  return @kind void;
}
procedure `void` `add`(`kotlin.collections.AbstractList$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$b;.add:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5329a4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5329a8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5329ac.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5329b2.  throw v2;
}
procedure `boolean` `hasPrevious`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.hasPrevious:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5328c0.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L5328c6.  v0:= temp;
  #L5328c8.  if v0 <= 0 then goto L5328d0;
  #L5328cc.  v0:= 1I;
  #L5328ce.  goto L5328d2;
  #L5328d0.  v0:= 0I;
  #L5328d2.  return v0;
}
procedure `int` `nextIndex`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.nextIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5328e4.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L5328ea.  v0:= temp;
  #L5328ec.  return v0;
}
procedure `java.lang.Object` `previous`(`kotlin.collections.AbstractList$b` v2 @kind this) @signature `Lkotlin/collections/AbstractList$b;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532920.  call temp:= `hasPrevious`(v2) @signature `Lkotlin/collections/AbstractList$b;.hasPrevious:()Z` @kind virtual;
  #L532926.  v0:= temp;
  #L532928.  if v0 == 0 then goto L532954;
  #L53292c.  v0:= v2.`kotlin.collections.AbstractList$b.c` @type ^`kotlin.collections.AbstractList` @kind object;
  #L532930.  call temp:= `b`(v2) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L532936.  v1:= temp;
  #L532938.  v1:= v1 + -1;
  #L53293c.  call `c`(v2, v1) @signature `Lkotlin/collections/AbstractList$a;.c:(I)V` @kind virtual;
  #L532942.  call temp:= `b`(v2) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L532948.  v1:= temp;
  #L53294a.  call temp:= `get`(v0, v1) @signature `Lkotlin/collections/AbstractList;.get:(I)Ljava/lang/Object;` @kind virtual;
  #L532950.  v0:= temp @kind object;
  #L532952.  return v0 @kind object;
  #L532954.  v0:= new `java.util.NoSuchElementException`;
  #L532958.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L53295e.  throw v0;
}
procedure `int` `previousIndex`(`kotlin.collections.AbstractList$b` v1 @kind this) @signature `Lkotlin/collections/AbstractList$b;.previousIndex:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532900.  call temp:= `b`(v1) @signature `Lkotlin/collections/AbstractList$a;.b:()I` @kind virtual;
  #L532906.  v0:= temp;
  #L532908.  v0:= v0 + -1;
  #L53290c.  return v0;
}
procedure `void` `set`(`kotlin.collections.AbstractList$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/collections/AbstractList$b;.set:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5329c4.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5329c8.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5329cc.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5329d2.  throw v2;
}
