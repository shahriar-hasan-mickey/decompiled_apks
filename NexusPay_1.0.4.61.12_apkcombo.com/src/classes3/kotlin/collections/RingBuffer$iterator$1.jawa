record `kotlin.collections.RingBuffer$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `int` `kotlin.collections.RingBuffer$iterator$1.c` @AccessFlag PRIVATE;
  `int` `kotlin.collections.RingBuffer$iterator$1.d` @AccessFlag PRIVATE;
  `kotlin.collections.RingBuffer` `kotlin.collections.RingBuffer$iterator$1.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.RingBuffer$iterator$1` v1 @kind this, `kotlin.collections.RingBuffer` v2 @kind object) @signature `Lkotlin/collections/RingBuffer$iterator$1;.<init>:(Lkotlin/collections/RingBuffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L560f84.  v1.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` := v2 @kind object;
  #L560f88.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L560f8e.  call temp:= `size`(v2) @signature `Lkotlin/collections/AbstractCollection;.size:()I` @kind virtual;
  #L560f94.  v0:= temp;
  #L560f96.  v1.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int` := v0;
  #L560f9a.  call temp:= `d`(v2) @signature `Lkotlin/collections/RingBuffer;.d:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L560fa0.  v2:= temp;
  #L560fa2.  v1.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int` := v2;
  #L560fa6.  return @kind void;
}
procedure `void` `computeNext`(`kotlin.collections.RingBuffer$iterator$1` v2 @kind this) @signature `Lkotlin/collections/RingBuffer$iterator$1;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L560fb8.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int`;
  #L560fbc.  if v0 != 0 then goto L560fc8;
  #L560fc0.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L560fc6.  goto L561008;
  #L560fc8.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L560fcc.  call temp:= `b`(v0) @signature `Lkotlin/collections/RingBuffer;.b:(Lkotlin/collections/RingBuffer;)[Ljava/lang/Object;` @kind static;
  #L560fd2.  v0:= temp @kind object;
  #L560fd4.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int`;
  #L560fd8.  v0:= v0[v1] @kind object;
  #L560fdc.  call `setNext`(v2, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L560fe2.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.e` @type ^`kotlin.collections.RingBuffer` @kind object;
  #L560fe6.  v1:= v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int`;
  #L560fea.  v1:= v1 + 1;
  #L560fee.  call temp:= `c`(v0) @signature `Lkotlin/collections/RingBuffer;.c:(Lkotlin/collections/RingBuffer;)I` @kind static;
  #L560ff4.  v0:= temp;
  #L560ff6.  v1:= v1 %% v0 @kind int;
  #L560ff8.  v2.`kotlin.collections.RingBuffer$iterator$1.d` @type ^`int` := v1;
  #L560ffc.  v0:= v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int`;
  #L561000.  v0:= v0 + -1;
  #L561004.  v2.`kotlin.collections.RingBuffer$iterator$1.c` @type ^`int` := v0;
  #L561008.  return @kind void;
}
