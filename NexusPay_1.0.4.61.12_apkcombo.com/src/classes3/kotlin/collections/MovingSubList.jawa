record `kotlin.collections.MovingSubList` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.collections.AbstractList` @kind class, `java.util.RandomAccess` @kind interface {
  `int` `kotlin.collections.MovingSubList.a` @AccessFlag PRIVATE;
  `int` `kotlin.collections.MovingSubList.b` @AccessFlag PRIVATE;
  `java.util.List` `kotlin.collections.MovingSubList.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.collections.MovingSubList` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lkotlin/collections/MovingSubList;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L560a9c.  v0:= "list" @kind object;
  #L560aa0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L560aa6.  call `<init>`(v1) @signature `Lkotlin/collections/AbstractList;.<init>:()V` @kind direct;
  #L560aac.  v1.`kotlin.collections.MovingSubList.c` @type ^`java.util.List` := v2 @kind object;
  #L560ab0.  return @kind void;
}
procedure `java.lang.Object` `get`(`kotlin.collections.MovingSubList` v2 @kind this, `int` v3 ) @signature `Lkotlin/collections/MovingSubList;.get:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L560a68.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L560a6c.  v1:= v2.`kotlin.collections.MovingSubList.b` @type ^`int`;
  #L560a70.  call `checkElementIndex$kotlin_stdlib`(v0, v3, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkElementIndex$kotlin_stdlib:(II)V` @kind virtual;
  #L560a76.  v0:= v2.`kotlin.collections.MovingSubList.c` @type ^`java.util.List` @kind object;
  #L560a7a.  v1:= v2.`kotlin.collections.MovingSubList.a` @type ^`int`;
  #L560a7e.  v1:= v1 + v3 @kind int;
  #L560a80.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L560a86.  v3:= temp @kind object;
  #L560a88.  return v3 @kind object;
}
procedure `int` `getSize`(`kotlin.collections.MovingSubList` v1 @kind this) @signature `Lkotlin/collections/MovingSubList;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L560a50.  v0:= v1.`kotlin.collections.MovingSubList.b` @type ^`int`;
  #L560a54.  return v0;
}
procedure `void` `move`(`kotlin.collections.MovingSubList` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lkotlin/collections/MovingSubList;.move:(II)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L560ac4.  v0:= `@@kotlin.collections.AbstractList.Companion` @type ^`kotlin.collections.AbstractList$Companion` @kind object;
  #L560ac8.  v1:= v2.`kotlin.collections.MovingSubList.c` @type ^`java.util.List` @kind object;
  #L560acc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L560ad2.  v1:= temp;
  #L560ad4.  call `checkRangeIndexes$kotlin_stdlib`(v0, v3, v4, v1) @signature `Lkotlin/collections/AbstractList$Companion;.checkRangeIndexes$kotlin_stdlib:(III)V` @kind virtual;
  #L560ada.  v2.`kotlin.collections.MovingSubList.a` @type ^`int` := v3;
  #L560ade.  v4:= v4 - v3 @kind int;
  #L560ae0.  v2.`kotlin.collections.MovingSubList.b` @type ^`int` := v4;
  #L560ae4.  return @kind void;
}
