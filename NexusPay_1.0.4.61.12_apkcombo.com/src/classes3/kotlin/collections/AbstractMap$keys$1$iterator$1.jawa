record `kotlin.collections.AbstractMap$keys$1$iterator$1` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Iterator` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `java.util.Iterator` `kotlin.collections.AbstractMap$keys$1$iterator$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.collections.AbstractMap$keys$1$iterator$1` v0 @kind this, `java.util.Iterator` v1 @kind object) @signature `Lkotlin/collections/AbstractMap$keys$1$iterator$1;.<init>:(Ljava/util/Iterator;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L532e20.  v0.`kotlin.collections.AbstractMap$keys$1$iterator$1.a` @type ^`java.util.Iterator` := v1 @kind object;
  #L532e24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L532e2a.  return @kind void;
}
procedure `boolean` `hasNext`(`kotlin.collections.AbstractMap$keys$1$iterator$1` v1 @kind this) @signature `Lkotlin/collections/AbstractMap$keys$1$iterator$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532dd4.  v0:= v1.`kotlin.collections.AbstractMap$keys$1$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L532dd8.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L532dde.  v0:= temp;
  #L532de0.  return v0;
}
procedure `java.lang.Object` `next`(`kotlin.collections.AbstractMap$keys$1$iterator$1` v1 @kind this) @signature `Lkotlin/collections/AbstractMap$keys$1$iterator$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L532df4.  v0:= v1.`kotlin.collections.AbstractMap$keys$1$iterator$1.a` @type ^`java.util.Iterator` @kind object;
  #L532df8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L532dfe.  v0:= temp @kind object;
  #L532e00.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L532e04.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L532e0a.  v0:= temp @kind object;
  #L532e0c.  return v0 @kind object;
}
procedure `void` `remove`(`kotlin.collections.AbstractMap$keys$1$iterator$1` v2 @kind this) @signature `Lkotlin/collections/AbstractMap$keys$1$iterator$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L532e3c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L532e40.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L532e44.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L532e4a.  throw v0;
}
