record `kotlin.UIntArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `int`[] `kotlin.UIntArray.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UIntArray` v1 @kind this, `int`[] v2 @kind object) @signature `Lkotlin/UIntArray;.<init>:([I)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L5305e8.  v0:= "storage" @kind object;
  #L5305ec.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5305f2.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L5305f8.  v1.`kotlin.UIntArray.a` @type ^`int`[] := v2 @kind object;
  #L5305fc.  return @kind void;
}
procedure `kotlin.UIntArray` `box-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.box-impl:([I)Lkotlin/UIntArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L5305c0.  v0:= "v" @kind object;
  #L5305c4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5305ca.  v0:= new `kotlin.UIntArray`;
  #L5305ce.  call `<init>`(v0, v1) @signature `Lkotlin/UIntArray;.<init>:([I)V` @kind direct;
  #L5305d4.  return v0 @kind object;
}
procedure `int`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UIntArray;.constructor-impl:(I)[I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L530490.  v0:= new `int`[v0];
  #L530494.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UIntArray;.constructor-impl:([I)[I` @kind static;
  #L53049a.  v0:= temp @kind object;
  #L53049c.  return v0 @kind object;
}
procedure `int`[] `constructor-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.constructor-impl:([I)[I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5304b0.  v0:= "storage" @kind object;
  #L5304b4.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5304ba.  return v1 @kind object;
}
procedure `boolean` `contains-WZ4Q5Ns`(`int`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:([II)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L530214.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([II)Z` @kind static;
  #L53021a.  v0:= temp;
  #L53021c.  return v0;
}
procedure `boolean` `containsAll-impl`(`int`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UIntArray;.containsAll-impl:([ILjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L530250.  v0:= "elements" @kind object;
  #L530254.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L53025a.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L530260.  v0:= temp;
  #L530262.  v1:= 0I;
  #L530264.  v2:= 1I;
  #L530266.  if v0 == 0 then goto L53026e;
  #L53026a.  v1:= 1I;
  #L53026c.  goto L5302b4;
  #L53026e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L530274.  v5:= temp @kind object;
  #L530276.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L53027c.  v0:= temp;
  #L53027e.  if v0 == 0 then goto L53026a;
  #L530282.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L530288.  v0:= temp @kind object;
  #L53028a.  v3:= instanceof @variable v0 @type ^`kotlin.UInt` @kind boolean;
  #L53028e.  if v3 == 0 then goto L5302ae;
  #L530292.  v0:= (`kotlin.UInt`) v0 @kind object;
  #L530296.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UInt;.unbox-impl:()I` @kind virtual;
  #L53029c.  v0:= temp;
  #L53029e.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([II)Z` @kind static;
  #L5302a4.  v0:= temp;
  #L5302a6.  if v0 == 0 then goto L5302ae;
  #L5302aa.  v0:= 1I;
  #L5302ac.  goto L5302b0;
  #L5302ae.  v0:= 0I;
  #L5302b0.  if v0 != 0 then goto L530276;
  #L5302b4.  return v1;
}
procedure `boolean` `equals-impl`(`int`[] v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.equals-impl:([ILjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5302e8.  v0:= instanceof @variable v2 @type ^`kotlin.UIntArray` @kind boolean;
  #L5302ec.  if v0 == 0 then goto L53030c;
  #L5302f0.  v2:= (`kotlin.UIntArray`) v2 @kind object;
  #L5302f4.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UIntArray;.unbox-impl:()[I` @kind virtual;
  #L5302fa.  v2:= temp @kind object;
  #L5302fc.  call temp:= `areEqual`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L530302.  v1:= temp;
  #L530304.  if v1 == 0 then goto L53030c;
  #L530308.  v1:= 1I;
  #L53030a.  return v1;
  #L53030c.  v1:= 0I;
  #L53030e.  return v1;
}
procedure `boolean` `equals-impl0`(`int`[] v0 @kind object, `int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.equals-impl0:([I[I)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L530320.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L530326.  v0:= temp;
  #L530328.  return v0;
}
procedure `int` `get-pVg5ArA`(`int`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UIntArray;.get-pVg5ArA:([II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L5303dc.  v0:= v0[v1];
  #L5303e0.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L5303e6.  v0:= temp;
  #L5303e8.  return v0;
}
procedure `int` `getSize-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.getSize-impl:([I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L53041c.  v0:= length @variable v0;
  #L53041e.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UIntArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L530630.  return @kind void;
}
procedure `int` `hashCode-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.hashCode-impl:([I)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L530450.  if v0 == 0 then goto L53045e;
  #L530454.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([I)I` @kind static;
  #L53045a.  v0:= temp;
  #L53045c.  goto L530460;
  #L53045e.  v0:= 0I;
  #L530460.  return v0;
}
procedure `boolean` `isEmpty-impl`(`int`[] v0 @kind object) @signature `Lkotlin/UIntArray;.isEmpty-impl:([I)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L53035c.  v0:= length @variable v0;
  #L53035e.  if v0 != 0 then goto L530366;
  #L530362.  v0:= 1I;
  #L530364.  goto L530368;
  #L530366.  v0:= 0I;
  #L530368.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`int`[] v1 @kind object) @signature `Lkotlin/UIntArray;.iterator-impl:([I)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5305a4.  v0:= new `kotlin.UIntArray$a`;
  #L5305a8.  call `<init>`(v0, v1) @signature `Lkotlin/UIntArray$a;.<init>:([I)V` @kind direct;
  #L5305ae.  return v0 @kind object;
}
procedure `void` `set-VXSXFK8`(`int`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lkotlin/UIntArray;.set-VXSXFK8:([III)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L530644.  v0[v1]:= v2;
  #L530648.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`int`[] v2 @kind object) @signature `Lkotlin/UIntArray;.toString-impl:([I)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L53053c.  v0:= new `java.lang.StringBuilder`;
  #L530540.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L530546.  v1:= "UIntArray(storage=" @kind object;
  #L53054a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L530550.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([I)Ljava/lang/String;` @kind static;
  #L530556.  v2:= temp @kind object;
  #L530558.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53055e.  v2:= ")" @kind object;
  #L530562.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L530568.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L53056e.  v2:= temp @kind object;
  #L530570.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L530160.  v2:= new `java.lang.UnsupportedOperationException`;
  #L530164.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L530168.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53016e.  throw v2;
}
procedure `boolean` `add-WZ4Q5Ns`(`kotlin.UIntArray` v1 @kind this, `int` v2 ) @signature `Lkotlin/UIntArray;.add-WZ4Q5Ns:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L530180.  v2:= new `java.lang.UnsupportedOperationException`;
  #L530184.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L530188.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53018e.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5301a0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5301a4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5301a8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5301ae.  throw v2;
}
procedure `void` `clear`(`kotlin.UIntArray` v2 @kind this) @signature `Lkotlin/UIntArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L530610.  v0:= new `java.lang.UnsupportedOperationException`;
  #L530614.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L530618.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53061e.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5301c0.  v0:= instanceof @variable v2 @type ^`kotlin.UInt` @kind boolean;
  #L5301c4.  if v0 == 0 then goto L5301de;
  #L5301c8.  v2:= (`kotlin.UInt`) v2 @kind object;
  #L5301cc.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UInt;.unbox-impl:()I` @kind virtual;
  #L5301d2.  v2:= temp;
  #L5301d4.  call temp:= `contains-WZ4Q5Ns`(v1, v2) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:(I)Z` @kind virtual;
  #L5301da.  v2:= temp;
  #L5301dc.  return v2;
  #L5301de.  v2:= 0I;
  #L5301e0.  return v2;
}
procedure `boolean` `contains-WZ4Q5Ns`(`kotlin.UIntArray` v1 @kind this, `int` v2 ) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:(I)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5301f4.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L5301f8.  call temp:= `contains-WZ4Q5Ns`(v0, v2) @signature `Lkotlin/UIntArray;.contains-WZ4Q5Ns:([II)Z` @kind static;
  #L5301fe.  v2:= temp;
  #L530200.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L530230.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530234.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UIntArray;.containsAll-impl:([ILjava/util/Collection;)Z` @kind static;
  #L53023a.  v2:= temp;
  #L53023c.  return v2;
}
procedure `boolean` `equals`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5302c8.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L5302cc.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UIntArray;.equals-impl:([ILjava/lang/Object;)Z` @kind static;
  #L5302d2.  v2:= temp;
  #L5302d4.  return v2;
}
procedure `int` `getSize`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5303fc.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530400.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UIntArray;.getSize-impl:([I)I` @kind static;
  #L530406.  v0:= temp;
  #L530408.  return v0;
}
procedure `int` `hashCode`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L530430.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530434.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UIntArray;.hashCode-impl:([I)I` @kind static;
  #L53043a.  v0:= temp;
  #L53043c.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53033c.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530340.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UIntArray;.isEmpty-impl:([I)Z` @kind static;
  #L530346.  v0:= temp;
  #L530348.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L530584.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530588.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UIntArray;.iterator-impl:([I)Ljava/util/Iterator;` @kind static;
  #L53058e.  v0:= temp @kind object;
  #L530590.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UIntArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UIntArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53037c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L530380.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L530384.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53038a.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53039c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5303a0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5303a4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5303aa.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UIntArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UIntArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5303bc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L5303c0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L5303c4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5303ca.  throw v2;
}
procedure `int` `size`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L530474.  call temp:= `getSize`(v1) @signature `Lkotlin/UIntArray;.getSize:()I` @kind virtual;
  #L53047a.  v0:= temp;
  #L53047c.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5304e4.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L5304ea.  v0:= temp @kind object;
  #L5304ec.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UIntArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/UIntArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L530500.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L530506.  v1:= temp @kind object;
  #L530508.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53051c.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L530520.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UIntArray;.toString-impl:([I)Ljava/lang/String;` @kind static;
  #L530526.  v0:= temp @kind object;
  #L530528.  return v0 @kind object;
}
procedure `int`[] `unbox-impl`(`kotlin.UIntArray` v1 @kind this) @signature `Lkotlin/UIntArray;.unbox-impl:()[I` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L5304cc.  v0:= v1.`kotlin.UIntArray.a` @type ^`int`[] @kind object;
  #L5304d0.  return v0 @kind object;
}
