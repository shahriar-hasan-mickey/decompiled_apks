record `kotlin.comparisons.b` @kind class @AccessFlag  extends `kotlin.comparisons.a` @kind class {
}
procedure `void` `<init>`(`kotlin.comparisons.b` v0 @kind this) @signature `Lkotlin/comparisons/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L56b128.  call `<init>`(v0) @signature `Lkotlin/comparisons/a;.<init>:()V` @kind direct;
  #L56b12e.  return @kind void;
}
procedure `byte` `maxOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56ad18.  v0:= "other" @kind object;
  #L56ad1c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ad22.  v0:= length @variable v4;
  #L56ad24.  v1:= 0I;
  #L56ad26.  if v1 >= v0 then goto L56ad3e;
  #L56ad2a.  v2:= v4[v1] @kind byte;
  #L56ad2e.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L56ad34.  v3:= temp;
  #L56ad36.  v3:= (`byte`) v3 @kind i2b;
  #L56ad38.  v1:= v1 + 1;
  #L56ad3c.  goto L56ad26;
  #L56ad3e.  return v3;
}
procedure `double` `maxOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L56ad88.  v0:= "other" @kind object;
  #L56ad8c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ad92.  v0:= length @variable v6;
  #L56ad94.  v1:= 0I;
  #L56ad96.  if v1 >= v0 then goto L56adac;
  #L56ad9a.  v2:= v6[v1] @kind wide;
  #L56ad9e.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(DD)D` @kind static;
  #L56ada4.  v4:= temp @kind wide;
  #L56ada6.  v1:= v1 + 1;
  #L56adaa.  goto L56ad96;
  #L56adac.  return v4 @kind wide;
}
procedure `float` `maxOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56adf8.  v0:= "other" @kind object;
  #L56adfc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ae02.  v0:= length @variable v4;
  #L56ae04.  v1:= 0I;
  #L56ae06.  if v1 >= v0 then goto L56ae1c;
  #L56ae0a.  v2:= v4[v1];
  #L56ae0e.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L56ae14.  v3:= temp;
  #L56ae16.  v1:= v1 + 1;
  #L56ae1a.  goto L56ae06;
  #L56ae1c.  return v3;
}
procedure `int` `maxOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56ae68.  v0:= "other" @kind object;
  #L56ae6c.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ae72.  v0:= length @variable v4;
  #L56ae74.  v1:= 0I;
  #L56ae76.  if v1 >= v0 then goto L56ae8c;
  #L56ae7a.  v2:= v4[v1];
  #L56ae7e.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L56ae84.  v3:= temp;
  #L56ae86.  v1:= v1 + 1;
  #L56ae8a.  goto L56ae76;
  #L56ae8c.  return v3;
}
procedure `long` `maxOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L56b048.  v0:= "other" @kind object;
  #L56b04c.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b052.  v0:= length @variable v6;
  #L56b054.  v1:= 0I;
  #L56b056.  if v1 >= v0 then goto L56b06c;
  #L56b05a.  v2:= v6[v1] @kind wide;
  #L56b05e.  call temp:= `max`(v4, v2) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L56b064.  v4:= temp @kind wide;
  #L56b066.  v1:= v1 + 1;
  #L56b06a.  goto L56b056;
  #L56b06c.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56aed8.  v0:= "a" @kind object;
  #L56aedc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56aee2.  v0:= "b" @kind object;
  #L56aee6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56aeec.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L56aef2.  v0:= temp;
  #L56aef4.  if v0 < 0 then goto L56aefa;
  #L56aef8.  goto L56aefc;
  #L56aefa.  v1:= v2 @kind object;
  #L56aefc.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L56af10.  v0:= "a" @kind object;
  #L56af14.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af1a.  v0:= "b" @kind object;
  #L56af1e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af24.  v0:= "c" @kind object;
  #L56af28.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af2e.  call temp:= `maxOf`(v2, v3) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56af34.  v2:= temp @kind object;
  #L56af36.  call temp:= `maxOf`(v1, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56af3c.  v1:= temp @kind object;
  #L56af3e.  return v1 @kind object;
}
procedure `java.lang.Comparable` `maxOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56af50.  v0:= "a" @kind object;
  #L56af54.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af5a.  v0:= "other" @kind object;
  #L56af5e.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af64.  v0:= length @variable v4;
  #L56af66.  v1:= 0I;
  #L56af68.  if v1 >= v0 then goto L56af7e;
  #L56af6c.  v2:= v4[v1] @kind object;
  #L56af70.  call temp:= `maxOf`(v3, v2) @signature `Lkotlin/comparisons/ComparisonsKt;.maxOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56af76.  v3:= temp @kind object;
  #L56af78.  v1:= v1 + 1;
  #L56af7c.  goto L56af68;
  #L56af7e.  return v3 @kind object;
}
procedure `short` `maxOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.maxOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56b0b8.  v0:= "other" @kind object;
  #L56b0bc.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b0c2.  v0:= length @variable v4;
  #L56b0c4.  v1:= 0I;
  #L56b0c6.  if v1 >= v0 then goto L56b0de;
  #L56b0ca.  v2:= v4[v1] @kind short;
  #L56b0ce.  call temp:= `max`(v3, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L56b0d4.  v3:= temp;
  #L56b0d6.  v3:= (`short`) v3 @kind i2s;
  #L56b0d8.  v1:= v1 + 1;
  #L56b0dc.  goto L56b0c6;
  #L56b0de.  return v3;
}
procedure `byte` `minOf`(`byte` v3 , `byte`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(B[B)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56ad50.  v0:= "other" @kind object;
  #L56ad54.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ad5a.  v0:= length @variable v4;
  #L56ad5c.  v1:= 0I;
  #L56ad5e.  if v1 >= v0 then goto L56ad76;
  #L56ad62.  v2:= v4[v1] @kind byte;
  #L56ad66.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L56ad6c.  v3:= temp;
  #L56ad6e.  v3:= (`byte`) v3 @kind i2b;
  #L56ad70.  v1:= v1 + 1;
  #L56ad74.  goto L56ad5e;
  #L56ad76.  return v3;
}
procedure `double` `minOf`(`double` v4 , `double`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(D[D)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L56adc0.  v0:= "other" @kind object;
  #L56adc4.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56adca.  v0:= length @variable v6;
  #L56adcc.  v1:= 0I;
  #L56adce.  if v1 >= v0 then goto L56ade4;
  #L56add2.  v2:= v6[v1] @kind wide;
  #L56add6.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(DD)D` @kind static;
  #L56addc.  v4:= temp @kind wide;
  #L56adde.  v1:= v1 + 1;
  #L56ade2.  goto L56adce;
  #L56ade4.  return v4 @kind wide;
}
procedure `float` `minOf`(`float` v3 , `float`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(F[F)F` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56ae30.  v0:= "other" @kind object;
  #L56ae34.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ae3a.  v0:= length @variable v4;
  #L56ae3c.  v1:= 0I;
  #L56ae3e.  if v1 >= v0 then goto L56ae54;
  #L56ae42.  v2:= v4[v1];
  #L56ae46.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(FF)F` @kind static;
  #L56ae4c.  v3:= temp;
  #L56ae4e.  v1:= v1 + 1;
  #L56ae52.  goto L56ae3e;
  #L56ae54.  return v3;
}
procedure `int` `minOf`(`int` v3 , `int`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(I[I)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56aea0.  v0:= "other" @kind object;
  #L56aea4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56aeaa.  v0:= length @variable v4;
  #L56aeac.  v1:= 0I;
  #L56aeae.  if v1 >= v0 then goto L56aec4;
  #L56aeb2.  v2:= v4[v1];
  #L56aeb6.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L56aebc.  v3:= temp;
  #L56aebe.  v1:= v1 + 1;
  #L56aec2.  goto L56aeae;
  #L56aec4.  return v3;
}
procedure `long` `minOf`(`long` v4 , `long`[] v6 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(J[J)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L56b080.  v0:= "other" @kind object;
  #L56b084.  call `checkNotNullParameter`(v6, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b08a.  v0:= length @variable v6;
  #L56b08c.  v1:= 0I;
  #L56b08e.  if v1 >= v0 then goto L56b0a4;
  #L56b092.  v2:= v6[v1] @kind wide;
  #L56b096.  call temp:= `min`(v4, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L56b09c.  v4:= temp @kind wide;
  #L56b09e.  v1:= v1 + 1;
  #L56b0a2.  goto L56b08e;
  #L56b0a4.  return v4 @kind wide;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L56af90.  v0:= "a" @kind object;
  #L56af94.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56af9a.  v0:= "b" @kind object;
  #L56af9e.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56afa4.  call temp:= `compareTo`(v1, v2) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L56afaa.  v0:= temp;
  #L56afac.  if v0 > 0 then goto L56afb2;
  #L56afb0.  goto L56afb4;
  #L56afb2.  v1:= v2 @kind object;
  #L56afb4.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v1 @kind object, `java.lang.Comparable` v2 @kind object, `java.lang.Comparable` v3 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L56afc8.  v0:= "a" @kind object;
  #L56afcc.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56afd2.  v0:= "b" @kind object;
  #L56afd6.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56afdc.  v0:= "c" @kind object;
  #L56afe0.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56afe6.  call temp:= `minOf`(v2, v3) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56afec.  v2:= temp @kind object;
  #L56afee.  call temp:= `minOf`(v1, v2) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56aff4.  v1:= temp @kind object;
  #L56aff6.  return v1 @kind object;
}
procedure `java.lang.Comparable` `minOf`(`java.lang.Comparable` v3 @kind object, `java.lang.Comparable`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;[Ljava/lang/Comparable;)Ljava/lang/Comparable;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56b008.  v0:= "a" @kind object;
  #L56b00c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b012.  v0:= "other" @kind object;
  #L56b016.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b01c.  v0:= length @variable v4;
  #L56b01e.  v1:= 0I;
  #L56b020.  if v1 >= v0 then goto L56b036;
  #L56b024.  v2:= v4[v1] @kind object;
  #L56b028.  call temp:= `minOf`(v3, v2) @signature `Lkotlin/comparisons/b;.minOf:(Ljava/lang/Comparable;Ljava/lang/Comparable;)Ljava/lang/Comparable;` @kind static;
  #L56b02e.  v3:= temp @kind object;
  #L56b030.  v1:= v1 + 1;
  #L56b034.  goto L56b020;
  #L56b036.  return v3 @kind object;
}
procedure `short` `minOf`(`short` v3 , `short`[] v4 @kind object) @signature `Lkotlin/comparisons/b;.minOf:(S[S)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56b0f0.  v0:= "other" @kind object;
  #L56b0f4.  call `checkNotNullParameter`(v4, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56b0fa.  v0:= length @variable v4;
  #L56b0fc.  v1:= 0I;
  #L56b0fe.  if v1 >= v0 then goto L56b116;
  #L56b102.  v2:= v4[v1] @kind short;
  #L56b106.  call temp:= `min`(v3, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L56b10c.  v3:= temp;
  #L56b10e.  v3:= (`short`) v3 @kind i2s;
  #L56b110.  v1:= v1 + 1;
  #L56b114.  goto L56b0fe;
  #L56b116.  return v3;
}
