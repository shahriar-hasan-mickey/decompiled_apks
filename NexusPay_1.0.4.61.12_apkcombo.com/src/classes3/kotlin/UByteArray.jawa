record `kotlin.UByteArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `byte`[] `kotlin.UByteArray.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UByteArray` v1 @kind this, `byte`[] v2 @kind object) @signature `Lkotlin/UByteArray;.<init>:([B)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L52fe38.  v0:= "storage" @kind object;
  #L52fe3c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52fe42.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52fe48.  v1.`kotlin.UByteArray.a` @type ^`byte`[] := v2 @kind object;
  #L52fe4c.  return @kind void;
}
procedure `kotlin.UByteArray` `box-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.box-impl:([B)Lkotlin/UByteArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L52fe10.  v0:= "v" @kind object;
  #L52fe14.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52fe1a.  v0:= new `kotlin.UByteArray`;
  #L52fe1e.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray;.<init>:([B)V` @kind direct;
  #L52fe24.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UByteArray;.constructor-impl:(I)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L52fc68.  v0:= new `byte`[v0];
  #L52fc6c.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @kind static;
  #L52fc72.  v0:= temp @kind object;
  #L52fc74.  return v0 @kind object;
}
procedure `byte`[] `constructor-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.constructor-impl:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52fc4c.  v0:= "storage" @kind object;
  #L52fc50.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52fc56.  return v1 @kind object;
}
procedure `boolean` `contains-7apg3OU`(`byte`[] v0 @kind object, `byte` v1 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L52fa64.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L52fa6a.  v0:= temp;
  #L52fa6c.  return v0;
}
procedure `boolean` `containsAll-impl`(`byte`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52faa0.  v0:= "elements" @kind object;
  #L52faa4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52faaa.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L52fab0.  v0:= temp;
  #L52fab2.  v1:= 0I;
  #L52fab4.  v2:= 1I;
  #L52fab6.  if v0 == 0 then goto L52fabe;
  #L52faba.  v1:= 1I;
  #L52fabc.  goto L52fb04;
  #L52fabe.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L52fac4.  v5:= temp @kind object;
  #L52fac6.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L52facc.  v0:= temp;
  #L52face.  if v0 == 0 then goto L52faba;
  #L52fad2.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L52fad8.  v0:= temp @kind object;
  #L52fada.  v3:= instanceof @variable v0 @type ^`kotlin.UByte` @kind boolean;
  #L52fade.  if v3 == 0 then goto L52fafe;
  #L52fae2.  v0:= (`kotlin.UByte`) v0 @kind object;
  #L52fae6.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L52faec.  v0:= temp;
  #L52faee.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([BB)Z` @kind static;
  #L52faf4.  v0:= temp;
  #L52faf6.  if v0 == 0 then goto L52fafe;
  #L52fafa.  v0:= 1I;
  #L52fafc.  goto L52fb00;
  #L52fafe.  v0:= 0I;
  #L52fb00.  if v0 != 0 then goto L52fac6;
  #L52fb04.  return v1;
}
procedure `boolean` `equals-impl`(`byte`[] v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52fb38.  v0:= instanceof @variable v2 @type ^`kotlin.UByteArray` @kind boolean;
  #L52fb3c.  if v0 == 0 then goto L52fb5c;
  #L52fb40.  v2:= (`kotlin.UByteArray`) v2 @kind object;
  #L52fb44.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @kind virtual;
  #L52fb4a.  v2:= temp @kind object;
  #L52fb4c.  call temp:= `areEqual`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L52fb52.  v1:= temp;
  #L52fb54.  if v1 == 0 then goto L52fb5c;
  #L52fb58.  v1:= 1I;
  #L52fb5a.  return v1;
  #L52fb5c.  v1:= 0I;
  #L52fb5e.  return v1;
}
procedure `boolean` `equals-impl0`(`byte`[] v0 @kind object, `byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.equals-impl0:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L52fb70.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L52fb76.  v0:= temp;
  #L52fb78.  return v0;
}
procedure `byte` `get-w2LRezQ`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UByteArray;.get-w2LRezQ:([BI)B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L52fc2c.  v0:= v0[v1] @kind byte;
  #L52fc30.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UByte;.constructor-impl:(B)B` @kind static;
  #L52fc36.  v0:= temp;
  #L52fc38.  return v0;
}
procedure `int` `getSize-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L52fcc0.  v0:= length @variable v0;
  #L52fcc2.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UByteArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L52fe80.  return @kind void;
}
procedure `int` `hashCode-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L52fcf4.  if v0 == 0 then goto L52fd02;
  #L52fcf8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L52fcfe.  v0:= temp;
  #L52fd00.  goto L52fd04;
  #L52fd02.  v0:= 0I;
  #L52fd04.  return v0;
}
procedure `boolean` `isEmpty-impl`(`byte`[] v0 @kind object) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L52fbac.  v0:= length @variable v0;
  #L52fbae.  if v0 != 0 then goto L52fbb6;
  #L52fbb2.  v0:= 1I;
  #L52fbb4.  goto L52fbb8;
  #L52fbb6.  v0:= 0I;
  #L52fbb8.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`byte`[] v1 @kind object) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52fdf4.  v0:= new `kotlin.UByteArray$a`;
  #L52fdf8.  call `<init>`(v0, v1) @signature `Lkotlin/UByteArray$a;.<init>:([B)V` @kind direct;
  #L52fdfe.  return v0 @kind object;
}
procedure `void` `set-VurrAj0`(`byte`[] v0 @kind object, `int` v1 , `byte` v2 ) @signature `Lkotlin/UByteArray;.set-VurrAj0:([BIB)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L52fe94.  v0[v1]:= v2 @kind byte;
  #L52fe98.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`byte`[] v2 @kind object) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L52fd8c.  v0:= new `java.lang.StringBuilder`;
  #L52fd90.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52fd96.  v1:= "UByteArray(storage=" @kind object;
  #L52fd9a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52fda0.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L52fda6.  v2:= temp @kind object;
  #L52fda8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52fdae.  v2:= ")" @kind object;
  #L52fdb2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52fdb8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52fdbe.  v2:= temp @kind object;
  #L52fdc0.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L52f9b0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52f9b4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52f9b8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52f9be.  throw v2;
}
procedure `boolean` `add-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.add-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52f9d0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52f9d4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52f9d8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52f9de.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52f9f0.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52f9f4.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52f9f8.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52f9fe.  throw v2;
}
procedure `void` `clear`(`kotlin.UByteArray` v2 @kind this) @signature `Lkotlin/UByteArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52fe60.  v0:= new `java.lang.UnsupportedOperationException`;
  #L52fe64.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L52fe68.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52fe6e.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52fa10.  v0:= instanceof @variable v2 @type ^`kotlin.UByte` @kind boolean;
  #L52fa14.  if v0 == 0 then goto L52fa2e;
  #L52fa18.  v2:= (`kotlin.UByte`) v2 @kind object;
  #L52fa1c.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UByte;.unbox-impl:()B` @kind virtual;
  #L52fa22.  v2:= temp;
  #L52fa24.  call temp:= `contains-7apg3OU`(v1, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @kind virtual;
  #L52fa2a.  v2:= temp;
  #L52fa2c.  return v2;
  #L52fa2e.  v2:= 0I;
  #L52fa30.  return v2;
}
procedure `boolean` `contains-7apg3OU`(`kotlin.UByteArray` v1 @kind this, `byte` v2 ) @signature `Lkotlin/UByteArray;.contains-7apg3OU:(B)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fa44.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fa48.  call temp:= `contains-7apg3OU`(v0, v2) @signature `Lkotlin/UByteArray;.contains-7apg3OU:([BB)Z` @kind static;
  #L52fa4e.  v2:= temp;
  #L52fa50.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fa80.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fa84.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UByteArray;.containsAll-impl:([BLjava/util/Collection;)Z` @kind static;
  #L52fa8a.  v2:= temp;
  #L52fa8c.  return v2;
}
procedure `boolean` `equals`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fb18.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fb1c.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UByteArray;.equals-impl:([BLjava/lang/Object;)Z` @kind static;
  #L52fb22.  v2:= temp;
  #L52fb24.  return v2;
}
procedure `int` `getSize`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fca0.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fca4.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UByteArray;.getSize-impl:([B)I` @kind static;
  #L52fcaa.  v0:= temp;
  #L52fcac.  return v0;
}
procedure `int` `hashCode`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fcd4.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fcd8.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UByteArray;.hashCode-impl:([B)I` @kind static;
  #L52fcde.  v0:= temp;
  #L52fce0.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fb8c.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fb90.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UByteArray;.isEmpty-impl:([B)Z` @kind static;
  #L52fb96.  v0:= temp;
  #L52fb98.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fdd4.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fdd8.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UByteArray;.iterator-impl:([B)Ljava/util/Iterator;` @kind static;
  #L52fdde.  v0:= temp @kind object;
  #L52fde0.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UByteArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UByteArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fbcc.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52fbd0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52fbd4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52fbda.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fbec.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52fbf0.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52fbf4.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52fbfa.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UByteArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UByteArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fc0c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L52fc10.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L52fc14.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52fc1a.  throw v2;
}
procedure `int` `size`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52fd18.  call temp:= `getSize`(v1) @signature `Lkotlin/UByteArray;.getSize:()I` @kind virtual;
  #L52fd1e.  v0:= temp;
  #L52fd20.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fd34.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L52fd3a.  v0:= temp @kind object;
  #L52fd3c.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UByteArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/UByteArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L52fd50.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L52fd56.  v1:= temp @kind object;
  #L52fd58.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52fd6c.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fd70.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UByteArray;.toString-impl:([B)Ljava/lang/String;` @kind static;
  #L52fd76.  v0:= temp @kind object;
  #L52fd78.  return v0 @kind object;
}
procedure `byte`[] `unbox-impl`(`kotlin.UByteArray` v1 @kind this) @signature `Lkotlin/UByteArray;.unbox-impl:()[B` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L52fc88.  v0:= v1.`kotlin.UByteArray.a` @type ^`byte`[] @kind object;
  #L52fc8c.  return v0 @kind object;
}
