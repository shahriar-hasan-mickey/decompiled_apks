record `kotlin.coroutines.AbstractCoroutineContextElement` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
  `kotlin.coroutines.CoroutineContext$Key` `kotlin.coroutines.AbstractCoroutineContextElement.key` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.<init>:(Lkotlin/coroutines/CoroutineContext$Key;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56bb40.  v0:= "key" @kind object;
  #L56bb44.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56bb4a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56bb50.  v1.`kotlin.coroutines.AbstractCoroutineContextElement.key` @type ^`kotlin.coroutines.CoroutineContext$Key` := v2 @kind object;
  #L56bb54.  return @kind void;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56ba98.  v0:= "operation" @kind object;
  #L56ba9c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56baa2.  call temp:= `fold`(v1, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L56baa8.  v2:= temp @kind object;
  #L56baaa.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56bb04.  v0:= "key" @kind object;
  #L56bb08.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56bb0e.  call temp:= `get`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.get:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind static;
  #L56bb14.  v2:= temp @kind object;
  #L56bb16.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Key` `getKey`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56bb28.  v0:= v1.`kotlin.coroutines.AbstractCoroutineContextElement.key` @type ^`kotlin.coroutines.CoroutineContext$Key` @kind object;
  #L56bb2c.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56babc.  v0:= "key" @kind object;
  #L56bac0.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56bac6.  call temp:= `minusKey`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.minusKey:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L56bacc.  v2:= temp @kind object;
  #L56bace.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.AbstractCoroutineContextElement` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/AbstractCoroutineContextElement;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56bae0.  v0:= "context" @kind object;
  #L56bae4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56baea.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L56baf0.  v2:= temp @kind object;
  #L56baf2.  return v2 @kind object;
}
