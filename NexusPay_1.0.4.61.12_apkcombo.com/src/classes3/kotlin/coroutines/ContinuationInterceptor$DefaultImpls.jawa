record `kotlin.coroutines.ContinuationInterceptor$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.fold:(Lkotlin/coroutines/ContinuationInterceptor;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56c144.  v0:= "operation" @kind object;
  #L56c148.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c14e.  call temp:= `fold`(v1, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.fold:(Lkotlin/coroutines/CoroutineContext$Element;Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind static;
  #L56c154.  v1:= temp @kind object;
  #L56c156.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.ContinuationInterceptor` v2 @kind object, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.get:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L56c1e8.  v0:= "key" @kind object;
  #L56c1ec.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c1f2.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L56c1f6.  v1:= 0I;
  #L56c1f8.  if v0 == 0 then goto L56c22a;
  #L56c1fc.  v3:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v3 @kind object;
  #L56c200.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L56c206.  v0:= temp @kind object;
  #L56c208.  call temp:= `isSubKey$kotlin_stdlib`(v3, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L56c20e.  v0:= temp;
  #L56c210.  if v0 == 0 then goto L56c228;
  #L56c214.  call temp:= `tryCast$kotlin_stdlib`(v3, v2) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L56c21a.  v2:= temp @kind object;
  #L56c21c.  v3:= instanceof @variable v2 @type ^`kotlin.coroutines.CoroutineContext$Element` @kind boolean;
  #L56c220.  if v3 != 0 then goto L56c226;
  #L56c224.  goto L56c228;
  #L56c226.  v1:= v2 @kind object;
  #L56c228.  return v1 @kind object;
  #L56c22a.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L56c22e.  if v0 != v3 then goto L56c248;
  #L56c232.  if v2 == 0 then goto L56c238;
  #L56c236.  goto L56c24a;
  #L56c238.  v2:= new `java.lang.NullPointerException`;
  #L56c23c.  v3:= "null cannot be cast to non-null type E" @kind object;
  #L56c240.  call `<init>`(v2, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56c246.  throw v2;
  #L56c248.  v2:= v1 @kind object;
  #L56c24a.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext$Key` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.minusKey:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56c168.  v0:= "key" @kind object;
  #L56c16c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c172.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.AbstractCoroutineContextKey` @kind boolean;
  #L56c176.  if v0 == 0 then goto L56c1a4;
  #L56c17a.  v2:= (`kotlin.coroutines.AbstractCoroutineContextKey`) v2 @kind object;
  #L56c17e.  call temp:= `getKey`(v1) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L56c184.  v0:= temp @kind object;
  #L56c186.  call temp:= `isSubKey$kotlin_stdlib`(v2, v0) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.isSubKey$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Key;)Z` @kind virtual;
  #L56c18c.  v0:= temp;
  #L56c18e.  if v0 == 0 then goto L56c1a2;
  #L56c192.  call temp:= `tryCast$kotlin_stdlib`(v2, v1) @signature `Lkotlin/coroutines/AbstractCoroutineContextKey;.tryCast$kotlin_stdlib:(Lkotlin/coroutines/CoroutineContext$Element;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L56c198.  v2:= temp @kind object;
  #L56c19a.  if v2 == 0 then goto L56c1a2;
  #L56c19e.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L56c1a2.  return v1 @kind object;
  #L56c1a4.  v0:= `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L56c1a8.  if v0 != v2 then goto L56c1b0;
  #L56c1ac.  v1:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L56c1b0.  return v1 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.ContinuationInterceptor` v1 @kind object, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.plus:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L56c1c4.  v0:= "context" @kind object;
  #L56c1c8.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c1ce.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$Element$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext$Element;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L56c1d4.  v1:= temp @kind object;
  #L56c1d6.  return v1 @kind object;
}
procedure `void` `releaseInterceptedContinuation`(`kotlin.coroutines.ContinuationInterceptor` v0 @kind object, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor$DefaultImpls;.releaseInterceptedContinuation:(Lkotlin/coroutines/ContinuationInterceptor;Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L56c25c.  v0:= "continuation" @kind object;
  #L56c260.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c266.  return @kind void;
}
