record `kotlin.coroutines.jvm.internal.CompletedContinuation` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.Continuation` @kind interface {
}
global `kotlin.coroutines.jvm.internal.CompletedContinuation` `@@kotlin.coroutines.jvm.internal.CompletedContinuation.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L56d37c.  v0:= new `kotlin.coroutines.jvm.internal.CompletedContinuation`;
  #L56d380.  call `<init>`(v0) @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.<init>:()V` @kind direct;
  #L56d386.  `@@kotlin.coroutines.jvm.internal.CompletedContinuation.INSTANCE` @type ^`kotlin.coroutines.jvm.internal.CompletedContinuation` := v0 @kind object;
  #L56d38a.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.CompletedContinuation` v0 @kind this) @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L56d39c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56d3a2.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.coroutines.jvm.internal.CompletedContinuation` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56d354.  v0:= new `java.lang.IllegalStateException`;
  #L56d358.  v1:= "This continuation is already complete" @kind object;
  #L56d35c.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L56d362.  v1:= temp @kind object;
  #L56d364.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56d36a.  throw v0;
}
procedure `void` `resumeWith`(`kotlin.coroutines.jvm.internal.CompletedContinuation` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56d3b4.  v2:= new `java.lang.IllegalStateException`;
  #L56d3b8.  v0:= "This continuation is already complete" @kind object;
  #L56d3bc.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L56d3c2.  v0:= temp @kind object;
  #L56d3c4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56d3ca.  throw v2;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.jvm.internal.CompletedContinuation` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/CompletedContinuation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56d33c.  v0:= "This continuation is already complete" @kind object;
  #L56d340.  return v0 @kind object;
}
