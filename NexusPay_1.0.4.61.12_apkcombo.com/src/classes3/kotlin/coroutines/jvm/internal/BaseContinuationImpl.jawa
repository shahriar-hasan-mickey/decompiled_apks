record `kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind class @AccessFlag PUBLIC_ABSTRACT extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `kotlin.coroutines.Continuation` v1 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L56d1a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56d1aa.  v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` := v1 @kind object;
  #L56d1ae.  return @kind void;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this, `java.lang.Object` v1 @kind object, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;

  #L56d110.  v1:= "completion" @kind object;
  #L56d114.  call `checkNotNullParameter`(v2, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56d11a.  v1:= new `java.lang.UnsupportedOperationException`;
  #L56d11e.  v2:= "create(Any?;Continuation) has not been overridden" @kind object;
  #L56d122.  call `<init>`(v1, v2) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56d128.  throw v1;
}
procedure `kotlin.coroutines.Continuation` `create`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.create:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56d13c.  v0:= "completion" @kind object;
  #L56d140.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56d146.  v2:= new `java.lang.UnsupportedOperationException`;
  #L56d14a.  v0:= "create(Continuation) has not been overridden" @kind object;
  #L56d14e.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56d154.  throw v2;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56d180.  v0:= v2.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56d184.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L56d188.  if v1 != 0 then goto L56d18e;
  #L56d18c.  v0:= 0I;
  #L56d18e.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L56d192.  return v0 @kind object;
}
procedure `kotlin.coroutines.Continuation` `getCompletion`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getCompletion:()Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L56d168.  v0:= v1.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56d16c.  return v0 @kind object;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v1 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56d0a0.  call temp:= `getStackTraceElement`(v1) @signature `Lkotlin/coroutines/jvm/internal/DebugMetadataKt;.getStackTraceElement:(Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;)Ljava/lang/StackTraceElement;` @kind static;
  #L56d0a6.  v0:= temp @kind object;
  #L56d0a8.  return v0 @kind object;
}
procedure `java.lang.Object` `invokeSuspend`(`java.lang.Object` v0 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `releaseIntercepted`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v0 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @AccessFlag PROTECTED {
    temp;

  #L56d1c0.  return @kind void;
}
procedure `void` `resumeWith`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56d1d4.  v0:= v3 @kind object;
  #L56d1d6.  call `probeCoroutineResumed`(v0) @signature `Lkotlin/coroutines/jvm/internal/DebugProbesKt;.probeCoroutineResumed:(Lkotlin/coroutines/Continuation;)V` @kind static;
  #L56d1dc.  v1:= v0.`kotlin.coroutines.jvm.internal.BaseContinuationImpl.completion` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56d1e0.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L56d1e6.  call temp:= `invokeSuspend`(v0, v4) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.invokeSuspend:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L56d1ec.  v4:= temp @kind object;
  #L56d1ee.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56d1f4.  v2:= temp @kind object;
  #L56d1f6.  if v4 != v2 then goto L56d1fc;
  #L56d1fa.  return @kind void;
  #L56d1fc.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L56d200.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L56d206.  v4:= temp @kind object;
  #L56d208.  goto L56d220;
  #L56d20a.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L56d20c.  v2:= `@@kotlin.Result.Companion` @type ^`kotlin.Result$Companion` @kind object;
  #L56d210.  call temp:= `createFailure`(v4) @signature `Lkotlin/ResultKt;.createFailure:(Ljava/lang/Throwable;)Ljava/lang/Object;` @kind static;
  #L56d216.  v4:= temp @kind object;
  #L56d218.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/Result;.constructor-impl:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L56d21e.  v4:= temp @kind object;
  #L56d220.  call `releaseIntercepted`(v0) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.releaseIntercepted:()V` @kind virtual;
  #L56d226.  v0:= instanceof @variable v1 @type ^`kotlin.coroutines.jvm.internal.BaseContinuationImpl` @kind boolean;
  #L56d22a.  if v0 == 0 then goto L56d236;
  #L56d22e.  v0:= v1 @kind object;
  #L56d230.  v0:= (`kotlin.coroutines.jvm.internal.BaseContinuationImpl`) v0 @kind object;
  #L56d234.  goto L56d1d6;
  #L56d236.  call `resumeWith`(v1, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L56d23c.  return @kind void;
  catch `java.lang.Throwable` @[L56d1e6..L56d208] goto L56d20a;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.jvm.internal.BaseContinuationImpl` v2 @kind this) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56d0bc.  v0:= new `java.lang.StringBuilder`;
  #L56d0c0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56d0c6.  v1:= "Continuation at " @kind object;
  #L56d0ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56d0d0.  call temp:= `getStackTraceElement`(v2) @signature `Lkotlin/coroutines/jvm/internal/BaseContinuationImpl;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @kind virtual;
  #L56d0d6.  v1:= temp @kind object;
  #L56d0d8.  if v1 == 0 then goto L56d0de;
  #L56d0dc.  goto L56d0ee;
  #L56d0de.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L56d0e4.  v1:= temp @kind object;
  #L56d0e6.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L56d0ec.  v1:= temp @kind object;
  #L56d0ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56d0f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L56d0fa.  v0:= temp @kind object;
  #L56d0fc.  return v0 @kind object;
}
