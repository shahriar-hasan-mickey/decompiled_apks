record `kotlin.coroutines.ContinuationInterceptor$Key` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext$Key` @kind interface {
}
global `kotlin.coroutines.ContinuationInterceptor$Key` `@@kotlin.coroutines.ContinuationInterceptor$Key.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/ContinuationInterceptor$Key;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L56c278.  v0:= new `kotlin.coroutines.ContinuationInterceptor$Key`;
  #L56c27c.  call `<init>`(v0) @signature `Lkotlin/coroutines/ContinuationInterceptor$Key;.<init>:()V` @kind direct;
  #L56c282.  `@@kotlin.coroutines.ContinuationInterceptor$Key.a` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` := v0 @kind object;
  #L56c286.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.ContinuationInterceptor$Key` v0 @kind this) @signature `Lkotlin/coroutines/ContinuationInterceptor$Key;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L56c298.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56c29e.  return @kind void;
}
