record `kotlin.coroutines.SafeContinuation` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.Continuation` @kind interface, `kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind interface {
  `kotlin.coroutines.Continuation` `kotlin.coroutines.SafeContinuation.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `kotlin.coroutines.SafeContinuation.result` @AccessFlag PRIVATE_VOLATILE;
}
global `java.util.concurrent.atomic.AtomicReferenceFieldUpdater` `@@kotlin.coroutines.SafeContinuation.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/SafeContinuation;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L56c91c.  v0:= constclass @type ^`kotlin.coroutines.SafeContinuation` @kind object;
  #L56c920.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L56c924.  v2:= "result" @kind object;
  #L56c928.  call temp:= `newUpdater`(v0, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.newUpdater:(Ljava/lang/Class;Ljava/lang/Class;Ljava/lang/String;)Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;` @kind static;
  #L56c92e.  v0:= temp @kind object;
  #L56c930.  `@@kotlin.coroutines.SafeContinuation.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` := v0 @kind object;
  #L56c934.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56c948.  v0:= "delegate" @kind object;
  #L56c94c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c952.  v0:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L56c956.  call `<init>`(v1, v2, v0) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @kind direct;
  #L56c95c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.coroutines.SafeContinuation` v1 @kind this, `kotlin.coroutines.Continuation` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.<init>:(Lkotlin/coroutines/Continuation;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56c970.  v0:= "delegate" @kind object;
  #L56c974.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c97a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56c980.  v1.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` := v2 @kind object;
  #L56c984.  v1.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` := v3 @kind object;
  #L56c988.  return @kind void;
}
procedure `kotlin.coroutines.jvm.internal.CoroutineStackFrame` `getCallerFrame`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getCallerFrame:()Lkotlin/coroutines/jvm/internal/CoroutineStackFrame;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56c8f8.  v0:= v2.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56c8fc.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.jvm.internal.CoroutineStackFrame` @kind boolean;
  #L56c900.  if v1 != 0 then goto L56c906;
  #L56c904.  v0:= 0I;
  #L56c906.  v0:= (`kotlin.coroutines.jvm.internal.CoroutineStackFrame`) v0 @kind object;
  #L56c90a.  return v0 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `getContext`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56c8d8.  v0:= v1.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56c8dc.  call temp:= `getContext`(v0) @signature `Lkotlin/coroutines/Continuation;.getContext:()Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L56c8e2.  v0:= temp @kind object;
  #L56c8e4.  return v0 @kind object;
}
procedure `java.lang.Object` `getOrThrow`(`kotlin.coroutines.SafeContinuation` v3 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getOrThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56c824.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L56c828.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L56c82c.  if v0 != v1 then goto L56c856;
  #L56c830.  v0:= `@@kotlin.coroutines.SafeContinuation.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L56c834.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56c83a.  v2:= temp @kind object;
  #L56c83c.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L56c842.  v0:= temp;
  #L56c844.  if v0 == 0 then goto L56c852;
  #L56c848.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56c84e.  v0:= temp @kind object;
  #L56c850.  return v0 @kind object;
  #L56c852.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L56c856.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L56c85a.  if v0 != v1 then goto L56c868;
  #L56c85e.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56c864.  v0:= temp @kind object;
  #L56c866.  goto L56c870;
  #L56c868.  v1:= instanceof @variable v0 @type ^`kotlin.Result$Failure` @kind boolean;
  #L56c86c.  if v1 != 0 then goto L56c872;
  #L56c870.  return v0 @kind object;
  #L56c872.  v0:= (`kotlin.Result$Failure`) v0 @kind object;
  #L56c876.  v0:= v0.`kotlin.Result$Failure.exception` @type ^`java.lang.Throwable` @kind object;
  #L56c87a.  throw v0;
}
procedure `java.lang.StackTraceElement` `getStackTraceElement`(`kotlin.coroutines.SafeContinuation` v1 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.getStackTraceElement:()Ljava/lang/StackTraceElement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56c88c.  v0:= 0I;
  #L56c88e.  return v0 @kind object;
}
procedure `void` `resumeWith`(`kotlin.coroutines.SafeContinuation` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/coroutines/SafeContinuation;.resumeWith:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L56c99c.  v0:= v3.`kotlin.coroutines.SafeContinuation.result` @type ^`java.lang.Object` @kind object;
  #L56c9a0.  v1:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.UNDECIDED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L56c9a4.  if v0 != v1 then goto L56c9ba;
  #L56c9a8.  v0:= `@@kotlin.coroutines.SafeContinuation.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L56c9ac.  call temp:= `compareAndSet`(v0, v3, v1, v4) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L56c9b2.  v0:= temp;
  #L56c9b4.  if v0 == 0 then goto L56c99c;
  #L56c9b8.  return @kind void;
  #L56c9ba.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56c9c0.  v1:= temp @kind object;
  #L56c9c2.  if v0 != v1 then goto L56c9ee;
  #L56c9c6.  v0:= `@@kotlin.coroutines.SafeContinuation.b` @type ^`java.util.concurrent.atomic.AtomicReferenceFieldUpdater` @kind object;
  #L56c9ca.  call temp:= `getCOROUTINE_SUSPENDED`() @signature `Lkotlin/coroutines/intrinsics/IntrinsicsKt;.getCOROUTINE_SUSPENDED:()Ljava/lang/Object;` @kind static;
  #L56c9d0.  v1:= temp @kind object;
  #L56c9d2.  v2:= `@@kotlin.coroutines.intrinsics.CoroutineSingletons.RESUMED` @type ^`kotlin.coroutines.intrinsics.CoroutineSingletons` @kind object;
  #L56c9d6.  call temp:= `compareAndSet`(v0, v3, v1, v2) @signature `Ljava/util/concurrent/atomic/AtomicReferenceFieldUpdater;.compareAndSet:(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)Z` @kind virtual;
  #L56c9dc.  v0:= temp;
  #L56c9de.  if v0 == 0 then goto L56c99c;
  #L56c9e2.  v0:= v3.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56c9e6.  call `resumeWith`(v0, v4) @signature `Lkotlin/coroutines/Continuation;.resumeWith:(Ljava/lang/Object;)V` @kind interface;
  #L56c9ec.  return @kind void;
  #L56c9ee.  v4:= new `java.lang.IllegalStateException`;
  #L56c9f2.  v0:= "Already resumed" @kind object;
  #L56c9f6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56c9fc.  throw v4;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.SafeContinuation` v2 @kind this) @signature `Lkotlin/coroutines/SafeContinuation;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56c8a0.  v0:= new `java.lang.StringBuilder`;
  #L56c8a4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56c8aa.  v1:= "SafeContinuation for " @kind object;
  #L56c8ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56c8b4.  v1:= v2.`kotlin.coroutines.SafeContinuation.a` @type ^`kotlin.coroutines.Continuation` @kind object;
  #L56c8b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56c8be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L56c8c4.  v0:= temp @kind object;
  #L56c8c6.  return v0 @kind object;
}
