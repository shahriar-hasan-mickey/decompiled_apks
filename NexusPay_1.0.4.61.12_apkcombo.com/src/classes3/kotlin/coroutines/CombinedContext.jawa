record `kotlin.coroutines.CombinedContext` @kind class @AccessFlag PUBLIC_FINAL extends `kotlin.coroutines.CoroutineContext` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.coroutines.CoroutineContext` `kotlin.coroutines.CombinedContext.a` @AccessFlag PRIVATE_FINAL;
  `kotlin.coroutines.CoroutineContext$Element` `kotlin.coroutines.CombinedContext.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object, `kotlin.coroutines.CoroutineContext$Element` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56c110.  v0:= "left" @kind object;
  #L56c114.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c11a.  v0:= "element" @kind object;
  #L56c11e.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c124.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L56c12a.  v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` := v2 @kind object;
  #L56c12e.  v1.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` := v3 @kind object;
  #L56c132.  return @kind void;
}
procedure `boolean` `a`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext$Element` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L56be0c.  call temp:= `getKey`(v2) @signature `Lkotlin/coroutines/CoroutineContext$Element;.getKey:()Lkotlin/coroutines/CoroutineContext$Key;` @kind interface;
  #L56be12.  v0:= temp @kind object;
  #L56be14.  call temp:= `get`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind virtual;
  #L56be1a.  v0:= temp @kind object;
  #L56be1c.  call temp:= `areEqual`(v0, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L56be22.  v2:= temp;
  #L56be24.  return v2;
}
procedure `boolean` `b`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CombinedContext` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.b:(Lkotlin/coroutines/CombinedContext;)Z` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;

  #L56be38.  v0:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56be3c.  call temp:= `a`(v1, v0) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L56be42.  v0:= temp;
  #L56be44.  if v0 != 0 then goto L56be4c;
  #L56be48.  v2:= 0I;
  #L56be4a.  return v2;
  #L56be4c.  v2:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56be50.  v0:= instanceof @variable v2 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L56be54.  if v0 == 0 then goto L56be5e;
  #L56be58.  v2:= (`kotlin.coroutines.CombinedContext`) v2 @kind object;
  #L56be5c.  goto L56be38;
  #L56be5e.  if v2 == 0 then goto L56be70;
  #L56be62.  v2:= (`kotlin.coroutines.CoroutineContext$Element`) v2 @kind object;
  #L56be66.  call temp:= `a`(v1, v2) @signature `Lkotlin/coroutines/CombinedContext;.a:(Lkotlin/coroutines/CoroutineContext$Element;)Z` @kind direct;
  #L56be6c.  v2:= temp;
  #L56be6e.  return v2;
  #L56be70.  v2:= new `java.lang.NullPointerException`;
  #L56be74.  v0:= "null cannot be cast to non-null type kotlin.coroutines.CoroutineContext.Element" @kind object;
  #L56be78.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56be7e.  throw v2;
}
procedure `int` `c`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56bf08.  v0:= 2I;
  #L56bf0a.  v1:= v3 @kind object;
  #L56bf0c.  v1:= v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56bf10.  v2:= instanceof @variable v1 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L56bf14.  if v2 != 0 then goto L56bf1a;
  #L56bf18.  v1:= 0I;
  #L56bf1a.  v1:= (`kotlin.coroutines.CombinedContext`) v1 @kind object;
  #L56bf1e.  if v1 == 0 then goto L56bf28;
  #L56bf22.  v0:= v0 + 1;
  #L56bf26.  goto L56bf0c;
  #L56bf28.  return v0;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.coroutines.CombinedContext` v6 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L56bf70.  call temp:= `c`(v6) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L56bf76.  v0:= temp;
  #L56bf78.  v1:= new `kotlin.coroutines.CoroutineContext`[v0];
  #L56bf7c.  v2:= new `kotlin.jvm.internal.Ref$IntRef`;
  #L56bf80.  call `<init>`(v2) @signature `Lkotlin/jvm/internal/Ref$IntRef;.<init>:()V` @kind direct;
  #L56bf86.  v3:= 0I;
  #L56bf88.  v2.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int` := v3;
  #L56bf8c.  v4:= `@@kotlin.Unit.INSTANCE` @type ^`kotlin.Unit` @kind object;
  #L56bf90.  v5:= new `kotlin.coroutines.CombinedContext$b`;
  #L56bf94.  call `<init>`(v5, v1, v2) @signature `Lkotlin/coroutines/CombinedContext$b;.<init>:([Lkotlin/coroutines/CoroutineContext;Lkotlin/jvm/internal/Ref$IntRef;)V` @kind direct;
  #L56bf9a.  call temp:= `fold`(v6, v4, v5) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L56bfa0.  v2:= v2.`kotlin.jvm.internal.Ref$IntRef.element` @type ^`int`;
  #L56bfa4.  if v2 != v0 then goto L56bfaa;
  #L56bfa8.  v3:= 1I;
  #L56bfaa.  if v3 == 0 then goto L56bfba;
  #L56bfae.  v0:= new `kotlin.coroutines.CombinedContext$Serialized`;
  #L56bfb2.  call `<init>`(v0, v1) @signature `Lkotlin/coroutines/CombinedContext$Serialized;.<init>:([Lkotlin/coroutines/CoroutineContext;)V` @kind direct;
  #L56bfb8.  return v0 @kind object;
  #L56bfba.  v0:= new `java.lang.IllegalStateException`;
  #L56bfbe.  v1:= "Check failed." @kind object;
  #L56bfc2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L56bfc8.  v1:= temp @kind object;
  #L56bfca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56bfd0.  throw v0;
}
procedure `boolean` `equals`(`kotlin.coroutines.CombinedContext` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56be90.  if v2 == v3 then goto L56bec6;
  #L56be94.  v0:= instanceof @variable v3 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L56be98.  if v0 == 0 then goto L56bec2;
  #L56be9c.  v3:= (`kotlin.coroutines.CombinedContext`) v3 @kind object;
  #L56bea0.  call temp:= `c`(v3) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L56bea6.  v0:= temp;
  #L56bea8.  call temp:= `c`(v2) @signature `Lkotlin/coroutines/CombinedContext;.c:()I` @kind direct;
  #L56beae.  v1:= temp;
  #L56beb0.  if v0 != v1 then goto L56bec2;
  #L56beb4.  call temp:= `b`(v3, v2) @signature `Lkotlin/coroutines/CombinedContext;.b:(Lkotlin/coroutines/CombinedContext;)Z` @kind direct;
  #L56beba.  v3:= temp;
  #L56bebc.  if v3 == 0 then goto L56bec2;
  #L56bec0.  goto L56bec6;
  #L56bec2.  v3:= 0I;
  #L56bec4.  goto L56bec8;
  #L56bec6.  v3:= 1I;
  #L56bec8.  return v3;
}
procedure `java.lang.Object` `fold`(`kotlin.coroutines.CombinedContext` v1 @kind this, `java.lang.Object` v2 @kind object, `kotlin.jvm.functions.Function2` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56bf3c.  v0:= "operation" @kind object;
  #L56bf40.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56bf46.  v0:= v1.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56bf4a.  call temp:= `fold`(v0, v2, v3) @signature `Lkotlin/coroutines/CoroutineContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind interface;
  #L56bf50.  v2:= temp @kind object;
  #L56bf52.  v0:= v1.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56bf56.  call temp:= `invoke`(v3, v2, v0) @signature `Lkotlin/jvm/functions/Function2;.invoke:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L56bf5c.  v2:= temp @kind object;
  #L56bf5e.  return v2 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56c0c4.  v0:= "key" @kind object;
  #L56c0c8.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c0ce.  v0:= v2 @kind object;
  #L56c0d0.  v1:= v0.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56c0d4.  call temp:= `get`(v1, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L56c0da.  v1:= temp @kind object;
  #L56c0dc.  if v1 == 0 then goto L56c0e2;
  #L56c0e0.  return v1 @kind object;
  #L56c0e2.  v0:= v0.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56c0e6.  v1:= instanceof @variable v0 @type ^`kotlin.coroutines.CombinedContext` @kind boolean;
  #L56c0ea.  if v1 == 0 then goto L56c0f4;
  #L56c0ee.  v0:= (`kotlin.coroutines.CombinedContext`) v0 @kind object;
  #L56c0f2.  goto L56c0d0;
  #L56c0f4.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L56c0fa.  v3:= temp @kind object;
  #L56c0fc.  return v3 @kind object;
}
procedure `int` `hashCode`(`kotlin.coroutines.CombinedContext` v2 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56bedc.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56bee0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L56bee6.  v0:= temp;
  #L56bee8.  v1:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56beec.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L56bef2.  v1:= temp;
  #L56bef4.  v0:= v0 + v1 @kind int;
  #L56bef6.  return v0;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.CombinedContext` v2 @kind this, `kotlin.coroutines.CoroutineContext$Key` v3 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L56c038.  v0:= "key" @kind object;
  #L56c03c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c042.  v0:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56c046.  call temp:= `get`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext$Element;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @kind interface;
  #L56c04c.  v0:= temp @kind object;
  #L56c04e.  if v0 == 0 then goto L56c058;
  #L56c052.  v3:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56c056.  return v3 @kind object;
  #L56c058.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56c05c.  call temp:= `minusKey`(v0, v3) @signature `Lkotlin/coroutines/CoroutineContext;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @kind interface;
  #L56c062.  v3:= temp @kind object;
  #L56c064.  v0:= v2.`kotlin.coroutines.CombinedContext.a` @type ^`kotlin.coroutines.CoroutineContext` @kind object;
  #L56c068.  if v3 != v0 then goto L56c070;
  #L56c06c.  v3:= v2 @kind object;
  #L56c06e.  goto L56c08e;
  #L56c070.  v0:= `@@kotlin.coroutines.EmptyCoroutineContext.INSTANCE` @type ^`kotlin.coroutines.EmptyCoroutineContext` @kind object;
  #L56c074.  if v3 != v0 then goto L56c07e;
  #L56c078.  v3:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56c07c.  goto L56c08e;
  #L56c07e.  v0:= new `kotlin.coroutines.CombinedContext`;
  #L56c082.  v1:= v2.`kotlin.coroutines.CombinedContext.b` @type ^`kotlin.coroutines.CoroutineContext$Element` @kind object;
  #L56c086.  call `<init>`(v0, v3, v1) @signature `Lkotlin/coroutines/CombinedContext;.<init>:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext$Element;)V` @kind direct;
  #L56c08c.  v3:= v0 @kind object;
  #L56c08e.  return v3 @kind object;
}
procedure `kotlin.coroutines.CoroutineContext` `plus`(`kotlin.coroutines.CombinedContext` v1 @kind this, `kotlin.coroutines.CoroutineContext` v2 @kind object) @signature `Lkotlin/coroutines/CombinedContext;.plus:(Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L56c0a0.  v0:= "context" @kind object;
  #L56c0a4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56c0aa.  call temp:= `plus`(v1, v2) @signature `Lkotlin/coroutines/CoroutineContext$DefaultImpls;.plus:(Lkotlin/coroutines/CoroutineContext;Lkotlin/coroutines/CoroutineContext;)Lkotlin/coroutines/CoroutineContext;` @kind static;
  #L56c0b0.  v2:= temp @kind object;
  #L56c0b2.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.coroutines.CombinedContext` v3 @kind this) @signature `Lkotlin/coroutines/CombinedContext;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L56bfe4.  v0:= new `java.lang.StringBuilder`;
  #L56bfe8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L56bfee.  v1:= "[" @kind object;
  #L56bff2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56bff8.  v1:= `@@kotlin.coroutines.CombinedContext$a.a` @type ^`kotlin.coroutines.CombinedContext$a` @kind object;
  #L56bffc.  v2:= "" @kind object;
  #L56c000.  call temp:= `fold`(v3, v2, v1) @signature `Lkotlin/coroutines/CombinedContext;.fold:(Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Ljava/lang/Object;` @kind virtual;
  #L56c006.  v1:= temp @kind object;
  #L56c008.  v1:= (`java.lang.String`) v1 @kind object;
  #L56c00c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56c012.  v1:= "]" @kind object;
  #L56c016.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L56c01c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L56c022.  v0:= temp @kind object;
  #L56c024.  return v0 @kind object;
}
