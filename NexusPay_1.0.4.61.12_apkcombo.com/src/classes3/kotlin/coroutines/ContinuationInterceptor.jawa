record `kotlin.coroutines.ContinuationInterceptor` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `kotlin.coroutines.CoroutineContext$Element` @kind interface {
}
global `kotlin.coroutines.ContinuationInterceptor$Key` `@@kotlin.coroutines.ContinuationInterceptor.Key` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/coroutines/ContinuationInterceptor;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L56c2b0.  v0:= `@@kotlin.coroutines.ContinuationInterceptor$Key.a` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` @kind object;
  #L56c2b4.  `@@kotlin.coroutines.ContinuationInterceptor.Key` @type ^`kotlin.coroutines.ContinuationInterceptor$Key` := v0 @kind object;
  #L56c2b8.  return @kind void;
}
procedure `kotlin.coroutines.CoroutineContext$Element` `get`(`kotlin.coroutines.CoroutineContext$Key` v0 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor;.get:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext$Element;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.coroutines.Continuation` `interceptContinuation`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor;.interceptContinuation:(Lkotlin/coroutines/Continuation;)Lkotlin/coroutines/Continuation;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `kotlin.coroutines.CoroutineContext` `minusKey`(`kotlin.coroutines.CoroutineContext$Key` v0 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor;.minusKey:(Lkotlin/coroutines/CoroutineContext$Key;)Lkotlin/coroutines/CoroutineContext;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `releaseInterceptedContinuation`(`kotlin.coroutines.Continuation` v0 @kind object) @signature `Lkotlin/coroutines/ContinuationInterceptor;.releaseInterceptedContinuation:(Lkotlin/coroutines/Continuation;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
