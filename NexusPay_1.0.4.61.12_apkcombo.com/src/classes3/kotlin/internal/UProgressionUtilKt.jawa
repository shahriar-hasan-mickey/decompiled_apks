record `kotlin.internal.UProgressionUtilKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `a`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L56e404.  call temp:= `uintRemainder-J1ME1BU`(v1, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L56e40a.  v1:= temp;
  #L56e40c.  call temp:= `uintRemainder-J1ME1BU`(v2, v3) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @kind static;
  #L56e412.  v2:= temp;
  #L56e414.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L56e41a.  v0:= temp;
  #L56e41c.  v1:= v1 - v2 @kind int;
  #L56e41e.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e424.  v1:= temp;
  #L56e426.  if v0 < 0 then goto L56e42c;
  #L56e42a.  goto L56e436;
  #L56e42c.  v1:= v1 + v3 @kind int;
  #L56e42e.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e434.  v1:= temp;
  #L56e436.  return v1;
}
procedure `long` `b`(`long` v1 , `long` v3 , `long` v5 ) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;

  #L56e4c8.  call temp:= `ulongRemainder-eb3DHEI`(v1, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L56e4ce.  v1:= temp @kind wide;
  #L56e4d0.  call temp:= `ulongRemainder-eb3DHEI`(v3, v5) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @kind static;
  #L56e4d6.  v3:= temp @kind wide;
  #L56e4d8.  call temp:= `ulongCompare`(v1, v3) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L56e4de.  v0:= temp;
  #L56e4e0.  v1:= v1 - v3 @kind long;
  #L56e4e2.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e4e8.  v1:= temp @kind wide;
  #L56e4ea.  if v0 < 0 then goto L56e4f0;
  #L56e4ee.  goto L56e4fa;
  #L56e4f0.  v1:= v1 + v5 @kind long;
  #L56e4f2.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e4f8.  v1:= temp @kind wide;
  #L56e4fa.  return v1 @kind wide;
}
procedure `long` `getProgressionLastElement-7ftBX0g`(`long` v7 , `long` v9 , `long` v11 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-7ftBX0g:(JJJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L56e50c.  v0:= 0L;
  #L56e510.  v2:= lcmp(v11, v0);
  #L56e514.  if v2 <= 0 then goto L56e546;
  #L56e518.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L56e51e.  v0:= temp;
  #L56e520.  if v0 < 0 then goto L56e526;
  #L56e524.  goto L56e578;
  #L56e526.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e52c.  v5:= temp @kind wide;
  #L56e52e.  v1:= v9 @kind wide;
  #L56e530.  v3:= v7 @kind wide;
  #L56e532.  call temp:= `b`(v1, v3, v5) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @kind static;
  #L56e538.  v7:= temp @kind wide;
  #L56e53a.  v9:= v9 - v7 @kind long;
  #L56e53c.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e542.  v9:= temp @kind wide;
  #L56e544.  goto L56e578;
  #L56e546.  if v2 >= 0 then goto L56e57a;
  #L56e54a.  call temp:= `ulongCompare`(v7, v9) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L56e550.  v0:= temp;
  #L56e552.  if v0 > 0 then goto L56e558;
  #L56e556.  goto L56e578;
  #L56e558.  v11:= -v11 @kind long;
  #L56e55a.  call temp:= `constructor-impl`(v11) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e560.  v4:= temp @kind wide;
  #L56e562.  v0:= v7 @kind wide;
  #L56e564.  v2:= v9 @kind wide;
  #L56e566.  call temp:= `b`(v0, v2, v4) @signature `Lkotlin/internal/UProgressionUtilKt;.b:(JJJ)J` @kind static;
  #L56e56c.  v7:= temp @kind wide;
  #L56e56e.  v9:= v9 + v7 @kind long;
  #L56e570.  call temp:= `constructor-impl`(v9) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L56e576.  v9:= temp @kind wide;
  #L56e578.  return v9 @kind wide;
  #L56e57a.  v7:= new `java.lang.IllegalArgumentException`;
  #L56e57e.  v8:= "Step is zero." @kind object;
  #L56e582.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56e588.  throw v7;
}
procedure `int` `getProgressionLastElement-Nkh28Cs`(`int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/internal/UProgressionUtilKt;.getProgressionLastElement-Nkh28Cs:(III)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L56e448.  if v3 <= 0 then goto L56e476;
  #L56e44c.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L56e452.  v0:= temp;
  #L56e454.  if v0 < 0 then goto L56e45a;
  #L56e458.  goto L56e4a4;
  #L56e45a.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e460.  v3:= temp;
  #L56e462.  call temp:= `a`(v2, v1, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @kind static;
  #L56e468.  v1:= temp;
  #L56e46a.  v2:= v2 - v1 @kind int;
  #L56e46c.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e472.  v2:= temp;
  #L56e474.  goto L56e4a4;
  #L56e476.  if v3 >= 0 then goto L56e4a6;
  #L56e47a.  call temp:= `uintCompare`(v1, v2) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @kind static;
  #L56e480.  v0:= temp;
  #L56e482.  if v0 > 0 then goto L56e488;
  #L56e486.  goto L56e4a4;
  #L56e488.  v3:= -v3 @kind int;
  #L56e48a.  call temp:= `constructor-impl`(v3) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e490.  v3:= temp;
  #L56e492.  call temp:= `a`(v1, v2, v3) @signature `Lkotlin/internal/UProgressionUtilKt;.a:(III)I` @kind static;
  #L56e498.  v1:= temp;
  #L56e49a.  v2:= v2 + v1 @kind int;
  #L56e49c.  call temp:= `constructor-impl`(v2) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L56e4a2.  v2:= temp;
  #L56e4a4.  return v2;
  #L56e4a6.  v1:= new `java.lang.IllegalArgumentException`;
  #L56e4aa.  v2:= "Step is zero." @kind object;
  #L56e4ae.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56e4b4.  throw v1;
}
