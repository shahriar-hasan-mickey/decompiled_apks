record `kotlin.contracts.ContractBuilder$DefaultImpls` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `kotlin.contracts.CallsInPlace` `callsInPlace$default`(`kotlin.contracts.ContractBuilder` v0 @kind object, `kotlin.Function` v1 @kind object, `kotlin.contracts.InvocationKind` v2 @kind object, `int` v3 , `java.lang.Object` v4 @kind object) @signature `Lkotlin/contracts/ContractBuilder$DefaultImpls;.callsInPlace$default:(Lkotlin/contracts/ContractBuilder;Lkotlin/Function;Lkotlin/contracts/InvocationKind;ILjava/lang/Object;)Lkotlin/contracts/CallsInPlace;` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L56b980.  if v4 != 0 then goto L56b99a;
  #L56b984.  v3:= v3 ^& 2;
  #L56b988.  if v3 == 0 then goto L56b990;
  #L56b98c.  v2:= `@@kotlin.contracts.InvocationKind.UNKNOWN` @type ^`kotlin.contracts.InvocationKind` @kind object;
  #L56b990.  call temp:= `callsInPlace`(v0, v1, v2) @signature `Lkotlin/contracts/ContractBuilder;.callsInPlace:(Lkotlin/Function;Lkotlin/contracts/InvocationKind;)Lkotlin/contracts/CallsInPlace;` @kind interface;
  #L56b996.  v0:= temp @kind object;
  #L56b998.  return v0 @kind object;
  #L56b99a.  v0:= new `java.lang.UnsupportedOperationException`;
  #L56b99e.  v1:= "Super calls with default arguments not supported in this target, function: callsInPlace" @kind object;
  #L56b9a2.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L56b9a8.  throw v0;
}
