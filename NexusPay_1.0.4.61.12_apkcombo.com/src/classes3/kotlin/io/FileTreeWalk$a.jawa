record `kotlin.io.FileTreeWalk$a` @kind class @AccessFlag ABSTRACT extends `kotlin.io.FileTreeWalk$c` @kind class {
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$a` v1 @kind this, `java.io.File` v2 @kind object) @signature `Lkotlin/io/FileTreeWalk$a;.<init>:(Ljava/io/File;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L56ef44.  v0:= "rootDir" @kind object;
  #L56ef48.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L56ef4e.  call `<init>`(v1, v2) @signature `Lkotlin/io/FileTreeWalk$c;.<init>:(Ljava/io/File;)V` @kind direct;
  #L56ef54.  v0:= `@@kotlin._Assertions.ENABLED` @type ^`boolean` @kind boolean;
  #L56ef58.  if v0 == 0 then goto L56ef82;
  #L56ef5c.  call temp:= `isDirectory`(v2) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L56ef62.  v2:= temp;
  #L56ef64.  v0:= `@@kotlin._Assertions.ENABLED` @type ^`boolean` @kind boolean;
  #L56ef68.  if v0 == 0 then goto L56ef82;
  #L56ef6c.  if v2 == 0 then goto L56ef72;
  #L56ef70.  goto L56ef82;
  #L56ef72.  v2:= new `java.lang.AssertionError`;
  #L56ef76.  v0:= "rootDir must be verified to be directory beforehand." @kind object;
  #L56ef7a.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L56ef80.  throw v2;
  #L56ef82.  return @kind void;
}
