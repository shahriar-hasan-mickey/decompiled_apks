record `kotlin.io.FileTreeWalk$b` @kind class @AccessFlag FINAL extends `kotlin.collections.AbstractIterator` @kind class {
  `java.util.ArrayDeque` `kotlin.io.FileTreeWalk$b.c` @AccessFlag PRIVATE_FINAL;
  `kotlin.io.FileTreeWalk` `kotlin.io.FileTreeWalk$b.d` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`kotlin.io.FileTreeWalk$b` v2 @kind this, `kotlin.io.FileTreeWalk` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$b;.<init>:(Lkotlin/io/FileTreeWalk;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L56f430.  v2.`kotlin.io.FileTreeWalk$b.d` @type ^`kotlin.io.FileTreeWalk` := v3 @kind object;
  #L56f434.  call `<init>`(v2) @signature `Lkotlin/collections/AbstractIterator;.<init>:()V` @kind direct;
  #L56f43a.  v0:= new `java.util.ArrayDeque`;
  #L56f43e.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L56f444.  v2.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` := v0 @kind object;
  #L56f448.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L56f44e.  v0:= temp @kind object;
  #L56f450.  call temp:= `isDirectory`(v0) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L56f456.  v0:= temp;
  #L56f458.  if v0 == 0 then goto L56f478;
  #L56f45c.  v0:= v2.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f460.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L56f466.  v3:= temp @kind object;
  #L56f468.  call temp:= `c`(v2, v3) @signature `Lkotlin/io/FileTreeWalk$b;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @kind direct;
  #L56f46e.  v3:= temp @kind object;
  #L56f470.  call `push`(v0, v3) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L56f476.  goto L56f4b0;
  #L56f478.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L56f47e.  v0:= temp @kind object;
  #L56f480.  call temp:= `isFile`(v0) @signature `Ljava/io/File;.isFile:()Z` @kind virtual;
  #L56f486.  v0:= temp;
  #L56f488.  if v0 == 0 then goto L56f4aa;
  #L56f48c.  v0:= v2.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f490.  v1:= new `kotlin.io.FileTreeWalk$b$b`;
  #L56f494.  call temp:= `access$getStart$p`(v3) @signature `Lkotlin/io/FileTreeWalk;.access$getStart$p:(Lkotlin/io/FileTreeWalk;)Ljava/io/File;` @kind static;
  #L56f49a.  v3:= temp @kind object;
  #L56f49c.  call `<init>`(v1, v2, v3) @signature `Lkotlin/io/FileTreeWalk$b$b;.<init>:(Lkotlin/io/FileTreeWalk$b;Ljava/io/File;)V` @kind direct;
  #L56f4a2.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L56f4a8.  goto L56f4b0;
  #L56f4aa.  call `done`(v2) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L56f4b0.  return @kind void;
}
procedure `kotlin.io.FileTreeWalk$a` `c`(`kotlin.io.FileTreeWalk$b` v2 @kind this, `java.io.File` v3 @kind object) @signature `Lkotlin/io/FileTreeWalk$b;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L56f3d4.  v0:= v2.`kotlin.io.FileTreeWalk$b.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L56f3d8.  call temp:= `access$getDirection$p`(v0) @signature `Lkotlin/io/FileTreeWalk;.access$getDirection$p:(Lkotlin/io/FileTreeWalk;)Lkotlin/io/FileWalkDirection;` @kind static;
  #L56f3de.  v0:= temp @kind object;
  #L56f3e0.  v1:= `@@kotlin.io.FileTreeWalk$FileTreeWalkIterator$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L56f3e4.  call temp:= `ordinal`(v0) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L56f3ea.  v0:= temp;
  #L56f3ec.  v0:= v1[v0];
  #L56f3f0.  v1:= 1I;
  #L56f3f2.  if v0 == v1 then goto L56f414;
  #L56f3f6.  v1:= 2I;
  #L56f3f8.  if v0 != v1 then goto L56f408;
  #L56f3fc.  v0:= new `kotlin.io.FileTreeWalk$b$a`;
  #L56f400.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$b$a;.<init>:(Lkotlin/io/FileTreeWalk$b;Ljava/io/File;)V` @kind direct;
  #L56f406.  goto L56f41e;
  #L56f408.  v3:= new `kotlin.NoWhenBranchMatchedException`;
  #L56f40c.  call `<init>`(v3) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L56f412.  throw v3;
  #L56f414.  v0:= new `kotlin.io.FileTreeWalk$b$c`;
  #L56f418.  call `<init>`(v0, v2, v3) @signature `Lkotlin/io/FileTreeWalk$b$c;.<init>:(Lkotlin/io/FileTreeWalk$b;Ljava/io/File;)V` @kind direct;
  #L56f41e.  return v0 @kind object;
}
procedure `java.io.File` `d`(`kotlin.io.FileTreeWalk$b` v3 @kind this) @signature `Lkotlin/io/FileTreeWalk$b;.d:()Ljava/io/File;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L56f340.  v0:= v3.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f344.  call temp:= `peek`(v0) @signature `Ljava/util/ArrayDeque;.peek:()Ljava/lang/Object;` @kind virtual;
  #L56f34a.  v0:= temp @kind object;
  #L56f34c.  v0:= (`kotlin.io.FileTreeWalk$c`) v0 @kind object;
  #L56f350.  if v0 == 0 then goto L56f3c0;
  #L56f354.  call temp:= `b`(v0) @signature `Lkotlin/io/FileTreeWalk$c;.b:()Ljava/io/File;` @kind virtual;
  #L56f35a.  v1:= temp @kind object;
  #L56f35c.  if v1 != 0 then goto L56f36c;
  #L56f360.  v0:= v3.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f364.  call temp:= `pop`(v0) @signature `Ljava/util/ArrayDeque;.pop:()Ljava/lang/Object;` @kind virtual;
  #L56f36a.  goto L56f340;
  #L56f36c.  call temp:= `a`(v0) @signature `Lkotlin/io/FileTreeWalk$c;.a:()Ljava/io/File;` @kind virtual;
  #L56f372.  v0:= temp @kind object;
  #L56f374.  call temp:= `areEqual`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L56f37a.  v0:= temp;
  #L56f37c.  if v0 != 0 then goto L56f3be;
  #L56f380.  call temp:= `isDirectory`(v1) @signature `Ljava/io/File;.isDirectory:()Z` @kind virtual;
  #L56f386.  v0:= temp;
  #L56f388.  if v0 == 0 then goto L56f3be;
  #L56f38c.  v0:= v3.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f390.  call temp:= `size`(v0) @signature `Ljava/util/ArrayDeque;.size:()I` @kind virtual;
  #L56f396.  v0:= temp;
  #L56f398.  v2:= v3.`kotlin.io.FileTreeWalk$b.d` @type ^`kotlin.io.FileTreeWalk` @kind object;
  #L56f39c.  call temp:= `access$getMaxDepth$p`(v2) @signature `Lkotlin/io/FileTreeWalk;.access$getMaxDepth$p:(Lkotlin/io/FileTreeWalk;)I` @kind static;
  #L56f3a2.  v2:= temp;
  #L56f3a4.  if v0 < v2 then goto L56f3aa;
  #L56f3a8.  goto L56f3be;
  #L56f3aa.  v0:= v3.`kotlin.io.FileTreeWalk$b.c` @type ^`java.util.ArrayDeque` @kind object;
  #L56f3ae.  call temp:= `c`(v3, v1) @signature `Lkotlin/io/FileTreeWalk$b;.c:(Ljava/io/File;)Lkotlin/io/FileTreeWalk$a;` @kind direct;
  #L56f3b4.  v1:= temp @kind object;
  #L56f3b6.  call `push`(v0, v1) @signature `Ljava/util/ArrayDeque;.push:(Ljava/lang/Object;)V` @kind virtual;
  #L56f3bc.  goto L56f340;
  #L56f3be.  return v1 @kind object;
  #L56f3c0.  v0:= 0I;
  #L56f3c2.  return v0 @kind object;
}
procedure `void` `computeNext`(`kotlin.io.FileTreeWalk$b` v1 @kind this) @signature `Lkotlin/io/FileTreeWalk$b;.computeNext:()V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L56f4c4.  call temp:= `d`(v1) @signature `Lkotlin/io/FileTreeWalk$b;.d:()Ljava/io/File;` @kind direct;
  #L56f4ca.  v0:= temp @kind object;
  #L56f4cc.  if v0 == 0 then goto L56f4d8;
  #L56f4d0.  call `setNext`(v1, v0) @signature `Lkotlin/collections/AbstractIterator;.setNext:(Ljava/lang/Object;)V` @kind virtual;
  #L56f4d6.  goto L56f4de;
  #L56f4d8.  call `done`(v1) @signature `Lkotlin/collections/AbstractIterator;.done:()V` @kind virtual;
  #L56f4de.  return @kind void;
}
