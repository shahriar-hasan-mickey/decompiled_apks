record `kotlin.n` @kind class @AccessFlag FINAL extends `kotlin.Lazy` @kind interface, `java.io.Serializable` @kind interface {
  `kotlin.jvm.functions.Function0` `kotlin.n.a` @AccessFlag PRIVATE;
  `java.lang.Object` `kotlin.n.b` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `kotlin.n.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.n` v1 @kind this, `kotlin.jvm.functions.Function0` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52f424.  v0:= "initializer" @kind object;
  #L52f428.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52f42e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52f434.  v1.`kotlin.n.a` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L52f438.  v2:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L52f43c.  v1.`kotlin.n.b` @type ^`java.lang.Object` := v2 @kind object;
  #L52f440.  if v3 == 0 then goto L52f446;
  #L52f444.  goto L52f448;
  #L52f446.  v3:= v1 @kind object;
  #L52f448.  v1.`kotlin.n.c` @type ^`java.lang.Object` := v3 @kind object;
  #L52f44c.  return @kind void;
}
procedure `void` `<init>`(`kotlin.n` v0 @kind this, `kotlin.jvm.functions.Function0` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 , `kotlin.jvm.internal.DefaultConstructorMarker` v4 @kind object) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L52f460.  v3:= v3 ^& 2;
  #L52f464.  if v3 == 0 then goto L52f46a;
  #L52f468.  v2:= 0I;
  #L52f46a.  call `<init>`(v0, v1, v2) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V` @kind direct;
  #L52f470.  return @kind void;
}
procedure `java.lang.Object` `writeReplace`(`kotlin.n` v2 @kind this) @signature `Lkotlin/n;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L52f3cc.  v0:= new `kotlin.InitializedLazyImpl`;
  #L52f3d0.  call temp:= `getValue`(v2) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L52f3d6.  v1:= temp @kind object;
  #L52f3d8.  call `<init>`(v0, v1) @signature `Lkotlin/InitializedLazyImpl;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L52f3de.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`(`kotlin.n` v3 @kind this) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52f368.  v0:= v3.`kotlin.n.b` @type ^`java.lang.Object` @kind object;
  #L52f36c.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L52f370.  if v0 == v1 then goto L52f376;
  #L52f374.  return v0 @kind object;
  #L52f376.  v0:= v3.`kotlin.n.c` @type ^`java.lang.Object` @kind object;
  #L52f37a.  @monitorenter v0
  #L52f37c.  v1:= v3.`kotlin.n.b` @type ^`java.lang.Object` @kind object;
  #L52f380.  v2:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L52f384.  if v1 == v2 then goto L52f38a;
  #L52f388.  goto L52f3a6;
  #L52f38a.  v1:= v3.`kotlin.n.a` @type ^`kotlin.jvm.functions.Function0` @kind object;
  #L52f38e.  call `checkNotNull`(v1) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNull:(Ljava/lang/Object;)V` @kind static;
  #L52f394.  call temp:= `invoke`(v1) @signature `Lkotlin/jvm/functions/Function0;.invoke:()Ljava/lang/Object;` @kind interface;
  #L52f39a.  v1:= temp @kind object;
  #L52f39c.  v3.`kotlin.n.b` @type ^`java.lang.Object` := v1 @kind object;
  #L52f3a0.  v2:= 0I;
  #L52f3a2.  v3.`kotlin.n.a` @type ^`kotlin.jvm.functions.Function0` := v2 @kind object;
  #L52f3a6.  @monitorexit v0
  #L52f3a8.  return v1 @kind object;
  #L52f3aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L52f3ac.  @monitorexit v0
  #L52f3ae.  throw v1;
  catch `java.lang.Throwable` @[L52f37c..L52f3a6] goto L52f3aa;
}
procedure `boolean` `isInitialized`(`kotlin.n` v2 @kind this) @signature `Lkotlin/n;.isInitialized:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L52f344.  v0:= v2.`kotlin.n.b` @type ^`java.lang.Object` @kind object;
  #L52f348.  v1:= `@@kotlin.UNINITIALIZED_VALUE.INSTANCE` @type ^`kotlin.UNINITIALIZED_VALUE` @kind object;
  #L52f34c.  if v0 == v1 then goto L52f354;
  #L52f350.  v0:= 1I;
  #L52f352.  goto L52f356;
  #L52f354.  v0:= 0I;
  #L52f356.  return v0;
}
procedure `java.lang.String` `toString`(`kotlin.n` v1 @kind this) @signature `Lkotlin/n;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52f3f0.  call temp:= `isInitialized`(v1) @signature `Lkotlin/n;.isInitialized:()Z` @kind virtual;
  #L52f3f6.  v0:= temp;
  #L52f3f8.  if v0 == 0 then goto L52f40e;
  #L52f3fc.  call temp:= `getValue`(v1) @signature `Lkotlin/n;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L52f402.  v0:= temp @kind object;
  #L52f404.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L52f40a.  v0:= temp @kind object;
  #L52f40c.  goto L52f412;
  #L52f40e.  v0:= "Lazy value not initialized yet." @kind object;
  #L52f412.  return v0 @kind object;
}
