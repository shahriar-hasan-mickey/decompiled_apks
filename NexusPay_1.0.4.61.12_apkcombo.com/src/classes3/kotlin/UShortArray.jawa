record `kotlin.UShortArray` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.Collection` @kind interface, `kotlin.jvm.internal.markers.KMappedMarker` @kind interface {
  `short`[] `kotlin.UShortArray.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`kotlin.UShortArray` v1 @kind this, `short`[] v2 @kind object) @signature `Lkotlin/UShortArray;.<init>:([S)V` @AccessFlag PRIVATE_SYNTHETIC_CONSTRUCTOR {
    temp;
    v0;

  #L531588.  v0:= "storage" @kind object;
  #L53158c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L531592.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L531598.  v1.`kotlin.UShortArray.a` @type ^`short`[] := v2 @kind object;
  #L53159c.  return @kind void;
}
procedure `kotlin.UShortArray` `box-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.box-impl:([S)Lkotlin/UShortArray;` @AccessFlag PUBLIC_STATIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L5314ec.  v0:= "v" @kind object;
  #L5314f0.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5314f6.  v0:= new `kotlin.UShortArray`;
  #L5314fa.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray;.<init>:([S)V` @kind direct;
  #L531500.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`int` v0 ) @signature `Lkotlin/UShortArray;.constructor-impl:(I)[S` @AccessFlag PUBLIC_STATIC {
    temp;

  #L531534.  v0:= new `short`[v0];
  #L531538.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @kind static;
  #L53153e.  v0:= temp @kind object;
  #L531540.  return v0 @kind object;
}
procedure `short`[] `constructor-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.constructor-impl:([S)[S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L531554.  v0:= "storage" @kind object;
  #L531558.  call `checkNotNullParameter`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L53155e.  return v1 @kind object;
}
procedure `boolean` `contains-xj2QHRw`(`short`[] v0 @kind object, `short` v1 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5311b4.  call temp:= `contains`(v0, v1) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L5311ba.  v0:= temp;
  #L5311bc.  return v0;
}
procedure `boolean` `containsAll-impl`(`short`[] v4 @kind object, `java.util.Collection` v5 @kind object) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5311f0.  v0:= "elements" @kind object;
  #L5311f4.  call `checkNotNullParameter`(v5, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L5311fa.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L531200.  v0:= temp;
  #L531202.  v1:= 0I;
  #L531204.  v2:= 1I;
  #L531206.  if v0 == 0 then goto L53120e;
  #L53120a.  v1:= 1I;
  #L53120c.  goto L531254;
  #L53120e.  call temp:= `iterator`(v5) @signature `Ljava/lang/Iterable;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L531214.  v5:= temp @kind object;
  #L531216.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L53121c.  v0:= temp;
  #L53121e.  if v0 == 0 then goto L53120a;
  #L531222.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L531228.  v0:= temp @kind object;
  #L53122a.  v3:= instanceof @variable v0 @type ^`kotlin.UShort` @kind boolean;
  #L53122e.  if v3 == 0 then goto L53124e;
  #L531232.  v0:= (`kotlin.UShort`) v0 @kind object;
  #L531236.  call temp:= `unbox-impl`(v0) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L53123c.  v0:= temp;
  #L53123e.  call temp:= `contains`(v4, v0) @signature `Lkotlin/collections/ArraysKt;.contains:([SS)Z` @kind static;
  #L531244.  v0:= temp;
  #L531246.  if v0 == 0 then goto L53124e;
  #L53124a.  v0:= 1I;
  #L53124c.  goto L531250;
  #L53124e.  v0:= 0I;
  #L531250.  if v0 != 0 then goto L531216;
  #L531254.  return v1;
}
procedure `boolean` `equals-impl`(`short`[] v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L531288.  v0:= instanceof @variable v2 @type ^`kotlin.UShortArray` @kind boolean;
  #L53128c.  if v0 == 0 then goto L5312ac;
  #L531290.  v2:= (`kotlin.UShortArray`) v2 @kind object;
  #L531294.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @kind virtual;
  #L53129a.  v2:= temp @kind object;
  #L53129c.  call temp:= `areEqual`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L5312a2.  v1:= temp;
  #L5312a4.  if v1 == 0 then goto L5312ac;
  #L5312a8.  v1:= 1I;
  #L5312aa.  return v1;
  #L5312ac.  v1:= 0I;
  #L5312ae.  return v1;
}
procedure `boolean` `equals-impl0`(`short`[] v0 @kind object, `short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.equals-impl0:([S[S)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L5312c0.  call temp:= `areEqual`(v0, v1) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L5312c6.  v0:= temp;
  #L5312c8.  return v0;
}
procedure `short` `get-Mh2AYeg`(`short`[] v0 @kind object, `int` v1 ) @signature `Lkotlin/UShortArray;.get-Mh2AYeg:([SI)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L531514.  v0:= v0[v1] @kind short;
  #L531518.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UShort;.constructor-impl:(S)S` @kind static;
  #L53151e.  v0:= temp;
  #L531520.  return v0;
}
procedure `int` `getSize-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L53139c.  v0:= length @variable v0;
  #L53139e.  return v0;
}
procedure `void` `getStorage$annotations`() @signature `Lkotlin/UShortArray;.getStorage$annotations:()V` @AccessFlag PUBLIC_STATIC_SYNTHETIC {
    temp;

  #L5315d0.  return @kind void;
}
procedure `int` `hashCode-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5313d0.  if v0 == 0 then goto L5313de;
  #L5313d4.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([S)I` @kind static;
  #L5313da.  v0:= temp;
  #L5313dc.  goto L5313e0;
  #L5313de.  v0:= 0I;
  #L5313e0.  return v0;
}
procedure `boolean` `isEmpty-impl`(`short`[] v0 @kind object) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L5312fc.  v0:= length @variable v0;
  #L5312fe.  if v0 != 0 then goto L531306;
  #L531302.  v0:= 1I;
  #L531304.  goto L531308;
  #L531306.  v0:= 0I;
  #L531308.  return v0;
}
procedure `java.util.Iterator` `iterator-impl`(`short`[] v1 @kind object) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5314d0.  v0:= new `kotlin.UShortArray$a`;
  #L5314d4.  call `<init>`(v0, v1) @signature `Lkotlin/UShortArray$a;.<init>:([S)V` @kind direct;
  #L5314da.  return v0 @kind object;
}
procedure `void` `set-01HTLdE`(`short`[] v0 @kind object, `int` v1 , `short` v2 ) @signature `Lkotlin/UShortArray;.set-01HTLdE:([SIS)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;

  #L5315e4.  v0[v1]:= v2 @kind short;
  #L5315e8.  return @kind void;
}
procedure `java.lang.String` `toString-impl`(`short`[] v2 @kind object) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L531468.  v0:= new `java.lang.StringBuilder`;
  #L53146c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L531472.  v1:= "UShortArray(storage=" @kind object;
  #L531476.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53147c.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([S)Ljava/lang/String;` @kind static;
  #L531482.  v2:= temp @kind object;
  #L531484.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L53148a.  v2:= ")" @kind object;
  #L53148e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L531494.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L53149a.  v2:= temp @kind object;
  #L53149c.  return v2 @kind object;
}
procedure `boolean` `add`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.add:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L531100.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531104.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531108.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53110e.  throw v2;
}
procedure `boolean` `add-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.add-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531120.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531124.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531128.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53112e.  throw v2;
}
procedure `boolean` `addAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.addAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531140.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531144.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531148.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53114e.  throw v2;
}
procedure `void` `clear`(`kotlin.UShortArray` v2 @kind this) @signature `Lkotlin/UShortArray;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L5315b0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L5315b4.  v1:= "Operation is not supported for read-only collection" @kind object;
  #L5315b8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5315be.  throw v0;
}
procedure `boolean` `contains`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L531160.  v0:= instanceof @variable v2 @type ^`kotlin.UShort` @kind boolean;
  #L531164.  if v0 == 0 then goto L53117e;
  #L531168.  v2:= (`kotlin.UShort`) v2 @kind object;
  #L53116c.  call temp:= `unbox-impl`(v2) @signature `Lkotlin/UShort;.unbox-impl:()S` @kind virtual;
  #L531172.  v2:= temp;
  #L531174.  call temp:= `contains-xj2QHRw`(v1, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @kind virtual;
  #L53117a.  v2:= temp;
  #L53117c.  return v2;
  #L53117e.  v2:= 0I;
  #L531180.  return v2;
}
procedure `boolean` `contains-xj2QHRw`(`kotlin.UShortArray` v1 @kind this, `short` v2 ) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:(S)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531194.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L531198.  call temp:= `contains-xj2QHRw`(v0, v2) @signature `Lkotlin/UShortArray;.contains-xj2QHRw:([SS)Z` @kind static;
  #L53119e.  v2:= temp;
  #L5311a0.  return v2;
}
procedure `boolean` `containsAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.containsAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5311d0.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L5311d4.  call temp:= `containsAll-impl`(v0, v2) @signature `Lkotlin/UShortArray;.containsAll-impl:([SLjava/util/Collection;)Z` @kind static;
  #L5311da.  v2:= temp;
  #L5311dc.  return v2;
}
procedure `boolean` `equals`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531268.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L53126c.  call temp:= `equals-impl`(v0, v2) @signature `Lkotlin/UShortArray;.equals-impl:([SLjava/lang/Object;)Z` @kind static;
  #L531272.  v2:= temp;
  #L531274.  return v2;
}
procedure `int` `getSize`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.getSize:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53137c.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L531380.  call temp:= `getSize-impl`(v0) @signature `Lkotlin/UShortArray;.getSize-impl:([S)I` @kind static;
  #L531386.  v0:= temp;
  #L531388.  return v0;
}
procedure `int` `hashCode`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5313b0.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L5313b4.  call temp:= `hashCode-impl`(v0) @signature `Lkotlin/UShortArray;.hashCode-impl:([S)I` @kind static;
  #L5313ba.  v0:= temp;
  #L5313bc.  return v0;
}
procedure `boolean` `isEmpty`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.isEmpty:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5312dc.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L5312e0.  call temp:= `isEmpty-impl`(v0) @signature `Lkotlin/UShortArray;.isEmpty-impl:([S)Z` @kind static;
  #L5312e6.  v0:= temp;
  #L5312e8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5314b0.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L5314b4.  call temp:= `iterator-impl`(v0) @signature `Lkotlin/UShortArray;.iterator-impl:([S)Ljava/util/Iterator;` @kind static;
  #L5314ba.  v0:= temp @kind object;
  #L5314bc.  return v0 @kind object;
}
procedure `boolean` `remove`(`kotlin.UShortArray` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lkotlin/UShortArray;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53131c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531320.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531324.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53132a.  throw v2;
}
procedure `boolean` `removeAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.removeAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53133c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531340.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531344.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53134a.  throw v2;
}
procedure `boolean` `retainAll`(`kotlin.UShortArray` v1 @kind this, `java.util.Collection` v2 @kind object) @signature `Lkotlin/UShortArray;.retainAll:(Ljava/util/Collection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L53135c.  v2:= new `java.lang.UnsupportedOperationException`;
  #L531360.  v0:= "Operation is not supported for read-only collection" @kind object;
  #L531364.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L53136a.  throw v2;
}
procedure `int` `size`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.size:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L5313f4.  call temp:= `getSize`(v1) @signature `Lkotlin/UShortArray;.getSize:()I` @kind virtual;
  #L5313fa.  v0:= temp;
  #L5313fc.  return v0;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toArray:()[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531410.  call temp:= `toArray`(v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;)[Ljava/lang/Object;` @kind static;
  #L531416.  v0:= temp @kind object;
  #L531418.  return v0 @kind object;
}
procedure `java.lang.Object`[] `toArray`(`kotlin.UShortArray` v0 @kind this, `java.lang.Object`[] v1 @kind object) @signature `Lkotlin/UShortArray;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L53142c.  call temp:= `toArray`(v0, v1) @signature `Lkotlin/jvm/internal/CollectionToArray;.toArray:(Ljava/util/Collection;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L531432.  v1:= temp @kind object;
  #L531434.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L531448.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L53144c.  call temp:= `toString-impl`(v0) @signature `Lkotlin/UShortArray;.toString-impl:([S)Ljava/lang/String;` @kind static;
  #L531452.  v0:= temp @kind object;
  #L531454.  return v0 @kind object;
}
procedure `short`[] `unbox-impl`(`kotlin.UShortArray` v1 @kind this) @signature `Lkotlin/UShortArray;.unbox-impl:()[S` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;

  #L531570.  v0:= v1.`kotlin.UShortArray.a` @type ^`short`[] @kind object;
  #L531574.  return v0 @kind object;
}
