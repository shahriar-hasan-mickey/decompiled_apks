record `kotlin.NoWhenBranchMatchedException` @kind class @AccessFlag PUBLIC extends `java.lang.RuntimeException` @kind class {
}
procedure `void` `<init>`(`kotlin.NoWhenBranchMatchedException` v0 @kind this) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e988.  call `<init>`(v0) @signature `Ljava/lang/RuntimeException;.<init>:()V` @kind direct;
  #L52e98e.  return @kind void;
}
procedure `void` `<init>`(`kotlin.NoWhenBranchMatchedException` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e9a0.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52e9a6.  return @kind void;
}
procedure `void` `<init>`(`kotlin.NoWhenBranchMatchedException` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.Throwable` v2 @kind object) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e9b8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L52e9be.  return @kind void;
}
procedure `void` `<init>`(`kotlin.NoWhenBranchMatchedException` v0 @kind this, `java.lang.Throwable` v1 @kind object) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e9d0.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L52e9d6.  return @kind void;
}
