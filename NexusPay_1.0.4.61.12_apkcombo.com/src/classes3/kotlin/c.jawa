record `kotlin.c` @kind class @AccessFlag  {
}
procedure `void` `<init>`(`kotlin.c` v0 @kind this) @signature `Lkotlin/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e844.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52e84a.  return @kind void;
}
procedure `kotlin.Lazy` `lazy`(`java.lang.Object` v1 @kind object, `kotlin.jvm.functions.Function0` v2 @kind object) @signature `Lkotlin/c;.lazy:(Ljava/lang/Object;Lkotlin/jvm/functions/Function0;)Lkotlin/Lazy;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L52e778.  v0:= "initializer" @kind object;
  #L52e77c.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52e782.  v0:= new `kotlin.n`;
  #L52e786.  call `<init>`(v0, v2, v1) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;)V` @kind direct;
  #L52e78c.  return v0 @kind object;
}
procedure `kotlin.Lazy` `lazy`(`kotlin.LazyThreadSafetyMode` v2 @kind object, `kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlin/c;.lazy:(Lkotlin/LazyThreadSafetyMode;Lkotlin/jvm/functions/Function0;)Lkotlin/Lazy;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L52e7a0.  v0:= "mode" @kind object;
  #L52e7a4.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52e7aa.  v0:= "initializer" @kind object;
  #L52e7ae.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52e7b4.  v0:= `@@kotlin.LazyKt$WhenMappings.$EnumSwitchMapping$0` @type ^`int`[] @kind object;
  #L52e7b8.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L52e7be.  v2:= temp;
  #L52e7c0.  v2:= v0[v2];
  #L52e7c4.  v0:= 1I;
  #L52e7c6.  v1:= 2I;
  #L52e7c8.  if v2 == v0 then goto L52e7fa;
  #L52e7cc.  if v2 == v1 then goto L52e7ee;
  #L52e7d0.  v0:= 3I;
  #L52e7d2.  if v2 != v0 then goto L52e7e2;
  #L52e7d6.  v2:= new `kotlin.UnsafeLazyImpl`;
  #L52e7da.  call `<init>`(v2, v3) @signature `Lkotlin/UnsafeLazyImpl;.<init>:(Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L52e7e0.  goto L52e806;
  #L52e7e2.  v2:= new `kotlin.NoWhenBranchMatchedException`;
  #L52e7e6.  call `<init>`(v2) @signature `Lkotlin/NoWhenBranchMatchedException;.<init>:()V` @kind direct;
  #L52e7ec.  throw v2;
  #L52e7ee.  v2:= new `kotlin.SafePublicationLazyImpl`;
  #L52e7f2.  call `<init>`(v2, v3) @signature `Lkotlin/SafePublicationLazyImpl;.<init>:(Lkotlin/jvm/functions/Function0;)V` @kind direct;
  #L52e7f8.  goto L52e806;
  #L52e7fa.  v2:= new `kotlin.n`;
  #L52e7fe.  v0:= 0I;
  #L52e800.  call `<init>`(v2, v3, v0, v1, v0) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L52e806.  return v2 @kind object;
}
procedure `kotlin.Lazy` `lazy`(`kotlin.jvm.functions.Function0` v3 @kind object) @signature `Lkotlin/c;.lazy:(Lkotlin/jvm/functions/Function0;)Lkotlin/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L52e818.  v0:= "initializer" @kind object;
  #L52e81c.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52e822.  v0:= new `kotlin.n`;
  #L52e826.  v1:= 0I;
  #L52e828.  v2:= 2I;
  #L52e82a.  call `<init>`(v0, v3, v1, v2, v1) @signature `Lkotlin/n;.<init>:(Lkotlin/jvm/functions/Function0;Ljava/lang/Object;ILkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L52e830.  return v0 @kind object;
}
