record `kotlin.Experimental$Level` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
}
global `kotlin.Experimental$Level`[] `@@kotlin.Experimental$Level.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `kotlin.Experimental$Level` `@@kotlin.Experimental$Level.ERROR` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `kotlin.Experimental$Level` `@@kotlin.Experimental$Level.WARNING` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lkotlin/Experimental$Level;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L52e278.  v0:= 2I;
  #L52e27a.  v0:= new `kotlin.Experimental$Level`[v0];
  #L52e27e.  v1:= new `kotlin.Experimental$Level`;
  #L52e282.  v2:= "WARNING" @kind object;
  #L52e286.  v3:= 0I;
  #L52e288.  call `<init>`(v1, v2, v3) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L52e28e.  `@@kotlin.Experimental$Level.WARNING` @type ^`kotlin.Experimental$Level` := v1 @kind object;
  #L52e292.  v0[v3]:= v1 @kind object;
  #L52e296.  v1:= new `kotlin.Experimental$Level`;
  #L52e29a.  v2:= "ERROR" @kind object;
  #L52e29e.  v3:= 1I;
  #L52e2a0.  call `<init>`(v1, v2, v3) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L52e2a6.  `@@kotlin.Experimental$Level.ERROR` @type ^`kotlin.Experimental$Level` := v1 @kind object;
  #L52e2aa.  v0[v3]:= v1 @kind object;
  #L52e2ae.  `@@kotlin.Experimental$Level.$VALUES` @type ^`kotlin.Experimental$Level`[] := v0 @kind object;
  #L52e2b2.  return @kind void;
}
procedure `void` `<init>`(`kotlin.Experimental$Level` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lkotlin/Experimental$Level;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L52e2c4.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L52e2ca.  return @kind void;
}
procedure `kotlin.Experimental$Level` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lkotlin/Experimental$Level;.valueOf:(Ljava/lang/String;)Lkotlin/Experimental$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52e230.  v0:= constclass @type ^`kotlin.Experimental$Level` @kind object;
  #L52e234.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L52e23a.  v1:= temp @kind object;
  #L52e23c.  v1:= (`kotlin.Experimental$Level`) v1 @kind object;
  #L52e240.  return v1 @kind object;
}
procedure `kotlin.Experimental$Level`[] `values`() @signature `Lkotlin/Experimental$Level;.values:()[Lkotlin/Experimental$Level;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L52e254.  v0:= `@@kotlin.Experimental$Level.$VALUES` @type ^`kotlin.Experimental$Level`[] @kind object;
  #L52e258.  call temp:= `clone`(v0) @signature `[Lkotlin/Experimental$Level;.clone:()Ljava/lang/Object;` @kind virtual;
  #L52e25e.  v0:= temp @kind object;
  #L52e260.  v0:= (`kotlin.Experimental$Level`[]) v0 @kind object;
  #L52e264.  return v0 @kind object;
}
