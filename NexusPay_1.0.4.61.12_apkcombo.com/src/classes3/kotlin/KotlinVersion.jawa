record `kotlin.KotlinVersion` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Comparable` @kind interface {
  `int` `kotlin.KotlinVersion.a` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.b` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.c` @AccessFlag PRIVATE_FINAL;
  `int` `kotlin.KotlinVersion.d` @AccessFlag PRIVATE_FINAL;
}
global `kotlin.KotlinVersion` `@@kotlin.KotlinVersion.CURRENT` @AccessFlag PUBLIC_STATIC_FINAL;
global `kotlin.KotlinVersion$Companion` `@@kotlin.KotlinVersion.Companion` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@kotlin.KotlinVersion.MAX_COMPONENT_VALUE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lkotlin/KotlinVersion;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L52e684.  v0:= new `kotlin.KotlinVersion$Companion`;
  #L52e688.  v1:= 0I;
  #L52e68a.  call `<init>`(v0, v1) @signature `Lkotlin/KotlinVersion$Companion;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @kind direct;
  #L52e690.  `@@kotlin.KotlinVersion.Companion` @type ^`kotlin.KotlinVersion$Companion` := v0 @kind object;
  #L52e694.  call temp:= `a`() @signature `Lkotlin/b;.a:()Lkotlin/KotlinVersion;` @kind static;
  #L52e69a.  v0:= temp @kind object;
  #L52e69c.  `@@kotlin.KotlinVersion.CURRENT` @type ^`kotlin.KotlinVersion` := v0 @kind object;
  #L52e6a0.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L52e6b4.  v0:= 0I;
  #L52e6b6.  call `<init>`(v1, v2, v3, v0) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @kind direct;
  #L52e6bc.  return @kind void;
}
procedure `void` `<init>`(`kotlin.KotlinVersion` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.<init>:(III)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L52e6d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L52e6d6.  v0.`kotlin.KotlinVersion.b` @type ^`int` := v1;
  #L52e6da.  v0.`kotlin.KotlinVersion.c` @type ^`int` := v2;
  #L52e6de.  v0.`kotlin.KotlinVersion.d` @type ^`int` := v3;
  #L52e6e2.  call temp:= `a`(v0, v1, v2, v3) @signature `Lkotlin/KotlinVersion;.a:(III)I` @kind direct;
  #L52e6e8.  v1:= temp;
  #L52e6ea.  v0.`kotlin.KotlinVersion.a` @type ^`int` := v1;
  #L52e6ee.  return @kind void;
}
procedure `int` `a`(`kotlin.KotlinVersion` v2 @kind this, `int` v3 , `int` v4 , `int` v5 ) @signature `Lkotlin/KotlinVersion;.a:(III)I` @AccessFlag PRIVATE_FINAL {
    temp;
    v0;
    v1;

  #L52e594.  if v3 >= 0 then goto L52e59a;
  #L52e598.  goto L52e5ba;
  #L52e59a.  v0:= 255I;
  #L52e59e.  if v0 < v3 then goto L52e5ba;
  #L52e5a2.  if v4 >= 0 then goto L52e5a8;
  #L52e5a6.  goto L52e5ba;
  #L52e5a8.  if v0 < v4 then goto L52e5ba;
  #L52e5ac.  if v5 >= 0 then goto L52e5b2;
  #L52e5b0.  goto L52e5ba;
  #L52e5b2.  if v0 < v5 then goto L52e5ba;
  #L52e5b6.  v0:= 1I;
  #L52e5b8.  goto L52e5bc;
  #L52e5ba.  v0:= 0I;
  #L52e5bc.  if v0 == 0 then goto L52e5ce;
  #L52e5c0.  v3:= v3 ^< 16;
  #L52e5c4.  v4:= v4 ^< 8;
  #L52e5c8.  v3:= v3 + v4 @kind int;
  #L52e5ca.  v3:= v3 + v5 @kind int;
  #L52e5cc.  return v3;
  #L52e5ce.  v0:= new `java.lang.StringBuilder`;
  #L52e5d2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52e5d8.  v1:= "Version components are out of range: " @kind object;
  #L52e5dc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e5e2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e5e8.  v3:= 46I;
  #L52e5ec.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e5f2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e5f8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e5fe.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e604.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52e60a.  v3:= temp @kind object;
  #L52e60c.  v4:= new `java.lang.IllegalArgumentException`;
  #L52e610.  call temp:= `toString`(v3) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L52e616.  v3:= temp @kind object;
  #L52e618.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L52e61e.  throw v4;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L52e4ec.  v1:= (`kotlin.KotlinVersion`) v1 @kind object;
  #L52e4f0.  call temp:= `compareTo`(v0, v1) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @kind virtual;
  #L52e4f6.  v1:= temp;
  #L52e4f8.  return v1;
}
procedure `int` `compareTo`(`kotlin.KotlinVersion` v1 @kind this, `kotlin.KotlinVersion` v2 @kind object) @signature `Lkotlin/KotlinVersion;.compareTo:(Lkotlin/KotlinVersion;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52e50c.  v0:= "other" @kind object;
  #L52e510.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L52e516.  v0:= v1.`kotlin.KotlinVersion.a` @type ^`int`;
  #L52e51a.  v2:= v2.`kotlin.KotlinVersion.a` @type ^`int`;
  #L52e51e.  v0:= v0 - v2 @kind int;
  #L52e520.  return v0;
}
procedure `boolean` `equals`(`kotlin.KotlinVersion` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lkotlin/KotlinVersion;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52e440.  v0:= 1I;
  #L52e442.  if v3 != v4 then goto L52e448;
  #L52e446.  return v0;
  #L52e448.  v1:= instanceof @variable v4 @type ^`kotlin.KotlinVersion` @kind boolean;
  #L52e44c.  if v1 != 0 then goto L52e452;
  #L52e450.  v4:= 0I;
  #L52e452.  v4:= (`kotlin.KotlinVersion`) v4 @kind object;
  #L52e456.  v1:= 0I;
  #L52e458.  if v4 == 0 then goto L52e46e;
  #L52e45c.  v2:= v3.`kotlin.KotlinVersion.a` @type ^`int`;
  #L52e460.  v4:= v4.`kotlin.KotlinVersion.a` @type ^`int`;
  #L52e464.  if v2 != v4 then goto L52e46a;
  #L52e468.  goto L52e46c;
  #L52e46a.  v0:= 0I;
  #L52e46c.  return v0;
  #L52e46e.  return v1;
}
procedure `int` `getMajor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMajor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52e534.  v0:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L52e538.  return v0;
}
procedure `int` `getMinor`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getMinor:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52e54c.  v0:= v1.`kotlin.KotlinVersion.c` @type ^`int`;
  #L52e550.  return v0;
}
procedure `int` `getPatch`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.getPatch:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52e564.  v0:= v1.`kotlin.KotlinVersion.d` @type ^`int`;
  #L52e568.  return v0;
}
procedure `int` `hashCode`(`kotlin.KotlinVersion` v1 @kind this) @signature `Lkotlin/KotlinVersion;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L52e57c.  v0:= v1.`kotlin.KotlinVersion.a` @type ^`int`;
  #L52e580.  return v0;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(II)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52e480.  v0:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L52e484.  if v0 > v2 then goto L52e49a;
  #L52e488.  if v0 != v2 then goto L52e496;
  #L52e48c.  v2:= v1.`kotlin.KotlinVersion.c` @type ^`int`;
  #L52e490.  if v2 < v3 then goto L52e496;
  #L52e494.  goto L52e49a;
  #L52e496.  v2:= 0I;
  #L52e498.  goto L52e49c;
  #L52e49a.  v2:= 1I;
  #L52e49c.  return v2;
}
procedure `boolean` `isAtLeast`(`kotlin.KotlinVersion` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lkotlin/KotlinVersion;.isAtLeast:(III)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L52e4b0.  v0:= v1.`kotlin.KotlinVersion.b` @type ^`int`;
  #L52e4b4.  if v0 > v2 then goto L52e4d6;
  #L52e4b8.  if v0 != v2 then goto L52e4d2;
  #L52e4bc.  v2:= v1.`kotlin.KotlinVersion.c` @type ^`int`;
  #L52e4c0.  if v2 > v3 then goto L52e4d6;
  #L52e4c4.  if v2 != v3 then goto L52e4d2;
  #L52e4c8.  v2:= v1.`kotlin.KotlinVersion.d` @type ^`int`;
  #L52e4cc.  if v2 < v4 then goto L52e4d2;
  #L52e4d0.  goto L52e4d6;
  #L52e4d2.  v2:= 0I;
  #L52e4d4.  goto L52e4d8;
  #L52e4d6.  v2:= 1I;
  #L52e4d8.  return v2;
}
procedure `java.lang.String` `toString`(`kotlin.KotlinVersion` v3 @kind this) @signature `Lkotlin/KotlinVersion;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L52e630.  v0:= new `java.lang.StringBuilder`;
  #L52e634.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L52e63a.  v1:= v3.`kotlin.KotlinVersion.b` @type ^`int`;
  #L52e63e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e644.  v1:= 46I;
  #L52e648.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e64e.  v2:= v3.`kotlin.KotlinVersion.c` @type ^`int`;
  #L52e652.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e658.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e65e.  v1:= v3.`kotlin.KotlinVersion.d` @type ^`int`;
  #L52e662.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L52e668.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L52e66e.  v0:= temp @kind object;
  #L52e670.  return v0 @kind object;
}
