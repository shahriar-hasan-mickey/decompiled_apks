record `kotlin.UnsignedKt` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `int` `doubleToUInt`(`double` v5 ) @signature `Lkotlin/UnsignedKt;.doubleToUInt:(D)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L5319e4.  call temp:= `isNaN`(v5) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L5319ea.  v0:= temp;
  #L5319ec.  v1:= -1I;
  #L5319ee.  v2:= 0I;
  #L5319f0.  if v0 == 0 then goto L5319f8;
  #L5319f4.  v1:= 0I;
  #L5319f6.  goto L531a56;
  #L5319f8.  call temp:= `uintToDouble`(v2) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L5319fe.  v3:= temp @kind wide;
  #L531a00.  v0:= dcmpg(v5, v3);
  #L531a04.  if v0 > 0 then goto L531a0a;
  #L531a08.  goto L5319f4;
  #L531a0a.  call temp:= `uintToDouble`(v1) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @kind static;
  #L531a10.  v2:= temp @kind wide;
  #L531a12.  v0:= dcmpl(v5, v2);
  #L531a16.  if v0 < 0 then goto L531a1c;
  #L531a1a.  goto L531a56;
  #L531a1c.  v0:= 2147483647I;
  #L531a22.  v1:= (`double`) v0 @kind i2d;
  #L531a24.  v3:= dcmpg(v5, v1);
  #L531a28.  if v3 > 0 then goto L531a38;
  #L531a2c.  v5:= (`int`) v5 @kind d2i;
  #L531a2e.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531a34.  v1:= temp;
  #L531a36.  goto L531a56;
  #L531a38.  v5:= v5 - v1 @kind double;
  #L531a3a.  v5:= (`int`) v5 @kind d2i;
  #L531a3c.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531a42.  v5:= temp;
  #L531a44.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531a4a.  v6:= temp;
  #L531a4c.  v5:= v5 + v6 @kind int;
  #L531a4e.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531a54.  v1:= temp;
  #L531a56.  return v1;
}
procedure `long` `doubleToULong`(`double` v7 ) @signature `Lkotlin/UnsignedKt;.doubleToULong:(D)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L531bd4.  call temp:= `isNaN`(v7) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L531bda.  v0:= temp;
  #L531bdc.  v1:= -1L;
  #L531be0.  v3:= 0L;
  #L531be4.  if v0 == 0 then goto L531bec;
  #L531be8.  v1:= v3 @kind wide;
  #L531bea.  goto L531c4e;
  #L531bec.  call temp:= `ulongToDouble`(v3) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L531bf2.  v5:= temp @kind wide;
  #L531bf4.  v0:= dcmpg(v7, v5);
  #L531bf8.  if v0 > 0 then goto L531bfe;
  #L531bfc.  goto L531be8;
  #L531bfe.  call temp:= `ulongToDouble`(v1) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @kind static;
  #L531c04.  v3:= temp @kind wide;
  #L531c06.  v0:= dcmpl(v7, v3);
  #L531c0a.  if v0 < 0 then goto L531c10;
  #L531c0e.  goto L531c4e;
  #L531c10.  v0:= 9223372036854775807L;
  #L531c1a.  v0:= (`double`) v0 @kind l2d;
  #L531c1c.  v2:= dcmpg(v7, v0);
  #L531c20.  if v2 >= 0 then goto L531c30;
  #L531c24.  v7:= (`long`) v7 @kind d2l;
  #L531c26.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531c2c.  v1:= temp @kind wide;
  #L531c2e.  goto L531c4e;
  #L531c30.  v0:= 9.223372036854776E18D;
  #L531c34.  v7:= v7 - v0 @kind double;
  #L531c36.  v7:= (`long`) v7 @kind d2l;
  #L531c38.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531c3e.  v7:= temp @kind wide;
  #L531c40.  v0:= -9223372036854775808L;
  #L531c44.  v7:= v7 + v0 @kind long;
  #L531c46.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531c4c.  v1:= temp @kind wide;
  #L531c4e.  return v1 @kind wide;
}
procedure `int` `uintCompare`(`int` v1 , `int` v2 ) @signature `Lkotlin/UnsignedKt;.uintCompare:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L531a68.  v0:= -2147483648I;
  #L531a6c.  v1:= v1 ^~ v0 @kind int;
  #L531a6e.  v2:= v2 ^~ v0 @kind int;
  #L531a70.  call temp:= `compare`(v1, v2) @signature `Lkotlin/jvm/internal/Intrinsics;.compare:(II)I` @kind static;
  #L531a76.  v1:= temp;
  #L531a78.  return v1;
}
procedure `int` `uintDivide-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintDivide-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L531a8c.  v0:= (`long`) v4 @kind i2l;
  #L531a8e.  v2:= 4294967295L;
  #L531a98.  v0:= v0 ^& v2 @kind long;
  #L531a9a.  v4:= (`long`) v5 @kind i2l;
  #L531a9c.  v4:= v4 ^& v2 @kind long;
  #L531a9e.  v0:= v0 / v4 @kind long;
  #L531aa0.  v4:= (`int`) v0 @kind l2i;
  #L531aa2.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531aa8.  v4:= temp;
  #L531aaa.  return v4;
}
procedure `int` `uintRemainder-J1ME1BU`(`int` v4 , `int` v5 ) @signature `Lkotlin/UnsignedKt;.uintRemainder-J1ME1BU:(II)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L531abc.  v0:= (`long`) v4 @kind i2l;
  #L531abe.  v2:= 4294967295L;
  #L531ac8.  v0:= v0 ^& v2 @kind long;
  #L531aca.  v4:= (`long`) v5 @kind i2l;
  #L531acc.  v4:= v4 ^& v2 @kind long;
  #L531ace.  v0:= v0 %% v4 @kind long;
  #L531ad0.  v4:= (`int`) v0 @kind l2i;
  #L531ad2.  call temp:= `constructor-impl`(v4) @signature `Lkotlin/UInt;.constructor-impl:(I)I` @kind static;
  #L531ad8.  v4:= temp;
  #L531ada.  return v4;
}
procedure `double` `uintToDouble`(`int` v6 ) @signature `Lkotlin/UnsignedKt;.uintToDouble:(I)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L531984.  v0:= 2147483647I;
  #L53198a.  v0:= v0 ^& v6 @kind int;
  #L53198c.  v0:= (`double`) v0 @kind i2d;
  #L53198e.  v6:= v6 ^>> 31;
  #L531992.  v6:= v6 ^< 30;
  #L531996.  v2:= (`double`) v6 @kind i2d;
  #L531998.  v6:= 2I;
  #L53199a.  v4:= (`double`) v6 @kind i2d;
  #L53199c.  v2:= v2 * v4 @kind double;
  #L5319a0.  v0:= v0 + v2 @kind double;
  #L5319a2.  return v0 @kind wide;
}
procedure `int` `ulongCompare`(`long` v2 , `long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L531aec.  v0:= -9223372036854775808L;
  #L531af0.  v2:= v2 ^~ v0 @kind long;
  #L531af2.  v4:= v4 ^~ v0 @kind long;
  #L531af4.  v0:= lcmp(v2, v4);
  #L531af8.  return v0;
}
procedure `long` `ulongDivide-eb3DHEI`(`long` v5 , `long` v7 ) @signature `Lkotlin/UnsignedKt;.ulongDivide-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L531c60.  v0:= 0L;
  #L531c64.  v2:= lcmp(v7, v0);
  #L531c68.  if v2 >= 0 then goto L531c90;
  #L531c6c.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L531c72.  v5:= temp;
  #L531c74.  if v5 >= 0 then goto L531c82;
  #L531c78.  call temp:= `constructor-impl`(v0) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531c7e.  v5:= temp @kind wide;
  #L531c80.  goto L531c8e;
  #L531c82.  v5:= 1L;
  #L531c86.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531c8c.  v5:= temp @kind wide;
  #L531c8e.  return v5 @kind wide;
  #L531c90.  v2:= lcmp(v5, v0);
  #L531c94.  if v2 < 0 then goto L531ca4;
  #L531c98.  v5:= v5 / v7 @kind long;
  #L531c9a.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531ca0.  v5:= temp @kind wide;
  #L531ca2.  return v5 @kind wide;
  #L531ca4.  v0:= 1I;
  #L531ca6.  v1:= v5 ^>> v0 @kind long;
  #L531caa.  v1:= v1 / v7 @kind long;
  #L531cac.  v1:= v1 ^< v0 @kind long;
  #L531cae.  v3:= v1 * v7 @kind long;
  #L531cb2.  v5:= v5 - v3 @kind long;
  #L531cb4.  call temp:= `constructor-impl`(v5) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531cba.  v5:= temp @kind wide;
  #L531cbc.  call temp:= `constructor-impl`(v7) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531cc2.  v7:= temp @kind wide;
  #L531cc4.  call temp:= `ulongCompare`(v5, v7) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L531cca.  v5:= temp;
  #L531ccc.  if v5 < 0 then goto L531cd2;
  #L531cd0.  goto L531cd4;
  #L531cd2.  v0:= 0I;
  #L531cd4.  v5:= (`long`) v0 @kind i2l;
  #L531cd6.  v1:= v1 + v5 @kind long;
  #L531cd8.  call temp:= `constructor-impl`(v1) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531cde.  v5:= temp @kind wide;
  #L531ce0.  return v5 @kind wide;
}
procedure `long` `ulongRemainder-eb3DHEI`(`long` v6 , `long` v8 ) @signature `Lkotlin/UnsignedKt;.ulongRemainder-eb3DHEI:(JJ)J` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L531cf4.  v0:= 0L;
  #L531cf8.  v2:= lcmp(v8, v0);
  #L531cfc.  if v2 >= 0 then goto L531d1a;
  #L531d00.  call temp:= `ulongCompare`(v6, v8) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L531d06.  v0:= temp;
  #L531d08.  if v0 >= 0 then goto L531d0e;
  #L531d0c.  goto L531d18;
  #L531d0e.  v6:= v6 - v8 @kind long;
  #L531d10.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531d16.  v6:= temp @kind wide;
  #L531d18.  return v6 @kind wide;
  #L531d1a.  v2:= lcmp(v6, v0);
  #L531d1e.  if v2 < 0 then goto L531d2e;
  #L531d22.  v6:= v6 %% v8 @kind long;
  #L531d24.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531d2a.  v6:= temp @kind wide;
  #L531d2c.  return v6 @kind wide;
  #L531d2e.  v2:= 1I;
  #L531d30.  v3:= v6 ^>> v2 @kind long;
  #L531d34.  v3:= v3 / v8 @kind long;
  #L531d36.  v2:= v3 ^< v2 @kind long;
  #L531d3a.  v2:= v2 * v8 @kind long;
  #L531d3e.  v6:= v6 - v2 @kind long;
  #L531d40.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531d46.  v2:= temp @kind wide;
  #L531d48.  call temp:= `constructor-impl`(v8) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531d4e.  v4:= temp @kind wide;
  #L531d50.  call temp:= `ulongCompare`(v2, v4) @signature `Lkotlin/UnsignedKt;.ulongCompare:(JJ)I` @kind static;
  #L531d56.  v2:= temp;
  #L531d58.  if v2 < 0 then goto L531d5e;
  #L531d5c.  goto L531d60;
  #L531d5e.  v8:= v0 @kind wide;
  #L531d60.  v6:= v6 - v8 @kind long;
  #L531d62.  call temp:= `constructor-impl`(v6) @signature `Lkotlin/ULong;.constructor-impl:(J)J` @kind static;
  #L531d68.  v6:= temp @kind wide;
  #L531d6a.  return v6 @kind wide;
}
procedure `double` `ulongToDouble`(`long` v4 ) @signature `Lkotlin/UnsignedKt;.ulongToDouble:(J)D` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5319b4.  v0:= 11I;
  #L5319b8.  v0:= v4 ^>> v0 @kind long;
  #L5319bc.  v0:= (`double`) v0 @kind l2d;
  #L5319be.  v2:= 2048I;
  #L5319c2.  v2:= (`double`) v2 @kind i2d;
  #L5319c4.  v0:= v0 * v2 @kind double;
  #L5319c8.  v2:= 2047L;
  #L5319cc.  v4:= v4 ^& v2 @kind long;
  #L5319ce.  v4:= (`double`) v4 @kind l2d;
  #L5319d0.  v0:= v0 + v4 @kind double;
  #L5319d2.  return v0 @kind wide;
}
procedure `java.lang.String` `ulongToString`(`long` v1 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(J)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L531b0c.  v0:= 10I;
  #L531b10.  call temp:= `ulongToString`(v1, v0) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @kind static;
  #L531b16.  v1:= temp @kind object;
  #L531b18.  return v1 @kind object;
}
procedure `java.lang.String` `ulongToString`(`long` v8 , `int` v10 ) @signature `Lkotlin/UnsignedKt;.ulongToString:(JI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L531b2c.  v0:= "java.lang.Long.toString(this, checkRadix(radix))" @kind object;
  #L531b30.  v1:= 0L;
  #L531b34.  v3:= lcmp(v8, v1);
  #L531b38.  if v3 < 0 then goto L531b54;
  #L531b3c.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L531b42.  v10:= temp;
  #L531b44.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L531b4a.  v8:= temp @kind object;
  #L531b4c.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L531b52.  return v8 @kind object;
  #L531b54.  v1:= 1I;
  #L531b56.  v2:= v8 ^>> v1 @kind long;
  #L531b5a.  v4:= (`long`) v10 @kind i2l;
  #L531b5c.  v2:= v2 / v4 @kind long;
  #L531b5e.  v1:= v2 ^< v1 @kind long;
  #L531b62.  v6:= v1 * v4 @kind long;
  #L531b66.  v8:= v8 - v6 @kind long;
  #L531b68.  v3:= lcmp(v8, v4);
  #L531b6c.  if v3 < 0 then goto L531b78;
  #L531b70.  v8:= v8 - v4 @kind long;
  #L531b72.  v3:= 1L;
  #L531b76.  v1:= v1 + v3 @kind long;
  #L531b78.  v3:= new `java.lang.StringBuilder`;
  #L531b7c.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L531b82.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L531b88.  v4:= temp;
  #L531b8a.  call temp:= `toString`(v1, v4) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L531b90.  v1:= temp @kind object;
  #L531b92.  call `checkNotNullExpressionValue`(v1, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L531b98.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L531b9e.  call temp:= `checkRadix`(v10) @signature `Lkotlin/text/CharsKt;.checkRadix:(I)I` @kind static;
  #L531ba4.  v10:= temp;
  #L531ba6.  call temp:= `toString`(v8, v10) @signature `Ljava/lang/Long;.toString:(JI)Ljava/lang/String;` @kind static;
  #L531bac.  v8:= temp @kind object;
  #L531bae.  call `checkNotNullExpressionValue`(v8, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullExpressionValue:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L531bb4.  call temp:= `append`(v3, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L531bba.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L531bc0.  v8:= temp @kind object;
  #L531bc2.  return v8 @kind object;
}
