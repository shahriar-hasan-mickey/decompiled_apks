record `com.karumi.dexter.DexterInstance` @kind class @AccessFlag FINAL {
  `android.app.Activity` `com.karumi.dexter.DexterInstance.activity` @AccessFlag PRIVATE;
  `com.karumi.dexter.AndroidPermissionService` `com.karumi.dexter.DexterInstance.androidPermissionService` @AccessFlag PRIVATE_FINAL;
  `java.lang.ref.WeakReference` `com.karumi.dexter.DexterInstance.context` @AccessFlag PRIVATE;
  `com.karumi.dexter.IntentProvider` `com.karumi.dexter.DexterInstance.intentProvider` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isRequestingPermission` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.isShowingNativeDialog` @AccessFlag PRIVATE_FINAL;
  `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `com.karumi.dexter.DexterInstance.listener` @AccessFlag PRIVATE;
  `com.karumi.dexter.MultiplePermissionsReport` `com.karumi.dexter.DexterInstance.multiplePermissionsReport` @AccessFlag PRIVATE_FINAL;
  `java.util.Collection` `com.karumi.dexter.DexterInstance.pendingPermissions` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicBoolean` `com.karumi.dexter.DexterInstance.rationaleAccepted` @AccessFlag PRIVATE_FINAL;
}
global `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.karumi.dexter.DexterInstance.PERMISSIONS_REQUEST_CODE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/karumi/dexter/DexterInstance;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3264ac.  v0:= new `com.karumi.dexter.listener.multi.BaseMultiplePermissionsListener`;
  #L3264b0.  call `<init>`(v0) @signature `Lcom/karumi/dexter/listener/multi/BaseMultiplePermissionsListener;.<init>:()V` @kind direct;
  #L3264b6.  `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3264ba.  return @kind void;
}
procedure `void` `<init>`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object, `com.karumi.dexter.AndroidPermissionService` v3 @kind object, `com.karumi.dexter.IntentProvider` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.<init>:(Landroid/content/Context;Lcom/karumi/dexter/AndroidPermissionService;Lcom/karumi/dexter/IntentProvider;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L3264cc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3264d2.  v0:= new `java.lang.Object`;
  #L3264d6.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3264dc.  v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` := v0 @kind object;
  #L3264e0.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3264e4.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3264e8.  v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` := v3 @kind object;
  #L3264ec.  v1.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` := v4 @kind object;
  #L3264f0.  v3:= new `java.util.TreeSet`;
  #L3264f4.  call `<init>`(v3) @signature `Ljava/util/TreeSet;.<init>:()V` @kind direct;
  #L3264fa.  v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` := v3 @kind object;
  #L3264fe.  v3:= new `com.karumi.dexter.MultiplePermissionsReport`;
  #L326502.  call `<init>`(v3) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.<init>:()V` @kind direct;
  #L326508.  v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` := v3 @kind object;
  #L32650c.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L326510.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L326516.  v1.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L32651a.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L32651e.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L326524.  v1.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L326528.  v3:= new `java.util.concurrent.atomic.AtomicBoolean`;
  #L32652c.  call `<init>`(v3) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.<init>:()V` @kind direct;
  #L326532.  v1.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` := v3 @kind object;
  #L326536.  call `setContext`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @kind virtual;
  #L32653c.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicBoolean` `access$600`(`com.karumi.dexter.DexterInstance` v0 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$600:(Lcom/karumi/dexter/DexterInstance;)Ljava/util/concurrent/atomic/AtomicBoolean;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L326494.  v0:= v0.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326498.  return v0 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$702`(`com.karumi.dexter.DexterInstance` v0 @kind object, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.access$702:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L326430.  v0.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L326434.  return v1 @kind object;
}
procedure `com.karumi.dexter.listener.multi.MultiplePermissionsListener` `access$800`() @signature `Lcom/karumi/dexter/DexterInstance;.access$800:()Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L326448.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L32644c.  return v0 @kind object;
}
procedure `void` `checkMultiplePermissions`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v2 @kind object, `java.util.Collection` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L326550.  call `checkNoDexterRequestOngoing`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @kind direct;
  #L326556.  call `checkRequestSomePermission`(v1, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @kind direct;
  #L32655c.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L326560.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L326566.  v0:= temp @kind object;
  #L326568.  if v0 != 0 then goto L32656e;
  #L32656c.  return @kind void;
  #L32656e.  v0:= v1.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L326572.  if v0 == 0 then goto L326588;
  #L326576.  call temp:= `isFinishing`(v0) @signature `Landroid/app/Activity;.isFinishing:()Z` @kind virtual;
  #L32657c.  v0:= temp;
  #L32657e.  if v0 == 0 then goto L326588;
  #L326582.  call `onActivityDestroyed`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityDestroyed:()V` @kind virtual;
  #L326588.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L32658c.  call `clear`(v0) @signature `Ljava/util/Collection;.clear:()V` @kind interface;
  #L326592.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L326596.  call temp:= `addAll`(v0, v3) @signature `Ljava/util/Collection;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L32659c.  v0:= v1.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L3265a0.  call `clear`(v0) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.clear:()V` @kind virtual;
  #L3265a6.  v0:= new `com.karumi.dexter.MultiplePermissionListenerThreadDecorator`;
  #L3265aa.  call `<init>`(v0, v2, v4) @signature `Lcom/karumi/dexter/MultiplePermissionListenerThreadDecorator;.<init>:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3265b0.  v1.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3265b4.  v0:= v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L3265b8.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3265be.  v0:= temp @kind object;
  #L3265c0.  v0:= (`android.content.Context`) v0 @kind object;
  #L3265c4.  call temp:= `isEveryPermissionGranted`(v1, v3, v0) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @kind direct;
  #L3265ca.  v0:= temp;
  #L3265cc.  if v0 == 0 then goto L3265e2;
  #L3265d0.  v0:= new `com.karumi.dexter.DexterInstance$1`;
  #L3265d4.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/karumi/dexter/DexterInstance$1;.<init>:(Lcom/karumi/dexter/DexterInstance;Ljava/util/Collection;Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;)V` @kind direct;
  #L3265da.  call `execute`(v4, v0) @signature `Lcom/karumi/dexter/Thread;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L3265e0.  goto L3265e8;
  #L3265e2.  call `startTransparentActivityIfNeeded`(v1) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @kind direct;
  #L3265e8.  call `loop`(v4) @signature `Lcom/karumi/dexter/Thread;.loop:()V` @kind interface;
  #L3265ee.  return @kind void;
}
procedure `void` `checkNoDexterRequestOngoing`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.checkNoDexterRequestOngoing:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L326600.  v0:= v3.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326604.  v1:= 1I;
  #L326606.  call temp:= `getAndSet`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.getAndSet:(Z)Z` @kind virtual;
  #L32660c.  v0:= temp;
  #L32660e.  if v0 != 0 then goto L326614;
  #L326612.  return @kind void;
  #L326614.  v0:= new `com.karumi.dexter.DexterException`;
  #L326618.  v1:= `@@com.karumi.dexter.listener.DexterError.REQUEST_ONGOING` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L32661c.  v2:= "Only one Dexter request at a time is allowed" @kind object;
  #L326620.  call `<init>`(v0, v2, v1) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L326626.  throw v0;
}
procedure `void` `checkRequestSomePermission`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkRequestSomePermission:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L326668.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L32666e.  v3:= temp;
  #L326670.  if v3 != 0 then goto L326676;
  #L326674.  return @kind void;
  #L326676.  v3:= new `com.karumi.dexter.DexterException`;
  #L32667a.  v0:= `@@com.karumi.dexter.listener.DexterError.NO_PERMISSIONS_REQUESTED` @type ^`com.karumi.dexter.listener.DexterError` @kind object;
  #L32667e.  v1:= "Dexter has to be called with at least one permission" @kind object;
  #L326682.  call `<init>`(v3, v1, v0) @signature `Lcom/karumi/dexter/DexterException;.<init>:(Ljava/lang/String;Lcom/karumi/dexter/listener/DexterError;)V` @kind direct;
  #L326688.  throw v3;
}
procedure `int` `checkSelfPermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L326460.  v0:= v1.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L326464.  call temp:= `checkSelfPermission`(v0, v2, v3) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L32646a.  v2:= temp;
  #L32646c.  return v2;
  #L32646e.  v2:= -1I;
  #L326470.  return v2;
  catch `java.lang.RuntimeException` @[L326460..L32646c] goto L32646e;
}
procedure `void` `checkSinglePermission`(`com.karumi.dexter.DexterInstance` v1 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v2 @kind object, `java.lang.String` v3 @kind object, `com.karumi.dexter.Thread` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L32669c.  v0:= new `com.karumi.dexter.MultiplePermissionsListenerToPermissionListenerAdapter`;
  #L3266a0.  call `<init>`(v0, v2) @signature `Lcom/karumi/dexter/MultiplePermissionsListenerToPermissionListenerAdapter;.<init>:(Lcom/karumi/dexter/listener/single/PermissionListener;)V` @kind direct;
  #L3266a6.  call temp:= `singleton`(v3) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L3266ac.  v2:= temp @kind object;
  #L3266ae.  call `checkMultiplePermissions`(v1, v0, v2, v4) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L3266b4.  return @kind void;
}
procedure `com.karumi.dexter.DexterInstance$PermissionStates` `getPermissionStates`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3263c0.  v0:= new `com.karumi.dexter.DexterInstance$PermissionStates`;
  #L3263c4.  v1:= 0I;
  #L3263c6.  call `<init>`(v0, v4, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.<init>:(Lcom/karumi/dexter/DexterInstance;Lcom/karumi/dexter/DexterInstance$1;)V` @kind direct;
  #L3263cc.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3263d2.  v5:= temp @kind object;
  #L3263d4.  call temp:= `hasNext`(v5) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3263da.  v1:= temp;
  #L3263dc.  if v1 == 0 then goto L32641c;
  #L3263e0.  call temp:= `next`(v5) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3263e6.  v1:= temp @kind object;
  #L3263e8.  v1:= (`java.lang.String`) v1 @kind object;
  #L3263ec.  v2:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3263f0.  call temp:= `checkSelfPermission`(v4, v2, v1) @signature `Lcom/karumi/dexter/DexterInstance;.checkSelfPermission:(Landroid/app/Activity;Ljava/lang/String;)I` @kind direct;
  #L3263f6.  v2:= temp;
  #L3263f8.  v3:= -2I;
  #L3263fa.  if v2 == v3 then goto L326414;
  #L3263fe.  v3:= -1I;
  #L326400.  if v2 == v3 then goto L32640c;
  #L326404.  call `access$500`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$500:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L32640a.  goto L3263d4;
  #L32640c.  call `access$400`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$400:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L326412.  goto L3263d4;
  #L326414.  call `access$300`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$300:(Lcom/karumi/dexter/DexterInstance$PermissionStates;Ljava/lang/String;)V` @kind static;
  #L32641a.  goto L3263d4;
  #L32641c.  return v0 @kind object;
}
procedure `void` `handleDeniedPermissions`(`com.karumi.dexter.DexterInstance` v5 @kind this, `java.util.Collection` v6 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3266c8.  call temp:= `isEmpty`(v6) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3266ce.  v0:= temp;
  #L3266d0.  if v0 == 0 then goto L3266d6;
  #L3266d4.  return @kind void;
  #L3266d6.  v0:= new `java.util.LinkedList`;
  #L3266da.  call `<init>`(v0) @signature `Ljava/util/LinkedList;.<init>:()V` @kind direct;
  #L3266e0.  call temp:= `iterator`(v6) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L3266e6.  v1:= temp @kind object;
  #L3266e8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L3266ee.  v2:= temp;
  #L3266f0.  if v2 == 0 then goto L326726;
  #L3266f4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L3266fa.  v2:= temp @kind object;
  #L3266fc.  v2:= (`java.lang.String`) v2 @kind object;
  #L326700.  v3:= v5.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L326704.  v4:= v5.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L326708.  call temp:= `shouldShowRequestPermissionRationale`(v3, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.shouldShowRequestPermissionRationale:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L32670e.  v3:= temp;
  #L326710.  if v3 == 0 then goto L3266e8;
  #L326714.  v3:= new `com.karumi.dexter.listener.PermissionRequest`;
  #L326718.  call `<init>`(v3, v2) @signature `Lcom/karumi/dexter/listener/PermissionRequest;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L32671e.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L326724.  goto L3266e8;
  #L326726.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L32672c.  v1:= temp;
  #L32672e.  if v1 == 0 then goto L32673a;
  #L326732.  call `requestPermissionsToSystem`(v5, v6) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L326738.  goto L32675e;
  #L32673a.  v6:= v5.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L32673e.  call temp:= `get`(v6) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L326744.  v6:= temp;
  #L326746.  if v6 != 0 then goto L32675e;
  #L32674a.  v6:= new `com.karumi.dexter.PermissionRationaleToken`;
  #L32674e.  call `<init>`(v6, v5) @signature `Lcom/karumi/dexter/PermissionRationaleToken;.<init>:(Lcom/karumi/dexter/DexterInstance;)V` @kind direct;
  #L326754.  v1:= v5.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L326758.  call `onPermissionRationaleShouldBeShown`(v1, v0, v6) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionRationaleShouldBeShown:(Ljava/util/List;Lcom/karumi/dexter/PermissionToken;)V` @kind interface;
  #L32675e.  return @kind void;
}
procedure `boolean` `isEveryPermissionGranted`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object, `android.content.Context` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.isEveryPermissionGranted:(Ljava/util/Collection;Landroid/content/Context;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L326378.  call temp:= `iterator`(v3) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L32637e.  v3:= temp @kind object;
  #L326380.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L326386.  v0:= temp;
  #L326388.  if v0 == 0 then goto L3263ac;
  #L32638c.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L326392.  v0:= temp @kind object;
  #L326394.  v0:= (`java.lang.String`) v0 @kind object;
  #L326398.  v1:= v2.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L32639c.  call temp:= `checkSelfPermission`(v1, v4, v0) @signature `Lcom/karumi/dexter/AndroidPermissionService;.checkSelfPermission:(Landroid/content/Context;Ljava/lang/String;)I` @kind virtual;
  #L3263a2.  v0:= temp;
  #L3263a4.  if v0 == 0 then goto L326380;
  #L3263a8.  v3:= 0I;
  #L3263aa.  return v3;
  #L3263ac.  v3:= 1I;
  #L3263ae.  return v3;
}
procedure `void` `onPermissionsChecked`(`com.karumi.dexter.DexterInstance` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L3268b4.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3268b8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3268be.  v0:= temp;
  #L3268c0.  if v0 == 0 then goto L3268c6;
  #L3268c4.  return @kind void;
  #L3268c6.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L3268ca.  @monitorenter v0
  #L3268cc.  v1:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3268d0.  call temp:= `removeAll`(v1, v3) @signature `Ljava/util/Collection;.removeAll:(Ljava/util/Collection;)Z` @kind interface;
  #L3268d6.  v3:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3268da.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L3268e0.  v3:= temp;
  #L3268e2.  if v3 == 0 then goto L32692e;
  #L3268e6.  v3:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3268ea.  if v3 == 0 then goto L3268f8;
  #L3268ee.  v3:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L3268f2.  call `finish`(v3) @signature `Landroid/app/Activity;.finish:()V` @kind virtual;
  #L3268f8.  v3:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L3268fc.  v1:= 0I;
  #L3268fe.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326904.  v3:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326908.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L32690e.  v3:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326912.  call `set`(v3, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326918.  v3:= v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L32691c.  v1:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L326920.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v1 @kind object;
  #L326924.  v1:= v2.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L326928.  call `onPermissionsChecked`(v3, v1) @signature `Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;.onPermissionsChecked:(Lcom/karumi/dexter/MultiplePermissionsReport;)V` @kind interface;
  #L32692e.  @monitorexit v0
  #L326930.  return @kind void;
  #L326932.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L326934.  @monitorexit v0
  #L326936.  throw v3;
  catch `java.lang.Throwable` @[L3268cc..L326936] goto L326932;
}
procedure `void` `requestPermissionsToSystem`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L326954.  v0:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326958.  call temp:= `get`(v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.get:()Z` @kind virtual;
  #L32695e.  v0:= temp;
  #L326960.  if v0 != 0 then goto L326988;
  #L326964.  v0:= v3.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L326968.  v1:= v3.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L32696c.  v2:= 0I;
  #L32696e.  v2:= new `java.lang.String`[v2];
  #L326972.  call temp:= `toArray`(v4, v2) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L326978.  v4:= temp @kind object;
  #L32697a.  v4:= (`java.lang.String`[]) v4 @kind object;
  #L32697e.  v2:= 42I;
  #L326982.  call `requestPermissions`(v0, v1, v4, v2) @signature `Lcom/karumi/dexter/AndroidPermissionService;.requestPermissions:(Landroid/app/Activity;[Ljava/lang/String;I)V` @kind virtual;
  #L326988.  v4:= v3.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L32698c.  v0:= 1I;
  #L32698e.  call `set`(v4, v0) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326994.  return @kind void;
}
procedure `void` `startTransparentActivityIfNeeded`(`com.karumi.dexter.DexterInstance` v3 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.startTransparentActivityIfNeeded:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L3269c8.  v0:= v3.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` @kind object;
  #L3269cc.  call temp:= `get`(v0) @signature `Ljava/lang/ref/WeakReference;.get:()Ljava/lang/Object;` @kind virtual;
  #L3269d2.  v0:= temp @kind object;
  #L3269d4.  v0:= (`android.content.Context`) v0 @kind object;
  #L3269d8.  if v0 != 0 then goto L3269de;
  #L3269dc.  return @kind void;
  #L3269de.  v1:= v3.`com.karumi.dexter.DexterInstance.intentProvider` @type ^`com.karumi.dexter.IntentProvider` @kind object;
  #L3269e2.  v2:= constclass @type ^`com.karumi.dexter.DexterActivity` @kind object;
  #L3269e6.  call temp:= `get`(v1, v0, v2) @signature `Lcom/karumi/dexter/IntentProvider;.get:(Landroid/content/Context;Ljava/lang/Class;)Landroid/content/Intent;` @kind virtual;
  #L3269ec.  v1:= temp @kind object;
  #L3269ee.  v2:= instanceof @variable v0 @type ^`android.app.Activity` @kind boolean;
  #L3269f2.  if v2 != 0 then goto L326a00;
  #L3269f6.  v2:= 268435456I;
  #L3269fa.  call temp:= `addFlags`(v1, v2) @signature `Landroid/content/Intent;.addFlags:(I)Landroid/content/Intent;` @kind virtual;
  #L326a00.  call `startActivity`(v0, v1) @signature `Landroid/content/Context;.startActivity:(Landroid/content/Intent;)V` @kind virtual;
  #L326a06.  return @kind void;
}
procedure `void` `updatePermissionsAsDenied`(`com.karumi.dexter.DexterInstance` v4 @kind this, `java.util.Collection` v5 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L326a18.  call temp:= `iterator`(v5) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L326a1e.  v0:= temp @kind object;
  #L326a20.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L326a26.  v1:= temp;
  #L326a28.  if v1 == 0 then goto L326a5c;
  #L326a2c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L326a32.  v1:= temp @kind object;
  #L326a34.  v1:= (`java.lang.String`) v1 @kind object;
  #L326a38.  v2:= v4.`com.karumi.dexter.DexterInstance.androidPermissionService` @type ^`com.karumi.dexter.AndroidPermissionService` @kind object;
  #L326a3c.  v3:= v4.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L326a40.  call temp:= `isPermissionPermanentlyDenied`(v2, v3, v1) @signature `Lcom/karumi/dexter/AndroidPermissionService;.isPermissionPermanentlyDenied:(Landroid/app/Activity;Ljava/lang/String;)Z` @kind virtual;
  #L326a46.  v2:= temp;
  #L326a48.  call temp:= `from`(v1, v2) @signature `Lcom/karumi/dexter/listener/PermissionDeniedResponse;.from:(Ljava/lang/String;Z)Lcom/karumi/dexter/listener/PermissionDeniedResponse;` @kind static;
  #L326a4e.  v1:= temp @kind object;
  #L326a50.  v2:= v4.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L326a54.  call temp:= `addDeniedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addDeniedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionDeniedResponse;)Z` @kind virtual;
  #L326a5a.  goto L326a20;
  #L326a5c.  call `onPermissionsChecked`(v4, v5) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L326a62.  return @kind void;
}
procedure `void` `updatePermissionsAsGranted`(`com.karumi.dexter.DexterInstance` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L326a74.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L326a7a.  v0:= temp @kind object;
  #L326a7c.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L326a82.  v1:= temp;
  #L326a84.  if v1 == 0 then goto L326aa8;
  #L326a88.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L326a8e.  v1:= temp @kind object;
  #L326a90.  v1:= (`java.lang.String`) v1 @kind object;
  #L326a94.  call temp:= `from`(v1) @signature `Lcom/karumi/dexter/listener/PermissionGrantedResponse;.from:(Ljava/lang/String;)Lcom/karumi/dexter/listener/PermissionGrantedResponse;` @kind static;
  #L326a9a.  v1:= temp @kind object;
  #L326a9c.  v2:= v3.`com.karumi.dexter.DexterInstance.multiplePermissionsReport` @type ^`com.karumi.dexter.MultiplePermissionsReport` @kind object;
  #L326aa0.  call temp:= `addGrantedPermissionResponse`(v2, v1) @signature `Lcom/karumi/dexter/MultiplePermissionsReport;.addGrantedPermissionResponse:(Lcom/karumi/dexter/listener/PermissionGrantedResponse;)Z` @kind virtual;
  #L326aa6.  goto L326a7c;
  #L326aa8.  call `onPermissionsChecked`(v3, v4) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionsChecked:(Ljava/util/Collection;)V` @kind direct;
  #L326aae.  return @kind void;
}
procedure `void` `checkPermission`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.single.PermissionListener` v1 @kind object, `java.lang.String` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L326638.  call `checkSinglePermission`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkSinglePermission:(Lcom/karumi/dexter/listener/single/PermissionListener;Ljava/lang/String;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L32663e.  return @kind void;
}
procedure `void` `checkPermissions`(`com.karumi.dexter.DexterInstance` v0 @kind this, `com.karumi.dexter.listener.multi.MultiplePermissionsListener` v1 @kind object, `java.util.Collection` v2 @kind object, `com.karumi.dexter.Thread` v3 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.checkPermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @AccessFlag  {
    temp;

  #L326650.  call `checkMultiplePermissions`(v0, v1, v2, v3) @signature `Lcom/karumi/dexter/DexterInstance;.checkMultiplePermissions:(Lcom/karumi/dexter/listener/multi/MultiplePermissionsListener;Ljava/util/Collection;Lcom/karumi/dexter/Thread;)V` @kind direct;
  #L326656.  return @kind void;
}
procedure `void` `onActivityDestroyed`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityDestroyed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L326770.  v0:= v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` @kind object;
  #L326774.  if v0 == 0 then goto L3267a6;
  #L326778.  v0:= 0I;
  #L32677a.  v2.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v0 @kind object;
  #L32677e.  v0:= v2.`com.karumi.dexter.DexterInstance.isRequestingPermission` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326782.  v1:= 0I;
  #L326784.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L32678a.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L32678e.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326794.  v0:= v2.`com.karumi.dexter.DexterInstance.isShowingNativeDialog` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326798.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L32679e.  v0:= `@@com.karumi.dexter.DexterInstance.EMPTY_LISTENER` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` @kind object;
  #L3267a2.  v2.`com.karumi.dexter.DexterInstance.listener` @type ^`com.karumi.dexter.listener.multi.MultiplePermissionsListener` := v0 @kind object;
  #L3267a6.  return @kind void;
}
procedure `void` `onActivityReady`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.app.Activity` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onActivityReady:(Landroid/app/Activity;)V` @AccessFlag  {
    temp;
    v0;

  #L3267b8.  v1.`com.karumi.dexter.DexterInstance.activity` @type ^`android.app.Activity` := v2 @kind object;
  #L3267bc.  v0:= v1.`com.karumi.dexter.DexterInstance.pendingPermissionsMutex` @type ^`java.lang.Object` @kind object;
  #L3267c0.  @monitorenter v0
  #L3267c2.  if v2 == 0 then goto L3267d4;
  #L3267c6.  v2:= v1.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L3267ca.  call temp:= `getPermissionStates`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.getPermissionStates:(Ljava/util/Collection;)Lcom/karumi/dexter/DexterInstance$PermissionStates;` @kind direct;
  #L3267d0.  v2:= temp @kind object;
  #L3267d2.  goto L3267d6;
  #L3267d4.  v2:= 0I;
  #L3267d6.  @monitorexit v0
  #L3267d8.  if v2 == 0 then goto L326806;
  #L3267dc.  call temp:= `access$000`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$000:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L3267e2.  v0:= temp @kind object;
  #L3267e4.  call `handleDeniedPermissions`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.handleDeniedPermissions:(Ljava/util/Collection;)V` @kind direct;
  #L3267ea.  call temp:= `getImpossibleToGrantPermissions`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.getImpossibleToGrantPermissions:()Ljava/util/Collection;` @kind virtual;
  #L3267f0.  v0:= temp @kind object;
  #L3267f2.  call `updatePermissionsAsDenied`(v1, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L3267f8.  call temp:= `access$100`(v2) @signature `Lcom/karumi/dexter/DexterInstance$PermissionStates;.access$100:(Lcom/karumi/dexter/DexterInstance$PermissionStates;)Ljava/util/Collection;` @kind static;
  #L3267fe.  v2:= temp @kind object;
  #L326800.  call `updatePermissionsAsGranted`(v1, v2) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L326806.  return @kind void;
  #L326808.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L32680a.  @monitorexit v0
  #L32680c.  throw v2;
  catch `java.lang.Throwable` @[L3267c6..L3267d8] goto L326808;
  catch `java.lang.Throwable` @[L32680a..L32680c] goto L326808;
}
procedure `void` `onCancelPermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onCancelPermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L326834.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326838.  v1:= 0I;
  #L32683a.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326840.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L326844.  call `updatePermissionsAsDenied`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L32684a.  return @kind void;
}
procedure `void` `onContinuePermissionRequest`(`com.karumi.dexter.DexterInstance` v2 @kind this) @signature `Lcom/karumi/dexter/DexterInstance;.onContinuePermissionRequest:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L32685c.  v0:= v2.`com.karumi.dexter.DexterInstance.rationaleAccepted` @type ^`java.util.concurrent.atomic.AtomicBoolean` @kind object;
  #L326860.  v1:= 1I;
  #L326862.  call `set`(v0, v1) @signature `Ljava/util/concurrent/atomic/AtomicBoolean;.set:(Z)V` @kind virtual;
  #L326868.  v0:= v2.`com.karumi.dexter.DexterInstance.pendingPermissions` @type ^`java.util.Collection` @kind object;
  #L32686c.  call `requestPermissionsToSystem`(v2, v0) @signature `Lcom/karumi/dexter/DexterInstance;.requestPermissionsToSystem:(Ljava/util/Collection;)V` @kind direct;
  #L326872.  return @kind void;
}
procedure `void` `onPermissionRequestDenied`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestDenied:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L326884.  call `updatePermissionsAsDenied`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsDenied:(Ljava/util/Collection;)V` @kind direct;
  #L32688a.  return @kind void;
}
procedure `void` `onPermissionRequestGranted`(`com.karumi.dexter.DexterInstance` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.onPermissionRequestGranted:(Ljava/util/Collection;)V` @AccessFlag  {
    temp;

  #L32689c.  call `updatePermissionsAsGranted`(v0, v1) @signature `Lcom/karumi/dexter/DexterInstance;.updatePermissionsAsGranted:(Ljava/util/Collection;)V` @kind direct;
  #L3268a2.  return @kind void;
}
procedure `void` `setContext`(`com.karumi.dexter.DexterInstance` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/karumi/dexter/DexterInstance;.setContext:(Landroid/content/Context;)V` @AccessFlag  {
    temp;
    v0;

  #L3269a8.  v0:= new `java.lang.ref.WeakReference`;
  #L3269ac.  call `<init>`(v0, v2) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L3269b2.  v1.`com.karumi.dexter.DexterInstance.context` @type ^`java.lang.ref.WeakReference` := v0 @kind object;
  #L3269b6.  return @kind void;
}
