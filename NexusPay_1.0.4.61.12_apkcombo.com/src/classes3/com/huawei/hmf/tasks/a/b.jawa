record `com.huawei.hmf.tasks.a.b` @kind class @AccessFlag PUBLIC_FINAL extends `com.huawei.hmf.tasks.ExecuteResult` @kind interface {
  `com.huawei.hmf.tasks.OnCanceledListener` `com.huawei.hmf.tasks.a.b.a` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `com.huawei.hmf.tasks.a.b.b` @AccessFlag PRIVATE;
  `java.lang.Object` `com.huawei.hmf.tasks.a.b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hmf.tasks.a.b` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `com.huawei.hmf.tasks.OnCanceledListener` v3 @kind object) @signature `Lcom/huawei/hmf/tasks/a/b;.<init>:(Ljava/util/concurrent/Executor;Lcom/huawei/hmf/tasks/OnCanceledListener;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c1574.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c157a.  v0:= new `java.lang.Object`;
  #L1c157e.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1584.  v1.`com.huawei.hmf.tasks.a.b.c` @type ^`java.lang.Object` := v0 @kind object;
  #L1c1588.  v1.`com.huawei.hmf.tasks.a.b.a` @type ^`com.huawei.hmf.tasks.OnCanceledListener` := v3 @kind object;
  #L1c158c.  v1.`com.huawei.hmf.tasks.a.b.b` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L1c1590.  return @kind void;
}
procedure `java.lang.Object` `a`(`com.huawei.hmf.tasks.a.b` v0 @kind object) @signature `Lcom/huawei/hmf/tasks/a/b;.a:(Lcom/huawei/hmf/tasks/a/b;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1c155c.  v0:= v0.`com.huawei.hmf.tasks.a.b.c` @type ^`java.lang.Object` @kind object;
  #L1c1560.  return v0 @kind object;
}
procedure `com.huawei.hmf.tasks.OnCanceledListener` `b`(`com.huawei.hmf.tasks.a.b` v0 @kind object) @signature `Lcom/huawei/hmf/tasks/a/b;.b:(Lcom/huawei/hmf/tasks/a/b;)Lcom/huawei/hmf/tasks/OnCanceledListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1c1544.  v0:= v0.`com.huawei.hmf.tasks.a.b.a` @type ^`com.huawei.hmf.tasks.OnCanceledListener` @kind object;
  #L1c1548.  return v0 @kind object;
}
procedure `void` `cancel`(`com.huawei.hmf.tasks.a.b` v2 @kind this) @signature `Lcom/huawei/hmf/tasks/a/b;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1c15a4.  v0:= v2.`com.huawei.hmf.tasks.a.b.c` @type ^`java.lang.Object` @kind object;
  #L1c15a8.  @monitorenter v0
  #L1c15aa.  v1:= 0I;
  #L1c15ac.  v2.`com.huawei.hmf.tasks.a.b.a` @type ^`com.huawei.hmf.tasks.OnCanceledListener` := v1 @kind object;
  #L1c15b0.  @monitorexit v0
  #L1c15b2.  return @kind void;
  #L1c15b4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c15b6.  @monitorexit v0
  #L1c15b8.  throw v1;
  catch `java.lang.Throwable` @[L1c15ac..L1c15b8] goto L1c15b4;
}
procedure `void` `onComplete`(`com.huawei.hmf.tasks.a.b` v1 @kind this, `com.huawei.hmf.tasks.Task` v2 @kind object) @signature `Lcom/huawei/hmf/tasks/a/b;.onComplete:(Lcom/huawei/hmf/tasks/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1c15d8.  call temp:= `isCanceled`(v2) @signature `Lcom/huawei/hmf/tasks/Task;.isCanceled:()Z` @kind virtual;
  #L1c15de.  v2:= temp;
  #L1c15e0.  if v2 == 0 then goto L1c15f8;
  #L1c15e4.  v2:= v1.`com.huawei.hmf.tasks.a.b.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c15e8.  v0:= new `com.huawei.hmf.tasks.a.b$a`;
  #L1c15ec.  call `<init>`(v0, v1) @signature `Lcom/huawei/hmf/tasks/a/b$a;.<init>:(Lcom/huawei/hmf/tasks/a/b;)V` @kind direct;
  #L1c15f2.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1c15f8.  return @kind void;
}
