record `com.huawei.hmf.tasks.a.f` @kind class @AccessFlag PUBLIC_FINAL extends `com.huawei.hmf.tasks.ExecuteResult` @kind interface {
  `com.huawei.hmf.tasks.OnFailureListener` `com.huawei.hmf.tasks.a.f.a` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `com.huawei.hmf.tasks.a.f.b` @AccessFlag PRIVATE;
  `java.lang.Object` `com.huawei.hmf.tasks.a.f.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hmf.tasks.a.f` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object, `com.huawei.hmf.tasks.OnFailureListener` v3 @kind object) @signature `Lcom/huawei/hmf/tasks/a/f;.<init>:(Ljava/util/concurrent/Executor;Lcom/huawei/hmf/tasks/OnFailureListener;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1c19f0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c19f6.  v0:= new `java.lang.Object`;
  #L1c19fa.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c1a00.  v1.`com.huawei.hmf.tasks.a.f.c` @type ^`java.lang.Object` := v0 @kind object;
  #L1c1a04.  v1.`com.huawei.hmf.tasks.a.f.a` @type ^`com.huawei.hmf.tasks.OnFailureListener` := v3 @kind object;
  #L1c1a08.  v1.`com.huawei.hmf.tasks.a.f.b` @type ^`java.util.concurrent.Executor` := v2 @kind object;
  #L1c1a0c.  return @kind void;
}
procedure `java.lang.Object` `a`(`com.huawei.hmf.tasks.a.f` v0 @kind object) @signature `Lcom/huawei/hmf/tasks/a/f;.a:(Lcom/huawei/hmf/tasks/a/f;)Ljava/lang/Object;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1c19d8.  v0:= v0.`com.huawei.hmf.tasks.a.f.c` @type ^`java.lang.Object` @kind object;
  #L1c19dc.  return v0 @kind object;
}
procedure `com.huawei.hmf.tasks.OnFailureListener` `b`(`com.huawei.hmf.tasks.a.f` v0 @kind object) @signature `Lcom/huawei/hmf/tasks/a/f;.b:(Lcom/huawei/hmf/tasks/a/f;)Lcom/huawei/hmf/tasks/OnFailureListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1c19c0.  v0:= v0.`com.huawei.hmf.tasks.a.f.a` @type ^`com.huawei.hmf.tasks.OnFailureListener` @kind object;
  #L1c19c4.  return v0 @kind object;
}
procedure `void` `cancel`(`com.huawei.hmf.tasks.a.f` v2 @kind this) @signature `Lcom/huawei/hmf/tasks/a/f;.cancel:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1c1a20.  v0:= v2.`com.huawei.hmf.tasks.a.f.c` @type ^`java.lang.Object` @kind object;
  #L1c1a24.  @monitorenter v0
  #L1c1a26.  v1:= 0I;
  #L1c1a28.  v2.`com.huawei.hmf.tasks.a.f.a` @type ^`com.huawei.hmf.tasks.OnFailureListener` := v1 @kind object;
  #L1c1a2c.  @monitorexit v0
  #L1c1a2e.  return @kind void;
  #L1c1a30.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1c1a32.  @monitorexit v0
  #L1c1a34.  throw v1;
  catch `java.lang.Throwable` @[L1c1a28..L1c1a34] goto L1c1a30;
}
procedure `void` `onComplete`(`com.huawei.hmf.tasks.a.f` v2 @kind this, `com.huawei.hmf.tasks.Task` v3 @kind object) @signature `Lcom/huawei/hmf/tasks/a/f;.onComplete:(Lcom/huawei/hmf/tasks/Task;)V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1c1a54.  call temp:= `isSuccessful`(v3) @signature `Lcom/huawei/hmf/tasks/Task;.isSuccessful:()Z` @kind virtual;
  #L1c1a5a.  v0:= temp;
  #L1c1a5c.  if v0 != 0 then goto L1c1a80;
  #L1c1a60.  call temp:= `isCanceled`(v3) @signature `Lcom/huawei/hmf/tasks/Task;.isCanceled:()Z` @kind virtual;
  #L1c1a66.  v0:= temp;
  #L1c1a68.  if v0 != 0 then goto L1c1a80;
  #L1c1a6c.  v0:= v2.`com.huawei.hmf.tasks.a.f.b` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c1a70.  v1:= new `com.huawei.hmf.tasks.a.f$a`;
  #L1c1a74.  call `<init>`(v1, v2, v3) @signature `Lcom/huawei/hmf/tasks/a/f$a;.<init>:(Lcom/huawei/hmf/tasks/a/f;Lcom/huawei/hmf/tasks/Task;)V` @kind direct;
  #L1c1a7a.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1c1a80.  return @kind void;
}
