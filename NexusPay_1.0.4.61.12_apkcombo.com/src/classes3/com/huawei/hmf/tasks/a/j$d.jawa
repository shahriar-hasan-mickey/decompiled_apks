record `com.huawei.hmf.tasks.a.j$d` @kind class @AccessFlag FINAL extends `com.huawei.hmf.tasks.Continuation` @kind interface {
  `java.util.Collection` `com.huawei.hmf.tasks.a.j$d.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.huawei.hmf.tasks.a.j$d` v0 @kind this, `java.util.Collection` v1 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j$d;.<init>:(Ljava/util/Collection;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1c290c.  v0.`com.huawei.hmf.tasks.a.j$d.a` @type ^`java.util.Collection` := v1 @kind object;
  #L1c2910.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c2916.  return @kind void;
}
procedure `java.lang.Object` `then`(`com.huawei.hmf.tasks.a.j$d` v2 @kind this, `com.huawei.hmf.tasks.Task` v3 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j$d;.then:(Lcom/huawei/hmf/tasks/Task;)Ljava/lang/Object;` @AccessFlag PUBLIC_FINAL_SYNTHETIC {
    temp;
    v0;
    v1;

  #L1c28bc.  v3:= new `java.util.ArrayList`;
  #L1c28c0.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1c28c6.  v0:= v2.`com.huawei.hmf.tasks.a.j$d.a` @type ^`java.util.Collection` @kind object;
  #L1c28ca.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c28d0.  v0:= temp @kind object;
  #L1c28d2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c28d8.  v1:= temp;
  #L1c28da.  if v1 == 0 then goto L1c28fa;
  #L1c28de.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c28e4.  v1:= temp @kind object;
  #L1c28e6.  v1:= (`com.huawei.hmf.tasks.Task`) v1 @kind object;
  #L1c28ea.  call temp:= `getResult`(v1) @signature `Lcom/huawei/hmf/tasks/Task;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L1c28f0.  v1:= temp @kind object;
  #L1c28f2.  call temp:= `add`(v3, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1c28f8.  goto L1c28d2;
  #L1c28fa.  return v3 @kind object;
}
