record `com.huawei.hmf.tasks.a.j` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.huawei.hmf.tasks.a.j` v0 @kind this) @signature `Lcom/huawei/hmf/tasks/a/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1c2b7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c2b82.  return @kind void;
}
procedure `com.huawei.hmf.tasks.Task` `a`(`java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Ljava/lang/Object;)Lcom/huawei/hmf/tasks/Task;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c29a4.  v0:= new `com.huawei.hmf.tasks.TaskCompletionSource`;
  #L1c29a8.  call `<init>`(v0) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.<init>:()V` @kind direct;
  #L1c29ae.  call `setResult`(v0, v1) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.setResult:(Ljava/lang/Object;)V` @kind virtual;
  #L1c29b4.  call temp:= `getTask`(v0) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.getTask:()Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c29ba.  v1:= temp @kind object;
  #L1c29bc.  return v1 @kind object;
}
procedure `com.huawei.hmf.tasks.Task` `a`(`java.util.Collection` v2 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Ljava/util/Collection;)Lcom/huawei/hmf/tasks/Task;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c29d0.  call temp:= `c`(v2) @signature `Lcom/huawei/hmf/tasks/a/j;.c:(Ljava/util/Collection;)Lcom/huawei/hmf/tasks/Task;` @kind static;
  #L1c29d6.  v0:= temp @kind object;
  #L1c29d8.  v1:= new `com.huawei.hmf.tasks.a.j$c`;
  #L1c29dc.  call `<init>`(v1, v2) @signature `Lcom/huawei/hmf/tasks/a/j$c;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1c29e2.  call temp:= `continueWith`(v0, v1) @signature `Lcom/huawei/hmf/tasks/Task;.continueWith:(Lcom/huawei/hmf/tasks/Continuation;)Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c29e8.  v2:= temp @kind object;
  #L1c29ea.  return v2 @kind object;
}
procedure `java.lang.Object` `a`(`com.huawei.hmf.tasks.Task` v1 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Lcom/huawei/hmf/tasks/Task;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c2b40.  call temp:= `isSuccessful`(v1) @signature `Lcom/huawei/hmf/tasks/Task;.isSuccessful:()Z` @kind virtual;
  #L1c2b46.  v0:= temp;
  #L1c2b48.  if v0 == 0 then goto L1c2b56;
  #L1c2b4c.  call temp:= `getResult`(v1) @signature `Lcom/huawei/hmf/tasks/Task;.getResult:()Ljava/lang/Object;` @kind virtual;
  #L1c2b52.  v1:= temp @kind object;
  #L1c2b54.  return v1 @kind object;
  #L1c2b56.  v0:= new `java.util.concurrent.ExecutionException`;
  #L1c2b5a.  call temp:= `getException`(v1) @signature `Lcom/huawei/hmf/tasks/Task;.getException:()Ljava/lang/Exception;` @kind virtual;
  #L1c2b60.  v1:= temp @kind object;
  #L1c2b62.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/ExecutionException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1c2b68.  throw v0;
}
procedure `void` `a`(`java.lang.String` v2 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c2b94.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L1c2b9a.  v0:= temp @kind object;
  #L1c2b9c.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L1c2ba2.  v1:= temp @kind object;
  #L1c2ba4.  if v0 == v1 then goto L1c2baa;
  #L1c2ba8.  return @kind void;
  #L1c2baa.  v0:= new `java.lang.IllegalStateException`;
  #L1c2bae.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c2bb4.  throw v0;
}
procedure `com.huawei.hmf.tasks.Task` `b`(`java.util.Collection` v2 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.b:(Ljava/util/Collection;)Lcom/huawei/hmf/tasks/Task;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1c2a4c.  call temp:= `c`(v2) @signature `Lcom/huawei/hmf/tasks/a/j;.c:(Ljava/util/Collection;)Lcom/huawei/hmf/tasks/Task;` @kind static;
  #L1c2a52.  v0:= temp @kind object;
  #L1c2a54.  v1:= new `com.huawei.hmf.tasks.a.j$d`;
  #L1c2a58.  call `<init>`(v1, v2) @signature `Lcom/huawei/hmf/tasks/a/j$d;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1c2a5e.  call temp:= `continueWith`(v0, v1) @signature `Lcom/huawei/hmf/tasks/Task;.continueWith:(Lcom/huawei/hmf/tasks/Continuation;)Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c2a64.  v2:= temp @kind object;
  #L1c2a66.  return v2 @kind object;
}
procedure `com.huawei.hmf.tasks.Task` `c`(`java.util.Collection` v4 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.c:(Ljava/util/Collection;)Lcom/huawei/hmf/tasks/Task;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1c2a78.  call temp:= `isEmpty`(v4) @signature `Ljava/util/Collection;.isEmpty:()Z` @kind interface;
  #L1c2a7e.  v0:= temp;
  #L1c2a80.  if v0 == 0 then goto L1c2a90;
  #L1c2a84.  v4:= 0I;
  #L1c2a86.  call temp:= `a`(v4) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Ljava/lang/Object;)Lcom/huawei/hmf/tasks/Task;` @kind static;
  #L1c2a8c.  v4:= temp @kind object;
  #L1c2a8e.  return v4 @kind object;
  #L1c2a90.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c2a96.  v0:= temp @kind object;
  #L1c2a98.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c2a9e.  v1:= temp;
  #L1c2aa0.  if v1 == 0 then goto L1c2ac6;
  #L1c2aa4.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c2aaa.  v1:= temp @kind object;
  #L1c2aac.  v1:= (`com.huawei.hmf.tasks.Task`) v1 @kind object;
  #L1c2ab0.  if v1 == 0 then goto L1c2ab6;
  #L1c2ab4.  goto L1c2a98;
  #L1c2ab6.  v4:= new `java.lang.NullPointerException`;
  #L1c2aba.  v0:= "task can not is null" @kind object;
  #L1c2abe.  call `<init>`(v4, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1c2ac4.  throw v4;
  #L1c2ac6.  v0:= new `com.huawei.hmf.tasks.a.i`;
  #L1c2aca.  call `<init>`(v0) @signature `Lcom/huawei/hmf/tasks/a/i;.<init>:()V` @kind direct;
  #L1c2ad0.  v1:= new `com.huawei.hmf.tasks.a.e`;
  #L1c2ad4.  call temp:= `size`(v4) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L1c2ada.  v2:= temp;
  #L1c2adc.  call `<init>`(v1, v2, v0) @signature `Lcom/huawei/hmf/tasks/a/e;.<init>:(ILcom/huawei/hmf/tasks/a/i;)V` @kind direct;
  #L1c2ae2.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1c2ae8.  v4:= temp @kind object;
  #L1c2aea.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1c2af0.  v2:= temp;
  #L1c2af2.  if v2 == 0 then goto L1c2b2e;
  #L1c2af6.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1c2afc.  v2:= temp @kind object;
  #L1c2afe.  v2:= (`com.huawei.hmf.tasks.Task`) v2 @kind object;
  #L1c2b02.  call temp:= `immediate`() @signature `Lcom/huawei/hmf/tasks/TaskExecutors;.immediate:()Ljava/util/concurrent/Executor;` @kind static;
  #L1c2b08.  v3:= temp @kind object;
  #L1c2b0a.  call temp:= `addOnSuccessListener`(v2, v3, v1) @signature `Lcom/huawei/hmf/tasks/Task;.addOnSuccessListener:(Ljava/util/concurrent/Executor;Lcom/huawei/hmf/tasks/OnSuccessListener;)Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c2b10.  call temp:= `immediate`() @signature `Lcom/huawei/hmf/tasks/TaskExecutors;.immediate:()Ljava/util/concurrent/Executor;` @kind static;
  #L1c2b16.  v3:= temp @kind object;
  #L1c2b18.  call temp:= `addOnFailureListener`(v2, v3, v1) @signature `Lcom/huawei/hmf/tasks/Task;.addOnFailureListener:(Ljava/util/concurrent/Executor;Lcom/huawei/hmf/tasks/OnFailureListener;)Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c2b1e.  call temp:= `immediate`() @signature `Lcom/huawei/hmf/tasks/TaskExecutors;.immediate:()Ljava/util/concurrent/Executor;` @kind static;
  #L1c2b24.  v3:= temp @kind object;
  #L1c2b26.  call temp:= `addOnCanceledListener`(v2, v3, v1) @signature `Lcom/huawei/hmf/tasks/Task;.addOnCanceledListener:(Ljava/util/concurrent/Executor;Lcom/huawei/hmf/tasks/OnCanceledListener;)Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c2b2c.  goto L1c2aea;
  #L1c2b2e.  return v0 @kind object;
}
procedure `com.huawei.hmf.tasks.Task` `a`(`com.huawei.hmf.tasks.a.j` v2 @kind this, `java.util.concurrent.Executor` v3 @kind object, `java.util.concurrent.Callable` v4 @kind object) @signature `Lcom/huawei/hmf/tasks/a/j;.a:(Ljava/util/concurrent/Executor;Ljava/util/concurrent/Callable;)Lcom/huawei/hmf/tasks/Task;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L1c29fc.  v0:= new `com.huawei.hmf.tasks.TaskCompletionSource`;
  #L1c2a00.  call `<init>`(v0) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.<init>:()V` @kind direct;
  #L1c2a06.  v1:= new `com.huawei.hmf.tasks.a.j$b`;
  #L1c2a0a.  call `<init>`(v1, v2, v0, v4) @signature `Lcom/huawei/hmf/tasks/a/j$b;.<init>:(Lcom/huawei/hmf/tasks/a/j;Lcom/huawei/hmf/tasks/TaskCompletionSource;Ljava/util/concurrent/Callable;)V` @kind direct;
  #L1c2a10.  call `execute`(v3, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1c2a16.  goto L1c2a20;
  #L1c2a18.  v3:= Exception @type ^`java.lang.Exception` @kind object;
  #L1c2a1a.  call `setException`(v0, v3) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.setException:(Ljava/lang/Exception;)V` @kind virtual;
  #L1c2a20.  call temp:= `getTask`(v0) @signature `Lcom/huawei/hmf/tasks/TaskCompletionSource;.getTask:()Lcom/huawei/hmf/tasks/Task;` @kind virtual;
  #L1c2a26.  v3:= temp @kind object;
  #L1c2a28.  return v3 @kind object;
  catch `java.lang.Exception` @[L1c2a06..L1c2a16] goto L1c2a18;
}
