record `com.huawei.hmf.tasks.a.a` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.concurrent.Executor` `com.huawei.hmf.tasks.a.a.a` @AccessFlag PRIVATE_FINAL;
}
global `com.huawei.hmf.tasks.a.a` `@@com.huawei.hmf.tasks.a.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.huawei.hmf.tasks.a.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.huawei.hmf.tasks.a.a.d` @AccessFlag STATIC_FINAL;
global `int` `@@com.huawei.hmf.tasks.a.a.e` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/huawei/hmf/tasks/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c1460.  v0:= new `com.huawei.hmf.tasks.a.a`;
  #L1c1464.  call `<init>`(v0) @signature `Lcom/huawei/hmf/tasks/a/a;.<init>:()V` @kind direct;
  #L1c146a.  `@@com.huawei.hmf.tasks.a.a.b` @type ^`com.huawei.hmf.tasks.a.a` := v0 @kind object;
  #L1c146e.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L1c1474.  v0:= temp @kind object;
  #L1c1476.  call temp:= `availableProcessors`(v0) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L1c147c.  v0:= temp;
  #L1c147e.  `@@com.huawei.hmf.tasks.a.a.c` @type ^`int` := v0;
  #L1c1482.  v1:= v0 + 1;
  #L1c1486.  `@@com.huawei.hmf.tasks.a.a.d` @type ^`int` := v1;
  #L1c148a.  v0:= v0 * 2;
  #L1c148e.  v0:= v0 + 1;
  #L1c1492.  `@@com.huawei.hmf.tasks.a.a.e` @type ^`int` := v0;
  #L1c1496.  return @kind void;
}
procedure `void` `<init>`(`com.huawei.hmf.tasks.a.a` v2 @kind this) @signature `Lcom/huawei/hmf/tasks/a/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1c14a8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1c14ae.  v0:= new `com.huawei.hmf.tasks.a.a$a`;
  #L1c14b2.  v1:= 0I;
  #L1c14b4.  call `<init>`(v0, v1) @signature `Lcom/huawei/hmf/tasks/a/a$a;.<init>:(B)V` @kind direct;
  #L1c14ba.  v2.`com.huawei.hmf.tasks.a.a.a` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1c14be.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `a`() @signature `Lcom/huawei/hmf/tasks/a/a;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1c1420.  v7:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1c1424.  v1:= `@@com.huawei.hmf.tasks.a.a.d` @type ^`int`;
  #L1c1428.  v2:= `@@com.huawei.hmf.tasks.a.a.e` @type ^`int`;
  #L1c142c.  v5:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1c1430.  v6:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L1c1434.  call `<init>`(v6) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L1c143a.  v3:= 1L;
  #L1c143e.  v0:= v7 @kind object;
  #L1c1440.  call `<init>`(v0, v1, v2, v3, v5, v6) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;)V` @kind direct;
  #L1c1446.  v0:= 1I;
  #L1c1448.  call `allowCoreThreadTimeOut`(v7, v0) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.allowCoreThreadTimeOut:(Z)V` @kind virtual;
  #L1c144e.  return v7 @kind object;
}
procedure `java.util.concurrent.Executor` `b`() @signature `Lcom/huawei/hmf/tasks/a/a;.b:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1c1404.  v0:= `@@com.huawei.hmf.tasks.a.a.b` @type ^`com.huawei.hmf.tasks.a.a` @kind object;
  #L1c1408.  v0:= v0.`com.huawei.hmf.tasks.a.a.a` @type ^`java.util.concurrent.Executor` @kind object;
  #L1c140c.  return v0 @kind object;
}
