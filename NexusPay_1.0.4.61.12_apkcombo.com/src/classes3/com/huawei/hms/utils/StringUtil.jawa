record `com.huawei.hms.utils.StringUtil` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.huawei.hms.utils.StringUtil` v0 @kind this) @signature `Lcom/huawei/hms/utils/StringUtil;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2cf6f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cf6fe.  return @kind void;
}
procedure `java.lang.String` `addByteForNum`(`java.lang.String` v2 @kind object, `int` v3 , `char` v4 ) @signature `Lcom/huawei/hms/utils/StringUtil;.addByteForNum:(Ljava/lang/String;IC)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cf63c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cf642.  v0:= temp;
  #L2cf644.  if v0 != v3 then goto L2cf64a;
  #L2cf648.  return v2 @kind object;
  #L2cf64a.  if v0 <= v3 then goto L2cf65a;
  #L2cf64e.  v0:= v0 - v3 @kind int;
  #L2cf650.  call temp:= `substring`(v2, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2cf656.  v2:= temp @kind object;
  #L2cf658.  return v2 @kind object;
  #L2cf65a.  v1:= new `java.lang.StringBuffer`;
  #L2cf65e.  call `<init>`(v1) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L2cf664.  if v0 >= v3 then goto L2cf674;
  #L2cf668.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L2cf66e.  v0:= v0 + 1;
  #L2cf672.  goto L2cf664;
  #L2cf674.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L2cf67a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cf680.  v2:= temp @kind object;
  #L2cf682.  return v2 @kind object;
}
procedure `boolean` `checkVersion`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/StringUtil;.checkVersion:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cf578.  v0:= "(^([0-9]{1,2}\\.){2}[0-9]{1,2}$)|(^([0-9]{1,2}\\.){3}[0-9]{1,3}$)" @kind object;
  #L2cf57c.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L2cf582.  v0:= temp @kind object;
  #L2cf584.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L2cf58a.  v1:= temp @kind object;
  #L2cf58c.  call temp:= `find`(v1) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L2cf592.  v1:= temp;
  #L2cf594.  return v1;
}
procedure `int` `convertVersion2Integer`(`java.lang.String` v4 @kind object) @signature `Lcom/huawei/hms/utils/StringUtil;.convertVersion2Integer:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cf5a8.  call temp:= `checkVersion`(v4) @signature `Lcom/huawei/hms/utils/StringUtil;.checkVersion:(Ljava/lang/String;)Z` @kind static;
  #L2cf5ae.  v0:= temp;
  #L2cf5b0.  v1:= 0I;
  #L2cf5b2.  if v0 == 0 then goto L2cf628;
  #L2cf5b6.  v0:= "\\." @kind object;
  #L2cf5ba.  call temp:= `split`(v4, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L2cf5c0.  v4:= temp @kind object;
  #L2cf5c2.  v0:= length @variable v4;
  #L2cf5c4.  v2:= 3I;
  #L2cf5c6.  if v0 >= v2 then goto L2cf5cc;
  #L2cf5ca.  return v1;
  #L2cf5cc.  v0:= v4[v1] @kind object;
  #L2cf5d0.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2cf5d6.  v0:= temp;
  #L2cf5d8.  v1:= 10000000I;
  #L2cf5de.  v0:= v0 * v1 @kind int;
  #L2cf5e2.  v1:= 1I;
  #L2cf5e4.  v1:= v4[v1] @kind object;
  #L2cf5e8.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2cf5ee.  v1:= temp;
  #L2cf5f0.  v3:= 100000I;
  #L2cf5f6.  v1:= v1 * v3 @kind int;
  #L2cf5fa.  v0:= v0 + v1 @kind int;
  #L2cf5fc.  v1:= 2I;
  #L2cf5fe.  v1:= v4[v1] @kind object;
  #L2cf602.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2cf608.  v1:= temp;
  #L2cf60a.  v1:= v1 * 1000;
  #L2cf60e.  v0:= v0 + v1 @kind int;
  #L2cf610.  v1:= length @variable v4;
  #L2cf612.  v3:= 4I;
  #L2cf614.  if v1 != v3 then goto L2cf626;
  #L2cf618.  v4:= v4[v2] @kind object;
  #L2cf61c.  call temp:= `parseInt`(v4) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L2cf622.  v4:= temp;
  #L2cf624.  v0:= v0 + v4 @kind int;
  #L2cf626.  return v0;
  #L2cf628.  return v1;
}
procedure `java.lang.String` `objDesc`(`java.lang.Object` v2 @kind object) @signature `Lcom/huawei/hms/utils/StringUtil;.objDesc:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cf694.  if v2 != 0 then goto L2cf69e;
  #L2cf698.  v2:= "null" @kind object;
  #L2cf69c.  goto L2cf6e6;
  #L2cf69e.  v0:= new `java.lang.StringBuilder`;
  #L2cf6a2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cf6a8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2cf6ae.  v1:= temp @kind object;
  #L2cf6b0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2cf6b6.  v1:= temp @kind object;
  #L2cf6b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cf6be.  v1:= 64I;
  #L2cf6c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cf6c8.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L2cf6ce.  v2:= temp;
  #L2cf6d0.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2cf6d6.  v2:= temp @kind object;
  #L2cf6d8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cf6de.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cf6e4.  v2:= temp @kind object;
  #L2cf6e6.  return v2 @kind object;
}
