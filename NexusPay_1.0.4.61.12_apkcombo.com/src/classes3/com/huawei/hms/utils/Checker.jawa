record `com.huawei.hms.utils.Checker` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.huawei.hms.utils.Checker` v0 @kind this) @signature `Lcom/huawei/hms/utils/Checker;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2cb078.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb07e.  return @kind void;
}
procedure `void` `assertHandlerThread`(`android.os.Handler` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertHandlerThread:(Landroid/os/Handler;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb090.  v0:= "Must be called on the handler thread" @kind object;
  #L2cb094.  call `assertHandlerThread`(v1, v0) @signature `Lcom/huawei/hms/utils/Checker;.assertHandlerThread:(Landroid/os/Handler;Ljava/lang/String;)V` @kind static;
  #L2cb09a.  return @kind void;
}
procedure `void` `assertHandlerThread`(`android.os.Handler` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertHandlerThread:(Landroid/os/Handler;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb0ac.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2cb0b2.  v0:= temp @kind object;
  #L2cb0b4.  call temp:= `getLooper`(v1) @signature `Landroid/os/Handler;.getLooper:()Landroid/os/Looper;` @kind virtual;
  #L2cb0ba.  v1:= temp @kind object;
  #L2cb0bc.  if v0 != v1 then goto L2cb0c2;
  #L2cb0c0.  return @kind void;
  #L2cb0c2.  v1:= new `java.lang.IllegalStateException`;
  #L2cb0c6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb0cc.  throw v1;
}
procedure `void` `assertNonEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertNonEmpty:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb0e0.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2cb0e6.  v1:= temp;
  #L2cb0e8.  if v1 != 0 then goto L2cb0ee;
  #L2cb0ec.  return @kind void;
  #L2cb0ee.  v1:= new `java.lang.IllegalStateException`;
  #L2cb0f2.  v0:= "Given String is empty or null" @kind object;
  #L2cb0f6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb0fc.  throw v1;
}
procedure `void` `assertNonEmpty`(`java.lang.String` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertNonEmpty:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2cb110.  call temp:= `isEmpty`(v0) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2cb116.  v0:= temp;
  #L2cb118.  if v0 != 0 then goto L2cb11e;
  #L2cb11c.  return @kind void;
  #L2cb11e.  v0:= new `java.lang.IllegalStateException`;
  #L2cb122.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2cb128.  v1:= temp @kind object;
  #L2cb12a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb130.  throw v0;
}
procedure `java.lang.Object` `assertNonNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2caf08.  if v1 == 0 then goto L2caf0e;
  #L2caf0c.  return v1 @kind object;
  #L2caf0e.  v1:= new `java.lang.NullPointerException`;
  #L2caf12.  v0:= "Null reference" @kind object;
  #L2caf16.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caf1c.  throw v1;
}
procedure `java.lang.Object` `assertNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2caf30.  if v0 == 0 then goto L2caf36;
  #L2caf34.  return v0 @kind object;
  #L2caf36.  v0:= new `java.lang.NullPointerException`;
  #L2caf3a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2caf40.  v1:= temp @kind object;
  #L2caf42.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caf48.  throw v0;
}
procedure `void` `assertNotUiThread`(`java.lang.String` v2 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertNotUiThread:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb144.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2cb14a.  v0:= temp @kind object;
  #L2cb14c.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2cb152.  v1:= temp @kind object;
  #L2cb154.  if v0 == v1 then goto L2cb15a;
  #L2cb158.  return @kind void;
  #L2cb15a.  v0:= new `java.lang.IllegalStateException`;
  #L2cb15e.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb164.  throw v0;
}
procedure `void` `assertUiThread`(`java.lang.String` v2 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.assertUiThread:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb178.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L2cb17e.  v0:= temp @kind object;
  #L2cb180.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L2cb186.  v1:= temp @kind object;
  #L2cb188.  if v0 != v1 then goto L2cb18e;
  #L2cb18c.  return @kind void;
  #L2cb18e.  v0:= new `java.lang.IllegalStateException`;
  #L2cb192.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb198.  throw v0;
}
procedure `java.lang.String` `checkNonEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNonEmpty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cafb0.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2cafb6.  v0:= temp;
  #L2cafb8.  if v0 != 0 then goto L2cafbe;
  #L2cafbc.  return v1 @kind object;
  #L2cafbe.  v1:= new `java.lang.IllegalArgumentException`;
  #L2cafc2.  v0:= "Given String is empty or null" @kind object;
  #L2cafc6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cafcc.  throw v1;
}
procedure `java.lang.String` `checkNonEmpty`(`java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNonEmpty:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cafe0.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L2cafe6.  v0:= temp;
  #L2cafe8.  if v0 != 0 then goto L2cafee;
  #L2cafec.  return v1 @kind object;
  #L2cafee.  v1:= new `java.lang.IllegalArgumentException`;
  #L2caff2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2caff8.  v2:= temp @kind object;
  #L2caffa.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb000.  throw v1;
}
procedure `java.lang.Object` `checkNonNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNonNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2caf5c.  if v1 == 0 then goto L2caf62;
  #L2caf60.  return v1 @kind object;
  #L2caf62.  v1:= new `java.lang.NullPointerException`;
  #L2caf66.  v0:= "Null reference" @kind object;
  #L2caf6a.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caf70.  throw v1;
}
procedure `java.lang.Object` `checkNonNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNonNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2caf84.  if v0 == 0 then goto L2caf8a;
  #L2caf88.  return v0 @kind object;
  #L2caf8a.  v0:= new `java.lang.NullPointerException`;
  #L2caf8e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2caf94.  v1:= temp @kind object;
  #L2caf96.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caf9c.  throw v0;
}
procedure `int` `checkNonZero`(`int` v1 ) @signature `Lcom/huawei/hms/utils/Checker;.checkNonZero:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2caeb4.  if v1 == 0 then goto L2caeba;
  #L2caeb8.  return v1;
  #L2caeba.  v1:= new `java.lang.IllegalArgumentException`;
  #L2caebe.  v0:= "Given Integer is zero" @kind object;
  #L2caec2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caec8.  throw v1;
}
procedure `int` `checkNonZero`(`int` v0 , `java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNonZero:(ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2caedc.  if v0 == 0 then goto L2caee2;
  #L2caee0.  return v0;
  #L2caee2.  v0:= new `java.lang.IllegalArgumentException`;
  #L2caee6.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2caeec.  v1:= temp @kind object;
  #L2caeee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2caef4.  throw v0;
}
procedure `long` `checkNotZero`(`long` v3 ) @signature `Lcom/huawei/hms/utils/Checker;.checkNotZero:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2cb014.  v0:= 0L;
  #L2cb018.  v2:= lcmp(v3, v0);
  #L2cb01c.  if v2 == 0 then goto L2cb022;
  #L2cb020.  return v3 @kind wide;
  #L2cb022.  v3:= new `java.lang.IllegalArgumentException`;
  #L2cb026.  v4:= "Given Long is zero" @kind object;
  #L2cb02a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb030.  throw v3;
}
procedure `long` `checkNotZero`(`long` v3 , `java.lang.String` v5 @kind object) @signature `Lcom/huawei/hms/utils/Checker;.checkNotZero:(JLjava/lang/String;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2cb044.  v0:= 0L;
  #L2cb048.  v2:= lcmp(v3, v0);
  #L2cb04c.  if v2 == 0 then goto L2cb052;
  #L2cb050.  return v3 @kind wide;
  #L2cb052.  v3:= new `java.lang.IllegalArgumentException`;
  #L2cb056.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2cb05c.  v4:= temp @kind object;
  #L2cb05e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cb064.  throw v3;
}
