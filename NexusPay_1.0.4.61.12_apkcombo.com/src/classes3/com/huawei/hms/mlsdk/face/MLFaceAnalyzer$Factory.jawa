record `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` @kind class @AccessFlag PUBLIC {
  `com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @AccessFlag PRIVATE;
  `android.content.Context` `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.mContext` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v1 @kind this, `android.content.Context` v2 @kind object) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.<init>:(Landroid/content/Context;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L240b68.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L240b6e.  v0:= new `com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory`;
  #L240b72.  call `<init>`(v0) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.<init>:()V` @kind direct;
  #L240b78.  v1.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` := v0 @kind object;
  #L240b7c.  v1.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.mContext` @type ^`android.content.Context` := v2 @kind object;
  #L240b80.  return @kind void;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer` `create`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v4 @kind this) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.create:()Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L240940.  v0:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240944.  call temp:= `create`(v0) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.create:()Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting;` @kind virtual;
  #L24094a.  v0:= temp @kind object;
  #L24094c.  call temp:= `getInstance`() @signature `Lcom/huawei/hms/mlsdk/face/internal/client/RemoteFaceDetector;.getInstance:()Lcom/huawei/hms/mlsdk/face/internal/client/RemoteFaceDetector;` @kind static;
  #L240952.  v1:= temp @kind object;
  #L240954.  v2:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.mContext` @type ^`android.content.Context` @kind object;
  #L240958.  call `prepare`(v1, v2) @signature `Lcom/huawei/hms/mlsdk/face/internal/client/RemoteFaceDetector;.prepare:(Landroid/content/Context;)V` @kind virtual;
  #L24095e.  v1:= new `com.huawei.hms.mlsdk.face.MLFaceAnalyzer`;
  #L240962.  v2:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.mContext` @type ^`android.content.Context` @kind object;
  #L240966.  v3:= 0I;
  #L240968.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer;.<init>:(Landroid/content/Context;Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting;Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$1;)V` @kind direct;
  #L24096e.  return v1 @kind object;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setFeatureType`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v3 @kind this, `int` v4 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setFeatureType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L240980.  v0:= 2I;
  #L240982.  if v4 == v0 then goto L2409bc;
  #L240986.  v0:= 1I;
  #L240988.  if v4 != v0 then goto L24098e;
  #L24098c.  goto L2409bc;
  #L24098e.  v0:= new `java.lang.IllegalArgumentException`;
  #L240992.  v1:= new `java.lang.StringBuilder`;
  #L240996.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24099c.  v2:= "Invalid feature type: " @kind object;
  #L2409a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2409a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2409ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2409b2.  v4:= temp @kind object;
  #L2409b4.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2409ba.  throw v0;
  #L2409bc.  v0:= v3.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L2409c0.  call temp:= `setFeatureType`(v0, v4) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setFeatureType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L2409c6.  return v3 @kind object;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setKeyPointType`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v4 @kind this, `int` v5 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setKeyPointType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2409d8.  v0:= 2I;
  #L2409da.  v1:= 1I;
  #L2409dc.  if v5 == 0 then goto L240a18;
  #L2409e0.  if v5 == v1 then goto L240a18;
  #L2409e4.  if v5 != v0 then goto L2409ea;
  #L2409e8.  goto L240a18;
  #L2409ea.  v0:= new `java.lang.IllegalArgumentException`;
  #L2409ee.  v1:= new `java.lang.StringBuilder`;
  #L2409f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2409f8.  v2:= "Invalid keyPointType type: " @kind object;
  #L2409fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L240a02.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L240a08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L240a0e.  v5:= temp @kind object;
  #L240a10.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L240a16.  throw v0;
  #L240a18.  v2:= 3I;
  #L240a1a.  v3:= 0I;
  #L240a1c.  if v5 != 0 then goto L240a36;
  #L240a20.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a24.  call temp:= `setKeyPointType`(v5, v3) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setKeyPointType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a2a.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a2e.  call temp:= `setShapeType`(v5, v2) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setShapeType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a34.  goto L240a64;
  #L240a36.  if v5 != v1 then goto L240a50;
  #L240a3a.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a3e.  call temp:= `setKeyPointType`(v5, v1) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setKeyPointType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a44.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a48.  call temp:= `setShapeType`(v5, v2) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setShapeType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a4e.  goto L240a64;
  #L240a50.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a54.  call temp:= `setKeyPointType`(v5, v3) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setKeyPointType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a5a.  v5:= v4.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a5e.  call temp:= `setShapeType`(v5, v0) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setShapeType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a64.  return v4 @kind object;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setMaxSizeFaceOnly`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v1 @kind this, `boolean` v2 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setMaxSizeFaceOnly:(Z)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L240a78.  v0:= v1.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240a7c.  call temp:= `setMaxSizeFaceOnly`(v0, v2) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setMaxSizeFaceOnly:(Z)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240a82.  return v1 @kind object;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setMinFaceProportion`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v3 @kind this, `float` v4 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setMinFaceProportion:(F)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L240a94.  v0:= 0I;
  #L240a96.  v0:= fcmpl(v4, v0);
  #L240a9a.  if v0 < 0 then goto L240ab6;
  #L240a9e.  v0:= 1.0F;
  #L240aa2.  v0:= fcmpg(v4, v0);
  #L240aa6.  if v0 > 0 then goto L240ab6;
  #L240aaa.  v0:= v3.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240aae.  call temp:= `setMinFaceProportion`(v0, v4) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setMinFaceProportion:(F)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240ab4.  return v3 @kind object;
  #L240ab6.  v0:= new `java.lang.IllegalArgumentException`;
  #L240aba.  v1:= new `java.lang.StringBuilder`;
  #L240abe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L240ac4.  v2:= "Invalid minimum proportional: " @kind object;
  #L240ac8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L240ace.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L240ad4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L240ada.  v4:= temp @kind object;
  #L240adc.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L240ae2.  throw v0;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setPerformanceType`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v3 @kind this, `int` v4 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setPerformanceType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L240af4.  v0:= 1I;
  #L240af6.  if v4 == v0 then goto L240b30;
  #L240afa.  v0:= 2I;
  #L240afc.  if v4 != v0 then goto L240b02;
  #L240b00.  goto L240b30;
  #L240b02.  v0:= new `java.lang.IllegalArgumentException`;
  #L240b06.  v1:= new `java.lang.StringBuilder`;
  #L240b0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L240b10.  v2:= "Invalid performance type: " @kind object;
  #L240b14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L240b1a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L240b20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L240b26.  v4:= temp @kind object;
  #L240b28.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L240b2e.  throw v0;
  #L240b30.  v0:= v3.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240b34.  call temp:= `setPerformanceType`(v0, v4) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setPerformanceType:(I)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240b3a.  return v3 @kind object;
}
procedure `com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` `setTracingAllowed`(`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory` v1 @kind this, `boolean` v2 ) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;.setTracingAllowed:(Z)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzer$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L240b4c.  v0:= v1.`com.huawei.hms.mlsdk.face.MLFaceAnalyzer$Factory.factory` @type ^`com.huawei.hms.mlsdk.face.MLFaceAnalyzerSetting$Factory` @kind object;
  #L240b50.  call temp:= `setTracingAllowed`(v0, v2) @signature `Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;.setTracingAllowed:(Z)Lcom/huawei/hms/mlsdk/face/MLFaceAnalyzerSetting$Factory;` @kind virtual;
  #L240b56.  return v1 @kind object;
}
