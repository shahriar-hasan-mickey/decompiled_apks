record `com.huawei.hms.common.Preconditions` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.huawei.hms.common.Preconditions` v2 @kind this) @signature `Lcom/huawei/hms/common/Preconditions;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1f39d8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1f39de.  v0:= new `java.lang.AssertionError`;
  #L1f39e2.  v1:= "illegal Argument" @kind object;
  #L1f39e6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1f39ec.  throw v0;
}
procedure `void` `checkArgument`(`boolean` v0 ) @signature `Lcom/huawei/hms/common/Preconditions;.checkArgument:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f3a00.  if v0 == 0 then goto L1f3a06;
  #L1f3a04.  return @kind void;
  #L1f3a06.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f3a0a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1f3a10.  throw v0;
}
procedure `void` `checkArgument`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkArgument:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f3a24.  if v0 == 0 then goto L1f3a2a;
  #L1f3a28.  return @kind void;
  #L1f3a2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f3a2e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f3a34.  v1:= temp @kind object;
  #L1f3a36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3a3c.  throw v0;
}
procedure `void` `checkArgument`(`boolean` v1 , `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkArgument:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3a50.  if v1 == 0 then goto L1f3a56;
  #L1f3a54.  return @kind void;
  #L1f3a56.  v1:= new `java.lang.IllegalArgumentException`;
  #L1f3a5a.  v0:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L1f3a5e.  call temp:= `format`(v0, v2, v3) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f3a64.  v2:= temp @kind object;
  #L1f3a66.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3a6c.  throw v1;
}
procedure `void` `checkHandlerThread`(`android.os.Handler` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkHandlerThread:(Landroid/os/Handler;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3a80.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L1f3a86.  v0:= temp @kind object;
  #L1f3a88.  call temp:= `getLooper`(v1) @signature `Landroid/os/Handler;.getLooper:()Landroid/os/Looper;` @kind virtual;
  #L1f3a8e.  v1:= temp @kind object;
  #L1f3a90.  if v0 != v1 then goto L1f3a96;
  #L1f3a94.  return @kind void;
  #L1f3a96.  v1:= new `java.lang.IllegalStateException`;
  #L1f3a9a.  v0:= "The given thread is not the current thread." @kind object;
  #L1f3a9e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3aa4.  throw v1;
}
procedure `void` `checkMainThread`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkMainThread:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3ab8.  call temp:= `isMainThread`() @signature `Lcom/huawei/hms/common/Preconditions;.isMainThread:()Z` @kind static;
  #L1f3abe.  v0:= temp;
  #L1f3ac0.  if v0 == 0 then goto L1f3ac6;
  #L1f3ac4.  return @kind void;
  #L1f3ac6.  v0:= new `java.lang.IllegalStateException`;
  #L1f3aca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3ad0.  throw v0;
}
procedure `java.lang.String` `checkNotEmpty`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotEmpty:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3910.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1f3916.  v0:= temp;
  #L1f3918.  if v0 != 0 then goto L1f391e;
  #L1f391c.  return v1 @kind object;
  #L1f391e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1f3922.  v0:= "The input parameter is empty." @kind object;
  #L1f3926.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f392c.  throw v1;
}
procedure `java.lang.String` `checkNotEmpty`(`java.lang.String` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotEmpty:(Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3940.  call temp:= `isEmpty`(v1) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1f3946.  v0:= temp;
  #L1f3948.  if v0 != 0 then goto L1f394e;
  #L1f394c.  return v1 @kind object;
  #L1f394e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1f3952.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f3958.  v2:= temp @kind object;
  #L1f395a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3960.  throw v1;
}
procedure `void` `checkNotMainThread`() @signature `Lcom/huawei/hms/common/Preconditions;.checkNotMainThread:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3ae4.  v0:= "The given thread is main thread." @kind object;
  #L1f3ae8.  call `checkNotMainThread`(v0) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotMainThread:(Ljava/lang/String;)V` @kind static;
  #L1f3aee.  return @kind void;
}
procedure `void` `checkNotMainThread`(`java.lang.String` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotMainThread:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3b00.  call temp:= `isMainThread`() @signature `Lcom/huawei/hms/common/Preconditions;.isMainThread:()Z` @kind static;
  #L1f3b06.  v0:= temp;
  #L1f3b08.  if v0 != 0 then goto L1f3b0e;
  #L1f3b0c.  return @kind void;
  #L1f3b0e.  v0:= new `java.lang.IllegalStateException`;
  #L1f3b12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3b18.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f38bc.  if v1 == 0 then goto L1f38c2;
  #L1f38c0.  return v1 @kind object;
  #L1f38c2.  v1:= new `java.lang.NullPointerException`;
  #L1f38c6.  v0:= "The input parameter is null." @kind object;
  #L1f38ca.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f38d0.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f38e4.  if v0 == 0 then goto L1f38ea;
  #L1f38e8.  return v0 @kind object;
  #L1f38ea.  v0:= new `java.lang.NullPointerException`;
  #L1f38ee.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f38f4.  v1:= temp @kind object;
  #L1f38f6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f38fc.  throw v0;
}
procedure `int` `checkNotZero`(`int` v1 ) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotZero:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3868.  if v1 == 0 then goto L1f386e;
  #L1f386c.  return v1;
  #L1f386e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1f3872.  v0:= "The input parameter is 0." @kind object;
  #L1f3876.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f387c.  throw v1;
}
procedure `int` `checkNotZero`(`int` v0 , `java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotZero:(ILjava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f3890.  if v0 == 0 then goto L1f3896;
  #L1f3894.  return v0;
  #L1f3896.  v0:= new `java.lang.IllegalArgumentException`;
  #L1f389a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f38a0.  v1:= temp @kind object;
  #L1f38a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f38a8.  throw v0;
}
procedure `long` `checkNotZero`(`long` v3 ) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotZero:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f3974.  v0:= 0L;
  #L1f3978.  v2:= lcmp(v3, v0);
  #L1f397c.  if v2 == 0 then goto L1f3982;
  #L1f3980.  return v3 @kind wide;
  #L1f3982.  v3:= new `java.lang.IllegalArgumentException`;
  #L1f3986.  v4:= "The input parameter is 0." @kind object;
  #L1f398a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3990.  throw v3;
}
procedure `long` `checkNotZero`(`long` v3 , `java.lang.Object` v5 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkNotZero:(JLjava/lang/Object;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1f39a4.  v0:= 0L;
  #L1f39a8.  v2:= lcmp(v3, v0);
  #L1f39ac.  if v2 == 0 then goto L1f39b2;
  #L1f39b0.  return v3 @kind wide;
  #L1f39b2.  v3:= new `java.lang.IllegalArgumentException`;
  #L1f39b6.  call temp:= `valueOf`(v5) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f39bc.  v4:= temp @kind object;
  #L1f39be.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f39c4.  throw v3;
}
procedure `void` `checkState`(`boolean` v0 ) @signature `Lcom/huawei/hms/common/Preconditions;.checkState:(Z)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f3b2c.  if v0 == 0 then goto L1f3b32;
  #L1f3b30.  return @kind void;
  #L1f3b32.  v0:= new `java.lang.IllegalStateException`;
  #L1f3b36.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1f3b3c.  throw v0;
}
procedure `void` `checkState`(`boolean` v0 , `java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkState:(ZLjava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1f3b50.  if v0 == 0 then goto L1f3b56;
  #L1f3b54.  return @kind void;
  #L1f3b56.  v0:= new `java.lang.IllegalStateException`;
  #L1f3b5a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f3b60.  v1:= temp @kind object;
  #L1f3b62.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3b68.  throw v0;
}
procedure `void` `checkState`(`boolean` v1 , `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lcom/huawei/hms/common/Preconditions;.checkState:(ZLjava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1f3b7c.  if v1 == 0 then goto L1f3b82;
  #L1f3b80.  return @kind void;
  #L1f3b82.  v1:= new `java.lang.IllegalStateException`;
  #L1f3b86.  v0:= `@@java.util.Locale.ROOT` @type ^`java.util.Locale` @kind object;
  #L1f3b8a.  call temp:= `format`(v0, v2, v3) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1f3b90.  v2:= temp @kind object;
  #L1f3b92.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1f3b98.  throw v1;
}
procedure `boolean` `isMainThread`() @signature `Lcom/huawei/hms/common/Preconditions;.isMainThread:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1f383c.  call temp:= `getMainLooper`() @signature `Landroid/os/Looper;.getMainLooper:()Landroid/os/Looper;` @kind static;
  #L1f3842.  v0:= temp @kind object;
  #L1f3844.  call temp:= `myLooper`() @signature `Landroid/os/Looper;.myLooper:()Landroid/os/Looper;` @kind static;
  #L1f384a.  v1:= temp @kind object;
  #L1f384c.  if v0 != v1 then goto L1f3854;
  #L1f3850.  v0:= 1I;
  #L1f3852.  goto L1f3856;
  #L1f3854.  v0:= 0I;
  #L1f3856.  return v0;
}
