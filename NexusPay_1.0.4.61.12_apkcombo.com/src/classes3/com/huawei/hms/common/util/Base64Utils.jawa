record `com.huawei.hms.common.util.Base64Utils` @kind class @AccessFlag PUBLIC_FINAL {
}
global `int` `@@com.huawei.hms.common.util.Base64Utils.FLAG_DEFAULT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.huawei.hms.common.util.Base64Utils.FLAG_URL` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.huawei.hms.common.util.Base64Utils.FLAG_URL_NOPADDING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.huawei.hms.common.util.Base64Utils.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.huawei.hms.common.util.Base64Utils` v0 @kind this) @signature `Lcom/huawei/hms/common/util/Base64Utils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1ff628.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ff62e.  return @kind void;
}
procedure `byte`[] `decode`(`java.lang.String` v3 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ff468.  v0:= 0I;
  #L1ff46a.  v1:= new `byte`[v0];
  #L1ff46e.  if v3 == 0 then goto L1ff4b2;
  #L1ff472.  call temp:= `decode`(v3, v0) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L1ff478.  v3:= temp @kind object;
  #L1ff47a.  return v3 @kind object;
  #L1ff47c.  v3:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1ff47e.  v0:= new `java.lang.StringBuilder`;
  #L1ff482.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ff488.  v2:= "decode failed : " @kind object;
  #L1ff48c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff492.  call temp:= `getMessage`(v3) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ff498.  v3:= temp @kind object;
  #L1ff49a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff4a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ff4a6.  v3:= temp @kind object;
  #L1ff4a8.  v0:= "Base64Utils" @kind object;
  #L1ff4ac.  call `e`(v0, v3) @signature `Lcom/huawei/hms/support/log/HMSLog;.e:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1ff4b2.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1ff472..L1ff47a] goto L1ff47c;
}
procedure `byte`[] `decodeUrlSafe`(`java.lang.String` v3 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.decodeUrlSafe:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ff4d4.  v0:= 0I;
  #L1ff4d6.  v0:= new `byte`[v0];
  #L1ff4da.  if v3 == 0 then goto L1ff522;
  #L1ff4de.  v1:= 10I;
  #L1ff4e2.  call temp:= `decode`(v3, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L1ff4e8.  v3:= temp @kind object;
  #L1ff4ea.  return v3 @kind object;
  #L1ff4ec.  v3:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1ff4ee.  v1:= new `java.lang.StringBuilder`;
  #L1ff4f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ff4f8.  v2:= "decodeUrlSafe failed : " @kind object;
  #L1ff4fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff502.  call temp:= `getMessage`(v3) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ff508.  v3:= temp @kind object;
  #L1ff50a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff510.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ff516.  v3:= temp @kind object;
  #L1ff518.  v1:= "Base64Utils" @kind object;
  #L1ff51c.  call `e`(v1, v3) @signature `Lcom/huawei/hms/support/log/HMSLog;.e:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1ff522.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1ff4e2..L1ff4ea] goto L1ff4ec;
}
procedure `byte`[] `decodeUrlSafeNoPadding`(`java.lang.String` v3 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.decodeUrlSafeNoPadding:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ff544.  v0:= 0I;
  #L1ff546.  v0:= new `byte`[v0];
  #L1ff54a.  if v3 == 0 then goto L1ff592;
  #L1ff54e.  v1:= 11I;
  #L1ff552.  call temp:= `decode`(v3, v1) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L1ff558.  v3:= temp @kind object;
  #L1ff55a.  return v3 @kind object;
  #L1ff55c.  v3:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1ff55e.  v1:= new `java.lang.StringBuilder`;
  #L1ff562.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ff568.  v2:= "decodeUrlSafeNoPadding failed : " @kind object;
  #L1ff56c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff572.  call temp:= `getMessage`(v3) @signature `Ljava/lang/IllegalArgumentException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ff578.  v3:= temp @kind object;
  #L1ff57a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ff580.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ff586.  v3:= temp @kind object;
  #L1ff588.  v1:= "Base64Utils" @kind object;
  #L1ff58c.  call `e`(v1, v3) @signature `Lcom/huawei/hms/support/log/HMSLog;.e:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L1ff592.  return v0 @kind object;
  catch `java.lang.IllegalArgumentException` @[L1ff552..L1ff55a] goto L1ff55c;
}
procedure `java.lang.String` `encode`(`byte`[] v1 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ff5b4.  if v1 == 0 then goto L1ff5c4;
  #L1ff5b8.  v0:= 0I;
  #L1ff5ba.  call temp:= `encodeToString`(v1, v0) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L1ff5c0.  v1:= temp @kind object;
  #L1ff5c2.  return v1 @kind object;
  #L1ff5c4.  v1:= 0I;
  #L1ff5c6.  return v1 @kind object;
}
procedure `java.lang.String` `encodeUrlSafe`(`byte`[] v1 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.encodeUrlSafe:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ff5d8.  if v1 == 0 then goto L1ff5ea;
  #L1ff5dc.  v0:= 10I;
  #L1ff5e0.  call temp:= `encodeToString`(v1, v0) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L1ff5e6.  v1:= temp @kind object;
  #L1ff5e8.  return v1 @kind object;
  #L1ff5ea.  v1:= 0I;
  #L1ff5ec.  return v1 @kind object;
}
procedure `java.lang.String` `encodeUrlSafeNoPadding`(`byte`[] v1 @kind object) @signature `Lcom/huawei/hms/common/util/Base64Utils;.encodeUrlSafeNoPadding:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ff600.  if v1 == 0 then goto L1ff612;
  #L1ff604.  v0:= 11I;
  #L1ff608.  call temp:= `encodeToString`(v1, v0) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L1ff60e.  v1:= temp @kind object;
  #L1ff610.  return v1 @kind object;
  #L1ff612.  v1:= 0I;
  #L1ff614.  return v1 @kind object;
}
