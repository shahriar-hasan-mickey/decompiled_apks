record `com.huawei.hms.scankit.aiscan.common.m` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `com.huawei.hms.scankit.aiscan.common.m.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.aiscan.common.m.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.aiscan.common.m` v0 @kind this, `int` v1 , `int` v2 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.<init>:(II)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L25d8cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L25d8d2.  v0.`com.huawei.hms.scankit.aiscan.common.m.a` @type ^`int` := v1;
  #L25d8d6.  v0.`com.huawei.hms.scankit.aiscan.common.m.b` @type ^`int` := v2;
  #L25d8da.  return @kind void;
}
procedure `int` `a`(`com.huawei.hms.scankit.aiscan.common.m` v1 @kind this) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25d7f4.  v0:= v1.`com.huawei.hms.scankit.aiscan.common.m.b` @type ^`int`;
  #L25d7f8.  return v0;
}
procedure `com.huawei.hms.scankit.aiscan.common.m` `a`(`int` v0 , `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:(IIII)Lcom/huawei/hms/scankit/aiscan/common/m;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `a`(`int` v0 , `byte`[] v1 @kind object) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:(I[B)[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.huawei.hms.scankit.aiscan.common.m` `b`(`int` v0 , `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.b:(IIII)Lcom/huawei/hms/scankit/aiscan/common/m;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `b`() @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.b:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `c`(`com.huawei.hms.scankit.aiscan.common.m` v1 @kind this) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.c:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L25d80c.  v0:= v1.`com.huawei.hms.scankit.aiscan.common.m.a` @type ^`int`;
  #L25d810.  return v0;
}
procedure `java.lang.String` `toString`(`com.huawei.hms.scankit.aiscan.common.m` v7 @kind this) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25d824.  v0:= v7.`com.huawei.hms.scankit.aiscan.common.m.a` @type ^`int`;
  #L25d828.  v1:= new `byte`[v0];
  #L25d82c.  v2:= new `java.lang.StringBuilder`;
  #L25d830.  v3:= v7.`com.huawei.hms.scankit.aiscan.common.m.b` @type ^`int`;
  #L25d834.  v0:= v0 + 1;
  #L25d838.  v3:= v3 * v0 @kind int;
  #L25d83c.  call `<init>`(v2, v3) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L25d842.  v0:= 0I;
  #L25d844.  v3:= 0I;
  #L25d846.  v4:= v7.`com.huawei.hms.scankit.aiscan.common.m.b` @type ^`int`;
  #L25d84a.  if v3 >= v4 then goto L25d8b2;
  #L25d84e.  call temp:= `a`(v7, v3, v1) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:(I[B)[B` @kind virtual;
  #L25d854.  v1:= temp @kind object;
  #L25d856.  v4:= 0I;
  #L25d858.  v5:= v7.`com.huawei.hms.scankit.aiscan.common.m.a` @type ^`int`;
  #L25d85c.  if v4 >= v5 then goto L25d8a2;
  #L25d860.  v5:= v1[v4] @kind byte;
  #L25d864.  v5:= v5 ^& 255;
  #L25d868.  v6:= 64I;
  #L25d86c.  if v5 >= v6 then goto L25d876;
  #L25d870.  v5:= 35I;
  #L25d874.  goto L25d896;
  #L25d876.  v6:= 128I;
  #L25d87a.  if v5 >= v6 then goto L25d884;
  #L25d87e.  v5:= 43I;
  #L25d882.  goto L25d896;
  #L25d884.  v6:= 192I;
  #L25d888.  if v5 >= v6 then goto L25d892;
  #L25d88c.  v5:= 46I;
  #L25d890.  goto L25d896;
  #L25d892.  v5:= 32I;
  #L25d896.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L25d89c.  v4:= v4 + 1;
  #L25d8a0.  goto L25d858;
  #L25d8a2.  v4:= 10I;
  #L25d8a6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L25d8ac.  v3:= v3 + 1;
  #L25d8b0.  goto L25d846;
  #L25d8b2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25d8b8.  v0:= temp @kind object;
  #L25d8ba.  return v0 @kind object;
}
