record `com.huawei.hms.scankit.aiscan.common.s` @kind class @AccessFlag PUBLIC_FINAL extends `com.huawei.hms.scankit.aiscan.common.m` @kind class {
  `byte`[] `com.huawei.hms.scankit.aiscan.common.s.c` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.aiscan.common.s.d` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.aiscan.common.s.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.aiscan.common.s.f` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.aiscan.common.s.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.aiscan.common.s` v4 @kind this, `int` v5 , `int` v6 , `int`[] v7 @kind object) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.<init>:(II[I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25f074.  call `<init>`(v4, v5, v6) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.<init>:(II)V` @kind direct;
  #L25f07a.  v4.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int` := v5;
  #L25f07e.  v4.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int` := v6;
  #L25f082.  v0:= 0I;
  #L25f084.  v4.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int` := v0;
  #L25f088.  v4.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int` := v0;
  #L25f08c.  v5:= v5 * v6 @kind int;
  #L25f090.  v6:= new `byte`[v5];
  #L25f094.  v4.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] := v6 @kind object;
  #L25f098.  if v0 >= v5 then goto L25f0e8;
  #L25f09c.  v6:= v7[v0];
  #L25f0a0.  v1:= -16777216I;
  #L25f0a4.  v1:= v1 ^& v6 @kind int;
  #L25f0a6.  if v1 != 0 then goto L25f0ac;
  #L25f0aa.  v6:= -1I;
  #L25f0ac.  v1:= v4.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25f0b0.  v2:= v6 ^> 16;
  #L25f0b4.  v2:= v2 ^& 255;
  #L25f0b8.  v2:= v2 * 306;
  #L25f0bc.  v3:= v6 ^> 8;
  #L25f0c0.  v3:= v3 ^& 255;
  #L25f0c4.  v3:= v3 * 601;
  #L25f0c8.  v2:= v2 + v3 @kind int;
  #L25f0ca.  v6:= v6 ^& 255;
  #L25f0ce.  v6:= v6 * 117;
  #L25f0d2.  v2:= v2 + v6 @kind int;
  #L25f0d4.  v2:= v2 + 512;
  #L25f0d8.  v6:= v2 ^> 10;
  #L25f0dc.  v6:= (`byte`) v6 @kind i2b;
  #L25f0de.  v1[v0]:= v6 @kind byte;
  #L25f0e2.  v0:= v0 + 1;
  #L25f0e6.  goto L25f098;
  #L25f0e8.  return @kind void;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.aiscan.common.s` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `int` v4 , `int` v5 , `int` v6 , `int` v7 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.<init>:([BIIIIII)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L25f010.  call `<init>`(v0, v6, v7) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.<init>:(II)V` @kind direct;
  #L25f016.  v6:= v6 + v4 @kind int;
  #L25f018.  if v6 > v2 then goto L25f038;
  #L25f01c.  v7:= v7 + v5 @kind int;
  #L25f01e.  if v7 > v3 then goto L25f038;
  #L25f022.  v0.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] := v1 @kind object;
  #L25f026.  v0.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int` := v2;
  #L25f02a.  v0.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int` := v3;
  #L25f02e.  v0.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int` := v4;
  #L25f032.  v0.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int` := v5;
  #L25f036.  return @kind void;
  #L25f038.  v1:= new `java.lang.IllegalArgumentException`;
  #L25f03c.  v2:= "Crop rectangle does not fit within image data." @kind object;
  #L25f040.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25f046.  throw v1;
  #L25f048.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L25f04a.  throw v1;
  catch `java.lang.Exception` @[L25f038..L25f03c] goto L25f048;
  catch `java.lang.Exception` @[L25f040..L25f048] goto L25f048;
}
procedure `com.huawei.hms.scankit.aiscan.common.m` `a`(`com.huawei.hms.scankit.aiscan.common.s` v9 @kind this, `int` v10 , `int` v11 , `int` v12 , `int` v13 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.a:(IIII)Lcom/huawei/hms/scankit/aiscan/common/m;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L25ef24.  v8:= new `com.huawei.hms.scankit.aiscan.common.s`;
  #L25ef28.  v1:= v9.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25ef2c.  v2:= v9.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25ef30.  v3:= v9.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int`;
  #L25ef34.  v0:= v9.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int`;
  #L25ef38.  v4:= v0 + v10 @kind int;
  #L25ef3c.  v10:= v9.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int`;
  #L25ef40.  v5:= v10 + v11 @kind int;
  #L25ef44.  v0:= v8 @kind object;
  #L25ef46.  v6:= v12;
  #L25ef48.  v7:= v13;
  #L25ef4a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.<init>:([BIIIIII)V` @kind direct;
  #L25ef50.  return v8 @kind object;
}
procedure `byte`[] `a`(`com.huawei.hms.scankit.aiscan.common.s` v3 @kind this, `int` v4 , `byte`[] v5 @kind object) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.a:(I[B)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L25edfc.  if v4 < 0 then goto L25ee44;
  #L25ee00.  call temp:= `a`(v3) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:()I` @kind virtual;
  #L25ee06.  v0:= temp;
  #L25ee08.  if v4 >= v0 then goto L25ee44;
  #L25ee0c.  call temp:= `c`(v3) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.c:()I` @kind virtual;
  #L25ee12.  v0:= temp;
  #L25ee14.  if v5 == 0 then goto L25ee1e;
  #L25ee18.  v1:= length @variable v5;
  #L25ee1a.  if v1 >= v0 then goto L25ee22;
  #L25ee1e.  v5:= new `byte`[v0];
  #L25ee22.  v1:= v3.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int`;
  #L25ee26.  v4:= v4 + v1 @kind int;
  #L25ee28.  v1:= v3.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25ee2c.  v4:= v4 * v1 @kind int;
  #L25ee30.  v1:= v3.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int`;
  #L25ee34.  v4:= v4 + v1 @kind int;
  #L25ee36.  v1:= v3.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25ee3a.  v2:= 0I;
  #L25ee3c.  call `arraycopy`(v1, v4, v5, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25ee42.  return v5 @kind object;
  #L25ee44.  v5:= new `java.lang.IllegalArgumentException`;
  #L25ee48.  v0:= new `java.lang.StringBuilder`;
  #L25ee4c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25ee52.  v1:= "Requested row is outside the image: " @kind object;
  #L25ee56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25ee5c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L25ee62.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L25ee68.  v4:= temp @kind object;
  #L25ee6a.  call `<init>`(v5, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25ee70.  throw v5;
  #L25ee72.  v4:= Exception @type ^`java.lang.Exception` @kind object;
  #L25ee74.  throw v4;
  catch `java.lang.Exception` @[L25ee44..L25ee52] goto L25ee72;
  catch `java.lang.Exception` @[L25ee56..L25ee72] goto L25ee72;
}
procedure `com.huawei.hms.scankit.aiscan.common.m` `b`(`com.huawei.hms.scankit.aiscan.common.s` v10 @kind this, `int` v11 , `int` v12 , `int` v13 , `int` v14 ) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.b:(IIII)Lcom/huawei/hms/scankit/aiscan/common/m;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L25ef64.  v0:= v10.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int`;
  #L25ef68.  v1:= v10.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25ef6c.  v2:= 0I;
  #L25ef6e.  if v0 <= v1 then goto L25efc0;
  #L25ef72.  v0:= v11 * v12 @kind int;
  #L25ef76.  v1:= new `byte`[v0];
  #L25ef7a.  v0:= v10.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int`;
  #L25ef7e.  if v2 >= v0 then goto L25efa0;
  #L25ef82.  v0:= v10.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25ef86.  v3:= v10.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25ef8a.  v4:= v2 * v3 @kind int;
  #L25ef8e.  v5:= v2 * v11 @kind int;
  #L25ef92.  v5:= v5 + v13 @kind int;
  #L25ef94.  call `arraycopy`(v0, v4, v1, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25ef9a.  v2:= v2 + 1;
  #L25ef9e.  goto L25ef7a;
  #L25efa0.  v9:= new `com.huawei.hms.scankit.aiscan.common.r`;
  #L25efa4.  v4:= v10.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int`;
  #L25efa8.  v5:= v10.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int`;
  #L25efac.  v8:= 0I;
  #L25efae.  v0:= v9 @kind object;
  #L25efb0.  v2:= v11;
  #L25efb2.  v3:= v12;
  #L25efb4.  v6:= v11;
  #L25efb6.  v7:= v12;
  #L25efb8.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/huawei/hms/scankit/aiscan/common/r;.<init>:([BIIIIIIZ)V` @kind direct;
  #L25efbe.  goto L25effc;
  #L25efc0.  v3:= v11 * v12 @kind int;
  #L25efc4.  v3:= new `byte`[v3];
  #L25efc8.  v4:= v10.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25efcc.  v5:= v14 * v11 @kind int;
  #L25efd0.  v0:= v0 * v1 @kind int;
  #L25efd4.  call `arraycopy`(v4, v2, v3, v5, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25efda.  v9:= new `com.huawei.hms.scankit.aiscan.common.r`;
  #L25efde.  v6:= v10.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25efe2.  v4:= v10.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int`;
  #L25efe6.  v5:= v10.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int`;
  #L25efea.  v8:= 0I;
  #L25efec.  v0:= v9 @kind object;
  #L25efee.  v1:= v3 @kind object;
  #L25eff0.  v2:= v6;
  #L25eff2.  v3:= v12;
  #L25eff4.  v7:= v12;
  #L25eff6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/huawei/hms/scankit/aiscan/common/r;.<init>:([BIIIIIIZ)V` @kind direct;
  #L25effc.  return v9 @kind object;
}
procedure `byte`[] `b`(`com.huawei.hms.scankit.aiscan.common.s` v7 @kind this) @signature `Lcom/huawei/hms/scankit/aiscan/common/s;.b:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25eea0.  call temp:= `c`(v7) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.c:()I` @kind virtual;
  #L25eea6.  v0:= temp;
  #L25eea8.  call temp:= `a`(v7) @signature `Lcom/huawei/hms/scankit/aiscan/common/m;.a:()I` @kind virtual;
  #L25eeae.  v1:= temp;
  #L25eeb0.  v2:= v7.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25eeb4.  if v0 != v2 then goto L25eec6;
  #L25eeb8.  v2:= v7.`com.huawei.hms.scankit.aiscan.common.s.e` @type ^`int`;
  #L25eebc.  if v1 != v2 then goto L25eec6;
  #L25eec0.  v0:= v7.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25eec4.  return v0 @kind object;
  #L25eec6.  v2:= v0 * v1 @kind int;
  #L25eeca.  v3:= new `byte`[v2];
  #L25eece.  v4:= v7.`com.huawei.hms.scankit.aiscan.common.s.g` @type ^`int`;
  #L25eed2.  v5:= v7.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25eed6.  v4:= v4 * v5 @kind int;
  #L25eeda.  v6:= v7.`com.huawei.hms.scankit.aiscan.common.s.f` @type ^`int`;
  #L25eede.  v4:= v4 + v6 @kind int;
  #L25eee0.  v6:= 0I;
  #L25eee2.  if v0 != v5 then goto L25eef2;
  #L25eee6.  v0:= v7.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25eeea.  call `arraycopy`(v0, v4, v3, v6, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25eef0.  return v3 @kind object;
  #L25eef2.  if v6 >= v1 then goto L25ef10;
  #L25eef6.  v2:= v6 * v0 @kind int;
  #L25eefa.  v5:= v7.`com.huawei.hms.scankit.aiscan.common.s.c` @type ^`byte`[] @kind object;
  #L25eefe.  call `arraycopy`(v5, v4, v3, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L25ef04.  v2:= v7.`com.huawei.hms.scankit.aiscan.common.s.d` @type ^`int`;
  #L25ef08.  v4:= v4 + v2 @kind int;
  #L25ef0a.  v6:= v6 + 1;
  #L25ef0e.  goto L25eef2;
  #L25ef10.  return v3 @kind object;
}
