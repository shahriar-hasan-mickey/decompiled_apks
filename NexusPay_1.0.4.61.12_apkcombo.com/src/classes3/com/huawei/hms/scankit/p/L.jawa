record `com.huawei.hms.scankit.p.L` @kind class @AccessFlag PUBLIC extends `java.lang.Comparable` @kind interface {
  `float` `com.huawei.hms.scankit.p.L.a` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.b` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.c` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.d` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.e` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.f` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.g` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.h` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.i` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.j` @AccessFlag PRIVATE;
  `float` `com.huawei.hms.scankit.p.L.k` @AccessFlag PRIVATE;
  `com.huawei.hms.scankit.p.w` `com.huawei.hms.scankit.p.L.l` @AccessFlag PUBLIC;
  `float`[] `com.huawei.hms.scankit.p.L.m` @AccessFlag PUBLIC;
  `float` `com.huawei.hms.scankit.p.L.n` @AccessFlag PUBLIC;
  `float` `com.huawei.hms.scankit.p.L.o` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.p` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.q` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.r` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.s` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.t` @AccessFlag PUBLIC;
  `int` `com.huawei.hms.scankit.p.L.u` @AccessFlag PUBLIC;
  `float` `com.huawei.hms.scankit.p.L.v` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.p.L` v2 @kind this, `boolean` v3 , `float` v4 , `float` v5 , `float` v6 , `float` v7 , `float` v8 , `float` v9 , `float` v10 , `float` v11 , `float` v12 , `float` v13 ) @signature `Lcom/huawei/hms/scankit/p/L;.<init>:(ZFFFFFFFFFF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L273a40.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L273a46.  v0:= 5I;
  #L273a48.  v0:= new `float`[v0];
  #L273a4c.  v2.`com.huawei.hms.scankit.p.L.m` @type ^`float`[] := v0 @kind object;
  #L273a50.  v0:= 0I;
  #L273a52.  v2.`com.huawei.hms.scankit.p.L.n` @type ^`float` := v0;
  #L273a56.  v2.`com.huawei.hms.scankit.p.L.o` @type ^`float` := v0;
  #L273a5a.  v1:= 0I;
  #L273a5c.  v2.`com.huawei.hms.scankit.p.L.p` @type ^`int` := v1;
  #L273a60.  v2.`com.huawei.hms.scankit.p.L.q` @type ^`int` := v1;
  #L273a64.  v2.`com.huawei.hms.scankit.p.L.r` @type ^`int` := v1;
  #L273a68.  v2.`com.huawei.hms.scankit.p.L.s` @type ^`int` := v1;
  #L273a6c.  v2.`com.huawei.hms.scankit.p.L.t` @type ^`int` := v1;
  #L273a70.  v2.`com.huawei.hms.scankit.p.L.u` @type ^`int` := v1;
  #L273a74.  v2.`com.huawei.hms.scankit.p.L.v` @type ^`float` := v0;
  #L273a78.  v2.`com.huawei.hms.scankit.p.L.a` @type ^`float` := v4;
  #L273a7c.  v2.`com.huawei.hms.scankit.p.L.b` @type ^`float` := v5;
  #L273a80.  v2.`com.huawei.hms.scankit.p.L.c` @type ^`float` := v6;
  #L273a84.  v2.`com.huawei.hms.scankit.p.L.d` @type ^`float` := v7;
  #L273a88.  v2.`com.huawei.hms.scankit.p.L.e` @type ^`float` := v8;
  #L273a8c.  v2.`com.huawei.hms.scankit.p.L.f` @type ^`float` := v9;
  #L273a90.  v2.`com.huawei.hms.scankit.p.L.k` @type ^`float` := v13;
  #L273a94.  if v3 == 0 then goto L273aa6;
  #L273a98.  v2.`com.huawei.hms.scankit.p.L.g` @type ^`float` := v10;
  #L273a9c.  v2.`com.huawei.hms.scankit.p.L.h` @type ^`float` := v11;
  #L273aa0.  v2.`com.huawei.hms.scankit.p.L.j` @type ^`float` := v12;
  #L273aa4.  goto L273aae;
  #L273aa6.  v2.`com.huawei.hms.scankit.p.L.i` @type ^`float` := v12;
  #L273aaa.  v2.`com.huawei.hms.scankit.p.L.j` @type ^`float` := v11;
  #L273aae.  return @kind void;
}
procedure `float` `a`(`com.huawei.hms.scankit.p.L` v1 @kind this, `float` v2 , `int` v3 , `int` v4 ) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FII)F` @AccessFlag PRIVATE {
    temp;
    v0;

  #L273870.  v3:= (`float`) v3 @kind i2f;
  #L273872.  v0:= fcmpl(v2, v3);
  #L273876.  if v0 <= 0 then goto L27387c;
  #L27387a.  goto L27387e;
  #L27387c.  v2:= v3;
  #L27387e.  v4:= v4 + -1;
  #L273882.  v3:= (`float`) v4 @kind i2f;
  #L273884.  v4:= fcmpg(v2, v3);
  #L273888.  if v4 >= 0 then goto L27388e;
  #L27388c.  goto L273890;
  #L27388e.  v2:= v3;
  #L273890.  return v2;
}
procedure `float` `a`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273858.  v0:= v1.`com.huawei.hms.scankit.p.L.o` @type ^`float`;
  #L27385c.  return v0;
}
procedure `int` `a`(`com.huawei.hms.scankit.p.L` v2 @kind this, `com.huawei.hms.scankit.p.L` v3 @kind object) @signature `Lcom/huawei/hms/scankit/p/L;.a:(Lcom/huawei/hms/scankit/p/L;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2739dc.  call temp:= `g`(v3) @signature `Lcom/huawei/hms/scankit/p/L;.g:()F` @kind virtual;
  #L2739e2.  v0:= temp;
  #L2739e4.  v0:= -v0 @kind float;
  #L2739e6.  call temp:= `h`(v3) @signature `Lcom/huawei/hms/scankit/p/L;.h:()F` @kind virtual;
  #L2739ec.  v3:= temp;
  #L2739ee.  v0:= v0 + v3 @kind float;
  #L2739f0.  call temp:= `g`(v2) @signature `Lcom/huawei/hms/scankit/p/L;.g:()F` @kind virtual;
  #L2739f6.  v3:= temp;
  #L2739f8.  v3:= -v3 @kind float;
  #L2739fa.  call temp:= `h`(v2) @signature `Lcom/huawei/hms/scankit/p/L;.h:()F` @kind virtual;
  #L273a00.  v1:= temp;
  #L273a02.  v3:= v3 + v1 @kind float;
  #L273a04.  call temp:= `compare`(v0, v3) @signature `Ljava/lang/Float;.compare:(FF)I` @kind static;
  #L273a0a.  v3:= temp;
  #L273a0c.  return v3;
}
procedure `void` `a`(`com.huawei.hms.scankit.p.L` v1 @kind this, `float` v2 , `float` v3 ) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273ac0.  v0:= v1.`com.huawei.hms.scankit.p.L.a` @type ^`float`;
  #L273ac4.  v0:= v0 + v2 @kind float;
  #L273ac6.  v1.`com.huawei.hms.scankit.p.L.a` @type ^`float` := v0;
  #L273aca.  v0:= v1.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L273ace.  v0:= v0 + v3 @kind float;
  #L273ad0.  v1.`com.huawei.hms.scankit.p.L.b` @type ^`float` := v0;
  #L273ad4.  v0:= v1.`com.huawei.hms.scankit.p.L.e` @type ^`float`;
  #L273ad8.  v0:= v0 + v2 @kind float;
  #L273ada.  v1.`com.huawei.hms.scankit.p.L.e` @type ^`float` := v0;
  #L273ade.  v2:= v1.`com.huawei.hms.scankit.p.L.f` @type ^`float`;
  #L273ae2.  v2:= v2 + v3 @kind float;
  #L273ae4.  v1.`com.huawei.hms.scankit.p.L.f` @type ^`float` := v2;
  #L273ae8.  return @kind void;
}
procedure `void` `a`(`com.huawei.hms.scankit.p.L` v3 @kind this, `int` v4 , `int` v5 , `float` v6 , `float` v7 ) @signature `Lcom/huawei/hms/scankit/p/L;.a:(IIFF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L273afc.  v0:= v3.`com.huawei.hms.scankit.p.L.a` @type ^`float`;
  #L273b00.  v0:= v0 + v6 @kind float;
  #L273b02.  v3.`com.huawei.hms.scankit.p.L.a` @type ^`float` := v0;
  #L273b06.  v1:= v3.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L273b0a.  v1:= v1 + v7 @kind float;
  #L273b0c.  v3.`com.huawei.hms.scankit.p.L.b` @type ^`float` := v1;
  #L273b10.  v1:= 0I;
  #L273b12.  v2:= fcmpg(v0, v1);
  #L273b16.  if v2 >= 0 then goto L273b24;
  #L273b1a.  v2:= v3.`com.huawei.hms.scankit.p.L.c` @type ^`float`;
  #L273b1e.  v2:= v2 + v0 @kind float;
  #L273b20.  v3.`com.huawei.hms.scankit.p.L.c` @type ^`float` := v2;
  #L273b24.  v0:= v3.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L273b28.  v1:= fcmpg(v0, v1);
  #L273b2c.  if v1 >= 0 then goto L273b3a;
  #L273b30.  v1:= v3.`com.huawei.hms.scankit.p.L.d` @type ^`float`;
  #L273b34.  v1:= v1 + v0 @kind float;
  #L273b36.  v3.`com.huawei.hms.scankit.p.L.d` @type ^`float` := v1;
  #L273b3a.  v0:= v3.`com.huawei.hms.scankit.p.L.e` @type ^`float`;
  #L273b3e.  v0:= v0 + v6 @kind float;
  #L273b40.  v3.`com.huawei.hms.scankit.p.L.e` @type ^`float` := v0;
  #L273b44.  v0:= v3.`com.huawei.hms.scankit.p.L.f` @type ^`float`;
  #L273b48.  v0:= v0 + v7 @kind float;
  #L273b4a.  v3.`com.huawei.hms.scankit.p.L.f` @type ^`float` := v0;
  #L273b4e.  v0:= v3.`com.huawei.hms.scankit.p.L.a` @type ^`float`;
  #L273b52.  v1:= 0I;
  #L273b54.  call temp:= `a`(v3, v0, v1, v4) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FII)F` @kind direct;
  #L273b5a.  v0:= temp;
  #L273b5c.  v3.`com.huawei.hms.scankit.p.L.a` @type ^`float` := v0;
  #L273b60.  v0:= v3.`com.huawei.hms.scankit.p.L.e` @type ^`float`;
  #L273b64.  call temp:= `a`(v3, v0, v1, v4) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FII)F` @kind direct;
  #L273b6a.  v0:= temp;
  #L273b6c.  v3.`com.huawei.hms.scankit.p.L.e` @type ^`float` := v0;
  #L273b70.  v0:= v3.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L273b74.  call temp:= `a`(v3, v0, v1, v5) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FII)F` @kind direct;
  #L273b7a.  v0:= temp;
  #L273b7c.  v3.`com.huawei.hms.scankit.p.L.b` @type ^`float` := v0;
  #L273b80.  v0:= v3.`com.huawei.hms.scankit.p.L.f` @type ^`float`;
  #L273b84.  call temp:= `a`(v3, v0, v1, v5) @signature `Lcom/huawei/hms/scankit/p/L;.a:(FII)F` @kind direct;
  #L273b8a.  v0:= temp;
  #L273b8c.  v3.`com.huawei.hms.scankit.p.L.f` @type ^`float` := v0;
  #L273b90.  v0:= v3.`com.huawei.hms.scankit.p.L.a` @type ^`float`;
  #L273b94.  v1:= v3.`com.huawei.hms.scankit.p.L.c` @type ^`float`;
  #L273b98.  v1:= v1 + v0 @kind float;
  #L273b9a.  v4:= (`float`) v4 @kind i2f;
  #L273b9c.  v4:= v4 - v6 @kind float;
  #L273b9e.  v6:= 1.0F;
  #L273ba2.  v1:= fcmpl(v1, v4);
  #L273ba6.  if v1 < 0 then goto L273bb2;
  #L273baa.  v4:= v4 - v6 @kind float;
  #L273bac.  v4:= v4 - v0 @kind float;
  #L273bae.  v3.`com.huawei.hms.scankit.p.L.c` @type ^`float` := v4;
  #L273bb2.  v4:= v3.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L273bb6.  v0:= v3.`com.huawei.hms.scankit.p.L.d` @type ^`float`;
  #L273bba.  v0:= v0 + v4 @kind float;
  #L273bbc.  v5:= (`float`) v5 @kind i2f;
  #L273bbe.  v5:= v5 - v7 @kind float;
  #L273bc0.  v7:= fcmpl(v0, v5);
  #L273bc4.  if v7 < 0 then goto L273bd0;
  #L273bc8.  v5:= v5 - v6 @kind float;
  #L273bca.  v5:= v5 - v4 @kind float;
  #L273bcc.  v3.`com.huawei.hms.scankit.p.L.d` @type ^`float` := v5;
  #L273bd0.  return @kind void;
}
procedure `float` `b`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2738a4.  v0:= v1.`com.huawei.hms.scankit.p.L.n` @type ^`float`;
  #L2738a8.  return v0;
}
procedure `void` `b`(`com.huawei.hms.scankit.p.L` v3 @kind this, `float` v4 , `float` v5 ) @signature `Lcom/huawei/hms/scankit/p/L;.b:(FF)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L273be4.  v0:= 0I;
  #L273be6.  v3.`com.huawei.hms.scankit.p.L.a` @type ^`float` := v0;
  #L273bea.  v3.`com.huawei.hms.scankit.p.L.b` @type ^`float` := v0;
  #L273bee.  v3.`com.huawei.hms.scankit.p.L.c` @type ^`float` := v4;
  #L273bf2.  v3.`com.huawei.hms.scankit.p.L.d` @type ^`float` := v5;
  #L273bf6.  v1:= 2.0F;
  #L273bfa.  v2:= v4 / v1 @kind float;
  #L273bfe.  v3.`com.huawei.hms.scankit.p.L.e` @type ^`float` := v2;
  #L273c02.  v1:= v5 / v1 @kind float;
  #L273c06.  v3.`com.huawei.hms.scankit.p.L.f` @type ^`float` := v1;
  #L273c0a.  v3.`com.huawei.hms.scankit.p.L.g` @type ^`float` := v4;
  #L273c0e.  v3.`com.huawei.hms.scankit.p.L.h` @type ^`float` := v5;
  #L273c12.  v3.`com.huawei.hms.scankit.p.L.j` @type ^`float` := v0;
  #L273c16.  return @kind void;
}
procedure `float` `c`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.c:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2738bc.  v0:= v1.`com.huawei.hms.scankit.p.L.d` @type ^`float`;
  #L2738c0.  return v0;
}
procedure `int` `compareTo`(`com.huawei.hms.scankit.p.L` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lcom/huawei/hms/scankit/p/L;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L273a20.  v1:= (`com.huawei.hms.scankit.p.L`) v1 @kind object;
  #L273a24.  call temp:= `a`(v0, v1) @signature `Lcom/huawei/hms/scankit/p/L;.a:(Lcom/huawei/hms/scankit/p/L;)I` @kind virtual;
  #L273a2a.  v1:= temp;
  #L273a2c.  return v1;
}
procedure `float` `d`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.d:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2738d4.  v0:= v1.`com.huawei.hms.scankit.p.L.a` @type ^`float`;
  #L2738d8.  return v0;
}
procedure `float` `e`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.e:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2738ec.  v0:= v1.`com.huawei.hms.scankit.p.L.b` @type ^`float`;
  #L2738f0.  return v0;
}
procedure `float` `f`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.f:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273904.  v0:= v1.`com.huawei.hms.scankit.p.L.c` @type ^`float`;
  #L273908.  return v0;
}
procedure `float` `g`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.g:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27391c.  v0:= v1.`com.huawei.hms.scankit.p.L.k` @type ^`float`;
  #L273920.  return v0;
}
procedure `float` `h`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.h:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273934.  v0:= v1.`com.huawei.hms.scankit.p.L.i` @type ^`float`;
  #L273938.  return v0;
}
procedure `float` `i`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.i:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27394c.  v0:= v1.`com.huawei.hms.scankit.p.L.j` @type ^`float`;
  #L273950.  return v0;
}
procedure `float` `j`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.j:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273964.  v0:= v1.`com.huawei.hms.scankit.p.L.e` @type ^`float`;
  #L273968.  return v0;
}
procedure `float` `k`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.k:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L27397c.  v0:= v1.`com.huawei.hms.scankit.p.L.f` @type ^`float`;
  #L273980.  return v0;
}
procedure `float` `l`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.l:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L273994.  v0:= v1.`com.huawei.hms.scankit.p.L.h` @type ^`float`;
  #L273998.  return v0;
}
procedure `float` `m`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.m:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2739ac.  v0:= v1.`com.huawei.hms.scankit.p.L.g` @type ^`float`;
  #L2739b0.  return v0;
}
procedure `float` `n`(`com.huawei.hms.scankit.p.L` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/L;.n:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2739c4.  v0:= v1.`com.huawei.hms.scankit.p.L.v` @type ^`float`;
  #L2739c8.  return v0;
}
