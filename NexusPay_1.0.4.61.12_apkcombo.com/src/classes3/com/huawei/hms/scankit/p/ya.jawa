record `com.huawei.hms.scankit.p.ya` @kind class @AccessFlag PUBLIC_FINAL extends `com.huawei.hms.scankit.aiscan.common.z` @kind class {
  `float` `com.huawei.hms.scankit.p.ya.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.p.ya` v0 @kind this, `float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/huawei/hms/scankit/p/ya;.<init>:(FFF)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2a0990.  call `<init>`(v0, v1, v2) @signature `Lcom/huawei/hms/scankit/aiscan/common/z;.<init>:(FF)V` @kind direct;
  #L2a0996.  v0.`com.huawei.hms.scankit.p.ya.e` @type ^`float` := v3;
  #L2a099a.  return @kind void;
}
procedure `boolean` `a`(`com.huawei.hms.scankit.p.ya` v1 @kind this, `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/huawei/hms/scankit/p/ya;.a:(FFF)Z` @AccessFlag  {
    temp;
    v0;

  #L2a08e0.  call temp:= `c`(v1) @signature `Lcom/huawei/hms/scankit/aiscan/common/z;.c:()F` @kind virtual;
  #L2a08e6.  v0:= temp;
  #L2a08e8.  v3:= v3 - v0 @kind float;
  #L2a08ea.  call temp:= `abs`(v3) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2a08f0.  v3:= temp;
  #L2a08f2.  v0:= 0I;
  #L2a08f4.  v3:= fcmpg(v3, v2);
  #L2a08f8.  if v3 > 0 then goto L2a093e;
  #L2a08fc.  call temp:= `b`(v1) @signature `Lcom/huawei/hms/scankit/aiscan/common/z;.b:()F` @kind virtual;
  #L2a0902.  v3:= temp;
  #L2a0904.  v4:= v4 - v3 @kind float;
  #L2a0906.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2a090c.  v3:= temp;
  #L2a090e.  v3:= fcmpg(v3, v2);
  #L2a0912.  if v3 > 0 then goto L2a093e;
  #L2a0916.  v3:= v1.`com.huawei.hms.scankit.p.ya.e` @type ^`float`;
  #L2a091a.  v2:= v2 - v3 @kind float;
  #L2a091c.  call temp:= `abs`(v2) @signature `Ljava/lang/Math;.abs:(F)F` @kind static;
  #L2a0922.  v2:= temp;
  #L2a0924.  v3:= 1.0F;
  #L2a0928.  v3:= fcmpg(v2, v3);
  #L2a092c.  if v3 <= 0 then goto L2a093c;
  #L2a0930.  v3:= v1.`com.huawei.hms.scankit.p.ya.e` @type ^`float`;
  #L2a0934.  v2:= fcmpg(v2, v3);
  #L2a0938.  if v2 > 0 then goto L2a093e;
  #L2a093c.  v0:= 1I;
  #L2a093e.  return v0;
}
procedure `com.huawei.hms.scankit.p.ya` `b`(`com.huawei.hms.scankit.p.ya` v2 @kind this, `float` v3 , `float` v4 , `float` v5 ) @signature `Lcom/huawei/hms/scankit/p/ya;.b:(FFF)Lcom/huawei/hms/scankit/p/ya;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2a0950.  call temp:= `b`(v2) @signature `Lcom/huawei/hms/scankit/aiscan/common/z;.b:()F` @kind virtual;
  #L2a0956.  v0:= temp;
  #L2a0958.  v0:= v0 + v4 @kind float;
  #L2a095a.  v4:= 2.0F;
  #L2a095e.  v0:= v0 / v4 @kind float;
  #L2a0960.  call temp:= `c`(v2) @signature `Lcom/huawei/hms/scankit/aiscan/common/z;.c:()F` @kind virtual;
  #L2a0966.  v1:= temp;
  #L2a0968.  v1:= v1 + v3 @kind float;
  #L2a096a.  v1:= v1 / v4 @kind float;
  #L2a096c.  v3:= v2.`com.huawei.hms.scankit.p.ya.e` @type ^`float`;
  #L2a0970.  v3:= v3 + v5 @kind float;
  #L2a0972.  v3:= v3 / v4 @kind float;
  #L2a0974.  v4:= new `com.huawei.hms.scankit.p.ya`;
  #L2a0978.  call `<init>`(v4, v0, v1, v3) @signature `Lcom/huawei/hms/scankit/p/ya;.<init>:(FFF)V` @kind direct;
  #L2a097e.  return v4 @kind object;
}
