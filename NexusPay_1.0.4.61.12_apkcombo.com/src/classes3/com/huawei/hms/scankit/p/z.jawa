record `com.huawei.hms.scankit.p.z` @kind class @AccessFlag PUBLIC_FINAL {
  `byte`[] `com.huawei.hms.scankit.p.z.a` @AccessFlag PRIVATE_FINAL;
  `int` `com.huawei.hms.scankit.p.z.b` @AccessFlag PRIVATE;
  `int` `com.huawei.hms.scankit.p.z.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.p.z` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/huawei/hms/scankit/p/z;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a1c44.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a1c4a.  v0.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] := v1 @kind object;
  #L2a1c4e.  return @kind void;
}
procedure `int` `a`(`com.huawei.hms.scankit.p.z` v2 @kind this) @signature `Lcom/huawei/hms/scankit/p/z;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2a1a9c.  v0:= v2.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1aa0.  v0:= length @variable v0;
  #L2a1aa2.  v1:= v2.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1aa6.  v0:= v0 - v1 @kind int;
  #L2a1aa8.  v0:= v0 * 8;
  #L2a1aac.  v1:= v2.`com.huawei.hms.scankit.p.z.c` @type ^`int`;
  #L2a1ab0.  v0:= v0 - v1 @kind int;
  #L2a1ab2.  return v0;
}
procedure `int` `a`(`com.huawei.hms.scankit.p.z` v9 @kind this, `int` v10 ) @signature `Lcom/huawei/hms/scankit/p/z;.a:(I)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2a1ac4.  v0:= 1I;
  #L2a1ac6.  if v10 < v0 then goto L2a1bdc;
  #L2a1aca.  v1:= 32I;
  #L2a1ace.  if v10 > v1 then goto L2a1bdc;
  #L2a1ad2.  call temp:= `a`(v9) @signature `Lcom/huawei/hms/scankit/p/z;.a:()I` @kind virtual;
  #L2a1ad8.  v1:= temp;
  #L2a1ada.  if v10 > v1 then goto L2a1bdc;
  #L2a1ade.  v1:= v9.`com.huawei.hms.scankit.p.z.c` @type ^`int`;
  #L2a1ae2.  v2:= 0I;
  #L2a1ae4.  v3:= 255I;
  #L2a1ae8.  v4:= 8I;
  #L2a1aec.  if v1 <= 0 then goto L2a1b54;
  #L2a1af0.  v1:= v1 - 8;
  #L2a1af4.  if v10 >= v1 then goto L2a1afc;
  #L2a1af8.  v5:= v10;
  #L2a1afa.  goto L2a1afe;
  #L2a1afc.  v5:= v1;
  #L2a1afe.  v1:= v1 - v5 @kind int;
  #L2a1b00.  v6:= v5 - 8;
  #L2a1b04.  v6:= v3 ^> v6 @kind int;
  #L2a1b08.  v6:= v6 ^< v1 @kind int;
  #L2a1b0a.  v7:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1b0e.  v8:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b12.  call temp:= `a`(v7, v8) @signature `Lcom/huawei/hms/scankit/util/b;.a:([BI)Z` @kind static;
  #L2a1b18.  v7:= temp;
  #L2a1b1a.  if v7 == 0 then goto L2a1b32;
  #L2a1b1e.  v7:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1b22.  v8:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b26.  v7:= v7[v8] @kind byte;
  #L2a1b2a.  v6:= v6 ^& v7 @kind int;
  #L2a1b2c.  v1:= v6 ^> v1 @kind int;
  #L2a1b30.  goto L2a1b34;
  #L2a1b32.  v1:= 0I;
  #L2a1b34.  v10:= v10 - v5 @kind int;
  #L2a1b36.  v6:= v9.`com.huawei.hms.scankit.p.z.c` @type ^`int`;
  #L2a1b3a.  v6:= v6 + v5 @kind int;
  #L2a1b3c.  v9.`com.huawei.hms.scankit.p.z.c` @type ^`int` := v6;
  #L2a1b40.  if v6 != v4 then goto L2a1b52;
  #L2a1b44.  v9.`com.huawei.hms.scankit.p.z.c` @type ^`int` := v2;
  #L2a1b48.  v2:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b4c.  v2:= v2 + v0 @kind int;
  #L2a1b4e.  v9.`com.huawei.hms.scankit.p.z.b` @type ^`int` := v2;
  #L2a1b52.  v2:= v1;
  #L2a1b54.  if v10 <= 0 then goto L2a1bda;
  #L2a1b58.  if v10 < v4 then goto L2a1b96;
  #L2a1b5c.  v1:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1b60.  v5:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b64.  call temp:= `a`(v1, v5) @signature `Lcom/huawei/hms/scankit/util/b;.a:([BI)Z` @kind static;
  #L2a1b6a.  v1:= temp;
  #L2a1b6c.  if v1 == 0 then goto L2a1b86;
  #L2a1b70.  v1:= v2 ^< 8;
  #L2a1b74.  v2:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1b78.  v5:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b7c.  v2:= v2[v5] @kind byte;
  #L2a1b80.  v2:= v2 ^& v3 @kind int;
  #L2a1b82.  v1:= v1 ^| v2 @kind int;
  #L2a1b84.  v2:= v1;
  #L2a1b86.  v1:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1b8a.  v1:= v1 + v0 @kind int;
  #L2a1b8c.  v9.`com.huawei.hms.scankit.p.z.b` @type ^`int` := v1;
  #L2a1b90.  v10:= v10 + -8;
  #L2a1b94.  goto L2a1b58;
  #L2a1b96.  if v10 <= 0 then goto L2a1bda;
  #L2a1b9a.  v0:= v10 - 8;
  #L2a1b9e.  v1:= v3 ^> v0 @kind int;
  #L2a1ba2.  v1:= v1 ^< v0 @kind int;
  #L2a1ba4.  v3:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1ba8.  v4:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1bac.  call temp:= `a`(v3, v4) @signature `Lcom/huawei/hms/scankit/util/b;.a:([BI)Z` @kind static;
  #L2a1bb2.  v3:= temp;
  #L2a1bb4.  if v3 == 0 then goto L2a1bd0;
  #L2a1bb8.  v2:= v2 ^< v10 @kind int;
  #L2a1bba.  v3:= v9.`com.huawei.hms.scankit.p.z.a` @type ^`byte`[] @kind object;
  #L2a1bbe.  v4:= v9.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1bc2.  v3:= v3[v4] @kind byte;
  #L2a1bc6.  v1:= v1 ^& v3 @kind int;
  #L2a1bc8.  v0:= v1 ^> v0 @kind int;
  #L2a1bcc.  v0:= v0 ^| v2 @kind int;
  #L2a1bce.  v2:= v0;
  #L2a1bd0.  v0:= v9.`com.huawei.hms.scankit.p.z.c` @type ^`int`;
  #L2a1bd4.  v0:= v0 + v10 @kind int;
  #L2a1bd6.  v9.`com.huawei.hms.scankit.p.z.c` @type ^`int` := v0;
  #L2a1bda.  return v2;
  #L2a1bdc.  v0:= new `java.lang.IllegalArgumentException`;
  #L2a1be0.  call temp:= `valueOf`(v10) @signature `Ljava/lang/String;.valueOf:(I)Ljava/lang/String;` @kind static;
  #L2a1be6.  v10:= temp @kind object;
  #L2a1be8.  call `<init>`(v0, v10) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2a1bee.  throw v0;
  #L2a1bf0.  v10:= Exception @type ^`java.lang.Exception` @kind object;
  #L2a1bf2.  throw v10;
  catch `java.lang.Exception` @[L2a1bdc..L2a1bf0] goto L2a1bf0;
}
procedure `int` `b`(`com.huawei.hms.scankit.p.z` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a1c14.  v0:= v1.`com.huawei.hms.scankit.p.z.c` @type ^`int`;
  #L2a1c18.  return v0;
}
procedure `int` `c`(`com.huawei.hms.scankit.p.z` v1 @kind this) @signature `Lcom/huawei/hms/scankit/p/z;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2a1c2c.  v0:= v1.`com.huawei.hms.scankit.p.z.b` @type ^`int`;
  #L2a1c30.  return v0;
}
