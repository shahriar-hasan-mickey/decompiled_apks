record `com.huawei.hms.scankit.util.OpencvJNI` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<clinit>`() @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2a3834.  v0:= "OpencvJNI" @kind object;
  #L2a3838.  v1:= "start load method" @kind object;
  #L2a383c.  call `c`(v0, v1) @signature `Lcom/huawei/hms/scankit/util/a;.c:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2a3842.  v1:= "scannative" @kind object;
  #L2a3846.  call `loadLibrary`(v1) @signature `Ljava/lang/System;.loadLibrary:(Ljava/lang/String;)V` @kind static;
  #L2a384c.  goto L2a3868;
  #L2a384e.  v1:= Exception @type ^`java.lang.UnsatisfiedLinkError` @kind object;
  #L2a3850.  call `printStackTrace`(v1) @signature `Ljava/lang/UnsatisfiedLinkError;.printStackTrace:()V` @kind virtual;
  #L2a3856.  v1:= "UnsatisfiedLinkError" @kind object;
  #L2a385a.  call `b`(v0, v1) @signature `Lcom/huawei/hms/scankit/util/a;.b:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2a3860.  v0:= 0I;
  #L2a3862.  call `a`(v0) @signature `Lcom/huawei/hms/scankit/k;.a:(Z)V` @kind static;
  #L2a3868.  return @kind void;
  catch `java.lang.UnsatisfiedLinkError` @[L2a3846..L2a384c] goto L2a384e;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.util.OpencvJNI` v0 @kind this) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a388c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a3892.  return @kind void;
}
procedure `float`[] `QuadFitting`(`float`[] v0 @kind object, `int` v1 , `float`[] v2 @kind object) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.QuadFitting:([FI[F)[F` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `adaptiveBinary`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.adaptiveBinary:([BIII)[B` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `imageResize`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.imageResize:([BIIII)[B` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `byte`[] `imageRotate`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `float` v5 , `double` v6 ) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.imageRotate:([BIIIIFD)[B` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `void` `init`() @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.init:()V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2a38a4.  v0:= "OpencvJNI" @kind object;
  #L2a38a8.  v1:= "init()" @kind object;
  #L2a38ac.  call `c`(v0, v1) @signature `Lcom/huawei/hms/scankit/util/a;.c:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2a38b2.  return @kind void;
}
procedure `float`[] `multiBarcodeDetect`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `boolean` v4 ) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.multiBarcodeDetect:([BIIIZ)[F` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
procedure `void` `setModel`(`byte`[] v0 @kind object, `int` v1 , `float`[] v2 @kind object, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.setModel:([BI[FI[BI)V` @AccessFlag PUBLIC_STATIC_NATIVE {

  # return;
}
