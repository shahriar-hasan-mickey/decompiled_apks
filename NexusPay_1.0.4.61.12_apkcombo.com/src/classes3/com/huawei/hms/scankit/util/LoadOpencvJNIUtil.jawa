record `com.huawei.hms.scankit.util.LoadOpencvJNIUtil` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.huawei.hms.scankit.util.LoadOpencvJNIUtil.TAG` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L2a37e8.  return @kind void;
}
procedure `void` `<init>`(`com.huawei.hms.scankit.util.LoadOpencvJNIUtil` v0 @kind this) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2a37fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2a3802.  return @kind void;
}
procedure `float`[] `QuadFitting`(`float`[] v0 @kind object, `int` v1 , `float`[] v2 @kind object) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.QuadFitting:([FI[F)[F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a37a0.  if v2 == 0 then goto L2a37ae;
  #L2a37a4.  call temp:= `QuadFitting`(v0, v1, v2) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.QuadFitting:([FI[F)[F` @kind static;
  #L2a37aa.  v0:= temp @kind object;
  #L2a37ac.  goto L2a37b0;
  #L2a37ae.  v0:= 0I;
  #L2a37b0.  return v0 @kind object;
}
procedure `byte`[] `adaptivebinary`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.adaptivebinary:([BIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a372c.  if v0 == 0 then goto L2a3742;
  #L2a3730.  if v1 < v3 then goto L2a3742;
  #L2a3734.  if v2 < v3 then goto L2a3742;
  #L2a3738.  call temp:= `adaptiveBinary`(v0, v1, v2, v3) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.adaptiveBinary:([BIII)[B` @kind static;
  #L2a373e.  v0:= temp @kind object;
  #L2a3740.  goto L2a3744;
  #L2a3742.  v0:= 0I;
  #L2a3744.  return v0 @kind object;
}
procedure `byte`[] `imageResize`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `int` v4 ) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.imageResize:([BIIII)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a3758.  if v0 == 0 then goto L2a3766;
  #L2a375c.  call temp:= `imageResize`(v0, v1, v2, v3, v4) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.imageResize:([BIIII)[B` @kind static;
  #L2a3762.  v0:= temp @kind object;
  #L2a3764.  goto L2a3768;
  #L2a3766.  v0:= 0I;
  #L2a3768.  return v0 @kind object;
}
procedure `byte`[] `imageRotate`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `int` v4 , `float` v5 , `double` v6 ) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.imageRotate:([BIIIIFD)[B` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a377c.  if v0 == 0 then goto L2a378a;
  #L2a3780.  call temp:= `imageRotate`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.imageRotate:([BIIIIFD)[B` @kind static;
  #L2a3786.  v0:= temp @kind object;
  #L2a3788.  goto L2a378c;
  #L2a378a.  v0:= 0I;
  #L2a378c.  return v0 @kind object;
}
procedure `float`[] `multiBarcodeDetect`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 , `boolean` v4 ) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.multiBarcodeDetect:([BIIIZ)[F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a37c4.  if v0 == 0 then goto L2a37d2;
  #L2a37c8.  call temp:= `multiBarcodeDetect`(v0, v1, v2, v3, v4) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.multiBarcodeDetect:([BIIIZ)[F` @kind static;
  #L2a37ce.  v0:= temp @kind object;
  #L2a37d0.  goto L2a37d4;
  #L2a37d2.  v0:= 0I;
  #L2a37d4.  return v0 @kind object;
}
procedure `void` `setModel`(`byte`[] v0 @kind object, `int` v1 , `float`[] v2 @kind object, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/huawei/hms/scankit/util/LoadOpencvJNIUtil;.setModel:([BI[FI[BI)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L2a3814.  if v0 == 0 then goto L2a3822;
  #L2a3818.  if v2 == 0 then goto L2a3822;
  #L2a381c.  call `setModel`(v0, v1, v2, v3, v4, v5) @signature `Lcom/huawei/hms/scankit/util/OpencvJNI;.setModel:([BI[FI[BI)V` @kind static;
  #L2a3822.  return @kind void;
}
