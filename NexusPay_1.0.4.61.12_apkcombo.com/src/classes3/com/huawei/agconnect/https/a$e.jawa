record `com.huawei.agconnect.https.a$e` @kind class @AccessFlag FINAL extends `com.huawei.agconnect.https.a` @kind class {
}
procedure `void` `<init>`(`com.huawei.agconnect.https.a$e` v0 @kind this) @signature `Lcom/huawei/agconnect/https/a$e;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1bea18.  call `<init>`(v0) @signature `Lcom/huawei/agconnect/https/a;.<init>:()V` @kind direct;
  #L1bea1e.  return @kind void;
}
procedure `okhttp3.HttpUrl$Builder` `e`(`com.huawei.agconnect.https.a$e` v0 @kind this, `java.lang.reflect.Field` v1 @kind object, `java.lang.Object` v2 @kind object, `okhttp3.HttpUrl$Builder` v3 @kind object) @signature `Lcom/huawei/agconnect/https/a$e;.e:(Ljava/lang/reflect/Field;Ljava/lang/Object;Lokhttp3/HttpUrl$Builder;)Lokhttp3/HttpUrl$Builder;` @AccessFlag  {
    temp;

  #L1be95c.  v3:= constclass @type ^`com.huawei.agconnect.https.annotation.Url` @kind object;
  #L1be960.  call temp:= `isAnnotationPresent`(v1, v3) @signature `Ljava/lang/reflect/Field;.isAnnotationPresent:(Ljava/lang/Class;)Z` @kind virtual;
  #L1be966.  v3:= temp;
  #L1be968.  if v3 == 0 then goto L1be9d8;
  #L1be96c.  call `b`(v1) @signature `Lcom/huawei/agconnect/https/a;.b:(Ljava/lang/reflect/Field;)V` @kind static;
  #L1be972.  call temp:= `get`(v1, v2) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1be978.  v2:= temp @kind object;
  #L1be97a.  v3:= constclass @type ^`java.lang.String` @kind object;
  #L1be97e.  call temp:= `getType`(v1) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1be984.  v1:= temp @kind object;
  #L1be986.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1be98c.  v1:= temp;
  #L1be98e.  if v1 == 0 then goto L1be9c8;
  #L1be992.  v2:= (`java.lang.String`) v2 @kind object;
  #L1be996.  if v2 == 0 then goto L1be9b8;
  #L1be99a.  call temp:= `isEmpty`(v2) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1be9a0.  v1:= temp;
  #L1be9a2.  if v1 != 0 then goto L1be9b8;
  #L1be9a6.  call temp:= `parse`(v2) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1be9ac.  v1:= temp @kind object;
  #L1be9ae.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/HttpUrl;.newBuilder:()Lokhttp3/HttpUrl$Builder;` @kind virtual;
  #L1be9b4.  v1:= temp @kind object;
  #L1be9b6.  return v1 @kind object;
  #L1be9b8.  v1:= new `java.lang.IllegalArgumentException`;
  #L1be9bc.  v2:= "url cannot be null or empty" @kind object;
  #L1be9c0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be9c6.  throw v1;
  #L1be9c8.  v1:= new `java.security.InvalidParameterException`;
  #L1be9cc.  v2:= "Url should be the annotation of String" @kind object;
  #L1be9d0.  call `<init>`(v1, v2) @signature `Ljava/security/InvalidParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be9d6.  throw v1;
  #L1be9d8.  v1:= new `java.lang.IllegalArgumentException`;
  #L1be9dc.  v2:= "field is not Url annotation" @kind object;
  #L1be9e0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be9e6.  throw v1;
  #L1be9e8.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1be9ea.  v2:= new `java.lang.RuntimeException`;
  #L1be9ee.  call `<init>`(v2, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1be9f4.  throw v2;
  catch `java.lang.IllegalAccessException` @[L1be95c..L1be9e8] goto L1be9e8;
}
