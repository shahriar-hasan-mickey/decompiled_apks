record `com.huawei.agconnect.https.a$b` @kind class @AccessFlag  extends `com.huawei.agconnect.https.a` @kind class {
}
procedure `void` `<init>`(`com.huawei.agconnect.https.a$b` v0 @kind this) @signature `Lcom/huawei/agconnect/https/a$b;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be75c.  call `<init>`(v0) @signature `Lcom/huawei/agconnect/https/a;.<init>:()V` @kind direct;
  #L1be762.  return @kind void;
}
procedure `okhttp3.Request$Builder` `e`(`com.huawei.agconnect.https.a$b` v2 @kind this, `java.lang.reflect.Field` v3 @kind object, `java.lang.Object` v4 @kind object, `okhttp3.Request$Builder` v5 @kind object) @signature `Lcom/huawei/agconnect/https/a$b;.e:(Ljava/lang/reflect/Field;Ljava/lang/Object;Lokhttp3/Request$Builder;)Lokhttp3/Request$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1be6a0.  if v5 == 0 then goto L1be72c;
  #L1be6a4.  call `b`(v3) @signature `Lcom/huawei/agconnect/https/a;.b:(Ljava/lang/reflect/Field;)V` @kind static;
  #L1be6aa.  call temp:= `get`(v3, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1be6b0.  v4:= temp @kind object;
  #L1be6b2.  v0:= constclass @type ^`com.huawei.agconnect.https.annotation.Header` @kind object;
  #L1be6b6.  call temp:= `getAnnotation`(v3, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L1be6bc.  v0:= temp @kind object;
  #L1be6be.  v0:= (`com.huawei.agconnect.https.annotation.Header`) v0 @kind object;
  #L1be6c2.  call temp:= `value`(v0) @signature `Lcom/huawei/agconnect/https/annotation/Header;.value:()Ljava/lang/String;` @kind interface;
  #L1be6c8.  v0:= temp @kind object;
  #L1be6ca.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1be6d0.  v1:= temp;
  #L1be6d2.  if v1 == 0 then goto L1be6de;
  #L1be6d6.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1be6dc.  v0:= temp @kind object;
  #L1be6de.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L1be6e2.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1be6e8.  v3:= temp @kind object;
  #L1be6ea.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1be6f0.  v3:= temp;
  #L1be6f2.  if v3 == 0 then goto L1be70e;
  #L1be6f6.  v4:= (`java.lang.String`) v4 @kind object;
  #L1be6fa.  call temp:= `isEmpty`(v4) @signature `Landroid/text/TextUtils;.isEmpty:(Ljava/lang/CharSequence;)Z` @kind static;
  #L1be700.  v3:= temp;
  #L1be702.  if v3 != 0 then goto L1be70c;
  #L1be706.  call temp:= `addHeader`(v5, v0, v4) @signature `Lokhttp3/Request$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1be70c.  return v5 @kind object;
  #L1be70e.  v3:= new `java.security.InvalidParameterException`;
  #L1be712.  v4:= "Header should be the annotation of String type" @kind object;
  #L1be716.  call `<init>`(v3, v4) @signature `Ljava/security/InvalidParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be71c.  throw v3;
  #L1be71e.  v3:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1be720.  v4:= new `java.lang.RuntimeException`;
  #L1be724.  call `<init>`(v4, v3) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1be72a.  throw v4;
  #L1be72c.  v3:= new `java.lang.IllegalArgumentException`;
  #L1be730.  v4:= "builder cannot be null" @kind object;
  #L1be734.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be73a.  throw v3;
  catch `java.lang.IllegalAccessException` @[L1be6a4..L1be71e] goto L1be71e;
}
