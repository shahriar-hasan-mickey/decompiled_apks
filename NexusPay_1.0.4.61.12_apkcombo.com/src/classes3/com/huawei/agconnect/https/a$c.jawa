record `com.huawei.agconnect.https.a$c` @kind class @AccessFlag  extends `com.huawei.agconnect.https.a` @kind class {
}
procedure `void` `<init>`(`com.huawei.agconnect.https.a$c` v0 @kind this) @signature `Lcom/huawei/agconnect/https/a$c;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1be850.  call `<init>`(v0) @signature `Lcom/huawei/agconnect/https/a;.<init>:()V` @kind direct;
  #L1be856.  return @kind void;
}
procedure `okhttp3.Request$Builder` `e`(`com.huawei.agconnect.https.a$c` v1 @kind this, `java.lang.reflect.Field` v2 @kind object, `java.lang.Object` v3 @kind object, `okhttp3.Request$Builder` v4 @kind object) @signature `Lcom/huawei/agconnect/https/a$c;.e:(Ljava/lang/reflect/Field;Ljava/lang/Object;Lokhttp3/Request$Builder;)Lokhttp3/Request$Builder;` @AccessFlag  {
    temp;
    v0;

  #L1be774.  if v4 == 0 then goto L1be81e;
  #L1be778.  call `b`(v2) @signature `Lcom/huawei/agconnect/https/a;.b:(Ljava/lang/reflect/Field;)V` @kind static;
  #L1be77e.  call temp:= `get`(v2, v3) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1be784.  v3:= temp @kind object;
  #L1be786.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L1be78a.  call temp:= `getType`(v2) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1be790.  v2:= temp @kind object;
  #L1be792.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1be798.  v2:= temp;
  #L1be79a.  if v2 == 0 then goto L1be800;
  #L1be79e.  v3:= (`java.util.Map`) v3 @kind object;
  #L1be7a2.  if v3 == 0 then goto L1be7fe;
  #L1be7a6.  call temp:= `isEmpty`(v3) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1be7ac.  v2:= temp;
  #L1be7ae.  if v2 != 0 then goto L1be7fe;
  #L1be7b2.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1be7b8.  v2:= temp @kind object;
  #L1be7ba.  call temp:= `iterator`(v2) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1be7c0.  v2:= temp @kind object;
  #L1be7c2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1be7c8.  v3:= temp;
  #L1be7ca.  if v3 == 0 then goto L1be7fe;
  #L1be7ce.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1be7d4.  v3:= temp @kind object;
  #L1be7d6.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L1be7da.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1be7e0.  v0:= temp @kind object;
  #L1be7e2.  v0:= (`java.lang.String`) v0 @kind object;
  #L1be7e6.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1be7ec.  v3:= temp @kind object;
  #L1be7ee.  call temp:= `valueOf`(v3) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1be7f4.  v3:= temp @kind object;
  #L1be7f6.  call temp:= `addHeader`(v4, v0, v3) @signature `Lokhttp3/Request$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1be7fc.  goto L1be7c2;
  #L1be7fe.  return v4 @kind object;
  #L1be800.  v2:= new `java.security.InvalidParameterException`;
  #L1be804.  v3:= "HeaderMap should be the annotation of Map type" @kind object;
  #L1be808.  call `<init>`(v2, v3) @signature `Ljava/security/InvalidParameterException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be80e.  throw v2;
  #L1be810.  v2:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1be812.  v3:= new `java.lang.RuntimeException`;
  #L1be816.  call `<init>`(v3, v2) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1be81c.  throw v3;
  #L1be81e.  v2:= new `java.lang.IllegalArgumentException`;
  #L1be822.  v3:= "builder cannot be null" @kind object;
  #L1be826.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1be82c.  throw v2;
  catch `java.lang.IllegalAccessException` @[L1be778..L1be810] goto L1be810;
}
