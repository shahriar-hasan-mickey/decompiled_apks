record `com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` @kind class @AccessFlag PUBLIC_FINAL extends `androidx.recyclerview.widget.DiffUtil$ItemCallback` @kind class {
}
procedure `void` `<init>`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v0 @kind this) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e8cfc.  call `<init>`(v0) @signature `Landroidx/recyclerview/widget/DiffUtil$ItemCallback;.<init>:()V` @kind direct;
  #L2e8d02.  return @kind void;
}
procedure `void` `<init>`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v0 @kind this, `kotlin.jvm.internal.DefaultConstructorMarker` v1 @kind object) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.<init>:(Lkotlin/jvm/internal/DefaultConstructorMarker;)V` @AccessFlag PUBLIC_SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2e8d14.  call `<init>`(v0) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.<init>:()V` @kind direct;
  #L2e8d1a.  return @kind void;
}
procedure `boolean` `areContentsTheSame`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v1 @kind this, `com.idtp.dbbl.model.RTPReceived` v2 @kind object, `com.idtp.dbbl.model.RTPReceived` v3 @kind object) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areContentsTheSame:(Lcom/idtp/dbbl/model/RTPReceived;Lcom/idtp/dbbl/model/RTPReceived;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e8c44.  v0:= "oldItem" @kind object;
  #L2e8c48.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e8c4e.  v0:= "newItem" @kind object;
  #L2e8c52.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e8c58.  call temp:= `getAmount`(v2) @signature `Lcom/idtp/dbbl/model/RTPReceived;.getAmount:()Ljava/lang/String;` @kind virtual;
  #L2e8c5e.  v2:= temp @kind object;
  #L2e8c60.  call temp:= `getAmount`(v3) @signature `Lcom/idtp/dbbl/model/RTPReceived;.getAmount:()Ljava/lang/String;` @kind virtual;
  #L2e8c66.  v3:= temp @kind object;
  #L2e8c68.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e8c6e.  v2:= temp;
  #L2e8c70.  return v2;
}
procedure `boolean` `areContentsTheSame`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areContentsTheSame:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e8c84.  v1:= (`com.idtp.dbbl.model.RTPReceived`) v1 @kind object;
  #L2e8c88.  v2:= (`com.idtp.dbbl.model.RTPReceived`) v2 @kind object;
  #L2e8c8c.  call temp:= `areContentsTheSame`(v0, v1, v2) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areContentsTheSame:(Lcom/idtp/dbbl/model/RTPReceived;Lcom/idtp/dbbl/model/RTPReceived;)Z` @kind virtual;
  #L2e8c92.  v1:= temp;
  #L2e8c94.  return v1;
}
procedure `boolean` `areItemsTheSame`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v1 @kind this, `com.idtp.dbbl.model.RTPReceived` v2 @kind object, `com.idtp.dbbl.model.RTPReceived` v3 @kind object) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areItemsTheSame:(Lcom/idtp/dbbl/model/RTPReceived;Lcom/idtp/dbbl/model/RTPReceived;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e8ca8.  v0:= "oldItem" @kind object;
  #L2e8cac.  call `checkNotNullParameter`(v2, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e8cb2.  v0:= "newItem" @kind object;
  #L2e8cb6.  call `checkNotNullParameter`(v3, v0) @signature `Lkotlin/jvm/internal/Intrinsics;.checkNotNullParameter:(Ljava/lang/Object;Ljava/lang/String;)V` @kind static;
  #L2e8cbc.  call temp:= `areEqual`(v2, v3) @signature `Lkotlin/jvm/internal/Intrinsics;.areEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L2e8cc2.  v2:= temp;
  #L2e8cc4.  return v2;
}
procedure `boolean` `areItemsTheSame`(`com.idtp.dbbl.adapter.RTPReceivedAdapter$MyDiffUtil` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areItemsTheSame:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2e8cd8.  v1:= (`com.idtp.dbbl.model.RTPReceived`) v1 @kind object;
  #L2e8cdc.  v2:= (`com.idtp.dbbl.model.RTPReceived`) v2 @kind object;
  #L2e8ce0.  call temp:= `areItemsTheSame`(v0, v1, v2) @signature `Lcom/idtp/dbbl/adapter/RTPReceivedAdapter$MyDiffUtil;.areItemsTheSame:(Lcom/idtp/dbbl/model/RTPReceived;Lcom/idtp/dbbl/model/RTPReceived;)Z` @kind virtual;
  #L2e8ce6.  v1:= temp;
  #L2e8ce8.  return v1;
}
