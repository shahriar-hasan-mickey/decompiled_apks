record `com.mastercard.api.utils.Utils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.mastercard.api.utils.Utils.ZERO_PADDING` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.mastercard.api.utils.Utils` v0 @kind this) @signature `Lcom/mastercard/api/utils/Utils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b6d48.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b6d4e.  return @kind void;
}
procedure `byte`[] `PrependLengthToByteArray`(`byte`[] v5 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.PrependLengthToByteArray:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b64d4.  v0:= 2I;
  #L3b64d6.  v1:= new `byte`[v0];
  #L3b64da.  v2:= length @variable v5;
  #L3b64dc.  v2:= v2 ^>> 8;
  #L3b64e0.  v2:= (`byte`) v2 @kind i2b;
  #L3b64e2.  v3:= 0I;
  #L3b64e4.  v1[v3]:= v2 @kind byte;
  #L3b64e8.  v2:= length @variable v5;
  #L3b64ea.  v2:= (`byte`) v2 @kind i2b;
  #L3b64ec.  v4:= 1I;
  #L3b64ee.  v1[v4]:= v2 @kind byte;
  #L3b64f2.  v2:= length @variable v5;
  #L3b64f4.  v2:= v2 + v0 @kind int;
  #L3b64f6.  v2:= new `byte`[v2];
  #L3b64fa.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b6500.  v1:= length @variable v5;
  #L3b6502.  call `arraycopy`(v5, v3, v2, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b6508.  return v2 @kind object;
}
procedure `void` `a`(`int` v2 , `java.lang.StringBuffer` v3 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.a:(ILjava/lang/StringBuffer;)V` @AccessFlag PRIVATE_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L3b6d60.  v2:= v2 ^& 255;
  #L3b6d64.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3b6d6a.  v2:= temp @kind object;
  #L3b6d6c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b6d72.  v0:= temp;
  #L3b6d74.  v1:= 2I;
  #L3b6d76.  if v0 >= v1 then goto L3b6d84;
  #L3b6d7a.  v0:= 48I;
  #L3b6d7e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b6d84.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuffer;.append:(Ljava/lang/String;)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b6d8a.  return @kind void;
}
procedure `boolean` `arrayCompare`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lcom/mastercard/api/utils/Utils;.arrayCompare:([BI[BII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6338.  v0:= v5 + v8 @kind int;
  #L3b633c.  v1:= length @variable v4;
  #L3b633e.  v2:= 0I;
  #L3b6340.  if v0 > v1 then goto L3b6376;
  #L3b6344.  v0:= v7 + v8 @kind int;
  #L3b6348.  v1:= length @variable v6;
  #L3b634a.  if v0 <= v1 then goto L3b6350;
  #L3b634e.  goto L3b6376;
  #L3b6350.  v0:= 0I;
  #L3b6352.  if v0 >= v8 then goto L3b6372;
  #L3b6356.  v1:= v5 + v0 @kind int;
  #L3b635a.  v1:= v4[v1] @kind byte;
  #L3b635e.  v3:= v7 + v0 @kind int;
  #L3b6362.  v3:= v6[v3] @kind byte;
  #L3b6366.  if v1 == v3 then goto L3b636c;
  #L3b636a.  return v2;
  #L3b636c.  v0:= v0 + 1;
  #L3b6370.  goto L3b6352;
  #L3b6372.  v4:= 1I;
  #L3b6374.  return v4;
  #L3b6376.  return v2;
}
procedure `java.lang.String` `bcdAmountArrayToString`(`com.mastercard.api.bytes.ByteArray` v2 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.bcdAmountArrayToString:(Lcom/mastercard/api/bytes/ByteArray;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b6a98.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b6a9e.  v0:= temp @kind object;
  #L3b6aa0.  call temp:= `getLength`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b6aa6.  v2:= temp;
  #L3b6aa8.  v1:= 0I;
  #L3b6aaa.  call temp:= `bcdAmountArrayToString`(v0, v1, v2) @signature `Lcom/mastercard/api/utils/Utils;.bcdAmountArrayToString:([BII)Ljava/lang/String;` @kind static;
  #L3b6ab0.  v2:= temp @kind object;
  #L3b6ab2.  return v2 @kind object;
}
procedure `java.lang.String` `bcdAmountArrayToString`(`byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/mastercard/api/utils/Utils;.bcdAmountArrayToString:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b6948.  v0:= length @variable v8;
  #L3b694a.  if v9 >= v0 then goto L3b6a7c;
  #L3b694e.  v10:= v10 + v9 @kind int;
  #L3b6950.  v0:= length @variable v8;
  #L3b6952.  if v10 > v0 then goto L3b6a7c;
  #L3b6956.  v0:= 1I;
  #L3b6958.  v1:= "" @kind object;
  #L3b695c.  v2:= v1 @kind object;
  #L3b695e.  v3:= 0I;
  #L3b6960.  if v9 >= v10 then goto L3b6a3c;
  #L3b6964.  v4:= v8[v9] @kind byte;
  #L3b6968.  v4:= v4 ^>> 4;
  #L3b696c.  v4:= v4 ^& 15;
  #L3b6970.  v4:= (`byte`) v4 @kind i2b;
  #L3b6972.  v5:= v8[v9] @kind byte;
  #L3b6976.  v5:= v5 ^& 15;
  #L3b697a.  v5:= (`byte`) v5 @kind i2b;
  #L3b697c.  v6:= 9I;
  #L3b6980.  if v4 > v6 then goto L3b6a30;
  #L3b6984.  if v5 > v6 then goto L3b6a30;
  #L3b6988.  v6:= new `java.lang.Integer`;
  #L3b698c.  call `<init>`(v6, v4) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L3b6992.  v7:= new `java.lang.Integer`;
  #L3b6996.  call `<init>`(v7, v5) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L3b699c.  if v0 == 0 then goto L3b69a4;
  #L3b69a0.  if v4 == 0 then goto L3b69cc;
  #L3b69a4.  v0:= new `java.lang.StringBuilder`;
  #L3b69a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b69ae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b69b4.  call temp:= `toString`(v6) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b69ba.  v2:= temp @kind object;
  #L3b69bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b69c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b69c8.  v2:= temp @kind object;
  #L3b69ca.  v0:= 0I;
  #L3b69cc.  if v0 == 0 then goto L3b69d4;
  #L3b69d0.  if v5 == 0 then goto L3b69fc;
  #L3b69d4.  v0:= new `java.lang.StringBuilder`;
  #L3b69d8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b69de.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b69e4.  call temp:= `toString`(v7) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b69ea.  v2:= temp @kind object;
  #L3b69ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b69f2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b69f8.  v2:= temp @kind object;
  #L3b69fa.  v0:= 0I;
  #L3b69fc.  v4:= v10 + -2;
  #L3b6a00.  if v9 != v4 then goto L3b6a2a;
  #L3b6a04.  v0:= new `java.lang.StringBuilder`;
  #L3b6a08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6a0e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a14.  v2:= "." @kind object;
  #L3b6a18.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a1e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6a24.  v0:= temp @kind object;
  #L3b6a26.  v2:= v0 @kind object;
  #L3b6a28.  v0:= 0I;
  #L3b6a2a.  v9:= v9 + 1;
  #L3b6a2e.  goto L3b695e;
  #L3b6a30.  v8:= new `java.lang.IllegalArgumentException`;
  #L3b6a34.  call `<init>`(v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3b6a3a.  throw v8;
  #L3b6a3c.  call temp:= `equalsIgnoreCase`(v2, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L3b6a42.  v8:= temp;
  #L3b6a44.  if v8 != 0 then goto L3b6a58;
  #L3b6a48.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b6a4e.  v8:= temp;
  #L3b6a50.  v9:= 46I;
  #L3b6a54.  if v8 != v9 then goto L3b6a7a;
  #L3b6a58.  v8:= new `java.lang.StringBuilder`;
  #L3b6a5c.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6a62.  v9:= "0" @kind object;
  #L3b6a66.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a6c.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6a72.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6a78.  v2:= temp @kind object;
  #L3b6a7a.  return v2 @kind object;
  #L3b6a7c.  v8:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L3b6a80.  call `<init>`(v8) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L3b6a86.  throw v8;
}
procedure `java.lang.String` `bcdArrayToString`(`byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lcom/mastercard/api/utils/Utils;.bcdArrayToString:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b6ac4.  v0:= length @variable v7;
  #L3b6ac6.  if v8 >= v0 then goto L3b6b8c;
  #L3b6aca.  v9:= v9 + v8 @kind int;
  #L3b6acc.  v0:= length @variable v7;
  #L3b6ace.  if v9 > v0 then goto L3b6b8c;
  #L3b6ad2.  v0:= 1I;
  #L3b6ad4.  v1:= "" @kind object;
  #L3b6ad8.  if v8 >= v9 then goto L3b6b8a;
  #L3b6adc.  v2:= v7[v8] @kind byte;
  #L3b6ae0.  v2:= v2 ^>> 4;
  #L3b6ae4.  v2:= v2 ^& 15;
  #L3b6ae8.  v2:= (`byte`) v2 @kind i2b;
  #L3b6aea.  v3:= v7[v8] @kind byte;
  #L3b6aee.  v3:= v3 ^& 15;
  #L3b6af2.  v3:= (`byte`) v3 @kind i2b;
  #L3b6af4.  v4:= 9I;
  #L3b6af8.  if v2 > v4 then goto L3b6b7e;
  #L3b6afc.  if v3 > v4 then goto L3b6b7e;
  #L3b6b00.  v4:= new `java.lang.Integer`;
  #L3b6b04.  call `<init>`(v4, v2) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L3b6b0a.  v5:= new `java.lang.Integer`;
  #L3b6b0e.  call `<init>`(v5, v3) @signature `Ljava/lang/Integer;.<init>:(I)V` @kind direct;
  #L3b6b14.  v6:= 0I;
  #L3b6b16.  if v0 == 0 then goto L3b6b1e;
  #L3b6b1a.  if v2 == 0 then goto L3b6b46;
  #L3b6b1e.  v0:= new `java.lang.StringBuilder`;
  #L3b6b22.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6b28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6b2e.  call temp:= `toString`(v4) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6b34.  v1:= temp @kind object;
  #L3b6b36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6b3c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6b42.  v1:= temp @kind object;
  #L3b6b44.  v0:= 0I;
  #L3b6b46.  if v0 == 0 then goto L3b6b4e;
  #L3b6b4a.  if v3 == 0 then goto L3b6b78;
  #L3b6b4e.  v0:= new `java.lang.StringBuilder`;
  #L3b6b52.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6b58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6b5e.  call temp:= `toString`(v5) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6b64.  v1:= temp @kind object;
  #L3b6b66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6b6c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6b72.  v0:= temp @kind object;
  #L3b6b74.  v1:= v0 @kind object;
  #L3b6b76.  v0:= 0I;
  #L3b6b78.  v8:= v8 + 1;
  #L3b6b7c.  goto L3b6ad8;
  #L3b6b7e.  v7:= new `java.lang.IllegalArgumentException`;
  #L3b6b82.  call `<init>`(v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L3b6b88.  throw v7;
  #L3b6b8a.  return v1 @kind object;
  #L3b6b8c.  v7:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L3b6b90.  call `<init>`(v7) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L3b6b96.  throw v7;
}
procedure `void` `clearByteArray`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.clearByteArray:(Lcom/mastercard/api/bytes/ByteArray;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3b6dc8.  if v0 == 0 then goto L3b6dd2;
  #L3b6dcc.  call `clear`(v0) @signature `Lcom/mastercard/api/bytes/ByteArray;.clear:()V` @kind interface;
  #L3b6dd2.  return @kind void;
}
procedure `void` `clearByteArray`(`byte`[] v3 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.clearByteArray:([B)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b6d9c.  if v3 != 0 then goto L3b6da2;
  #L3b6da0.  return @kind void;
  #L3b6da2.  v0:= length @variable v3;
  #L3b6da4.  v1:= 0I;
  #L3b6da6.  v2:= 0I;
  #L3b6da8.  if v2 >= v0 then goto L3b6db6;
  #L3b6dac.  v3[v2]:= v1 @kind byte;
  #L3b6db0.  v2:= v2 + 1;
  #L3b6db4.  goto L3b6da8;
  #L3b6db6.  return @kind void;
}
procedure `void` `clearCharArray`(`char`[] v3 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.clearCharArray:([C)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b6de4.  v0:= length @variable v3;
  #L3b6de6.  v1:= 0I;
  #L3b6de8.  v2:= 0I;
  #L3b6dea.  if v2 >= v0 then goto L3b6df8;
  #L3b6dee.  v3[v2]:= v1 @kind char;
  #L3b6df2.  v2:= v2 + 1;
  #L3b6df6.  goto L3b6dea;
  #L3b6df8.  return @kind void;
}
procedure `byte`[] `encodeByteArray`(`byte`[] v8 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.encodeByteArray:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b651c.  v0:= length @variable v8;
  #L3b651e.  v1:= v0 %% 2;
  #L3b6522.  v2:= v0 + v1 @kind int;
  #L3b6526.  v2:= v2 / 2;
  #L3b652a.  v2:= new `byte`[v2];
  #L3b652e.  v3:= 0I;
  #L3b6530.  v4:= 0I;
  #L3b6532.  v5:= v0 + -2;
  #L3b6536.  if v3 > v5 then goto L3b656c;
  #L3b653a.  v5:= v4 + 1;
  #L3b653e.  v6:= v3 + 1;
  #L3b6542.  v3:= v8[v3] @kind byte;
  #L3b6546.  v3:= v3 + -48;
  #L3b654a.  v3:= v3 ^< 4;
  #L3b654e.  v3:= (`byte`) v3 @kind i2b;
  #L3b6550.  v7:= v6 + 1;
  #L3b6554.  v6:= v8[v6] @kind byte;
  #L3b6558.  v6:= v6 + -48;
  #L3b655c.  v6:= (`byte`) v6 @kind i2b;
  #L3b655e.  v3:= v3 ^| v6 @kind int;
  #L3b6560.  v3:= (`byte`) v3 @kind i2b;
  #L3b6562.  v2[v4]:= v3 @kind byte;
  #L3b6566.  v4:= v5;
  #L3b6568.  v3:= v7;
  #L3b656a.  goto L3b6532;
  #L3b656c.  v0:= 1I;
  #L3b656e.  if v1 != v0 then goto L3b6588;
  #L3b6572.  v8:= v8[v3] @kind byte;
  #L3b6576.  v8:= v8 + -48;
  #L3b657a.  v8:= v8 ^< 4;
  #L3b657e.  v8:= v8 ^| 15;
  #L3b6582.  v8:= (`byte`) v8 @kind i2b;
  #L3b6584.  v2[v4]:= v8 @kind byte;
  #L3b6588.  return v2 @kind object;
}
procedure `boolean` `equals`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.equals:([B[B)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b6388.  v0:= 1I;
  #L3b638a.  if v5 != 0 then goto L3b6394;
  #L3b638e.  if v6 != 0 then goto L3b6394;
  #L3b6392.  return v0;
  #L3b6394.  v1:= 0I;
  #L3b6396.  if v5 == 0 then goto L3b63c4;
  #L3b639a.  if v6 == 0 then goto L3b63c4;
  #L3b639e.  v2:= length @variable v5;
  #L3b63a0.  v3:= length @variable v6;
  #L3b63a2.  if v2 != v3 then goto L3b63c4;
  #L3b63a6.  v2:= 0I;
  #L3b63a8.  v3:= length @variable v5;
  #L3b63aa.  if v2 >= v3 then goto L3b63c2;
  #L3b63ae.  v3:= v5[v2] @kind byte;
  #L3b63b2.  v4:= v6[v2] @kind byte;
  #L3b63b6.  if v3 == v4 then goto L3b63bc;
  #L3b63ba.  return v1;
  #L3b63bc.  v2:= v2 + 1;
  #L3b63c0.  goto L3b63a8;
  #L3b63c2.  return v0;
  #L3b63c4.  return v1;
}
procedure `boolean` `equals`(`byte`[] v5 @kind object, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `int` v9 ) @signature `Lcom/mastercard/api/utils/Utils;.equals:([B[BIII)Z` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b63d8.  v0:= 1I;
  #L3b63da.  if v5 != 0 then goto L3b63e4;
  #L3b63de.  if v6 != 0 then goto L3b63e4;
  #L3b63e2.  return v0;
  #L3b63e4.  v1:= 0I;
  #L3b63e6.  if v5 == 0 then goto L3b6426;
  #L3b63ea.  if v6 == 0 then goto L3b6426;
  #L3b63ee.  v2:= v7 + v9 @kind int;
  #L3b63f2.  v3:= length @variable v5;
  #L3b63f4.  if v2 > v3 then goto L3b6426;
  #L3b63f8.  v2:= v8 + v9 @kind int;
  #L3b63fc.  v3:= length @variable v6;
  #L3b63fe.  if v2 > v3 then goto L3b6426;
  #L3b6402.  v2:= 0I;
  #L3b6404.  if v2 >= v9 then goto L3b6424;
  #L3b6408.  v3:= v7 + v2 @kind int;
  #L3b640c.  v3:= v5[v3] @kind byte;
  #L3b6410.  v4:= v8 + v2 @kind int;
  #L3b6414.  v4:= v6[v4] @kind byte;
  #L3b6418.  if v3 == v4 then goto L3b641e;
  #L3b641c.  return v1;
  #L3b641e.  v2:= v2 + 1;
  #L3b6422.  goto L3b6404;
  #L3b6424.  return v0;
  #L3b6426.  return v1;
}
procedure `int` `findTag`(`byte` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/mastercard/api/utils/Utils;.findTag:(B[BII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b6758.  v0:= 0I;
  #L3b675a.  if v0 >= v6 then goto L3b6772;
  #L3b675e.  v1:= v5 + v0 @kind int;
  #L3b6762.  v2:= v4[v1] @kind byte;
  #L3b6766.  if v2 != v3 then goto L3b676c;
  #L3b676a.  return v1;
  #L3b676c.  v0:= v0 + 1;
  #L3b6770.  goto L3b675a;
  #L3b6772.  v3:= new `com.mastercard.api.secureelement.CardException`;
  #L3b6776.  call `<init>`(v3) @signature `Lcom/mastercard/api/secureelement/CardException;.<init>:()V` @kind direct;
  #L3b677c.  throw v3;
}
procedure `int` `findTag`(`short` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/mastercard/api/utils/Utils;.findTag:(S[BII)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b6790.  v0:= 0I;
  #L3b6792.  if v0 >= v6 then goto L3b67ae;
  #L3b6796.  v1:= v5 + v0 @kind int;
  #L3b679a.  call temp:= `readShort`(v4, v1) @signature `Lcom/mastercard/api/utils/Utils;.readShort:([BI)S` @kind static;
  #L3b67a0.  v2:= temp;
  #L3b67a2.  if v2 != v3 then goto L3b67a8;
  #L3b67a6.  return v1;
  #L3b67a8.  v0:= v0 + 1;
  #L3b67ac.  goto L3b6792;
  #L3b67ae.  v3:= new `com.mastercard.api.secureelement.CardException`;
  #L3b67b2.  call `<init>`(v3) @signature `Lcom/mastercard/api/secureelement/CardException;.<init>:()V` @kind direct;
  #L3b67b8.  throw v3;
}
procedure `java.lang.String` `getAsHexString`(`int` v1 , `boolean` v2 ) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:(IZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3b6c54.  v0:= new `java.lang.StringBuilder`;
  #L3b6c58.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b6c5e.  if v2 == 0 then goto L3b6c68;
  #L3b6c62.  v2:= "0x" @kind object;
  #L3b6c66.  goto L3b6c6c;
  #L3b6c68.  v2:= "" @kind object;
  #L3b6c6c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6c72.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3b6c78.  v1:= temp @kind object;
  #L3b6c7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b6c80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6c86.  v1:= temp @kind object;
  #L3b6c88.  return v1 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v1 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b6ba8.  v0:= 0I;
  #L3b6baa.  call temp:= `getAsHexString`(v1, v0) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BZ)Ljava/lang/String;` @kind static;
  #L3b6bb0.  v1:= temp @kind object;
  #L3b6bb2.  return v1 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3b6be4.  v0:= 0I;
  #L3b6be6.  call temp:= `getAsHexString`(v1, v2, v3, v0) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BIIZ)Ljava/lang/String;` @kind static;
  #L3b6bec.  v1:= temp @kind object;
  #L3b6bee.  return v1 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v2 @kind object, `int` v3 , `int` v4 , `boolean` v5 ) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BIIZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L3b6c00.  v5:= new `java.lang.StringBuffer`;
  #L3b6c04.  call `<init>`(v5) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3b6c0a.  v0:= v3 + v4 @kind int;
  #L3b6c0e.  v1:= length @variable v2;
  #L3b6c10.  if v0 <= v1 then goto L3b6c18;
  #L3b6c14.  v4:= length @variable v2;
  #L3b6c16.  v4:= v4 - v3 @kind int;
  #L3b6c18.  v0:= v3;
  #L3b6c1a.  v1:= v3 + v4 @kind int;
  #L3b6c1e.  if v0 >= v1 then goto L3b6c32;
  #L3b6c22.  v1:= v2[v0] @kind byte;
  #L3b6c26.  call `a`(v1, v5) @signature `Lcom/mastercard/api/utils/Utils;.a:(ILjava/lang/StringBuffer;)V` @kind static;
  #L3b6c2c.  v0:= v0 + 1;
  #L3b6c30.  goto L3b6c1a;
  #L3b6c32.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6c38.  v2:= temp @kind object;
  #L3b6c3a.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b6c40.  v2:= temp @kind object;
  #L3b6c42.  return v2 @kind object;
}
procedure `java.lang.String` `getAsHexString`(`byte`[] v2 @kind object, `boolean` v3 ) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BZ)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;

  #L3b6bc4.  v0:= length @variable v2;
  #L3b6bc6.  v1:= 0I;
  #L3b6bc8.  call temp:= `getAsHexString`(v2, v1, v0, v3) @signature `Lcom/mastercard/api/utils/Utils;.getAsHexString:([BIIZ)Ljava/lang/String;` @kind static;
  #L3b6bce.  v2:= temp @kind object;
  #L3b6bd0.  return v2 @kind object;
}
procedure `boolean` `isZero`(`com.mastercard.api.bytes.ByteArray` v4 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.isZero:(Lcom/mastercard/api/bytes/ByteArray;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6438.  v0:= 0I;
  #L3b643a.  if v4 != 0 then goto L3b6440;
  #L3b643e.  return v0;
  #L3b6440.  call temp:= `getLength`(v4) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b6446.  v1:= temp;
  #L3b6448.  call temp:= `getBytes`(v4) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b644e.  v4:= temp @kind object;
  #L3b6450.  v2:= 0I;
  #L3b6452.  if v2 >= v1 then goto L3b6466;
  #L3b6456.  v3:= v4[v2] @kind byte;
  #L3b645a.  if v3 == 0 then goto L3b6460;
  #L3b645e.  return v0;
  #L3b6460.  v2:= v2 + 1;
  #L3b6464.  goto L3b6452;
  #L3b6466.  v4:= 1I;
  #L3b6468.  return v4;
}
procedure `int` `lastIndexOf`(`java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.lastIndexOf:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3b67cc.  v0:= -1I;
  #L3b67ce.  v1:= 0I;
  #L3b67d0.  v2:= -1I;
  #L3b67d2.  if v1 == v0 then goto L3b67ea;
  #L3b67d6.  v1:= v2 + 1;
  #L3b67da.  call temp:= `indexOf`(v3, v4, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L3b67e0.  v1:= temp;
  #L3b67e2.  if v1 == v0 then goto L3b67d2;
  #L3b67e6.  v2:= v1;
  #L3b67e8.  goto L3b67d2;
  #L3b67ea.  return v2;
}
procedure `byte`[] `longToBCD`(`long` v12 , `int` v14 ) @signature `Lcom/mastercard/api/utils/Utils;.longToBCD:(JI)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L3b659c.  v0:= 0I;
  #L3b659e.  v3:= 0I;
  #L3b65a0.  v1:= v12 @kind wide;
  #L3b65a2.  v4:= 0L;
  #L3b65a6.  v6:= 10L;
  #L3b65aa.  v8:= lcmp(v1, v4);
  #L3b65ae.  if v8 == 0 then goto L3b65ba;
  #L3b65b2.  v3:= v3 + 1;
  #L3b65b6.  v1:= v1 / v6 @kind long;
  #L3b65b8.  goto L3b65a2;
  #L3b65ba.  v1:= v3 %% 2;
  #L3b65be.  if v1 != 0 then goto L3b65c8;
  #L3b65c2.  v2:= v3 / 2;
  #L3b65c6.  goto L3b65d0;
  #L3b65c8.  v2:= v3 + 1;
  #L3b65cc.  v2:= v2 / 2;
  #L3b65d0.  v4:= 1I;
  #L3b65d2.  if v1 == 0 then goto L3b65da;
  #L3b65d6.  v1:= 1I;
  #L3b65d8.  goto L3b65dc;
  #L3b65da.  v1:= 0I;
  #L3b65dc.  v5:= new `byte`[v2];
  #L3b65e0.  v8:= 0I;
  #L3b65e2.  if v8 >= v3 then goto L3b6634;
  #L3b65e6.  v9:= v12 %% v6 @kind long;
  #L3b65ea.  v10:= (`int`) v9 @kind l2i;
  #L3b65ec.  v9:= (`byte`) v10 @kind i2b;
  #L3b65ee.  v10:= v3 + -1;
  #L3b65f2.  if v8 != v10 then goto L3b6604;
  #L3b65f6.  if v1 == 0 then goto L3b6604;
  #L3b65fa.  v10:= v8 / 2;
  #L3b65fe.  v5[v10]:= v9 @kind byte;
  #L3b6602.  goto L3b662c;
  #L3b6604.  v10:= v8 %% 2;
  #L3b6608.  if v10 != 0 then goto L3b6616;
  #L3b660c.  v10:= v8 / 2;
  #L3b6610.  v5[v10]:= v9 @kind byte;
  #L3b6614.  goto L3b662c;
  #L3b6616.  v9:= v9 ^< 4;
  #L3b661a.  v9:= (`byte`) v9 @kind i2b;
  #L3b661c.  v10:= v8 / 2;
  #L3b6620.  v11:= v5[v10] @kind byte;
  #L3b6624.  v9:= v9 ^| v11 @kind int;
  #L3b6626.  v9:= (`byte`) v9 @kind i2b;
  #L3b6628.  v5[v10]:= v9 @kind byte;
  #L3b662c.  v12:= v12 / v6 @kind long;
  #L3b662e.  v8:= v8 + 1;
  #L3b6632.  goto L3b65e2;
  #L3b6634.  v12:= 0I;
  #L3b6636.  v13:= v2 / 2;
  #L3b663a.  if v12 >= v13 then goto L3b665a;
  #L3b663e.  v13:= v5[v12] @kind byte;
  #L3b6642.  v1:= v2 - v12 @kind int;
  #L3b6646.  v1:= v1 - v4 @kind int;
  #L3b6648.  v3:= v5[v1] @kind byte;
  #L3b664c.  v5[v12]:= v3 @kind byte;
  #L3b6650.  v5[v1]:= v13 @kind byte;
  #L3b6654.  v12:= v12 + 1;
  #L3b6658.  goto L3b6636;
  #L3b665a.  if v14 != v2 then goto L3b6660;
  #L3b665e.  return v5 @kind object;
  #L3b6660.  v12:= new `byte`[v14];
  #L3b6664.  v14:= v14 - v2 @kind int;
  #L3b6666.  call `arraycopy`(v5, v0, v12, v14, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b666c.  return v12 @kind object;
}
procedure `short` `makeShort`(`byte` v0 , `byte` v1 ) @signature `Lcom/mastercard/api/utils/Utils;.makeShort:(BB)S` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3b6cfc.  v0:= v0 ^& 255;
  #L3b6d00.  v0:= (`short`) v0 @kind i2s;
  #L3b6d02.  v0:= v0 ^& 255;
  #L3b6d06.  v0:= v0 ^< 8;
  #L3b6d0a.  v0:= (`short`) v0 @kind i2s;
  #L3b6d0c.  v1:= v1 ^& 255;
  #L3b6d10.  v1:= (`short`) v1 @kind i2s;
  #L3b6d12.  v0:= v0 ^| v1 @kind int;
  #L3b6d14.  v0:= (`short`) v0 @kind i2s;
  #L3b6d16.  return v0;
}
procedure `byte`[] `prependLengthToByteArray`(`byte`[] v5 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.prependLengthToByteArray:([B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b6680.  v0:= 2I;
  #L3b6682.  v1:= new `byte`[v0];
  #L3b6686.  v2:= length @variable v5;
  #L3b6688.  v2:= v2 ^>> 8;
  #L3b668c.  v2:= (`byte`) v2 @kind i2b;
  #L3b668e.  v3:= 0I;
  #L3b6690.  v1[v3]:= v2 @kind byte;
  #L3b6694.  v2:= length @variable v5;
  #L3b6696.  v2:= (`byte`) v2 @kind i2b;
  #L3b6698.  v4:= 1I;
  #L3b669a.  v1[v4]:= v2 @kind byte;
  #L3b669e.  v2:= length @variable v5;
  #L3b66a0.  v2:= v2 + v0 @kind int;
  #L3b66a2.  v2:= new `byte`[v2];
  #L3b66a6.  call `arraycopy`(v1, v3, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b66ac.  v1:= length @variable v5;
  #L3b66ae.  call `arraycopy`(v5, v3, v2, v0, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b66b4.  return v2 @kind object;
}
procedure `byte`[] `readHexString`(`java.lang.String` v5 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.readHexString:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b66c8.  v0:= 0I;
  #L3b66ca.  if v5 == 0 then goto L3b6742;
  #L3b66ce.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b66d4.  v1:= temp;
  #L3b66d6.  if v1 == 0 then goto L3b6742;
  #L3b66da.  v1:= "0x" @kind object;
  #L3b66de.  call temp:= `equals`(v5, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b66e4.  v2:= temp;
  #L3b66e6.  if v2 == 0 then goto L3b66ec;
  #L3b66ea.  goto L3b6742;
  #L3b66ec.  call temp:= `startsWith`(v5, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L3b66f2.  v1:= temp;
  #L3b66f4.  v2:= 2I;
  #L3b66f6.  if v1 == 0 then goto L3b6702;
  #L3b66fa.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3b6700.  v5:= temp @kind object;
  #L3b6702.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b6708.  v1:= temp;
  #L3b670a.  v1:= v1 / v2 @kind int;
  #L3b670c.  v2:= new `byte`[v1];
  #L3b6710.  if v0 >= v1 then goto L3b6740;
  #L3b6714.  v3:= v0 * 2;
  #L3b6718.  v4:= v3 + 2;
  #L3b671c.  call temp:= `substring`(v5, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3b6722.  v3:= temp @kind object;
  #L3b6724.  v4:= 16I;
  #L3b6728.  call temp:= `parseInt`(v3, v4) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L3b672e.  v3:= temp;
  #L3b6730.  v3:= v3 ^& 255;
  #L3b6734.  v3:= (`byte`) v3 @kind i2b;
  #L3b6736.  v2[v0]:= v3 @kind byte;
  #L3b673a.  v0:= v0 + 1;
  #L3b673e.  goto L3b6710;
  #L3b6740.  return v2 @kind object;
  #L3b6742.  v5:= new `byte`[v0];
  #L3b6746.  return v5 @kind object;
}
procedure `int` `readInt`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/mastercard/api/utils/Utils;.readInt:([BI)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3b67fc.  v0:= 0I;
  #L3b67fe.  call temp:= `readInt`(v1, v2, v0) @signature `Lcom/mastercard/api/utils/Utils;.readInt:([BIZ)I` @kind static;
  #L3b6804.  v1:= temp;
  #L3b6806.  return v1;
}
procedure `int` `readInt`(`byte`[] v4 @kind object, `int` v5 , `boolean` v6 ) @signature `Lcom/mastercard/api/utils/Utils;.readInt:([BIZ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b6818.  v0:= length @variable v4;
  #L3b681a.  v0:= v0 - v5 @kind int;
  #L3b681c.  v1:= 0I;
  #L3b681e.  v2:= 4I;
  #L3b6820.  if v0 >= v2 then goto L3b683a;
  #L3b6824.  v2:= new `byte`[v2];
  #L3b6828.  goto L3b68c0;
  #L3b682e.  v3:= v0 - 4;
  #L3b6832.  call `arraycopy`(v4, v1, v2, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b6838.  v4:= v2 @kind object;
  #L3b683a.  if v6 == 0 then goto L3b6880;
  #L3b683e.  v6:= v5 + 3;
  #L3b6842.  v6:= v4[v6] @kind byte;
  #L3b6846.  v6:= v6 ^& 255;
  #L3b684a.  v6:= v6 ^< 24;
  #L3b684e.  v0:= v5 + 2;
  #L3b6852.  v0:= v4[v0] @kind byte;
  #L3b6856.  v0:= v0 ^& 255;
  #L3b685a.  v0:= v0 ^< 16;
  #L3b685e.  v6:= v6 ^| v0 @kind int;
  #L3b6860.  v0:= v5 + 1;
  #L3b6864.  v0:= v4[v0] @kind byte;
  #L3b6868.  v0:= v0 ^& 255;
  #L3b686c.  v0:= v0 ^< 8;
  #L3b6870.  v6:= v6 ^| v0 @kind int;
  #L3b6872.  v5:= v5 + v1 @kind int;
  #L3b6874.  v4:= v4[v5] @kind byte;
  #L3b6878.  v4:= v4 ^& 255;
  #L3b687c.  v4:= v4 ^| v6 @kind int;
  #L3b687e.  return v4;
  #L3b6880.  v6:= v5 + 0;
  #L3b6884.  v6:= v4[v6] @kind byte;
  #L3b6888.  v6:= v6 ^& 255;
  #L3b688c.  v6:= v6 ^< 24;
  #L3b6890.  v0:= v5 + 1;
  #L3b6894.  v0:= v4[v0] @kind byte;
  #L3b6898.  v0:= v0 ^& 255;
  #L3b689c.  v0:= v0 ^< 16;
  #L3b68a0.  v6:= v6 ^| v0 @kind int;
  #L3b68a2.  v0:= v5 + 2;
  #L3b68a6.  v0:= v4[v0] @kind byte;
  #L3b68aa.  v0:= v0 ^& 255;
  #L3b68ae.  v0:= v0 ^< 8;
  #L3b68b2.  v6:= v6 ^| v0 @kind int;
  #L3b68b4.  v5:= v5 + 3;
  #L3b68b8.  v4:= v4[v5] @kind byte;
  #L3b68bc.  goto L3b6878;
  #L3b68be.  
  #L3b68c0.  v2:= (0I, 0I, 0I, 0I) @kind object;
  #L3b68cb.  goto L3b682e;
}
procedure `int` `readShort`(`com.mastercard.api.bytes.ByteArray` v1 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.readShort:(Lcom/mastercard/api/bytes/ByteArray;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3b6924.  call temp:= `getBytes`(v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b692a.  v1:= temp @kind object;
  #L3b692c.  v0:= 0I;
  #L3b692e.  call temp:= `readShort`(v1, v0) @signature `Lcom/mastercard/api/utils/Utils;.readShort:([BI)S` @kind static;
  #L3b6934.  v1:= temp;
  #L3b6936.  return v1;
}
procedure `int` `readShort`(`byte`[] v1 @kind object, `int` v2 , `boolean` v3 ) @signature `Lcom/mastercard/api/utils/Utils;.readShort:([BIZ)I` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3b68dc.  v0:= 65535I;
  #L3b68e2.  if v3 == 0 then goto L3b6900;
  #L3b68e6.  v3:= v2 + 1;
  #L3b68ea.  v3:= v1[v3] @kind byte;
  #L3b68ee.  v3:= v3 ^< 8;
  #L3b68f2.  v1:= v1[v2] @kind byte;
  #L3b68f6.  v1:= v1 ^& 255;
  #L3b68fa.  v1:= v1 ^| v3 @kind int;
  #L3b68fc.  v1:= v1 ^& v0 @kind int;
  #L3b68fe.  return v1;
  #L3b6900.  v3:= v1[v2] @kind byte;
  #L3b6904.  v3:= v3 ^< 8;
  #L3b6908.  v2:= v2 + 1;
  #L3b690c.  v1:= v1[v2] @kind byte;
  #L3b6910.  goto L3b68f6;
}
procedure `short` `readShort`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lcom/mastercard/api/utils/Utils;.readShort:([BI)S` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;

  #L3b6d28.  v0:= 0I;
  #L3b6d2a.  call temp:= `readShort`(v1, v2, v0) @signature `Lcom/mastercard/api/utils/Utils;.readShort:([BIZ)I` @kind static;
  #L3b6d30.  v1:= temp;
  #L3b6d32.  v1:= (`short`) v1 @kind i2s;
  #L3b6d34.  return v1;
}
procedure `boolean` `superior`(`com.mastercard.api.bytes.ByteArray` v5 @kind object, `com.mastercard.api.bytes.ByteArray` v6 @kind object) @signature `Lcom/mastercard/api/utils/Utils;.superior:(Lcom/mastercard/api/bytes/ByteArray;Lcom/mastercard/api/bytes/ByteArray;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b647c.  v0:= 0I;
  #L3b647e.  if v6 == 0 then goto L3b64c2;
  #L3b6482.  if v5 != 0 then goto L3b6488;
  #L3b6486.  goto L3b64c2;
  #L3b6488.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b648e.  v1:= temp;
  #L3b6490.  v2:= 1I;
  #L3b6492.  v1:= v1 - v2 @kind int;
  #L3b6494.  if v1 < 0 then goto L3b64c2;
  #L3b6498.  call temp:= `getByte`(v5, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @kind interface;
  #L3b649e.  v3:= temp;
  #L3b64a0.  v3:= v3 ^& 255;
  #L3b64a4.  call temp:= `getByte`(v6, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @kind interface;
  #L3b64aa.  v4:= temp;
  #L3b64ac.  v4:= v4 ^& 255;
  #L3b64b0.  if v3 == v4 then goto L3b64bc;
  #L3b64b4.  if v3 <= v4 then goto L3b64ba;
  #L3b64b8.  v0:= 1I;
  #L3b64ba.  return v0;
  #L3b64bc.  v1:= v1 + -1;
  #L3b64c0.  goto L3b6494;
  #L3b64c2.  return v0;
}
procedure `java.lang.String` `toHexString`(`byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/mastercard/api/utils/Utils;.toHexString:([BI)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b6c9c.  v0:= new `java.lang.StringBuffer`;
  #L3b6ca0.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3b6ca6.  v1:= 0I;
  #L3b6ca8.  if v1 >= v6 then goto L3b6ce2;
  #L3b6cac.  v2:= v5[v1] @kind byte;
  #L3b6cb0.  v3:= v2 ^> 4;
  #L3b6cb4.  v3:= v3 ^& 15;
  #L3b6cb8.  v4:= "0123456789ABCDEF" @kind object;
  #L3b6cbc.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b6cc2.  v3:= temp;
  #L3b6cc4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b6cca.  v2:= v2 ^& 15;
  #L3b6cce.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b6cd4.  v2:= temp;
  #L3b6cd6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b6cdc.  v1:= v1 + 1;
  #L3b6ce0.  goto L3b6ca8;
  #L3b6ce2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b6ce8.  v5:= temp @kind object;
  #L3b6cea.  return v5 @kind object;
}
procedure `void` `writeInt`(`com.mastercard.api.bytes.ByteArray` v5 @kind object, `int` v6 , `long` v7 ) @signature `Lcom/mastercard/api/utils/Utils;.writeInt:(Lcom/mastercard/api/bytes/ByteArray;IJ)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b6e0c.  v0:= v6 + 0;
  #L3b6e10.  v1:= 24I;
  #L3b6e14.  v1:= v7 ^> v1 @kind long;
  #L3b6e18.  v3:= 255L;
  #L3b6e1c.  v1:= v1 ^& v3 @kind long;
  #L3b6e1e.  v2:= (`int`) v1 @kind l2i;
  #L3b6e20.  v1:= (`byte`) v2 @kind i2b;
  #L3b6e22.  call `setByte`(v5, v0, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b6e28.  v0:= v6 + 1;
  #L3b6e2c.  v1:= 16I;
  #L3b6e30.  v1:= v7 ^> v1 @kind long;
  #L3b6e34.  v1:= v1 ^& v3 @kind long;
  #L3b6e36.  v2:= (`int`) v1 @kind l2i;
  #L3b6e38.  v1:= (`byte`) v2 @kind i2b;
  #L3b6e3a.  call `setByte`(v5, v0, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b6e40.  v0:= v6 + 2;
  #L3b6e44.  v1:= 8I;
  #L3b6e48.  v1:= v7 ^> v1 @kind long;
  #L3b6e4c.  v1:= v1 ^& v3 @kind long;
  #L3b6e4e.  v2:= (`int`) v1 @kind l2i;
  #L3b6e50.  v1:= (`byte`) v2 @kind i2b;
  #L3b6e52.  call `setByte`(v5, v0, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b6e58.  v6:= v6 + 3;
  #L3b6e5c.  v7:= v7 ^& v3 @kind long;
  #L3b6e5e.  v8:= (`int`) v7 @kind l2i;
  #L3b6e60.  v7:= (`byte`) v8 @kind i2b;
  #L3b6e62.  call `setByte`(v5, v6, v7) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b6e68.  return @kind void;
}
