record `com.mastercard.api.utils.tlv.BERTLVUtils` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.mastercard.api.utils.tlv.BERTLVUtils` v0 @kind this) @signature `Lcom/mastercard/api/utils/tlv/BERTLVUtils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b838c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b8392.  return @kind void;
}
procedure `int` `getNbBytes`(`int` v2 ) @signature `Lcom/mastercard/api/utils/tlv/BERTLVUtils;.getNbBytes:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b80d8.  v0:= 5I;
  #L3b80da.  if v2 < 0 then goto L3b810e;
  #L3b80de.  v1:= 128I;
  #L3b80e2.  if v2 >= v1 then goto L3b80ea;
  #L3b80e6.  v2:= 1I;
  #L3b80e8.  return v2;
  #L3b80ea.  v1:= 256I;
  #L3b80ee.  if v2 >= v1 then goto L3b80f6;
  #L3b80f2.  v2:= 2I;
  #L3b80f4.  return v2;
  #L3b80f6.  v1:= 65536I;
  #L3b80fa.  if v2 >= v1 then goto L3b8102;
  #L3b80fe.  v2:= 3I;
  #L3b8100.  return v2;
  #L3b8102.  v1:= 16777216I;
  #L3b8106.  if v2 >= v1 then goto L3b810e;
  #L3b810a.  v2:= 4I;
  #L3b810c.  return v2;
  #L3b810e.  return v0;
}
procedure `int` `getTLVLength`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/mastercard/api/utils/tlv/BERTLVUtils;.getTLVLength:([BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b8120.  v0:= v2[v3] @kind byte;
  #L3b8124.  if v0 <= 0 then goto L3b8142;
  #L3b8128.  v0:= v2[v3] @kind byte;
  #L3b812c.  v0:= v0 ^& 255;
  #L3b8130.  v1:= 128I;
  #L3b8134.  if v0 >= v1 then goto L3b8142;
  #L3b8138.  v2:= v2[v3] @kind byte;
  #L3b813c.  v2:= v2 ^& 255;
  #L3b8140.  return v2;
  #L3b8142.  v0:= v2[v3] @kind byte;
  #L3b8146.  v1:= -127I;
  #L3b814a.  if v0 != v1 then goto L3b815c;
  #L3b814e.  v3:= v3 + 1;
  #L3b8152.  v2:= v2[v3] @kind byte;
  #L3b8156.  v2:= v2 ^& 255;
  #L3b815a.  return v2;
  #L3b815c.  v0:= v2[v3] @kind byte;
  #L3b8160.  v1:= -126I;
  #L3b8164.  if v0 != v1 then goto L3b8188;
  #L3b8168.  v0:= v3 + 1;
  #L3b816c.  v0:= v2[v0] @kind byte;
  #L3b8170.  v0:= v0 ^& 255;
  #L3b8174.  v0:= v0 ^< 8;
  #L3b8178.  v3:= v3 + 2;
  #L3b817c.  v2:= v2[v3] @kind byte;
  #L3b8180.  v2:= v2 ^& 255;
  #L3b8184.  v2:= v2 ^| v0 @kind int;
  #L3b8186.  return v2;
  #L3b8188.  v0:= v2[v3] @kind byte;
  #L3b818c.  v1:= -125I;
  #L3b8190.  if v0 != v1 then goto L3b81c6;
  #L3b8194.  v0:= v3 + 1;
  #L3b8198.  v0:= v2[v0] @kind byte;
  #L3b819c.  v0:= v0 ^& 255;
  #L3b81a0.  v0:= v0 ^< 16;
  #L3b81a4.  v1:= v3 + 2;
  #L3b81a8.  v1:= v2[v1] @kind byte;
  #L3b81ac.  v1:= v1 ^& 255;
  #L3b81b0.  v1:= v1 ^< 8;
  #L3b81b4.  v0:= v0 ^| v1 @kind int;
  #L3b81b6.  v3:= v3 + 3;
  #L3b81ba.  v2:= v2[v3] @kind byte;
  #L3b81be.  v2:= v2 ^& 255;
  #L3b81c2.  v2:= v2 ^| v0 @kind int;
  #L3b81c4.  return v2;
  #L3b81c6.  v0:= v2[v3] @kind byte;
  #L3b81ca.  v1:= -124I;
  #L3b81ce.  if v0 != v1 then goto L3b8216;
  #L3b81d2.  v0:= v3 + 0;
  #L3b81d6.  v0:= v2[v0] @kind byte;
  #L3b81da.  v0:= v0 ^& 255;
  #L3b81de.  v0:= v0 ^< 24;
  #L3b81e2.  v1:= v3 + 1;
  #L3b81e6.  v1:= v2[v1] @kind byte;
  #L3b81ea.  v1:= v1 ^& 255;
  #L3b81ee.  v1:= v1 ^< 16;
  #L3b81f2.  v0:= v0 ^| v1 @kind int;
  #L3b81f4.  v1:= v3 + 2;
  #L3b81f8.  v1:= v2[v1] @kind byte;
  #L3b81fc.  v1:= v1 ^& 255;
  #L3b8200.  v1:= v1 ^< 8;
  #L3b8204.  v0:= v0 ^| v1 @kind int;
  #L3b8206.  v3:= v3 + 3;
  #L3b820a.  v2:= v2[v3] @kind byte;
  #L3b820e.  v2:= v2 ^& 255;
  #L3b8212.  v2:= v2 ^| v0 @kind int;
  #L3b8214.  return v2;
  #L3b8216.  v2:= v2[v3] @kind byte;
  #L3b821a.  v2:= v2 ^& 255;
  #L3b821e.  return v2;
}
procedure `int` `getTLVLengthByte`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/mastercard/api/utils/tlv/BERTLVUtils;.getTLVLengthByte:([BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b8230.  v0:= v2[v3] @kind byte;
  #L3b8234.  v1:= -127I;
  #L3b8238.  if v0 != v1 then goto L3b8240;
  #L3b823c.  v2:= 2I;
  #L3b823e.  return v2;
  #L3b8240.  v0:= v2[v3] @kind byte;
  #L3b8244.  v1:= -126I;
  #L3b8248.  if v0 != v1 then goto L3b8250;
  #L3b824c.  v2:= 3I;
  #L3b824e.  return v2;
  #L3b8250.  v0:= v2[v3] @kind byte;
  #L3b8254.  v1:= -125I;
  #L3b8258.  if v0 != v1 then goto L3b8260;
  #L3b825c.  v2:= 4I;
  #L3b825e.  return v2;
  #L3b8260.  v2:= v2[v3] @kind byte;
  #L3b8264.  v3:= -124I;
  #L3b8268.  if v2 != v3 then goto L3b8270;
  #L3b826c.  v2:= 5I;
  #L3b826e.  return v2;
  #L3b8270.  v2:= 1I;
  #L3b8272.  return v2;
}
procedure `int` `setBERTLVLength`(`int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/mastercard/api/utils/tlv/BERTLVUtils;.setBERTLVLength:(I[BI)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3b8284.  v0:= 128I;
  #L3b8288.  if v2 >= v0 then goto L3b8298;
  #L3b828c.  v2:= (`byte`) v2 @kind i2b;
  #L3b828e.  v3[v4]:= v2 @kind byte;
  #L3b8292.  v4:= v4 + 1;
  #L3b8296.  return v4;
  #L3b8298.  v0:= 256I;
  #L3b829c.  if v2 >= v0 then goto L3b82b8;
  #L3b82a0.  v0:= -127I;
  #L3b82a4.  v3[v4]:= v0 @kind byte;
  #L3b82a8.  v0:= v4 + 1;
  #L3b82ac.  v2:= (`byte`) v2 @kind i2b;
  #L3b82ae.  v3[v0]:= v2 @kind byte;
  #L3b82b2.  v4:= v4 + 2;
  #L3b82b6.  return v4;
  #L3b82b8.  v0:= 65536I;
  #L3b82bc.  if v2 >= v0 then goto L3b82ea;
  #L3b82c0.  v0:= -126I;
  #L3b82c4.  v3[v4]:= v0 @kind byte;
  #L3b82c8.  v0:= v4 + 1;
  #L3b82cc.  v1:= v2 ^> 8;
  #L3b82d0.  v1:= (`byte`) v1 @kind i2b;
  #L3b82d2.  v3[v0]:= v1 @kind byte;
  #L3b82d6.  v0:= v4 + 2;
  #L3b82da.  v2:= v2 ^& 255;
  #L3b82de.  v2:= (`byte`) v2 @kind i2b;
  #L3b82e0.  v3[v0]:= v2 @kind byte;
  #L3b82e4.  v4:= v4 + 3;
  #L3b82e8.  return v4;
  #L3b82ea.  v0:= 16777216I;
  #L3b82ee.  if v2 >= v0 then goto L3b832e;
  #L3b82f2.  v0:= -125I;
  #L3b82f6.  v3[v4]:= v0 @kind byte;
  #L3b82fa.  v0:= v4 + 1;
  #L3b82fe.  v1:= v2 ^> 16;
  #L3b8302.  v1:= (`byte`) v1 @kind i2b;
  #L3b8304.  v3[v0]:= v1 @kind byte;
  #L3b8308.  v0:= v4 + 2;
  #L3b830c.  v1:= v2 ^> 8;
  #L3b8310.  v1:= v1 ^& 255;
  #L3b8314.  v1:= (`byte`) v1 @kind i2b;
  #L3b8316.  v3[v0]:= v1 @kind byte;
  #L3b831a.  v0:= v4 + 3;
  #L3b831e.  v2:= v2 ^& 255;
  #L3b8322.  v2:= (`byte`) v2 @kind i2b;
  #L3b8324.  v3[v0]:= v2 @kind byte;
  #L3b8328.  v4:= v4 + 4;
  #L3b832c.  return v4;
  #L3b832e.  v0:= -124I;
  #L3b8332.  v3[v4]:= v0 @kind byte;
  #L3b8336.  v0:= v4 + 1;
  #L3b833a.  v1:= v2 ^> 24;
  #L3b833e.  v1:= (`byte`) v1 @kind i2b;
  #L3b8340.  v3[v0]:= v1 @kind byte;
  #L3b8344.  v0:= v4 + 2;
  #L3b8348.  v1:= v2 ^> 16;
  #L3b834c.  v1:= v1 ^& 255;
  #L3b8350.  v1:= (`byte`) v1 @kind i2b;
  #L3b8352.  v3[v0]:= v1 @kind byte;
  #L3b8356.  v0:= v4 + 3;
  #L3b835a.  v1:= v2 ^> 8;
  #L3b835e.  v1:= v1 ^& 255;
  #L3b8362.  v1:= (`byte`) v1 @kind i2b;
  #L3b8364.  v3[v0]:= v1 @kind byte;
  #L3b8368.  v0:= v4 + 4;
  #L3b836c.  v2:= v2 ^& 255;
  #L3b8370.  v2:= (`byte`) v2 @kind i2b;
  #L3b8372.  v3[v0]:= v2 @kind byte;
  #L3b8376.  v4:= v4 + 5;
  #L3b837a.  return v4;
}
