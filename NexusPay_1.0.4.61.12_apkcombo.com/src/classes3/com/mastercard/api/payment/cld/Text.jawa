record `com.mastercard.api.payment.cld.Text` @kind class @AccessFlag PUBLIC {
  `byte`[] `com.mastercard.api.payment.cld.Text.a` @AccessFlag ;
  `byte` `com.mastercard.api.payment.cld.Text.b` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.Text.c` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.Text.d` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.Text.e` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.Text.f` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.Text.g` @AccessFlag PRIVATE;
  `int` `com.mastercard.api.payment.cld.Text.h` @AccessFlag PRIVATE;
}
global `byte` `@@com.mastercard.api.payment.cld.Text.BOLD` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.COURIER_NEW` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.FARRINGTON_7B` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.ISO_1073_1_OCR_A` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.ISO_1073_1_OCR_B` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.ITALIC` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.REVERSE_ITALIC` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.TIMES_NEW_ROMAN` @AccessFlag PUBLIC_STATIC_FINAL;
global `byte` `@@com.mastercard.api.payment.cld.Text.UNDERLINE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`com.mastercard.api.payment.cld.Text` v0 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b51c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b51c6.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.payment.cld.Text` v3 @kind this, `byte` v4 , `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lcom/mastercard/api/payment/cld/Text;.<init>:(B[BII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b51d8.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b51de.  v3.`com.mastercard.api.payment.cld.Text.b` @type ^`byte` := v4 @kind byte;
  #L3b51e2.  v4:= 8I;
  #L3b51e6.  if v7 < v4 then goto L3b52ae;
  #L3b51ea.  v0:= v6 + 0;
  #L3b51ee.  v0:= v5[v0] @kind byte;
  #L3b51f2.  v3.`com.mastercard.api.payment.cld.Text.d` @type ^`byte` := v0 @kind byte;
  #L3b51f6.  if v0 < 0 then goto L3b52a2;
  #L3b51fa.  v1:= 100I;
  #L3b51fe.  if v0 > v1 then goto L3b52a2;
  #L3b5202.  v0:= v6 + 1;
  #L3b5206.  v0:= v5[v0] @kind byte;
  #L3b520a.  v3.`com.mastercard.api.payment.cld.Text.c` @type ^`byte` := v0 @kind byte;
  #L3b520e.  if v0 < 0 then goto L3b5296;
  #L3b5212.  if v0 > v1 then goto L3b5296;
  #L3b5216.  v0:= v6 + 2;
  #L3b521a.  v0:= v5[v0] @kind byte;
  #L3b521e.  v3.`com.mastercard.api.payment.cld.Text.e` @type ^`byte` := v0 @kind byte;
  #L3b5222.  v0:= v6 + 3;
  #L3b5226.  v0:= v5[v0] @kind byte;
  #L3b522a.  v3.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` := v0 @kind byte;
  #L3b522e.  v0:= v6 + 4;
  #L3b5232.  v0:= v5[v0] @kind byte;
  #L3b5236.  v3.`com.mastercard.api.payment.cld.Text.g` @type ^`byte` := v0 @kind byte;
  #L3b523a.  if v0 < 0 then goto L3b528a;
  #L3b523e.  if v0 > v1 then goto L3b528a;
  #L3b5242.  v0:= v6 + 5;
  #L3b5246.  v1:= v5[v0] @kind byte;
  #L3b524a.  v1:= v1 ^& 255;
  #L3b524e.  v1:= v1 ^< 16;
  #L3b5252.  v2:= v0 + 1;
  #L3b5256.  v2:= v5[v2] @kind byte;
  #L3b525a.  v2:= v2 ^& 255;
  #L3b525e.  v2:= v2 ^< v4 @kind int;
  #L3b5260.  v1:= v1 ^| v2 @kind int;
  #L3b5262.  v0:= v0 + 2;
  #L3b5266.  v0:= v5[v0] @kind byte;
  #L3b526a.  v0:= v0 ^& 255;
  #L3b526e.  v0:= v0 ^| v1 @kind int;
  #L3b5270.  v3.`com.mastercard.api.payment.cld.Text.h` @type ^`int` := v0;
  #L3b5274.  v7:= v7 - v4 @kind int;
  #L3b5276.  v0:= new `byte`[v7];
  #L3b527a.  v3.`com.mastercard.api.payment.cld.Text.a` @type ^`byte`[] := v0 @kind object;
  #L3b527e.  v6:= v6 + v4 @kind int;
  #L3b5280.  v4:= 0I;
  #L3b5282.  call `arraycopy`(v5, v6, v0, v4, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b5288.  return @kind void;
  #L3b528a.  v4:= new `com.mastercard.api.utils.tlv.ParsingException`;
  #L3b528e.  call `<init>`(v4) @signature `Lcom/mastercard/api/utils/tlv/ParsingException;.<init>:()V` @kind direct;
  #L3b5294.  throw v4;
  #L3b5296.  v4:= new `com.mastercard.api.utils.tlv.ParsingException`;
  #L3b529a.  call `<init>`(v4) @signature `Lcom/mastercard/api/utils/tlv/ParsingException;.<init>:()V` @kind direct;
  #L3b52a0.  throw v4;
  #L3b52a2.  v4:= new `com.mastercard.api.utils.tlv.ParsingException`;
  #L3b52a6.  call `<init>`(v4) @signature `Lcom/mastercard/api/utils/tlv/ParsingException;.<init>:()V` @kind direct;
  #L3b52ac.  throw v4;
  #L3b52ae.  v4:= new `com.mastercard.api.utils.tlv.ParsingException`;
  #L3b52b2.  call `<init>`(v4) @signature `Lcom/mastercard/api/utils/tlv/ParsingException;.<init>:()V` @kind direct;
  #L3b52b8.  throw v4;
}
procedure `void` `clear`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b52cc.  v0:= v1.`com.mastercard.api.payment.cld.Text.a` @type ^`byte`[] @kind object;
  #L3b52d0.  call `clearByteArray`(v0) @signature `Lcom/mastercard/api/utils/Utils;.clearByteArray:([B)V` @kind static;
  #L3b52d6.  return @kind void;
}
procedure `byte` `getFont`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getFont:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b50f8.  v0:= v1.`com.mastercard.api.payment.cld.Text.e` @type ^`byte` @kind byte;
  #L3b50fc.  return v0;
}
procedure `int` `getTextColor`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextColor:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5188.  v0:= v1.`com.mastercard.api.payment.cld.Text.h` @type ^`int`;
  #L3b518c.  return v0;
}
procedure `byte` `getTextHorizontalPosition`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextHorizontalPosition:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5110.  v0:= v1.`com.mastercard.api.payment.cld.Text.c` @type ^`byte` @kind byte;
  #L3b5114.  return v0;
}
procedure `byte` `getTextMode`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextMode:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5128.  v0:= v1.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` @kind byte;
  #L3b512c.  return v0;
}
procedure `byte` `getTextSize`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextSize:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5140.  v0:= v1.`com.mastercard.api.payment.cld.Text.g` @type ^`byte` @kind byte;
  #L3b5144.  return v0;
}
procedure `byte` `getTextType`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextType:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5158.  v0:= v1.`com.mastercard.api.payment.cld.Text.b` @type ^`byte` @kind byte;
  #L3b515c.  return v0;
}
procedure `java.lang.String` `getTextValue`(`com.mastercard.api.payment.cld.Text` v2 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextValue:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b51a0.  v0:= new `java.lang.String`;
  #L3b51a4.  v1:= v2.`com.mastercard.api.payment.cld.Text.a` @type ^`byte`[] @kind object;
  #L3b51a8.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([B)V` @kind direct;
  #L3b51ae.  return v0 @kind object;
}
procedure `byte` `getTextVerticalPosition`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.getTextVerticalPosition:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5170.  v0:= v1.`com.mastercard.api.payment.cld.Text.d` @type ^`byte` @kind byte;
  #L3b5174.  return v0;
}
procedure `boolean` `isBold`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.isBold:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b5068.  v0:= v1.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` @kind byte;
  #L3b506c.  v0:= v0 ^& 64;
  #L3b5070.  if v0 == 0 then goto L3b5078;
  #L3b5074.  v0:= 1I;
  #L3b5076.  goto L3b507a;
  #L3b5078.  v0:= 0I;
  #L3b507a.  return v0;
}
procedure `boolean` `isItalic`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.isItalic:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b508c.  v0:= v1.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` @kind byte;
  #L3b5090.  v0:= v0 ^& -128;
  #L3b5094.  if v0 == 0 then goto L3b509c;
  #L3b5098.  v0:= 1I;
  #L3b509a.  goto L3b509e;
  #L3b509c.  v0:= 0I;
  #L3b509e.  return v0;
}
procedure `boolean` `isReverseItalic`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.isReverseItalic:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b50b0.  v0:= v1.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` @kind byte;
  #L3b50b4.  v0:= v0 ^& 16;
  #L3b50b8.  if v0 == 0 then goto L3b50c0;
  #L3b50bc.  v0:= 1I;
  #L3b50be.  goto L3b50c2;
  #L3b50c0.  v0:= 0I;
  #L3b50c2.  return v0;
}
procedure `boolean` `isUnderline`(`com.mastercard.api.payment.cld.Text` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/Text;.isUnderline:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b50d4.  v0:= v1.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` @kind byte;
  #L3b50d8.  v0:= v0 ^& 32;
  #L3b50dc.  if v0 == 0 then goto L3b50e4;
  #L3b50e0.  v0:= 1I;
  #L3b50e2.  goto L3b50e6;
  #L3b50e4.  v0:= 0I;
  #L3b50e6.  return v0;
}
procedure `void` `setBtextValue`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte`[] v1 @kind object) @signature `Lcom/mastercard/api/payment/cld/Text;.setBtextValue:([B)V` @AccessFlag PUBLIC {
    temp;

  #L3b52e8.  v0.`com.mastercard.api.payment.cld.Text.a` @type ^`byte`[] := v1 @kind object;
  #L3b52ec.  return @kind void;
}
procedure `void` `setTextColor`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `int` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextColor:(I)V` @AccessFlag PUBLIC {
    temp;

  #L3b5300.  v0.`com.mastercard.api.payment.cld.Text.h` @type ^`int` := v1;
  #L3b5304.  return @kind void;
}
procedure `void` `setTextHorizontalPosition`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextHorizontalPosition:(B)V` @AccessFlag PUBLIC {
    temp;

  #L3b5318.  v0.`com.mastercard.api.payment.cld.Text.c` @type ^`byte` := v1 @kind byte;
  #L3b531c.  return @kind void;
}
procedure `void` `setTextMode`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextMode:(B)V` @AccessFlag PUBLIC {
    temp;

  #L3b5330.  v0.`com.mastercard.api.payment.cld.Text.f` @type ^`byte` := v1 @kind byte;
  #L3b5334.  return @kind void;
}
procedure `void` `setTextSize`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextSize:(B)V` @AccessFlag PUBLIC {
    temp;

  #L3b5348.  v0.`com.mastercard.api.payment.cld.Text.g` @type ^`byte` := v1 @kind byte;
  #L3b534c.  return @kind void;
}
procedure `void` `setTextType`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextType:(B)V` @AccessFlag PUBLIC {
    temp;

  #L3b5360.  v0.`com.mastercard.api.payment.cld.Text.b` @type ^`byte` := v1 @kind byte;
  #L3b5364.  return @kind void;
}
procedure `void` `setTextVerticalPosition`(`com.mastercard.api.payment.cld.Text` v0 @kind this, `byte` v1 ) @signature `Lcom/mastercard/api/payment/cld/Text;.setTextVerticalPosition:(B)V` @AccessFlag PUBLIC {
    temp;

  #L3b5378.  v0.`com.mastercard.api.payment.cld.Text.d` @type ^`byte` := v1 @kind byte;
  #L3b537c.  return @kind void;
}
