record `com.mastercard.api.payment.cld.CLDTLVHandler` @kind class @AccessFlag PUBLIC extends `com.mastercard.api.utils.tlv.TLVHandler` @kind class {
  `byte` `com.mastercard.api.payment.cld.CLDTLVHandler.a` @AccessFlag PRIVATE;
  `byte` `com.mastercard.api.payment.cld.CLDTLVHandler.b` @AccessFlag PRIVATE;
  `com.mastercard.api.payment.cld.CardSide` `com.mastercard.api.payment.cld.CLDTLVHandler.c` @AccessFlag PRIVATE;
  `com.mastercard.api.payment.cld.CardSide` `com.mastercard.api.payment.cld.CLDTLVHandler.d` @AccessFlag PRIVATE;
  `boolean` `com.mastercard.api.payment.cld.CLDTLVHandler.e` @AccessFlag PRIVATE;
  `boolean` `com.mastercard.api.payment.cld.CLDTLVHandler.f` @AccessFlag PRIVATE;
  `boolean` `com.mastercard.api.payment.cld.CLDTLVHandler.g` @AccessFlag PRIVATE;
  `boolean` `com.mastercard.api.payment.cld.CLDTLVHandler.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b46d4.  call `<init>`(v1) @signature `Lcom/mastercard/api/utils/tlv/TLVHandler;.<init>:()V` @kind direct;
  #L3b46da.  v0:= 1I;
  #L3b46dc.  v1.`com.mastercard.api.payment.cld.CLDTLVHandler.b` @type ^`byte` := v0 @kind byte;
  #L3b46e0.  v0:= 0I;
  #L3b46e2.  v1.`com.mastercard.api.payment.cld.CLDTLVHandler.c` @type ^`com.mastercard.api.payment.cld.CardSide` := v0 @kind object;
  #L3b46e6.  v1.`com.mastercard.api.payment.cld.CLDTLVHandler.d` @type ^`com.mastercard.api.payment.cld.CardSide` := v0 @kind object;
  #L3b46ea.  return @kind void;
}
procedure `com.mastercard.api.payment.cld.CardSide` `getBackSide`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.getBackSide:()Lcom/mastercard/api/payment/cld/CardSide;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b46a4.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.d` @type ^`com.mastercard.api.payment.cld.CardSide` @kind object;
  #L3b46a8.  return v0 @kind object;
}
procedure `byte` `getFormFactor`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.getFormFactor:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b4674.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.b` @type ^`byte` @kind byte;
  #L3b4678.  return v0;
}
procedure `com.mastercard.api.payment.cld.CardSide` `getFrontSide`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.getFrontSide:()Lcom/mastercard/api/payment/cld/CardSide;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b46bc.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.c` @type ^`com.mastercard.api.payment.cld.CardSide` @kind object;
  #L3b46c0.  return v0 @kind object;
}
procedure `byte` `getVersion`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.getVersion:()B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b468c.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.a` @type ^`byte` @kind byte;
  #L3b4690.  return v0;
}
procedure `boolean` `isBackSideToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.isBackSideToParse:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b4614.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.h` @type ^`boolean` @kind boolean;
  #L3b4618.  return v0;
}
procedure `boolean` `isFormFactorToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.isFormFactorToParse:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b462c.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.f` @type ^`boolean` @kind boolean;
  #L3b4630.  return v0;
}
procedure `boolean` `isFrontSideToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.isFrontSideToParse:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b4644.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.g` @type ^`boolean` @kind boolean;
  #L3b4648.  return v0;
}
procedure `boolean` `isVersionToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v1 @kind this) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.isVersionToParse:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b465c.  v0:= v1.`com.mastercard.api.payment.cld.CLDTLVHandler.e` @type ^`boolean` @kind boolean;
  #L3b4660.  return v0;
}
procedure `void` `parseTag`(`com.mastercard.api.payment.cld.CLDTLVHandler` v2 @kind this, `byte` v3 , `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.parseTag:(BI[BI)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b46fc.  v0:= 1I;
  #L3b46fe.  v1:= 0I;
  #L3b4700.  if v3 == v0 then goto L3b476c;
  #L3b4704.  v0:= 2I;
  #L3b4706.  if v3 == v0 then goto L3b4746;
  #L3b470a.  v4:= 17I;
  #L3b470e.  if v3 == v4 then goto L3b4736;
  #L3b4712.  v4:= 18I;
  #L3b4716.  if v3 != v4 then goto L3b472a;
  #L3b471a.  call `setFormFactorToParse`(v2, v1) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setFormFactorToParse:(Z)V` @kind virtual;
  #L3b4720.  v3:= v5[v6] @kind byte;
  #L3b4724.  v2.`com.mastercard.api.payment.cld.CLDTLVHandler.b` @type ^`byte` := v3 @kind byte;
  #L3b4728.  goto L3b4790;
  #L3b472a.  v3:= new `com.mastercard.api.utils.tlv.ParsingException`;
  #L3b472e.  call `<init>`(v3) @signature `Lcom/mastercard/api/utils/tlv/ParsingException;.<init>:()V` @kind direct;
  #L3b4734.  throw v3;
  #L3b4736.  call `setVersionToParse`(v2, v1) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setVersionToParse:(Z)V` @kind virtual;
  #L3b473c.  v3:= v5[v6] @kind byte;
  #L3b4740.  v2.`com.mastercard.api.payment.cld.CLDTLVHandler.a` @type ^`byte` := v3 @kind byte;
  #L3b4744.  goto L3b4790;
  #L3b4746.  call `setBackSideToParse`(v2, v1) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setBackSideToParse:(Z)V` @kind virtual;
  #L3b474c.  v0:= v2.`com.mastercard.api.payment.cld.CLDTLVHandler.d` @type ^`com.mastercard.api.payment.cld.CardSide` @kind object;
  #L3b4750.  if v0 != 0 then goto L3b4764;
  #L3b4754.  v0:= new `com.mastercard.api.payment.cld.CardSide`;
  #L3b4758.  call `<init>`(v0, v3, v5, v6, v4) @signature `Lcom/mastercard/api/payment/cld/CardSide;.<init>:(B[BII)V` @kind direct;
  #L3b475e.  v2.`com.mastercard.api.payment.cld.CLDTLVHandler.d` @type ^`com.mastercard.api.payment.cld.CardSide` := v0 @kind object;
  #L3b4762.  goto L3b4790;
  #L3b4764.  call `updateCardSideContent`(v0, v5, v6, v4) @signature `Lcom/mastercard/api/payment/cld/CardSide;.updateCardSideContent:([BII)V` @kind virtual;
  #L3b476a.  goto L3b4790;
  #L3b476c.  call `setFrontSideToParse`(v2, v1) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setFrontSideToParse:(Z)V` @kind virtual;
  #L3b4772.  v0:= v2.`com.mastercard.api.payment.cld.CLDTLVHandler.c` @type ^`com.mastercard.api.payment.cld.CardSide` @kind object;
  #L3b4776.  if v0 != 0 then goto L3b478a;
  #L3b477a.  v0:= new `com.mastercard.api.payment.cld.CardSide`;
  #L3b477e.  call `<init>`(v0, v3, v5, v6, v4) @signature `Lcom/mastercard/api/payment/cld/CardSide;.<init>:(B[BII)V` @kind direct;
  #L3b4784.  v2.`com.mastercard.api.payment.cld.CLDTLVHandler.c` @type ^`com.mastercard.api.payment.cld.CardSide` := v0 @kind object;
  #L3b4788.  goto L3b4790;
  #L3b478a.  call `updateCardSideContent`(v0, v5, v6, v4) @signature `Lcom/mastercard/api/payment/cld/CardSide;.updateCardSideContent:([BII)V` @kind virtual;
  #L3b4790.  return @kind void;
}
procedure `void` `parseTag`(`com.mastercard.api.payment.cld.CLDTLVHandler` v0 @kind this, `short` v1 , `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.parseTag:(SI[BI)V` @AccessFlag PUBLIC {
    temp;

  #L3b47a4.  return @kind void;
}
procedure `void` `setBackSideToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v0 @kind this, `boolean` v1 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setBackSideToParse:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L3b47b8.  v0.`com.mastercard.api.payment.cld.CLDTLVHandler.h` @type ^`boolean` := v1 @kind boolean;
  #L3b47bc.  return @kind void;
}
procedure `void` `setFormFactorToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v0 @kind this, `boolean` v1 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setFormFactorToParse:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L3b47d0.  v0.`com.mastercard.api.payment.cld.CLDTLVHandler.f` @type ^`boolean` := v1 @kind boolean;
  #L3b47d4.  return @kind void;
}
procedure `void` `setFrontSideToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v0 @kind this, `boolean` v1 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setFrontSideToParse:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L3b47e8.  v0.`com.mastercard.api.payment.cld.CLDTLVHandler.g` @type ^`boolean` := v1 @kind boolean;
  #L3b47ec.  return @kind void;
}
procedure `void` `setVersionToParse`(`com.mastercard.api.payment.cld.CLDTLVHandler` v0 @kind this, `boolean` v1 ) @signature `Lcom/mastercard/api/payment/cld/CLDTLVHandler;.setVersionToParse:(Z)V` @AccessFlag PUBLIC {
    temp;

  #L3b4800.  v0.`com.mastercard.api.payment.cld.CLDTLVHandler.e` @type ^`boolean` := v1 @kind boolean;
  #L3b4804.  return @kind void;
}
