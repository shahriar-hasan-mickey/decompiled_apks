record `com.mastercard.api.bytes.ByteArray` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `com.mastercard.api.bytes.ByteArray` `append`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.append:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `appendByte`(`byte` v0 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.appendByte:(B)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendByteArrayAsLV`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.appendByteArrayAsLV:(Lcom/mastercard/api/bytes/ByteArray;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `appendBytes`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.appendBytes:([BI)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `bitWiseAnd`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.bitWiseAnd:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `clear`() @signature `Lcom/mastercard/api/bytes/ByteArray;.clear:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `clone`() @signature `Lcom/mastercard/api/bytes/ByteArray;.clone:()Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `copyBufferToArray`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.copyBufferToArray:([BIII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `copyBytes`(`com.mastercard.api.bytes.ByteArray` v0 @kind object, `int` v1 , `int` v2 , `int` v3 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.copyBytes:(Lcom/mastercard/api/bytes/ByteArray;III)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `copyOfRange`(`int` v0 , `int` v1 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.copyOfRange:(II)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `fill`(`byte` v0 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.fill:(B)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte` `getByte`(`int` v0 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `getBytes`() @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getHexString`() @signature `Lcom/mastercard/api/bytes/ByteArray;.getHexString:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getLength`() @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getString`() @signature `Lcom/mastercard/api/bytes/ByteArray;.getString:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `getUTF8`() @signature `Lcom/mastercard/api/bytes/ByteArray;.getUTF8:()Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `boolean` `isEqual`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.isEqual:(Lcom/mastercard/api/bytes/ByteArray;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `com.mastercard.api.bytes.ByteArray` `makeXor`(`com.mastercard.api.bytes.ByteArray` v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.makeXor:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `parityFix`() @signature `Lcom/mastercard/api/bytes/ByteArray;.parityFix:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setByte`(`int` v0 , `byte` v1 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setBytes`(`byte`[] v0 @kind object) @signature `Lcom/mastercard/api/bytes/ByteArray;.setBytes:([B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `setShort`(`int` v0 , `short` v1 ) @signature `Lcom/mastercard/api/bytes/ByteArray;.setShort:(IS)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
