record `com.mastercard.api.bytes.DefaultByteArrayImpl` @kind class @AccessFlag PUBLIC extends `com.mastercard.api.bytes.ByteArray` @kind interface {
  `byte`[] `com.mastercard.api.bytes.DefaultByteArrayImpl.a` @AccessFlag PRIVATE;
  `int` `com.mastercard.api.bytes.DefaultByteArrayImpl.b` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.mastercard.api.bytes.DefaultByteArrayImpl.c` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L3b19dc.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v0 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b19f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b19f6.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v0 @kind this, `int` v1 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b1a90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1a96.  v0.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v1;
  #L3b1a9a.  v1:= new `byte`[v1];
  #L3b1a9e.  v0.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v1 @kind object;
  #L3b1aa2.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1ab4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1aba.  v0:= 0I;
  #L3b1abc.  if v5 != 0 then goto L3b1ac6;
  #L3b1ac0.  v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v0;
  #L3b1ac4.  return @kind void;
  #L3b1ac6.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1acc.  v1:= temp;
  #L3b1ace.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1ad4.  v2:= temp;
  #L3b1ad6.  v2:= v2 %% 2;
  #L3b1ada.  if v2 != 0 then goto L3b1b24;
  #L3b1ade.  v1:= v1 / 2;
  #L3b1ae2.  v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v1;
  #L3b1ae6.  v1:= new `byte`[v1];
  #L3b1aea.  v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v1 @kind object;
  #L3b1aee.  v1:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1af2.  if v0 >= v1 then goto L3b1b22;
  #L3b1af6.  v1:= v0 * 2;
  #L3b1afa.  v2:= v1 + 2;
  #L3b1afe.  call temp:= `substring`(v5, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3b1b04.  v1:= temp @kind object;
  #L3b1b06.  v2:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1b0a.  v3:= 16I;
  #L3b1b0e.  call temp:= `parseInt`(v1, v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L3b1b14.  v1:= temp;
  #L3b1b16.  v1:= (`byte`) v1 @kind i2b;
  #L3b1b18.  v2[v0]:= v1 @kind byte;
  #L3b1b1c.  v0:= v0 + 1;
  #L3b1b20.  goto L3b1aee;
  #L3b1b22.  return @kind void;
  #L3b1b24.  v5:= new `java.lang.IllegalArgumentException`;
  #L3b1b28.  v0:= "Number of characters should be even for a hexadecimal buffer" @kind object;
  #L3b1b2c.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1b32.  throw v5;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v3 @kind this, `byte`[] v4 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L3b1a08.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1a0e.  v0:= length @variable v4;
  #L3b1a10.  v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v0;
  #L3b1a14.  v1:= new `byte`[v0];
  #L3b1a18.  v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v1 @kind object;
  #L3b1a1c.  v2:= 0I;
  #L3b1a1e.  call `arraycopy`(v4, v2, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1a24.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([BI)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b1a38.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1a3e.  v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v4;
  #L3b1a42.  v0:= new `byte`[v4];
  #L3b1a46.  v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v0 @kind object;
  #L3b1a4a.  v1:= 0I;
  #L3b1a4c.  call `arraycopy`(v3, v1, v0, v1, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1a52.  return @kind void;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([BII)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3b1a64.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3b1a6a.  v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v5;
  #L3b1a6e.  v0:= new `byte`[v5];
  #L3b1a72.  v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v0 @kind object;
  #L3b1a76.  v1:= 0I;
  #L3b1a78.  call `arraycopy`(v3, v4, v0, v1, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1a7e.  return @kind void;
}
procedure `com.mastercard.api.bytes.ByteArray` `append`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `com.mastercard.api.bytes.ByteArray` v5 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.append:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b16b8.  v0:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b16bc.  call temp:= `getBytes`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b16c2.  v1:= temp @kind object;
  #L3b16c4.  if v1 != 0 then goto L3b16ca;
  #L3b16c8.  return v4 @kind object;
  #L3b16ca.  v1:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b16ce.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b16d4.  v2:= temp;
  #L3b16d6.  v1:= v1 + v2 @kind int;
  #L3b16d8.  call `resize`(v4, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b16de.  call temp:= `getBytes`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b16e4.  v1:= temp @kind object;
  #L3b16e6.  v2:= 0I;
  #L3b16e8.  v3:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b16ec.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b16f2.  v5:= temp;
  #L3b16f4.  call `arraycopy`(v1, v2, v3, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b16fa.  return v4 @kind object;
}
procedure `void` `appendBuffer`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendBuffer:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1b44.  v0:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1b48.  v1:= length @variable v3;
  #L3b1b4a.  if v4 <= v1 then goto L3b1b50;
  #L3b1b4e.  return @kind void;
  #L3b1b50.  v1:= v0 + v5 @kind int;
  #L3b1b54.  call `resize`(v2, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b1b5a.  v1:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1b5e.  call `arraycopy`(v3, v4, v1, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1b64.  return @kind void;
}
procedure `com.mastercard.api.bytes.ByteArray` `appendByte`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `byte` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendByte:(B)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b170c.  v0:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1710.  v1:= v0 + 1;
  #L3b1714.  call `resize`(v2, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b171a.  v1:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b171e.  v1[v0]:= v3 @kind byte;
  #L3b1722.  return v2 @kind object;
}
procedure `void` `appendByteArray`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `com.mastercard.api.bytes.ByteArray` v5 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendByteArray:(Lcom/mastercard/api/bytes/ByteArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1b78.  v0:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1b7c.  call temp:= `getBytes`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1b82.  v1:= temp @kind object;
  #L3b1b84.  if v1 != 0 then goto L3b1b8a;
  #L3b1b88.  return @kind void;
  #L3b1b8a.  v1:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1b8e.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1b94.  v2:= temp;
  #L3b1b96.  v1:= v1 + v2 @kind int;
  #L3b1b98.  call `resize`(v4, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b1b9e.  call temp:= `getBytes`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1ba4.  v1:= temp @kind object;
  #L3b1ba6.  v2:= 0I;
  #L3b1ba8.  v3:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1bac.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1bb2.  v5:= temp;
  #L3b1bb4.  call `arraycopy`(v1, v2, v3, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1bba.  return @kind void;
}
procedure `void` `appendByteArrayAsLV`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `com.mastercard.api.bytes.ByteArray` v5 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendByteArrayAsLV:(Lcom/mastercard/api/bytes/ByteArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1bcc.  v0:= 0I;
  #L3b1bce.  if v5 == 0 then goto L3b1c1e;
  #L3b1bd2.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1bd8.  v1:= temp;
  #L3b1bda.  if v1 != 0 then goto L3b1be0;
  #L3b1bde.  goto L3b1c1e;
  #L3b1be0.  v1:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1be4.  v2:= v1 + 1;
  #L3b1be8.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1bee.  v3:= temp;
  #L3b1bf0.  v2:= v2 + v3 @kind int;
  #L3b1bf2.  call `resize`(v4, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b1bf8.  v2:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1bfc.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1c02.  v3:= temp;
  #L3b1c04.  v3:= (`byte`) v3 @kind i2b;
  #L3b1c06.  v2[v1]:= v3 @kind byte;
  #L3b1c0a.  v1:= v1 + 1;
  #L3b1c0e.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1c14.  v2:= temp;
  #L3b1c16.  call `copyArrayToArray`(v4, v5, v0, v1, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.copyArrayToArray:(Lcom/mastercard/api/bytes/ByteArray;III)V` @kind virtual;
  #L3b1c1c.  goto L3b1c24;
  #L3b1c1e.  call temp:= `appendByte`(v4, v0) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendByte:(B)Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b1c24.  return @kind void;
}
procedure `com.mastercard.api.bytes.ByteArray` `appendBytes`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.appendBytes:([BI)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1734.  v0:= v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1738.  v1:= v0 + v5 @kind int;
  #L3b173c.  call `resize`(v3, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b1742.  v1:= v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1746.  v2:= 0I;
  #L3b1748.  call `arraycopy`(v4, v2, v1, v0, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b174e.  return v3 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `bitWiseAnd`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v5 @kind this, `com.mastercard.api.bytes.ByteArray` v6 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.bitWiseAnd:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b1760.  if v6 != 0 then goto L3b176e;
  #L3b1764.  call temp:= `clone`(v5) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.clone:()Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b176a.  v6:= temp @kind object;
  #L3b176c.  return v6 @kind object;
  #L3b176e.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @kind virtual;
  #L3b1774.  v0:= temp;
  #L3b1776.  call temp:= `getLength`(v6) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b177c.  v1:= temp;
  #L3b177e.  if v0 >= v1 then goto L3b178c;
  #L3b1782.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @kind virtual;
  #L3b1788.  v0:= temp;
  #L3b178a.  goto L3b1794;
  #L3b178c.  call temp:= `getLength`(v6) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b1792.  v0:= temp;
  #L3b1794.  v1:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b1798.  call temp:= `getLength`(v5) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @kind virtual;
  #L3b179e.  v2:= temp;
  #L3b17a0.  call `<init>`(v1, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(I)V` @kind direct;
  #L3b17a6.  v2:= 0I;
  #L3b17a8.  if v2 >= v0 then goto L3b17cc;
  #L3b17ac.  v3:= v5.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b17b0.  v3:= v3[v2] @kind byte;
  #L3b17b4.  call temp:= `getByte`(v6, v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @kind interface;
  #L3b17ba.  v4:= temp;
  #L3b17bc.  v3:= v3 ^& v4 @kind int;
  #L3b17be.  v3:= (`byte`) v3 @kind i2b;
  #L3b17c0.  call `setByte`(v1, v2, v3) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b17c6.  v2:= v2 + 1;
  #L3b17ca.  goto L3b17a8;
  #L3b17cc.  return v1 @kind object;
}
procedure `void` `clear`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1c38.  v0:= 0I;
  #L3b1c3a.  call temp:= `fill`(v1, v0) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.fill:(B)Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b1c40.  return @kind void;
}
procedure `com.mastercard.api.bytes.ByteArray` `clone`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.clone:()Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b17e0.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b17e4.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getBytes:()[B` @kind virtual;
  #L3b17ea.  v1:= temp @kind object;
  #L3b17ec.  call `<init>`(v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([B)V` @kind direct;
  #L3b17f2.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L3b18fc.  call temp:= `clone`(v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.clone:()Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b1902.  v0:= temp @kind object;
  #L3b1904.  return v0 @kind object;
}
procedure `void` `copyArrayToArray`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `com.mastercard.api.bytes.ByteArray` v2 @kind object, `int` v3 , `int` v4 , `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.copyArrayToArray:(Lcom/mastercard/api/bytes/ByteArray;III)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1c54.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1c5a.  v0:= temp @kind object;
  #L3b1c5c.  if v0 != 0 then goto L3b1c62;
  #L3b1c60.  return @kind void;
  #L3b1c62.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1c68.  v2:= temp @kind object;
  #L3b1c6a.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1c6e.  call `arraycopy`(v2, v3, v0, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1c74.  return @kind void;
}
procedure `void` `copyBufferToArray`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 , `int` v7 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.copyBufferToArray:([BIII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1c88.  if v4 == 0 then goto L3b1ca2;
  #L3b1c8c.  v0:= v6 + v7 @kind int;
  #L3b1c90.  v1:= v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1c94.  v2:= length @variable v1;
  #L3b1c96.  if v0 <= v2 then goto L3b1c9c;
  #L3b1c9a.  goto L3b1ca2;
  #L3b1c9c.  call `arraycopy`(v4, v5, v1, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1ca2.  return @kind void;
}
procedure `void` `copyBytes`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `com.mastercard.api.bytes.ByteArray` v3 @kind object, `int` v4 , `int` v5 , `int` v6 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.copyBytes:(Lcom/mastercard/api/bytes/ByteArray;III)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1cb4.  v0:= v5 + v6 @kind int;
  #L3b1cb8.  v1:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1cbc.  if v0 <= v1 then goto L3b1cca;
  #L3b1cc0.  v0:= v0 - v1 @kind int;
  #L3b1cc2.  v1:= v1 + v0 @kind int;
  #L3b1cc4.  call `resize`(v2, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @kind virtual;
  #L3b1cca.  call temp:= `getBytes`(v3) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1cd0.  v3:= temp @kind object;
  #L3b1cd2.  v0:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1cd6.  call `arraycopy`(v3, v4, v0, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1cdc.  return @kind void;
}
procedure `com.mastercard.api.bytes.ByteArray` `copyOfRange`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.copyOfRange:(II)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1804.  v0:= v5 - v4 @kind int;
  #L3b1808.  v1:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b180c.  v2:= v3.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1810.  call temp:= `copyOfRange`(v2, v4, v5) @signature `Ljava/util/Arrays;.copyOfRange:([BII)[B` @kind static;
  #L3b1816.  v4:= temp @kind object;
  #L3b1818.  call `<init>`(v1, v4, v0) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([BI)V` @kind direct;
  #L3b181e.  return v1 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `fill`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `byte` v2 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.fill:(B)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1830.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1834.  call `fill`(v0, v2) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L3b183a.  return v1 @kind object;
}
procedure `byte` `getByte`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `int` v2 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1684.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1688.  v2:= v0[v2] @kind byte;
  #L3b168c.  return v2;
}
procedure `byte`[] `getBytes`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getBytes:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b16a0.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b16a4.  return v0 @kind object;
}
procedure `java.lang.String` `getHexString`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1918.  call temp:= `toHexString`(v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.toHexString:()Ljava/lang/String;` @kind virtual;
  #L3b191e.  v0:= temp @kind object;
  #L3b1920.  return v0 @kind object;
}
procedure `int` `getLength`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b18e4.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b18e8.  return v0;
}
procedure `java.lang.String` `getString`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1934.  v0:= new `java.lang.String`;
  #L3b1938.  v1:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b193c.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([B)V` @kind direct;
  #L3b1942.  return v0 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `getUTF8`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v3 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getUTF8:()Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b184c.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b1850.  call temp:= `getHexString`(v3) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getHexString:()Ljava/lang/String;` @kind virtual;
  #L3b1856.  v1:= temp @kind object;
  #L3b1858.  v2:= "UTF-8" @kind object;
  #L3b185c.  call temp:= `getBytes`(v1, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L3b1862.  v1:= temp @kind object;
  #L3b1864.  call `<init>`(v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([B)V` @kind direct;
  #L3b186a.  return v0 @kind object;
  #L3b186c.  v0:= 0I;
  #L3b186e.  return v0 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L3b184c..L3b186a] goto L3b186c;
}
procedure `boolean` `isEqual`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `com.mastercard.api.bytes.ByteArray` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.isEqual:(Lcom/mastercard/api/bytes/ByteArray;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b165c.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1660.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1666.  v2:= temp @kind object;
  #L3b1668.  call temp:= `equals`(v0, v2) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L3b166e.  v2:= temp;
  #L3b1670.  return v2;
}
procedure `com.mastercard.api.bytes.ByteArray` `makeXor`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `com.mastercard.api.bytes.ByteArray` v5 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.makeXor:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1890.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b1894.  call temp:= `getLength`(v4) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @kind virtual;
  #L3b189a.  v1:= temp;
  #L3b189c.  call `<init>`(v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(I)V` @kind direct;
  #L3b18a2.  v1:= 0I;
  #L3b18a4.  call temp:= `getLength`(v0) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b18aa.  v2:= temp;
  #L3b18ac.  if v1 >= v2 then goto L3b18d0;
  #L3b18b0.  call temp:= `getByte`(v4, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getByte:(I)B` @kind virtual;
  #L3b18b6.  v2:= temp;
  #L3b18b8.  call temp:= `getByte`(v5, v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @kind interface;
  #L3b18be.  v3:= temp;
  #L3b18c0.  v2:= v2 ^~ v3 @kind int;
  #L3b18c2.  v2:= (`byte`) v2 @kind i2b;
  #L3b18c4.  call `setByte`(v0, v1, v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.setByte:(IB)V` @kind interface;
  #L3b18ca.  v1:= v1 + 1;
  #L3b18ce.  goto L3b18a4;
  #L3b18d0.  return v0 @kind object;
}
procedure `void` `parityFix`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v8 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.parityFix:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L3b1cf0.  call temp:= `getLength`(v8) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getLength:()I` @kind virtual;
  #L3b1cf6.  v0:= temp;
  #L3b1cf8.  v1:= 0I;
  #L3b1cfa.  v2:= 0I;
  #L3b1cfc.  if v2 >= v0 then goto L3b1d4c;
  #L3b1d00.  v3:= 1I;
  #L3b1d02.  v4:= 0I;
  #L3b1d04.  v5:= 0I;
  #L3b1d06.  v6:= 1I;
  #L3b1d08.  v7:= 8I;
  #L3b1d0c.  if v4 >= v7 then goto L3b1d2c;
  #L3b1d10.  call temp:= `getByte`(v8, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getByte:(I)B` @kind virtual;
  #L3b1d16.  v7:= temp;
  #L3b1d18.  v7:= v7 ^& v6 @kind int;
  #L3b1d1a.  if v7 == 0 then goto L3b1d22;
  #L3b1d1e.  v5:= v5 + 1;
  #L3b1d22.  v6:= v6 * 2;
  #L3b1d26.  v4:= v4 + 1;
  #L3b1d2a.  goto L3b1d08;
  #L3b1d2c.  v4:= v5 ^& 1;
  #L3b1d30.  if v4 != 0 then goto L3b1d46;
  #L3b1d34.  call temp:= `getByte`(v8, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getByte:(I)B` @kind virtual;
  #L3b1d3a.  v4:= temp;
  #L3b1d3c.  v3:= v3 ^~ v4 @kind int;
  #L3b1d3e.  v3:= (`byte`) v3 @kind i2b;
  #L3b1d40.  call `setByte`(v8, v2, v3) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.setByte:(IB)V` @kind virtual;
  #L3b1d46.  v2:= v2 + 1;
  #L3b1d4a.  goto L3b1cfc;
  #L3b1d4c.  return @kind void;
}
procedure `void` `resize`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v4 @kind this, `int` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.resize:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3b1d60.  v0:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1d64.  if v5 <= v0 then goto L3b1d80;
  #L3b1d68.  v1:= new `byte`[v5];
  #L3b1d6c.  v2:= v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1d70.  if v2 == 0 then goto L3b1d7c;
  #L3b1d74.  v3:= 0I;
  #L3b1d76.  call `arraycopy`(v2, v3, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L3b1d7c.  v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v1 @kind object;
  #L3b1d80.  v4.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v5;
  #L3b1d84.  return @kind void;
}
procedure `void` `setByte`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `int` v2 , `byte` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.setByte:(IB)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1d98.  v0:= v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1d9c.  v0[v2]:= v3 @kind byte;
  #L3b1da0.  return @kind void;
}
procedure `void` `setBytes`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this, `byte`[] v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.setBytes:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1db4.  v0:= length @variable v2;
  #L3b1db6.  call temp:= `copyOf`(v2, v0) @signature `Ljava/util/Arrays;.copyOf:([BI)[B` @kind static;
  #L3b1dbc.  v2:= temp @kind object;
  #L3b1dbe.  v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] := v2 @kind object;
  #L3b1dc2.  v2:= length @variable v2;
  #L3b1dc4.  v1.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int` := v2;
  #L3b1dc8.  return @kind void;
}
procedure `void` `setShort`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v2 @kind this, `int` v3 , `short` v4 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.setShort:(IS)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1ddc.  v0:= v2.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b1de0.  v1:= v4 ^> 8;
  #L3b1de4.  v1:= (`byte`) v1 @kind i2b;
  #L3b1de6.  v0[v3]:= v1 @kind byte;
  #L3b1dea.  v3:= v3 + 1;
  #L3b1dee.  v4:= v4 ^& 255;
  #L3b1df2.  v4:= (`byte`) v4 @kind i2b;
  #L3b1df4.  v0[v3]:= v4 @kind byte;
  #L3b1df8.  return @kind void;
}
procedure `java.lang.String` `toHexString`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v5 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.toHexString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L3b1954.  v0:= new `java.lang.StringBuffer`;
  #L3b1958.  call `<init>`(v0) @signature `Ljava/lang/StringBuffer;.<init>:()V` @kind direct;
  #L3b195e.  v1:= 0I;
  #L3b1960.  v2:= v5.`com.mastercard.api.bytes.DefaultByteArrayImpl.b` @type ^`int`;
  #L3b1964.  if v1 >= v2 then goto L3b19a6;
  #L3b1968.  v2:= v5.`com.mastercard.api.bytes.DefaultByteArrayImpl.a` @type ^`byte`[] @kind object;
  #L3b196c.  v2:= v2[v1] @kind byte;
  #L3b1970.  v3:= `@@com.mastercard.api.bytes.DefaultByteArrayImpl.c` @type ^`java.lang.String` @kind object;
  #L3b1974.  v4:= v2 ^> 4;
  #L3b1978.  v4:= v4 ^& 15;
  #L3b197c.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b1982.  v3:= temp;
  #L3b1984.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b198a.  v3:= `@@com.mastercard.api.bytes.DefaultByteArrayImpl.c` @type ^`java.lang.String` @kind object;
  #L3b198e.  v2:= v2 ^& 15;
  #L3b1992.  call temp:= `charAt`(v3, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b1998.  v2:= temp;
  #L3b199a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuffer;.append:(C)Ljava/lang/StringBuffer;` @kind virtual;
  #L3b19a0.  v1:= v1 + 1;
  #L3b19a4.  goto L3b1960;
  #L3b19a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuffer;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b19ac.  v0:= temp @kind object;
  #L3b19ae.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.mastercard.api.bytes.DefaultByteArrayImpl` v1 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b19c0.  call temp:= `getHexString`(v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.getHexString:()Ljava/lang/String;` @kind virtual;
  #L3b19c6.  v0:= temp @kind object;
  #L3b19c8.  return v0 @kind object;
}
