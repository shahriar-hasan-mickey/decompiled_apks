record `com.mastercard.api.bytes.DefaultByteArrayFactory` @kind class @AccessFlag PUBLIC extends `com.mastercard.api.bytes.ByteArrayFactory` @kind class {
}
global `char`[] `@@com.mastercard.api.bytes.DefaultByteArrayFactory.HEX_DIGITS` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L3b15f8.  v0:= 16I;
  #L3b15fc.  v0:= new `char`[v0];
  #L3b1600.  goto L3b160c;
  #L3b1606.  `@@com.mastercard.api.bytes.DefaultByteArrayFactory.HEX_DIGITS` @type ^`char`[] := v0 @kind object;
  #L3b160a.  return @kind void;
  #L3b160c.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L3b1633.  goto L3b1606;
}
procedure `void` `<init>`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v0 @kind this) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3b1644.  call `<init>`(v0) @signature `Lcom/mastercard/api/bytes/ByteArrayFactory;.<init>:()V` @kind direct;
  #L3b164a.  return @kind void;
}
procedure `boolean` `compareString`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.compareString:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L3b0ff0.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3b0ff6.  v1:= temp;
  #L3b0ff8.  return v1;
}
procedure `com.mastercard.api.bytes.ByteArray` `convertString`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.convertString:(Ljava/lang/String;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1088.  call temp:= `getInstance`() @signature `Lcom/mastercard/api/bytes/ByteArrayFactory;.getInstance:()Lcom/mastercard/api/bytes/ByteArrayFactory;` @kind static;
  #L3b108e.  v0:= temp @kind object;
  #L3b1090.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L3b1096.  v1:= temp @kind object;
  #L3b1098.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b109e.  v3:= temp;
  #L3b10a0.  call temp:= `getByteArray`(v0, v1, v3) @signature `Lcom/mastercard/api/bytes/ByteArrayFactory;.getByteArray:([BI)Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b10a6.  v3:= temp @kind object;
  #L3b10a8.  return v3 @kind object;
}
procedure `java.lang.String` `formatAtc`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v2 @kind this, `int` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.formatAtc:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b128c.  call temp:= `integerToHex`(v2, v3) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.integerToHex:(I)Ljava/lang/String;` @kind virtual;
  #L3b1292.  v3:= temp @kind object;
  #L3b1294.  v0:= 4I;
  #L3b1296.  v1:= 48I;
  #L3b129a.  call temp:= `padleft`(v2, v3, v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @kind virtual;
  #L3b12a0.  v3:= temp @kind object;
  #L3b12a2.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b12a8.  v3:= temp @kind object;
  #L3b12aa.  return v3 @kind object;
}
procedure `int` `fromChar`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v3 @kind this, `char` v4 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.fromChar:(C)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b116c.  goto L3b11d0;
  #L3b1172.  goto L3b1200;
  #L3b1178.  goto L3b1220;
  #L3b117e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3b1182.  v1:= new `java.lang.StringBuilder`;
  #L3b1186.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b118c.  v2:= "invalid hex digit [" @kind object;
  #L3b1190.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1196.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b119c.  v4:= "]" @kind object;
  #L3b11a0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b11a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b11ac.  v4:= temp @kind object;
  #L3b11ae.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b11b4.  throw v0;
  #L3b11b6.  v4:= v4 + -97;
  #L3b11ba.  v4:= v4 + 10;
  #L3b11be.  return v4;
  #L3b11c0.  v4:= v4 + -65;
  #L3b11c4.  v4:= v4 + 10;
  #L3b11c8.  return v4;
  #L3b11ca.  v4:= v4 + -48;
  #L3b11ce.  return v4;
  #L3b11d0.  switch v4
                  | 48 => goto L3b11ca
                  | 49 => goto L3b11ca
                  | 50 => goto L3b11ca
                  | 51 => goto L3b11ca
                  | 52 => goto L3b11ca
                  | 53 => goto L3b11ca
                  | 54 => goto L3b11ca
                  | 55 => goto L3b11ca
                  | 56 => goto L3b11ca
                  | 57 => goto L3b11ca
                  | else => goto L3b1172;
  #L3b1200.  switch v4
                  | 65 => goto L3b11c0
                  | 66 => goto L3b11c0
                  | 67 => goto L3b11c0
                  | 68 => goto L3b11c0
                  | 69 => goto L3b11c0
                  | 70 => goto L3b11c0
                  | else => goto L3b1178;
  #L3b1220.  switch v4
                  | 97 => goto L3b11b6
                  | 98 => goto L3b11b6
                  | 99 => goto L3b11b6
                  | 100 => goto L3b11b6
                  | 101 => goto L3b11b6
                  | 102 => goto L3b11b6
                  | else => goto L3b117e;
}
procedure `com.mastercard.api.bytes.ByteArray` `fromHexString`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.fromHexString:(Ljava/lang/String;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b10bc.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b10c0.  call `<init>`(v0, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b10c6.  return v0 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `getByteArray`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `int` v2 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getByteArray:(I)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b10f4.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b10f8.  call `<init>`(v0, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:(I)V` @kind direct;
  #L3b10fe.  return v0 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `getByteArray`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getByteArray:([BI)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b10d8.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b10dc.  call `<init>`(v0, v2, v3) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([BI)V` @kind direct;
  #L3b10e2.  return v0 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `getFromByteArray`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `com.mastercard.api.bytes.ByteArray` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getFromByteArray:(Lcom/mastercard/api/bytes/ByteArray;)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1110.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b1114.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b111a.  v2:= temp @kind object;
  #L3b111c.  call `<init>`(v0, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([B)V` @kind direct;
  #L3b1122.  return v0 @kind object;
}
procedure `com.mastercard.api.bytes.ByteArray` `getFromWord`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v3 @kind this, `int` v4 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getFromWord:(I)Lcom/mastercard/api/bytes/ByteArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1134.  v0:= new `com.mastercard.api.bytes.DefaultByteArrayImpl`;
  #L3b1138.  v1:= 2I;
  #L3b113a.  call temp:= `allocate`(v1) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L3b1140.  v2:= temp @kind object;
  #L3b1142.  v4:= (`short`) v4 @kind i2s;
  #L3b1144.  call temp:= `putShort`(v2, v4) @signature `Ljava/nio/ByteBuffer;.putShort:(S)Ljava/nio/ByteBuffer;` @kind virtual;
  #L3b114a.  v4:= temp @kind object;
  #L3b114c.  call temp:= `array`(v4) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L3b1152.  v4:= temp @kind object;
  #L3b1154.  call `<init>`(v0, v4, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayImpl;.<init>:([BI)V` @kind direct;
  #L3b115a.  return v0 @kind object;
}
procedure `java.lang.String` `getHexStringLengthAsHex`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getHexStringLengthAsHex:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;

  #L3b12bc.  call temp:= `fromHexString`(v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.fromHexString:(Ljava/lang/String;)Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b12c2.  v1:= temp @kind object;
  #L3b12c4.  call temp:= `getLength`(v1) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b12ca.  v1:= temp;
  #L3b12cc.  call temp:= `integerToHex`(v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.integerToHex:(I)Ljava/lang/String;` @kind virtual;
  #L3b12d2.  v1:= temp @kind object;
  #L3b12d4.  call temp:= `toUpperCase`(v1) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b12da.  v1:= temp @kind object;
  #L3b12dc.  return v1 @kind object;
}
procedure `java.lang.String` `getHexStringLengthAsHex`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getHexStringLengthAsHex:(Ljava/lang/String;I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b12f0.  call temp:= `fromHexString`(v1, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.fromHexString:(Ljava/lang/String;)Lcom/mastercard/api/bytes/ByteArray;` @kind virtual;
  #L3b12f6.  v2:= temp @kind object;
  #L3b12f8.  call temp:= `getLength`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getLength:()I` @kind interface;
  #L3b12fe.  v2:= temp;
  #L3b1300.  call temp:= `integerToHex`(v1, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.integerToHex:(I)Ljava/lang/String;` @kind virtual;
  #L3b1306.  v2:= temp @kind object;
  #L3b1308.  v3:= v3 * 2;
  #L3b130c.  v0:= 48I;
  #L3b1310.  call temp:= `padleft`(v1, v2, v3, v0) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @kind virtual;
  #L3b1316.  v2:= temp @kind object;
  #L3b1318.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b131e.  v2:= temp @kind object;
  #L3b1320.  return v2 @kind object;
}
procedure `java.lang.String` `getStringLengthAsHex`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getStringLengthAsHex:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1334.  v0:= "UTF-8" @kind object;
  #L3b1338.  call temp:= `getBytes`(v2, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L3b133e.  v2:= temp @kind object;
  #L3b1340.  v2:= length @variable v2;
  #L3b1342.  call temp:= `integerToHex`(v1, v2) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.integerToHex:(I)Ljava/lang/String;` @kind virtual;
  #L3b1348.  v2:= temp @kind object;
  #L3b134a.  goto L3b134e;
  #L3b134c.  v2:= 0I;
  #L3b134e.  call temp:= `toUpperCase`(v2) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b1354.  v2:= temp @kind object;
  #L3b1356.  return v2 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L3b1334..L3b134a] goto L3b134c;
}
procedure `java.lang.String` `getUTF8String`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `com.mastercard.api.bytes.ByteArray` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.getUTF8String:(Lcom/mastercard/api/bytes/ByteArray;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1378.  v0:= new `java.lang.String`;
  #L3b137c.  call temp:= `getBytes`(v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getBytes:()[B` @kind interface;
  #L3b1382.  v2:= temp @kind object;
  #L3b1384.  call `<init>`(v0, v2) @signature `Ljava/lang/String;.<init>:([B)V` @kind direct;
  #L3b138a.  return v0 @kind object;
}
procedure `java.lang.String` `hexStringToBase64`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.hexStringToBase64:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b139c.  v0:= 0I;
  #L3b139e.  v1:= "" @kind object;
  #L3b13a2.  v3:= v1 @kind object;
  #L3b13a4.  v2:= 0I;
  #L3b13a6.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b13ac.  v4:= temp;
  #L3b13ae.  v5:= "000000" @kind object;
  #L3b13b2.  if v2 >= v4 then goto L3b142a;
  #L3b13b6.  v4:= new `java.lang.StringBuilder`;
  #L3b13ba.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b13c0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b13c6.  v5:= v2 + 1;
  #L3b13ca.  call temp:= `substring`(v8, v2, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3b13d0.  v2:= temp @kind object;
  #L3b13d2.  v6:= 16I;
  #L3b13d6.  call temp:= `parseInt`(v2, v6) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L3b13dc.  v2:= temp;
  #L3b13de.  call temp:= `toBinaryString`(v2) @signature `Ljava/lang/Integer;.toBinaryString:(I)Ljava/lang/String;` @kind static;
  #L3b13e4.  v2:= temp @kind object;
  #L3b13e6.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b13ec.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b13f2.  v2:= temp @kind object;
  #L3b13f4.  v4:= new `java.lang.StringBuilder`;
  #L3b13f8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b13fe.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1404.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b140a.  v3:= temp;
  #L3b140c.  v3:= v3 + -4;
  #L3b1410.  call temp:= `substring`(v2, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3b1416.  v2:= temp @kind object;
  #L3b1418.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b141e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b1424.  v3:= temp @kind object;
  #L3b1426.  v2:= v5;
  #L3b1428.  goto L3b13a6;
  #L3b142a.  v8:= new `java.lang.StringBuilder`;
  #L3b142e.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b1434.  call temp:= `append`(v8, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b143a.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1440.  v2:= temp;
  #L3b1442.  v2:= v2 %% 6;
  #L3b1446.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3b144c.  v2:= temp @kind object;
  #L3b144e.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1454.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b145a.  v8:= temp @kind object;
  #L3b145c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1462.  v2:= temp;
  #L3b1464.  if v0 >= v2 then goto L3b14ac;
  #L3b1468.  v2:= v0 + 6;
  #L3b146c.  call temp:= `substring`(v8, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L3b1472.  v0:= temp @kind object;
  #L3b1474.  v3:= new `java.lang.StringBuilder`;
  #L3b1478.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b147e.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1484.  v1:= 2I;
  #L3b1486.  call temp:= `parseInt`(v0, v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L3b148c.  v0:= temp;
  #L3b148e.  v1:= "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" @kind object;
  #L3b1492.  call temp:= `charAt`(v1, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L3b1498.  v0:= temp;
  #L3b149a.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b14a0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b14a6.  v1:= temp @kind object;
  #L3b14a8.  v0:= v2;
  #L3b14aa.  goto L3b145c;
  #L3b14ac.  v8:= new `java.lang.StringBuilder`;
  #L3b14b0.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b14b6.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b14bc.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b14c2.  v0:= temp;
  #L3b14c4.  v0:= v0 %% 4;
  #L3b14c8.  v1:= "====" @kind object;
  #L3b14cc.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L3b14d2.  v0:= temp @kind object;
  #L3b14d4.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b14da.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b14e0.  v8:= temp @kind object;
  #L3b14e2.  return v8 @kind object;
}
procedure `int` `hexToInteger`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.hexToInteger:(Ljava/lang/String;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3b1250.  v0:= 16I;
  #L3b1254.  call temp:= `parseInt`(v2, v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;I)I` @kind static;
  #L3b125a.  v2:= temp;
  #L3b125c.  return v2;
}
procedure `java.lang.String` `integerToHex`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v2 @kind this, `int` v3 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.integerToHex:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b14f4.  call temp:= `toHexString`(v3) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L3b14fa.  v3:= temp @kind object;
  #L3b14fc.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1502.  v0:= temp;
  #L3b1504.  v0:= v0 %% 2;
  #L3b1508.  if v0 == 0 then goto L3b1524;
  #L3b150c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1512.  v0:= temp;
  #L3b1514.  v0:= v0 + 1;
  #L3b1518.  v1:= 48I;
  #L3b151c.  call temp:= `padleft`(v2, v3, v0, v1) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @kind virtual;
  #L3b1522.  v3:= temp @kind object;
  #L3b1524.  call temp:= `toUpperCase`(v3) @signature `Ljava/lang/String;.toUpperCase:()Ljava/lang/String;` @kind virtual;
  #L3b152a.  v3:= temp @kind object;
  #L3b152c.  return v3 @kind object;
}
procedure `boolean` `isNull`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.isNull:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;

  #L3b100c.  if v1 != 0 then goto L3b1014;
  #L3b1010.  v1:= 1I;
  #L3b1012.  goto L3b1016;
  #L3b1014.  v1:= 0I;
  #L3b1016.  return v1;
}
procedure `java.lang.String` `padleft`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v2 @kind this, `java.lang.String` v3 @kind object, `int` v4 , `char` v5 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.padleft:(Ljava/lang/String;IC)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3b1540.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L3b1546.  v3:= temp @kind object;
  #L3b1548.  v0:= new `java.lang.StringBuilder`;
  #L3b154c.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L3b1552.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L3b1558.  v1:= temp;
  #L3b155a.  v4:= v4 - v1 @kind int;
  #L3b155c.  v1:= v4 + -1;
  #L3b1560.  if v4 <= 0 then goto L3b156e;
  #L3b1564.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b156a.  v4:= v1;
  #L3b156c.  goto L3b155c;
  #L3b156e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1574.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b157a.  v3:= temp @kind object;
  #L3b157c.  return v3 @kind object;
}
procedure `int` `stringToInt`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.stringToInt:(Ljava/lang/String;)I` @AccessFlag PUBLIC {
    temp;

  #L3b1270.  call temp:= `parseInt`(v1) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L3b1276.  v1:= temp;
  #L3b1278.  return v1;
}
procedure `char` `toChar`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v3 @kind this, `int` v4 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.toChar:(I)C` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3b1028.  if v4 < 0 then goto L3b103e;
  #L3b102c.  v0:= 15I;
  #L3b1030.  if v4 > v0 then goto L3b103e;
  #L3b1034.  v0:= `@@com.mastercard.api.bytes.DefaultByteArrayFactory.HEX_DIGITS` @type ^`char`[] @kind object;
  #L3b1038.  v4:= v0[v4] @kind char;
  #L3b103c.  return v4;
  #L3b103e.  v0:= new `java.lang.IllegalArgumentException`;
  #L3b1042.  v1:= new `java.lang.StringBuilder`;
  #L3b1046.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3b104c.  v2:= "invalid hex digit [" @kind object;
  #L3b1050.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1056.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b105c.  v4:= "]" @kind object;
  #L3b1060.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3b1066.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3b106c.  v4:= temp @kind object;
  #L3b106e.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L3b1074.  throw v0;
}
procedure `java.lang.String` `toString`(`com.mastercard.api.bytes.DefaultByteArrayFactory` v7 @kind this, `com.mastercard.api.bytes.ByteArray` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/mastercard/api/bytes/DefaultByteArrayFactory;.toString:(Lcom/mastercard/api/bytes/ByteArray;II)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3b1590.  v0:= v10 * 2;
  #L3b1594.  v0:= new `char`[v0];
  #L3b1598.  v1:= 0I;
  #L3b159a.  v2:= v9;
  #L3b159c.  v3:= v9 + v10 @kind int;
  #L3b15a0.  if v2 >= v3 then goto L3b15da;
  #L3b15a4.  call temp:= `getByte`(v8, v2) @signature `Lcom/mastercard/api/bytes/ByteArray;.getByte:(I)B` @kind interface;
  #L3b15aa.  v3:= temp;
  #L3b15ac.  v4:= v1 + 1;
  #L3b15b0.  v5:= `@@com.mastercard.api.bytes.DefaultByteArrayFactory.HEX_DIGITS` @type ^`char`[] @kind object;
  #L3b15b4.  v6:= v3 ^>> 4;
  #L3b15b8.  v6:= v6 ^& 15;
  #L3b15bc.  v6:= v5[v6] @kind char;
  #L3b15c0.  v0[v1]:= v6 @kind char;
  #L3b15c4.  v1:= v4 + 1;
  #L3b15c8.  v3:= v3 ^& 15;
  #L3b15cc.  v3:= v5[v3] @kind char;
  #L3b15d0.  v0[v4]:= v3 @kind char;
  #L3b15d4.  v2:= v2 + 1;
  #L3b15d8.  goto L3b159c;
  #L3b15da.  v8:= new `java.lang.String`;
  #L3b15de.  call `<init>`(v8, v0) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L3b15e4.  return v8 @kind object;
}
