record `com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` @kind class @AccessFlag  extends `com.yalantis.ucrop.util.ImageHeaderParser$Reader` @kind interface {
  `java.io.InputStream` `com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v0 @kind this, `java.io.InputStream` v1 @kind object) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3ff2fc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3ff302.  v0.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` := v1 @kind object;
  #L3ff306.  return @kind void;
}
procedure `int` `getUInt16`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v2 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.getUInt16:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3ff208.  v0:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff20c.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ff212.  v0:= temp;
  #L3ff214.  v0:= v0 ^< 8;
  #L3ff218.  v1:= 65280I;
  #L3ff21e.  v0:= v0 ^& v1 @kind int;
  #L3ff220.  v1:= v2.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff224.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ff22a.  v1:= temp;
  #L3ff22c.  v1:= v1 ^& 255;
  #L3ff230.  v0:= v0 ^| v1 @kind int;
  #L3ff232.  return v0;
}
procedure `short` `getUInt8`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v1 @kind this) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.getUInt8:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3ff2d8.  v0:= v1.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff2dc.  call temp:= `read`(v0) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ff2e2.  v0:= temp;
  #L3ff2e4.  v0:= v0 ^& 255;
  #L3ff2e8.  v0:= (`short`) v0 @kind i2s;
  #L3ff2ea.  return v0;
}
procedure `int` `read`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.read:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L3ff244.  v0:= v5;
  #L3ff246.  if v0 <= 0 then goto L3ff264;
  #L3ff24a.  v1:= v3.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff24e.  v2:= v5 - v0 @kind int;
  #L3ff252.  call temp:= `read`(v1, v4, v2, v0) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L3ff258.  v1:= temp;
  #L3ff25a.  v2:= -1I;
  #L3ff25c.  if v1 == v2 then goto L3ff264;
  #L3ff260.  v0:= v0 - v1 @kind int;
  #L3ff262.  goto L3ff246;
  #L3ff264.  v5:= v5 - v0 @kind int;
  #L3ff266.  return v5;
}
procedure `long` `skip`(`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader` v7 @kind this, `long` v8 ) @signature `Lcom/yalantis/ucrop/util/ImageHeaderParser$StreamReader;.skip:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L3ff278.  v0:= 0L;
  #L3ff27c.  v2:= lcmp(v8, v0);
  #L3ff280.  if v2 >= 0 then goto L3ff286;
  #L3ff284.  return v0 @kind wide;
  #L3ff286.  v2:= v8 @kind wide;
  #L3ff288.  v4:= lcmp(v2, v0);
  #L3ff28c.  if v4 <= 0 then goto L3ff2c2;
  #L3ff290.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff294.  call temp:= `skip`(v4, v2) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L3ff29a.  v4:= temp @kind wide;
  #L3ff29c.  v6:= lcmp(v4, v0);
  #L3ff2a0.  if v6 <= 0 then goto L3ff2a8;
  #L3ff2a4.  v2:= v2 - v4 @kind long;
  #L3ff2a6.  goto L3ff288;
  #L3ff2a8.  v4:= v7.`com.yalantis.ucrop.util.ImageHeaderParser$StreamReader.is` @type ^`java.io.InputStream` @kind object;
  #L3ff2ac.  call temp:= `read`(v4) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L3ff2b2.  v4:= temp;
  #L3ff2b4.  v5:= -1I;
  #L3ff2b6.  if v4 != v5 then goto L3ff2bc;
  #L3ff2ba.  goto L3ff2c2;
  #L3ff2bc.  v4:= 1L;
  #L3ff2c0.  goto L3ff2a4;
  #L3ff2c2.  v8:= v8 - v2 @kind long;
  #L3ff2c4.  return v8 @kind wide;
}
