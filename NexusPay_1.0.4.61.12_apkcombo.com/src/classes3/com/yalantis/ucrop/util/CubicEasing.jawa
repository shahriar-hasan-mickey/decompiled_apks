record `com.yalantis.ucrop.util.CubicEasing` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`com.yalantis.ucrop.util.CubicEasing` v0 @kind this) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3fe794.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L3fe79a.  return @kind void;
}
procedure `float` `easeIn`(`float` v0 , `float` v1 , `float` v2 , `float` v3 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeIn:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;

  #L3fe6fc.  v0:= v0 / v3 @kind float;
  #L3fe6fe.  v2:= v2 * v0 @kind float;
  #L3fe702.  v2:= v2 * v0 @kind float;
  #L3fe706.  v2:= v2 * v0 @kind float;
  #L3fe70a.  v2:= v2 + v1 @kind float;
  #L3fe70c.  return v2;
}
procedure `float` `easeInOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeInOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fe720.  v0:= 2.0F;
  #L3fe724.  v4:= v4 / v0 @kind float;
  #L3fe726.  v1:= v1 / v4 @kind float;
  #L3fe728.  v4:= 1.0F;
  #L3fe72c.  v4:= fcmpg(v1, v4);
  #L3fe730.  v3:= v3 / v0 @kind float;
  #L3fe732.  if v4 >= 0 then goto L3fe744;
  #L3fe736.  v3:= v3 * v1 @kind float;
  #L3fe73a.  v3:= v3 * v1 @kind float;
  #L3fe73e.  v3:= v3 * v1 @kind float;
  #L3fe742.  goto L3fe754;
  #L3fe744.  v1:= v1 - v0 @kind float;
  #L3fe746.  v4:= v1 * v1 @kind float;
  #L3fe74a.  v4:= v4 * v1 @kind float;
  #L3fe74e.  v4:= v4 + v0 @kind float;
  #L3fe750.  v3:= v3 * v4 @kind float;
  #L3fe754.  v3:= v3 + v2 @kind float;
  #L3fe756.  return v3;
}
procedure `float` `easeOut`(`float` v1 , `float` v2 , `float` v3 , `float` v4 ) @signature `Lcom/yalantis/ucrop/util/CubicEasing;.easeOut:(FFFF)F` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3fe768.  v1:= v1 / v4 @kind float;
  #L3fe76a.  v4:= 1.0F;
  #L3fe76e.  v1:= v1 - v4 @kind float;
  #L3fe770.  v0:= v1 * v1 @kind float;
  #L3fe774.  v0:= v0 * v1 @kind float;
  #L3fe778.  v0:= v0 + v4 @kind float;
  #L3fe77a.  v3:= v3 * v0 @kind float;
  #L3fe77e.  v3:= v3 + v2 @kind float;
  #L3fe780.  return v3;
}
