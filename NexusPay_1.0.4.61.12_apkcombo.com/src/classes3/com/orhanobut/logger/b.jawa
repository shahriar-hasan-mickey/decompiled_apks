record `com.orhanobut.logger.b` @kind class @AccessFlag FINAL {
}
procedure `java.lang.Object` `a`(`java.lang.Object` v0 @kind object) @signature `Lcom/orhanobut/logger/b;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;

  #L3c4cc4.  if v0 == 0 then goto L3c4cca;
  #L3c4cc8.  return v0 @kind object;
  #L3c4cca.  v0:= 0I;
  #L3c4ccc.  throw v0;
}
procedure `boolean` `b`(`java.lang.CharSequence` v6 @kind object, `java.lang.CharSequence` v7 @kind object) @signature `Lcom/orhanobut/logger/b;.b:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L3c4c20.  v0:= 1I;
  #L3c4c22.  if v6 != v7 then goto L3c4c28;
  #L3c4c26.  return v0;
  #L3c4c28.  v1:= 0I;
  #L3c4c2a.  if v6 == 0 then goto L3c4c84;
  #L3c4c2e.  if v7 == 0 then goto L3c4c84;
  #L3c4c32.  call temp:= `length`(v6) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4c38.  v2:= temp;
  #L3c4c3a.  call temp:= `length`(v7) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4c40.  v3:= temp;
  #L3c4c42.  if v2 != v3 then goto L3c4c84;
  #L3c4c46.  v3:= instanceof @variable v6 @type ^`java.lang.String` @kind boolean;
  #L3c4c4a.  if v3 == 0 then goto L3c4c60;
  #L3c4c4e.  v3:= instanceof @variable v7 @type ^`java.lang.String` @kind boolean;
  #L3c4c52.  if v3 == 0 then goto L3c4c60;
  #L3c4c56.  call temp:= `equals`(v6, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L3c4c5c.  v6:= temp;
  #L3c4c5e.  return v6;
  #L3c4c60.  v3:= 0I;
  #L3c4c62.  if v3 >= v2 then goto L3c4c82;
  #L3c4c66.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c4c6c.  v4:= temp;
  #L3c4c6e.  call temp:= `charAt`(v7, v3) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L3c4c74.  v5:= temp;
  #L3c4c76.  if v4 == v5 then goto L3c4c7c;
  #L3c4c7a.  return v1;
  #L3c4c7c.  v3:= v3 + 1;
  #L3c4c80.  goto L3c4c62;
  #L3c4c82.  return v0;
  #L3c4c84.  return v1;
}
procedure `java.lang.String` `c`(`java.lang.Throwable` v3 @kind object) @signature `Lcom/orhanobut/logger/b;.c:(Ljava/lang/Throwable;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L3c4ce0.  v0:= "" @kind object;
  #L3c4ce4.  if v3 != 0 then goto L3c4cea;
  #L3c4ce8.  return v0 @kind object;
  #L3c4cea.  v1:= v3 @kind object;
  #L3c4cec.  if v1 == 0 then goto L3c4d04;
  #L3c4cf0.  v2:= instanceof @variable v1 @type ^`java.net.UnknownHostException` @kind boolean;
  #L3c4cf4.  if v2 == 0 then goto L3c4cfa;
  #L3c4cf8.  return v0 @kind object;
  #L3c4cfa.  call temp:= `getCause`(v1) @signature `Ljava/lang/Throwable;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L3c4d00.  v1:= temp @kind object;
  #L3c4d02.  goto L3c4cec;
  #L3c4d04.  v0:= new `java.io.StringWriter`;
  #L3c4d08.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L3c4d0e.  v1:= new `java.io.PrintWriter`;
  #L3c4d12.  call `<init>`(v1, v0) @signature `Ljava/io/PrintWriter;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L3c4d18.  call `printStackTrace`(v3, v1) @signature `Ljava/lang/Throwable;.printStackTrace:(Ljava/io/PrintWriter;)V` @kind virtual;
  #L3c4d1e.  call `flush`(v1) @signature `Ljava/io/PrintWriter;.flush:()V` @kind virtual;
  #L3c4d24.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c4d2a.  v3:= temp @kind object;
  #L3c4d2c.  return v3 @kind object;
}
procedure `boolean` `d`(`java.lang.CharSequence` v0 @kind object) @signature `Lcom/orhanobut/logger/b;.d:(Ljava/lang/CharSequence;)Z` @AccessFlag STATIC {
    temp;

  #L3c4c98.  if v0 == 0 then goto L3c4cae;
  #L3c4c9c.  call temp:= `length`(v0) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L3c4ca2.  v0:= temp;
  #L3c4ca4.  if v0 != 0 then goto L3c4caa;
  #L3c4ca8.  goto L3c4cae;
  #L3c4caa.  v0:= 0I;
  #L3c4cac.  goto L3c4cb0;
  #L3c4cae.  v0:= 1I;
  #L3c4cb0.  return v0;
}
procedure `java.lang.String` `e`(`int` v0 ) @signature `Lcom/orhanobut/logger/b;.e:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;

  #L3c4d40.  goto L3c4d70;
  #L3c4d46.  v0:= "UNKNOWN" @kind object;
  #L3c4d4a.  return v0 @kind object;
  #L3c4d4c.  v0:= "ASSERT" @kind object;
  #L3c4d50.  return v0 @kind object;
  #L3c4d52.  v0:= "ERROR" @kind object;
  #L3c4d56.  return v0 @kind object;
  #L3c4d58.  v0:= "WARN" @kind object;
  #L3c4d5c.  return v0 @kind object;
  #L3c4d5e.  v0:= "INFO" @kind object;
  #L3c4d62.  return v0 @kind object;
  #L3c4d64.  v0:= "DEBUG" @kind object;
  #L3c4d68.  return v0 @kind object;
  #L3c4d6a.  v0:= "VERBOSE" @kind object;
  #L3c4d6e.  return v0 @kind object;
  #L3c4d70.  switch v0
                  | 2 => goto L3c4d6a
                  | 3 => goto L3c4d64
                  | 4 => goto L3c4d5e
                  | 5 => goto L3c4d58
                  | 6 => goto L3c4d52
                  | 7 => goto L3c4d4c
                  | else => goto L3c4d46;
}
procedure `java.lang.String` `f`(`java.lang.Object` v1 @kind object) @signature `Lcom/orhanobut/logger/b;.f:(Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3c4da0.  if v1 != 0 then goto L3c4daa;
  #L3c4da4.  v1:= "null" @kind object;
  #L3c4da8.  return v1 @kind object;
  #L3c4daa.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L3c4db0.  v0:= temp @kind object;
  #L3c4db2.  call temp:= `isArray`(v0) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L3c4db8.  v0:= temp;
  #L3c4dba.  if v0 != 0 then goto L3c4dc8;
  #L3c4dbe.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L3c4dc4.  v1:= temp @kind object;
  #L3c4dc6.  return v1 @kind object;
  #L3c4dc8.  v0:= instanceof @variable v1 @type ^`boolean`[] @kind boolean;
  #L3c4dcc.  if v0 == 0 then goto L3c4dde;
  #L3c4dd0.  v1:= (`boolean`[]) v1 @kind object;
  #L3c4dd4.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([Z)Ljava/lang/String;` @kind static;
  #L3c4dda.  v1:= temp @kind object;
  #L3c4ddc.  return v1 @kind object;
  #L3c4dde.  v0:= instanceof @variable v1 @type ^`byte`[] @kind boolean;
  #L3c4de2.  if v0 == 0 then goto L3c4df4;
  #L3c4de6.  v1:= (`byte`[]) v1 @kind object;
  #L3c4dea.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([B)Ljava/lang/String;` @kind static;
  #L3c4df0.  v1:= temp @kind object;
  #L3c4df2.  return v1 @kind object;
  #L3c4df4.  v0:= instanceof @variable v1 @type ^`char`[] @kind boolean;
  #L3c4df8.  if v0 == 0 then goto L3c4e0a;
  #L3c4dfc.  v1:= (`char`[]) v1 @kind object;
  #L3c4e00.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([C)Ljava/lang/String;` @kind static;
  #L3c4e06.  v1:= temp @kind object;
  #L3c4e08.  return v1 @kind object;
  #L3c4e0a.  v0:= instanceof @variable v1 @type ^`short`[] @kind boolean;
  #L3c4e0e.  if v0 == 0 then goto L3c4e20;
  #L3c4e12.  v1:= (`short`[]) v1 @kind object;
  #L3c4e16.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([S)Ljava/lang/String;` @kind static;
  #L3c4e1c.  v1:= temp @kind object;
  #L3c4e1e.  return v1 @kind object;
  #L3c4e20.  v0:= instanceof @variable v1 @type ^`int`[] @kind boolean;
  #L3c4e24.  if v0 == 0 then goto L3c4e36;
  #L3c4e28.  v1:= (`int`[]) v1 @kind object;
  #L3c4e2c.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([I)Ljava/lang/String;` @kind static;
  #L3c4e32.  v1:= temp @kind object;
  #L3c4e34.  return v1 @kind object;
  #L3c4e36.  v0:= instanceof @variable v1 @type ^`long`[] @kind boolean;
  #L3c4e3a.  if v0 == 0 then goto L3c4e4c;
  #L3c4e3e.  v1:= (`long`[]) v1 @kind object;
  #L3c4e42.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([J)Ljava/lang/String;` @kind static;
  #L3c4e48.  v1:= temp @kind object;
  #L3c4e4a.  return v1 @kind object;
  #L3c4e4c.  v0:= instanceof @variable v1 @type ^`float`[] @kind boolean;
  #L3c4e50.  if v0 == 0 then goto L3c4e62;
  #L3c4e54.  v1:= (`float`[]) v1 @kind object;
  #L3c4e58.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([F)Ljava/lang/String;` @kind static;
  #L3c4e5e.  v1:= temp @kind object;
  #L3c4e60.  return v1 @kind object;
  #L3c4e62.  v0:= instanceof @variable v1 @type ^`double`[] @kind boolean;
  #L3c4e66.  if v0 == 0 then goto L3c4e78;
  #L3c4e6a.  v1:= (`double`[]) v1 @kind object;
  #L3c4e6e.  call temp:= `toString`(v1) @signature `Ljava/util/Arrays;.toString:([D)Ljava/lang/String;` @kind static;
  #L3c4e74.  v1:= temp @kind object;
  #L3c4e76.  return v1 @kind object;
  #L3c4e78.  v0:= instanceof @variable v1 @type ^`java.lang.Object`[] @kind boolean;
  #L3c4e7c.  if v0 == 0 then goto L3c4e8e;
  #L3c4e80.  v1:= (`java.lang.Object`[]) v1 @kind object;
  #L3c4e84.  call temp:= `deepToString`(v1) @signature `Ljava/util/Arrays;.deepToString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L3c4e8a.  v1:= temp @kind object;
  #L3c4e8c.  return v1 @kind object;
  #L3c4e8e.  v1:= "Couldn't find a correct type for the object" @kind object;
  #L3c4e92.  return v1 @kind object;
}
