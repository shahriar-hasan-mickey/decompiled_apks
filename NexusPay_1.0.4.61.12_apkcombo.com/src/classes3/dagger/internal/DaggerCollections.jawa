record `dagger.internal.DaggerCollections` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`dagger.internal.DaggerCollections` v0 @kind this) @signature `Ldagger/internal/DaggerCollections;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L4035c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4035c6.  return @kind void;
}
procedure `int` `a`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L40350c.  v0:= 3I;
  #L40350e.  if v1 >= v0 then goto L403518;
  #L403512.  v1:= v1 + 1;
  #L403516.  return v1;
  #L403518.  v0:= 2.0F;
  #L40351c.  if v1 >= v0 then goto L403532;
  #L403520.  v1:= (`float`) v1 @kind i2f;
  #L403522.  v0:= 0.75F;
  #L403526.  v1:= v1 / v0 @kind float;
  #L403528.  v0:= 1.0F;
  #L40352c.  v1:= v1 + v0 @kind float;
  #L40352e.  v1:= (`int`) v1 @kind f2i;
  #L403530.  return v1;
  #L403532.  v1:= 2147483647I;
  #L403538.  return v1;
}
procedure `java.util.HashSet` `b`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.b:(I)Ljava/util/HashSet;` @AccessFlag STATIC {
    temp;
    v0;

  #L40354c.  v0:= new `java.util.HashSet`;
  #L403550.  call temp:= `a`(v1) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @kind static;
  #L403556.  v1:= temp;
  #L403558.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L40355e.  return v0 @kind object;
}
procedure `boolean` `hasDuplicates`(`java.util.List` v3 @kind object) @signature `Ldagger/internal/DaggerCollections;.hasDuplicates:(Ljava/util/List;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L4034c8.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4034ce.  v0:= temp;
  #L4034d0.  v1:= 0I;
  #L4034d2.  v2:= 2I;
  #L4034d4.  if v0 >= v2 then goto L4034da;
  #L4034d8.  return v1;
  #L4034da.  v0:= new `java.util.HashSet`;
  #L4034de.  call `<init>`(v0, v3) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L4034e4.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4034ea.  v3:= temp;
  #L4034ec.  call temp:= `size`(v0) @signature `Ljava/util/Set;.size:()I` @kind interface;
  #L4034f2.  v0:= temp;
  #L4034f4.  if v3 == v0 then goto L4034fa;
  #L4034f8.  v1:= 1I;
  #L4034fa.  return v1;
}
procedure `java.util.LinkedHashMap` `newLinkedHashMapWithExpectedSize`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403570.  v0:= new `java.util.LinkedHashMap`;
  #L403574.  call temp:= `a`(v1) @signature `Ldagger/internal/DaggerCollections;.a:(I)I` @kind static;
  #L40357a.  v1:= temp;
  #L40357c.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(I)V` @kind direct;
  #L403582.  return v0 @kind object;
}
procedure `java.util.List` `presizedList`(`int` v1 ) @signature `Ldagger/internal/DaggerCollections;.presizedList:(I)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403594.  if v1 != 0 then goto L4035a2;
  #L403598.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L40359e.  v1:= temp @kind object;
  #L4035a0.  return v1 @kind object;
  #L4035a2.  v0:= new `java.util.ArrayList`;
  #L4035a6.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4035ac.  return v0 @kind object;
}
