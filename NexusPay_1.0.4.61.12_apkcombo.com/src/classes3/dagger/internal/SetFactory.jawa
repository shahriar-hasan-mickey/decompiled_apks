record `dagger.internal.SetFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.Factory` @kind interface {
  `java.util.List` `dagger.internal.SetFactory.a` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `dagger.internal.SetFactory.b` @AccessFlag PRIVATE_FINAL;
}
global `dagger.internal.Factory` `@@dagger.internal.SetFactory.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/SetFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4042ec.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L4042f2.  v0:= temp @kind object;
  #L4042f4.  call temp:= `create`(v0) @signature `Ldagger/internal/InstanceFactory;.create:(Ljava/lang/Object;)Ldagger/internal/Factory;` @kind static;
  #L4042fa.  v0:= temp @kind object;
  #L4042fc.  `@@dagger.internal.SetFactory.c` @type ^`dagger.internal.Factory` := v0 @kind object;
  #L404300.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L404314.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L40431a.  v0.`dagger.internal.SetFactory.a` @type ^`java.util.List` := v1 @kind object;
  #L40431e.  v0.`dagger.internal.SetFactory.b` @type ^`java.util.List` := v2 @kind object;
  #L404322.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object, `dagger.internal.SetFactory$a` v3 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;Ldagger/internal/SetFactory$a;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L404334.  call `<init>`(v0, v1, v2) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L40433a.  return @kind void;
}
procedure `dagger.internal.SetFactory$Builder` `builder`(`int` v2 , `int` v3 ) @signature `Ldagger/internal/SetFactory;.builder:(II)Ldagger/internal/SetFactory$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L40419c.  v0:= new `dagger.internal.SetFactory$Builder`;
  #L4041a0.  v1:= 0I;
  #L4041a2.  call `<init>`(v0, v2, v3, v1) @signature `Ldagger/internal/SetFactory$Builder;.<init>:(IILdagger/internal/SetFactory$a;)V` @kind direct;
  #L4041a8.  return v0 @kind object;
}
procedure `dagger.internal.Factory` `empty`() @signature `Ldagger/internal/SetFactory;.empty:()Ldagger/internal/Factory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L404184.  v0:= `@@dagger.internal.SetFactory.c` @type ^`dagger.internal.Factory` @kind object;
  #L404188.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.SetFactory` v1 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4041bc.  call temp:= `get`(v1) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @kind virtual;
  #L4041c2.  v0:= temp @kind object;
  #L4041c4.  return v0 @kind object;
}
procedure `java.util.Set` `get`(`dagger.internal.SetFactory` v7 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L4041d8.  v0:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L4041dc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4041e2.  v0:= temp;
  #L4041e4.  v1:= new `java.util.ArrayList`;
  #L4041e8.  v2:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L4041ec.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L4041f2.  v2:= temp;
  #L4041f4.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4041fa.  v2:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L4041fe.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L404204.  v2:= temp;
  #L404206.  v3:= 0I;
  #L404208.  v4:= 0I;
  #L40420a.  if v4 >= v2 then goto L404240;
  #L40420e.  v5:= v7.`dagger.internal.SetFactory.b` @type ^`java.util.List` @kind object;
  #L404212.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L404218.  v5:= temp @kind object;
  #L40421a.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L40421e.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L404224.  v5:= temp @kind object;
  #L404226.  v5:= (`java.util.Collection`) v5 @kind object;
  #L40422a.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L404230.  v6:= temp;
  #L404232.  v0:= v0 + v6 @kind int;
  #L404234.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L40423a.  v4:= v4 + 1;
  #L40423e.  goto L40420a;
  #L404240.  call temp:= `b`(v0) @signature `Ldagger/internal/DaggerCollections;.b:(I)Ljava/util/HashSet;` @kind static;
  #L404246.  v0:= temp @kind object;
  #L404248.  v2:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L40424c.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L404252.  v2:= temp;
  #L404254.  v4:= 0I;
  #L404256.  if v4 >= v2 then goto L404286;
  #L40425a.  v5:= v7.`dagger.internal.SetFactory.a` @type ^`java.util.List` @kind object;
  #L40425e.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L404264.  v5:= temp @kind object;
  #L404266.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L40426a.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L404270.  v5:= temp @kind object;
  #L404272.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L404278.  v5:= temp @kind object;
  #L40427a.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L404280.  v4:= v4 + 1;
  #L404284.  goto L404256;
  #L404286.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L40428c.  v2:= temp;
  #L40428e.  if v3 >= v2 then goto L4042d0;
  #L404292.  call temp:= `get`(v1, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L404298.  v4:= temp @kind object;
  #L40429a.  v4:= (`java.util.Collection`) v4 @kind object;
  #L40429e.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L4042a4.  v4:= temp @kind object;
  #L4042a6.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L4042ac.  v5:= temp;
  #L4042ae.  if v5 == 0 then goto L4042ca;
  #L4042b2.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L4042b8.  v5:= temp @kind object;
  #L4042ba.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4042c0.  v5:= temp @kind object;
  #L4042c2.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L4042c8.  goto L4042a6;
  #L4042ca.  v3:= v3 + 1;
  #L4042ce.  goto L40428e;
  #L4042d0.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L4042d6.  v0:= temp @kind object;
  #L4042d8.  return v0 @kind object;
}
