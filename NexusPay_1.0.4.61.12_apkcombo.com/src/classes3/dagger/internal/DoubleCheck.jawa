record `dagger.internal.DoubleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface, `dagger.Lazy` @kind interface {
  `javax.inject.Provider` `dagger.internal.DoubleCheck.a` @AccessFlag PRIVATE_VOLATILE;
  `java.lang.Object` `dagger.internal.DoubleCheck.b` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.internal.DoubleCheck.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/DoubleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L4037cc.  v0:= new `java.lang.Object`;
  #L4037d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4037d6.  `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` := v0 @kind object;
  #L4037da.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.DoubleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4037ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4037f2.  v0:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L4037f6.  v1.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4037fa.  v1.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v2 @kind object;
  #L4037fe.  return @kind void;
}
procedure `java.lang.Object` `a`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/DoubleCheck;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L40372c.  v0:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L403730.  if v3 == v0 then goto L403738;
  #L403734.  v0:= 1I;
  #L403736.  goto L40373a;
  #L403738.  v0:= 0I;
  #L40373a.  if v0 == 0 then goto L40378c;
  #L40373e.  if v3 != v4 then goto L403744;
  #L403742.  goto L40378c;
  #L403744.  v0:= new `java.lang.IllegalStateException`;
  #L403748.  v1:= new `java.lang.StringBuilder`;
  #L40374c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403752.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L403756.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40375c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403762.  v3:= " & " @kind object;
  #L403766.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40376c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403772.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L403776.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L40377c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L403782.  v3:= temp @kind object;
  #L403784.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L40378a.  throw v0;
  #L40378c.  return v4 @kind object;
}
procedure `dagger.Lazy` `lazy`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.lazy:(Ljavax/inject/Provider;)Ldagger/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403690.  v0:= instanceof @variable v1 @type ^`dagger.Lazy` @kind boolean;
  #L403694.  if v0 == 0 then goto L40369e;
  #L403698.  v1:= (`dagger.Lazy`) v1 @kind object;
  #L40369c.  return v1 @kind object;
  #L40369e.  v0:= new `dagger.internal.DoubleCheck`;
  #L4036a2.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4036a8.  v1:= temp @kind object;
  #L4036aa.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L4036ae.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L4036b4.  return v0 @kind object;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L4037a0.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4037a6.  v0:= instanceof @variable v1 @type ^`dagger.internal.DoubleCheck` @kind boolean;
  #L4037aa.  if v0 == 0 then goto L4037b0;
  #L4037ae.  return v1 @kind object;
  #L4037b0.  v0:= new `dagger.internal.DoubleCheck`;
  #L4037b4.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L4037ba.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.DoubleCheck` v2 @kind this) @signature `Ldagger/internal/DoubleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4036c8.  v0:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L4036cc.  v1:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L4036d0.  if v0 != v1 then goto L40370c;
  #L4036d4.  @monitorenter v2
  #L4036d6.  v0:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L4036da.  v1:= `@@dagger.internal.DoubleCheck.c` @type ^`java.lang.Object` @kind object;
  #L4036de.  if v0 != v1 then goto L403702;
  #L4036e2.  v0:= v2.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` @kind object;
  #L4036e6.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L4036ec.  v0:= temp @kind object;
  #L4036ee.  v1:= v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` @kind object;
  #L4036f2.  call temp:= `a`(v1, v0) @signature `Ldagger/internal/DoubleCheck;.a:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L4036f8.  v2.`dagger.internal.DoubleCheck.b` @type ^`java.lang.Object` := v0 @kind object;
  #L4036fc.  v1:= 0I;
  #L4036fe.  v2.`dagger.internal.DoubleCheck.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L403702.  @monitorexit v2
  #L403704.  goto L40370c;
  #L403706.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L403708.  @monitorexit v2
  #L40370a.  throw v0;
  #L40370c.  return v0 @kind object;
  catch `java.lang.Throwable` @[L4036d6..L40370a] goto L403706;
}
