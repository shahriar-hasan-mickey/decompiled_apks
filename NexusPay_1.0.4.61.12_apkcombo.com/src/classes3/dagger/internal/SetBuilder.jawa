record `dagger.internal.SetBuilder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `dagger.internal.SetBuilder.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`dagger.internal.SetBuilder` v1 @kind this, `int` v2 ) @signature `Ldagger/internal/SetBuilder;.<init>:(I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L4040a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4040a6.  v0:= new `java.util.ArrayList`;
  #L4040aa.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L4040b0.  v1.`dagger.internal.SetBuilder.a` @type ^`java.util.List` := v0 @kind object;
  #L4040b4.  return @kind void;
}
procedure `dagger.internal.SetBuilder` `newSetBuilder`(`int` v1 ) @signature `Ldagger/internal/SetBuilder;.newSetBuilder:(I)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L404018.  v0:= new `dagger.internal.SetBuilder`;
  #L40401c.  call `<init>`(v0, v1) @signature `Ldagger/internal/SetBuilder;.<init>:(I)V` @kind direct;
  #L404022.  return v0 @kind object;
}
procedure `dagger.internal.SetBuilder` `add`(`dagger.internal.SetBuilder` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Ldagger/internal/SetBuilder;.add:(Ljava/lang/Object;)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L403fac.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L403fb0.  v1:= "Set contributions cannot be null" @kind object;
  #L403fb4.  call temp:= `checkNotNull`(v3, v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L403fba.  v3:= temp @kind object;
  #L403fbc.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L403fc2.  return v2 @kind object;
}
procedure `dagger.internal.SetBuilder` `addAll`(`dagger.internal.SetBuilder` v3 @kind this, `java.util.Collection` v4 @kind object) @signature `Ldagger/internal/SetBuilder;.addAll:(Ljava/util/Collection;)Ldagger/internal/SetBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L403fd4.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L403fda.  v0:= temp @kind object;
  #L403fdc.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L403fe2.  v1:= temp;
  #L403fe4.  if v1 == 0 then goto L403ffc;
  #L403fe8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L403fee.  v1:= temp @kind object;
  #L403ff0.  v2:= "Set contributions cannot be null" @kind object;
  #L403ff4.  call temp:= `checkNotNull`(v1, v2) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L403ffa.  goto L403fdc;
  #L403ffc.  v0:= v3.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L404000.  call temp:= `addAll`(v0, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L404006.  return v3 @kind object;
}
procedure `java.util.Set` `build`(`dagger.internal.SetBuilder` v2 @kind this) @signature `Ldagger/internal/SetBuilder;.build:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L404034.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L404038.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L40403e.  v0:= temp;
  #L404040.  if v0 == 0 then goto L40404e;
  #L404044.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L40404a.  v0:= temp @kind object;
  #L40404c.  return v0 @kind object;
  #L40404e.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L404052.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L404058.  v0:= temp;
  #L40405a.  v1:= 1I;
  #L40405c.  if v0 != v1 then goto L404078;
  #L404060.  v0:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L404064.  v1:= 0I;
  #L404066.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L40406c.  v0:= temp @kind object;
  #L40406e.  call temp:= `singleton`(v0) @signature `Ljava/util/Collections;.singleton:(Ljava/lang/Object;)Ljava/util/Set;` @kind static;
  #L404074.  v0:= temp @kind object;
  #L404076.  return v0 @kind object;
  #L404078.  v0:= new `java.util.HashSet`;
  #L40407c.  v1:= v2.`dagger.internal.SetBuilder.a` @type ^`java.util.List` @kind object;
  #L404080.  call `<init>`(v0, v1) @signature `Ljava/util/HashSet;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L404086.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L40408c.  v0:= temp @kind object;
  #L40408e.  return v0 @kind object;
}
