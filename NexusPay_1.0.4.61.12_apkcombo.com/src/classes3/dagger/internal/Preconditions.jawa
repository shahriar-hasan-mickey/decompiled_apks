record `dagger.internal.Preconditions` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`dagger.internal.Preconditions` v0 @kind this) @signature `Ldagger/internal/Preconditions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L403eb4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L403eba.  return @kind void;
}
procedure `void` `checkBuilderRequirement`(`java.lang.Object` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Ldagger/internal/Preconditions;.checkBuilderRequirement:(Ljava/lang/Object;Ljava/lang/Class;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403ecc.  if v1 == 0 then goto L403ed2;
  #L403ed0.  return @kind void;
  #L403ed2.  v1:= new `java.lang.IllegalStateException`;
  #L403ed6.  v0:= new `java.lang.StringBuilder`;
  #L403eda.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L403ee0.  call temp:= `getCanonicalName`(v2) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L403ee6.  v2:= temp @kind object;
  #L403ee8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403eee.  v2:= " must be set" @kind object;
  #L403ef2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L403ef8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L403efe.  v2:= temp @kind object;
  #L403f00.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403f06.  throw v1;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403d98.  if v0 == 0 then goto L403d9e;
  #L403d9c.  return v0 @kind object;
  #L403d9e.  v0:= 0I;
  #L403da0.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v0 @kind object, `java.lang.String` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L403db4.  if v0 == 0 then goto L403dba;
  #L403db8.  return v0 @kind object;
  #L403dba.  v0:= new `java.lang.NullPointerException`;
  #L403dbe.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403dc4.  throw v0;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L403dd8.  if v2 != 0 then goto L403e52;
  #L403ddc.  v2:= "%s" @kind object;
  #L403de0.  call temp:= `contains`(v3, v2) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L403de6.  v0:= temp;
  #L403de8.  if v0 == 0 then goto L403e42;
  #L403dec.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L403df2.  v0:= temp;
  #L403df4.  call temp:= `lastIndexOf`(v3, v2) @signature `Ljava/lang/String;.lastIndexOf:(Ljava/lang/String;)I` @kind virtual;
  #L403dfa.  v1:= temp;
  #L403dfc.  if v0 != v1 then goto L403e32;
  #L403e00.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L403e04.  if v0 == 0 then goto L403e16;
  #L403e08.  v4:= (`java.lang.Class`) v4 @kind object;
  #L403e0c.  call temp:= `getCanonicalName`(v4) @signature `Ljava/lang/Class;.getCanonicalName:()Ljava/lang/String;` @kind virtual;
  #L403e12.  v4:= temp @kind object;
  #L403e14.  goto L403e1e;
  #L403e16.  call temp:= `valueOf`(v4) @signature `Ljava/lang/String;.valueOf:(Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L403e1c.  v4:= temp @kind object;
  #L403e1e.  v0:= new `java.lang.NullPointerException`;
  #L403e22.  call temp:= `replace`(v3, v2, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L403e28.  v2:= temp @kind object;
  #L403e2a.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403e30.  throw v0;
  #L403e32.  v2:= new `java.lang.IllegalArgumentException`;
  #L403e36.  v3:= "errorMessageTemplate has more than one format specifier" @kind object;
  #L403e3a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403e40.  throw v2;
  #L403e42.  v2:= new `java.lang.IllegalArgumentException`;
  #L403e46.  v3:= "errorMessageTemplate has no format specifiers" @kind object;
  #L403e4a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403e50.  throw v2;
  #L403e52.  return v2 @kind object;
}
procedure `java.lang.Object` `checkNotNullFromComponent`(`java.lang.Object` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNullFromComponent:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403e64.  if v1 == 0 then goto L403e6a;
  #L403e68.  return v1 @kind object;
  #L403e6a.  v1:= new `java.lang.NullPointerException`;
  #L403e6e.  v0:= "Cannot return null from a non-@Nullable component method" @kind object;
  #L403e72.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403e78.  throw v1;
}
procedure `java.lang.Object` `checkNotNullFromProvides`(`java.lang.Object` v1 @kind object) @signature `Ldagger/internal/Preconditions;.checkNotNullFromProvides:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403e8c.  if v1 == 0 then goto L403e92;
  #L403e90.  return v1 @kind object;
  #L403e92.  v1:= new `java.lang.NullPointerException`;
  #L403e96.  v0:= "Cannot return null from a non-@Nullable @Provides method" @kind object;
  #L403e9a.  call `<init>`(v1, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L403ea0.  throw v1;
}
