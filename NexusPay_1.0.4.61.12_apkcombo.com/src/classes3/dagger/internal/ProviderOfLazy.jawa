record `dagger.internal.ProviderOfLazy` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface {
  `javax.inject.Provider` `dagger.internal.ProviderOfLazy.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<clinit>`() @signature `Ldagger/internal/ProviderOfLazy;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L403f7c.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.ProviderOfLazy` v0 @kind this, `javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/ProviderOfLazy;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L403f90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L403f96.  v0.`dagger.internal.ProviderOfLazy.a` @type ^`javax.inject.Provider` := v1 @kind object;
  #L403f9a.  return @kind void;
}
procedure `javax.inject.Provider` `create`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/ProviderOfLazy;.create:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L403f54.  v0:= new `dagger.internal.ProviderOfLazy`;
  #L403f58.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L403f5e.  v1:= temp @kind object;
  #L403f60.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L403f64.  call `<init>`(v0, v1) @signature `Ldagger/internal/ProviderOfLazy;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L403f6a.  return v0 @kind object;
}
procedure `dagger.Lazy` `get`(`dagger.internal.ProviderOfLazy` v1 @kind this) @signature `Ldagger/internal/ProviderOfLazy;.get:()Ldagger/Lazy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L403f18.  v0:= v1.`dagger.internal.ProviderOfLazy.a` @type ^`javax.inject.Provider` @kind object;
  #L403f1c.  call temp:= `lazy`(v0) @signature `Ldagger/internal/DoubleCheck;.lazy:(Ljavax/inject/Provider;)Ldagger/Lazy;` @kind static;
  #L403f22.  v0:= temp @kind object;
  #L403f24.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.ProviderOfLazy` v1 @kind this) @signature `Ldagger/internal/ProviderOfLazy;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L403f38.  call temp:= `get`(v1) @signature `Ldagger/internal/ProviderOfLazy;.get:()Ldagger/Lazy;` @kind virtual;
  #L403f3e.  v0:= temp @kind object;
  #L403f40.  return v0 @kind object;
}
