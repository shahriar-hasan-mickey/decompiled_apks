record `okhttp3.OkUrlFactory$1` @kind class @AccessFlag  extends `java.net.URLStreamHandler` @kind class {
  `okhttp3.OkUrlFactory` `okhttp3.OkUrlFactory$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `okhttp3.OkUrlFactory$1.val$protocol` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.OkUrlFactory$1` v0 @kind this, `okhttp3.OkUrlFactory` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/OkUrlFactory$1;.<init>:(Lokhttp3/OkUrlFactory;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L230cf0.  v0.`okhttp3.OkUrlFactory$1.this$0` @type ^`okhttp3.OkUrlFactory` := v1 @kind object;
  #L230cf4.  v0.`okhttp3.OkUrlFactory$1.val$protocol` @type ^`java.lang.String` := v2 @kind object;
  #L230cf8.  call `<init>`(v0) @signature `Ljava/net/URLStreamHandler;.<init>:()V` @kind direct;
  #L230cfe.  return @kind void;
}
procedure `int` `getDefaultPort`(`okhttp3.OkUrlFactory$1` v2 @kind this) @signature `Lokhttp3/OkUrlFactory$1;.getDefaultPort:()I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L230c60.  v0:= v2.`okhttp3.OkUrlFactory$1.val$protocol` @type ^`java.lang.String` @kind object;
  #L230c64.  v1:= "http" @kind object;
  #L230c68.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230c6e.  v0:= temp;
  #L230c70.  if v0 == 0 then goto L230c7a;
  #L230c74.  v0:= 80I;
  #L230c78.  return v0;
  #L230c7a.  v0:= v2.`okhttp3.OkUrlFactory$1.val$protocol` @type ^`java.lang.String` @kind object;
  #L230c7e.  v1:= "https" @kind object;
  #L230c82.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230c88.  v0:= temp;
  #L230c8a.  if v0 == 0 then goto L230c94;
  #L230c8e.  v0:= 443I;
  #L230c92.  return v0;
  #L230c94.  v0:= new `java.lang.AssertionError`;
  #L230c98.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L230c9e.  throw v0;
}
procedure `java.net.URLConnection` `openConnection`(`okhttp3.OkUrlFactory$1` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lokhttp3/OkUrlFactory$1;.openConnection:(Ljava/net/URL;)Ljava/net/URLConnection;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L230cb0.  v0:= v1.`okhttp3.OkUrlFactory$1.this$0` @type ^`okhttp3.OkUrlFactory` @kind object;
  #L230cb4.  call temp:= `open`(v0, v2) @signature `Lokhttp3/OkUrlFactory;.open:(Ljava/net/URL;)Ljava/net/HttpURLConnection;` @kind virtual;
  #L230cba.  v2:= temp @kind object;
  #L230cbc.  return v2 @kind object;
}
procedure `java.net.URLConnection` `openConnection`(`okhttp3.OkUrlFactory$1` v1 @kind this, `java.net.URL` v2 @kind object, `java.net.Proxy` v3 @kind object) @signature `Lokhttp3/OkUrlFactory$1;.openConnection:(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/URLConnection;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L230cd0.  v0:= v1.`okhttp3.OkUrlFactory$1.this$0` @type ^`okhttp3.OkUrlFactory` @kind object;
  #L230cd4.  call temp:= `open`(v0, v2, v3) @signature `Lokhttp3/OkUrlFactory;.open:(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/HttpURLConnection;` @kind virtual;
  #L230cda.  v2:= temp @kind object;
  #L230cdc.  return v2 @kind object;
}
