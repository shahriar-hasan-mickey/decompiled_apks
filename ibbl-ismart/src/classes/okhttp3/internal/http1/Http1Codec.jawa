record `okhttp3.internal.http1.Http1Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.internal.http1.Http1Codec.client` @AccessFlag FINAL;
  `long` `okhttp3.internal.http1.Http1Codec.headerLimit` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okhttp3.internal.http1.Http1Codec.sink` @AccessFlag FINAL;
  `okio.BufferedSource` `okhttp3.internal.http1.Http1Codec.source` @AccessFlag FINAL;
  `int` `okhttp3.internal.http1.Http1Codec.state` @AccessFlag ;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http1.Http1Codec.streamAllocation` @AccessFlag FINAL;
}
global `int` `@@okhttp3.internal.http1.Http1Codec.HEADER_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_CLOSED` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_IDLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_OPEN_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_OPEN_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_READING_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_READ_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_WRITING_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object, `okhttp3.internal.connection.StreamAllocation` v4 @kind object, `okio.BufferedSource` v5 @kind object, `okio.BufferedSink` v6 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/StreamAllocation;Lokio/BufferedSource;Lokio/BufferedSink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23c9b8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23c9be.  v0:= 0I;
  #L23c9c0.  v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L23c9c4.  v0:= 262144L;
  #L23c9ca.  v2.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` := v0 @kind wide;
  #L23c9ce.  v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L23c9d2.  v2.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v4 @kind object;
  #L23c9d6.  v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` := v5 @kind object;
  #L23c9da.  v2.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` := v6 @kind object;
  #L23c9de.  return @kind void;
}
procedure `java.lang.String` `readHeaderLine`(`okhttp3.internal.http1.Http1Codec` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23c4d8.  v0:= v5.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23c4dc.  v1:= v5.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` @kind wide;
  #L23c4e0.  call temp:= `readUtf8LineStrict`(v0, v1) @signature `Lokio/BufferedSource;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind interface;
  #L23c4e6.  v0:= temp @kind object;
  #L23c4e8.  v1:= v5.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` @kind wide;
  #L23c4ec.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c4f2.  v3:= temp;
  #L23c4f4.  v3:= (`long`) v3 @kind i2l;
  #L23c4f6.  v1:= v1 - v3 @kind long;
  #L23c4f8.  v5.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` := v1 @kind wide;
  #L23c4fc.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http1.Http1Codec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23c9f0.  v0:= v1.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23c9f4.  call temp:= `connection`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L23c9fa.  v0:= temp @kind object;
  #L23c9fc.  if v0 == 0 then goto L23ca06;
  #L23ca00.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L23ca06.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.Request` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http1/Http1Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c760.  v0:= "chunked" @kind object;
  #L23c764.  v1:= "Transfer-Encoding" @kind object;
  #L23c768.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23c76e.  v3:= temp @kind object;
  #L23c770.  call temp:= `equalsIgnoreCase`(v0, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23c776.  v3:= temp;
  #L23c778.  if v3 == 0 then goto L23c786;
  #L23c77c.  call temp:= `newChunkedSink`(v2) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSink:()Lokio/Sink;` @kind virtual;
  #L23c782.  v3:= temp @kind object;
  #L23c784.  return v3 @kind object;
  #L23c786.  v0:= -1L;
  #L23c78a.  v3:= lcmp(v4, v0);
  #L23c78e.  if v3 == 0 then goto L23c79c;
  #L23c792.  call temp:= `newFixedLengthSink`(v2, v4) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSink:(J)Lokio/Sink;` @kind virtual;
  #L23c798.  v3:= temp @kind object;
  #L23c79a.  return v3 @kind object;
  #L23c79c.  v3:= new `java.lang.IllegalStateException`;
  #L23c7a0.  v4:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L23c7a4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c7aa.  throw v3;
}
procedure `void` `detachTimeout`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okio.ForwardingTimeout` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L23ca18.  call temp:= `delegate`(v3) @signature `Lokio/ForwardingTimeout;.delegate:()Lokio/Timeout;` @kind virtual;
  #L23ca1e.  v0:= temp @kind object;
  #L23ca20.  v1:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L23ca24.  call temp:= `setDelegate`(v3, v1) @signature `Lokio/ForwardingTimeout;.setDelegate:(Lokio/Timeout;)Lokio/ForwardingTimeout;` @kind virtual;
  #L23ca2a.  call temp:= `clearDeadline`(v0) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L23ca30.  call temp:= `clearTimeout`(v0) @signature `Lokio/Timeout;.clearTimeout:()Lokio/Timeout;` @kind virtual;
  #L23ca36.  return @kind void;
}
procedure `void` `finishRequest`(`okhttp3.internal.http1.Http1Codec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ca48.  v0:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23ca4c.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L23ca52.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http1.Http1Codec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23ca64.  v0:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23ca68.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L23ca6e.  return @kind void;
}
procedure `boolean` `isClosed`(`okhttp3.internal.http1.Http1Codec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.isClosed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c4b4.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c4b8.  v1:= 6I;
  #L23c4ba.  if v0 != v1 then goto L23c4c2;
  #L23c4be.  v0:= 1I;
  #L23c4c0.  goto L23c4c4;
  #L23c4c2.  v0:= 0I;
  #L23c4c4.  return v0;
}
procedure `okio.Sink` `newChunkedSink`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c7bc.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c7c0.  v1:= 1I;
  #L23c7c2.  if v0 != v1 then goto L23c7d8;
  #L23c7c6.  v0:= 2I;
  #L23c7c8.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L23c7cc.  v0:= new `okhttp3.internal.http1.Http1Codec$ChunkedSink`;
  #L23c7d0.  call `<init>`(v0, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @kind direct;
  #L23c7d6.  return v0 @kind object;
  #L23c7d8.  v0:= new `java.lang.IllegalStateException`;
  #L23c7dc.  v1:= new `java.lang.StringBuilder`;
  #L23c7e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c7e6.  v2:= "state: " @kind object;
  #L23c7ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c7f0.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c7f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c7fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c800.  v1:= temp @kind object;
  #L23c802.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c808.  throw v0;
}
procedure `okio.Source` `newChunkedSource`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.HttpUrl` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c87c.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c880.  v1:= 4I;
  #L23c882.  if v0 != v1 then goto L23c898;
  #L23c886.  v0:= 5I;
  #L23c888.  v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L23c88c.  v0:= new `okhttp3.internal.http1.Http1Codec$ChunkedSource`;
  #L23c890.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @kind direct;
  #L23c896.  return v0 @kind object;
  #L23c898.  v3:= new `java.lang.IllegalStateException`;
  #L23c89c.  v0:= new `java.lang.StringBuilder`;
  #L23c8a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c8a6.  v1:= "state: " @kind object;
  #L23c8aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c8b0.  v1:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c8b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c8ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c8c0.  v0:= temp @kind object;
  #L23c8c2.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c8c8.  throw v3;
}
procedure `okio.Sink` `newFixedLengthSink`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSink:(J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c81c.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c820.  v1:= 1I;
  #L23c822.  if v0 != v1 then goto L23c838;
  #L23c826.  v0:= 2I;
  #L23c828.  v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L23c82c.  v0:= new `okhttp3.internal.http1.Http1Codec$FixedLengthSink`;
  #L23c830.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @kind direct;
  #L23c836.  return v0 @kind object;
  #L23c838.  v3:= new `java.lang.IllegalStateException`;
  #L23c83c.  v4:= new `java.lang.StringBuilder`;
  #L23c840.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c846.  v0:= "state: " @kind object;
  #L23c84a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c850.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c854.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c85a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c860.  v4:= temp @kind object;
  #L23c862.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c868.  throw v3;
}
procedure `okio.Source` `newFixedLengthSource`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c8dc.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c8e0.  v1:= 4I;
  #L23c8e2.  if v0 != v1 then goto L23c8f8;
  #L23c8e6.  v0:= 5I;
  #L23c8e8.  v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L23c8ec.  v0:= new `okhttp3.internal.http1.Http1Codec$FixedLengthSource`;
  #L23c8f0.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @kind direct;
  #L23c8f6.  return v0 @kind object;
  #L23c8f8.  v3:= new `java.lang.IllegalStateException`;
  #L23c8fc.  v4:= new `java.lang.StringBuilder`;
  #L23c900.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c906.  v0:= "state: " @kind object;
  #L23c90a.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c910.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c914.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c91a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c920.  v4:= temp @kind object;
  #L23c922.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c928.  throw v3;
}
procedure `okio.Source` `newUnknownLengthSource`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.newUnknownLengthSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c93c.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c940.  v1:= 4I;
  #L23c942.  if v0 != v1 then goto L23c976;
  #L23c946.  v0:= v3.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23c94a.  if v0 == 0 then goto L23c966;
  #L23c94e.  v1:= 5I;
  #L23c950.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L23c954.  call `noNewStreams`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.noNewStreams:()V` @kind virtual;
  #L23c95a.  v0:= new `okhttp3.internal.http1.Http1Codec$UnknownLengthSource`;
  #L23c95e.  call `<init>`(v0, v3) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @kind direct;
  #L23c964.  return v0 @kind object;
  #L23c966.  v0:= new `java.lang.IllegalStateException`;
  #L23c96a.  v1:= "streamAllocation == null" @kind object;
  #L23c96e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c974.  throw v0;
  #L23c976.  v0:= new `java.lang.IllegalStateException`;
  #L23c97a.  v1:= new `java.lang.StringBuilder`;
  #L23c97e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c984.  v2:= "state: " @kind object;
  #L23c988.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c98e.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c992.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c998.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c99e.  v1:= temp @kind object;
  #L23c9a0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c9a6.  throw v0;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http1.Http1Codec` v6 @kind this, `okhttp3.Response` v7 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23c66c.  v0:= v6.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23c670.  v0:= v0.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L23c674.  v1:= v6.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23c678.  v1:= v1.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L23c67c.  call `responseBodyStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L23c682.  v0:= "Content-Type" @kind object;
  #L23c686.  call temp:= `header`(v7, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23c68c.  v0:= temp @kind object;
  #L23c68e.  call temp:= `hasBody`(v7) @signature `Lokhttp3/internal/http/HttpHeaders;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L23c694.  v1:= temp;
  #L23c696.  if v1 != 0 then goto L23c6ba;
  #L23c69a.  v1:= 0L;
  #L23c69e.  call temp:= `newFixedLengthSource`(v6, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L23c6a4.  v7:= temp @kind object;
  #L23c6a6.  v3:= new `okhttp3.internal.http.RealResponseBody`;
  #L23c6aa.  call temp:= `buffer`(v7) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L23c6b0.  v7:= temp @kind object;
  #L23c6b2.  call `<init>`(v3, v0, v1, v7) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L23c6b8.  return v3 @kind object;
  #L23c6ba.  v1:= "chunked" @kind object;
  #L23c6be.  v2:= "Transfer-Encoding" @kind object;
  #L23c6c2.  call temp:= `header`(v7, v2) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23c6c8.  v2:= temp @kind object;
  #L23c6ca.  call temp:= `equalsIgnoreCase`(v1, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L23c6d0.  v1:= temp;
  #L23c6d2.  v2:= -1L;
  #L23c6d6.  if v1 == 0 then goto L23c706;
  #L23c6da.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23c6e0.  v7:= temp @kind object;
  #L23c6e2.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23c6e8.  v7:= temp @kind object;
  #L23c6ea.  call temp:= `newChunkedSource`(v6, v7) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/Source;` @kind virtual;
  #L23c6f0.  v7:= temp @kind object;
  #L23c6f2.  v1:= new `okhttp3.internal.http.RealResponseBody`;
  #L23c6f6.  call temp:= `buffer`(v7) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L23c6fc.  v7:= temp @kind object;
  #L23c6fe.  call `<init>`(v1, v0, v2, v7) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L23c704.  return v1 @kind object;
  #L23c706.  call temp:= `contentLength`(v7) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L23c70c.  v4:= temp @kind wide;
  #L23c70e.  v7:= lcmp(v4, v2);
  #L23c712.  if v7 == 0 then goto L23c732;
  #L23c716.  call temp:= `newFixedLengthSource`(v6, v4) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L23c71c.  v7:= temp @kind object;
  #L23c71e.  v1:= new `okhttp3.internal.http.RealResponseBody`;
  #L23c722.  call temp:= `buffer`(v7) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L23c728.  v7:= temp @kind object;
  #L23c72a.  call `<init>`(v1, v0, v4, v7) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L23c730.  return v1 @kind object;
  #L23c732.  v7:= new `okhttp3.internal.http.RealResponseBody`;
  #L23c736.  call temp:= `newUnknownLengthSource`(v6) @signature `Lokhttp3/internal/http1/Http1Codec;.newUnknownLengthSource:()Lokio/Source;` @kind virtual;
  #L23c73c.  v1:= temp @kind object;
  #L23c73e.  call temp:= `buffer`(v1) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L23c744.  v1:= temp @kind object;
  #L23c746.  call `<init>`(v7, v0, v2, v1) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L23c74c.  return v7 @kind object;
}
procedure `okhttp3.Headers` `readHeaders`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c510.  v0:= new `okhttp3.Headers$Builder`;
  #L23c514.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L23c51a.  call temp:= `readHeaderLine`(v3) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L23c520.  v1:= temp @kind object;
  #L23c522.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L23c528.  v2:= temp;
  #L23c52a.  if v2 == 0 then goto L23c53a;
  #L23c52e.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L23c532.  call `addLenient`(v2, v0, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @kind virtual;
  #L23c538.  goto L23c51a;
  #L23c53a.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L23c540.  v0:= temp @kind object;
  #L23c542.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http1.Http1Codec` v4 @kind this, `boolean` v5 ) @signature `Lokhttp3/internal/http1/Http1Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23c554.  v0:= v4.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c558.  v1:= 3I;
  #L23c55a.  v2:= 1I;
  #L23c55c.  if v0 == v2 then goto L23c598;
  #L23c560.  if v0 != v1 then goto L23c566;
  #L23c564.  goto L23c598;
  #L23c566.  v5:= new `java.lang.IllegalStateException`;
  #L23c56a.  v0:= new `java.lang.StringBuilder`;
  #L23c56e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c574.  v1:= "state: " @kind object;
  #L23c578.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c57e.  v1:= v4.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23c582.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c588.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c58e.  v0:= temp @kind object;
  #L23c590.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c596.  throw v5;
  #L23c598.  call temp:= `readHeaderLine`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L23c59e.  v0:= temp @kind object;
  #L23c5a0.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L23c5a6.  v0:= temp @kind object;
  #L23c5a8.  v2:= new `okhttp3.Response$Builder`;
  #L23c5ac.  call `<init>`(v2) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L23c5b2.  v3:= v0.`okhttp3.internal.http.StatusLine.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L23c5b6.  call temp:= `protocol`(v2, v3) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23c5bc.  v2:= temp @kind object;
  #L23c5be.  v3:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L23c5c2.  call temp:= `code`(v2, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L23c5c8.  v2:= temp @kind object;
  #L23c5ca.  v3:= v0.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L23c5ce.  call temp:= `message`(v2, v3) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23c5d4.  v2:= temp @kind object;
  #L23c5d6.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L23c5dc.  v3:= temp @kind object;
  #L23c5de.  call temp:= `headers`(v2, v3) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23c5e4.  v2:= temp @kind object;
  #L23c5e6.  v3:= 100I;
  #L23c5ea.  if v5 == 0 then goto L23c5fa;
  #L23c5ee.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L23c5f2.  if v5 != v3 then goto L23c5fa;
  #L23c5f6.  v5:= 0I;
  #L23c5f8.  return v5 @kind object;
  #L23c5fa.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L23c5fe.  if v5 != v3 then goto L23c608;
  #L23c602.  v4.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L23c606.  return v2 @kind object;
  #L23c608.  v5:= 4I;
  #L23c60a.  v4.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v5;
  #L23c60e.  return v2 @kind object;
  #L23c610.  v5:= Exception @type ^`java.io.EOFException` @kind object;
  #L23c612.  v0:= new `java.io.IOException`;
  #L23c616.  v1:= new `java.lang.StringBuilder`;
  #L23c61a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c620.  v2:= "unexpected end of stream on " @kind object;
  #L23c624.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c62a.  v2:= v4.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23c62e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c634.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c63a.  v1:= temp @kind object;
  #L23c63c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c642.  call temp:= `initCause`(v0, v5) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L23c648.  throw v0;
  catch `java.io.EOFException` @[L23c598..L23c60e] goto L23c610;
}
procedure `void` `writeRequest`(`okhttp3.internal.http1.Http1Codec` v3 @kind this, `okhttp3.Headers` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23ca80.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23ca84.  if v0 != 0 then goto L23cb02;
  #L23ca88.  v0:= v3.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23ca8c.  call temp:= `writeUtf8`(v0, v5) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23ca92.  v5:= temp @kind object;
  #L23ca94.  v0:= "\r\n" @kind object;
  #L23ca98.  call temp:= `writeUtf8`(v5, v0) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23ca9e.  v5:= 0I;
  #L23caa0.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23caa6.  v0:= temp;
  #L23caa8.  if v5 >= v0 then goto L23caec;
  #L23caac.  v1:= v3.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23cab0.  call temp:= `name`(v4, v5) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23cab6.  v2:= temp @kind object;
  #L23cab8.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23cabe.  v1:= temp @kind object;
  #L23cac0.  v2:= ": " @kind object;
  #L23cac4.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23caca.  v1:= temp @kind object;
  #L23cacc.  call temp:= `value`(v4, v5) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L23cad2.  v2:= temp @kind object;
  #L23cad4.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23cada.  v1:= temp @kind object;
  #L23cadc.  v2:= "\r\n" @kind object;
  #L23cae0.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23cae6.  v5:= v5 + 1;
  #L23caea.  goto L23caa8;
  #L23caec.  v4:= v3.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23caf0.  v5:= "\r\n" @kind object;
  #L23caf4.  call temp:= `writeUtf8`(v4, v5) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23cafa.  v4:= 1I;
  #L23cafc.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v4;
  #L23cb00.  return @kind void;
  #L23cb02.  v4:= new `java.lang.IllegalStateException`;
  #L23cb06.  v5:= new `java.lang.StringBuilder`;
  #L23cb0a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23cb10.  v0:= "state: " @kind object;
  #L23cb14.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23cb1a.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23cb1e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23cb24.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23cb2a.  v5:= temp @kind object;
  #L23cb2c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23cb32.  throw v4;
  #L23cb34.  return @kind void;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http1.Http1Codec` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23cb48.  v0:= v1.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23cb4c.  call temp:= `connection`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L23cb52.  v0:= temp @kind object;
  #L23cb54.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L23cb5a.  v0:= temp @kind object;
  #L23cb5c.  call temp:= `proxy`(v0) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L23cb62.  v0:= temp @kind object;
  #L23cb64.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L23cb6a.  v0:= temp @kind object;
  #L23cb6c.  call temp:= `get`(v2, v0) @signature `Lokhttp3/internal/http/RequestLine;.get:(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L23cb72.  v0:= temp @kind object;
  #L23cb74.  call temp:= `headers`(v2) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L23cb7a.  v2:= temp @kind object;
  #L23cb7c.  call `writeRequest`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @kind virtual;
  #L23cb82.  return @kind void;
}
