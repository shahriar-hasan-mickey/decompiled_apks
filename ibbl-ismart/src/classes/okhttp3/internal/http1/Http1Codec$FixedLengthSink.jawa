record `okhttp3.internal.http1.Http1Codec$FixedLengthSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `long` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23c10c.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L23c110.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23c116.  v2:= new `okio.ForwardingTimeout`;
  #L23c11a.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c11e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23c122.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L23c128.  v0:= temp @kind object;
  #L23c12a.  call `<init>`(v2, v0) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L23c130.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` := v2 @kind object;
  #L23c134.  v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v3 @kind wide;
  #L23c138.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v5 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23c14c.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L23c150.  if v0 == 0 then goto L23c156;
  #L23c154.  return @kind void;
  #L23c156.  v0:= 1I;
  #L23c158.  v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L23c15c.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L23c160.  v2:= 0L;
  #L23c164.  v4:= lcmp(v0, v2);
  #L23c168.  if v4 > 0 then goto L23c186;
  #L23c16c.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c170.  v1:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23c174.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L23c17a.  v0:= v5.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c17e.  v1:= 3I;
  #L23c180.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L23c184.  return @kind void;
  #L23c186.  v0:= new `java.net.ProtocolException`;
  #L23c18a.  v1:= "unexpected end of stream" @kind object;
  #L23c18e.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c194.  throw v0;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23c1a8.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L23c1ac.  if v0 == 0 then goto L23c1b2;
  #L23c1b0.  return @kind void;
  #L23c1b2.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c1b6.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23c1ba.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L23c1c0.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23c0f4.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23c0f8.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23c1d4.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L23c1d8.  if v0 != 0 then goto L23c258;
  #L23c1dc.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L23c1e2.  v1:= temp @kind wide;
  #L23c1e4.  v3:= 0L;
  #L23c1e8.  v5:= v9 @kind wide;
  #L23c1ea.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L23c1f0.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L23c1f4.  v2:= lcmp(v9, v0);
  #L23c1f8.  if v2 > 0 then goto L23c216;
  #L23c1fc.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c200.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23c204.  call `write`(v0, v8, v9) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L23c20a.  v0:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L23c20e.  v0:= v0 - v9 @kind long;
  #L23c210.  v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v0 @kind wide;
  #L23c214.  return @kind void;
  #L23c216.  v8:= new `java.net.ProtocolException`;
  #L23c21a.  v0:= new `java.lang.StringBuilder`;
  #L23c21e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c224.  v1:= "expected " @kind object;
  #L23c228.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c22e.  v1:= v7.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L23c232.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c238.  v1:= " bytes but received " @kind object;
  #L23c23c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c242.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c248.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c24e.  v9:= temp @kind object;
  #L23c250.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c256.  throw v8;
  #L23c258.  v8:= new `java.lang.IllegalStateException`;
  #L23c25c.  v9:= "closed" @kind object;
  #L23c260.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c266.  throw v8;
}
