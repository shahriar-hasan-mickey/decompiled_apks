record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23bf40.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L23bf44.  v0:= 0I;
  #L23bf46.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L23bf4c.  v0:= -1L;
  #L23bf50.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L23bf54.  v3:= 1I;
  #L23bf56.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v3 @kind boolean;
  #L23bf5a.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L23bf5e.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v6 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23bfb8.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23bfbc.  v2:= -1L;
  #L23bfc0.  v4:= lcmp(v0, v2);
  #L23bfc4.  if v4 == 0 then goto L23bfd6;
  #L23bfc8.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bfcc.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23bfd0.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L23bfd6.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bfda.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23bfde.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L23bfe4.  v0:= temp @kind wide;
  #L23bfe6.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L23bfea.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bfee.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23bff2.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L23bff8.  v0:= temp @kind object;
  #L23bffa.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L23c000.  v0:= temp @kind object;
  #L23c002.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23c006.  v3:= 0L;
  #L23c00a.  v5:= lcmp(v1, v3);
  #L23c00e.  if v5 < 0 then goto L23c072;
  #L23c012.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L23c018.  v1:= temp;
  #L23c01a.  if v1 != 0 then goto L23c02e;
  #L23c01e.  v1:= ";" @kind object;
  #L23c022.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L23c028.  v1:= temp;
  #L23c02a.  if v1 == 0 then goto L23c072;
  #L23c02e.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23c032.  v2:= lcmp(v0, v3);
  #L23c036.  if v2 != 0 then goto L23c070;
  #L23c03a.  v0:= 0I;
  #L23c03c.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L23c040.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c044.  v0:= v0.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23c048.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L23c04e.  v0:= temp @kind object;
  #L23c050.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L23c054.  v2:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23c058.  call temp:= `readHeaders`(v2) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L23c05e.  v2:= temp @kind object;
  #L23c060.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L23c066.  v0:= 1I;
  #L23c068.  v1:= 0I;
  #L23c06a.  call `endOfInput`(v6, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23c070.  return @kind void;
  #L23c072.  v1:= new `java.net.ProtocolException`;
  #L23c076.  v2:= new `java.lang.StringBuilder`;
  #L23c07a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c080.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L23c084.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c08a.  v3:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23c08e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c094.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c09a.  v0:= "\"" @kind object;
  #L23c09e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c0a4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c0aa.  v0:= temp @kind object;
  #L23c0ac.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c0b2.  throw v1;
  #L23c0b4.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L23c0b6.  v1:= new `java.net.ProtocolException`;
  #L23c0ba.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L23c0c0.  v0:= temp @kind object;
  #L23c0c2.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c0c8.  throw v1;
  catch `java.lang.NumberFormatException` @[L23bfd6..L23c02a] goto L23c0b4;
  catch `java.lang.NumberFormatException` @[L23c072..L23c0b4] goto L23c0b4;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23bf70.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L23bf74.  if v0 == 0 then goto L23bf7a;
  #L23bf78.  return @kind void;
  #L23bf7a.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L23bf7e.  if v0 == 0 then goto L23bfa0;
  #L23bf82.  v0:= 100I;
  #L23bf86.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L23bf8a.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L23bf90.  v0:= temp;
  #L23bf92.  if v0 != 0 then goto L23bfa0;
  #L23bf96.  v0:= 0I;
  #L23bf98.  v1:= 0I;
  #L23bf9a.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23bfa0.  v0:= 1I;
  #L23bfa2.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L23bfa6.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23be6c.  v0:= 0L;
  #L23be70.  v2:= lcmp(v9, v0);
  #L23be74.  if v2 < 0 then goto L23bf02;
  #L23be78.  v2:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L23be7c.  if v2 != 0 then goto L23bef2;
  #L23be80.  v2:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L23be84.  v3:= -1L;
  #L23be88.  if v2 != 0 then goto L23be8e;
  #L23be8c.  return v3 @kind wide;
  #L23be8e.  v5:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23be92.  v2:= lcmp(v5, v0);
  #L23be96.  if v2 == 0 then goto L23bea2;
  #L23be9a.  v0:= lcmp(v5, v3);
  #L23be9e.  if v0 != 0 then goto L23beb2;
  #L23bea2.  call `readChunkSize`(v7) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L23bea8.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L23beac.  if v0 != 0 then goto L23beb2;
  #L23beb0.  return v3 @kind wide;
  #L23beb2.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23beb6.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L23bebc.  v9:= temp @kind wide;
  #L23bebe.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L23bec4.  v8:= temp @kind wide;
  #L23bec6.  v10:= lcmp(v8, v3);
  #L23beca.  if v10 == 0 then goto L23beda;
  #L23bece.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L23bed2.  v0:= v0 - v8 @kind long;
  #L23bed4.  v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L23bed8.  return v8 @kind wide;
  #L23beda.  v8:= new `java.net.ProtocolException`;
  #L23bede.  v9:= "unexpected end of stream" @kind object;
  #L23bee2.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bee8.  v9:= 0I;
  #L23beea.  call `endOfInput`(v7, v9, v8) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23bef0.  throw v8;
  #L23bef2.  v8:= new `java.lang.IllegalStateException`;
  #L23bef6.  v9:= "closed" @kind object;
  #L23befa.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bf00.  throw v8;
  #L23bf02.  v8:= new `java.lang.IllegalArgumentException`;
  #L23bf06.  v0:= new `java.lang.StringBuilder`;
  #L23bf0a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23bf10.  v1:= "byteCount < 0: " @kind object;
  #L23bf14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bf1a.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bf20.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23bf26.  v9:= temp @kind object;
  #L23bf28.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bf2e.  throw v8;
}
