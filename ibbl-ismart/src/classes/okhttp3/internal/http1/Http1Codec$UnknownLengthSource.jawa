record `okhttp3.internal.http1.Http1Codec$UnknownLengthSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `boolean` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23c460.  v1.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L23c464.  v0:= 0I;
  #L23c466.  call `<init>`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L23c46c.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23c480.  v0:= v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` @kind boolean;
  #L23c484.  if v0 == 0 then goto L23c48a;
  #L23c488.  return @kind void;
  #L23c48a.  v0:= v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L23c48e.  if v0 != 0 then goto L23c49c;
  #L23c492.  v0:= 0I;
  #L23c494.  v1:= 0I;
  #L23c496.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23c49c.  v0:= 1I;
  #L23c49e.  v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L23c4a2.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23c3cc.  v0:= 0L;
  #L23c3d0.  v2:= lcmp(v5, v0);
  #L23c3d4.  if v2 < 0 then goto L23c420;
  #L23c3d8.  v0:= v3.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` @kind boolean;
  #L23c3dc.  if v0 != 0 then goto L23c410;
  #L23c3e0.  v0:= v3.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L23c3e4.  v1:= -1L;
  #L23c3e8.  if v0 == 0 then goto L23c3ee;
  #L23c3ec.  return v1 @kind wide;
  #L23c3ee.  call temp:= `read`(v3, v4, v5) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L23c3f4.  v4:= temp @kind wide;
  #L23c3f6.  v6:= lcmp(v4, v1);
  #L23c3fa.  if v6 != 0 then goto L23c40e;
  #L23c3fe.  v4:= 1I;
  #L23c400.  v3.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` := v4 @kind boolean;
  #L23c404.  v5:= 0I;
  #L23c406.  call `endOfInput`(v3, v4, v5) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23c40c.  return v1 @kind wide;
  #L23c40e.  return v4 @kind wide;
  #L23c410.  v4:= new `java.lang.IllegalStateException`;
  #L23c414.  v5:= "closed" @kind object;
  #L23c418.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c41e.  throw v4;
  #L23c420.  v4:= new `java.lang.IllegalArgumentException`;
  #L23c424.  v0:= new `java.lang.StringBuilder`;
  #L23c428.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23c42e.  v1:= "byteCount < 0: " @kind object;
  #L23c432.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c438.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L23c43e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23c444.  v5:= temp @kind object;
  #L23c446.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23c44c.  throw v4;
}
