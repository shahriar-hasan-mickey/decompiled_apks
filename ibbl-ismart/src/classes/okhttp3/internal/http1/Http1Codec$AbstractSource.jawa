record `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class @AccessFlag ABSTRACT extends `okio.Source` @kind interface {
  `long` `okhttp3.internal.http1.Http1Codec$AbstractSource.bytesRead` @AccessFlag PROTECTED;
  `boolean` `okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @AccessFlag PROTECTED;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$AbstractSource.timeout` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$AbstractSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23bbec.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L23bbf0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23bbf6.  v3:= new `okio.ForwardingTimeout`;
  #L23bbfa.  v0:= v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bbfe.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23bc02.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L23bc08.  v0:= temp @kind object;
  #L23bc0a.  call `<init>`(v3, v0) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L23bc10.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.timeout` @type ^`okio.ForwardingTimeout` := v3 @kind object;
  #L23bc14.  v0:= 0L;
  #L23bc18.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.bytesRead` @type ^`long` := v0 @kind wide;
  #L23bc1c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$AbstractSource` v0 @kind this, `okhttp3.internal.http1.Http1Codec` v1 @kind object, `okhttp3.internal.http1.Http1Codec$1` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L23bc30.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @kind direct;
  #L23bc36.  return @kind void;
}
procedure `void` `endOfInput`(`okhttp3.internal.http1.Http1Codec$AbstractSource` v7 @kind this, `boolean` v8 , `java.io.IOException` v9 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L23bc48.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc4c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23bc50.  v1:= 6I;
  #L23bc52.  if v0 != v1 then goto L23bc58;
  #L23bc56.  return @kind void;
  #L23bc58.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc5c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23bc60.  v2:= 5I;
  #L23bc62.  if v0 != v2 then goto L23bca2;
  #L23bc66.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc6a.  v2:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23bc6e.  call `detachTimeout`(v0, v2) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L23bc74.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc78.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L23bc7c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23bc80.  if v0 == 0 then goto L23bca0;
  #L23bc84.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc88.  v1:= v0.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23bc8c.  v2:= v8 ^~ 1;
  #L23bc90.  v3:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bc94.  v4:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.bytesRead` @type ^`long` @kind wide;
  #L23bc98.  v6:= v9 @kind object;
  #L23bc9a.  call `streamFinished`(v1, v2, v3, v4, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFinished:(ZLokhttp3/internal/http/HttpCodec;JLjava/io/IOException;)V` @kind virtual;
  #L23bca0.  return @kind void;
  #L23bca2.  v8:= new `java.lang.IllegalStateException`;
  #L23bca6.  v9:= new `java.lang.StringBuilder`;
  #L23bcaa.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23bcb0.  v0:= "state: " @kind object;
  #L23bcb4.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bcba.  v0:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bcbe.  v0:= v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L23bcc2.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23bcc8.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23bcce.  v9:= temp @kind object;
  #L23bcd0.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23bcd6.  throw v8;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$AbstractSource` v2 @kind this, `okio.Buffer` v3 @kind object, `long` v4 ) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23bb80.  v0:= v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bb84.  v0:= v0.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L23bb88.  call temp:= `read`(v0, v3, v4) @signature `Lokio/BufferedSource;.read:(Lokio/Buffer;J)J` @kind interface;
  #L23bb8e.  v3:= temp @kind wide;
  #L23bb90.  v0:= 0L;
  #L23bb94.  v5:= lcmp(v3, v0);
  #L23bb98.  if v5 <= 0 then goto L23bba6;
  #L23bb9c.  v0:= v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.bytesRead` @type ^`long` @kind wide;
  #L23bba0.  v0:= v0 + v3 @kind long;
  #L23bba2.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.bytesRead` @type ^`long` := v0 @kind wide;
  #L23bba6.  return v3 @kind wide;
  #L23bba8.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L23bbaa.  v4:= 0I;
  #L23bbac.  call `endOfInput`(v2, v4, v3) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L23bbb2.  throw v3;
  catch `java.io.IOException` @[L23bb80..L23bba6] goto L23bba8;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$AbstractSource` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23bbd4.  v0:= v1.`okhttp3.internal.http1.Http1Codec$AbstractSource.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23bbd8.  return v0 @kind object;
}
