record `okhttp3.internal.http1.Http1Codec$ChunkedSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23bd00.  v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L23bd04.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23bd0a.  v2:= new `okio.ForwardingTimeout`;
  #L23bd0e.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bd12.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23bd16.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L23bd1c.  v0:= temp @kind object;
  #L23bd1e.  call `<init>`(v2, v0) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L23bd24.  v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` := v2 @kind object;
  #L23bd28.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23bd3c.  @monitorenter v2
  #L23bd3e.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L23bd42.  if v0 == 0 then goto L23bd4a;
  #L23bd46.  @monitorexit v2
  #L23bd48.  return @kind void;
  #L23bd4a.  v0:= 1I;
  #L23bd4c.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L23bd50.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bd54.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23bd58.  v1:= "0\r\n\r\n" @kind object;
  #L23bd5c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23bd62.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bd66.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23bd6a.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L23bd70.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bd74.  v1:= 3I;
  #L23bd76.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L23bd7a.  @monitorexit v2
  #L23bd7c.  return @kind void;
  #L23bd7e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23bd80.  @monitorexit v2
  #L23bd82.  throw v0;
  catch `java.lang.Throwable` @[L23bd3e..L23bd42] goto L23bd7e;
  catch `java.lang.Throwable` @[L23bd4c..L23bd7a] goto L23bd7e;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23bda8.  @monitorenter v1
  #L23bdaa.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L23bdae.  if v0 == 0 then goto L23bdb6;
  #L23bdb2.  @monitorexit v1
  #L23bdb4.  return @kind void;
  #L23bdb6.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23bdba.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23bdbe.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L23bdc4.  @monitorexit v1
  #L23bdc6.  return @kind void;
  #L23bdc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23bdca.  @monitorexit v1
  #L23bdcc.  throw v0;
  catch `java.lang.Throwable` @[L23bdaa..L23bdae] goto L23bdc8;
  catch `java.lang.Throwable` @[L23bdb6..L23bdc4] goto L23bdc8;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23bce8.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L23bcec.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23bdf4.  v0:= v3.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L23bdf8.  if v0 != 0 then goto L23be4c;
  #L23bdfc.  v0:= 0L;
  #L23be00.  v2:= lcmp(v5, v0);
  #L23be04.  if v2 != 0 then goto L23be0a;
  #L23be08.  return @kind void;
  #L23be0a.  v0:= v3.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23be0e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23be12.  call temp:= `writeHexadecimalUnsignedLong`(v0, v5) @signature `Lokio/BufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @kind interface;
  #L23be18.  v0:= v3.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23be1c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23be20.  v1:= "\r\n" @kind object;
  #L23be24.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23be2a.  v0:= v3.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23be2e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23be32.  call `write`(v0, v4, v5) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L23be38.  v4:= v3.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L23be3c.  v4:= v4.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L23be40.  v5:= "\r\n" @kind object;
  #L23be44.  call temp:= `writeUtf8`(v4, v5) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L23be4a.  return @kind void;
  #L23be4c.  v4:= new `java.lang.IllegalStateException`;
  #L23be50.  v5:= "closed" @kind object;
  #L23be54.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23be5a.  throw v4;
}
