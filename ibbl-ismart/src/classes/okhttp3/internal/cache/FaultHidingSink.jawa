record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L236c24.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L236c2a.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L236c3c.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L236c40.  if v0 == 0 then goto L236c46;
  #L236c44.  return @kind void;
  #L236c46.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #L236c4c.  goto L236c5c;
  #L236c4e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L236c50.  v1:= 1I;
  #L236c52.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L236c56.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L236c5c.  return @kind void;
  catch `java.io.IOException` @[L236c46..L236c4c] goto L236c4e;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L236c80.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L236c84.  if v0 == 0 then goto L236c8a;
  #L236c88.  return @kind void;
  #L236c8a.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #L236c90.  goto L236ca0;
  #L236c92.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L236c94.  v1:= 1I;
  #L236c96.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L236c9a.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L236ca0.  return @kind void;
  catch `java.io.IOException` @[L236c8a..L236c90] goto L236c92;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L236cc4.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L236cd8.  v0:= v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L236cdc.  if v0 == 0 then goto L236ce8;
  #L236ce0.  call `skip`(v2, v3) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L236ce6.  return @kind void;
  #L236ce8.  call `write`(v1, v2, v3) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L236cee.  goto L236cfe;
  #L236cf0.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L236cf2.  v3:= 1I;
  #L236cf4.  v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v3 @kind boolean;
  #L236cf8.  call `onException`(v1, v2) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L236cfe.  return @kind void;
  catch `java.io.IOException` @[L236ce8..L236cee] goto L236cf0;
}
