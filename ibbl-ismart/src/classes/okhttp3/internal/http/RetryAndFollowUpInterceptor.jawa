record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE_VOLATILE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L23b864.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23b86a.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L23b86e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L23b872.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v17 @kind this, `okhttp3.HttpUrl` v18 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L23b21c.  v0:= v17 @kind object;
  #L23b220.  call temp:= `isHttps`(v18) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L23b226.  v1:= temp;
  #L23b228.  v2:= 0I;
  #L23b22a.  if v1 == 0 then goto L23b25a;
  #L23b22e.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b232.  call temp:= `sslSocketFactory`(v1) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L23b238.  v2:= temp @kind object;
  #L23b23a.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b23e.  call temp:= `hostnameVerifier`(v1) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L23b244.  v1:= temp @kind object;
  #L23b246.  v3:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b24a.  call temp:= `certificatePinner`(v3) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L23b250.  v3:= temp @kind object;
  #L23b252.  v10:= v1 @kind object;
  #L23b254.  v9:= v2 @kind object;
  #L23b256.  v11:= v3 @kind object;
  #L23b258.  goto L23b260;
  #L23b25a.  v9:= v2 @kind object;
  #L23b25c.  v10:= v9 @kind object;
  #L23b25e.  v11:= v10 @kind object;
  #L23b260.  v1:= new `okhttp3.Address`;
  #L23b264.  call temp:= `host`(v18) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L23b26a.  v5:= temp @kind object;
  #L23b26c.  call temp:= `port`(v18) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L23b272.  v6:= temp;
  #L23b274.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b278.  call temp:= `dns`(v2) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L23b27e.  v7:= temp @kind object;
  #L23b280.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b284.  call temp:= `socketFactory`(v2) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L23b28a.  v8:= temp @kind object;
  #L23b28c.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b290.  call temp:= `proxyAuthenticator`(v2) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L23b296.  v12:= temp @kind object;
  #L23b298.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b29c.  call temp:= `proxy`(v2) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L23b2a2.  v13:= temp @kind object;
  #L23b2a4.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b2a8.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L23b2ae.  v14:= temp @kind object;
  #L23b2b0.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b2b4.  call temp:= `connectionSpecs`(v2) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L23b2ba.  v15:= temp @kind object;
  #L23b2bc.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b2c0.  call temp:= `proxySelector`(v2) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L23b2c6.  v16:= temp @kind object;
  #L23b2c8.  v4:= v1 @kind object;
  #L23b2ca.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L23b2d0.  return v1 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v5 @kind this, `okhttp3.Response` v6 @kind object, `okhttp3.Route` v7 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L23b2e4.  if v6 == 0 then goto L23b562;
  #L23b2e8.  call temp:= `code`(v6) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L23b2ee.  v0:= temp;
  #L23b2f0.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b2f6.  v1:= temp @kind object;
  #L23b2f8.  call temp:= `method`(v1) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L23b2fe.  v1:= temp @kind object;
  #L23b300.  v2:= 0I;
  #L23b302.  goto L23b570;
  #L23b308.  return v2 @kind object;
  #L23b30a.  call temp:= `priorResponse`(v6) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L23b310.  v7:= temp @kind object;
  #L23b312.  if v7 == 0 then goto L23b330;
  #L23b316.  call temp:= `priorResponse`(v6) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L23b31c.  v7:= temp @kind object;
  #L23b31e.  call temp:= `code`(v7) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L23b324.  v7:= temp;
  #L23b326.  v0:= 503I;
  #L23b32a.  if v7 != v0 then goto L23b330;
  #L23b32e.  return v2 @kind object;
  #L23b330.  v7:= 2147483647I;
  #L23b336.  call temp:= `retryAfter`(v5, v6, v7) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L23b33c.  v7:= temp;
  #L23b33e.  if v7 != 0 then goto L23b34c;
  #L23b342.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b348.  v6:= temp @kind object;
  #L23b34a.  return v6 @kind object;
  #L23b34c.  return v2 @kind object;
  #L23b34e.  v7:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b352.  call temp:= `retryOnConnectionFailure`(v7) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L23b358.  v7:= temp;
  #L23b35a.  if v7 != 0 then goto L23b360;
  #L23b35e.  return v2 @kind object;
  #L23b360.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b366.  v7:= temp @kind object;
  #L23b368.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L23b36e.  v7:= temp @kind object;
  #L23b370.  v7:= instanceof @variable v7 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L23b374.  if v7 == 0 then goto L23b37a;
  #L23b378.  return v2 @kind object;
  #L23b37a.  call temp:= `priorResponse`(v6) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L23b380.  v7:= temp @kind object;
  #L23b382.  if v7 == 0 then goto L23b3a0;
  #L23b386.  call temp:= `priorResponse`(v6) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L23b38c.  v7:= temp @kind object;
  #L23b38e.  call temp:= `code`(v7) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L23b394.  v7:= temp;
  #L23b396.  v0:= 408I;
  #L23b39a.  if v7 != v0 then goto L23b3a0;
  #L23b39e.  return v2 @kind object;
  #L23b3a0.  v7:= 0I;
  #L23b3a2.  call temp:= `retryAfter`(v5, v6, v7) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L23b3a8.  v7:= temp;
  #L23b3aa.  if v7 <= 0 then goto L23b3b0;
  #L23b3ae.  return v2 @kind object;
  #L23b3b0.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b3b6.  v6:= temp @kind object;
  #L23b3b8.  return v6 @kind object;
  #L23b3ba.  if v7 == 0 then goto L23b3c8;
  #L23b3be.  call temp:= `proxy`(v7) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L23b3c4.  v0:= temp @kind object;
  #L23b3c6.  goto L23b3d4;
  #L23b3c8.  v0:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b3cc.  call temp:= `proxy`(v0) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L23b3d2.  v0:= temp @kind object;
  #L23b3d4.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L23b3da.  v0:= temp @kind object;
  #L23b3dc.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L23b3e0.  if v0 != v1 then goto L23b3fa;
  #L23b3e4.  v0:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b3e8.  call temp:= `proxyAuthenticator`(v0) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L23b3ee.  v0:= temp @kind object;
  #L23b3f0.  call temp:= `authenticate`(v0, v7, v6) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L23b3f6.  v6:= temp @kind object;
  #L23b3f8.  return v6 @kind object;
  #L23b3fa.  v6:= new `java.net.ProtocolException`;
  #L23b3fe.  v7:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L23b402.  call `<init>`(v6, v7) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b408.  throw v6;
  #L23b40a.  v0:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b40e.  call temp:= `authenticator`(v0) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L23b414.  v0:= temp @kind object;
  #L23b416.  call temp:= `authenticate`(v0, v7, v6) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L23b41c.  v6:= temp @kind object;
  #L23b41e.  return v6 @kind object;
  #L23b420.  v7:= "GET" @kind object;
  #L23b424.  call temp:= `equals`(v1, v7) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b42a.  v7:= temp;
  #L23b42c.  if v7 != 0 then goto L23b442;
  #L23b430.  v7:= "HEAD" @kind object;
  #L23b434.  call temp:= `equals`(v1, v7) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b43a.  v7:= temp;
  #L23b43c.  if v7 != 0 then goto L23b442;
  #L23b440.  return v2 @kind object;
  #L23b442.  v7:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b446.  call temp:= `followRedirects`(v7) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L23b44c.  v7:= temp;
  #L23b44e.  if v7 != 0 then goto L23b454;
  #L23b452.  return v2 @kind object;
  #L23b454.  v7:= "Location" @kind object;
  #L23b458.  call temp:= `header`(v6, v7) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23b45e.  v7:= temp @kind object;
  #L23b460.  if v7 != 0 then goto L23b466;
  #L23b464.  return v2 @kind object;
  #L23b466.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b46c.  v0:= temp @kind object;
  #L23b46e.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b474.  v0:= temp @kind object;
  #L23b476.  call temp:= `resolve`(v0, v7) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L23b47c.  v7:= temp @kind object;
  #L23b47e.  if v7 != 0 then goto L23b484;
  #L23b482.  return v2 @kind object;
  #L23b484.  call temp:= `scheme`(v7) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L23b48a.  v0:= temp @kind object;
  #L23b48c.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b492.  v3:= temp @kind object;
  #L23b494.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b49a.  v3:= temp @kind object;
  #L23b49c.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L23b4a2.  v3:= temp @kind object;
  #L23b4a4.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b4aa.  v0:= temp;
  #L23b4ac.  if v0 != 0 then goto L23b4c2;
  #L23b4b0.  v0:= v5.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b4b4.  call temp:= `followSslRedirects`(v0) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L23b4ba.  v0:= temp;
  #L23b4bc.  if v0 != 0 then goto L23b4c2;
  #L23b4c0.  return v2 @kind object;
  #L23b4c2.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b4c8.  v0:= temp @kind object;
  #L23b4ca.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L23b4d0.  v0:= temp @kind object;
  #L23b4d2.  call temp:= `permitsRequestBody`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L23b4d8.  v3:= temp;
  #L23b4da.  if v3 == 0 then goto L23b53a;
  #L23b4de.  call temp:= `redirectsWithBody`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L23b4e4.  v3:= temp;
  #L23b4e6.  call temp:= `redirectsToGet`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L23b4ec.  v4:= temp;
  #L23b4ee.  if v4 == 0 then goto L23b4fe;
  #L23b4f2.  v1:= "GET" @kind object;
  #L23b4f6.  call temp:= `method`(v0, v1, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b4fc.  goto L23b518;
  #L23b4fe.  if v3 == 0 then goto L23b512;
  #L23b502.  call temp:= `request`(v6) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b508.  v2:= temp @kind object;
  #L23b50a.  call temp:= `body`(v2) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L23b510.  v2:= temp @kind object;
  #L23b512.  call temp:= `method`(v0, v1, v2) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b518.  if v3 != 0 then goto L23b53a;
  #L23b51c.  v1:= "Transfer-Encoding" @kind object;
  #L23b520.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b526.  v1:= "Content-Length" @kind object;
  #L23b52a.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b530.  v1:= "Content-Type" @kind object;
  #L23b534.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b53a.  call temp:= `sameConnection`(v5, v6, v7) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L23b540.  v6:= temp;
  #L23b542.  if v6 != 0 then goto L23b550;
  #L23b546.  v6:= "Authorization" @kind object;
  #L23b54a.  call temp:= `removeHeader`(v0, v6) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b550.  call temp:= `url`(v0, v7) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L23b556.  v6:= temp @kind object;
  #L23b558.  call temp:= `build`(v6) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L23b55e.  v6:= temp @kind object;
  #L23b560.  return v6 @kind object;
  #L23b562.  v6:= new `java.lang.IllegalStateException`;
  #L23b566.  call `<init>`(v6) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L23b56c.  throw v6;
  #L23b56e.  
  #L23b570.  switch v0
                  | 300 => goto L23b442
                  | 301 => goto L23b442
                  | 302 => goto L23b442
                  | 303 => goto L23b442
                  | 307 => goto L23b420
                  | 308 => goto L23b420
                  | 401 => goto L23b40a
                  | 407 => goto L23b3ba
                  | 408 => goto L23b34e
                  | 503 => goto L23b30a
                  | else => goto L23b308;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L23b0a0.  v0:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L23b0a4.  v1:= 0I;
  #L23b0a6.  if v0 == 0 then goto L23b0ac;
  #L23b0aa.  return v1;
  #L23b0ac.  v0:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L23b0b0.  v2:= 1I;
  #L23b0b2.  if v0 == 0 then goto L23b0c6;
  #L23b0b6.  v4:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L23b0ba.  if v4 == 0 then goto L23b0c4;
  #L23b0be.  if v5 != 0 then goto L23b0c4;
  #L23b0c2.  v1:= 1I;
  #L23b0c4.  return v1;
  #L23b0c6.  v5:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L23b0ca.  if v5 == 0 then goto L23b0e0;
  #L23b0ce.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L23b0d4.  v5:= temp @kind object;
  #L23b0d6.  v5:= instanceof @variable v5 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L23b0da.  if v5 == 0 then goto L23b0e0;
  #L23b0de.  return v1;
  #L23b0e0.  v4:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L23b0e4.  if v4 == 0 then goto L23b0ea;
  #L23b0e8.  return v1;
  #L23b0ea.  return v2;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object, `okhttp3.internal.connection.StreamAllocation` v4 @kind object, `boolean` v5 , `okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23b0fc.  call `streamFailed`(v4, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L23b102.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b106.  call temp:= `retryOnConnectionFailure`(v0) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L23b10c.  v0:= temp;
  #L23b10e.  v1:= 0I;
  #L23b110.  if v0 != 0 then goto L23b116;
  #L23b114.  return v1;
  #L23b116.  if v5 == 0 then goto L23b12c;
  #L23b11a.  call temp:= `body`(v6) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L23b120.  v6:= temp @kind object;
  #L23b122.  v6:= instanceof @variable v6 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L23b126.  if v6 == 0 then goto L23b12c;
  #L23b12a.  return v1;
  #L23b12c.  call temp:= `isRecoverable`(v2, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L23b132.  v3:= temp;
  #L23b134.  if v3 != 0 then goto L23b13a;
  #L23b138.  return v1;
  #L23b13a.  call temp:= `hasMoreRoutes`(v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L23b140.  v3:= temp;
  #L23b142.  if v3 != 0 then goto L23b148;
  #L23b146.  return v1;
  #L23b148.  v3:= 1I;
  #L23b14a.  return v3;
}
procedure `int` `retryAfter`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this, `okhttp3.Response` v2 @kind object, `int` v3 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23b1d0.  v0:= "Retry-After" @kind object;
  #L23b1d4.  call temp:= `header`(v2, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23b1da.  v2:= temp @kind object;
  #L23b1dc.  if v2 != 0 then goto L23b1e2;
  #L23b1e0.  return v3;
  #L23b1e2.  v3:= "\\d+" @kind object;
  #L23b1e6.  call temp:= `matches`(v2, v3) @signature `Ljava/lang/String;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L23b1ec.  v3:= temp;
  #L23b1ee.  if v3 == 0 then goto L23b204;
  #L23b1f2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L23b1f8.  v2:= temp @kind object;
  #L23b1fa.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L23b200.  v2:= temp;
  #L23b202.  return v2;
  #L23b204.  v2:= 2147483647I;
  #L23b20a.  return v2;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23b15c.  call temp:= `request`(v3) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L23b162.  v3:= temp @kind object;
  #L23b164.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b16a.  v3:= temp @kind object;
  #L23b16c.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L23b172.  v0:= temp @kind object;
  #L23b174.  call temp:= `host`(v4) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L23b17a.  v1:= temp @kind object;
  #L23b17c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b182.  v0:= temp;
  #L23b184.  if v0 == 0 then goto L23b1bc;
  #L23b188.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L23b18e.  v0:= temp;
  #L23b190.  call temp:= `port`(v4) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L23b196.  v1:= temp;
  #L23b198.  if v0 != v1 then goto L23b1bc;
  #L23b19c.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L23b1a2.  v3:= temp @kind object;
  #L23b1a4.  call temp:= `scheme`(v4) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L23b1aa.  v4:= temp @kind object;
  #L23b1ac.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23b1b2.  v3:= temp;
  #L23b1b4.  if v3 == 0 then goto L23b1bc;
  #L23b1b8.  v3:= 1I;
  #L23b1ba.  goto L23b1be;
  #L23b1bc.  v3:= 0I;
  #L23b1be.  return v3;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23b884.  v0:= 1I;
  #L23b886.  v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v0 @kind boolean;
  #L23b88a.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23b88e.  if v0 == 0 then goto L23b898;
  #L23b892.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L23b898.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v14 @kind this, `okhttp3.Interceptor$Chain` v15 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L23b5d4.  call temp:= `request`(v15) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L23b5da.  v0:= temp @kind object;
  #L23b5dc.  v15:= (`okhttp3.internal.http.RealInterceptorChain`) v15 @kind object;
  #L23b5e0.  call temp:= `call`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L23b5e6.  v7:= temp @kind object;
  #L23b5e8.  call temp:= `eventListener`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L23b5ee.  v8:= temp @kind object;
  #L23b5f0.  v9:= new `okhttp3.internal.connection.StreamAllocation`;
  #L23b5f4.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b5f8.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L23b5fe.  v2:= temp @kind object;
  #L23b600.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b606.  v1:= temp @kind object;
  #L23b608.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L23b60e.  v3:= temp @kind object;
  #L23b610.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L23b614.  v1:= v9 @kind object;
  #L23b616.  v4:= v7 @kind object;
  #L23b618.  v5:= v8 @kind object;
  #L23b61a.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L23b620.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v9 @kind object;
  #L23b624.  v10:= 0I;
  #L23b626.  v11:= 0I;
  #L23b628.  v1:= v11 @kind object;
  #L23b62a.  v2:= 0I;
  #L23b62c.  v3:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L23b630.  if v3 != 0 then goto L23b804;
  #L23b634.  call temp:= `proceed`(v15, v0, v9, v11, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #L23b63a.  v0:= temp @kind object;
  #L23b63c.  if v1 == 0 then goto L23b670;
  #L23b640.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L23b646.  v0:= temp @kind object;
  #L23b648.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L23b64e.  v1:= temp @kind object;
  #L23b650.  call temp:= `body`(v1, v11) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23b656.  v1:= temp @kind object;
  #L23b658.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L23b65e.  v1:= temp @kind object;
  #L23b660.  call temp:= `priorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23b666.  v0:= temp @kind object;
  #L23b668.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L23b66e.  v0:= temp @kind object;
  #L23b670.  call temp:= `route`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.route:()Lokhttp3/Route;` @kind virtual;
  #L23b676.  v1:= temp @kind object;
  #L23b678.  call temp:= `followUpRequest`(v14, v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @kind direct;
  #L23b67e.  v12:= temp @kind object;
  #L23b680.  if v12 != 0 then goto L23b694;
  #L23b684.  v15:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` @kind boolean;
  #L23b688.  if v15 != 0 then goto L23b692;
  #L23b68c.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b692.  return v0 @kind object;
  #L23b694.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L23b69a.  v1:= temp @kind object;
  #L23b69c.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L23b6a2.  v13:= v2 + 1;
  #L23b6a6.  v1:= 20I;
  #L23b6aa.  if v13 > v1 then goto L23b778;
  #L23b6ae.  call temp:= `body`(v12) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L23b6b4.  v1:= temp @kind object;
  #L23b6b6.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L23b6ba.  if v1 != 0 then goto L23b75a;
  #L23b6be.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b6c4.  v1:= temp @kind object;
  #L23b6c6.  call temp:= `sameConnection`(v14, v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L23b6cc.  v1:= temp;
  #L23b6ce.  if v1 != 0 then goto L23b70e;
  #L23b6d2.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b6d8.  v9:= new `okhttp3.internal.connection.StreamAllocation`;
  #L23b6dc.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23b6e0.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L23b6e6.  v2:= temp @kind object;
  #L23b6e8.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23b6ee.  v1:= temp @kind object;
  #L23b6f0.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L23b6f6.  v3:= temp @kind object;
  #L23b6f8.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L23b6fc.  v1:= v9 @kind object;
  #L23b6fe.  v4:= v7 @kind object;
  #L23b700.  v5:= v8 @kind object;
  #L23b702.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L23b708.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v9 @kind object;
  #L23b70c.  goto L23b71a;
  #L23b70e.  call temp:= `codec`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L23b714.  v1:= temp @kind object;
  #L23b716.  if v1 != 0 then goto L23b722;
  #L23b71a.  v1:= v0 @kind object;
  #L23b71c.  v0:= v12 @kind object;
  #L23b71e.  v2:= v13;
  #L23b720.  goto L23b62c;
  #L23b722.  v15:= new `java.lang.IllegalStateException`;
  #L23b726.  v1:= new `java.lang.StringBuilder`;
  #L23b72a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b730.  v2:= "Closing the body of " @kind object;
  #L23b734.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b73a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b740.  v0:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L23b744.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b74a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b750.  v0:= temp @kind object;
  #L23b752.  call `<init>`(v15, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b758.  throw v15;
  #L23b75a.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b760.  v15:= new `java.net.HttpRetryException`;
  #L23b764.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L23b76a.  v0:= temp;
  #L23b76c.  v1:= "Cannot retry streamed HTTP body" @kind object;
  #L23b770.  call `<init>`(v15, v1, v0) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L23b776.  throw v15;
  #L23b778.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b77e.  v15:= new `java.net.ProtocolException`;
  #L23b782.  v0:= new `java.lang.StringBuilder`;
  #L23b786.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23b78c.  v1:= "Too many follow-up requests: " @kind object;
  #L23b790.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b796.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L23b79c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23b7a2.  v0:= temp @kind object;
  #L23b7a4.  call `<init>`(v15, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b7aa.  throw v15;
  #L23b7ac.  v15:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23b7ae.  goto L23b7f6;
  #L23b7b0.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L23b7b2.  v4:= instanceof @variable v3 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L23b7b6.  if v4 != 0 then goto L23b7be;
  #L23b7ba.  v4:= 1I;
  #L23b7bc.  goto L23b7c0;
  #L23b7be.  v4:= 0I;
  #L23b7c0.  call temp:= `recover`(v14, v3, v9, v4, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L23b7c6.  v4:= temp;
  #L23b7c8.  if v4 == 0 then goto L23b7d0;
  #L23b7cc.  goto L23b62c;
  #L23b7d0.  throw v3;
  #L23b7d2.  v3:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #L23b7d4.  call temp:= `getLastConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L23b7da.  v4:= temp @kind object;
  #L23b7dc.  call temp:= `recover`(v14, v4, v9, v10, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L23b7e2.  v4:= temp;
  #L23b7e4.  if v4 == 0 then goto L23b7ec;
  #L23b7e8.  goto L23b62c;
  #L23b7ec.  call temp:= `getLastConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L23b7f2.  v15:= temp @kind object;
  #L23b7f4.  throw v15;
  #L23b7f6.  call `streamFailed`(v9, v11) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L23b7fc.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b802.  throw v15;
  #L23b804.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L23b80a.  v15:= new `java.io.IOException`;
  #L23b80e.  v0:= "Canceled" @kind object;
  #L23b812.  call `<init>`(v15, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23b818.  throw v15;
  #L23b81a.  return @kind void;
  catch `okhttp3.internal.connection.RouteException` @[L23b634..L23b63c] goto L23b7d2;
  catch `java.io.IOException` @[L23b634..L23b63c] goto L23b7b0;
  catch `java.lang.Throwable` @[L23b634..L23b63c] goto L23b7ac;
  catch `java.lang.Throwable` @[L23b7b2..L23b7f6] goto L23b7ac;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23b088.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L23b08c.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L23b8ac.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L23b8b0.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23b84c.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23b850.  return v0 @kind object;
}
