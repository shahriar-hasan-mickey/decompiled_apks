record `okhttp3.internal.Util$2` @kind class @AccessFlag FINAL extends `java.util.concurrent.ThreadFactory` @kind interface {
  `boolean` `okhttp3.internal.Util$2.val$daemon` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.String` `okhttp3.internal.Util$2.val$name` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.Util$2` v0 @kind this, `java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/Util$2;.<init>:(Ljava/lang/String;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L23346c.  v0.`okhttp3.internal.Util$2.val$name` @type ^`java.lang.String` := v1 @kind object;
  #L233470.  v0.`okhttp3.internal.Util$2.val$daemon` @type ^`boolean` := v2 @kind boolean;
  #L233474.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23347a.  return @kind void;
}
procedure `java.lang.Thread` `newThread`(`okhttp3.internal.Util$2` v2 @kind this, `java.lang.Runnable` v3 @kind object) @signature `Lokhttp3/internal/Util$2;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L233440.  v0:= new `java.lang.Thread`;
  #L233444.  v1:= v2.`okhttp3.internal.Util$2.val$name` @type ^`java.lang.String` @kind object;
  #L233448.  call `<init>`(v0, v3, v1) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;Ljava/lang/String;)V` @kind direct;
  #L23344e.  v3:= v2.`okhttp3.internal.Util$2.val$daemon` @type ^`boolean` @kind boolean;
  #L233452.  call `setDaemon`(v0, v3) @signature `Ljava/lang/Thread;.setDaemon:(Z)V` @kind virtual;
  #L233458.  return v0 @kind object;
}
