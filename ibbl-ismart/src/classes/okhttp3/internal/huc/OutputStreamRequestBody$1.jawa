record `okhttp3.internal.huc.OutputStreamRequestBody$1` @kind class @AccessFlag  extends `java.io.OutputStream` @kind class {
  `long` `okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @AccessFlag PRIVATE;
  `okhttp3.internal.huc.OutputStreamRequestBody` `okhttp3.internal.huc.OutputStreamRequestBody$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `long` `okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @AccessFlag FINAL_SYNTHETIC;
  `okio.BufferedSink` `okhttp3.internal.huc.OutputStreamRequestBody$1.val$sink` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.huc.OutputStreamRequestBody$1` v0 @kind this, `okhttp3.internal.huc.OutputStreamRequestBody` v1 @kind object, `long` v2 , `okio.BufferedSink` v4 @kind object) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.<init>:(Lokhttp3/internal/huc/OutputStreamRequestBody;JLokio/BufferedSink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L245bd0.  v0.`okhttp3.internal.huc.OutputStreamRequestBody$1.this$0` @type ^`okhttp3.internal.huc.OutputStreamRequestBody` := v1 @kind object;
  #L245bd4.  v0.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @type ^`long` := v2 @kind wide;
  #L245bd8.  v0.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$sink` @type ^`okio.BufferedSink` := v4 @kind object;
  #L245bdc.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L245be2.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.huc.OutputStreamRequestBody$1` v5 @kind this) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L245bf4.  v0:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.this$0` @type ^`okhttp3.internal.huc.OutputStreamRequestBody` @kind object;
  #L245bf8.  v1:= 1I;
  #L245bfa.  v0.`okhttp3.internal.huc.OutputStreamRequestBody.closed` @type ^`boolean` := v1 @kind boolean;
  #L245bfe.  v0:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @type ^`long` @kind wide;
  #L245c02.  v2:= -1L;
  #L245c06.  v4:= lcmp(v0, v2);
  #L245c0a.  if v4 == 0 then goto L245c62;
  #L245c0e.  v2:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` @kind wide;
  #L245c12.  v4:= lcmp(v2, v0);
  #L245c16.  if v4 < 0 then goto L245c1c;
  #L245c1a.  goto L245c62;
  #L245c1c.  v0:= new `java.net.ProtocolException`;
  #L245c20.  v1:= new `java.lang.StringBuilder`;
  #L245c24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L245c2a.  v2:= "expected " @kind object;
  #L245c2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245c34.  v2:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @type ^`long` @kind wide;
  #L245c38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L245c3e.  v2:= " bytes but received " @kind object;
  #L245c42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245c48.  v2:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` @kind wide;
  #L245c4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L245c52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L245c58.  v1:= temp @kind object;
  #L245c5a.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245c60.  throw v0;
  #L245c62.  v0:= v5.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$sink` @type ^`okio.BufferedSink` @kind object;
  #L245c66.  call `close`(v0) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #L245c6c.  return @kind void;
}
procedure `void` `flush`(`okhttp3.internal.huc.OutputStreamRequestBody$1` v1 @kind this) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L245c80.  v0:= v1.`okhttp3.internal.huc.OutputStreamRequestBody$1.this$0` @type ^`okhttp3.internal.huc.OutputStreamRequestBody` @kind object;
  #L245c84.  v0:= v0.`okhttp3.internal.huc.OutputStreamRequestBody.closed` @type ^`boolean` @kind boolean;
  #L245c88.  if v0 == 0 then goto L245c8e;
  #L245c8c.  return @kind void;
  #L245c8e.  v0:= v1.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$sink` @type ^`okio.BufferedSink` @kind object;
  #L245c92.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L245c98.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.huc.OutputStreamRequestBody$1` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L245d84.  v0:= 1I;
  #L245d86.  v1:= new `byte`[v0];
  #L245d8a.  v4:= (`byte`) v4 @kind i2b;
  #L245d8c.  v2:= 0I;
  #L245d8e.  v1[v2]:= v4 @kind byte;
  #L245d92.  call `write`(v3, v1, v2, v0) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.write:([BII)V` @kind virtual;
  #L245d98.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.huc.OutputStreamRequestBody$1` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lokhttp3/internal/huc/OutputStreamRequestBody$1;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L245cac.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.this$0` @type ^`okhttp3.internal.huc.OutputStreamRequestBody` @kind object;
  #L245cb0.  v0:= v0.`okhttp3.internal.huc.OutputStreamRequestBody.closed` @type ^`boolean` @kind boolean;
  #L245cb4.  if v0 != 0 then goto L245d54;
  #L245cb8.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @type ^`long` @kind wide;
  #L245cbc.  v2:= -1L;
  #L245cc0.  v4:= lcmp(v0, v2);
  #L245cc4.  if v4 == 0 then goto L245d26;
  #L245cc8.  v2:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` @kind wide;
  #L245ccc.  v4:= (`long`) v9 @kind i2l;
  #L245cce.  v2:= v2 + v4 @kind long;
  #L245cd0.  v4:= lcmp(v2, v0);
  #L245cd4.  if v4 > 0 then goto L245cda;
  #L245cd8.  goto L245d26;
  #L245cda.  v7:= new `java.net.ProtocolException`;
  #L245cde.  v8:= new `java.lang.StringBuilder`;
  #L245ce2.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L245ce8.  v0:= "expected " @kind object;
  #L245cec.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245cf2.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$expectedContentLength` @type ^`long` @kind wide;
  #L245cf6.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L245cfc.  v0:= " bytes but received " @kind object;
  #L245d00.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245d06.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` @kind wide;
  #L245d0a.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L245d10.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L245d16.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L245d1c.  v8:= temp @kind object;
  #L245d1e.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245d24.  throw v7;
  #L245d26.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` @kind wide;
  #L245d2a.  v2:= (`long`) v9 @kind i2l;
  #L245d2c.  v0:= v0 + v2 @kind long;
  #L245d2e.  v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.bytesReceived` @type ^`long` := v0 @kind wide;
  #L245d32.  v0:= v6.`okhttp3.internal.huc.OutputStreamRequestBody$1.val$sink` @type ^`okio.BufferedSink` @kind object;
  #L245d36.  call temp:= `write`(v0, v7, v8, v9) @signature `Lokio/BufferedSink;.write:([BII)Lokio/BufferedSink;` @kind interface;
  #L245d3c.  return @kind void;
  #L245d3e.  v7:= Exception @type ^`java.io.InterruptedIOException` @kind object;
  #L245d40.  v8:= new `java.net.SocketTimeoutException`;
  #L245d44.  call temp:= `getMessage`(v7) @signature `Ljava/io/InterruptedIOException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L245d4a.  v7:= temp @kind object;
  #L245d4c.  call `<init>`(v8, v7) @signature `Ljava/net/SocketTimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245d52.  throw v8;
  #L245d54.  v7:= new `java.io.IOException`;
  #L245d58.  v8:= "closed" @kind object;
  #L245d5c.  call `<init>`(v7, v8) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245d62.  throw v7;
  catch `java.io.InterruptedIOException` @[L245d32..L245d3c] goto L245d3e;
}
