record `okhttp3.internal.platform.Jdk9Platform` @kind class @AccessFlag FINAL extends `okhttp3.internal.platform.Platform` @kind class {
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @AccessFlag FINAL;
  `java.lang.reflect.Method` `okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.Jdk9Platform` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246db8.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L246dbe.  v0.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L246dc2.  v0.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L246dc6.  return @kind void;
}
procedure `okhttp3.internal.platform.Jdk9Platform` `buildIfSupported`() @signature `Lokhttp3/internal/platform/Jdk9Platform;.buildIfSupported:()Lokhttp3/internal/platform/Jdk9Platform;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L246d54.  v0:= constclass @type ^`javax.net.ssl.SSLParameters` @kind object;
  #L246d58.  v1:= "setApplicationProtocols" @kind object;
  #L246d5c.  v2:= 1I;
  #L246d5e.  v2:= new `java.lang.Class`[v2];
  #L246d62.  v3:= constclass @type ^`java.lang.String`[] @kind object;
  #L246d66.  v4:= 0I;
  #L246d68.  v2[v4]:= v3 @kind object;
  #L246d6c.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L246d72.  v0:= temp @kind object;
  #L246d74.  v1:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L246d78.  v2:= "getApplicationProtocol" @kind object;
  #L246d7c.  v3:= new `java.lang.Class`[v4];
  #L246d80.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L246d86.  v1:= temp @kind object;
  #L246d88.  v2:= new `okhttp3.internal.platform.Jdk9Platform`;
  #L246d8c.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/platform/Jdk9Platform;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L246d92.  return v2 @kind object;
  #L246d94.  v0:= 0I;
  #L246d96.  return v0 @kind object;
  catch `java.lang.NoSuchMethodException` @[L246d54..L246d92] goto L246d94;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.Jdk9Platform` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `java.lang.String` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246dd8.  call temp:= `getSSLParameters`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSSLParameters:()Ljavax/net/ssl/SSLParameters;` @kind virtual;
  #L246dde.  v6:= temp @kind object;
  #L246de0.  call temp:= `alpnProtocolNames`(v7) @signature `Lokhttp3/internal/platform/Jdk9Platform;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L246de6.  v7:= temp @kind object;
  #L246de8.  v0:= v4.`okhttp3.internal.platform.Jdk9Platform.setProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L246dec.  v1:= 1I;
  #L246dee.  v1:= new `java.lang.Object`[v1];
  #L246df2.  v2:= 0I;
  #L246df4.  call temp:= `size`(v7) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L246dfa.  v3:= temp;
  #L246dfc.  v3:= new `java.lang.String`[v3];
  #L246e00.  call temp:= `toArray`(v7, v3) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L246e06.  v7:= temp @kind object;
  #L246e08.  v1[v2]:= v7 @kind object;
  #L246e0c.  call temp:= `invoke`(v0, v6, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L246e12.  call `setSSLParameters`(v5, v6) @signature `Ljavax/net/ssl/SSLSocket;.setSSLParameters:(Ljavax/net/ssl/SSLParameters;)V` @kind virtual;
  #L246e18.  return @kind void;
  #L246e1a.  v5:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L246e1c.  v6:= "unable to set ssl parameters" @kind object;
  #L246e20.  call temp:= `assertionError`(v6, v5) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L246e26.  v5:= temp @kind object;
  #L246e28.  throw v5;
  catch `java.lang.IllegalAccessException` @[L246dd8..L246e18] goto L246e1a;
  catch `java.lang.reflect.InvocationTargetException` @[L246dd8..L246e18] goto L246e1a;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.Jdk9Platform` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246cd0.  v0:= v2.`okhttp3.internal.platform.Jdk9Platform.getProtocolMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L246cd4.  v1:= 0I;
  #L246cd6.  v1:= new `java.lang.Object`[v1];
  #L246cda.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L246ce0.  v3:= temp @kind object;
  #L246ce2.  v3:= (`java.lang.String`) v3 @kind object;
  #L246ce6.  if v3 == 0 then goto L246cfe;
  #L246cea.  v0:= "" @kind object;
  #L246cee.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L246cf4.  v0:= temp;
  #L246cf6.  if v0 == 0 then goto L246cfc;
  #L246cfa.  goto L246cfe;
  #L246cfc.  return v3 @kind object;
  #L246cfe.  v3:= 0I;
  #L246d00.  return v3 @kind object;
  #L246d02.  v3:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L246d04.  v0:= "unable to get selected protocols" @kind object;
  #L246d08.  call temp:= `assertionError`(v0, v3) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L246d0e.  v3:= temp @kind object;
  #L246d10.  throw v3;
  catch `java.lang.IllegalAccessException` @[L246cd0..L246cf6] goto L246d02;
  catch `java.lang.reflect.InvocationTargetException` @[L246cd0..L246cf6] goto L246d02;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.Jdk9Platform` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/internal/platform/Jdk9Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246d34.  v2:= new `java.lang.UnsupportedOperationException`;
  #L246d38.  v0:= "clientBuilder.sslSocketFactory(SSLSocketFactory) not supported on JDK 9+" @kind object;
  #L246d3c.  call `<init>`(v2, v0) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246d42.  throw v2;
}
