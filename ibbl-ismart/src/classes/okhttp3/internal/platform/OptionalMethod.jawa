record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2474dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2474e2.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L2474e6.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L2474ea.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L2474ee.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L247440.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L247444.  v1:= 0I;
  #L247446.  if v0 == 0 then goto L24747a;
  #L24744a.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L24744e.  call temp:= `getPublicMethod`(v4, v0, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L247454.  v4:= temp @kind object;
  #L247456.  if v4 == 0 then goto L247478;
  #L24745a.  v0:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L24745e.  if v0 == 0 then goto L247478;
  #L247462.  call temp:= `getReturnType`(v4) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L247468.  v2:= temp @kind object;
  #L24746a.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L247470.  v0:= temp;
  #L247472.  if v0 != 0 then goto L247478;
  #L247476.  goto L24747a;
  #L247478.  v1:= v4 @kind object;
  #L24747a.  return v1 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L24748c.  v0:= 0I;
  #L24748e.  call temp:= `getMethod`(v1, v2, v3) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L247494.  v1:= temp @kind object;
  #L247496.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #L24749c.  v2:= temp;
  #L24749e.  v2:= v2 ^& 1;
  #L2474a2.  if v2 != 0 then goto L2474ac;
  #L2474a6.  v1:= v0 @kind object;
  #L2474a8.  goto L2474ac;
  #L2474aa.  v1:= v0 @kind object;
  #L2474ac.  return v1 @kind object;
  catch `java.lang.NoSuchMethodException` @[L24748e..L247496] goto L2474aa;
  catch `java.lang.NoSuchMethodException` @[L247496..L24749e] goto L2474ac;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247294.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L24729a.  v0:= temp @kind object;
  #L24729c.  call temp:= `getMethod`(v3, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L2472a2.  v0:= temp @kind object;
  #L2472a4.  if v0 == 0 then goto L2472e8;
  #L2472a8.  call temp:= `invoke`(v0, v4, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2472ae.  v4:= temp @kind object;
  #L2472b0.  return v4 @kind object;
  #L2472b2.  v4:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L2472b4.  v5:= new `java.lang.AssertionError`;
  #L2472b8.  v1:= new `java.lang.StringBuilder`;
  #L2472bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2472c2.  v2:= "Unexpectedly could not call: " @kind object;
  #L2472c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472cc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2472d8.  v0:= temp @kind object;
  #L2472da.  call `<init>`(v5, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2472e0.  call temp:= `initCause`(v5, v4) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2472e6.  throw v5;
  #L2472e8.  v5:= new `java.lang.AssertionError`;
  #L2472ec.  v0:= new `java.lang.StringBuilder`;
  #L2472f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2472f6.  v1:= "Method " @kind object;
  #L2472fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247300.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L247304.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24730a.  v1:= " not supported for object " @kind object;
  #L24730e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247314.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24731a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247320.  v4:= temp @kind object;
  #L247322.  call `<init>`(v5, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247328.  throw v5;
  catch `java.lang.IllegalAccessException` @[L2472a8..L2472b0] goto L2472b2;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24734c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L247352.  v0:= temp @kind object;
  #L247354.  call temp:= `getMethod`(v2, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L24735a.  v0:= temp @kind object;
  #L24735c.  v1:= 0I;
  #L24735e.  if v0 != 0 then goto L247364;
  #L247362.  return v1 @kind object;
  #L247364.  call temp:= `invoke`(v0, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L24736a.  v3:= temp @kind object;
  #L24736c.  return v3 @kind object;
  #L24736e.  return v1 @kind object;
  catch `java.lang.IllegalAccessException` @[L247364..L24736c] goto L24736e;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247390.  call temp:= `invokeOptional`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L247396.  v2:= temp @kind object;
  #L247398.  return v2 @kind object;
  #L24739a.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L24739c.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L2473a2.  v2:= temp @kind object;
  #L2473a4.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L2473a8.  if v3 == 0 then goto L2473b2;
  #L2473ac.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L2473b0.  throw v2;
  #L2473b2.  v3:= new `java.lang.AssertionError`;
  #L2473b6.  v0:= "Unexpected exception" @kind object;
  #L2473ba.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2473c0.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2473c6.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L247390..L247398] goto L24739a;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object`[] v3 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2473e8.  call temp:= `invoke`(v1, v2, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L2473ee.  v2:= temp @kind object;
  #L2473f0.  return v2 @kind object;
  #L2473f2.  v2:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L2473f4.  call temp:= `getTargetException`(v2) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L2473fa.  v2:= temp @kind object;
  #L2473fc.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L247400.  if v3 == 0 then goto L24740a;
  #L247404.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L247408.  throw v2;
  #L24740a.  v3:= new `java.lang.AssertionError`;
  #L24740e.  v0:= "Unexpected exception" @kind object;
  #L247412.  call `<init>`(v3, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247418.  call temp:= `initCause`(v3, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L24741e.  throw v3;
  catch `java.lang.reflect.InvocationTargetException` @[L2473e8..L2473f0] goto L2473f2;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;

  #L247268.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L24726e.  v1:= temp @kind object;
  #L247270.  call temp:= `getMethod`(v0, v1) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L247276.  v1:= temp @kind object;
  #L247278.  if v1 == 0 then goto L247280;
  #L24727c.  v1:= 1I;
  #L24727e.  goto L247282;
  #L247280.  v1:= 0I;
  #L247282.  return v1;
}
