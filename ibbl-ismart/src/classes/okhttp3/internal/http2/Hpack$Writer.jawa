record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `boolean` v3 , `okio.Buffer` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L23d6fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23d702.  v0:= 2147483647I;
  #L23d708.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L23d70c.  v0:= 8I;
  #L23d710.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L23d714.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L23d718.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d71c.  v0:= length @variable v0;
  #L23d71e.  v0:= v0 + -1;
  #L23d722.  v1.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L23d726.  v0:= 0I;
  #L23d728.  v1.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L23d72c.  v1.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L23d730.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L23d734.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L23d738.  v1.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v3 @kind boolean;
  #L23d73c.  v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v4 @kind object;
  #L23d740.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L23d754.  v0:= 4096I;
  #L23d758.  v1:= 1I;
  #L23d75a.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L23d760.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23d774.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L23d778.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L23d77c.  if v0 >= v1 then goto L23d794;
  #L23d780.  if v0 != 0 then goto L23d78c;
  #L23d784.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L23d78a.  goto L23d794;
  #L23d78c.  v1:= v1 - v0 @kind int;
  #L23d78e.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L23d794.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L23d7a8.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d7ac.  v1:= 0I;
  #L23d7ae.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L23d7b4.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d7b8.  v0:= length @variable v0;
  #L23d7ba.  v0:= v0 + -1;
  #L23d7be.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L23d7c2.  v0:= 0I;
  #L23d7c4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v0;
  #L23d7c8.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v0;
  #L23d7cc.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23d654.  v0:= 0I;
  #L23d656.  if v5 <= 0 then goto L23d6ea;
  #L23d65a.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d65e.  v1:= length @variable v1;
  #L23d660.  v1:= v1 + -1;
  #L23d664.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23d668.  if v1 < v2 then goto L23d6aa;
  #L23d66c.  if v5 <= 0 then goto L23d6aa;
  #L23d670.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d674.  v2:= v2[v1] @kind object;
  #L23d678.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L23d67c.  v5:= v5 - v2 @kind int;
  #L23d67e.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L23d682.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d686.  v3:= v3[v1] @kind object;
  #L23d68a.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L23d68e.  v2:= v2 - v3 @kind int;
  #L23d690.  v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L23d694.  v2:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L23d698.  v2:= v2 + -1;
  #L23d69c.  v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L23d6a0.  v0:= v0 + 1;
  #L23d6a4.  v1:= v1 + -1;
  #L23d6a8.  goto L23d664;
  #L23d6aa.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d6ae.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23d6b2.  v2:= v1 + 1;
  #L23d6b6.  v1:= v1 + 1;
  #L23d6ba.  v1:= v1 + v0 @kind int;
  #L23d6bc.  v3:= v4.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L23d6c0.  call `arraycopy`(v5, v2, v5, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L23d6c6.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d6ca.  v1:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23d6ce.  v2:= v1 + 1;
  #L23d6d2.  v1:= v1 + 1;
  #L23d6d6.  v1:= v1 + v0 @kind int;
  #L23d6d8.  v3:= 0I;
  #L23d6da.  call `fill`(v5, v2, v1, v3) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L23d6e0.  v5:= v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23d6e4.  v5:= v5 + v0 @kind int;
  #L23d6e6.  v4.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v5;
  #L23d6ea.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v6 @kind this, `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23d7e0.  v0:= v7.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L23d7e4.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L23d7e8.  if v0 <= v1 then goto L23d7f4;
  #L23d7ec.  call `clearDynamicTable`(v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L23d7f2.  return @kind void;
  #L23d7f4.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L23d7f8.  v2:= v2 + v0 @kind int;
  #L23d7fa.  v2:= v2 - v1 @kind int;
  #L23d7fc.  call temp:= `evictToRecoverBytes`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L23d802.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L23d806.  v1:= v1 + 1;
  #L23d80a.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d80e.  v3:= length @variable v2;
  #L23d810.  if v1 <= v3 then goto L23d83c;
  #L23d814.  v1:= length @variable v2;
  #L23d816.  v1:= v1 * 2;
  #L23d81a.  v1:= new `okhttp3.internal.http2.Header`[v1];
  #L23d81e.  v3:= 0I;
  #L23d820.  v4:= length @variable v2;
  #L23d822.  v5:= length @variable v2;
  #L23d824.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L23d82a.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d82e.  v2:= length @variable v2;
  #L23d830.  v2:= v2 + -1;
  #L23d834.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L23d838.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v1 @kind object;
  #L23d83c.  v1:= v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23d840.  v2:= v1 + -1;
  #L23d844.  v6.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L23d848.  v2:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d84c.  v2[v1]:= v7 @kind object;
  #L23d850.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L23d854.  v7:= v7 + 1;
  #L23d858.  v6.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v7;
  #L23d85c.  v7:= v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L23d860.  v7:= v7 + v0 @kind int;
  #L23d862.  v6.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v7;
  #L23d866.  return @kind void;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;

  #L23d878.  v1.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v2;
  #L23d87c.  v0:= 16384I;
  #L23d880.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L23d886.  v2:= temp;
  #L23d888.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L23d88c.  if v0 != v2 then goto L23d892;
  #L23d890.  return @kind void;
  #L23d892.  if v2 >= v0 then goto L23d8a6;
  #L23d896.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L23d89a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L23d8a0.  v0:= temp;
  #L23d8a2.  v1.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L23d8a6.  v0:= 1I;
  #L23d8a8.  v1.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v0 @kind boolean;
  #L23d8ac.  v1.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v2;
  #L23d8b0.  call `adjustDynamicTableByteCount`(v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L23d8b6.  return @kind void;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L23d8c8.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L23d8cc.  v1:= 127I;
  #L23d8d0.  if v0 == 0 then goto L23d92e;
  #L23d8d4.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L23d8da.  v0:= temp @kind object;
  #L23d8dc.  call temp:= `encodedLength`(v0, v4) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L23d8e2.  v0:= temp;
  #L23d8e4.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L23d8ea.  v2:= temp;
  #L23d8ec.  if v0 >= v2 then goto L23d92e;
  #L23d8f0.  v0:= new `okio.Buffer`;
  #L23d8f4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L23d8fa.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L23d900.  v2:= temp @kind object;
  #L23d902.  call `encode`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L23d908.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L23d90e.  v4:= temp @kind object;
  #L23d910.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L23d916.  v0:= temp;
  #L23d918.  v2:= 128I;
  #L23d91c.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23d922.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23d926.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L23d92c.  goto L23d948;
  #L23d92e.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L23d934.  v0:= temp;
  #L23d936.  v2:= 0I;
  #L23d938.  call `writeInt`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23d93e.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23d942.  call temp:= `write`(v0, v4) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L23d948.  return @kind void;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L23d95c.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L23d960.  v1:= 0I;
  #L23d962.  if v0 == 0 then goto L23d998;
  #L23d966.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L23d96a.  v2:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L23d96e.  v3:= 32I;
  #L23d972.  v4:= 31I;
  #L23d976.  if v0 >= v2 then goto L23d980;
  #L23d97a.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23d980.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L23d984.  v0:= 2147483647I;
  #L23d98a.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L23d98e.  v0:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L23d992.  call `writeInt`(v13, v0, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23d998.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23d99e.  v0:= temp;
  #L23d9a0.  v2:= 0I;
  #L23d9a2.  if v2 >= v0 then goto L23db36;
  #L23d9a6.  call temp:= `get`(v14, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23d9ac.  v3:= temp @kind object;
  #L23d9ae.  v3:= (`okhttp3.internal.http2.Header`) v3 @kind object;
  #L23d9b2.  v4:= v3.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L23d9b6.  call temp:= `toAsciiLowercase`(v4) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L23d9bc.  v4:= temp @kind object;
  #L23d9be.  v5:= v3.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L23d9c2.  v6:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L23d9c6.  call temp:= `get`(v6, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23d9cc.  v6:= temp @kind object;
  #L23d9ce.  v6:= (`java.lang.Integer`) v6 @kind object;
  #L23d9d2.  v7:= -1I;
  #L23d9d4.  v8:= 1I;
  #L23d9d6.  if v6 == 0 then goto L23da3a;
  #L23d9da.  call temp:= `intValue`(v6) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L23d9e0.  v6:= temp;
  #L23d9e2.  v6:= v6 + v8 @kind int;
  #L23d9e4.  if v6 <= v8 then goto L23da34;
  #L23d9e8.  v9:= 8I;
  #L23d9ec.  if v6 >= v9 then goto L23da34;
  #L23d9f0.  v9:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23d9f4.  v10:= v6 + -1;
  #L23d9f8.  v9:= v9[v10] @kind object;
  #L23d9fc.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L23da00.  call temp:= `equal`(v9, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L23da06.  v9:= temp;
  #L23da08.  if v9 == 0 then goto L23da10;
  #L23da0c.  v9:= v6;
  #L23da0e.  goto L23da3e;
  #L23da10.  v9:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23da14.  v9:= v9[v6] @kind object;
  #L23da18.  v9:= v9.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L23da1c.  call temp:= `equal`(v9, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L23da22.  v9:= temp;
  #L23da24.  if v9 == 0 then goto L23da34;
  #L23da28.  v9:= v6 + 1;
  #L23da2c.  v12:= v9;
  #L23da2e.  v9:= v6;
  #L23da30.  v6:= v12;
  #L23da32.  goto L23da3e;
  #L23da34.  v9:= v6;
  #L23da36.  v6:= -1I;
  #L23da38.  goto L23da3e;
  #L23da3a.  v6:= -1I;
  #L23da3c.  v9:= -1I;
  #L23da3e.  if v6 != v7 then goto L23daac;
  #L23da42.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23da46.  v10:= v10 + v8 @kind int;
  #L23da48.  v8:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23da4c.  v8:= length @variable v8;
  #L23da4e.  if v10 >= v8 then goto L23daac;
  #L23da52.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23da56.  v11:= v11[v10] @kind object;
  #L23da5a.  v11:= v11.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L23da5e.  call temp:= `equal`(v11, v4) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L23da64.  v11:= temp;
  #L23da66.  if v11 == 0 then goto L23daa6;
  #L23da6a.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23da6e.  v11:= v11[v10] @kind object;
  #L23da72.  v11:= v11.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L23da76.  call temp:= `equal`(v11, v5) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L23da7c.  v11:= temp;
  #L23da7e.  if v11 == 0 then goto L23da92;
  #L23da82.  v6:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23da86.  v10:= v10 - v6 @kind int;
  #L23da88.  v6:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23da8c.  v6:= length @variable v6;
  #L23da8e.  v6:= v6 + v10 @kind int;
  #L23da90.  goto L23daac;
  #L23da92.  if v9 != v7 then goto L23daa6;
  #L23da96.  v9:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L23da9a.  v9:= v10 - v9 @kind int;
  #L23da9e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L23daa2.  v11:= length @variable v11;
  #L23daa4.  v9:= v9 + v11 @kind int;
  #L23daa6.  v10:= v10 + 1;
  #L23daaa.  goto L23da4e;
  #L23daac.  if v6 == v7 then goto L23dac0;
  #L23dab0.  v3:= 127I;
  #L23dab4.  v4:= 128I;
  #L23dab8.  call `writeInt`(v13, v6, v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23dabe.  goto L23db2e;
  #L23dac0.  v6:= 64I;
  #L23dac4.  if v9 != v7 then goto L23dae6;
  #L23dac8.  v7:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23dacc.  call temp:= `writeByte`(v7, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23dad2.  call `writeByteString`(v13, v4) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L23dad8.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L23dade.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L23dae4.  goto L23db2e;
  #L23dae6.  v7:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L23daea.  call temp:= `startsWith`(v4, v7) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L23daf0.  v7:= temp;
  #L23daf2.  if v7 == 0 then goto L23db18;
  #L23daf6.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L23dafa.  call temp:= `equals`(v7, v4) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23db00.  v4:= temp;
  #L23db02.  if v4 != 0 then goto L23db18;
  #L23db06.  v3:= 15I;
  #L23db0a.  call `writeInt`(v13, v9, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23db10.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L23db16.  goto L23db2e;
  #L23db18.  v4:= 63I;
  #L23db1c.  call `writeInt`(v13, v9, v4, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L23db22.  call `writeByteString`(v13, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L23db28.  call `insertIntoDynamicTable`(v13, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L23db2e.  v2:= v2 + 1;
  #L23db32.  goto L23d9a2;
  #L23db36.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;

  #L23db48.  if v2 >= v3 then goto L23db5a;
  #L23db4c.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23db50.  v2:= v2 ^| v4 @kind int;
  #L23db52.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23db58.  return @kind void;
  #L23db5a.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23db5e.  v4:= v4 ^| v3 @kind int;
  #L23db60.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23db66.  v2:= v2 - v3 @kind int;
  #L23db68.  v3:= 128I;
  #L23db6c.  if v2 < v3 then goto L23db86;
  #L23db70.  v4:= v2 ^& 127;
  #L23db74.  v0:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23db78.  v3:= v3 ^| v4 @kind int;
  #L23db7a.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23db80.  v2:= v2 ^>> 7;
  #L23db84.  goto L23db68;
  #L23db86.  v3:= v1.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L23db8a.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L23db90.  return @kind void;
}
