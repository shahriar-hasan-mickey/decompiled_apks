record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http2.Http2Codec.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.streamAllocation` @AccessFlag FINAL;
}
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L23e6c8.  v0:= "connection" @kind object;
  #L23e6cc.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e6d2.  v0:= temp @kind object;
  #L23e6d4.  `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L23e6d8.  v0:= "host" @kind object;
  #L23e6dc.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e6e2.  v0:= temp @kind object;
  #L23e6e4.  `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` := v0 @kind object;
  #L23e6e8.  v0:= "keep-alive" @kind object;
  #L23e6ec.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e6f2.  v0:= temp @kind object;
  #L23e6f4.  `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` := v0 @kind object;
  #L23e6f8.  v0:= "proxy-connection" @kind object;
  #L23e6fc.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e702.  v0:= temp @kind object;
  #L23e704.  `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L23e708.  v0:= "transfer-encoding" @kind object;
  #L23e70c.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e712.  v0:= temp @kind object;
  #L23e714.  `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L23e718.  v0:= "te" @kind object;
  #L23e71c.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e722.  v0:= temp @kind object;
  #L23e724.  `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` := v0 @kind object;
  #L23e728.  v0:= "encoding" @kind object;
  #L23e72c.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e732.  v0:= temp @kind object;
  #L23e734.  `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L23e738.  v0:= "upgrade" @kind object;
  #L23e73c.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e742.  v0:= temp @kind object;
  #L23e744.  `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` := v0 @kind object;
  #L23e748.  v0:= 12I;
  #L23e74c.  v0:= new `okio.ByteString`[v0];
  #L23e750.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L23e754.  v2:= 0I;
  #L23e756.  v0[v2]:= v1 @kind object;
  #L23e75a.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L23e75e.  v3:= 1I;
  #L23e760.  v0[v3]:= v1 @kind object;
  #L23e764.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L23e768.  v4:= 2I;
  #L23e76a.  v0[v4]:= v1 @kind object;
  #L23e76e.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L23e772.  v5:= 3I;
  #L23e774.  v0[v5]:= v1 @kind object;
  #L23e778.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L23e77c.  v6:= 4I;
  #L23e77e.  v0[v6]:= v1 @kind object;
  #L23e782.  v1:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L23e786.  v7:= 5I;
  #L23e788.  v0[v7]:= v1 @kind object;
  #L23e78c.  v1:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L23e790.  v8:= 6I;
  #L23e792.  v0[v8]:= v1 @kind object;
  #L23e796.  v1:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L23e79a.  v9:= 7I;
  #L23e79c.  v0[v9]:= v1 @kind object;
  #L23e7a0.  v1:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L23e7a4.  v10:= 8I;
  #L23e7a8.  v0[v10]:= v1 @kind object;
  #L23e7ac.  v1:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L23e7b0.  v11:= 9I;
  #L23e7b4.  v0[v11]:= v1 @kind object;
  #L23e7b8.  v1:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L23e7bc.  v11:= 10I;
  #L23e7c0.  v0[v11]:= v1 @kind object;
  #L23e7c4.  v1:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L23e7c8.  v11:= 11I;
  #L23e7cc.  v0[v11]:= v1 @kind object;
  #L23e7d0.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L23e7d6.  v0:= temp @kind object;
  #L23e7d8.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L23e7dc.  v0:= new `okio.ByteString`[v10];
  #L23e7e0.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L23e7e4.  v0[v2]:= v1 @kind object;
  #L23e7e8.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L23e7ec.  v0[v3]:= v1 @kind object;
  #L23e7f0.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L23e7f4.  v0[v4]:= v1 @kind object;
  #L23e7f8.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L23e7fc.  v0[v5]:= v1 @kind object;
  #L23e800.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L23e804.  v0[v6]:= v1 @kind object;
  #L23e808.  v1:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L23e80c.  v0[v7]:= v1 @kind object;
  #L23e810.  v1:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L23e814.  v0[v8]:= v1 @kind object;
  #L23e818.  v1:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L23e81c.  v0[v9]:= v1 @kind object;
  #L23e820.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L23e826.  v0:= temp @kind object;
  #L23e828.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L23e82c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Interceptor$Chain` v2 @kind object, `okhttp3.internal.connection.StreamAllocation` v3 @kind object, `okhttp3.internal.http2.Http2Connection` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L23e840.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23e846.  v0.`okhttp3.internal.http2.Http2Codec.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L23e84a.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L23e84e.  v0.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L23e852.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L23e856.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23e3c8.  call temp:= `headers`(v6) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L23e3ce.  v0:= temp @kind object;
  #L23e3d0.  v1:= new `java.util.ArrayList`;
  #L23e3d4.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23e3da.  v2:= temp;
  #L23e3dc.  v2:= v2 + 4;
  #L23e3e0.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L23e3e6.  v2:= new `okhttp3.internal.http2.Header`;
  #L23e3ea.  v3:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L23e3ee.  call temp:= `method`(v6) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L23e3f4.  v4:= temp @kind object;
  #L23e3f6.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L23e3fc.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23e402.  v2:= new `okhttp3.internal.http2.Header`;
  #L23e406.  v3:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L23e40a.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23e410.  v4:= temp @kind object;
  #L23e412.  call temp:= `requestPath`(v4) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L23e418.  v4:= temp @kind object;
  #L23e41a.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L23e420.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23e426.  v2:= "Host" @kind object;
  #L23e42a.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23e430.  v2:= temp @kind object;
  #L23e432.  if v2 == 0 then goto L23e44a;
  #L23e436.  v3:= new `okhttp3.internal.http2.Header`;
  #L23e43a.  v4:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L23e43e.  call `<init>`(v3, v4, v2) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L23e444.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23e44a.  v2:= new `okhttp3.internal.http2.Header`;
  #L23e44e.  v3:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L23e452.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L23e458.  v6:= temp @kind object;
  #L23e45a.  call temp:= `scheme`(v6) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L23e460.  v6:= temp @kind object;
  #L23e462.  call `<init>`(v2, v3, v6) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L23e468.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23e46e.  v6:= 0I;
  #L23e470.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L23e476.  v2:= temp;
  #L23e478.  if v6 >= v2 then goto L23e4c6;
  #L23e47c.  call temp:= `name`(v0, v6) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L23e482.  v3:= temp @kind object;
  #L23e484.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L23e488.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L23e48e.  v3:= temp @kind object;
  #L23e490.  call temp:= `encodeUtf8`(v3) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L23e496.  v3:= temp @kind object;
  #L23e498.  v4:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L23e49c.  call temp:= `contains`(v4, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23e4a2.  v4:= temp;
  #L23e4a4.  if v4 != 0 then goto L23e4c0;
  #L23e4a8.  v4:= new `okhttp3.internal.http2.Header`;
  #L23e4ac.  call temp:= `value`(v0, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L23e4b2.  v5:= temp @kind object;
  #L23e4b4.  call `<init>`(v4, v3, v5) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L23e4ba.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23e4c0.  v6:= v6 + 1;
  #L23e4c4.  goto L23e478;
  #L23e4c6.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`java.util.List` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L23e4d8.  v0:= new `okhttp3.Headers$Builder`;
  #L23e4dc.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L23e4e2.  call temp:= `size`(v8) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L23e4e8.  v1:= temp;
  #L23e4ea.  v2:= 0I;
  #L23e4ec.  v3:= 0I;
  #L23e4ee.  v4:= v0 @kind object;
  #L23e4f0.  v0:= v2 @kind object;
  #L23e4f2.  if v3 >= v1 then goto L23e59a;
  #L23e4f6.  call temp:= `get`(v8, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L23e4fc.  v5:= temp @kind object;
  #L23e4fe.  v5:= (`okhttp3.internal.http2.Header`) v5 @kind object;
  #L23e502.  if v5 != 0 then goto L23e526;
  #L23e506.  if v0 == 0 then goto L23e594;
  #L23e50a.  v5:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L23e50e.  v6:= 100I;
  #L23e512.  if v5 != v6 then goto L23e594;
  #L23e516.  v0:= new `okhttp3.Headers$Builder`;
  #L23e51a.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L23e520.  v4:= v0 @kind object;
  #L23e522.  v0:= v2 @kind object;
  #L23e524.  goto L23e594;
  #L23e526.  v6:= v5.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L23e52a.  v5:= v5.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L23e52e.  call temp:= `utf8`(v5) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L23e534.  v5:= temp @kind object;
  #L23e536.  v7:= `@@okhttp3.internal.http2.Header.RESPONSE_STATUS` @type ^`okio.ByteString` @kind object;
  #L23e53a.  call temp:= `equals`(v6, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L23e540.  v7:= temp;
  #L23e542.  if v7 == 0 then goto L23e572;
  #L23e546.  v0:= new `java.lang.StringBuilder`;
  #L23e54a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23e550.  v6:= "HTTP/1.1 " @kind object;
  #L23e554.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e55a.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23e560.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23e566.  v0:= temp @kind object;
  #L23e568.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L23e56e.  v0:= temp @kind object;
  #L23e570.  goto L23e594;
  #L23e572.  v7:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L23e576.  call temp:= `contains`(v7, v6) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L23e57c.  v7:= temp;
  #L23e57e.  if v7 != 0 then goto L23e594;
  #L23e582.  v7:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L23e586.  call temp:= `utf8`(v6) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L23e58c.  v6:= temp @kind object;
  #L23e58e.  call `addLenient`(v7, v4, v6, v5) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L23e594.  v3:= v3 + 1;
  #L23e598.  goto L23e4f2;
  #L23e59a.  if v0 == 0 then goto L23e5de;
  #L23e59e.  v8:= new `okhttp3.Response$Builder`;
  #L23e5a2.  call `<init>`(v8) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L23e5a8.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L23e5ac.  call temp:= `protocol`(v8, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23e5b2.  v8:= temp @kind object;
  #L23e5b4.  v1:= v0.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L23e5b8.  call temp:= `code`(v8, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L23e5be.  v8:= temp @kind object;
  #L23e5c0.  v0:= v0.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L23e5c4.  call temp:= `message`(v8, v0) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23e5ca.  v8:= temp @kind object;
  #L23e5cc.  call temp:= `build`(v4) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L23e5d2.  v0:= temp @kind object;
  #L23e5d4.  call temp:= `headers`(v8, v0) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L23e5da.  v8:= temp @kind object;
  #L23e5dc.  return v8 @kind object;
  #L23e5de.  v8:= new `java.net.ProtocolException`;
  #L23e5e2.  v0:= "Expected ':status' header not present" @kind object;
  #L23e5e6.  call `<init>`(v8, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23e5ec.  throw v8;
  #L23e5ee.  return @kind void;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23e868.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e86c.  if v0 == 0 then goto L23e87a;
  #L23e870.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23e874.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23e87a.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;

  #L23e6a8.  v1:= v0.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e6ac.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L23e6b2.  v1:= temp @kind object;
  #L23e6b4.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23e88c.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e890.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L23e896.  v0:= temp @kind object;
  #L23e898.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L23e89e.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23e8b0.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23e8b4.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L23e8ba.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23e644.  v0:= v4.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23e648.  v0:= v0.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L23e64c.  v1:= v4.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L23e650.  v1:= v1.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L23e654.  call `responseBodyStart`(v0, v1) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L23e65a.  v0:= "Content-Type" @kind object;
  #L23e65e.  call temp:= `header`(v5, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23e664.  v0:= temp @kind object;
  #L23e666.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L23e66c.  v1:= temp @kind wide;
  #L23e66e.  v5:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L23e672.  v3:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e676.  call temp:= `getSource`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L23e67c.  v3:= temp @kind object;
  #L23e67e.  call `<init>`(v5, v4, v3) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L23e684.  v3:= new `okhttp3.internal.http.RealResponseBody`;
  #L23e688.  call temp:= `buffer`(v5) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L23e68e.  v5:= temp @kind object;
  #L23e690.  call `<init>`(v3, v0, v1, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L23e696.  return v3 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L23e600.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e604.  call temp:= `takeResponseHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @kind virtual;
  #L23e60a.  v0:= temp @kind object;
  #L23e60c.  call temp:= `readHttp2HeadersList`(v0) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @kind static;
  #L23e612.  v0:= temp @kind object;
  #L23e614.  if v3 == 0 then goto L23e630;
  #L23e618.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L23e61c.  call temp:= `code`(v3, v0) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L23e622.  v3:= temp;
  #L23e624.  v1:= 100I;
  #L23e628.  if v3 != v1 then goto L23e630;
  #L23e62c.  v3:= 0I;
  #L23e62e.  return v3 @kind object;
  #L23e630.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23e8cc.  v0:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e8d0.  if v0 == 0 then goto L23e8d6;
  #L23e8d4.  return @kind void;
  #L23e8d6.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L23e8dc.  v0:= temp @kind object;
  #L23e8de.  if v0 == 0 then goto L23e8e6;
  #L23e8e2.  v0:= 1I;
  #L23e8e4.  goto L23e8e8;
  #L23e8e6.  v0:= 0I;
  #L23e8e8.  call temp:= `http2HeadersList`(v4) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L23e8ee.  v4:= temp @kind object;
  #L23e8f0.  v1:= v3.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23e8f4.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23e8fa.  v4:= temp @kind object;
  #L23e8fc.  v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L23e900.  v4:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e904.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L23e90a.  v4:= temp @kind object;
  #L23e90c.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L23e910.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L23e916.  v0:= temp;
  #L23e918.  v0:= (`long`) v0 @kind i2l;
  #L23e91a.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L23e91e.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L23e924.  v4:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L23e928.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L23e92e.  v4:= temp @kind object;
  #L23e930.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L23e934.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L23e93a.  v0:= temp;
  #L23e93c.  v0:= (`long`) v0 @kind i2l;
  #L23e93e.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L23e942.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L23e948.  return @kind void;
}
