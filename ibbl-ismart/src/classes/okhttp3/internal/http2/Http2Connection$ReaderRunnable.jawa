record `okhttp3.internal.http2.Http2Connection$ReaderRunnable` @kind class @AccessFlag  extends `okhttp3.internal.NamedRunnable` @kind class, `okhttp3.internal.http2.Http2Reader$Handler` @kind interface {
  `okhttp3.internal.http2.Http2Reader` `okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v3 @kind this, `okhttp3.internal.http2.Http2Connection` v4 @kind object, `okhttp3.internal.http2.Http2Reader` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;Lokhttp3/internal/http2/Http2Reader;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L23f05c.  v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L23f060.  v0:= "OkHttp %s" @kind object;
  #L23f064.  v1:= 1I;
  #L23f066.  v1:= new `java.lang.Object`[v1];
  #L23f06a.  v4:= v4.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L23f06e.  v2:= 0I;
  #L23f070.  v1[v2]:= v4 @kind object;
  #L23f074.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/NamedRunnable;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L23f07a.  v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @type ^`okhttp3.internal.http2.Http2Reader` := v5 @kind object;
  #L23f07e.  return @kind void;
}
procedure `void` `applyAndAckSettings`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v6 @kind this, `okhttp3.internal.http2.Settings` v7 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L23f0b8.  v0:= v6.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f0bc.  call temp:= `access$200`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L23f0c2.  v0:= temp @kind object;
  #L23f0c4.  v1:= new `okhttp3.internal.http2.Http2Connection$ReaderRunnable$3`;
  #L23f0c8.  v2:= "OkHttp %s ACK Settings" @kind object;
  #L23f0cc.  v3:= 1I;
  #L23f0ce.  v3:= new `java.lang.Object`[v3];
  #L23f0d2.  v4:= 0I;
  #L23f0d4.  v5:= v6.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f0d8.  v5:= v5.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L23f0dc.  v3[v4]:= v5 @kind object;
  #L23f0e0.  call `<init>`(v1, v6, v2, v3, v7) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable$3;.<init>:(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;Lokhttp3/internal/http2/Settings;)V` @kind direct;
  #L23f0e6.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L23f0ec.  return @kind void;
  catch `java.util.concurrent.RejectedExecutionException` @[L23f0b8..L23f0ec] goto L23f0ec;
}
procedure `void` `ackSettings`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v0 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.ackSettings:()V` @AccessFlag PUBLIC {
    temp;

  #L23f090.  return @kind void;
}
procedure `void` `alternateService`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v0 @kind this, `int` v1 , `java.lang.String` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 , `long` v6 ) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.alternateService:(ILjava/lang/String;Lokio/ByteString;Ljava/lang/String;IJ)V` @AccessFlag PUBLIC {
    temp;

  #L23f0a4.  return @kind void;
}
procedure `void` `data`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v1 @kind this, `boolean` v2 , `int` v3 , `okio.BufferedSource` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.data:(ZILokio/BufferedSource;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23f110.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f114.  call temp:= `pushedStream`(v0, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.pushedStream:(I)Z` @kind virtual;
  #L23f11a.  v0:= temp;
  #L23f11c.  if v0 == 0 then goto L23f12c;
  #L23f120.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f124.  call `pushDataLater`(v0, v3, v4, v5, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.pushDataLater:(ILokio/BufferedSource;IZ)V` @kind virtual;
  #L23f12a.  return @kind void;
  #L23f12c.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f130.  call temp:= `getStream`(v0, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.getStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23f136.  v0:= temp @kind object;
  #L23f138.  if v0 != 0 then goto L23f154;
  #L23f13c.  v2:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f140.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f144.  call `writeSynResetLater`(v2, v3, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f14a.  v2:= (`long`) v5 @kind i2l;
  #L23f14c.  call `skip`(v4, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L23f152.  return @kind void;
  #L23f154.  call `receiveData`(v0, v4, v5) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @kind virtual;
  #L23f15a.  if v2 == 0 then goto L23f164;
  #L23f15e.  call `receiveFin`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @kind virtual;
  #L23f164.  return @kind void;
}
procedure `void` `execute`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.execute:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L23f178.  v0:= `@@okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f17c.  v1:= `@@okhttp3.internal.http2.ErrorCode.INTERNAL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f180.  v2:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @type ^`okhttp3.internal.http2.Http2Reader` @kind object;
  #L23f184.  call `readConnectionPreface`(v2, v4) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @kind virtual;
  #L23f18a.  v2:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @type ^`okhttp3.internal.http2.Http2Reader` @kind object;
  #L23f18e.  v3:= 0I;
  #L23f190.  call temp:= `nextFrame`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L23f196.  v2:= temp;
  #L23f198.  if v2 == 0 then goto L23f19e;
  #L23f19c.  goto L23f18a;
  #L23f19e.  v0:= `@@okhttp3.internal.http2.ErrorCode.NO_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f1a2.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f1a6.  v2:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f1aa.  goto L23f1bc;
  #L23f1ac.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f1ae.  goto L23f1ce;
  #L23f1b0.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f1b4.  v1:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f1b8.  v2:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f1bc.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f1c2.  v0:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @type ^`okhttp3.internal.http2.Http2Reader` @kind object;
  #L23f1c6.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L23f1cc.  return @kind void;
  #L23f1ce.  v3:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f1d2.  call `close`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f1d8.  v0:= v4.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.reader` @type ^`okhttp3.internal.http2.Http2Reader` @kind object;
  #L23f1dc.  call `closeQuietly`(v0) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L23f1e2.  throw v2;
  #L23f1e4.  return @kind void;
  catch `java.io.IOException` @[L23f180..L23f1a6] goto L23f1b0;
  catch `java.lang.Throwable` @[L23f180..L23f1a6] goto L23f1ac;
  catch `java.io.IOException` @[L23f1a6..L23f1aa] goto L23f1c2;
  catch `java.lang.Throwable` @[L23f1b0..L23f1b8] goto L23f1ac;
  catch `java.io.IOException` @[L23f1b8..L23f1c2] goto L23f1c2;
  catch `java.io.IOException` @[L23f1ce..L23f1d8] goto L23f1d8;
}
procedure `void` `goAway`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v3 @kind this, `int` v4 , `okhttp3.internal.http2.ErrorCode` v5 @kind object, `okio.ByteString` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23f230.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L23f236.  v5:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f23a.  @monitorenter v5
  #L23f23c.  v6:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f240.  v6:= v6.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f244.  call temp:= `values`(v6) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L23f24a.  v6:= temp @kind object;
  #L23f24c.  v0:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f250.  v0:= v0.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f254.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L23f25a.  v0:= temp;
  #L23f25c.  v0:= new `okhttp3.internal.http2.Http2Stream`[v0];
  #L23f260.  call temp:= `toArray`(v6, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L23f266.  v6:= temp @kind object;
  #L23f268.  v6:= (`okhttp3.internal.http2.Http2Stream`[]) v6 @kind object;
  #L23f26c.  v0:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f270.  v1:= 1I;
  #L23f272.  v0.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` := v1 @kind boolean;
  #L23f276.  @monitorexit v5
  #L23f278.  v5:= length @variable v6;
  #L23f27a.  v0:= 0I;
  #L23f27c.  if v0 >= v5 then goto L23f2be;
  #L23f280.  v1:= v6[v0] @kind object;
  #L23f284.  call temp:= `getId`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L23f28a.  v2:= temp;
  #L23f28c.  if v2 <= v4 then goto L23f2b8;
  #L23f290.  call temp:= `isLocallyInitiated`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L23f296.  v2:= temp;
  #L23f298.  if v2 == 0 then goto L23f2b8;
  #L23f29c.  v2:= `@@okhttp3.internal.http2.ErrorCode.REFUSED_STREAM` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L23f2a0.  call `receiveRstStream`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f2a6.  v2:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f2aa.  call temp:= `getId`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @kind virtual;
  #L23f2b0.  v1:= temp;
  #L23f2b2.  call temp:= `removeStream`(v2, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23f2b8.  v0:= v0 + 1;
  #L23f2bc.  goto L23f27c;
  #L23f2be.  return @kind void;
  #L23f2c0.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f2c2.  @monitorexit v5
  #L23f2c4.  throw v4;
  #L23f2c6.  return @kind void;
  catch `java.lang.Throwable` @[L23f23c..L23f278] goto L23f2c0;
  catch `java.lang.Throwable` @[L23f2c2..L23f2c4] goto L23f2c0;
}
procedure `void` `headers`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v9 @kind this, `boolean` v10 , `int` v11 , `int` v12 , `java.util.List` v13 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.headers:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L23f2ec.  v12:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f2f0.  call temp:= `pushedStream`(v12, v11) @signature `Lokhttp3/internal/http2/Http2Connection;.pushedStream:(I)Z` @kind virtual;
  #L23f2f6.  v12:= temp;
  #L23f2f8.  if v12 == 0 then goto L23f308;
  #L23f2fc.  v12:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f300.  call `pushHeadersLater`(v12, v11, v13, v10) @signature `Lokhttp3/internal/http2/Http2Connection;.pushHeadersLater:(ILjava/util/List;Z)V` @kind virtual;
  #L23f306.  return @kind void;
  #L23f308.  v12:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f30c.  @monitorenter v12
  #L23f30e.  v0:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f312.  call temp:= `getStream`(v0, v11) @signature `Lokhttp3/internal/http2/Http2Connection;.getStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23f318.  v0:= temp @kind object;
  #L23f31a.  if v0 != 0 then goto L23f3cc;
  #L23f31e.  v0:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f322.  v0:= v0.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L23f326.  if v0 == 0 then goto L23f32e;
  #L23f32a.  @monitorexit v12
  #L23f32c.  return @kind void;
  #L23f32e.  v0:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f332.  v0:= v0.`okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @type ^`int`;
  #L23f336.  if v11 > v0 then goto L23f33e;
  #L23f33a.  @monitorexit v12
  #L23f33c.  return @kind void;
  #L23f33e.  v0:= v11 %% 2;
  #L23f342.  v1:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f346.  v1:= v1.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L23f34a.  v2:= 2I;
  #L23f34c.  v1:= v1 %% v2 @kind int;
  #L23f34e.  if v0 != v1 then goto L23f356;
  #L23f352.  @monitorexit v12
  #L23f354.  return @kind void;
  #L23f356.  v0:= new `okhttp3.internal.http2.Http2Stream`;
  #L23f35a.  v5:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f35e.  v6:= 0I;
  #L23f360.  v3:= v0 @kind object;
  #L23f362.  v4:= v11;
  #L23f364.  v7:= v10;
  #L23f366.  v8:= v13 @kind object;
  #L23f368.  call `<init>`(v3, v4, v5, v6, v7, v8) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @kind direct;
  #L23f36e.  v10:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f372.  v10.`okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @type ^`int` := v11;
  #L23f376.  v10:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f37a.  v10:= v10.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f37e.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L23f384.  v13:= temp @kind object;
  #L23f386.  call temp:= `put`(v10, v13, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L23f38c.  call temp:= `access$100`() @signature `Lokhttp3/internal/http2/Http2Connection;.access$100:()Ljava/util/concurrent/ExecutorService;` @kind static;
  #L23f392.  v10:= temp @kind object;
  #L23f394.  v13:= new `okhttp3.internal.http2.Http2Connection$ReaderRunnable$1`;
  #L23f398.  v1:= "OkHttp %s stream %d" @kind object;
  #L23f39c.  v2:= new `java.lang.Object`[v2];
  #L23f3a0.  v3:= 0I;
  #L23f3a2.  v4:= v9.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f3a6.  v4:= v4.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L23f3aa.  v2[v3]:= v4 @kind object;
  #L23f3ae.  v3:= 1I;
  #L23f3b0.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L23f3b6.  v11:= temp @kind object;
  #L23f3b8.  v2[v3]:= v11 @kind object;
  #L23f3bc.  call `<init>`(v13, v9, v1, v2, v0) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable$1;.<init>:(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L23f3c2.  call `execute`(v10, v13) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L23f3c8.  @monitorexit v12
  #L23f3ca.  return @kind void;
  #L23f3cc.  @monitorexit v12
  #L23f3ce.  call `receiveHeaders`(v0, v13) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @kind virtual;
  #L23f3d4.  if v10 == 0 then goto L23f3de;
  #L23f3d8.  call `receiveFin`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @kind virtual;
  #L23f3de.  return @kind void;
  #L23f3e0.  v10:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f3e2.  @monitorexit v12
  #L23f3e4.  throw v10;
  catch `java.lang.Throwable` @[L23f30e..L23f3ce] goto L23f3e0;
  catch `java.lang.Throwable` @[L23f3e2..L23f3e4] goto L23f3e0;
}
procedure `void` `ping`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.ping:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23f40c.  if v4 == 0 then goto L23f436;
  #L23f410.  v4:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f414.  @monitorenter v4
  #L23f416.  v5:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f41a.  v6:= 0I;
  #L23f41c.  call temp:= `access$302`(v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection;.access$302:(Lokhttp3/internal/http2/Http2Connection;Z)Z` @kind static;
  #L23f422.  v5:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f426.  call `notifyAll`(v5) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L23f42c.  @monitorexit v4
  #L23f42e.  goto L23f458;
  #L23f430.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f432.  @monitorexit v4
  #L23f434.  throw v5;
  #L23f436.  v4:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f43a.  call temp:= `access$200`(v4) @signature `Lokhttp3/internal/http2/Http2Connection;.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;` @kind static;
  #L23f440.  v4:= temp @kind object;
  #L23f442.  v0:= new `okhttp3.internal.http2.Http2Connection$PingRunnable`;
  #L23f446.  v1:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f44a.  v2:= 1I;
  #L23f44c.  call `<init>`(v0, v1, v2, v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection$PingRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;ZII)V` @kind direct;
  #L23f452.  call `execute`(v4, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L23f458.  return @kind void;
  catch `java.lang.Throwable` @[L23f416..L23f434] goto L23f430;
  catch `java.util.concurrent.RejectedExecutionException` @[L23f436..L23f458] goto L23f458;
}
procedure `void` `priority`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v0 @kind this, `int` v1 , `int` v2 , `int` v3 , `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.priority:(IIIZ)V` @AccessFlag PUBLIC {
    temp;

  #L23f484.  return @kind void;
}
procedure `void` `pushPromise`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v0 @kind this, `int` v1 , `int` v2 , `java.util.List` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.pushPromise:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L23f498.  v1:= v0.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f49c.  call `pushRequestLater`(v1, v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.pushRequestLater:(ILjava/util/List;)V` @kind virtual;
  #L23f4a2.  return @kind void;
}
procedure `void` `rstStream`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v1 @kind this, `int` v2 , `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23f4b4.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f4b8.  call temp:= `pushedStream`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.pushedStream:(I)Z` @kind virtual;
  #L23f4be.  v0:= temp;
  #L23f4c0.  if v0 == 0 then goto L23f4d0;
  #L23f4c4.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f4c8.  call `pushResetLater`(v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.pushResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f4ce.  return @kind void;
  #L23f4d0.  v0:= v1.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f4d4.  call temp:= `removeStream`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23f4da.  v2:= temp @kind object;
  #L23f4dc.  if v2 == 0 then goto L23f4e6;
  #L23f4e0.  call `receiveRstStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L23f4e6.  return @kind void;
}
procedure `void` `settings`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v10 @kind this, `boolean` v11 , `okhttp3.internal.http2.Settings` v12 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.settings:(ZLokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L23f4f8.  v0:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f4fc.  @monitorenter v0
  #L23f4fe.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f502.  v1:= v1.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L23f506.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L23f50c.  v1:= temp;
  #L23f50e.  if v11 == 0 then goto L23f520;
  #L23f512.  v11:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f516.  v11:= v11.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L23f51a.  call `clear`(v11) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @kind virtual;
  #L23f520.  v11:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f524.  v11:= v11.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L23f528.  call `merge`(v11, v12) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L23f52e.  call `applyAndAckSettings`(v10, v12) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V` @kind direct;
  #L23f534.  v11:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f538.  v11:= v11.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L23f53c.  call temp:= `getInitialWindowSize`(v11) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L23f542.  v11:= temp;
  #L23f544.  v12:= -1I;
  #L23f546.  v2:= 0L;
  #L23f54a.  v4:= 1I;
  #L23f54c.  v5:= 0I;
  #L23f54e.  if v11 == v12 then goto L23f5c0;
  #L23f552.  if v11 == v1 then goto L23f5c0;
  #L23f556.  v11:= v11 - v1 @kind int;
  #L23f558.  v11:= (`long`) v11 @kind i2l;
  #L23f55a.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f55e.  v1:= v1.`okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @type ^`boolean` @kind boolean;
  #L23f562.  if v1 != 0 then goto L23f578;
  #L23f566.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f56a.  call `addBytesToWriteWindow`(v1, v11) @signature `Lokhttp3/internal/http2/Http2Connection;.addBytesToWriteWindow:(J)V` @kind virtual;
  #L23f570.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f574.  v1.`okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @type ^`boolean` := v4 @kind boolean;
  #L23f578.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f57c.  v1:= v1.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f580.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L23f586.  v1:= temp;
  #L23f588.  if v1 != 0 then goto L23f5c2;
  #L23f58c.  v1:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f590.  v1:= v1.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f594.  call temp:= `values`(v1) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L23f59a.  v1:= temp @kind object;
  #L23f59c.  v5:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f5a0.  v5:= v5.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L23f5a4.  call temp:= `size`(v5) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L23f5aa.  v5:= temp;
  #L23f5ac.  v5:= new `okhttp3.internal.http2.Http2Stream`[v5];
  #L23f5b0.  call temp:= `toArray`(v1, v5) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L23f5b6.  v1:= temp @kind object;
  #L23f5b8.  v5:= v1 @kind object;
  #L23f5ba.  v5:= (`okhttp3.internal.http2.Http2Stream`[]) v5 @kind object;
  #L23f5be.  goto L23f5c2;
  #L23f5c0.  v11:= v2 @kind wide;
  #L23f5c2.  call temp:= `access$100`() @signature `Lokhttp3/internal/http2/Http2Connection;.access$100:()Ljava/util/concurrent/ExecutorService;` @kind static;
  #L23f5c8.  v1:= temp @kind object;
  #L23f5ca.  v6:= new `okhttp3.internal.http2.Http2Connection$ReaderRunnable$2`;
  #L23f5ce.  v7:= "OkHttp %s settings" @kind object;
  #L23f5d2.  v4:= new `java.lang.Object`[v4];
  #L23f5d6.  v8:= v10.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f5da.  v8:= v8.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L23f5de.  v9:= 0I;
  #L23f5e0.  v4[v9]:= v8 @kind object;
  #L23f5e4.  call `<init>`(v6, v10, v7, v4) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable$2;.<init>:(Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L23f5ea.  call `execute`(v1, v6) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L23f5f0.  @monitorexit v0
  #L23f5f2.  if v5 == 0 then goto L23f61e;
  #L23f5f6.  v0:= lcmp(v11, v2);
  #L23f5fa.  if v0 == 0 then goto L23f61e;
  #L23f5fe.  v0:= length @variable v5;
  #L23f600.  if v9 >= v0 then goto L23f61e;
  #L23f604.  v1:= v5[v9] @kind object;
  #L23f608.  @monitorenter v1
  #L23f60a.  call `addBytesToWriteWindow`(v1, v11) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @kind virtual;
  #L23f610.  @monitorexit v1
  #L23f612.  v9:= v9 + 1;
  #L23f616.  goto L23f600;
  #L23f618.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f61a.  @monitorexit v1
  #L23f61c.  throw v11;
  #L23f61e.  return @kind void;
  #L23f620.  v11:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f622.  @monitorexit v0
  #L23f624.  throw v11;
  #L23f626.  return @kind void;
  catch `java.lang.Throwable` @[L23f4fe..L23f5f2] goto L23f620;
  catch `java.lang.Throwable` @[L23f60a..L23f61c] goto L23f618;
  catch `java.lang.Throwable` @[L23f622..L23f624] goto L23f620;
}
procedure `void` `windowUpdate`(`okhttp3.internal.http2.Http2Connection$ReaderRunnable` v3 @kind this, `int` v4 , `long` v5 ) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.windowUpdate:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23f658.  if v4 != 0 then goto L23f684;
  #L23f65c.  v0:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f660.  @monitorenter v0
  #L23f662.  v4:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f666.  v1:= v4.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L23f66a.  v1:= v1 + v5 @kind long;
  #L23f66c.  v4.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v1 @kind wide;
  #L23f670.  v4:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f674.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L23f67a.  @monitorexit v0
  #L23f67c.  goto L23f6a6;
  #L23f67e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f680.  @monitorexit v0
  #L23f682.  throw v4;
  #L23f684.  v0:= v3.`okhttp3.internal.http2.Http2Connection$ReaderRunnable.this$0` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L23f688.  call temp:= `getStream`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.getStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L23f68e.  v4:= temp @kind object;
  #L23f690.  if v4 == 0 then goto L23f6a6;
  #L23f694.  @monitorenter v4
  #L23f696.  call `addBytesToWriteWindow`(v4, v5) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @kind virtual;
  #L23f69c.  @monitorexit v4
  #L23f69e.  goto L23f6a6;
  #L23f6a0.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23f6a2.  @monitorexit v4
  #L23f6a4.  throw v5;
  #L23f6a6.  return @kind void;
  catch `java.lang.Throwable` @[L23f662..L23f682] goto L23f67e;
  catch `java.lang.Throwable` @[L23f696..L23f6a4] goto L23f6a0;
}
