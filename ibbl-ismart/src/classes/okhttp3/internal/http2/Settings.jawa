record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L243718.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24371e.  v0:= 10I;
  #L243722.  v0:= new `int`[v0];
  #L243726.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L24372a.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24373c.  v0:= 0I;
  #L24373e.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v0;
  #L243742.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L243746.  call `fill`(v1, v0) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L24374c.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L2435d0.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2435d4.  v2:= v0[v2];
  #L2435d8.  return v2;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v3 @kind this, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L243568.  v0:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L24356c.  v0:= v0 ^& 4;
  #L243570.  v1:= 0I;
  #L243572.  v2:= 1I;
  #L243574.  if v0 == 0 then goto L243584;
  #L243578.  v4:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L24357c.  v0:= 2I;
  #L24357e.  v4:= v4[v0];
  #L243582.  goto L24358e;
  #L243584.  if v4 == 0 then goto L24358c;
  #L243588.  v4:= 1I;
  #L24358a.  goto L24358e;
  #L24358c.  v4:= 0I;
  #L24358e.  if v4 != v2 then goto L243594;
  #L243592.  v1:= 1I;
  #L243594.  return v1;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2435ec.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2435f0.  v0:= v0 ^& 2;
  #L2435f4.  if v0 == 0 then goto L243604;
  #L2435f8.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2435fc.  v1:= 1I;
  #L2435fe.  v0:= v0[v1];
  #L243602.  goto L243606;
  #L243604.  v0:= -1I;
  #L243606.  return v0;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L243618.  v0:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L24361c.  v0:= v0 ^& 128;
  #L243620.  if v0 == 0 then goto L243630;
  #L243624.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L243628.  v1:= 7I;
  #L24362a.  v0:= v0[v1];
  #L24362e.  goto L243636;
  #L243630.  v0:= 65535I;
  #L243636.  return v0;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;

  #L243648.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L24364c.  v0:= v0 ^& 16;
  #L243650.  if v0 == 0 then goto L24365e;
  #L243654.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L243658.  v0:= 4I;
  #L24365a.  v2:= v2[v0];
  #L24365e.  return v2;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L243670.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L243674.  v0:= v0 ^& 32;
  #L243678.  if v0 == 0 then goto L243686;
  #L24367c.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L243680.  v0:= 5I;
  #L243682.  v2:= v2[v0];
  #L243686.  return v2;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;

  #L243698.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L24369c.  v0:= v0 ^& 64;
  #L2436a0.  if v0 == 0 then goto L2436ae;
  #L2436a4.  v2:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2436a8.  v0:= 6I;
  #L2436aa.  v2:= v2[v0];
  #L2436ae.  return v2;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2435a8.  v0:= 1I;
  #L2435aa.  v3:= v0 ^< v3 @kind int;
  #L2435ae.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2435b2.  v3:= v3 ^& v1 @kind int;
  #L2435b4.  if v3 == 0 then goto L2435ba;
  #L2435b8.  goto L2435bc;
  #L2435ba.  v0:= 0I;
  #L2435bc.  return v0;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L243760.  v0:= 0I;
  #L243762.  v1:= 10I;
  #L243766.  if v0 >= v1 then goto L24378c;
  #L24376a.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L243770.  v1:= temp;
  #L243772.  if v1 != 0 then goto L243778;
  #L243776.  goto L243786;
  #L243778.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L24377e.  v1:= temp;
  #L243780.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L243786.  v0:= v0 + 1;
  #L24378a.  goto L243762;
  #L24378c.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2436e0.  if v4 < 0 then goto L243704;
  #L2436e4.  v0:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L2436e8.  v1:= length @variable v0;
  #L2436ea.  if v4 < v1 then goto L2436f0;
  #L2436ee.  goto L243704;
  #L2436f0.  v1:= 1I;
  #L2436f2.  v1:= v1 ^< v4 @kind int;
  #L2436f4.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2436f8.  v1:= v1 ^| v2 @kind int;
  #L2436fa.  v3.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L2436fe.  v0[v4]:= v5;
  #L243702.  return v3 @kind object;
  #L243704.  return v3 @kind object;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L2436c0.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L2436c4.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L2436ca.  v0:= temp;
  #L2436cc.  return v0;
}
