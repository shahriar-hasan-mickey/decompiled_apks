record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;

  #L241a98.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `int` v3 , `okhttp3.internal.http2.Http2Connection` v4 @kind object, `boolean` v5 , `boolean` v6 , `java.util.List` v7 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L241aac.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L241ab2.  v0:= 0L;
  #L241ab6.  v2.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L241aba.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L241abe.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L241ac4.  v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L241ac8.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L241acc.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L241ad2.  v2.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L241ad6.  v0:= 0I;
  #L241ad8.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v0 @kind object;
  #L241adc.  if v4 == 0 then goto L241b4e;
  #L241ae0.  if v7 == 0 then goto L241b3e;
  #L241ae4.  v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v3;
  #L241ae8.  v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L241aec.  v3:= v4.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L241af0.  call temp:= `getInitialWindowSize`(v3) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L241af6.  v3:= temp;
  #L241af8.  v0:= (`long`) v3 @kind i2l;
  #L241afa.  v2.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L241afe.  v3:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L241b02.  v4:= v4.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L241b06.  call temp:= `getInitialWindowSize`(v4) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L241b0c.  v4:= temp;
  #L241b0e.  v0:= (`long`) v4 @kind i2l;
  #L241b10.  call `<init>`(v3, v2, v0) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L241b16.  v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v3 @kind object;
  #L241b1a.  v3:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L241b1e.  call `<init>`(v3, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L241b24.  v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v3 @kind object;
  #L241b28.  v3:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241b2c.  v3.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v6 @kind boolean;
  #L241b30.  v3:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241b34.  v3.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v5 @kind boolean;
  #L241b38.  v2.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` := v7 @kind object;
  #L241b3c.  return @kind void;
  #L241b3e.  v3:= new `java.lang.NullPointerException`;
  #L241b42.  v4:= "requestHeaders == null" @kind object;
  #L241b46.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241b4c.  throw v3;
  #L241b4e.  v3:= new `java.lang.NullPointerException`;
  #L241b52.  v4:= "connection == null" @kind object;
  #L241b56.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241b5c.  throw v3;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L24179c.  @monitorenter v2
  #L24179e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L2417a2.  v1:= 0I;
  #L2417a4.  if v0 == 0 then goto L2417ac;
  #L2417a8.  @monitorexit v2
  #L2417aa.  return v1;
  #L2417ac.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L2417b0.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L2417b4.  if v0 == 0 then goto L2417c8;
  #L2417b8.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L2417bc.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L2417c0.  if v0 == 0 then goto L2417c8;
  #L2417c4.  @monitorexit v2
  #L2417c6.  return v1;
  #L2417c8.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L2417cc.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L2417d2.  @monitorexit v2
  #L2417d4.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L2417d8.  v0:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L2417dc.  call temp:= `removeStream`(v3, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L2417e2.  v3:= 1I;
  #L2417e4.  return v3;
  #L2417e6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2417e8.  @monitorexit v2
  #L2417ea.  throw v3;
  catch `java.lang.Throwable` @[L24179e..L2417d4] goto L2417e6;
  catch `java.lang.Throwable` @[L2417e8..L2417ea] goto L2417e6;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L241b70.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L241b74.  v0:= v0 + v4 @kind long;
  #L241b76.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L241b7a.  v0:= 0L;
  #L241b7e.  v2:= lcmp(v4, v0);
  #L241b82.  if v2 <= 0 then goto L241b8c;
  #L241b86.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L241b8c.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L241ba0.  @monitorenter v2
  #L241ba2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241ba6.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L241baa.  if v0 != 0 then goto L241bd6;
  #L241bae.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241bb2.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L241bb6.  if v0 == 0 then goto L241bd6;
  #L241bba.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241bbe.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L241bc2.  if v0 != 0 then goto L241bd2;
  #L241bc6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241bca.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L241bce.  if v0 == 0 then goto L241bd6;
  #L241bd2.  v0:= 1I;
  #L241bd4.  goto L241bd8;
  #L241bd6.  v0:= 0I;
  #L241bd8.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L241bde.  v1:= temp;
  #L241be0.  @monitorexit v2
  #L241be2.  if v0 == 0 then goto L241bf2;
  #L241be6.  v0:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L241bea.  call `close`(v2, v0) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L241bf0.  goto L241c04;
  #L241bf2.  if v1 != 0 then goto L241c04;
  #L241bf6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241bfa.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241bfe.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L241c04.  return @kind void;
  #L241c06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241c08.  @monitorexit v2
  #L241c0a.  throw v0;
  catch `java.lang.Throwable` @[L241ba2..L241be2] goto L241c06;
  catch `java.lang.Throwable` @[L241c08..L241c0a] goto L241c06;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L241c30.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241c34.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L241c38.  if v0 != 0 then goto L241c6e;
  #L241c3c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241c40.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L241c44.  if v0 != 0 then goto L241c5e;
  #L241c48.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L241c4c.  if v0 != 0 then goto L241c52;
  #L241c50.  return @kind void;
  #L241c52.  v1:= new `okhttp3.internal.http2.StreamResetException`;
  #L241c56.  call `<init>`(v1, v0) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L241c5c.  throw v1;
  #L241c5e.  v0:= new `java.io.IOException`;
  #L241c62.  v1:= "stream finished" @kind object;
  #L241c66.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241c6c.  throw v0;
  #L241c6e.  v0:= new `java.io.IOException`;
  #L241c72.  v1:= "stream closed" @kind object;
  #L241c76.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241c7c.  throw v0;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L241c90.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L241c96.  v0:= temp;
  #L241c98.  if v0 != 0 then goto L241c9e;
  #L241c9c.  return @kind void;
  #L241c9e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241ca2.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241ca6.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L241cac.  return @kind void;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L241cc0.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L241cc6.  v0:= temp;
  #L241cc8.  if v0 != 0 then goto L241cce;
  #L241ccc.  return @kind void;
  #L241cce.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241cd2.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241cd6.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L241cdc.  return @kind void;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2419dc.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L2419e0.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2419b0.  @monitorenter v1
  #L2419b2.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L2419b6.  @monitorexit v1
  #L2419b8.  return v0 @kind object;
  #L2419ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2419bc.  @monitorexit v1
  #L2419be.  throw v0;
  catch `java.lang.Throwable` @[L2419b2..L2419b6] goto L2419ba;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2418c4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L2418c8.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2418dc.  v0:= v1.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` @kind object;
  #L2418e0.  return v0 @kind object;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2419f4.  @monitorenter v2
  #L2419f6.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L2419fa.  if v0 != 0 then goto L241a1c;
  #L2419fe.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L241a04.  v0:= temp;
  #L241a06.  if v0 == 0 then goto L241a0c;
  #L241a0a.  goto L241a1c;
  #L241a0c.  v0:= new `java.lang.IllegalStateException`;
  #L241a10.  v1:= "reply before requesting the sink" @kind object;
  #L241a14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241a1a.  throw v0;
  #L241a1c.  @monitorexit v2
  #L241a1e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241a22.  return v0 @kind object;
  #L241a24.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241a26.  @monitorexit v2
  #L241a28.  throw v0;
  catch `java.lang.Throwable` @[L2419f6..L241a1e] goto L241a24;
  catch `java.lang.Throwable` @[L241a26..L241a28] goto L241a24;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L241a50.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241a54.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L241810.  v0:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241814.  v1:= 1I;
  #L241816.  v0:= v0 ^& v1 @kind int;
  #L241818.  v2:= 0I;
  #L24181a.  if v0 != v1 then goto L241822;
  #L24181e.  v0:= 1I;
  #L241820.  goto L241824;
  #L241822.  v0:= 0I;
  #L241824.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241828.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L24182c.  if v3 != v0 then goto L241832;
  #L241830.  goto L241834;
  #L241832.  v1:= 0I;
  #L241834.  return v1;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L241848.  @monitorenter v2
  #L24184a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L24184e.  v1:= 0I;
  #L241850.  if v0 == 0 then goto L241858;
  #L241854.  @monitorexit v2
  #L241856.  return v1;
  #L241858.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L24185c.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L241860.  if v0 != 0 then goto L241870;
  #L241864.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241868.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L24186c.  if v0 == 0 then goto L241894;
  #L241870.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241874.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L241878.  if v0 != 0 then goto L241888;
  #L24187c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241880.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L241884.  if v0 == 0 then goto L241894;
  #L241888.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L24188c.  if v0 == 0 then goto L241894;
  #L241890.  @monitorexit v2
  #L241892.  return v1;
  #L241894.  v0:= 1I;
  #L241896.  @monitorexit v2
  #L241898.  return v0;
  #L24189a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24189c.  @monitorexit v2
  #L24189e.  throw v0;
  catch `java.lang.Throwable` @[L24184a..L24184e] goto L24189a;
  catch `java.lang.Throwable` @[L241858..L24188c] goto L24189a;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L241a68.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L241a6c.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `okio.BufferedSource` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L241cf0.  v0:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241cf4.  v1:= (`long`) v5 @kind i2l;
  #L241cf6.  call `receive`(v0, v4, v1) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L241cfc.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L241d10.  @monitorenter v2
  #L241d12.  v0:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L241d16.  v1:= 1I;
  #L241d18.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v1 @kind boolean;
  #L241d1c.  call temp:= `isOpen`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L241d22.  v0:= temp;
  #L241d24.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L241d2a.  @monitorexit v2
  #L241d2c.  if v0 != 0 then goto L241d3e;
  #L241d30.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241d34.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241d38.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L241d3e.  return @kind void;
  #L241d40.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241d42.  @monitorexit v2
  #L241d44.  throw v0;
  catch `java.lang.Throwable` @[L241d12..L241d2c] goto L241d40;
  catch `java.lang.Throwable` @[L241d42..L241d44] goto L241d40;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L241d6c.  @monitorenter v3
  #L241d6e.  v0:= 1I;
  #L241d70.  v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v0 @kind boolean;
  #L241d74.  v1:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L241d78.  if v1 != 0 then goto L241d90;
  #L241d7c.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v4 @kind object;
  #L241d80.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L241d86.  v0:= temp;
  #L241d88.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L241d8e.  goto L241db6;
  #L241d90.  v1:= new `java.util.ArrayList`;
  #L241d94.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L241d9a.  v2:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L241d9e.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L241da4.  v2:= 0I;
  #L241da6.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L241dac.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L241db2.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #L241db6.  @monitorexit v3
  #L241db8.  if v0 != 0 then goto L241dca;
  #L241dbc.  v4:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241dc0.  v0:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241dc4.  call temp:= `removeStream`(v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L241dca.  return @kind void;
  #L241dcc.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241dce.  @monitorexit v3
  #L241dd0.  throw v4;
  catch `java.lang.Throwable` @[L241d70..L241db8] goto L241dcc;
  catch `java.lang.Throwable` @[L241dce..L241dd0] goto L241dcc;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L241df8.  @monitorenter v1
  #L241dfa.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L241dfe.  if v0 != 0 then goto L241e0c;
  #L241e02.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L241e06.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L241e0c.  @monitorexit v1
  #L241e0e.  return @kind void;
  #L241e10.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241e12.  @monitorexit v1
  #L241e14.  throw v2;
  catch `java.lang.Throwable` @[L241dfa..L241e0c] goto L241e10;
}
procedure `void` `sendResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `java.util.List` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/http2/Http2Stream;.sendResponseHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L241e34.  if v3 == 0 then goto L241e76;
  #L241e38.  v0:= 0I;
  #L241e3a.  @monitorenter v2
  #L241e3c.  v1:= 1I;
  #L241e3e.  v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L241e42.  if v4 != 0 then goto L241e50;
  #L241e46.  v4:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L241e4a.  v4.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v1 @kind boolean;
  #L241e4e.  v0:= 1I;
  #L241e50.  @monitorexit v2
  #L241e52.  v4:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241e56.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L241e5a.  call `writeSynReply`(v4, v1, v0, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L241e60.  if v0 == 0 then goto L241e6e;
  #L241e64.  v3:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L241e68.  call `flush`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L241e6e.  return @kind void;
  #L241e70.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241e72.  @monitorexit v2
  #L241e74.  throw v3;
  #L241e76.  v3:= new `java.lang.NullPointerException`;
  #L241e7a.  v4:= "responseHeaders == null" @kind object;
  #L241e7e.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241e84.  throw v3;
  catch `java.lang.Throwable` @[L241e3e..L241e52] goto L241e70;
  catch `java.lang.Throwable` @[L241e72..L241e74] goto L241e70;
}
procedure `java.util.List` `takeResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2418f4.  @monitorenter v2
  #L2418f6.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L2418fc.  v0:= temp;
  #L2418fe.  if v0 == 0 then goto L24195e;
  #L241902.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L241906.  call `enter`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.enter:()V` @kind virtual;
  #L24190c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L241910.  if v0 != 0 then goto L241924;
  #L241914.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L241918.  if v0 != 0 then goto L241924;
  #L24191c.  call `waitForIo`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #L241922.  goto L24190c;
  #L241924.  v0:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L241928.  call `exitAndThrowIfTimedOut`(v0) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L24192e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L241932.  if v0 == 0 then goto L241940;
  #L241936.  v1:= 0I;
  #L241938.  v2.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #L24193c.  @monitorexit v2
  #L24193e.  return v0 @kind object;
  #L241940.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L241944.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L241948.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L24194e.  throw v0;
  #L241950.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241952.  v1:= v2.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L241956.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L24195c.  throw v0;
  #L24195e.  v0:= new `java.lang.IllegalStateException`;
  #L241962.  v1:= "servers cannot read response headers" @kind object;
  #L241966.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24196c.  throw v0;
  #L24196e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241970.  @monitorexit v2
  #L241972.  throw v0;
  #L241974.  return @kind void;
  catch `java.lang.Throwable` @[L2418f6..L24190c] goto L24196e;
  catch `java.lang.Throwable` @[L24190c..L241922] goto L241950;
  catch `java.lang.Throwable` @[L241924..L24193c] goto L24196e;
  catch `java.lang.Throwable` @[L241940..L24196e] goto L24196e;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;

  #L241eac.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #L241eb2.  return @kind void;
  #L241eb4.  v0:= new `java.io.InterruptedIOException`;
  #L241eb8.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L241ebe.  throw v0;
  catch `java.lang.InterruptedException` @[L241eac..L241eb2] goto L241eb4;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L241a80.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L241a84.  return v0 @kind object;
}
