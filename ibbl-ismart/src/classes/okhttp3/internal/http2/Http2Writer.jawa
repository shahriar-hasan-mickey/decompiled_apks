record `okhttp3.internal.http2.Http2Writer` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Writer.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http2.Http2Writer.closed` @AccessFlag PRIVATE;
  `okio.Buffer` `okhttp3.internal.http2.Http2Writer.hpackBuffer` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Writer` `okhttp3.internal.http2.Http2Writer.hpackWriter` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Writer.maxFrameSize` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okhttp3.internal.http2.Http2Writer.sink` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Writer.logger` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Writer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L241ef8.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L241efc.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L241f02.  v0:= temp @kind object;
  #L241f04.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L241f0a.  v0:= temp @kind object;
  #L241f0c.  `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L241f10.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Writer` v0 @kind this, `okio.BufferedSink` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/http2/Http2Writer;.<init>:(Lokio/BufferedSink;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L241f24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L241f2a.  v0.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` := v1 @kind object;
  #L241f2e.  v0.`okhttp3.internal.http2.Http2Writer.client` @type ^`boolean` := v2 @kind boolean;
  #L241f32.  v1:= new `okio.Buffer`;
  #L241f36.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L241f3c.  v0.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` := v1 @kind object;
  #L241f40.  v1:= new `okhttp3.internal.http2.Hpack$Writer`;
  #L241f44.  v2:= v0.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L241f48.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L241f4e.  v0.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` := v1 @kind object;
  #L241f52.  v1:= 16384I;
  #L241f56.  v0.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int` := v1;
  #L241f5a.  return @kind void;
}
procedure `void` `writeContinuationFrames`(`okhttp3.internal.http2.Http2Writer` v7 @kind this, `int` v8 , `long` v9 ) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2427e4.  v0:= 0L;
  #L2427e8.  v2:= lcmp(v9, v0);
  #L2427ec.  if v2 <= 0 then goto L24282c;
  #L2427f0.  v2:= v7.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L2427f4.  v2:= (`long`) v2 @kind i2l;
  #L2427f6.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2427fc.  v2:= temp @kind wide;
  #L2427fe.  v2:= (`int`) v2 @kind l2i;
  #L242800.  v3:= (`long`) v2 @kind i2l;
  #L242802.  v9:= v9 - v3 @kind long;
  #L242804.  v5:= 9I;
  #L242808.  v6:= lcmp(v9, v0);
  #L24280c.  if v6 != 0 then goto L242814;
  #L242810.  v0:= 4I;
  #L242812.  goto L242816;
  #L242814.  v0:= 0I;
  #L242816.  call `frameHeader`(v7, v8, v2, v5, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L24281c.  v0:= v7.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242820.  v1:= v7.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L242824.  call `write`(v0, v1, v3) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24282a.  goto L2427e4;
  #L24282c.  return @kind void;
}
procedure `void` `writeMedium`(`okio.BufferedSink` v1 @kind object, `int` v2 ) @signature `Lokhttp3/internal/http2/Http2Writer;.writeMedium:(Lokio/BufferedSink;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L242840.  v0:= v2 ^>> 16;
  #L242844.  v0:= v0 ^& 255;
  #L242848.  call temp:= `writeByte`(v1, v0) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L24284e.  v0:= v2 ^>> 8;
  #L242852.  v0:= v0 ^& 255;
  #L242856.  call temp:= `writeByte`(v1, v0) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L24285c.  v2:= v2 ^& 255;
  #L242860.  call temp:= `writeByte`(v1, v2) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L242866.  return @kind void;
}
procedure `void` `applyAndAckSettings`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L241f6c.  @monitorenter v2
  #L241f6e.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L241f72.  if v0 != 0 then goto L241fc0;
  #L241f76.  v0:= v2.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L241f7a.  call temp:= `getMaxFrameSize`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @kind virtual;
  #L241f80.  v0:= temp;
  #L241f82.  v2.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int` := v0;
  #L241f86.  call temp:= `getHeaderTableSize`(v3) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @kind virtual;
  #L241f8c.  v0:= temp;
  #L241f8e.  v1:= -1I;
  #L241f90.  if v0 == v1 then goto L241fa6;
  #L241f94.  v0:= v2.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L241f98.  call temp:= `getHeaderTableSize`(v3) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @kind virtual;
  #L241f9e.  v3:= temp;
  #L241fa0.  call `setHeaderTableSizeSetting`(v0, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @kind virtual;
  #L241fa6.  v3:= 4I;
  #L241fa8.  v0:= 1I;
  #L241faa.  v1:= 0I;
  #L241fac.  call `frameHeader`(v2, v1, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L241fb2.  v3:= v2.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L241fb6.  call `flush`(v3) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L241fbc.  @monitorexit v2
  #L241fbe.  return @kind void;
  #L241fc0.  v3:= new `java.io.IOException`;
  #L241fc4.  v0:= "closed" @kind object;
  #L241fc8.  call `<init>`(v3, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L241fce.  throw v3;
  #L241fd0.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L241fd2.  @monitorexit v2
  #L241fd4.  throw v3;
  catch `java.lang.Throwable` @[L241f6e..L241fbc] goto L241fd0;
  catch `java.lang.Throwable` @[L241fc0..L241fd0] goto L241fd0;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Writer` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L241ffc.  @monitorenter v1
  #L241ffe.  v0:= 1I;
  #L242000.  v1.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` := v0 @kind boolean;
  #L242004.  v0:= v1.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242008.  call `close`(v0) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #L24200e.  @monitorexit v1
  #L242010.  return @kind void;
  #L242012.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242014.  @monitorexit v1
  #L242016.  throw v0;
  catch `java.lang.Throwable` @[L242000..L24200e] goto L242012;
}
procedure `void` `connectionPreface`(`okhttp3.internal.http2.Http2Writer` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.connectionPreface:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L242034.  @monitorenter v5
  #L242036.  v0:= v5.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L24203a.  if v0 != 0 then goto L2420b0;
  #L24203e.  v0:= v5.`okhttp3.internal.http2.Http2Writer.client` @type ^`boolean` @kind boolean;
  #L242042.  if v0 != 0 then goto L24204a;
  #L242046.  @monitorexit v5
  #L242048.  return @kind void;
  #L24204a.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L24204e.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L242052.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L242058.  v0:= temp;
  #L24205a.  if v0 == 0 then goto L24208c;
  #L24205e.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L242062.  v1:= ">> CONNECTION %s" @kind object;
  #L242066.  v2:= 1I;
  #L242068.  v2:= new `java.lang.Object`[v2];
  #L24206c.  v3:= 0I;
  #L24206e.  v4:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L242072.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L242078.  v4:= temp @kind object;
  #L24207a.  v2[v3]:= v4 @kind object;
  #L24207e.  call temp:= `format`(v1, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L242084.  v1:= temp @kind object;
  #L242086.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L24208c.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242090.  v1:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L242094.  call temp:= `toByteArray`(v1) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L24209a.  v1:= temp @kind object;
  #L24209c.  call temp:= `write`(v0, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L2420a2.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2420a6.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L2420ac.  @monitorexit v5
  #L2420ae.  return @kind void;
  #L2420b0.  v0:= new `java.io.IOException`;
  #L2420b4.  v1:= "closed" @kind object;
  #L2420b8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2420be.  throw v0;
  #L2420c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2420c2.  @monitorexit v5
  #L2420c4.  throw v0;
  catch `java.lang.Throwable` @[L242036..L242042] goto L2420c0;
  catch `java.lang.Throwable` @[L24204a..L2420ac] goto L2420c0;
  catch `java.lang.Throwable` @[L2420b0..L2420c0] goto L2420c0;
}
procedure `void` `data`(`okhttp3.internal.http2.Http2Writer` v1 @kind this, `boolean` v2 , `int` v3 , `okio.Buffer` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2420f4.  @monitorenter v1
  #L2420f6.  v0:= v1.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2420fa.  if v0 != 0 then goto L242112;
  #L2420fe.  v0:= 0I;
  #L242100.  if v2 == 0 then goto L242108;
  #L242104.  v2:= 1I;
  #L242106.  v0:= (`byte`) v2 @kind i2b;
  #L242108.  call `dataFrame`(v1, v3, v0, v4, v5) @signature `Lokhttp3/internal/http2/Http2Writer;.dataFrame:(IBLokio/Buffer;I)V` @kind virtual;
  #L24210e.  @monitorexit v1
  #L242110.  return @kind void;
  #L242112.  v2:= new `java.io.IOException`;
  #L242116.  v3:= "closed" @kind object;
  #L24211a.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L242120.  throw v2;
  #L242122.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242124.  @monitorexit v1
  #L242126.  throw v2;
  catch `java.lang.Throwable` @[L2420f6..L24210e] goto L242122;
  catch `java.lang.Throwable` @[L242112..L242122] goto L242122;
}
procedure `void` `dataFrame`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `int` v3 , `byte` v4 , `okio.Buffer` v5 @kind object, `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Writer;.dataFrame:(IBLokio/Buffer;I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L24214c.  v0:= 0I;
  #L24214e.  call `frameHeader`(v2, v3, v6, v0, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L242154.  if v6 <= 0 then goto L242164;
  #L242158.  v3:= v2.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24215c.  v0:= (`long`) v6 @kind i2l;
  #L24215e.  call `write`(v3, v5, v0) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L242164.  return @kind void;
}
procedure `void` `flush`(`okhttp3.internal.http2.Http2Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L242178.  @monitorenter v2
  #L24217a.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L24217e.  if v0 != 0 then goto L242190;
  #L242182.  v0:= v2.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242186.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L24218c.  @monitorexit v2
  #L24218e.  return @kind void;
  #L242190.  v0:= new `java.io.IOException`;
  #L242194.  v1:= "closed" @kind object;
  #L242198.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24219e.  throw v0;
  #L2421a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2421a2.  @monitorexit v2
  #L2421a4.  throw v0;
  catch `java.lang.Throwable` @[L24217a..L24218c] goto L2421a0;
  catch `java.lang.Throwable` @[L242190..L2421a0] goto L2421a0;
}
procedure `void` `frameHeader`(`okhttp3.internal.http2.Http2Writer` v3 @kind this, `int` v4 , `int` v5 , `byte` v6 , `byte` v7 ) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2421cc.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L2421d0.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2421d4.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2421da.  v0:= temp;
  #L2421dc.  v1:= 0I;
  #L2421de.  if v0 == 0 then goto L2421f4;
  #L2421e2.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L2421e6.  call temp:= `frameLog`(v1, v4, v5, v6, v7) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L2421ec.  v2:= temp @kind object;
  #L2421ee.  call `fine`(v0, v2) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2421f4.  v0:= v3.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L2421f8.  v2:= 1I;
  #L2421fa.  if v5 > v0 then goto L242260;
  #L2421fe.  v0:= -2147483648I;
  #L242202.  v0:= v0 ^& v4 @kind int;
  #L242204.  if v0 != 0 then goto L242242;
  #L242208.  v0:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24220c.  call `writeMedium`(v0, v5) @signature `Lokhttp3/internal/http2/Http2Writer;.writeMedium:(Lokio/BufferedSink;I)V` @kind static;
  #L242212.  v5:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242216.  v6:= v6 ^& 255;
  #L24221a.  call temp:= `writeByte`(v5, v6) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L242220.  v5:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242224.  v6:= v7 ^& 255;
  #L242228.  call temp:= `writeByte`(v5, v6) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L24222e.  v5:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242232.  v6:= 2147483647I;
  #L242238.  v4:= v4 ^& v6 @kind int;
  #L24223a.  call temp:= `writeInt`(v5, v4) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L242240.  return @kind void;
  #L242242.  v5:= new `java.lang.Object`[v2];
  #L242246.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L24224c.  v4:= temp @kind object;
  #L24224e.  v5[v1]:= v4 @kind object;
  #L242252.  v4:= "reserved bit set: %s" @kind object;
  #L242256.  call temp:= `illegalArgument`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L24225c.  v4:= temp @kind object;
  #L24225e.  throw v4;
  #L242260.  v4:= 2I;
  #L242262.  v4:= new `java.lang.Object`[v4];
  #L242266.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L24226c.  v6:= temp @kind object;
  #L24226e.  v4[v1]:= v6 @kind object;
  #L242272.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L242278.  v5:= temp @kind object;
  #L24227a.  v4[v2]:= v5 @kind object;
  #L24227e.  v5:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L242282.  call temp:= `illegalArgument`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L242288.  v4:= temp @kind object;
  #L24228a.  throw v4;
}
procedure `void` `goAway`(`okhttp3.internal.http2.Http2Writer` v3 @kind this, `int` v4 , `okhttp3.internal.http2.ErrorCode` v5 @kind object, `byte`[] v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.goAway:(ILokhttp3/internal/http2/ErrorCode;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24229c.  @monitorenter v3
  #L24229e.  v0:= v3.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2422a2.  if v0 != 0 then goto L242308;
  #L2422a6.  v0:= v5.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L2422aa.  v1:= -1I;
  #L2422ac.  v2:= 0I;
  #L2422ae.  if v0 == v1 then goto L2422f6;
  #L2422b2.  v0:= length @variable v6;
  #L2422b4.  v0:= v0 + 8;
  #L2422b8.  v1:= 7I;
  #L2422ba.  call `frameHeader`(v3, v2, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L2422c0.  v0:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2422c4.  call temp:= `writeInt`(v0, v4) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L2422ca.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2422ce.  v5:= v5.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L2422d2.  call temp:= `writeInt`(v4, v5) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L2422d8.  v4:= length @variable v6;
  #L2422da.  if v4 <= 0 then goto L2422e8;
  #L2422de.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2422e2.  call temp:= `write`(v4, v6) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L2422e8.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2422ec.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L2422f2.  @monitorexit v3
  #L2422f4.  return @kind void;
  #L2422f6.  v4:= "errorCode.httpCode == -1" @kind object;
  #L2422fa.  v5:= new `java.lang.Object`[v2];
  #L2422fe.  call temp:= `illegalArgument`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L242304.  v4:= temp @kind object;
  #L242306.  throw v4;
  #L242308.  v4:= new `java.io.IOException`;
  #L24230c.  v5:= "closed" @kind object;
  #L242310.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L242316.  throw v4;
  #L242318.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24231a.  @monitorexit v3
  #L24231c.  throw v4;
  catch `java.lang.Throwable` @[L24229e..L2422f2] goto L242318;
  catch `java.lang.Throwable` @[L2422f6..L242318] goto L242318;
}
procedure `void` `headers`(`okhttp3.internal.http2.Http2Writer` v1 @kind this, `int` v2 , `java.util.List` v3 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2423d4.  @monitorenter v1
  #L2423d6.  v0:= v1.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2423da.  if v0 != 0 then goto L2423ea;
  #L2423de.  v0:= 0I;
  #L2423e0.  call `headers`(v1, v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #L2423e6.  @monitorexit v1
  #L2423e8.  return @kind void;
  #L2423ea.  v2:= new `java.io.IOException`;
  #L2423ee.  v3:= "closed" @kind object;
  #L2423f2.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2423f8.  throw v2;
  #L2423fa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2423fc.  @monitorexit v1
  #L2423fe.  throw v2;
  catch `java.lang.Throwable` @[L2423d6..L2423e6] goto L2423fa;
  catch `java.lang.Throwable` @[L2423ea..L2423fa] goto L2423fa;
}
procedure `void` `headers`(`okhttp3.internal.http2.Http2Writer` v5 @kind this, `boolean` v6 , `int` v7 , `java.util.List` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L242344.  v0:= v5.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L242348.  if v0 != 0 then goto L2423b4;
  #L24234c.  v0:= v5.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L242350.  call `writeHeaders`(v0, v8) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @kind virtual;
  #L242356.  v8:= v5.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L24235a.  call temp:= `size`(v8) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L242360.  v0:= temp @kind wide;
  #L242362.  v8:= v5.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L242366.  v2:= (`long`) v8 @kind i2l;
  #L242368.  call temp:= `min`(v2, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24236e.  v2:= temp @kind wide;
  #L242370.  v8:= (`int`) v2 @kind l2i;
  #L242372.  v2:= (`long`) v8 @kind i2l;
  #L242374.  v4:= lcmp(v0, v2);
  #L242378.  if v4 != 0 then goto L242380;
  #L24237c.  v4:= 4I;
  #L24237e.  goto L242382;
  #L242380.  v4:= 0I;
  #L242382.  if v6 == 0 then goto L24238c;
  #L242386.  v6:= v4 ^| 1;
  #L24238a.  v4:= (`byte`) v6 @kind i2b;
  #L24238c.  v6:= 1I;
  #L24238e.  call `frameHeader`(v5, v7, v8, v6, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L242394.  v6:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242398.  v8:= v5.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L24239c.  call `write`(v6, v8, v2) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2423a2.  v6:= lcmp(v0, v2);
  #L2423a6.  if v6 <= 0 then goto L2423b2;
  #L2423aa.  v0:= v0 - v2 @kind long;
  #L2423ac.  call `writeContinuationFrames`(v5, v7, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @kind direct;
  #L2423b2.  return @kind void;
  #L2423b4.  v6:= new `java.io.IOException`;
  #L2423b8.  v7:= "closed" @kind object;
  #L2423bc.  call `<init>`(v6, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2423c2.  throw v6;
}
procedure `int` `maxDataLength`(`okhttp3.internal.http2.Http2Writer` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.maxDataLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L241ee0.  v0:= v1.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L241ee4.  return v0;
}
procedure `void` `ping`(`okhttp3.internal.http2.Http2Writer` v3 @kind this, `boolean` v4 , `int` v5 , `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Writer;.ping:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L242424.  @monitorenter v3
  #L242426.  v0:= v3.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L24242a.  if v0 != 0 then goto L242468;
  #L24242e.  v0:= 8I;
  #L242432.  v1:= 6I;
  #L242434.  v2:= 0I;
  #L242436.  if v4 == 0 then goto L24243e;
  #L24243a.  v4:= 1I;
  #L24243c.  goto L242440;
  #L24243e.  v4:= 0I;
  #L242440.  call `frameHeader`(v3, v2, v0, v1, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L242446.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24244a.  call temp:= `writeInt`(v4, v5) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L242450.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242454.  call temp:= `writeInt`(v4, v6) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L24245a.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24245e.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L242464.  @monitorexit v3
  #L242466.  return @kind void;
  #L242468.  v4:= new `java.io.IOException`;
  #L24246c.  v5:= "closed" @kind object;
  #L242470.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L242476.  throw v4;
  #L242478.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24247a.  @monitorexit v3
  #L24247c.  throw v4;
  catch `java.lang.Throwable` @[L242426..L242464] goto L242478;
  catch `java.lang.Throwable` @[L242468..L242478] goto L242478;
}
procedure `void` `pushPromise`(`okhttp3.internal.http2.Http2Writer` v7 @kind this, `int` v8 , `int` v9 , `java.util.List` v10 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.pushPromise:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2424a4.  @monitorenter v7
  #L2424a6.  v0:= v7.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2424aa.  if v0 != 0 then goto L242526;
  #L2424ae.  v0:= v7.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L2424b2.  call `writeHeaders`(v0, v10) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @kind virtual;
  #L2424b8.  v10:= v7.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L2424bc.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2424c2.  v0:= temp @kind wide;
  #L2424c4.  v10:= v7.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L2424c8.  v2:= 4I;
  #L2424ca.  v10:= v10 - v2 @kind int;
  #L2424cc.  v3:= (`long`) v10 @kind i2l;
  #L2424ce.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2424d4.  v3:= temp @kind wide;
  #L2424d6.  v10:= (`int`) v3 @kind l2i;
  #L2424d8.  v3:= 5I;
  #L2424da.  v4:= (`long`) v10 @kind i2l;
  #L2424dc.  v6:= lcmp(v0, v4);
  #L2424e0.  if v6 != 0 then goto L2424e8;
  #L2424e4.  v6:= 4I;
  #L2424e6.  goto L2424ea;
  #L2424e8.  v6:= 0I;
  #L2424ea.  v10:= v10 + v2 @kind int;
  #L2424ec.  call `frameHeader`(v7, v8, v10, v3, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L2424f2.  v10:= v7.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L2424f6.  v2:= 2147483647I;
  #L2424fc.  v9:= v9 ^& v2 @kind int;
  #L2424fe.  call temp:= `writeInt`(v10, v9) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L242504.  v9:= v7.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242508.  v10:= v7.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L24250c.  call `write`(v9, v10, v4) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L242512.  v9:= lcmp(v0, v4);
  #L242516.  if v9 <= 0 then goto L242522;
  #L24251a.  v0:= v0 - v4 @kind long;
  #L24251c.  call `writeContinuationFrames`(v7, v8, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @kind direct;
  #L242522.  @monitorexit v7
  #L242524.  return @kind void;
  #L242526.  v8:= new `java.io.IOException`;
  #L24252a.  v9:= "closed" @kind object;
  #L24252e.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L242534.  throw v8;
  #L242536.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242538.  @monitorexit v7
  #L24253a.  throw v8;
  catch `java.lang.Throwable` @[L2424a6..L242522] goto L242536;
  catch `java.lang.Throwable` @[L242526..L242536] goto L242536;
}
procedure `void` `rstStream`(`okhttp3.internal.http2.Http2Writer` v3 @kind this, `int` v4 , `okhttp3.internal.http2.ErrorCode` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L242560.  @monitorenter v3
  #L242562.  v0:= v3.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L242566.  if v0 != 0 then goto L2425a8;
  #L24256a.  v0:= v5.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L24256e.  v1:= -1I;
  #L242570.  if v0 == v1 then goto L24259c;
  #L242574.  v0:= 4I;
  #L242576.  v1:= 3I;
  #L242578.  v2:= 0I;
  #L24257a.  call `frameHeader`(v3, v4, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L242580.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242584.  v5:= v5.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L242588.  call temp:= `writeInt`(v4, v5) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L24258e.  v4:= v3.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242592.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L242598.  @monitorexit v3
  #L24259a.  return @kind void;
  #L24259c.  v4:= new `java.lang.IllegalArgumentException`;
  #L2425a0.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L2425a6.  throw v4;
  #L2425a8.  v4:= new `java.io.IOException`;
  #L2425ac.  v5:= "closed" @kind object;
  #L2425b0.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2425b6.  throw v4;
  #L2425b8.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2425ba.  @monitorexit v3
  #L2425bc.  throw v4;
  catch `java.lang.Throwable` @[L242562..L242598] goto L2425b8;
  catch `java.lang.Throwable` @[L24259c..L2425b8] goto L2425b8;
}
procedure `void` `settings`(`okhttp3.internal.http2.Http2Writer` v4 @kind this, `okhttp3.internal.http2.Settings` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2425e4.  @monitorenter v4
  #L2425e6.  v0:= v4.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2425ea.  if v0 != 0 then goto L24265e;
  #L2425ee.  call temp:= `size`(v5) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @kind virtual;
  #L2425f4.  v0:= temp;
  #L2425f6.  v0:= v0 * 6;
  #L2425fa.  v1:= 0I;
  #L2425fc.  v2:= 4I;
  #L2425fe.  call `frameHeader`(v4, v1, v0, v2, v1) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L242604.  v0:= 10I;
  #L242608.  if v1 >= v0 then goto L242650;
  #L24260c.  call temp:= `isSet`(v5, v1) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L242612.  v0:= temp;
  #L242614.  if v0 != 0 then goto L24261a;
  #L242618.  goto L24264a;
  #L24261a.  if v1 != v2 then goto L242622;
  #L24261e.  v0:= 3I;
  #L242620.  goto L24262e;
  #L242622.  v0:= 7I;
  #L242624.  if v1 != v0 then goto L24262c;
  #L242628.  v0:= 4I;
  #L24262a.  goto L24262e;
  #L24262c.  v0:= v1;
  #L24262e.  v3:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242632.  call temp:= `writeShort`(v3, v0) @signature `Lokio/BufferedSink;.writeShort:(I)Lokio/BufferedSink;` @kind interface;
  #L242638.  v0:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24263c.  call temp:= `get`(v5, v1) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L242642.  v3:= temp;
  #L242644.  call temp:= `writeInt`(v0, v3) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L24264a.  v1:= v1 + 1;
  #L24264e.  goto L242604;
  #L242650.  v5:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242654.  call `flush`(v5) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L24265a.  @monitorexit v4
  #L24265c.  return @kind void;
  #L24265e.  v5:= new `java.io.IOException`;
  #L242662.  v0:= "closed" @kind object;
  #L242666.  call `<init>`(v5, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24266c.  throw v5;
  #L24266e.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242670.  @monitorexit v4
  #L242672.  throw v5;
  #L242674.  return @kind void;
  catch `java.lang.Throwable` @[L2425e6..L24265a] goto L24266e;
  catch `java.lang.Throwable` @[L24265e..L24266e] goto L24266e;
}
procedure `void` `synReply`(`okhttp3.internal.http2.Http2Writer` v1 @kind this, `boolean` v2 , `int` v3 , `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.synReply:(ZILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24269c.  @monitorenter v1
  #L24269e.  v0:= v1.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2426a2.  if v0 != 0 then goto L2426b0;
  #L2426a6.  call `headers`(v1, v2, v3, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #L2426ac.  @monitorexit v1
  #L2426ae.  return @kind void;
  #L2426b0.  v2:= new `java.io.IOException`;
  #L2426b4.  v3:= "closed" @kind object;
  #L2426b8.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2426be.  throw v2;
  #L2426c0.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2426c2.  @monitorexit v1
  #L2426c4.  throw v2;
  catch `java.lang.Throwable` @[L24269e..L2426ac] goto L2426c0;
  catch `java.lang.Throwable` @[L2426b0..L2426c0] goto L2426c0;
}
procedure `void` `synStream`(`okhttp3.internal.http2.Http2Writer` v0 @kind this, `boolean` v1 , `int` v2 , `int` v3 , `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.synStream:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L2426ec.  @monitorenter v0
  #L2426ee.  v3:= v0.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L2426f2.  if v3 != 0 then goto L242700;
  #L2426f6.  call `headers`(v0, v1, v2, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #L2426fc.  @monitorexit v0
  #L2426fe.  return @kind void;
  #L242700.  v1:= new `java.io.IOException`;
  #L242704.  v2:= "closed" @kind object;
  #L242708.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24270e.  throw v1;
  #L242710.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L242712.  @monitorexit v0
  #L242714.  throw v1;
  catch `java.lang.Throwable` @[L2426ee..L2426fc] goto L242710;
  catch `java.lang.Throwable` @[L242700..L242710] goto L242710;
}
procedure `void` `windowUpdate`(`okhttp3.internal.http2.Http2Writer` v4 @kind this, `int` v5 , `long` v6 ) @signature `Lokhttp3/internal/http2/Http2Writer;.windowUpdate:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24273c.  @monitorenter v4
  #L24273e.  v0:= v4.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L242742.  if v0 != 0 then goto L2427a8;
  #L242746.  v0:= 0L;
  #L24274a.  v2:= 0I;
  #L24274c.  v3:= lcmp(v6, v0);
  #L242750.  if v3 == 0 then goto L242788;
  #L242754.  v0:= 2147483647L;
  #L24275a.  v3:= lcmp(v6, v0);
  #L24275e.  if v3 > 0 then goto L242788;
  #L242762.  v0:= 4I;
  #L242764.  v1:= 8I;
  #L242768.  call `frameHeader`(v4, v5, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L24276e.  v5:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L242772.  v6:= (`int`) v6 @kind l2i;
  #L242774.  call temp:= `writeInt`(v5, v6) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L24277a.  v5:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L24277e.  call `flush`(v5) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L242784.  @monitorexit v4
  #L242786.  return @kind void;
  #L242788.  v5:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L24278c.  v0:= 1I;
  #L24278e.  v0:= new `java.lang.Object`[v0];
  #L242792.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L242798.  v6:= temp @kind object;
  #L24279a.  v0[v2]:= v6 @kind object;
  #L24279e.  call temp:= `illegalArgument`(v5, v0) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L2427a4.  v5:= temp @kind object;
  #L2427a6.  throw v5;
  #L2427a8.  v5:= new `java.io.IOException`;
  #L2427ac.  v6:= "closed" @kind object;
  #L2427b0.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2427b6.  throw v5;
  #L2427b8.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2427ba.  @monitorexit v4
  #L2427bc.  throw v5;
  catch `java.lang.Throwable` @[L24273e..L242784] goto L2427b8;
  catch `java.lang.Throwable` @[L242788..L2427b8] goto L2427b8;
}
