record `okhttp3.OkHttpClient` @kind class @AccessFlag PUBLIC extends `java.lang.Cloneable` @kind interface, `okhttp3.Call$Factory` @kind interface, `okhttp3.WebSocket$Factory` @kind interface {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.authenticator` @AccessFlag FINAL;
  `okhttp3.Cache` `okhttp3.OkHttpClient.cache` @AccessFlag FINAL;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient.certificateChainCleaner` @AccessFlag FINAL;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient.certificatePinner` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.connectTimeout` @AccessFlag FINAL;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient.connectionPool` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.connectionSpecs` @AccessFlag FINAL;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient.cookieJar` @AccessFlag FINAL;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient.dispatcher` @AccessFlag FINAL;
  `okhttp3.Dns` `okhttp3.OkHttpClient.dns` @AccessFlag FINAL;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient.eventListenerFactory` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followRedirects` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.followSslRedirects` @AccessFlag FINAL;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient.hostnameVerifier` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient.internalCache` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.networkInterceptors` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.pingInterval` @AccessFlag FINAL;
  `java.util.List` `okhttp3.OkHttpClient.protocols` @AccessFlag FINAL;
  `java.net.Proxy` `okhttp3.OkHttpClient.proxy` @AccessFlag FINAL;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient.proxyAuthenticator` @AccessFlag FINAL;
  `java.net.ProxySelector` `okhttp3.OkHttpClient.proxySelector` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.readTimeout` @AccessFlag FINAL;
  `boolean` `okhttp3.OkHttpClient.retryOnConnectionFailure` @AccessFlag FINAL;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient.socketFactory` @AccessFlag FINAL;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient.sslSocketFactory` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient.writeTimeout` @AccessFlag FINAL;
}
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @AccessFlag STATIC_FINAL;
global `java.util.List` `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/OkHttpClient;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2309cc.  v0:= 2I;
  #L2309ce.  v1:= new `okhttp3.Protocol`[v0];
  #L2309d2.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L2309d6.  v3:= 0I;
  #L2309d8.  v1[v3]:= v2 @kind object;
  #L2309dc.  v2:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L2309e0.  v4:= 1I;
  #L2309e2.  v1[v4]:= v2 @kind object;
  #L2309e6.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2309ec.  v1:= temp @kind object;
  #L2309ee.  `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` := v1 @kind object;
  #L2309f2.  v0:= new `okhttp3.ConnectionSpec`[v0];
  #L2309f6.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L2309fa.  v0[v3]:= v1 @kind object;
  #L2309fe.  v1:= `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L230a02.  v0[v4]:= v1 @kind object;
  #L230a06.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L230a0c.  v0:= temp @kind object;
  #L230a0e.  `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` := v0 @kind object;
  #L230a12.  v0:= new `okhttp3.OkHttpClient$1`;
  #L230a16.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @kind direct;
  #L230a1c.  `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` := v0 @kind object;
  #L230a20.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L230a34.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L230a38.  call `<init>`(v0) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @kind direct;
  #L230a3e.  call `<init>`(v1, v0) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L230a44.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient` v4 @kind this, `okhttp3.OkHttpClient$Builder` v5 @kind object) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L230a58.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L230a5e.  v0:= v5.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L230a62.  v4.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L230a66.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` @kind object;
  #L230a6a.  v4.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` := v0 @kind object;
  #L230a6e.  v0:= v5.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` @kind object;
  #L230a72.  v4.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` := v0 @kind object;
  #L230a76.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` @kind object;
  #L230a7a.  v4.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L230a7e.  v0:= v5.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L230a82.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L230a88.  v0:= temp @kind object;
  #L230a8a.  v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L230a8e.  v0:= v5.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L230a92.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L230a98.  v0:= temp @kind object;
  #L230a9a.  v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L230a9e.  v0:= v5.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L230aa2.  v4.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L230aa6.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L230aaa.  v4.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L230aae.  v0:= v5.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L230ab2.  v4.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L230ab6.  v0:= v5.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` @kind object;
  #L230aba.  v4.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L230abe.  v0:= v5.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L230ac2.  v4.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L230ac6.  v0:= v5.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L230aca.  v4.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L230ace.  v0:= v4.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L230ad2.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L230ad8.  v0:= temp @kind object;
  #L230ada.  v1:= 0I;
  #L230adc.  v2:= 0I;
  #L230ade.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L230ae4.  v3:= temp;
  #L230ae6.  if v3 == 0 then goto L230b10;
  #L230aea.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L230af0.  v3:= temp @kind object;
  #L230af2.  v3:= (`okhttp3.ConnectionSpec`) v3 @kind object;
  #L230af6.  if v2 != 0 then goto L230b0c;
  #L230afa.  call temp:= `isTls`(v3) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @kind virtual;
  #L230b00.  v2:= temp;
  #L230b02.  if v2 == 0 then goto L230b08;
  #L230b06.  goto L230b0c;
  #L230b08.  v2:= 0I;
  #L230b0a.  goto L230ade;
  #L230b0c.  v2:= 1I;
  #L230b0e.  goto L230ade;
  #L230b10.  v0:= v5.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L230b14.  if v0 != 0 then goto L230b40;
  #L230b18.  if v2 != 0 then goto L230b1e;
  #L230b1c.  goto L230b40;
  #L230b1e.  call temp:= `systemDefaultTrustManager`(v4) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @kind direct;
  #L230b24.  v0:= temp @kind object;
  #L230b26.  call temp:= `systemDefaultSslSocketFactory`(v4, v0) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @kind direct;
  #L230b2c.  v1:= temp @kind object;
  #L230b2e.  v4.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L230b32.  call temp:= `get`(v0) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L230b38.  v0:= temp @kind object;
  #L230b3a.  v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L230b3e.  goto L230b50;
  #L230b40.  v0:= v5.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L230b44.  v4.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L230b48.  v0:= v5.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L230b4c.  v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L230b50.  v0:= v5.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L230b54.  v4.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L230b58.  v0:= v5.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L230b5c.  v1:= v4.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L230b60.  call temp:= `withCertificateChainCleaner`(v0, v1) @signature `Lokhttp3/CertificatePinner;.withCertificateChainCleaner:(Lokhttp3/internal/tls/CertificateChainCleaner;)Lokhttp3/CertificatePinner;` @kind virtual;
  #L230b66.  v0:= temp @kind object;
  #L230b68.  v4.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L230b6c.  v0:= v5.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L230b70.  v4.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L230b74.  v0:= v5.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L230b78.  v4.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L230b7c.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L230b80.  v4.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L230b84.  v0:= v5.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` @kind object;
  #L230b88.  v4.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L230b8c.  v0:= v5.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` @kind boolean;
  #L230b90.  v4.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L230b94.  v0:= v5.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` @kind boolean;
  #L230b98.  v4.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L230b9c.  v0:= v5.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L230ba0.  v4.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L230ba4.  v0:= v5.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int`;
  #L230ba8.  v4.`okhttp3.OkHttpClient.connectTimeout` @type ^`int` := v0;
  #L230bac.  v0:= v5.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int`;
  #L230bb0.  v4.`okhttp3.OkHttpClient.readTimeout` @type ^`int` := v0;
  #L230bb4.  v0:= v5.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int`;
  #L230bb8.  v4.`okhttp3.OkHttpClient.writeTimeout` @type ^`int` := v0;
  #L230bbc.  v5:= v5.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int`;
  #L230bc0.  v4.`okhttp3.OkHttpClient.pingInterval` @type ^`int` := v5;
  #L230bc4.  v5:= v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L230bc8.  v0:= 0I;
  #L230bca.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L230bd0.  v5:= temp;
  #L230bd2.  if v5 != 0 then goto L230c1a;
  #L230bd6.  v5:= v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L230bda.  call temp:= `contains`(v5, v0) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L230be0.  v5:= temp;
  #L230be2.  if v5 != 0 then goto L230be8;
  #L230be6.  return @kind void;
  #L230be8.  v5:= new `java.lang.IllegalStateException`;
  #L230bec.  v0:= new `java.lang.StringBuilder`;
  #L230bf0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L230bf6.  v1:= "Null network interceptor: " @kind object;
  #L230bfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230c00.  v1:= v4.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L230c04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230c0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230c10.  v0:= temp @kind object;
  #L230c12.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230c18.  throw v5;
  #L230c1a.  v5:= new `java.lang.IllegalStateException`;
  #L230c1e.  v0:= new `java.lang.StringBuilder`;
  #L230c22.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L230c28.  v1:= "Null interceptor: " @kind object;
  #L230c2c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230c32.  v1:= v4.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L230c36.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230c3c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230c42.  v0:= temp @kind object;
  #L230c44.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230c4a.  throw v5;
  #L230c4c.  return @kind void;
}
procedure `javax.net.ssl.SSLSocketFactory` `systemDefaultSslSocketFactory`(`okhttp3.OkHttpClient` v3 @kind this, `javax.net.ssl.X509TrustManager` v4 @kind object) @signature `Lokhttp3/OkHttpClient;.systemDefaultSslSocketFactory:(Ljavax/net/ssl/X509TrustManager;)Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L230754.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L23075a.  v0:= temp @kind object;
  #L23075c.  call temp:= `getSSLContext`(v0) @signature `Lokhttp3/internal/platform/Platform;.getSSLContext:()Ljavax/net/ssl/SSLContext;` @kind virtual;
  #L230762.  v0:= temp @kind object;
  #L230764.  v1:= 1I;
  #L230766.  v1:= new `javax.net.ssl.TrustManager`[v1];
  #L23076a.  v2:= 0I;
  #L23076c.  v1[v2]:= v4 @kind object;
  #L230770.  v4:= 0I;
  #L230772.  call `init`(v0, v4, v1, v4) @signature `Ljavax/net/ssl/SSLContext;.init:([Ljavax/net/ssl/KeyManager;[Ljavax/net/ssl/TrustManager;Ljava/security/SecureRandom;)V` @kind virtual;
  #L230778.  call temp:= `getSocketFactory`(v0) @signature `Ljavax/net/ssl/SSLContext;.getSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L23077e.  v4:= temp @kind object;
  #L230780.  return v4 @kind object;
  #L230782.  v4:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L230784.  v0:= "No System TLS" @kind object;
  #L230788.  call temp:= `assertionError`(v0, v4) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L23078e.  v4:= temp @kind object;
  #L230790.  throw v4;
  catch `java.security.GeneralSecurityException` @[L230754..L230780] goto L230782;
}
procedure `javax.net.ssl.X509TrustManager` `systemDefaultTrustManager`(`okhttp3.OkHttpClient` v4 @kind this) @signature `Lokhttp3/OkHttpClient;.systemDefaultTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2307b4.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L2307ba.  v0:= temp @kind object;
  #L2307bc.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L2307c2.  v0:= temp @kind object;
  #L2307c4.  v1:= 0I;
  #L2307c6.  v1:= (`java.security.KeyStore`) v1 @kind object;
  #L2307ca.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L2307d0.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L2307d6.  v0:= temp @kind object;
  #L2307d8.  v1:= length @variable v0;
  #L2307da.  v2:= 1I;
  #L2307dc.  if v1 != v2 then goto L2307f8;
  #L2307e0.  v1:= 0I;
  #L2307e2.  v2:= v0[v1] @kind object;
  #L2307e6.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L2307ea.  if v2 == 0 then goto L2307f8;
  #L2307ee.  v0:= v0[v1] @kind object;
  #L2307f2.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L2307f6.  return v0 @kind object;
  #L2307f8.  v1:= new `java.lang.IllegalStateException`;
  #L2307fc.  v2:= new `java.lang.StringBuilder`;
  #L230800.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L230806.  v3:= "Unexpected default trust managers:" @kind object;
  #L23080a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230810.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L230816.  v0:= temp @kind object;
  #L230818.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23081e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230824.  v0:= temp @kind object;
  #L230826.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23082c.  throw v1;
  #L23082e.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L230830.  v1:= "No System TLS" @kind object;
  #L230834.  call temp:= `assertionError`(v1, v0) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L23083a.  v0:= temp @kind object;
  #L23083c.  throw v0;
  catch `java.security.GeneralSecurityException` @[L2307b4..L23082e] goto L23082e;
}
procedure `okhttp3.Authenticator` `authenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230860.  v0:= v1.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L230864.  return v0 @kind object;
}
procedure `okhttp3.Cache` `cache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cache:()Lokhttp3/Cache;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230890.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L230894.  return v0 @kind object;
}
procedure `okhttp3.CertificatePinner` `certificatePinner`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2308c4.  v0:= v1.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L2308c8.  return v0 @kind object;
}
procedure `int` `connectTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23061c.  v0:= v1.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L230620.  return v0;
}
procedure `okhttp3.ConnectionPool` `connectionPool`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2308dc.  v0:= v1.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L2308e0.  return v0 @kind object;
}
procedure `java.util.List` `connectionSpecs`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2306ac.  v0:= v1.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2306b0.  return v0 @kind object;
}
procedure `okhttp3.CookieJar` `cookieJar`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2308f4.  v0:= v1.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L2308f8.  return v0 @kind object;
}
procedure `okhttp3.Dispatcher` `dispatcher`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23090c.  v0:= v1.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L230910.  return v0 @kind object;
}
procedure `okhttp3.Dns` `dns`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230924.  v0:= v1.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L230928.  return v0 @kind object;
}
procedure `okhttp3.EventListener$Factory` `eventListenerFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23093c.  v0:= v1.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L230940.  return v0 @kind object;
}
procedure `boolean` `followRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2305d4.  v0:= v1.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L2305d8.  return v0;
}
procedure `boolean` `followSslRedirects`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2305ec.  v0:= v1.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L2305f0.  return v0;
}
procedure `javax.net.ssl.HostnameVerifier` `hostnameVerifier`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230724.  v0:= v1.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L230728.  return v0 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2306c4.  v0:= v1.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L2306c8.  return v0 @kind object;
}
procedure `okhttp3.internal.cache.InternalCache` `internalCache`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @AccessFlag  {
    temp;
    v0;

  #L2309a8.  v0:= v1.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L2309ac.  if v0 == 0 then goto L2309b6;
  #L2309b0.  v0:= v0.`okhttp3.Cache.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L2309b4.  goto L2309ba;
  #L2309b6.  v0:= v1.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L2309ba.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2306dc.  v0:= v1.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2306e0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `newBuilder`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.newBuilder:()Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230954.  v0:= new `okhttp3.OkHttpClient$Builder`;
  #L230958.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L23095e.  return v0 @kind object;
}
procedure `okhttp3.Call` `newCall`(`okhttp3.OkHttpClient` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/OkHttpClient;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2308a8.  v0:= 0I;
  #L2308aa.  call temp:= `newRealCall`(v1, v2, v0) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L2308b0.  v2:= temp @kind object;
  #L2308b2.  return v2 @kind object;
}
procedure `okhttp3.WebSocket` `newWebSocket`(`okhttp3.OkHttpClient` v7 @kind this, `okhttp3.Request` v8 @kind object, `okhttp3.WebSocketListener` v9 @kind object) @signature `Lokhttp3/OkHttpClient;.newWebSocket:(Lokhttp3/Request;Lokhttp3/WebSocketListener;)Lokhttp3/WebSocket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L230970.  v6:= new `okhttp3.internal.ws.RealWebSocket`;
  #L230974.  v3:= new `java.util.Random`;
  #L230978.  call `<init>`(v3) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L23097e.  v0:= v7.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L230982.  v4:= (`long`) v0 @kind i2l;
  #L230984.  v0:= v6 @kind object;
  #L230986.  v1:= v8 @kind object;
  #L230988.  v2:= v9 @kind object;
  #L23098a.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/internal/ws/RealWebSocket;.<init>:(Lokhttp3/Request;Lokhttp3/WebSocketListener;Ljava/util/Random;J)V` @kind direct;
  #L230990.  call `connect`(v6, v7) @signature `Lokhttp3/internal/ws/RealWebSocket;.connect:(Lokhttp3/OkHttpClient;)V` @kind virtual;
  #L230996.  return v6 @kind object;
}
procedure `int` `pingIntervalMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.pingIntervalMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230634.  v0:= v1.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L230638.  return v0;
}
procedure `java.util.List` `protocols`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2306f4.  v0:= v1.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L2306f8.  return v0 @kind object;
}
procedure `java.net.Proxy` `proxy`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23067c.  v0:= v1.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L230680.  return v0 @kind object;
}
procedure `okhttp3.Authenticator` `proxyAuthenticator`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230878.  v0:= v1.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L23087c.  return v0 @kind object;
}
procedure `java.net.ProxySelector` `proxySelector`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230694.  v0:= v1.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L230698.  return v0 @kind object;
}
procedure `int` `readTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23064c.  v0:= v1.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L230650.  return v0;
}
procedure `boolean` `retryOnConnectionFailure`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230604.  v0:= v1.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L230608.  return v0;
}
procedure `javax.net.SocketFactory` `socketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23070c.  v0:= v1.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L230710.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLSocketFactory` `sslSocketFactory`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23073c.  v0:= v1.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L230740.  return v0 @kind object;
}
procedure `int` `writeTimeoutMillis`(`okhttp3.OkHttpClient` v1 @kind this) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230664.  v0:= v1.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L230668.  return v0;
}
