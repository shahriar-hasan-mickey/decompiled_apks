record `okhttp3.OkHttpClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.authenticator` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.OkHttpClient$Builder.cache` @AccessFlag ;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient$Builder.certificateChainCleaner` @AccessFlag ;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient$Builder.certificatePinner` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.connectTimeout` @AccessFlag ;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient$Builder.connectionPool` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.connectionSpecs` @AccessFlag ;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient$Builder.cookieJar` @AccessFlag ;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient$Builder.dispatcher` @AccessFlag ;
  `okhttp3.Dns` `okhttp3.OkHttpClient$Builder.dns` @AccessFlag ;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient$Builder.eventListenerFactory` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followRedirects` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followSslRedirects` @AccessFlag ;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient$Builder.hostnameVerifier` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient$Builder.internalCache` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.networkInterceptors` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient$Builder.pingInterval` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.protocols` @AccessFlag ;
  `java.net.Proxy` `okhttp3.OkHttpClient$Builder.proxy` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.proxyAuthenticator` @AccessFlag ;
  `java.net.ProxySelector` `okhttp3.OkHttpClient$Builder.proxySelector` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.readTimeout` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @AccessFlag ;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient$Builder.socketFactory` @AccessFlag ;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient$Builder.sslSocketFactory` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.writeTimeout` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2303c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2303ca.  v0:= new `java.util.ArrayList`;
  #L2303ce.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2303d4.  v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L2303d8.  v0:= new `java.util.ArrayList`;
  #L2303dc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2303e2.  v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L2303e6.  v0:= new `okhttp3.Dispatcher`;
  #L2303ea.  call `<init>`(v0) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L2303f0.  v1.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L2303f4.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` @kind object;
  #L2303f8.  v1.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L2303fc.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` @kind object;
  #L230400.  v1.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L230404.  v0:= `@@okhttp3.EventListener.NONE` @type ^`okhttp3.EventListener` @kind object;
  #L230408.  call temp:= `factory`(v0) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L23040e.  v0:= temp @kind object;
  #L230410.  v1.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L230414.  call temp:= `getDefault`() @signature `Ljava/net/ProxySelector;.getDefault:()Ljava/net/ProxySelector;` @kind static;
  #L23041a.  v0:= temp @kind object;
  #L23041c.  v1.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L230420.  v0:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L230424.  v1.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L230428.  call temp:= `getDefault`() @signature `Ljavax/net/SocketFactory;.getDefault:()Ljavax/net/SocketFactory;` @kind static;
  #L23042e.  v0:= temp @kind object;
  #L230430.  v1.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L230434.  v0:= `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` @kind object;
  #L230438.  v1.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L23043c.  v0:= `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` @kind object;
  #L230440.  v1.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L230444.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L230448.  v1.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23044c.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L230450.  v1.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L230454.  v0:= new `okhttp3.ConnectionPool`;
  #L230458.  call `<init>`(v0) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @kind direct;
  #L23045e.  v1.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L230462.  v0:= `@@okhttp3.Dns.SYSTEM` @type ^`okhttp3.Dns` @kind object;
  #L230466.  v1.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L23046a.  v0:= 1I;
  #L23046c.  v1.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L230470.  v1.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L230474.  v1.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L230478.  v0:= 10000I;
  #L23047c.  v1.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L230480.  v1.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L230484.  v1.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L230488.  v0:= 0I;
  #L23048a.  v1.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v0;
  #L23048e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2304a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2304a6.  v0:= new `java.util.ArrayList`;
  #L2304aa.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2304b0.  v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L2304b4.  v0:= new `java.util.ArrayList`;
  #L2304b8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2304be.  v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L2304c2.  v0:= v3.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L2304c6.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L2304ca.  v0:= v3.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L2304ce.  v2.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v0 @kind object;
  #L2304d2.  v0:= v3.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L2304d6.  v2.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L2304da.  v0:= v3.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L2304de.  v2.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L2304e2.  v0:= v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L2304e6.  v1:= v3.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L2304ea.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2304f0.  v0:= v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2304f4.  v1:= v3.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L2304f8.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2304fe.  v0:= v3.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L230502.  v2.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L230506.  v0:= v3.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L23050a.  v2.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L23050e.  v0:= v3.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L230512.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L230516.  v0:= v3.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L23051a.  v2.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L23051e.  v0:= v3.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L230522.  v2.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L230526.  v0:= v3.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L23052a.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L23052e.  v0:= v3.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L230532.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L230536.  v0:= v3.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L23053a.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L23053e.  v0:= v3.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L230542.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L230546.  v0:= v3.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L23054a.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L23054e.  v0:= v3.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L230552.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L230556.  v0:= v3.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L23055a.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L23055e.  v0:= v3.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L230562.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L230566.  v0:= v3.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L23056a.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L23056e.  v0:= v3.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L230572.  v2.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L230576.  v0:= v3.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L23057a.  v2.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L23057e.  v0:= v3.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L230582.  v2.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L230586.  v0:= v3.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L23058a.  v2.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L23058e.  v0:= v3.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L230592.  v2.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L230596.  v0:= v3.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L23059a.  v2.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L23059e.  v3:= v3.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L2305a2.  v2.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v3;
  #L2305a6.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `addInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22fedc.  if v2 == 0 then goto L22feec;
  #L22fee0.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L22fee4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22feea.  return v1 @kind object;
  #L22feec.  v2:= new `java.lang.IllegalArgumentException`;
  #L22fef0.  v0:= "interceptor == null" @kind object;
  #L22fef4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22fefa.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `addNetworkInterceptor`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Interceptor` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.addNetworkInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22ff0c.  if v2 == 0 then goto L22ff1c;
  #L22ff10.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L22ff14.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22ff1a.  return v1 @kind object;
  #L22ff1c.  v2:= new `java.lang.IllegalArgumentException`;
  #L22ff20.  v0:= "interceptor == null" @kind object;
  #L22ff24.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22ff2a.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `authenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.authenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22ff3c.  if v2 == 0 then goto L22ff46;
  #L22ff40.  v1.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L22ff44.  return v1 @kind object;
  #L22ff46.  v2:= new `java.lang.NullPointerException`;
  #L22ff4a.  v0:= "authenticator == null" @kind object;
  #L22ff4e.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22ff54.  throw v2;
}
procedure `okhttp3.OkHttpClient` `build`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22fec0.  v0:= new `okhttp3.OkHttpClient`;
  #L22fec4.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L22feca.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cache`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `okhttp3.Cache` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cache:(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L22ff68.  v0.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v1 @kind object;
  #L22ff6c.  v1:= 0I;
  #L22ff6e.  v0.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L22ff72.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `certificatePinner`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CertificatePinner` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.certificatePinner:(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22ff84.  if v2 == 0 then goto L22ff8e;
  #L22ff88.  v1.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v2 @kind object;
  #L22ff8c.  return v1 @kind object;
  #L22ff8e.  v2:= new `java.lang.NullPointerException`;
  #L22ff92.  v0:= "certificatePinner == null" @kind object;
  #L22ff96.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22ff9c.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22ffb0.  v0:= "timeout" @kind object;
  #L22ffb4.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L22ffba.  v2:= temp;
  #L22ffbc.  v1.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v2;
  #L22ffc0.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionPool`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22ffd4.  if v2 == 0 then goto L22ffde;
  #L22ffd8.  v1.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v2 @kind object;
  #L22ffdc.  return v1 @kind object;
  #L22ffde.  v2:= new `java.lang.NullPointerException`;
  #L22ffe2.  v0:= "connectionPool == null" @kind object;
  #L22ffe6.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22ffec.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionSpecs`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionSpecs:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L230000.  call temp:= `immutableList`(v1) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L230006.  v1:= temp @kind object;
  #L230008.  v0.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v1 @kind object;
  #L23000c.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cookieJar`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.CookieJar` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.cookieJar:(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230020.  if v2 == 0 then goto L23002a;
  #L230024.  v1.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v2 @kind object;
  #L230028.  return v1 @kind object;
  #L23002a.  v2:= new `java.lang.NullPointerException`;
  #L23002e.  v0:= "cookieJar == null" @kind object;
  #L230032.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230038.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `dispatcher`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dispatcher` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dispatcher:(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23004c.  if v2 == 0 then goto L230056;
  #L230050.  v1.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v2 @kind object;
  #L230054.  return v1 @kind object;
  #L230056.  v2:= new `java.lang.IllegalArgumentException`;
  #L23005a.  v0:= "dispatcher == null" @kind object;
  #L23005e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230064.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `dns`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Dns` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.dns:(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230078.  if v2 == 0 then goto L230082;
  #L23007c.  v1.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v2 @kind object;
  #L230080.  return v1 @kind object;
  #L230082.  v2:= new `java.lang.NullPointerException`;
  #L230086.  v0:= "dns == null" @kind object;
  #L23008a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230090.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListener`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListener:(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2300a4.  if v2 == 0 then goto L2300b6;
  #L2300a8.  call temp:= `factory`(v2) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L2300ae.  v2:= temp @kind object;
  #L2300b0.  v1.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L2300b4.  return v1 @kind object;
  #L2300b6.  v2:= new `java.lang.NullPointerException`;
  #L2300ba.  v0:= "eventListener == null" @kind object;
  #L2300be.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2300c4.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListenerFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.EventListener$Factory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.eventListenerFactory:(Lokhttp3/EventListener$Factory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2300d8.  if v2 == 0 then goto L2300e2;
  #L2300dc.  v1.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v2 @kind object;
  #L2300e0.  return v1 @kind object;
  #L2300e2.  v2:= new `java.lang.NullPointerException`;
  #L2300e6.  v0:= "eventListenerFactory == null" @kind object;
  #L2300ea.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2300f0.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `followRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L230104.  v0.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L230108.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followSslRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.followSslRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23011c.  v0.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L230120.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `hostnameVerifier`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.HostnameVerifier` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.hostnameVerifier:(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230134.  if v2 == 0 then goto L23013e;
  #L230138.  v1.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v2 @kind object;
  #L23013c.  return v1 @kind object;
  #L23013e.  v2:= new `java.lang.NullPointerException`;
  #L230142.  v0:= "hostnameVerifier == null" @kind object;
  #L230146.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23014c.  throw v2;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22fe90.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L22fe94.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22fea8.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L22feac.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230160.  v0:= "interval" @kind object;
  #L230164.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L23016a.  v2:= temp;
  #L23016c.  v1.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v2;
  #L230170.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `protocols`(`okhttp3.OkHttpClient$Builder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.protocols:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L230184.  v0:= new `java.util.ArrayList`;
  #L230188.  call `<init>`(v0, v4) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L23018e.  v4:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L230192.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L230198.  v4:= temp;
  #L23019a.  if v4 == 0 then goto L230212;
  #L23019e.  v4:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L2301a2.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2301a8.  v4:= temp;
  #L2301aa.  if v4 != 0 then goto L2301e4;
  #L2301ae.  v4:= 0I;
  #L2301b0.  call temp:= `contains`(v0, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2301b6.  v4:= temp;
  #L2301b8.  if v4 != 0 then goto L2301d4;
  #L2301bc.  v4:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L2301c0.  call temp:= `remove`(v0, v4) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L2301c6.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L2301cc.  v4:= temp @kind object;
  #L2301ce.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v4 @kind object;
  #L2301d2.  return v3 @kind object;
  #L2301d4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2301d8.  v0:= "protocols must not contain null" @kind object;
  #L2301dc.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2301e2.  throw v4;
  #L2301e4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2301e8.  v1:= new `java.lang.StringBuilder`;
  #L2301ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2301f2.  v2:= "protocols must not contain http/1.0: " @kind object;
  #L2301f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2301fc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230202.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230208.  v0:= temp @kind object;
  #L23020a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230210.  throw v4;
  #L230212.  v4:= new `java.lang.IllegalArgumentException`;
  #L230216.  v1:= new `java.lang.StringBuilder`;
  #L23021a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L230220.  v2:= "protocols doesn't contain http/1.1: " @kind object;
  #L230224.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23022a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230230.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230236.  v0:= temp @kind object;
  #L230238.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23023e.  throw v4;
}
procedure `okhttp3.OkHttpClient$Builder` `proxy`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.Proxy` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L230250.  v0.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v1 @kind object;
  #L230254.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxyAuthenticator`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Authenticator` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxyAuthenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230268.  if v2 == 0 then goto L230272;
  #L23026c.  v1.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v2 @kind object;
  #L230270.  return v1 @kind object;
  #L230272.  v2:= new `java.lang.NullPointerException`;
  #L230276.  v0:= "proxyAuthenticator == null" @kind object;
  #L23027a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230280.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `proxySelector`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.ProxySelector` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.proxySelector:(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L230294.  v0.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v1 @kind object;
  #L230298.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2302ac.  v0:= "timeout" @kind object;
  #L2302b0.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2302b6.  v2:= temp;
  #L2302b8.  v1.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v2;
  #L2302bc.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `retryOnConnectionFailure`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/OkHttpClient$Builder;.retryOnConnectionFailure:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2302d0.  v0.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L2302d4.  return v0 @kind object;
}
procedure `void` `setInternalCache`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `okhttp3.internal.cache.InternalCache` v1 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.setInternalCache:(Lokhttp3/internal/cache/InternalCache;)V` @AccessFlag  {
    temp;

  #L2305b8.  v0.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v1 @kind object;
  #L2305bc.  v1:= 0I;
  #L2305be.  v0.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v1 @kind object;
  #L2305c2.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `socketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.SocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.socketFactory:(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2302e8.  if v2 == 0 then goto L2302f2;
  #L2302ec.  v1.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v2 @kind object;
  #L2302f0.  return v1 @kind object;
  #L2302f2.  v2:= new `java.lang.NullPointerException`;
  #L2302f6.  v0:= "socketFactory == null" @kind object;
  #L2302fa.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230300.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `javax.net.ssl.SSLSocketFactory` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230314.  if v2 == 0 then goto L230332;
  #L230318.  v1.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v2 @kind object;
  #L23031c.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L230322.  v0:= temp @kind object;
  #L230324.  call temp:= `buildCertificateChainCleaner`(v0, v2) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L23032a.  v2:= temp @kind object;
  #L23032c.  v1.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v2 @kind object;
  #L230330.  return v1 @kind object;
  #L230332.  v2:= new `java.lang.NullPointerException`;
  #L230336.  v0:= "sslSocketFactory == null" @kind object;
  #L23033a.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230340.  throw v2;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `javax.net.ssl.SSLSocketFactory` v1 @kind object, `javax.net.ssl.X509TrustManager` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L230354.  if v1 == 0 then goto L23037e;
  #L230358.  if v2 == 0 then goto L23036e;
  #L23035c.  v0.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v1 @kind object;
  #L230360.  call temp:= `get`(v2) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L230366.  v1:= temp @kind object;
  #L230368.  v0.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v1 @kind object;
  #L23036c.  return v0 @kind object;
  #L23036e.  v1:= new `java.lang.NullPointerException`;
  #L230372.  v2:= "trustManager == null" @kind object;
  #L230376.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23037c.  throw v1;
  #L23037e.  v1:= new `java.lang.NullPointerException`;
  #L230382.  v2:= "sslSocketFactory == null" @kind object;
  #L230386.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L23038c.  throw v1;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 , `java.util.concurrent.TimeUnit` v4 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2303a0.  v0:= "timeout" @kind object;
  #L2303a4.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L2303aa.  v2:= temp;
  #L2303ac.  v1.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v2;
  #L2303b0.  return v1 @kind object;
}
