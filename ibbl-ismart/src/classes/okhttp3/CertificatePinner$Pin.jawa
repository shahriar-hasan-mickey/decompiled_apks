record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L227f6c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L227f72.  v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v3 @kind object;
  #L227f76.  v0:= "*." @kind object;
  #L227f7a.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L227f80.  v0:= temp;
  #L227f82.  if v0 == 0 then goto L227fc4;
  #L227f86.  v0:= new `java.lang.StringBuilder`;
  #L227f8a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L227f90.  v1:= "http://" @kind object;
  #L227f94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227f9a.  v1:= 2I;
  #L227f9c.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L227fa2.  v3:= temp @kind object;
  #L227fa4.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227faa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L227fb0.  v3:= temp @kind object;
  #L227fb2.  call temp:= `parse`(v3) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L227fb8.  v3:= temp @kind object;
  #L227fba.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L227fc0.  v3:= temp @kind object;
  #L227fc2.  goto L227ff6;
  #L227fc4.  v0:= new `java.lang.StringBuilder`;
  #L227fc8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L227fce.  v1:= "http://" @kind object;
  #L227fd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227fd8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227fde.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L227fe4.  v3:= temp @kind object;
  #L227fe6.  call temp:= `parse`(v3) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L227fec.  v3:= temp @kind object;
  #L227fee.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L227ff4.  v3:= temp @kind object;
  #L227ff6.  v2.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v3 @kind object;
  #L227ffa.  v3:= "sha1/" @kind object;
  #L227ffe.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L228004.  v3:= temp;
  #L228006.  if v3 == 0 then goto L22802a;
  #L22800a.  v3:= "sha1/" @kind object;
  #L22800e.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L228012.  v3:= 5I;
  #L228014.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L22801a.  v3:= temp @kind object;
  #L22801c.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L228022.  v3:= temp @kind object;
  #L228024.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L228028.  goto L228058;
  #L22802a.  v3:= "sha256/" @kind object;
  #L22802e.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L228034.  v3:= temp;
  #L228036.  if v3 == 0 then goto L228090;
  #L22803a.  v3:= "sha256/" @kind object;
  #L22803e.  v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v3 @kind object;
  #L228042.  v3:= 7I;
  #L228044.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L22804a.  v3:= temp @kind object;
  #L22804c.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L228052.  v3:= temp @kind object;
  #L228054.  v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v3 @kind object;
  #L228058.  v3:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L22805c.  if v3 == 0 then goto L228062;
  #L228060.  return @kind void;
  #L228062.  v3:= new `java.lang.IllegalArgumentException`;
  #L228066.  v0:= new `java.lang.StringBuilder`;
  #L22806a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L228070.  v1:= "pins must be base64: " @kind object;
  #L228074.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22807a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L228080.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L228086.  v4:= temp @kind object;
  #L228088.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22808e.  throw v3;
  #L228090.  v3:= new `java.lang.IllegalArgumentException`;
  #L228094.  v0:= new `java.lang.StringBuilder`;
  #L228098.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22809e.  v1:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L2280a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2280a8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2280ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2280b4.  v4:= temp @kind object;
  #L2280b6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2280bc.  throw v3;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L227e00.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L227e04.  if v0 == 0 then goto L227e4c;
  #L227e08.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L227e0c.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L227e10.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L227e14.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L227e1a.  v0:= temp;
  #L227e1c.  if v0 == 0 then goto L227e4c;
  #L227e20.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L227e24.  v1:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L227e28.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L227e2e.  v0:= temp;
  #L227e30.  if v0 == 0 then goto L227e4c;
  #L227e34.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L227e38.  v3:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L227e3c.  call temp:= `equals`(v0, v3) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L227e42.  v3:= temp;
  #L227e44.  if v3 == 0 then goto L227e4c;
  #L227e48.  v3:= 1I;
  #L227e4a.  goto L227e4e;
  #L227e4c.  v3:= 0I;
  #L227e4e.  return v3;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L227ee4.  v0:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L227ee8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L227eee.  v0:= temp;
  #L227ef0.  v1:= 527I;
  #L227ef4.  v1:= v1 + v0 @kind int;
  #L227ef6.  v1:= v1 * 31;
  #L227efa.  v0:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L227efe.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L227f04.  v0:= temp;
  #L227f06.  v1:= v1 + v0 @kind int;
  #L227f08.  v1:= v1 * 31;
  #L227f0c.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L227f10.  call temp:= `hashCode`(v0) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L227f16.  v0:= temp;
  #L227f18.  v1:= v1 + v0 @kind int;
  #L227f1a.  return v1;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L227e60.  v0:= v10.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L227e64.  v1:= "*." @kind object;
  #L227e68.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L227e6e.  v0:= temp;
  #L227e70.  if v0 == 0 then goto L227ec6;
  #L227e74.  v0:= 46I;
  #L227e78.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L227e7e.  v0:= temp;
  #L227e80.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L227e86.  v1:= temp;
  #L227e88.  v1:= v1 - v0 @kind int;
  #L227e8a.  v2:= 1I;
  #L227e8c.  v1:= v1 - v2 @kind int;
  #L227e8e.  v3:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L227e92.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L227e98.  v3:= temp;
  #L227e9a.  if v1 != v3 then goto L227ec2;
  #L227e9e.  v5:= 0I;
  #L227ea0.  v6:= v0 + 1;
  #L227ea4.  v7:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L227ea8.  v8:= 0I;
  #L227eaa.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L227eb0.  v9:= temp;
  #L227eb2.  v4:= v11 @kind object;
  #L227eb4.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L227eba.  v11:= temp;
  #L227ebc.  if v11 == 0 then goto L227ec2;
  #L227ec0.  goto L227ec4;
  #L227ec2.  v2:= 0I;
  #L227ec4.  return v2;
  #L227ec6.  v0:= v10.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L227eca.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L227ed0.  v11:= temp;
  #L227ed2.  return v11;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L227f2c.  v0:= new `java.lang.StringBuilder`;
  #L227f30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L227f36.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L227f3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227f40.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L227f44.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L227f4a.  v1:= temp @kind object;
  #L227f4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L227f52.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L227f58.  v0:= temp @kind object;
  #L227f5a.  return v0 @kind object;
}
