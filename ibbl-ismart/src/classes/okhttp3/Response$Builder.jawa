record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag ;
  `int` `okhttp3.Response$Builder.code` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag ;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag ;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag ;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2322d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2322de.  v0:= -1I;
  #L2322e0.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L2322e4.  v0:= new `okhttp3.Headers$Builder`;
  #L2322e8.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2322ee.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L2322f2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L232304.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23230a.  v0:= -1I;
  #L23230c.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L232310.  v0:= v3.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L232314.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L232318.  v0:= v3.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L23231c.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L232320.  v0:= v3.`okhttp3.Response.code` @type ^`int`;
  #L232324.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L232328.  v0:= v3.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L23232c.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L232330.  v0:= v3.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L232334.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L232338.  v0:= v3.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L23233c.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L232342.  v0:= temp @kind object;
  #L232344.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L232348.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L23234c.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L232350.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L232354.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232358.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L23235c.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232360.  v0:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L232364.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232368.  v0:= v3.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L23236c.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L232370.  v0:= v3.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L232374.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L232378.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L23238c.  v2:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232390.  if v2 != 0 then goto L232396;
  #L232394.  return @kind void;
  #L232396.  v2:= new `java.lang.IllegalArgumentException`;
  #L23239a.  v0:= "priorResponse.body != null" @kind object;
  #L23239e.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2323a4.  throw v2;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2323b8.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L2323bc.  if v0 != 0 then goto L232464;
  #L2323c0.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L2323c4.  if v0 != 0 then goto L232436;
  #L2323c8.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L2323cc.  if v0 != 0 then goto L232408;
  #L2323d0.  v3:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L2323d4.  if v3 != 0 then goto L2323da;
  #L2323d8.  return @kind void;
  #L2323da.  v3:= new `java.lang.IllegalArgumentException`;
  #L2323de.  v0:= new `java.lang.StringBuilder`;
  #L2323e2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2323e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2323ee.  v2:= ".priorResponse != null" @kind object;
  #L2323f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2323f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2323fe.  v2:= temp @kind object;
  #L232400.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232406.  throw v3;
  #L232408.  v3:= new `java.lang.IllegalArgumentException`;
  #L23240c.  v0:= new `java.lang.StringBuilder`;
  #L232410.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L232416.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23241c.  v2:= ".cacheResponse != null" @kind object;
  #L232420.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L232426.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23242c.  v2:= temp @kind object;
  #L23242e.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232434.  throw v3;
  #L232436.  v3:= new `java.lang.IllegalArgumentException`;
  #L23243a.  v0:= new `java.lang.StringBuilder`;
  #L23243e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L232444.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23244a.  v2:= ".networkResponse != null" @kind object;
  #L23244e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L232454.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23245a.  v2:= temp @kind object;
  #L23245c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232462.  throw v3;
  #L232464.  v3:= new `java.lang.IllegalArgumentException`;
  #L232468.  v0:= new `java.lang.StringBuilder`;
  #L23246c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L232472.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L232478.  v2:= ".body != null" @kind object;
  #L23247c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L232482.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L232488.  v2:= temp @kind object;
  #L23248a.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232490.  throw v3;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23213c.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L232140.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L232146.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L232158.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L23215c.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L23209c.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L2320a0.  if v0 == 0 then goto L23211a;
  #L2320a4.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L2320a8.  if v0 == 0 then goto L23210a;
  #L2320ac.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L2320b0.  if v0 < 0 then goto L2320d8;
  #L2320b4.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L2320b8.  if v0 == 0 then goto L2320c8;
  #L2320bc.  v0:= new `okhttp3.Response`;
  #L2320c0.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L2320c6.  return v0 @kind object;
  #L2320c8.  v0:= new `java.lang.IllegalStateException`;
  #L2320cc.  v1:= "message == null" @kind object;
  #L2320d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2320d6.  throw v0;
  #L2320d8.  v0:= new `java.lang.IllegalStateException`;
  #L2320dc.  v1:= new `java.lang.StringBuilder`;
  #L2320e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2320e6.  v2:= "code < 0: " @kind object;
  #L2320ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2320f0.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L2320f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2320fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L232100.  v1:= temp @kind object;
  #L232102.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232108.  throw v0;
  #L23210a.  v0:= new `java.lang.IllegalStateException`;
  #L23210e.  v1:= "protocol == null" @kind object;
  #L232112.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232118.  throw v0;
  #L23211a.  v0:= new `java.lang.IllegalStateException`;
  #L23211e.  v1:= "request == null" @kind object;
  #L232122.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232128.  throw v0;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232170.  if v2 == 0 then goto L23217e;
  #L232174.  v0:= "cacheResponse" @kind object;
  #L232178.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L23217e.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L232182.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L232194.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L232198.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2321ac.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L2321b0.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2321c4.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L2321c8.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2321ce.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2321e0.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2321e6.  v1:= temp @kind object;
  #L2321e8.  v0.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L2321ec.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L232200.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L232204.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232218.  if v2 == 0 then goto L232226;
  #L23221c.  v0:= "networkResponse" @kind object;
  #L232220.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L232226.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L23222a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23223c.  if v1 == 0 then goto L232246;
  #L232240.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L232246.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L23224a.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L23225c.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L232260.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L232274.  v0.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v1 @kind wide;
  #L232278.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23228c.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L232290.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L232296.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2322a8.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L2322ac.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2322c0.  v0.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v1 @kind wide;
  #L2322c4.  return v0 @kind object;
}
