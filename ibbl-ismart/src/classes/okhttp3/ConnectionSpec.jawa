record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L229d40.  v0:= 13I;
  #L229d44.  v0:= new `okhttp3.CipherSuite`[v0];
  #L229d48.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d4c.  v2:= 0I;
  #L229d4e.  v0[v2]:= v1 @kind object;
  #L229d52.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d56.  v3:= 1I;
  #L229d58.  v0[v3]:= v1 @kind object;
  #L229d5c.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d60.  v4:= 2I;
  #L229d62.  v0[v4]:= v1 @kind object;
  #L229d66.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d6a.  v5:= 3I;
  #L229d6c.  v0[v5]:= v1 @kind object;
  #L229d70.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d74.  v6:= 4I;
  #L229d76.  v0[v6]:= v1 @kind object;
  #L229d7a.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d7e.  v7:= 5I;
  #L229d80.  v0[v7]:= v1 @kind object;
  #L229d84.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d88.  v7:= 6I;
  #L229d8a.  v0[v7]:= v1 @kind object;
  #L229d8e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d92.  v7:= 7I;
  #L229d94.  v0[v7]:= v1 @kind object;
  #L229d98.  v1:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L229d9c.  v7:= 8I;
  #L229da0.  v0[v7]:= v1 @kind object;
  #L229da4.  v1:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L229da8.  v7:= 9I;
  #L229dac.  v0[v7]:= v1 @kind object;
  #L229db0.  v1:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L229db4.  v7:= 10I;
  #L229db8.  v0[v7]:= v1 @kind object;
  #L229dbc.  v1:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L229dc0.  v7:= 11I;
  #L229dc4.  v0[v7]:= v1 @kind object;
  #L229dc8.  v1:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L229dcc.  v7:= 12I;
  #L229dd0.  v0[v7]:= v1 @kind object;
  #L229dd4.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L229dd8.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L229ddc.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L229de2.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L229de6.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229dec.  v0:= temp @kind object;
  #L229dee.  v1:= new `okhttp3.TlsVersion`[v6];
  #L229df2.  v6:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L229df6.  v1[v2]:= v6 @kind object;
  #L229dfa.  v6:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L229dfe.  v1[v3]:= v6 @kind object;
  #L229e02.  v6:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L229e06.  v1[v4]:= v6 @kind object;
  #L229e0a.  v4:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L229e0e.  v1[v5]:= v4 @kind object;
  #L229e12.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229e18.  v0:= temp @kind object;
  #L229e1a.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229e20.  v0:= temp @kind object;
  #L229e22.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L229e28.  v0:= temp @kind object;
  #L229e2a.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L229e2e.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L229e32.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L229e36.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L229e3c.  v1:= new `okhttp3.TlsVersion`[v3];
  #L229e40.  v4:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L229e44.  v1[v2]:= v4 @kind object;
  #L229e48.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229e4e.  v0:= temp @kind object;
  #L229e50.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229e56.  v0:= temp @kind object;
  #L229e58.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L229e5e.  v0:= temp @kind object;
  #L229e60.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L229e64.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L229e68.  call `<init>`(v0, v2) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L229e6e.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L229e74.  v0:= temp @kind object;
  #L229e76.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L229e7a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L229e8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L229e92.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L229e96.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L229e9a.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229e9e.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L229ea2.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229ea6.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L229eaa.  v2:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229eae.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L229eb2.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `boolean` v6 ) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L229c88.  v0:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229c8c.  if v0 == 0 then goto L229caa;
  #L229c90.  v0:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L229c94.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L229c9a.  v1:= temp @kind object;
  #L229c9c.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229ca0.  call temp:= `intersect`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L229ca6.  v0:= temp @kind object;
  #L229ca8.  goto L229cb2;
  #L229caa.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L229cb0.  v0:= temp @kind object;
  #L229cb2.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229cb6.  if v1 == 0 then goto L229cd4;
  #L229cba.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L229cbe.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L229cc4.  v2:= temp @kind object;
  #L229cc6.  v3:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229cca.  call temp:= `intersect`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L229cd0.  v1:= temp @kind object;
  #L229cd2.  goto L229cdc;
  #L229cd4.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L229cda.  v1:= temp @kind object;
  #L229cdc.  call temp:= `getSupportedCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L229ce2.  v5:= temp @kind object;
  #L229ce4.  v2:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L229ce8.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L229cec.  call temp:= `indexOf`(v2, v5, v3) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L229cf2.  v2:= temp;
  #L229cf4.  if v6 == 0 then goto L229d0a;
  #L229cf8.  v6:= -1I;
  #L229cfa.  if v2 == v6 then goto L229d0a;
  #L229cfe.  v5:= v5[v2] @kind object;
  #L229d02.  call temp:= `concat`(v0, v5) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L229d08.  v0:= temp @kind object;
  #L229d0a.  v5:= new `okhttp3.ConnectionSpec$Builder`;
  #L229d0e.  call `<init>`(v5, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L229d14.  call temp:= `cipherSuites`(v5, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229d1a.  v5:= temp @kind object;
  #L229d1c.  call temp:= `tlsVersions`(v5, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L229d22.  v5:= temp @kind object;
  #L229d24.  call temp:= `build`(v5) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L229d2a.  v5:= temp @kind object;
  #L229d2c.  return v5 @kind object;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;

  #L229ec4.  call temp:= `supportedSpec`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L229eca.  v3:= temp @kind object;
  #L229ecc.  v0:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229ed0.  if v0 == 0 then goto L229eda;
  #L229ed4.  call `setEnabledProtocols`(v2, v0) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L229eda.  v3:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229ede.  if v3 == 0 then goto L229ee8;
  #L229ee2.  call `setEnabledCipherSuites`(v2, v3) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L229ee8.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229c38.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229c3c.  if v0 == 0 then goto L229c4a;
  #L229c40.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L229c46.  v0:= temp @kind object;
  #L229c48.  goto L229c4c;
  #L229c4a.  v0:= 0I;
  #L229c4c.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L229a24.  v0:= instanceof @variable v5 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L229a28.  v1:= 0I;
  #L229a2a.  if v0 != 0 then goto L229a30;
  #L229a2e.  return v1;
  #L229a30.  v0:= 1I;
  #L229a32.  if v5 != v4 then goto L229a38;
  #L229a36.  return v0;
  #L229a38.  v5:= (`okhttp3.ConnectionSpec`) v5 @kind object;
  #L229a3c.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229a40.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229a44.  if v2 == v3 then goto L229a4a;
  #L229a48.  return v1;
  #L229a4a.  if v2 == 0 then goto L229a88;
  #L229a4e.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229a52.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229a56.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L229a5c.  v2:= temp;
  #L229a5e.  if v2 != 0 then goto L229a64;
  #L229a62.  return v1;
  #L229a64.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229a68.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229a6c.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L229a72.  v2:= temp;
  #L229a74.  if v2 != 0 then goto L229a7a;
  #L229a78.  return v1;
  #L229a7a.  v2:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229a7e.  v5:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229a82.  if v2 == v5 then goto L229a88;
  #L229a86.  return v1;
  #L229a88.  return v0;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v2 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L229b38.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229b3c.  if v0 == 0 then goto L229b74;
  #L229b40.  v0:= 527I;
  #L229b44.  v1:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229b48.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L229b4e.  v1:= temp;
  #L229b50.  v0:= v0 + v1 @kind int;
  #L229b52.  v0:= v0 * 31;
  #L229b56.  v1:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229b5a.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L229b60.  v1:= temp;
  #L229b62.  v0:= v0 + v1 @kind int;
  #L229b64.  v0:= v0 * 31;
  #L229b68.  v1:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229b6c.  v1:= v1 ^~ 1;
  #L229b70.  v0:= v0 + v1 @kind int;
  #L229b72.  goto L229b78;
  #L229b74.  v0:= 17I;
  #L229b78.  return v0;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L229a9c.  v0:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229aa0.  v1:= 0I;
  #L229aa2.  if v0 != 0 then goto L229aa8;
  #L229aa6.  return v1;
  #L229aa8.  v0:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229aac.  if v0 == 0 then goto L229ace;
  #L229ab0.  v0:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L229ab4.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229ab8.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L229abe.  v3:= temp @kind object;
  #L229ac0.  call temp:= `nonEmptyIntersection`(v0, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L229ac6.  v0:= temp;
  #L229ac8.  if v0 != 0 then goto L229ace;
  #L229acc.  return v1;
  #L229ace.  v0:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229ad2.  if v0 == 0 then goto L229af4;
  #L229ad6.  v0:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L229ada.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229ade.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L229ae4.  v5:= temp @kind object;
  #L229ae6.  call temp:= `nonEmptyIntersection`(v0, v2, v5) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L229aec.  v5:= temp;
  #L229aee.  if v5 != 0 then goto L229af4;
  #L229af2.  return v1;
  #L229af4.  v5:= 1I;
  #L229af6.  return v5;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229b08.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229b0c.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229b20.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229b24.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229c60.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229c64.  if v0 == 0 then goto L229c72;
  #L229c68.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L229c6e.  v0:= temp @kind object;
  #L229c70.  goto L229c74;
  #L229c72.  v0:= 0I;
  #L229c74.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L229b8c.  v0:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L229b90.  if v0 != 0 then goto L229b9a;
  #L229b94.  v0:= "ConnectionSpec()" @kind object;
  #L229b98.  return v0 @kind object;
  #L229b9a.  v0:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L229b9e.  if v0 == 0 then goto L229bb4;
  #L229ba2.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L229ba8.  v0:= temp @kind object;
  #L229baa.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L229bb0.  v0:= temp @kind object;
  #L229bb2.  goto L229bb8;
  #L229bb4.  v0:= "[all enabled]" @kind object;
  #L229bb8.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229bbc.  if v1 == 0 then goto L229bd2;
  #L229bc0.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L229bc6.  v1:= temp @kind object;
  #L229bc8.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L229bce.  v1:= temp @kind object;
  #L229bd0.  goto L229bd6;
  #L229bd2.  v1:= "[all enabled]" @kind object;
  #L229bd6.  v2:= new `java.lang.StringBuilder`;
  #L229bda.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L229be0.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L229be4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229bea.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229bf0.  v0:= ", tlsVersions=" @kind object;
  #L229bf4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229bfa.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229c00.  v0:= ", supportsTlsExtensions=" @kind object;
  #L229c04.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229c0a.  v0:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229c0e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L229c14.  v0:= ")" @kind object;
  #L229c18.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L229c1e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L229c24.  v0:= temp @kind object;
  #L229c26.  return v0 @kind object;
}
