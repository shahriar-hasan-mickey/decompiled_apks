record `okhttp3.Response` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.ResponseBody` `okhttp3.Response.body` @AccessFlag FINAL;
  `okhttp3.CacheControl` `okhttp3.Response.cacheControl` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.Response` `okhttp3.Response.cacheResponse` @AccessFlag FINAL;
  `int` `okhttp3.Response.code` @AccessFlag FINAL;
  `okhttp3.Handshake` `okhttp3.Response.handshake` @AccessFlag FINAL;
  `okhttp3.Headers` `okhttp3.Response.headers` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.Response.message` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.networkResponse` @AccessFlag FINAL;
  `okhttp3.Response` `okhttp3.Response.priorResponse` @AccessFlag FINAL;
  `okhttp3.Protocol` `okhttp3.Response.protocol` @AccessFlag FINAL;
  `long` `okhttp3.Response.receivedResponseAtMillis` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.Response.request` @AccessFlag FINAL;
  `long` `okhttp3.Response.sentRequestAtMillis` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Response` v2 @kind this, `okhttp3.Response$Builder` v3 @kind object) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L232c38.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L232c3e.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L232c42.  v2.`okhttp3.Response.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L232c46.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L232c4a.  v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L232c4e.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L232c52.  v2.`okhttp3.Response.code` @type ^`int` := v0;
  #L232c56.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L232c5a.  v2.`okhttp3.Response.message` @type ^`java.lang.String` := v0 @kind object;
  #L232c5e.  v0:= v3.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L232c62.  v2.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L232c66.  v0:= v3.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L232c6a.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L232c70.  v0:= temp @kind object;
  #L232c72.  v2.`okhttp3.Response.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L232c76.  v0:= v3.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232c7a.  v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L232c7e.  v0:= v3.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L232c82.  v2.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232c86.  v0:= v3.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L232c8a.  v2.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232c8e.  v0:= v3.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L232c92.  v2.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L232c96.  v0:= v3.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` @kind wide;
  #L232c9a.  v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L232c9e.  v0:= v3.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L232ca2.  v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L232ca6.  return @kind void;
}
procedure `okhttp3.ResponseBody` `body`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232ba8.  v0:= v1.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232bac.  return v0 @kind object;
}
procedure `okhttp3.CacheControl` `cacheControl`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheControl:()Lokhttp3/CacheControl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232ab8.  v0:= v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` @kind object;
  #L232abc.  if v0 == 0 then goto L232ac2;
  #L232ac0.  goto L232ad2;
  #L232ac2.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L232ac6.  call temp:= `parse`(v0) @signature `Lokhttp3/CacheControl;.parse:(Lokhttp3/Headers;)Lokhttp3/CacheControl;` @kind static;
  #L232acc.  v0:= temp @kind object;
  #L232ace.  v1.`okhttp3.Response.cacheControl` @type ^`okhttp3.CacheControl` := v0 @kind object;
  #L232ad2.  return v0 @kind object;
}
procedure `okhttp3.Response` `cacheResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.cacheResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b44.  v0:= v1.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L232b48.  return v0 @kind object;
}
procedure `java.util.List` `challenges`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.challenges:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L232a1c.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L232a20.  v1:= 401I;
  #L232a24.  if v0 != v1 then goto L232a2e;
  #L232a28.  v0:= "WWW-Authenticate" @kind object;
  #L232a2c.  goto L232a3a;
  #L232a2e.  v1:= 407I;
  #L232a32.  if v0 != v1 then goto L232a4c;
  #L232a36.  v0:= "Proxy-Authenticate" @kind object;
  #L232a3a.  call temp:= `headers`(v2) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L232a40.  v1:= temp @kind object;
  #L232a42.  call temp:= `parseChallenges`(v1, v0) @signature `Lokhttp3/internal/http/HttpHeaders;.parseChallenges:(Lokhttp3/Headers;Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L232a48.  v0:= temp @kind object;
  #L232a4a.  return v0 @kind object;
  #L232a4c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L232a52.  v0:= temp @kind object;
  #L232a54.  return v0 @kind object;
}
procedure `void` `close`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L232cb8.  v0:= v2.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232cbc.  if v0 == 0 then goto L232cc8;
  #L232cc0.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L232cc6.  return @kind void;
  #L232cc8.  v0:= new `java.lang.IllegalStateException`;
  #L232ccc.  v1:= "response is not eligible for a body and must not be closed" @kind object;
  #L232cd0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L232cd6.  throw v0;
}
procedure `int` `code`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232920.  v0:= v1.`okhttp3.Response.code` @type ^`int`;
  #L232924.  return v0;
}
procedure `okhttp3.Handshake` `handshake`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.handshake:()Lokhttp3/Handshake;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232ae4.  v0:= v1.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L232ae8.  return v0 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232938.  v0:= 0I;
  #L23293a.  call temp:= `header`(v1, v2, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L232940.  v2:= temp @kind object;
  #L232942.  return v2 @kind object;
}
procedure `java.lang.String` `header`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232954.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L232958.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L23295e.  v2:= temp @kind object;
  #L232960.  if v2 == 0 then goto L232966;
  #L232964.  goto L232968;
  #L232966.  v2:= v3 @kind object;
  #L232968.  return v2 @kind object;
}
procedure `java.util.List` `headers`(`okhttp3.Response` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response;.headers:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232a68.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L232a6c.  call temp:= `values`(v0, v2) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @kind virtual;
  #L232a72.  v2:= temp @kind object;
  #L232a74.  return v2 @kind object;
}
procedure `okhttp3.Headers` `headers`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232afc.  v0:= v1.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L232b00.  return v0 @kind object;
}
procedure `boolean` `isRedirect`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.isRedirect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2328a4.  v0:= v1.`okhttp3.Response.code` @type ^`int`;
  #L2328a8.  goto L2328b8;
  #L2328ae.  v0:= 0I;
  #L2328b0.  return v0;
  #L2328b2.  v0:= 1I;
  #L2328b4.  return v0;
  #L2328b6.  
  #L2328b8.  switch v0
                  | 300 => goto L2328b2
                  | 301 => goto L2328b2
                  | 302 => goto L2328b2
                  | 303 => goto L2328b2
                  | 304 => goto L2328ae
                  | 305 => goto L2328ae
                  | 306 => goto L2328ae
                  | 307 => goto L2328b2
                  | 308 => goto L2328b2
                  | else => goto L2328ae;
}
procedure `boolean` `isSuccessful`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2328f4.  v0:= v2.`okhttp3.Response.code` @type ^`int`;
  #L2328f8.  v1:= 200I;
  #L2328fc.  if v0 < v1 then goto L23290c;
  #L232900.  v1:= 300I;
  #L232904.  if v0 >= v1 then goto L23290c;
  #L232908.  v0:= 1I;
  #L23290a.  goto L23290e;
  #L23290c.  v0:= 0I;
  #L23290e.  return v0;
}
procedure `java.lang.String` `message`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23297c.  v0:= v1.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L232980.  return v0 @kind object;
}
procedure `okhttp3.Response` `networkResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.networkResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b5c.  v0:= v1.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L232b60.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `newBuilder`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b8c.  v0:= new `okhttp3.Response$Builder`;
  #L232b90.  call `<init>`(v0, v1) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @kind direct;
  #L232b96.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `peekBody`(`okhttp3.Response` v4 @kind this, `long` v5 ) @signature `Lokhttp3/Response;.peekBody:(J)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L232bc0.  v0:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232bc4.  call temp:= `source`(v0) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L232bca.  v0:= temp @kind object;
  #L232bcc.  call temp:= `request`(v0, v5) @signature `Lokio/BufferedSource;.request:(J)Z` @kind interface;
  #L232bd2.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L232bd8.  v0:= temp @kind object;
  #L232bda.  call temp:= `clone`(v0) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L232be0.  v0:= temp @kind object;
  #L232be2.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L232be8.  v1:= temp @kind wide;
  #L232bea.  v3:= lcmp(v1, v5);
  #L232bee.  if v3 <= 0 then goto L232c0a;
  #L232bf2.  v1:= new `okio.Buffer`;
  #L232bf6.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L232bfc.  call `write`(v1, v0, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L232c02.  call `clear`(v0) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L232c08.  v0:= v1 @kind object;
  #L232c0a.  v5:= v4.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L232c0e.  call temp:= `contentType`(v5) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L232c14.  v5:= temp @kind object;
  #L232c16.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L232c1c.  v1:= temp @kind wide;
  #L232c1e.  call temp:= `create`(v5, v1, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L232c24.  v5:= temp @kind object;
  #L232c26.  return v5 @kind object;
}
procedure `okhttp3.Response` `priorResponse`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b74.  v0:= v1.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L232b78.  return v0 @kind object;
}
procedure `okhttp3.Protocol` `protocol`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.protocol:()Lokhttp3/Protocol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b14.  v0:= v1.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L232b18.  return v0 @kind object;
}
procedure `long` `receivedResponseAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.receivedResponseAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L232a88.  v0:= v2.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L232a8c.  return v0 @kind wide;
}
procedure `okhttp3.Request` `request`(`okhttp3.Response` v1 @kind this) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L232b2c.  v0:= v1.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L232b30.  return v0 @kind object;
}
procedure `long` `sentRequestAtMillis`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.sentRequestAtMillis:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L232aa0.  v0:= v2.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L232aa4.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`okhttp3.Response` v2 @kind this) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L232994.  v0:= new `java.lang.StringBuilder`;
  #L232998.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23299e.  v1:= "Response{protocol=" @kind object;
  #L2329a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329a8.  v1:= v2.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L2329ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329b2.  v1:= ", code=" @kind object;
  #L2329b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329bc.  v1:= v2.`okhttp3.Response.code` @type ^`int`;
  #L2329c0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329c6.  v1:= ", message=" @kind object;
  #L2329ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329d0.  v1:= v2.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L2329d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329da.  v1:= ", url=" @kind object;
  #L2329de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329e4.  v1:= v2.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L2329e8.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2329ee.  v1:= temp @kind object;
  #L2329f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2329f6.  v1:= 125I;
  #L2329fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L232a00.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L232a06.  v0:= temp @kind object;
  #L232a08.  return v0 @kind object;
}
