record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L2299ec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2299f2.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L2299f6.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L2299fa.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L2299fe.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L229a02.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L229a06.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L229a0a.  v2:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L229a0e.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L229a12.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2299d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2299d6.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L2299da.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2297f8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2297fc.  if v0 == 0 then goto L229808;
  #L229800.  v0:= 0I;
  #L229802.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L229806.  return v2 @kind object;
  #L229808.  v0:= new `java.lang.IllegalStateException`;
  #L22980c.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L229810.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L229816.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L229828.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L22982c.  if v0 == 0 then goto L229838;
  #L229830.  v0:= 0I;
  #L229832.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L229836.  return v2 @kind object;
  #L229838.  v0:= new `java.lang.IllegalStateException`;
  #L22983c.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L229840.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L229846.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2297dc.  v0:= new `okhttp3.ConnectionSpec`;
  #L2297e0.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L2297e6.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L229858.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L22985c.  if v0 == 0 then goto L229888;
  #L229860.  v0:= length @variable v2;
  #L229862.  if v0 == 0 then goto L229878;
  #L229866.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L22986c.  v2:= temp @kind object;
  #L22986e.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L229872.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v2 @kind object;
  #L229876.  return v1 @kind object;
  #L229878.  v2:= new `java.lang.IllegalArgumentException`;
  #L22987c.  v0:= "At least one cipher suite is required" @kind object;
  #L229880.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L229886.  throw v2;
  #L229888.  v2:= new `java.lang.IllegalStateException`;
  #L22988c.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L229890.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L229896.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.CipherSuite`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2298a8.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L2298ac.  if v0 == 0 then goto L2298da;
  #L2298b0.  v0:= length @variable v4;
  #L2298b2.  v0:= new `java.lang.String`[v0];
  #L2298b6.  v1:= 0I;
  #L2298b8.  v2:= length @variable v4;
  #L2298ba.  if v1 >= v2 then goto L2298d0;
  #L2298be.  v2:= v4[v1] @kind object;
  #L2298c2.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L2298c6.  v0[v1]:= v2 @kind object;
  #L2298ca.  v1:= v1 + 1;
  #L2298ce.  goto L2298b8;
  #L2298d0.  call temp:= `cipherSuites`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2298d6.  v4:= temp @kind object;
  #L2298d8.  return v4 @kind object;
  #L2298da.  v4:= new `java.lang.IllegalStateException`;
  #L2298de.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L2298e2.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2298e8.  throw v4;
  #L2298ea.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2298fc.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L229900.  if v0 == 0 then goto L22990a;
  #L229904.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v2 @kind boolean;
  #L229908.  return v1 @kind object;
  #L22990a.  v2:= new `java.lang.IllegalStateException`;
  #L22990e.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L229912.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L229918.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22992c.  v0:= v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L229930.  if v0 == 0 then goto L22995c;
  #L229934.  v0:= length @variable v2;
  #L229936.  if v0 == 0 then goto L22994c;
  #L22993a.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L229940.  v2:= temp @kind object;
  #L229942.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L229946.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v2 @kind object;
  #L22994a.  return v1 @kind object;
  #L22994c.  v2:= new `java.lang.IllegalArgumentException`;
  #L229950.  v0:= "At least one TLS version is required" @kind object;
  #L229954.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22995a.  throw v2;
  #L22995c.  v2:= new `java.lang.IllegalStateException`;
  #L229960.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L229964.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22996a.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.TlsVersion`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22997c.  v0:= v3.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L229980.  if v0 == 0 then goto L2299ae;
  #L229984.  v0:= length @variable v4;
  #L229986.  v0:= new `java.lang.String`[v0];
  #L22998a.  v1:= 0I;
  #L22998c.  v2:= length @variable v4;
  #L22998e.  if v1 >= v2 then goto L2299a4;
  #L229992.  v2:= v4[v1] @kind object;
  #L229996.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L22999a.  v0[v1]:= v2 @kind object;
  #L22999e.  v1:= v1 + 1;
  #L2299a2.  goto L22998c;
  #L2299a4.  call temp:= `tlsVersions`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L2299aa.  v4:= temp @kind object;
  #L2299ac.  return v4 @kind object;
  #L2299ae.  v4:= new `java.lang.IllegalStateException`;
  #L2299b2.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L2299b6.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2299bc.  throw v4;
  #L2299be.  return @kind void;
}
