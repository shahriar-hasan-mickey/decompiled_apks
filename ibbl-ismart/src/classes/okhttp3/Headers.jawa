record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v1 @kind this, `okhttp3.Headers$Builder` v2 @kind object) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L22c8c8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22c8ce.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L22c8d2.  v2:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L22c8d6.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L22c8dc.  v2:= temp;
  #L22c8de.  v2:= new `java.lang.String`[v2];
  #L22c8e2.  call temp:= `toArray`(v0, v2) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L22c8e8.  v2:= temp @kind object;
  #L22c8ea.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L22c8ee.  v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v2 @kind object;
  #L22c8f2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L22c8ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22c8b2.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L22c8b6.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L22c3b0.  v0:= length @variable v2;
  #L22c3b2.  v0:= v0 + -2;
  #L22c3b6.  if v0 < 0 then goto L22c3da;
  #L22c3ba.  v1:= v2[v0] @kind object;
  #L22c3be.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L22c3c4.  v1:= temp;
  #L22c3c6.  if v1 == 0 then goto L22c3d4;
  #L22c3ca.  v0:= v0 + 1;
  #L22c3ce.  v2:= v2[v0] @kind object;
  #L22c3d2.  return v2 @kind object;
  #L22c3d4.  v0:= v0 + -2;
  #L22c3d8.  goto L22c3b6;
  #L22c3da.  v2:= 0I;
  #L22c3dc.  return v2 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v7 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L22c74c.  if v7 == 0 then goto L22c85e;
  #L22c750.  call temp:= `size`(v7) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L22c756.  v0:= temp;
  #L22c758.  v0:= v0 * 2;
  #L22c75c.  v0:= new `java.lang.String`[v0];
  #L22c760.  call temp:= `entrySet`(v7) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L22c766.  v7:= temp @kind object;
  #L22c768.  call temp:= `iterator`(v7) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L22c76e.  v7:= temp @kind object;
  #L22c770.  v1:= 0I;
  #L22c772.  v2:= 0I;
  #L22c774.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L22c77a.  v3:= temp;
  #L22c77c.  if v3 == 0 then goto L22c852;
  #L22c780.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L22c786.  v3:= temp @kind object;
  #L22c788.  v3:= (`java.util.Map$Entry`) v3 @kind object;
  #L22c78c.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L22c792.  v4:= temp @kind object;
  #L22c794.  if v4 == 0 then goto L22c842;
  #L22c798.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L22c79e.  v4:= temp @kind object;
  #L22c7a0.  if v4 == 0 then goto L22c842;
  #L22c7a4.  call temp:= `getKey`(v3) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L22c7aa.  v4:= temp @kind object;
  #L22c7ac.  v4:= (`java.lang.String`) v4 @kind object;
  #L22c7b0.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L22c7b6.  v4:= temp @kind object;
  #L22c7b8.  call temp:= `getValue`(v3) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L22c7be.  v3:= temp @kind object;
  #L22c7c0.  v3:= (`java.lang.String`) v3 @kind object;
  #L22c7c4.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L22c7ca.  v3:= temp @kind object;
  #L22c7cc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L22c7d2.  v5:= temp;
  #L22c7d4.  if v5 == 0 then goto L22c804;
  #L22c7d8.  call temp:= `indexOf`(v4, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L22c7de.  v5:= temp;
  #L22c7e0.  v6:= -1I;
  #L22c7e2.  if v5 != v6 then goto L22c804;
  #L22c7e6.  call temp:= `indexOf`(v3, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L22c7ec.  v5:= temp;
  #L22c7ee.  if v5 != v6 then goto L22c804;
  #L22c7f2.  v0[v2]:= v4 @kind object;
  #L22c7f6.  v4:= v2 + 1;
  #L22c7fa.  v0[v4]:= v3 @kind object;
  #L22c7fe.  v2:= v2 + 2;
  #L22c802.  goto L22c774;
  #L22c804.  v7:= new `java.lang.IllegalArgumentException`;
  #L22c808.  v0:= new `java.lang.StringBuilder`;
  #L22c80c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22c812.  v1:= "Unexpected header: " @kind object;
  #L22c816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c81c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c822.  v1:= ": " @kind object;
  #L22c826.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c82c.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c832.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L22c838.  v0:= temp @kind object;
  #L22c83a.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c840.  throw v7;
  #L22c842.  v7:= new `java.lang.IllegalArgumentException`;
  #L22c846.  v0:= "Headers cannot be null" @kind object;
  #L22c84a.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c850.  throw v7;
  #L22c852.  v7:= new `okhttp3.Headers`;
  #L22c856.  call `<init>`(v7, v0) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L22c85c.  return v7 @kind object;
  #L22c85e.  v7:= new `java.lang.NullPointerException`;
  #L22c862.  v0:= "headers == null" @kind object;
  #L22c866.  call `<init>`(v7, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c86c.  throw v7;
  #L22c86e.  return @kind void;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L22c63c.  if v6 == 0 then goto L22c728;
  #L22c640.  v0:= length @variable v6;
  #L22c642.  v0:= v0 %% 2;
  #L22c646.  if v0 != 0 then goto L22c718;
  #L22c64a.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L22c650.  v6:= temp @kind object;
  #L22c652.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L22c656.  v0:= 0I;
  #L22c658.  v1:= 0I;
  #L22c65a.  v2:= length @variable v6;
  #L22c65c.  if v1 >= v2 then goto L22c68e;
  #L22c660.  v2:= v6[v1] @kind object;
  #L22c664.  if v2 == 0 then goto L22c67e;
  #L22c668.  v2:= v6[v1] @kind object;
  #L22c66c.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L22c672.  v2:= temp @kind object;
  #L22c674.  v6[v1]:= v2 @kind object;
  #L22c678.  v1:= v1 + 1;
  #L22c67c.  goto L22c65a;
  #L22c67e.  v6:= new `java.lang.IllegalArgumentException`;
  #L22c682.  v0:= "Headers cannot be null" @kind object;
  #L22c686.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c68c.  throw v6;
  #L22c68e.  v1:= 0I;
  #L22c690.  v2:= length @variable v6;
  #L22c692.  if v1 >= v2 then goto L22c70c;
  #L22c696.  v2:= v6[v1] @kind object;
  #L22c69a.  v3:= v1 + 1;
  #L22c69e.  v3:= v6[v3] @kind object;
  #L22c6a2.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L22c6a8.  v4:= temp;
  #L22c6aa.  if v4 == 0 then goto L22c6ce;
  #L22c6ae.  call temp:= `indexOf`(v2, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L22c6b4.  v4:= temp;
  #L22c6b6.  v5:= -1I;
  #L22c6b8.  if v4 != v5 then goto L22c6ce;
  #L22c6bc.  call temp:= `indexOf`(v3, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L22c6c2.  v4:= temp;
  #L22c6c4.  if v4 != v5 then goto L22c6ce;
  #L22c6c8.  v1:= v1 + 2;
  #L22c6cc.  goto L22c690;
  #L22c6ce.  v6:= new `java.lang.IllegalArgumentException`;
  #L22c6d2.  v0:= new `java.lang.StringBuilder`;
  #L22c6d6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22c6dc.  v1:= "Unexpected header: " @kind object;
  #L22c6e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c6e6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c6ec.  v1:= ": " @kind object;
  #L22c6f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c6f6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c6fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L22c702.  v0:= temp @kind object;
  #L22c704.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c70a.  throw v6;
  #L22c70c.  v0:= new `okhttp3.Headers`;
  #L22c710.  call `<init>`(v0, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L22c716.  return v0 @kind object;
  #L22c718.  v6:= new `java.lang.IllegalArgumentException`;
  #L22c71c.  v0:= "Expected alternating header names and values" @kind object;
  #L22c720.  call `<init>`(v6, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c726.  throw v6;
  #L22c728.  v6:= new `java.lang.NullPointerException`;
  #L22c72c.  v0:= "namesAndValues == null" @kind object;
  #L22c730.  call `<init>`(v6, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22c736.  throw v6;
  #L22c738.  return @kind void;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L22c5fc.  v0:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c600.  v1:= length @variable v0;
  #L22c602.  v1:= v1 * 2;
  #L22c606.  v1:= (`long`) v1 @kind i2l;
  #L22c608.  v0:= length @variable v0;
  #L22c60a.  v3:= 0I;
  #L22c60c.  if v3 >= v0 then goto L22c62a;
  #L22c610.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c614.  v4:= v4[v3] @kind object;
  #L22c618.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L22c61e.  v4:= temp;
  #L22c620.  v4:= (`long`) v4 @kind i2l;
  #L22c622.  v1:= v1 + v4 @kind long;
  #L22c624.  v3:= v3 + 1;
  #L22c628.  goto L22c60c;
  #L22c62a.  return v1 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c31c.  v0:= instanceof @variable v2 @type ^`okhttp3.Headers` @kind boolean;
  #L22c320.  if v0 == 0 then goto L22c340;
  #L22c324.  v2:= (`okhttp3.Headers`) v2 @kind object;
  #L22c328.  v2:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c32c.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c330.  call temp:= `equals`(v2, v0) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L22c336.  v2:= temp;
  #L22c338.  if v2 == 0 then goto L22c340;
  #L22c33c.  v2:= 1I;
  #L22c33e.  goto L22c342;
  #L22c340.  v2:= 0I;
  #L22c342.  return v2;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c390.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c394.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L22c39a.  v2:= temp @kind object;
  #L22c39c.  return v2 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;

  #L22c49c.  call temp:= `get`(v0, v1) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L22c4a2.  v1:= temp @kind object;
  #L22c4a4.  if v1 == 0 then goto L22c4b2;
  #L22c4a8.  call temp:= `parse`(v1) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L22c4ae.  v1:= temp @kind object;
  #L22c4b0.  goto L22c4b4;
  #L22c4b2.  v1:= 0I;
  #L22c4b4.  return v1 @kind object;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c354.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c358.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L22c35e.  v0:= temp;
  #L22c360.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c3f0.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c3f4.  v2:= v2 * 2;
  #L22c3f8.  v2:= v0[v2] @kind object;
  #L22c3fc.  return v2 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22c5b0.  v0:= new `java.util.TreeSet`;
  #L22c5b4.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L22c5b8.  call `<init>`(v0, v1) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L22c5be.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L22c5c4.  v1:= temp;
  #L22c5c6.  v2:= 0I;
  #L22c5c8.  if v2 >= v1 then goto L22c5e0;
  #L22c5cc.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L22c5d2.  v3:= temp @kind object;
  #L22c5d4.  call temp:= `add`(v0, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L22c5da.  v2:= v2 + 1;
  #L22c5de.  goto L22c5c8;
  #L22c5e0.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L22c5e6.  v0:= temp @kind object;
  #L22c5e8.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22c880.  v0:= new `okhttp3.Headers$Builder`;
  #L22c884.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L22c88a.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L22c88e.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c892.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L22c898.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c374.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c378.  v0:= length @variable v0;
  #L22c37a.  v0:= v0 / 2;
  #L22c37e.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L22c538.  v0:= new `java.util.TreeMap`;
  #L22c53c.  v1:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L22c540.  call `<init>`(v0, v1) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L22c546.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L22c54c.  v1:= temp;
  #L22c54e.  v2:= 0I;
  #L22c550.  if v2 >= v1 then goto L22c59e;
  #L22c554.  call temp:= `name`(v6, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L22c55a.  v3:= temp @kind object;
  #L22c55c.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L22c560.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L22c566.  v3:= temp @kind object;
  #L22c568.  call temp:= `get`(v0, v3) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22c56e.  v4:= temp @kind object;
  #L22c570.  v4:= (`java.util.List`) v4 @kind object;
  #L22c574.  if v4 != 0 then goto L22c58a;
  #L22c578.  v4:= new `java.util.ArrayList`;
  #L22c57c.  v5:= 2I;
  #L22c57e.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L22c584.  call temp:= `put`(v0, v3, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L22c58a.  call temp:= `value`(v6, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L22c590.  v3:= temp @kind object;
  #L22c592.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22c598.  v2:= v2 + 1;
  #L22c59c.  goto L22c550;
  #L22c59e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22c410.  v0:= new `java.lang.StringBuilder`;
  #L22c414.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L22c41a.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L22c420.  v1:= temp;
  #L22c422.  v2:= 0I;
  #L22c424.  if v2 >= v1 then goto L22c45e;
  #L22c428.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L22c42e.  v3:= temp @kind object;
  #L22c430.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c436.  v3:= ": " @kind object;
  #L22c43a.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c440.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L22c446.  v3:= temp @kind object;
  #L22c448.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c44e.  v3:= "\n" @kind object;
  #L22c452.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L22c458.  v2:= v2 + 1;
  #L22c45c.  goto L22c424;
  #L22c45e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L22c464.  v0:= temp @kind object;
  #L22c466.  return v0 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v1 @kind this, `int` v2 ) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22c478.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L22c47c.  v2:= v2 * 2;
  #L22c480.  v2:= v2 + 1;
  #L22c484.  v2:= v0[v2] @kind object;
  #L22c488.  return v2 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22c4c8.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L22c4ce.  v0:= temp;
  #L22c4d0.  v1:= 0I;
  #L22c4d2.  v2:= 0I;
  #L22c4d4.  if v2 >= v0 then goto L22c510;
  #L22c4d8.  call temp:= `name`(v4, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L22c4de.  v3:= temp @kind object;
  #L22c4e0.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L22c4e6.  v3:= temp;
  #L22c4e8.  if v3 == 0 then goto L22c50a;
  #L22c4ec.  if v1 != 0 then goto L22c4fc;
  #L22c4f0.  v1:= new `java.util.ArrayList`;
  #L22c4f4.  v3:= 2I;
  #L22c4f6.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L22c4fc.  call temp:= `value`(v4, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L22c502.  v3:= temp @kind object;
  #L22c504.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L22c50a.  v2:= v2 + 1;
  #L22c50e.  goto L22c4d4;
  #L22c510.  if v1 == 0 then goto L22c51e;
  #L22c514.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L22c51a.  v5:= temp @kind object;
  #L22c51c.  goto L22c526;
  #L22c51e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L22c524.  v5:= temp @kind object;
  #L22c526.  return v5 @kind object;
}
