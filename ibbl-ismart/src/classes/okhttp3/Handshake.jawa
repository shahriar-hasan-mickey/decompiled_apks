record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L22bf2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L22bf32.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L22bf36.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L22bf3a.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L22bf3e.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L22bf42.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L22be0c.  call temp:= `getCipherSuite`(v4) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L22be12.  v0:= temp @kind object;
  #L22be14.  if v0 == 0 then goto L22be90;
  #L22be18.  call temp:= `forJavaName`(v0) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L22be1e.  v0:= temp @kind object;
  #L22be20.  call temp:= `getProtocol`(v4) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L22be26.  v1:= temp @kind object;
  #L22be28.  if v1 == 0 then goto L22be80;
  #L22be2c.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L22be32.  v1:= temp @kind object;
  #L22be34.  call temp:= `getPeerCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L22be3a.  v2:= temp @kind object;
  #L22be3c.  goto L22be40;
  #L22be3e.  v2:= 0I;
  #L22be40.  if v2 == 0 then goto L22be4e;
  #L22be44.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L22be4a.  v2:= temp @kind object;
  #L22be4c.  goto L22be56;
  #L22be4e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L22be54.  v2:= temp @kind object;
  #L22be56.  call temp:= `getLocalCertificates`(v4) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L22be5c.  v4:= temp @kind object;
  #L22be5e.  if v4 == 0 then goto L22be6c;
  #L22be62.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L22be68.  v4:= temp @kind object;
  #L22be6a.  goto L22be74;
  #L22be6c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L22be72.  v4:= temp @kind object;
  #L22be74.  v3:= new `okhttp3.Handshake`;
  #L22be78.  call `<init>`(v3, v1, v0, v2, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L22be7e.  return v3 @kind object;
  #L22be80.  v4:= new `java.lang.IllegalStateException`;
  #L22be84.  v0:= "tlsVersion == null" @kind object;
  #L22be88.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22be8e.  throw v4;
  #L22be90.  v4:= new `java.lang.IllegalStateException`;
  #L22be94.  v0:= "cipherSuite == null" @kind object;
  #L22be98.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22be9e.  throw v4;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[L22be34..L22be3c] goto L22be3e;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v1 @kind object, `okhttp3.CipherSuite` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L22bec0.  if v1 == 0 then goto L22bef4;
  #L22bec4.  if v2 == 0 then goto L22bee4;
  #L22bec8.  v0:= new `okhttp3.Handshake`;
  #L22becc.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L22bed2.  v3:= temp @kind object;
  #L22bed4.  call temp:= `immutableList`(v4) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L22beda.  v4:= temp @kind object;
  #L22bedc.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L22bee2.  return v0 @kind object;
  #L22bee4.  v1:= new `java.lang.NullPointerException`;
  #L22bee8.  v2:= "cipherSuite == null" @kind object;
  #L22beec.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22bef2.  throw v1;
  #L22bef4.  v1:= new `java.lang.NullPointerException`;
  #L22bef8.  v2:= "tlsVersion == null" @kind object;
  #L22befc.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L22bf02.  throw v1;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22bdf4.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L22bdf8.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22bc74.  v0:= instanceof @variable v4 @type ^`okhttp3.Handshake` @kind boolean;
  #L22bc78.  v1:= 0I;
  #L22bc7a.  if v0 != 0 then goto L22bc80;
  #L22bc7e.  return v1;
  #L22bc80.  v4:= (`okhttp3.Handshake`) v4 @kind object;
  #L22bc84.  v0:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L22bc88.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L22bc8c.  call temp:= `equals`(v0, v2) @signature `Lokhttp3/TlsVersion;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22bc92.  v0:= temp;
  #L22bc94.  if v0 == 0 then goto L22bcd6;
  #L22bc98.  v0:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L22bc9c.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L22bca0.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L22bca6.  v0:= temp;
  #L22bca8.  if v0 == 0 then goto L22bcd6;
  #L22bcac.  v0:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bcb0.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bcb4.  call temp:= `equals`(v0, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L22bcba.  v0:= temp;
  #L22bcbc.  if v0 == 0 then goto L22bcd6;
  #L22bcc0.  v0:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bcc4.  v4:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bcc8.  call temp:= `equals`(v0, v4) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L22bcce.  v4:= temp;
  #L22bcd0.  if v4 == 0 then goto L22bcd6;
  #L22bcd4.  v1:= 1I;
  #L22bcd6.  return v1;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22bce8.  v0:= v2.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L22bcec.  call temp:= `hashCode`(v0) @signature `Lokhttp3/TlsVersion;.hashCode:()I` @kind virtual;
  #L22bcf2.  v0:= temp;
  #L22bcf4.  v1:= 527I;
  #L22bcf8.  v1:= v1 + v0 @kind int;
  #L22bcfa.  v1:= v1 * 31;
  #L22bcfe.  v0:= v2.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L22bd02.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L22bd08.  v0:= temp;
  #L22bd0a.  v1:= v1 + v0 @kind int;
  #L22bd0c.  v1:= v1 * 31;
  #L22bd10.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bd14.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L22bd1a.  v0:= temp;
  #L22bd1c.  v1:= v1 + v0 @kind int;
  #L22bd1e.  v1:= v1 * 31;
  #L22bd22.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bd26.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L22bd2c.  v0:= temp;
  #L22bd2e.  v1:= v1 + v0 @kind int;
  #L22bd30.  return v1;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22bdc4.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bdc8.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22bd44.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bd48.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L22bd4e.  v0:= temp;
  #L22bd50.  if v0 != 0 then goto L22bd70;
  #L22bd54.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L22bd58.  v1:= 0I;
  #L22bd5a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22bd60.  v0:= temp @kind object;
  #L22bd62.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L22bd66.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L22bd6c.  v0:= temp @kind object;
  #L22bd6e.  goto L22bd72;
  #L22bd70.  v0:= 0I;
  #L22bd72.  return v0 @kind object;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22bddc.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bde0.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22bd84.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bd88.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L22bd8e.  v0:= temp;
  #L22bd90.  if v0 != 0 then goto L22bdb0;
  #L22bd94.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L22bd98.  v1:= 0I;
  #L22bd9a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L22bda0.  v0:= temp @kind object;
  #L22bda2.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L22bda6.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L22bdac.  v0:= temp @kind object;
  #L22bdae.  goto L22bdb2;
  #L22bdb0.  v0:= 0I;
  #L22bdb2.  return v0 @kind object;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22bf14.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L22bf18.  return v0 @kind object;
}
