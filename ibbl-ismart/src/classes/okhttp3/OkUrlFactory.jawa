record `okhttp3.OkUrlFactory` @kind class @AccessFlag PUBLIC_FINAL extends `java.net.URLStreamHandlerFactory` @kind interface, `java.lang.Cloneable` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.OkUrlFactory.client` @AccessFlag PRIVATE;
  `okhttp3.internal.URLFilter` `okhttp3.OkUrlFactory.urlFilter` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.OkUrlFactory` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object) @signature `Lokhttp3/OkUrlFactory;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L230e88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L230e8e.  v0.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L230e92.  return @kind void;
}
procedure `okhttp3.OkHttpClient` `client`(`okhttp3.OkUrlFactory` v1 @kind this) @signature `Lokhttp3/OkUrlFactory;.client:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230e38.  v0:= v1.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L230e3c.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`okhttp3.OkUrlFactory` v1 @kind this) @signature `Lokhttp3/OkUrlFactory;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L230d10.  call temp:= `clone`(v1) @signature `Lokhttp3/OkUrlFactory;.clone:()Lokhttp3/OkUrlFactory;` @kind virtual;
  #L230d16.  v0:= temp @kind object;
  #L230d18.  return v0 @kind object;
}
procedure `okhttp3.OkUrlFactory` `clone`(`okhttp3.OkUrlFactory` v2 @kind this) @signature `Lokhttp3/OkUrlFactory;.clone:()Lokhttp3/OkUrlFactory;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L230e50.  v0:= new `okhttp3.OkUrlFactory`;
  #L230e54.  v1:= v2.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L230e58.  call `<init>`(v0, v1) @signature `Lokhttp3/OkUrlFactory;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L230e5e.  return v0 @kind object;
}
procedure `java.net.URLStreamHandler` `createURLStreamHandler`(`okhttp3.OkUrlFactory` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/OkUrlFactory;.createURLStreamHandler:(Ljava/lang/String;)Ljava/net/URLStreamHandler;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230df8.  v0:= "http" @kind object;
  #L230dfc.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230e02.  v0:= temp;
  #L230e04.  if v0 != 0 then goto L230e1c;
  #L230e08.  v0:= "https" @kind object;
  #L230e0c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230e12.  v0:= temp;
  #L230e14.  if v0 != 0 then goto L230e1c;
  #L230e18.  v2:= 0I;
  #L230e1a.  return v2 @kind object;
  #L230e1c.  v0:= new `okhttp3.OkUrlFactory$1`;
  #L230e20.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/OkUrlFactory$1;.<init>:(Lokhttp3/OkUrlFactory;Ljava/lang/String;)V` @kind direct;
  #L230e26.  return v0 @kind object;
}
procedure `java.net.HttpURLConnection` `open`(`okhttp3.OkUrlFactory` v1 @kind this, `java.net.URL` v2 @kind object) @signature `Lokhttp3/OkUrlFactory;.open:(Ljava/net/URL;)Ljava/net/HttpURLConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L230d2c.  v0:= v1.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L230d30.  call temp:= `proxy`(v0) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L230d36.  v0:= temp @kind object;
  #L230d38.  call temp:= `open`(v1, v2, v0) @signature `Lokhttp3/OkUrlFactory;.open:(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/HttpURLConnection;` @kind virtual;
  #L230d3e.  v2:= temp @kind object;
  #L230d40.  return v2 @kind object;
}
procedure `java.net.HttpURLConnection` `open`(`okhttp3.OkUrlFactory` v2 @kind this, `java.net.URL` v3 @kind object, `java.net.Proxy` v4 @kind object) @signature `Lokhttp3/OkUrlFactory;.open:(Ljava/net/URL;Ljava/net/Proxy;)Ljava/net/HttpURLConnection;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L230d54.  call temp:= `getProtocol`(v3) @signature `Ljava/net/URL;.getProtocol:()Ljava/lang/String;` @kind virtual;
  #L230d5a.  v0:= temp @kind object;
  #L230d5c.  v1:= v2.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L230d60.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/OkHttpClient;.newBuilder:()Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L230d66.  v1:= temp @kind object;
  #L230d68.  call temp:= `proxy`(v1, v4) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @kind virtual;
  #L230d6e.  v4:= temp @kind object;
  #L230d70.  call temp:= `build`(v4) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @kind virtual;
  #L230d76.  v4:= temp @kind object;
  #L230d78.  v1:= "http" @kind object;
  #L230d7c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230d82.  v1:= temp;
  #L230d84.  if v1 == 0 then goto L230d98;
  #L230d88.  v0:= new `okhttp3.internal.huc.OkHttpURLConnection`;
  #L230d8c.  v1:= v2.`okhttp3.OkUrlFactory.urlFilter` @type ^`okhttp3.internal.URLFilter` @kind object;
  #L230d90.  call `<init>`(v0, v3, v4, v1) @signature `Lokhttp3/internal/huc/OkHttpURLConnection;.<init>:(Ljava/net/URL;Lokhttp3/OkHttpClient;Lokhttp3/internal/URLFilter;)V` @kind direct;
  #L230d96.  return v0 @kind object;
  #L230d98.  v1:= "https" @kind object;
  #L230d9c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L230da2.  v1:= temp;
  #L230da4.  if v1 == 0 then goto L230db8;
  #L230da8.  v0:= new `okhttp3.internal.huc.OkHttpsURLConnection`;
  #L230dac.  v1:= v2.`okhttp3.OkUrlFactory.urlFilter` @type ^`okhttp3.internal.URLFilter` @kind object;
  #L230db0.  call `<init>`(v0, v3, v4, v1) @signature `Lokhttp3/internal/huc/OkHttpsURLConnection;.<init>:(Ljava/net/URL;Lokhttp3/OkHttpClient;Lokhttp3/internal/URLFilter;)V` @kind direct;
  #L230db6.  return v0 @kind object;
  #L230db8.  v3:= new `java.lang.IllegalArgumentException`;
  #L230dbc.  v4:= new `java.lang.StringBuilder`;
  #L230dc0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L230dc6.  v1:= "Unexpected protocol: " @kind object;
  #L230dca.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230dd0.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L230dd6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L230ddc.  v4:= temp @kind object;
  #L230dde.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L230de4.  throw v3;
}
procedure `okhttp3.OkUrlFactory` `setClient`(`okhttp3.OkUrlFactory` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object) @signature `Lokhttp3/OkUrlFactory;.setClient:(Lokhttp3/OkHttpClient;)Lokhttp3/OkUrlFactory;` @AccessFlag PUBLIC {
    temp;

  #L230e70.  v0.`okhttp3.OkUrlFactory.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L230e74.  return v0 @kind object;
}
procedure `void` `setUrlFilter`(`okhttp3.OkUrlFactory` v0 @kind this, `okhttp3.internal.URLFilter` v1 @kind object) @signature `Lokhttp3/OkUrlFactory;.setUrlFilter:(Lokhttp3/internal/URLFilter;)V` @AccessFlag  {
    temp;

  #L230ea4.  v0.`okhttp3.OkUrlFactory.urlFilter` @type ^`okhttp3.internal.URLFilter` := v1 @kind object;
  #L230ea8.  return @kind void;
}
