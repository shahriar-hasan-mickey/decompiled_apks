record `okhttp3.Interceptor$Chain` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `okhttp3.Call` `call`() @signature `Lokhttp3/Interceptor$Chain;.call:()Lokhttp3/Call;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `connectTimeoutMillis`() @signature `Lokhttp3/Interceptor$Chain;.connectTimeoutMillis:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Connection` `connection`() @signature `Lokhttp3/Interceptor$Chain;.connection:()Lokhttp3/Connection;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Response` `proceed`(`okhttp3.Request` v0 @kind object) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `readTimeoutMillis`() @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Request` `request`() @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Interceptor$Chain` `withConnectTimeout`(`int` v0 , `java.util.concurrent.TimeUnit` v1 @kind object) @signature `Lokhttp3/Interceptor$Chain;.withConnectTimeout:(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Interceptor$Chain` `withReadTimeout`(`int` v0 , `java.util.concurrent.TimeUnit` v1 @kind object) @signature `Lokhttp3/Interceptor$Chain;.withReadTimeout:(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `okhttp3.Interceptor$Chain` `withWriteTimeout`(`int` v0 , `java.util.concurrent.TimeUnit` v1 @kind object) @signature `Lokhttp3/Interceptor$Chain;.withWriteTimeout:(ILjava/util/concurrent/TimeUnit;)Lokhttp3/Interceptor$Chain;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `writeTimeoutMillis`() @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
