record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L231628.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L23162e.  v0.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L231632.  v0.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v2 @kind object;
  #L231636.  v0.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v3 @kind boolean;
  #L23163a.  v2:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L23163e.  call `<init>`(v2, v1, v3) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L231644.  v0.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v2 @kind object;
  #L231648.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v0 @kind object) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L23139c.  v0:= v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2313a0.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L231678.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L23167e.  v0:= temp @kind object;
  #L231680.  v1:= "response.body().close()" @kind object;
  #L231684.  call temp:= `getStackTraceForCloseable`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L23168a.  v0:= temp @kind object;
  #L23168c.  v1:= v2.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L231690.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L231696.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;

  #L2313dc.  v0:= new `okhttp3.RealCall`;
  #L2313e0.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2313e6.  call temp:= `eventListenerFactory`(v1) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L2313ec.  v1:= temp @kind object;
  #L2313ee.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L2313f4.  v1:= temp @kind object;
  #L2313f6.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L2313fa.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23165c.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L231660.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L231666.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2312cc.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L2312d2.  v0:= temp @kind object;
  #L2312d4.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L231380.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L231386.  v0:= temp @kind object;
  #L231388.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2313b4.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2313b8.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2313bc.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2313c0.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L2313c6.  v0:= temp @kind object;
  #L2313c8.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2316a8.  @monitorenter v2
  #L2316aa.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2316ae.  if v0 != 0 then goto L2316e8;
  #L2316b2.  v0:= 1I;
  #L2316b4.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2316b8.  @monitorexit v2
  #L2316ba.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L2316c0.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2316c4.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2316ca.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2316ce.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2316d4.  v0:= temp @kind object;
  #L2316d6.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2316da.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2316e0.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2316e6.  return @kind void;
  #L2316e8.  v3:= new `java.lang.IllegalStateException`;
  #L2316ec.  v0:= "Already Executed" @kind object;
  #L2316f0.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2316f6.  throw v3;
  #L2316f8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2316fa.  @monitorexit v2
  #L2316fc.  throw v3;
  catch `java.lang.Throwable` @[L2316aa..L2316ba] goto L2316f8;
  catch `java.lang.Throwable` @[L2316e8..L2316fc] goto L2316f8;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L231424.  @monitorenter v2
  #L231426.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L23142a.  if v0 != 0 then goto L2314ae;
  #L23142e.  v0:= 1I;
  #L231430.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L231434.  @monitorexit v2
  #L231436.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L23143c.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L231440.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L231446.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23144a.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L231450.  v0:= temp @kind object;
  #L231452.  call `executed`(v0, v2) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L231458.  call temp:= `getResponseWithInterceptorChain`(v2) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L23145e.  v0:= temp @kind object;
  #L231460.  if v0 == 0 then goto L231478;
  #L231464.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L231468.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L23146e.  v1:= temp @kind object;
  #L231470.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L231476.  return v0 @kind object;
  #L231478.  v0:= new `java.io.IOException`;
  #L23147c.  v1:= "Canceled" @kind object;
  #L231480.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L231486.  throw v0;
  #L231488.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L23148a.  goto L23149a;
  #L23148c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L23148e.  v1:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L231492.  call `callFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L231498.  throw v0;
  #L23149a.  v1:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23149e.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2314a4.  v1:= temp @kind object;
  #L2314a6.  call `finished`(v1, v2) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2314ac.  throw v0;
  #L2314ae.  v0:= new `java.lang.IllegalStateException`;
  #L2314b2.  v1:= "Already Executed" @kind object;
  #L2314b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2314bc.  throw v0;
  #L2314be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2314c0.  @monitorexit v2
  #L2314c2.  throw v0;
  catch `java.lang.Throwable` @[L231426..L231436] goto L2314be;
  catch `java.io.IOException` @[L231446..L231460] goto L23148c;
  catch `java.lang.Throwable` @[L231446..L231460] goto L231488;
  catch `java.io.IOException` @[L231478..L231488] goto L23148c;
  catch `java.lang.Throwable` @[L231478..L231488] goto L231488;
  catch `java.lang.Throwable` @[L23148e..L23149a] goto L231488;
  catch `java.lang.Throwable` @[L2314ae..L2314c2] goto L2314be;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v13 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L231508.  v1:= new `java.util.ArrayList`;
  #L23150c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L231512.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L231516.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L23151c.  v0:= temp @kind object;
  #L23151e.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L231524.  v0:= v13.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L231528.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23152e.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L231532.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L231536.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L23153c.  v2:= temp @kind object;
  #L23153e.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L231544.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23154a.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L23154e.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L231552.  call temp:= `internalCache`(v2) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L231558.  v2:= temp @kind object;
  #L23155a.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L231560.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L231566.  v0:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L23156a.  v2:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L23156e.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L231574.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L23157a.  v0:= v13.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L23157e.  if v0 != 0 then goto L231594;
  #L231582.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L231586.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L23158c.  v0:= temp @kind object;
  #L23158e.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L231594.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L231598.  v2:= v13.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L23159c.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L2315a2.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2315a8.  v12:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L2315ac.  v2:= 0I;
  #L2315ae.  v3:= 0I;
  #L2315b0.  v4:= 0I;
  #L2315b2.  v5:= 0I;
  #L2315b4.  v6:= v13.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2315b8.  v8:= v13.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2315bc.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2315c0.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L2315c6.  v9:= temp;
  #L2315c8.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2315cc.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2315d2.  v10:= temp;
  #L2315d4.  v0:= v13.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2315d8.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L2315de.  v11:= temp;
  #L2315e0.  v0:= v12 @kind object;
  #L2315e2.  v7:= v13 @kind object;
  #L2315e4.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L2315ea.  v0:= v13.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2315ee.  call temp:= `proceed`(v12, v0) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2315f4.  v0:= temp @kind object;
  #L2315f6.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L231280.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L231284.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L23128a.  v0:= temp;
  #L23128c.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2312a0.  @monitorenter v1
  #L2312a2.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2312a6.  @monitorexit v1
  #L2312a8.  return v0;
  #L2312aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2312ac.  @monitorexit v1
  #L2312ae.  throw v0;
  catch `java.lang.Throwable` @[L2312a2..L2312a6] goto L2312aa;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L2312e8.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2312ec.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2312f2.  v0:= temp @kind object;
  #L2312f4.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L2312fa.  v0:= temp @kind object;
  #L2312fc.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L23140c.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L231410.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L231608.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L23160c.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L231612.  v0:= temp @kind object;
  #L231614.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L231310.  v0:= new `java.lang.StringBuilder`;
  #L231314.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L23131a.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L231320.  v1:= temp;
  #L231322.  if v1 == 0 then goto L23132c;
  #L231326.  v1:= "canceled " @kind object;
  #L23132a.  goto L231330;
  #L23132c.  v1:= "" @kind object;
  #L231330.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L231336.  v1:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L23133a.  if v1 == 0 then goto L231344;
  #L23133e.  v1:= "web socket" @kind object;
  #L231342.  goto L231348;
  #L231344.  v1:= "call" @kind object;
  #L231348.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L23134e.  v1:= " to " @kind object;
  #L231352.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L231358.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L23135e.  v1:= temp @kind object;
  #L231360.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L231366.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L23136c.  v0:= temp @kind object;
  #L23136e.  return v0 @kind object;
}
