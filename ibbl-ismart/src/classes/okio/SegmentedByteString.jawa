record `okio.SegmentedByteString` @kind class @AccessFlag FINAL extends `okio.ByteString` @kind class {
  `int`[] `okio.SegmentedByteString.directory` @AccessFlag FINAL_TRANSIENT;
  `byte`[][] `okio.SegmentedByteString.segments` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v7 @kind this, `okio.Buffer` v8 @kind object, `int` v9 ) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25487c.  v0:= 0I;
  #L25487e.  call `<init>`(v7, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L254884.  v1:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L254888.  v5:= (`long`) v9 @kind i2l;
  #L25488a.  v3:= 0L;
  #L25488e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L254894.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L254898.  v1:= 0I;
  #L25489a.  v3:= v0 @kind object;
  #L25489c.  v0:= 0I;
  #L25489e.  v2:= 0I;
  #L2548a0.  if v0 >= v9 then goto L2548d6;
  #L2548a4.  v4:= v3.`okio.Segment.limit` @type ^`int`;
  #L2548a8.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L2548ac.  if v4 == v5 then goto L2548c6;
  #L2548b0.  v4:= v3.`okio.Segment.limit` @type ^`int`;
  #L2548b4.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L2548b8.  v4:= v4 - v5 @kind int;
  #L2548ba.  v0:= v0 + v4 @kind int;
  #L2548bc.  v2:= v2 + 1;
  #L2548c0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2548c4.  goto L2548a0;
  #L2548c6.  v8:= new `java.lang.AssertionError`;
  #L2548ca.  v9:= "s.limit == s.pos" @kind object;
  #L2548ce.  call `<init>`(v8, v9) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2548d4.  throw v8;
  #L2548d6.  v0:= new `byte`[][v2];
  #L2548da.  v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] := v0 @kind object;
  #L2548de.  v2:= v2 * 2;
  #L2548e2.  v0:= new `int`[v2];
  #L2548e6.  v7.`okio.SegmentedByteString.directory` @type ^`int`[] := v0 @kind object;
  #L2548ea.  v8:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2548ee.  v0:= v8 @kind object;
  #L2548f0.  v8:= 0I;
  #L2548f2.  if v1 >= v9 then goto L25493c;
  #L2548f6.  v2:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2548fa.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2548fe.  v2[v8]:= v3 @kind object;
  #L254902.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L254906.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L25490a.  v2:= v2 - v3 @kind int;
  #L25490c.  v1:= v1 + v2 @kind int;
  #L25490e.  if v1 <= v9 then goto L254914;
  #L254912.  v1:= v9;
  #L254914.  v2:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254918.  v2[v8]:= v1;
  #L25491c.  v3:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254920.  v3:= length @variable v3;
  #L254922.  v3:= v3 + v8 @kind int;
  #L254924.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L254928.  v2[v3]:= v4;
  #L25492c.  v2:= 1I;
  #L25492e.  v0.`okio.Segment.shared` @type ^`boolean` := v2 @kind boolean;
  #L254932.  v8:= v8 + 1;
  #L254936.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L25493a.  goto L2548f2;
  #L25493c.  return @kind void;
}
procedure `int` `segment`(`okio.SegmentedByteString` v3 @kind this, `int` v4 ) @signature `Lokio/SegmentedByteString;.segment:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L25459c.  v0:= v3.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2545a0.  v1:= v3.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2545a4.  v1:= length @variable v1;
  #L2545a6.  v4:= v4 + 1;
  #L2545aa.  v2:= 0I;
  #L2545ac.  call temp:= `binarySearch`(v0, v2, v1, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L2545b2.  v4:= temp;
  #L2545b4.  if v4 < 0 then goto L2545ba;
  #L2545b8.  goto L2545be;
  #L2545ba.  v4:= v4 ^~ -1;
  #L2545be.  return v4;
}
procedure `okio.ByteString` `toByteString`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L254858.  v0:= new `okio.ByteString`;
  #L25485c.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L254862.  v1:= temp @kind object;
  #L254864.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L25486a.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2545f4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2545fa.  v0:= temp @kind object;
  #L2545fc.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2546e8.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L2546ee.  v0:= temp @kind object;
  #L2546f0.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L2546f6.  v0:= temp @kind object;
  #L2546f8.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L2546fe.  v0:= temp @kind object;
  #L254700.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254610.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L254616.  v0:= temp @kind object;
  #L254618.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L25461e.  v0:= temp @kind object;
  #L254620.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254634.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25463a.  v0:= temp @kind object;
  #L25463c.  call temp:= `base64Url`(v0) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @kind virtual;
  #L254642.  v0:= temp @kind object;
  #L254644.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L254274.  v0:= 1I;
  #L254276.  if v5 != v4 then goto L25427c;
  #L25427a.  return v0;
  #L25427c.  v1:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L254280.  v2:= 0I;
  #L254282.  if v1 == 0 then goto L2542b4;
  #L254286.  v5:= (`okio.ByteString`) v5 @kind object;
  #L25428a.  call temp:= `size`(v5) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L254290.  v1:= temp;
  #L254292.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L254298.  v3:= temp;
  #L25429a.  if v1 != v3 then goto L2542b4;
  #L25429e.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2542a4.  v1:= temp;
  #L2542a6.  call temp:= `rangeEquals`(v4, v2, v5, v2, v1) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L2542ac.  v5:= temp;
  #L2542ae.  if v5 == 0 then goto L2542b4;
  #L2542b2.  goto L2542b6;
  #L2542b4.  v0:= 0I;
  #L2542b6.  return v0;
}
procedure `byte` `getByte`(`okio.SegmentedByteString` v7 @kind this, `int` v8 ) @signature `Lokio/SegmentedByteString;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L254404.  v0:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254408.  v1:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L25440c.  v1:= length @variable v1;
  #L25440e.  v1:= v1 + -1;
  #L254412.  v0:= v0[v1];
  #L254416.  v1:= (`long`) v0 @kind i2l;
  #L254418.  v3:= (`long`) v8 @kind i2l;
  #L25441a.  v5:= 1L;
  #L25441e.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L254424.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L25442a.  v0:= temp;
  #L25442c.  if v0 != 0 then goto L254434;
  #L254430.  v1:= 0I;
  #L254432.  goto L254440;
  #L254434.  v1:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254438.  v2:= v0 + -1;
  #L25443c.  v1:= v1[v2];
  #L254440.  v2:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254444.  v3:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254448.  v4:= length @variable v3;
  #L25444a.  v4:= v4 + v0 @kind int;
  #L25444c.  v2:= v2[v4];
  #L254450.  v0:= v3[v0] @kind object;
  #L254454.  v8:= v8 - v1 @kind int;
  #L254456.  v8:= v8 + v2 @kind int;
  #L254458.  v8:= v0[v8] @kind byte;
  #L25445c.  return v8;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2544e8.  v0:= v8.`okio.SegmentedByteString.hashCode` @type ^`int`;
  #L2544ec.  if v0 == 0 then goto L2544f2;
  #L2544f0.  return v0;
  #L2544f2.  v0:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2544f6.  v0:= length @variable v0;
  #L2544f8.  v1:= 0I;
  #L2544fa.  v2:= 1I;
  #L2544fc.  v3:= 0I;
  #L2544fe.  if v1 >= v0 then goto L25453c;
  #L254502.  v4:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254506.  v4:= v4[v1] @kind object;
  #L25450a.  v5:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L25450e.  v6:= v0 + v1 @kind int;
  #L254512.  v6:= v5[v6];
  #L254516.  v5:= v5[v1];
  #L25451a.  v3:= v5 - v3 @kind int;
  #L25451e.  v3:= v3 + v6 @kind int;
  #L254520.  if v6 >= v3 then goto L254534;
  #L254524.  v2:= v2 * 31;
  #L254528.  v7:= v4[v6] @kind byte;
  #L25452c.  v2:= v2 + v7 @kind int;
  #L25452e.  v6:= v6 + 1;
  #L254532.  goto L254520;
  #L254534.  v1:= v1 + 1;
  #L254538.  v3:= v5;
  #L25453a.  goto L2544fe;
  #L25453c.  v8.`okio.SegmentedByteString.hashCode` @type ^`int` := v2;
  #L254540.  return v2;
}
procedure `java.lang.String` `hex`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254658.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25465e.  v0:= temp @kind object;
  #L254660.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L254666.  v0:= temp @kind object;
  #L254668.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha1`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/SegmentedByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254714.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25471a.  v0:= temp @kind object;
  #L25471c.  call temp:= `hmacSha1`(v0, v2) @signature `Lokio/ByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L254722.  v2:= temp @kind object;
  #L254724.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/SegmentedByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254738.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25473e.  v0:= temp @kind object;
  #L254740.  call temp:= `hmacSha256`(v0, v2) @signature `Lokio/ByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L254746.  v2:= temp @kind object;
  #L254748.  return v2 @kind object;
}
procedure `int` `indexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254554.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25455a.  v0:= temp @kind object;
  #L25455c.  call temp:= `indexOf`(v0, v2, v3) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L254562.  v2:= temp;
  #L254564.  return v2;
}
procedure `byte`[] `internalArray`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.internalArray:()[B` @AccessFlag  {
    temp;
    v0;

  #L254470.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L254476.  v0:= temp @kind object;
  #L254478.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lokio/SegmentedByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254578.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25457e.  v0:= temp @kind object;
  #L254580.  call temp:= `lastIndexOf`(v0, v2, v3) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L254586.  v2:= temp;
  #L254588.  return v2;
}
procedure `okio.ByteString` `md5`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25475c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L254762.  v0:= temp @kind object;
  #L254764.  call temp:= `md5`(v0) @signature `Lokio/ByteString;.md5:()Lokio/ByteString;` @kind virtual;
  #L25476a.  v0:= temp @kind object;
  #L25476c.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25436c.  v0:= 0I;
  #L25436e.  if v8 < 0 then goto L2543f0;
  #L254372.  call temp:= `size`(v7) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L254378.  v1:= temp;
  #L25437a.  v1:= v1 - v11 @kind int;
  #L25437c.  if v8 <= v1 then goto L254382;
  #L254380.  goto L2543f0;
  #L254382.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L254388.  v1:= temp;
  #L25438a.  if v11 <= 0 then goto L2543ec;
  #L25438e.  if v1 != 0 then goto L254396;
  #L254392.  v2:= 0I;
  #L254394.  goto L2543a2;
  #L254396.  v2:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L25439a.  v3:= v1 + -1;
  #L25439e.  v2:= v2[v3];
  #L2543a2.  v3:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2543a6.  v3:= v3[v1];
  #L2543aa.  v3:= v3 - v2 @kind int;
  #L2543ac.  v3:= v3 + v2 @kind int;
  #L2543ae.  v3:= v3 - v8 @kind int;
  #L2543b0.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2543b6.  v3:= temp;
  #L2543b8.  v4:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2543bc.  v5:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2543c0.  v6:= length @variable v5;
  #L2543c2.  v6:= v6 + v1 @kind int;
  #L2543c4.  v4:= v4[v6];
  #L2543c8.  v2:= v8 - v2 @kind int;
  #L2543cc.  v2:= v2 + v4 @kind int;
  #L2543ce.  v4:= v5[v1] @kind object;
  #L2543d2.  call temp:= `rangeEquals`(v9, v10, v4, v2, v3) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L2543d8.  v2:= temp;
  #L2543da.  if v2 != 0 then goto L2543e0;
  #L2543de.  return v0;
  #L2543e0.  v8:= v8 + v3 @kind int;
  #L2543e2.  v10:= v10 + v3 @kind int;
  #L2543e4.  v11:= v11 - v3 @kind int;
  #L2543e6.  v1:= v1 + 1;
  #L2543ea.  goto L25438a;
  #L2543ec.  v8:= 1I;
  #L2543ee.  return v8;
  #L2543f0.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v7 @kind this, `int` v8 , `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/SegmentedByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2542c8.  v0:= 0I;
  #L2542ca.  if v8 < 0 then goto L254358;
  #L2542ce.  call temp:= `size`(v7) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2542d4.  v1:= temp;
  #L2542d6.  v1:= v1 - v11 @kind int;
  #L2542d8.  if v8 > v1 then goto L254358;
  #L2542dc.  if v10 < 0 then goto L254358;
  #L2542e0.  v1:= length @variable v9;
  #L2542e2.  v1:= v1 - v11 @kind int;
  #L2542e4.  if v10 <= v1 then goto L2542ea;
  #L2542e8.  goto L254358;
  #L2542ea.  call temp:= `segment`(v7, v8) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L2542f0.  v1:= temp;
  #L2542f2.  if v11 <= 0 then goto L254354;
  #L2542f6.  if v1 != 0 then goto L2542fe;
  #L2542fa.  v2:= 0I;
  #L2542fc.  goto L25430a;
  #L2542fe.  v2:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254302.  v3:= v1 + -1;
  #L254306.  v2:= v2[v3];
  #L25430a.  v3:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L25430e.  v3:= v3[v1];
  #L254312.  v3:= v3 - v2 @kind int;
  #L254314.  v3:= v3 + v2 @kind int;
  #L254316.  v3:= v3 - v8 @kind int;
  #L254318.  call temp:= `min`(v11, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L25431e.  v3:= temp;
  #L254320.  v4:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254324.  v5:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254328.  v6:= length @variable v5;
  #L25432a.  v6:= v6 + v1 @kind int;
  #L25432c.  v4:= v4[v6];
  #L254330.  v2:= v8 - v2 @kind int;
  #L254334.  v2:= v2 + v4 @kind int;
  #L254336.  v4:= v5[v1] @kind object;
  #L25433a.  call temp:= `arrayRangeEquals`(v4, v2, v9, v10, v3) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L254340.  v2:= temp;
  #L254342.  if v2 != 0 then goto L254348;
  #L254346.  return v0;
  #L254348.  v8:= v8 + v3 @kind int;
  #L25434a.  v10:= v10 + v3 @kind int;
  #L25434c.  v11:= v11 - v3 @kind int;
  #L25434e.  v1:= v1 + 1;
  #L254352.  goto L2542f2;
  #L254354.  v8:= 1I;
  #L254356.  return v8;
  #L254358.  return v0;
}
procedure `okio.ByteString` `sha1`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254780.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L254786.  v0:= temp @kind object;
  #L254788.  call temp:= `sha1`(v0) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L25478e.  v0:= temp @kind object;
  #L254790.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2547a4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2547aa.  v0:= temp @kind object;
  #L2547ac.  call temp:= `sha256`(v0) @signature `Lokio/ByteString;.sha256:()Lokio/ByteString;` @kind virtual;
  #L2547b2.  v0:= temp @kind object;
  #L2547b4.  return v0 @kind object;
}
procedure `int` `size`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2545d0.  v0:= v2.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2545d4.  v1:= v2.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2545d8.  v1:= length @variable v1;
  #L2545da.  v1:= v1 + -1;
  #L2545de.  v0:= v0[v1];
  #L2545e2.  return v0;
}
procedure `java.lang.String` `string`(`okio.SegmentedByteString` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/SegmentedByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25467c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L254682.  v0:= temp @kind object;
  #L254684.  call temp:= `string`(v0, v2) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L25468a.  v2:= temp @kind object;
  #L25468c.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 ) @signature `Lokio/SegmentedByteString;.substring:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2547c8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2547ce.  v0:= temp @kind object;
  #L2547d0.  call temp:= `substring`(v0, v2) @signature `Lokio/ByteString;.substring:(I)Lokio/ByteString;` @kind virtual;
  #L2547d6.  v2:= temp @kind object;
  #L2547d8.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lokio/SegmentedByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2547ec.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2547f2.  v0:= temp @kind object;
  #L2547f4.  call temp:= `substring`(v0, v2, v3) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @kind virtual;
  #L2547fa.  v2:= temp @kind object;
  #L2547fc.  return v2 @kind object;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254810.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L254816.  v0:= temp @kind object;
  #L254818.  call temp:= `toAsciiLowercase`(v0) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L25481e.  v0:= temp @kind object;
  #L254820.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254834.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L25483a.  v0:= temp @kind object;
  #L25483c.  call temp:= `toAsciiUppercase`(v0) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @kind virtual;
  #L254842.  v0:= temp @kind object;
  #L254844.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L25448c.  v0:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254490.  v1:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254494.  v2:= length @variable v1;
  #L254496.  v2:= v2 + -1;
  #L25449a.  v0:= v0[v2];
  #L25449e.  v0:= new `byte`[v0];
  #L2544a2.  v1:= length @variable v1;
  #L2544a4.  v2:= 0I;
  #L2544a6.  v3:= 0I;
  #L2544a8.  if v2 >= v1 then goto L2544d6;
  #L2544ac.  v4:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2544b0.  v5:= v1 + v2 @kind int;
  #L2544b4.  v5:= v4[v5];
  #L2544b8.  v4:= v4[v2];
  #L2544bc.  v6:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2544c0.  v6:= v6[v2] @kind object;
  #L2544c4.  v7:= v4 - v3 @kind int;
  #L2544c8.  call `arraycopy`(v6, v5, v0, v3, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2544ce.  v2:= v2 + 1;
  #L2544d2.  v3:= v4;
  #L2544d4.  goto L2544a8;
  #L2544d6.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2546a0.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2546a6.  v0:= temp @kind object;
  #L2546a8.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2546ae.  v0:= temp @kind object;
  #L2546b0.  return v0 @kind object;
}
procedure `java.lang.String` `utf8`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.utf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2546c4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2546ca.  v0:= temp @kind object;
  #L2546cc.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2546d2.  v0:= temp @kind object;
  #L2546d4.  return v0 @kind object;
}
procedure `void` `write`(`okio.SegmentedByteString` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/SegmentedByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L254950.  if v7 == 0 then goto L25498e;
  #L254954.  v0:= v6.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254958.  v0:= length @variable v0;
  #L25495a.  v1:= 0I;
  #L25495c.  v2:= 0I;
  #L25495e.  if v1 >= v0 then goto L25498c;
  #L254962.  v3:= v6.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L254966.  v4:= v0 + v1 @kind int;
  #L25496a.  v4:= v3[v4];
  #L25496e.  v3:= v3[v1];
  #L254972.  v5:= v6.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L254976.  v5:= v5[v1] @kind object;
  #L25497a.  v2:= v3 - v2 @kind int;
  #L25497e.  call `write`(v7, v5, v4, v2) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L254984.  v1:= v1 + 1;
  #L254988.  v2:= v3;
  #L25498a.  goto L25495e;
  #L25498c.  return @kind void;
  #L25498e.  v7:= new `java.lang.IllegalArgumentException`;
  #L254992.  v0:= "out == null" @kind object;
  #L254996.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25499c.  throw v7;
  #L25499e.  return @kind void;
}
procedure `void` `write`(`okio.SegmentedByteString` v11 @kind this, `okio.Buffer` v12 @kind object) @signature `Lokio/SegmentedByteString;.write:(Lokio/Buffer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2549b0.  v0:= v11.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2549b4.  v0:= length @variable v0;
  #L2549b6.  v1:= 0I;
  #L2549b8.  v2:= 0I;
  #L2549ba.  if v1 >= v0 then goto L254a1a;
  #L2549be.  v3:= v11.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2549c2.  v4:= v0 + v1 @kind int;
  #L2549c6.  v7:= v3[v4];
  #L2549ca.  v3:= v3[v1];
  #L2549ce.  v4:= new `okio.Segment`;
  #L2549d2.  v5:= v11.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2549d6.  v6:= v5[v1] @kind object;
  #L2549da.  v5:= v7 + v3 @kind int;
  #L2549de.  v8:= v5 - v2 @kind int;
  #L2549e2.  v9:= 1I;
  #L2549e4.  v10:= 0I;
  #L2549e6.  v5:= v4 @kind object;
  #L2549e8.  call `<init>`(v5, v6, v7, v8, v9, v10) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L2549ee.  v2:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2549f2.  if v2 != 0 then goto L254a04;
  #L2549f6.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L2549fa.  v4.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L2549fe.  v12.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L254a02.  goto L254a12;
  #L254a04.  v2:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L254a08.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L254a0c.  call temp:= `push`(v2, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L254a12.  v1:= v1 + 1;
  #L254a16.  v2:= v3;
  #L254a18.  goto L2549ba;
  #L254a1a.  v0:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L254a1e.  v2:= (`long`) v2 @kind i2l;
  #L254a20.  v0:= v0 + v2 @kind long;
  #L254a22.  v12.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L254a26.  return @kind void;
}
