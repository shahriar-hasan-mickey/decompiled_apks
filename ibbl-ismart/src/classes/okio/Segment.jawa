record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L254b8c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L254b92.  v0:= 8192I;
  #L254b96.  v0:= new `byte`[v0];
  #L254b9a.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L254b9e.  v0:= 1I;
  #L254ba0.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L254ba4.  v0:= 0I;
  #L254ba6.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L254baa.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `boolean` v4 , `boolean` v5 ) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L254bbc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L254bc2.  v0.`okio.Segment.data` @type ^`byte`[] := v1 @kind object;
  #L254bc6.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L254bca.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L254bce.  v0.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L254bd2.  v0.`okio.Segment.owner` @type ^`boolean` := v5 @kind boolean;
  #L254bd6.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L254be8.  v0:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L254bec.  if v0 == v4 then goto L254c3c;
  #L254bf0.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L254bf4.  if v1 != 0 then goto L254bfa;
  #L254bf8.  return @kind void;
  #L254bfa.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L254bfe.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L254c02.  v1:= v1 - v2 @kind int;
  #L254c04.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L254c08.  v2:= v2 - 8192;
  #L254c0c.  v3:= v0.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L254c10.  if v3 == 0 then goto L254c18;
  #L254c14.  v0:= 0I;
  #L254c16.  goto L254c1c;
  #L254c18.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L254c1c.  v2:= v2 + v0 @kind int;
  #L254c1e.  if v1 <= v2 then goto L254c24;
  #L254c22.  return @kind void;
  #L254c24.  v0:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L254c28.  call `writeTo`(v4, v0, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L254c2e.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L254c34.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L254c3a.  return @kind void;
  #L254c3c.  v0:= new `java.lang.IllegalStateException`;
  #L254c40.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L254c46.  throw v0;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L254a38.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L254a3c.  v1:= 0I;
  #L254a3e.  if v0 == v4 then goto L254a44;
  #L254a42.  goto L254a46;
  #L254a44.  v0:= v1 @kind object;
  #L254a46.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L254a4a.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L254a4e.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L254a52.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L254a56.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L254a5a.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L254a5e.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L254a62.  return v0 @kind object;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L254a74.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L254a78.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L254a7c.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L254a80.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L254a84.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L254a88.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L254a8c.  return v2 @kind object;
}
procedure `okio.Segment` `sharedCopy`(`okio.Segment` v7 @kind this) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L254aa0.  v0:= 1I;
  #L254aa2.  v7.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L254aa6.  v0:= new `okio.Segment`;
  #L254aaa.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254aae.  v3:= v7.`okio.Segment.pos` @type ^`int`;
  #L254ab2.  v4:= v7.`okio.Segment.limit` @type ^`int`;
  #L254ab6.  v5:= 1I;
  #L254ab8.  v6:= 0I;
  #L254aba.  v1:= v0 @kind object;
  #L254abc.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L254ac2.  return v0 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 ) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L254ad4.  if v6 <= 0 then goto L254b34;
  #L254ad8.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L254adc.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L254ae0.  v0:= v0 - v1 @kind int;
  #L254ae2.  if v6 > v0 then goto L254b34;
  #L254ae6.  v0:= 1024I;
  #L254aea.  if v6 < v0 then goto L254af8;
  #L254aee.  call temp:= `sharedCopy`(v5) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L254af4.  v0:= temp @kind object;
  #L254af6.  goto L254b14;
  #L254af8.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L254afe.  v0:= temp @kind object;
  #L254b00.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254b04.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L254b08.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254b0c.  v4:= 0I;
  #L254b0e.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L254b14.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L254b18.  v1:= v1 + v6 @kind int;
  #L254b1a.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L254b1e.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L254b22.  v1:= v1 + v6 @kind int;
  #L254b24.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L254b28.  v6:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L254b2c.  call temp:= `push`(v6, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L254b32.  return v0 @kind object;
  #L254b34.  v6:= new `java.lang.IllegalArgumentException`;
  #L254b38.  call `<init>`(v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L254b3e.  throw v6;
}
procedure `okio.Segment` `unsharedCopy`(`okio.Segment` v7 @kind this) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L254b50.  v6:= new `okio.Segment`;
  #L254b54.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254b58.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L254b5e.  v0:= temp @kind object;
  #L254b60.  v1:= v0 @kind object;
  #L254b62.  v1:= (`byte`[]) v1 @kind object;
  #L254b66.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L254b6a.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L254b6e.  v4:= 0I;
  #L254b70.  v5:= 1I;
  #L254b72.  v0:= v6 @kind object;
  #L254b74.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L254b7a.  return v6 @kind object;
}
procedure `void` `writeTo`(`okio.Segment` v4 @kind this, `okio.Segment` v5 @kind object, `int` v6 ) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L254c58.  v0:= v5.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L254c5c.  if v0 == 0 then goto L254cec;
  #L254c60.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L254c64.  v1:= v0 + v6 @kind int;
  #L254c68.  v2:= 8192I;
  #L254c6c.  if v1 <= v2 then goto L254cc0;
  #L254c70.  v1:= v5.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L254c74.  if v1 != 0 then goto L254cb4;
  #L254c78.  v1:= v0 + v6 @kind int;
  #L254c7c.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L254c80.  v1:= v1 - v3 @kind int;
  #L254c82.  if v1 > v2 then goto L254ca8;
  #L254c86.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254c8a.  v0:= v0 - v3 @kind int;
  #L254c8c.  v2:= 0I;
  #L254c8e.  call `arraycopy`(v1, v3, v1, v2, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L254c94.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L254c98.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L254c9c.  v0:= v0 - v1 @kind int;
  #L254c9e.  v5.`okio.Segment.limit` @type ^`int` := v0;
  #L254ca2.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L254ca6.  goto L254cc0;
  #L254ca8.  v5:= new `java.lang.IllegalArgumentException`;
  #L254cac.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L254cb2.  throw v5;
  #L254cb4.  v5:= new `java.lang.IllegalArgumentException`;
  #L254cb8.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L254cbe.  throw v5;
  #L254cc0.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254cc4.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L254cc8.  v2:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L254ccc.  v3:= v5.`okio.Segment.limit` @type ^`int`;
  #L254cd0.  call `arraycopy`(v0, v1, v2, v3, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L254cd6.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L254cda.  v0:= v0 + v6 @kind int;
  #L254cdc.  v5.`okio.Segment.limit` @type ^`int` := v0;
  #L254ce0.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L254ce4.  v5:= v5 + v6 @kind int;
  #L254ce6.  v4.`okio.Segment.pos` @type ^`int` := v5;
  #L254cea.  return @kind void;
  #L254cec.  v5:= new `java.lang.IllegalArgumentException`;
  #L254cf0.  call `<init>`(v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L254cf6.  throw v5;
}
