record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.Okio$1.val$out` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$1.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L251a74.  v0.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L251a78.  v0.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` := v2 @kind object;
  #L251a7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L251a82.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251a94.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L251a98.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L251a9e.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251ab0.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L251ab4.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L251aba.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251a5c.  v0:= v1.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L251a60.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L251a18.  v0:= new `java.lang.StringBuilder`;
  #L251a1c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L251a22.  v1:= "sink(" @kind object;
  #L251a26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251a2c.  v1:= v2.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L251a30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251a36.  v1:= ")" @kind object;
  #L251a3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251a40.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L251a46.  v0:= temp @kind object;
  #L251a48.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L251acc.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251ad0.  v2:= 0L;
  #L251ad4.  v4:= v8 @kind wide;
  #L251ad6.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L251adc.  v0:= 0L;
  #L251ae0.  v2:= lcmp(v8, v0);
  #L251ae4.  if v2 <= 0 then goto L251b56;
  #L251ae8.  v0:= v6.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L251aec.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L251af2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L251af6.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L251afa.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L251afe.  v1:= v1 - v2 @kind int;
  #L251b00.  v1:= (`long`) v1 @kind i2l;
  #L251b02.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L251b08.  v1:= temp @kind wide;
  #L251b0a.  v1:= (`int`) v1 @kind l2i;
  #L251b0c.  v2:= v6.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L251b10.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L251b14.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L251b18.  call `write`(v2, v3, v4, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L251b1e.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L251b22.  v2:= v2 + v1 @kind int;
  #L251b24.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L251b28.  v1:= (`long`) v1 @kind i2l;
  #L251b2a.  v8:= v8 - v1 @kind long;
  #L251b2c.  v3:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251b30.  v3:= v3 - v1 @kind long;
  #L251b32.  v7.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L251b36.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L251b3a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L251b3e.  if v1 != v2 then goto L251adc;
  #L251b42.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L251b48.  v1:= temp @kind object;
  #L251b4a.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L251b4e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L251b54.  goto L251adc;
  #L251b56.  return @kind void;
}
