record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v2 @kind this, `okio.Source` v3 @kind object) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L250ed8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L250ede.  v0:= 0I;
  #L250ee0.  v2.`okio.GzipSource.section` @type ^`int` := v0;
  #L250ee4.  v0:= new `java.util.zip.CRC32`;
  #L250ee8.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L250eee.  v2.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L250ef2.  if v3 == 0 then goto L250f2a;
  #L250ef6.  v0:= new `java.util.zip.Inflater`;
  #L250efa.  v1:= 1I;
  #L250efc.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L250f02.  v2.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L250f06.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L250f0c.  v3:= temp @kind object;
  #L250f0e.  v2.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v3 @kind object;
  #L250f12.  v3:= new `okio.InflaterSource`;
  #L250f16.  v0:= v2.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L250f1a.  v1:= v2.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L250f1e.  call `<init>`(v3, v0, v1) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L250f24.  v2.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v3 @kind object;
  #L250f28.  return @kind void;
  #L250f2a.  v3:= new `java.lang.IllegalArgumentException`;
  #L250f2e.  v0:= "source == null" @kind object;
  #L250f32.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250f38.  throw v3;
}
procedure `void` `checkEqual`(`okio.GzipSource` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L250f4c.  if v6 != v5 then goto L250f52;
  #L250f50.  return @kind void;
  #L250f52.  v0:= new `java.io.IOException`;
  #L250f56.  v1:= 3I;
  #L250f58.  v1:= new `java.lang.Object`[v1];
  #L250f5c.  v2:= 0I;
  #L250f5e.  v1[v2]:= v4 @kind object;
  #L250f62.  v4:= 1I;
  #L250f64.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L250f6a.  v6:= temp @kind object;
  #L250f6c.  v1[v4]:= v6 @kind object;
  #L250f70.  v4:= 2I;
  #L250f72.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L250f78.  v5:= temp @kind object;
  #L250f7a.  v1[v4]:= v5 @kind object;
  #L250f7e.  v4:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L250f82.  call temp:= `format`(v4, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L250f88.  v4:= temp @kind object;
  #L250f8a.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250f90.  throw v0;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v17 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L250fc0.  v6:= v17 @kind object;
  #L250fc4.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L250fc8.  v1:= 10L;
  #L250fcc.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L250fd2.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L250fd6.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L250fdc.  v0:= temp @kind object;
  #L250fde.  v1:= 3L;
  #L250fe2.  call temp:= `getByte`(v0, v1) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L250fe8.  v7:= temp;
  #L250fea.  v0:= v7 ^> 1;
  #L250fee.  v8:= 1I;
  #L250ff0.  v0:= v0 ^& v8 @kind int;
  #L250ff2.  v9:= 0I;
  #L250ff4.  if v0 != v8 then goto L250ffc;
  #L250ff8.  v10:= 1I;
  #L250ffa.  goto L250ffe;
  #L250ffc.  v10:= 0I;
  #L250ffe.  if v10 == 0 then goto L251020;
  #L251002.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251006.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L25100c.  v1:= temp @kind object;
  #L25100e.  v2:= 0L;
  #L251012.  v4:= 10L;
  #L251016.  v0:= v17 @kind object;
  #L25101a.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L251020.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251024.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L25102a.  v0:= temp;
  #L25102c.  v1:= "ID1ID2" @kind object;
  #L251030.  v2:= 8075I;
  #L251034.  call `checkEqual`(v6, v1, v2, v0) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L25103a.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L25103e.  v1:= 8L;
  #L251042.  call `skip`(v0, v1) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L251048.  v0:= v7 ^> 2;
  #L25104c.  v0:= v0 ^& v8 @kind int;
  #L25104e.  if v0 != v8 then goto L2510cc;
  #L251052.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251056.  v1:= 2L;
  #L25105a.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L251060.  if v10 == 0 then goto L251082;
  #L251064.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251068.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L25106e.  v1:= temp @kind object;
  #L251070.  v2:= 0L;
  #L251074.  v4:= 2L;
  #L251078.  v0:= v17 @kind object;
  #L25107c.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L251082.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251086.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L25108c.  v0:= temp @kind object;
  #L25108e.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L251094.  v0:= temp;
  #L251096.  v1:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L25109a.  v11:= (`long`) v0 @kind i2l;
  #L25109c.  call `require`(v1, v11) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L2510a2.  if v10 == 0 then goto L2510c2;
  #L2510a6.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2510aa.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2510b0.  v1:= temp @kind object;
  #L2510b2.  v2:= 0L;
  #L2510b6.  v0:= v17 @kind object;
  #L2510ba.  v4:= v11 @kind wide;
  #L2510bc.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2510c2.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2510c6.  call `skip`(v0, v11) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2510cc.  v0:= v7 ^> 3;
  #L2510d0.  v0:= v0 ^& v8 @kind int;
  #L2510d2.  v11:= -1L;
  #L2510d6.  v13:= 1L;
  #L2510da.  if v0 != v8 then goto L251130;
  #L2510de.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2510e2.  call temp:= `indexOf`(v0, v9) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L2510e8.  v15:= temp @kind wide;
  #L2510ea.  v0:= lcmp(v15, v11);
  #L2510ee.  if v0 == 0 then goto L251124;
  #L2510f2.  if v10 == 0 then goto L251114;
  #L2510f6.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2510fa.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L251100.  v1:= temp @kind object;
  #L251102.  v2:= 0L;
  #L251106.  v4:= v15 + v13 @kind long;
  #L25110a.  v0:= v17 @kind object;
  #L25110e.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L251114.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251118.  v1:= v15 + v13 @kind long;
  #L25111c.  call `skip`(v0, v1) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L251122.  goto L251130;
  #L251124.  v0:= new `java.io.EOFException`;
  #L251128.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L25112e.  throw v0;
  #L251130.  v0:= v7 ^> 4;
  #L251134.  v0:= v0 ^& v8 @kind int;
  #L251136.  if v0 != v8 then goto L25118a;
  #L25113a.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L25113e.  call temp:= `indexOf`(v0, v9) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L251144.  v7:= temp @kind wide;
  #L251146.  v0:= lcmp(v7, v11);
  #L25114a.  if v0 == 0 then goto L25117e;
  #L25114e.  if v10 == 0 then goto L251170;
  #L251152.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251156.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L25115c.  v1:= temp @kind object;
  #L25115e.  v2:= 0L;
  #L251162.  v4:= v7 + v13 @kind long;
  #L251166.  v0:= v17 @kind object;
  #L25116a.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L251170.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251174.  v7:= v7 + v13 @kind long;
  #L251176.  call `skip`(v0, v7) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L25117c.  goto L25118a;
  #L25117e.  v0:= new `java.io.EOFException`;
  #L251182.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L251188.  throw v0;
  #L25118a.  if v10 == 0 then goto L2511be;
  #L25118e.  v0:= "FHCRC" @kind object;
  #L251192.  v1:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L251196.  call temp:= `readShortLe`(v1) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L25119c.  v1:= temp;
  #L25119e.  v2:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2511a2.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L2511a8.  v2:= temp @kind wide;
  #L2511aa.  v2:= (`int`) v2 @kind l2i;
  #L2511ac.  v2:= (`short`) v2 @kind i2s;
  #L2511ae.  call `checkEqual`(v6, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2511b4.  v0:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2511b8.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L2511be.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v4 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2511d0.  v0:= "CRC" @kind object;
  #L2511d4.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2511d8.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L2511de.  v1:= temp;
  #L2511e0.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2511e4.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L2511ea.  v2:= temp @kind wide;
  #L2511ec.  v2:= (`int`) v2 @kind l2i;
  #L2511ee.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2511f4.  v0:= "ISIZE" @kind object;
  #L2511f8.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2511fc.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L251202.  v1:= temp;
  #L251204.  v2:= v4.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L251208.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L25120e.  v2:= temp @kind wide;
  #L251210.  v2:= (`int`) v2 @kind l2i;
  #L251212.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L251218.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v4 @kind this, `okio.Buffer` v5 @kind object, `long` v6 , `long` v8 ) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L25122c.  v5:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L251230.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L251234.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L251238.  v0:= v0 - v1 @kind int;
  #L25123a.  v0:= (`long`) v0 @kind i2l;
  #L25123c.  v2:= lcmp(v6, v0);
  #L251240.  if v2 < 0 then goto L251258;
  #L251244.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L251248.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L25124c.  v0:= v0 - v1 @kind int;
  #L25124e.  v0:= (`long`) v0 @kind i2l;
  #L251250.  v6:= v6 - v0 @kind long;
  #L251252.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L251256.  goto L251230;
  #L251258.  v0:= 0L;
  #L25125c.  v2:= lcmp(v8, v0);
  #L251260.  if v2 <= 0 then goto L25129a;
  #L251264.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L251268.  v2:= (`long`) v2 @kind i2l;
  #L25126a.  v2:= v2 + v6 @kind long;
  #L25126c.  v6:= (`int`) v2 @kind l2i;
  #L25126e.  v7:= v5.`okio.Segment.limit` @type ^`int`;
  #L251272.  v7:= v7 - v6 @kind int;
  #L251274.  v2:= (`long`) v7 @kind i2l;
  #L251276.  call temp:= `min`(v2, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L25127c.  v2:= temp @kind wide;
  #L25127e.  v7:= (`int`) v2 @kind l2i;
  #L251280.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L251284.  v3:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L251288.  call `update`(v2, v3, v6, v7) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L25128e.  v6:= (`long`) v7 @kind i2l;
  #L251290.  v8:= v8 - v6 @kind long;
  #L251292.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L251296.  v6:= v0 @kind wide;
  #L251298.  goto L25125c;
  #L25129a.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250fa4.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L250fa8.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L250fae.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v11 @kind this, `okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L250de0.  v0:= 0L;
  #L250de4.  v2:= lcmp(v13, v0);
  #L250de8.  if v2 < 0 then goto L250e7a;
  #L250dec.  v2:= lcmp(v13, v0);
  #L250df0.  if v2 != 0 then goto L250df6;
  #L250df4.  return v0 @kind wide;
  #L250df6.  v0:= v11.`okio.GzipSource.section` @type ^`int`;
  #L250dfa.  v1:= 1I;
  #L250dfc.  if v0 != 0 then goto L250e0a;
  #L250e00.  call `consumeHeader`(v11) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L250e06.  v11.`okio.GzipSource.section` @type ^`int` := v1;
  #L250e0a.  v0:= v11.`okio.GzipSource.section` @type ^`int`;
  #L250e0e.  v2:= -1L;
  #L250e12.  v4:= 2I;
  #L250e14.  if v0 != v1 then goto L250e42;
  #L250e18.  v7:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L250e1c.  v0:= v11.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L250e20.  call temp:= `read`(v0, v12, v13) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L250e26.  v13:= temp @kind wide;
  #L250e28.  v0:= lcmp(v13, v2);
  #L250e2c.  if v0 == 0 then goto L250e3e;
  #L250e30.  v5:= v11 @kind object;
  #L250e32.  v6:= v12 @kind object;
  #L250e34.  v9:= v13 @kind wide;
  #L250e36.  call `updateCrc`(v5, v6, v7, v9) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L250e3c.  return v13 @kind wide;
  #L250e3e.  v11.`okio.GzipSource.section` @type ^`int` := v4;
  #L250e42.  v12:= v11.`okio.GzipSource.section` @type ^`int`;
  #L250e46.  if v12 != v4 then goto L250e78;
  #L250e4a.  call `consumeTrailer`(v11) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L250e50.  v12:= 3I;
  #L250e52.  v11.`okio.GzipSource.section` @type ^`int` := v12;
  #L250e56.  v12:= v11.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L250e5a.  call temp:= `exhausted`(v12) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L250e60.  v12:= temp;
  #L250e62.  if v12 == 0 then goto L250e68;
  #L250e66.  goto L250e78;
  #L250e68.  v12:= new `java.io.IOException`;
  #L250e6c.  v13:= "gzip finished without exhausting source" @kind object;
  #L250e70.  call `<init>`(v12, v13) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250e76.  throw v12;
  #L250e78.  return v2 @kind wide;
  #L250e7a.  v12:= new `java.lang.IllegalArgumentException`;
  #L250e7e.  v0:= new `java.lang.StringBuilder`;
  #L250e82.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L250e88.  v1:= "byteCount < 0: " @kind object;
  #L250e8c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L250e92.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L250e98.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L250e9e.  v13:= temp @kind object;
  #L250ea0.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L250ea6.  throw v12;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250eb8.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L250ebc.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L250ec2.  v0:= temp @kind object;
  #L250ec4.  return v0 @kind object;
}
