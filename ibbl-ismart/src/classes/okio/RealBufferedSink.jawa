record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L252dfc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L252e02.  v0:= new `okio.Buffer`;
  #L252e06.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L252e0c.  v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L252e10.  if v2 == 0 then goto L252e1a;
  #L252e14.  v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v2 @kind object;
  #L252e18.  return @kind void;
  #L252e1a.  v2:= new `java.lang.NullPointerException`;
  #L252e1e.  v0:= "sink == null" @kind object;
  #L252e22.  call `<init>`(v2, v0) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252e28.  throw v2;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2528dc.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2528e0.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L252e3c.  v0:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252e40.  if v0 == 0 then goto L252e46;
  #L252e44.  return @kind void;
  #L252e46.  v0:= 0I;
  #L252e48.  v1:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252e4c.  v1:= v1.`okio.Buffer.size` @type ^`long` @kind wide;
  #L252e50.  v3:= 0L;
  #L252e54.  v5:= lcmp(v1, v3);
  #L252e58.  if v5 <= 0 then goto L252e76;
  #L252e5c.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252e60.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252e64.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252e68.  v3:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L252e6c.  call `write`(v1, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L252e72.  goto L252e76;
  #L252e74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L252e76.  v1:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252e7a.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L252e80.  goto L252e8a;
  #L252e82.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L252e84.  if v0 != 0 then goto L252e8a;
  #L252e88.  v0:= v1 @kind object;
  #L252e8a.  v1:= 1I;
  #L252e8c.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L252e90.  if v0 == 0 then goto L252e9a;
  #L252e94.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L252e9a.  return @kind void;
  catch `java.lang.Throwable` @[L252e48..L252e72] goto L252e74;
  catch `java.lang.Throwable` @[L252e76..L252e80] goto L252e82;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2528f4.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2528f8.  if v0 != 0 then goto L252924;
  #L2528fc.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252900.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L252906.  v0:= temp @kind wide;
  #L252908.  v2:= 0L;
  #L25290c.  v4:= lcmp(v0, v2);
  #L252910.  if v4 <= 0 then goto L252922;
  #L252914.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252918.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L25291c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L252922.  return v5 @kind object;
  #L252924.  v0:= new `java.lang.IllegalStateException`;
  #L252928.  v1:= "closed" @kind object;
  #L25292c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252932.  throw v0;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L252944.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252948.  if v0 != 0 then goto L252974;
  #L25294c.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252950.  call temp:= `completeSegmentByteCount`(v0) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L252956.  v0:= temp @kind wide;
  #L252958.  v2:= 0L;
  #L25295c.  v4:= lcmp(v0, v2);
  #L252960.  if v4 <= 0 then goto L252972;
  #L252964.  v2:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252968.  v3:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L25296c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L252972.  return v5 @kind object;
  #L252974.  v0:= new `java.lang.IllegalStateException`;
  #L252978.  v1:= "closed" @kind object;
  #L25297c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252982.  throw v0;
}
procedure `void` `flush`(`okio.RealBufferedSink` v5 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L252ec8.  v0:= v5.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252ecc.  if v0 != 0 then goto L252f02;
  #L252ed0.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252ed4.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L252ed8.  v2:= 0L;
  #L252edc.  v4:= lcmp(v0, v2);
  #L252ee0.  if v4 <= 0 then goto L252ef6;
  #L252ee4.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252ee8.  v1:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252eec.  v2:= v1.`okio.Buffer.size` @type ^`long` @kind wide;
  #L252ef0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L252ef6.  v0:= v5.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252efa.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L252f00.  return @kind void;
  #L252f02.  v0:= new `java.lang.IllegalStateException`;
  #L252f06.  v1:= "closed" @kind object;
  #L252f0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252f10.  throw v0;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2527d0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2527d4.  v0:= v0 ^~ 1;
  #L2527d8.  return v0;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252828.  v0:= new `okio.RealBufferedSink$1`;
  #L25282c.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L252832.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252ddc.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L252de0.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L252de6.  v0:= temp @kind object;
  #L252de8.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L252844.  v0:= new `java.lang.StringBuilder`;
  #L252848.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L25284e.  v1:= "buffer(" @kind object;
  #L252852.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252858.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L25285c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L252862.  v1:= ")" @kind object;
  #L252866.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L25286c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L252872.  v0:= temp @kind object;
  #L252874.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v1 @kind this, `java.nio.ByteBuffer` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2527ec.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2527f0.  if v0 != 0 then goto L252808;
  #L2527f4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2527f8.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L2527fe.  v2:= temp;
  #L252800.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252806.  return v2;
  #L252808.  v2:= new `java.lang.IllegalStateException`;
  #L25280c.  v0:= "closed" @kind object;
  #L252810.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252816.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252a0c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252a10.  if v0 != 0 then goto L252a28;
  #L252a14.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252a18.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L252a1e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252a24.  v2:= temp @kind object;
  #L252a26.  return v2 @kind object;
  #L252a28.  v2:= new `java.lang.IllegalStateException`;
  #L252a2c.  v0:= "closed" @kind object;
  #L252a30.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252a36.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L252a48.  v0:= 0L;
  #L252a4c.  v2:= lcmp(v7, v0);
  #L252a50.  if v2 <= 0 then goto L252a82;
  #L252a54.  v0:= v5.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252a58.  call temp:= `read`(v6, v0, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L252a5e.  v0:= temp @kind wide;
  #L252a60.  v2:= -1L;
  #L252a64.  v4:= lcmp(v0, v2);
  #L252a68.  if v4 == 0 then goto L252a76;
  #L252a6c.  v7:= v7 - v0 @kind long;
  #L252a6e.  call temp:= `emitCompleteSegments`(v5) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252a74.  goto L252a48;
  #L252a76.  v6:= new `java.io.EOFException`;
  #L252a7a.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L252a80.  throw v6;
  #L252a82.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252994.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252998.  if v0 != 0 then goto L2529b0;
  #L25299c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2529a0.  call temp:= `write`(v0, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L2529a6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2529ac.  v2:= temp @kind object;
  #L2529ae.  return v2 @kind object;
  #L2529b0.  v2:= new `java.lang.IllegalStateException`;
  #L2529b4.  v0:= "closed" @kind object;
  #L2529b8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2529be.  throw v2;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2529d0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2529d4.  if v0 != 0 then goto L2529ec;
  #L2529d8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2529dc.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L2529e2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2529e8.  v2:= temp @kind object;
  #L2529ea.  return v2 @kind object;
  #L2529ec.  v2:= new `java.lang.IllegalStateException`;
  #L2529f0.  v3:= "closed" @kind object;
  #L2529f4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2529fa.  throw v2;
}
procedure `void` `write`(`okio.RealBufferedSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252f24.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252f28.  if v0 != 0 then goto L252f3e;
  #L252f2c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252f30.  call `write`(v0, v2, v3) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L252f36.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252f3c.  return @kind void;
  #L252f3e.  v2:= new `java.lang.IllegalStateException`;
  #L252f42.  v3:= "closed" @kind object;
  #L252f46.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252f4c.  throw v2;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L252888.  if v8 == 0 then goto L2528b8;
  #L25288c.  v0:= 0L;
  #L252890.  v2:= v7.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252894.  v3:= 8192L;
  #L252898.  call temp:= `read`(v8, v2, v3) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L25289e.  v2:= temp @kind wide;
  #L2528a0.  v4:= -1L;
  #L2528a4.  v6:= lcmp(v2, v4);
  #L2528a8.  if v6 == 0 then goto L2528b6;
  #L2528ac.  v0:= v0 + v2 @kind long;
  #L2528ae.  call temp:= `emitCompleteSegments`(v7) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2528b4.  goto L252890;
  #L2528b6.  return v0 @kind wide;
  #L2528b8.  v8:= new `java.lang.IllegalArgumentException`;
  #L2528bc.  v0:= "source == null" @kind object;
  #L2528c0.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2528c6.  throw v8;
  #L2528c8.  return @kind void;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252a94.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252a98.  if v0 != 0 then goto L252ab0;
  #L252a9c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252aa0.  call temp:= `writeByte`(v0, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L252aa6.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252aac.  v2:= temp @kind object;
  #L252aae.  return v2 @kind object;
  #L252ab0.  v2:= new `java.lang.IllegalStateException`;
  #L252ab4.  v0:= "closed" @kind object;
  #L252ab8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252abe.  throw v2;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252ad0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252ad4.  if v0 != 0 then goto L252aec;
  #L252ad8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252adc.  call temp:= `writeDecimalLong`(v0, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L252ae2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252ae8.  v2:= temp @kind object;
  #L252aea.  return v2 @kind object;
  #L252aec.  v2:= new `java.lang.IllegalStateException`;
  #L252af0.  v3:= "closed" @kind object;
  #L252af4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252afa.  throw v2;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252b0c.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252b10.  if v0 != 0 then goto L252b28;
  #L252b14.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252b18.  call temp:= `writeHexadecimalUnsignedLong`(v0, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L252b1e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252b24.  v2:= temp @kind object;
  #L252b26.  return v2 @kind object;
  #L252b28.  v2:= new `java.lang.IllegalStateException`;
  #L252b2c.  v3:= "closed" @kind object;
  #L252b30.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252b36.  throw v2;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252b48.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252b4c.  if v0 != 0 then goto L252b64;
  #L252b50.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252b54.  call temp:= `writeInt`(v0, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L252b5a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252b60.  v2:= temp @kind object;
  #L252b62.  return v2 @kind object;
  #L252b64.  v2:= new `java.lang.IllegalStateException`;
  #L252b68.  v0:= "closed" @kind object;
  #L252b6c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252b72.  throw v2;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252b84.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252b88.  if v0 != 0 then goto L252ba0;
  #L252b8c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252b90.  call temp:= `writeIntLe`(v0, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L252b96.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252b9c.  v2:= temp @kind object;
  #L252b9e.  return v2 @kind object;
  #L252ba0.  v2:= new `java.lang.IllegalStateException`;
  #L252ba4.  v0:= "closed" @kind object;
  #L252ba8.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252bae.  throw v2;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252bc0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252bc4.  if v0 != 0 then goto L252bdc;
  #L252bc8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252bcc.  call temp:= `writeLong`(v0, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L252bd2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252bd8.  v2:= temp @kind object;
  #L252bda.  return v2 @kind object;
  #L252bdc.  v2:= new `java.lang.IllegalStateException`;
  #L252be0.  v3:= "closed" @kind object;
  #L252be4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252bea.  throw v2;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v1 @kind this, `long` v2 ) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252bfc.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252c00.  if v0 != 0 then goto L252c18;
  #L252c04.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252c08.  call temp:= `writeLongLe`(v0, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L252c0e.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252c14.  v2:= temp @kind object;
  #L252c16.  return v2 @kind object;
  #L252c18.  v2:= new `java.lang.IllegalStateException`;
  #L252c1c.  v3:= "closed" @kind object;
  #L252c20.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252c26.  throw v2;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252c38.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252c3c.  if v0 != 0 then goto L252c54;
  #L252c40.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252c44.  call temp:= `writeShort`(v0, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L252c4a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252c50.  v2:= temp @kind object;
  #L252c52.  return v2 @kind object;
  #L252c54.  v2:= new `java.lang.IllegalStateException`;
  #L252c58.  v0:= "closed" @kind object;
  #L252c5c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252c62.  throw v2;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252c74.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252c78.  if v0 != 0 then goto L252c90;
  #L252c7c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252c80.  call temp:= `writeShortLe`(v0, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L252c86.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252c8c.  v2:= temp @kind object;
  #L252c8e.  return v2 @kind object;
  #L252c90.  v2:= new `java.lang.IllegalStateException`;
  #L252c94.  v0:= "closed" @kind object;
  #L252c98.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252c9e.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252cb0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252cb4.  if v0 != 0 then goto L252ccc;
  #L252cb8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252cbc.  call temp:= `writeString`(v0, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L252cc2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252cc8.  v2:= temp @kind object;
  #L252cca.  return v2 @kind object;
  #L252ccc.  v2:= new `java.lang.IllegalStateException`;
  #L252cd0.  v3:= "closed" @kind object;
  #L252cd4.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252cda.  throw v2;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252cec.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252cf0.  if v0 != 0 then goto L252d08;
  #L252cf4.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252cf8.  call temp:= `writeString`(v0, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L252cfe.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252d04.  v2:= temp @kind object;
  #L252d06.  return v2 @kind object;
  #L252d08.  v2:= new `java.lang.IllegalStateException`;
  #L252d0c.  v3:= "closed" @kind object;
  #L252d10.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252d16.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252d28.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252d2c.  if v0 != 0 then goto L252d44;
  #L252d30.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252d34.  call temp:= `writeUtf8`(v0, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L252d3a.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252d40.  v2:= temp @kind object;
  #L252d42.  return v2 @kind object;
  #L252d44.  v2:= new `java.lang.IllegalStateException`;
  #L252d48.  v0:= "closed" @kind object;
  #L252d4c.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252d52.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252d64.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252d68.  if v0 != 0 then goto L252d80;
  #L252d6c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252d70.  call temp:= `writeUtf8`(v0, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L252d76.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252d7c.  v2:= temp @kind object;
  #L252d7e.  return v2 @kind object;
  #L252d80.  v2:= new `java.lang.IllegalStateException`;
  #L252d84.  v3:= "closed" @kind object;
  #L252d88.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252d8e.  throw v2;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v1 @kind this, `int` v2 ) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252da0.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L252da4.  if v0 != 0 then goto L252dbc;
  #L252da8.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L252dac.  call temp:= `writeUtf8CodePoint`(v0, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L252db2.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L252db8.  v2:= temp @kind object;
  #L252dba.  return v2 @kind object;
  #L252dbc.  v2:= new `java.lang.IllegalStateException`;
  #L252dc0.  v0:= "closed" @kind object;
  #L252dc4.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252dca.  throw v2;
}
