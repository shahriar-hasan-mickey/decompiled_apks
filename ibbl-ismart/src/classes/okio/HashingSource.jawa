record `okio.HashingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `javax.crypto.Mac` `okio.HashingSource.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSource.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSource` v0 @kind this, `okio.Source` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L251688.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L25168e.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L251694.  v1:= temp @kind object;
  #L251696.  v0.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L25169a.  v1:= 0I;
  #L25169c.  v0.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L2516a0.  return @kind void;
  #L2516a2.  v1:= new `java.lang.AssertionError`;
  #L2516a6.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2516ac.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L25168e..L2516a0] goto L2516a2;
}
procedure `void` `<init>`(`okio.HashingSource` v1 @kind this, `okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2516d0.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L2516d6.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L2516dc.  v2:= temp @kind object;
  #L2516de.  v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L2516e2.  v2:= v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2516e6.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L2516ea.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L2516f0.  v3:= temp @kind object;
  #L2516f2.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2516f8.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L2516fe.  v2:= 0I;
  #L251700.  v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L251704.  return @kind void;
  #L251706.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L251708.  v3:= new `java.lang.IllegalArgumentException`;
  #L25170c.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L251712.  throw v3;
  #L251714.  v2:= new `java.lang.AssertionError`;
  #L251718.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L25171e.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L2516d6..L251704] goto L251714;
  catch `java.security.InvalidKeyException` @[L2516d6..L251704] goto L251706;
}
procedure `okio.HashingSource` `hmacSha1`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha1:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2515e8.  v0:= new `okio.HashingSource`;
  #L2515ec.  v1:= "HmacSHA1" @kind object;
  #L2515f0.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2515f6.  return v0 @kind object;
}
procedure `okio.HashingSource` `hmacSha256`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha256:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251608.  v0:= new `okio.HashingSource`;
  #L25160c.  v1:= "HmacSHA256" @kind object;
  #L251610.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L251616.  return v0 @kind object;
}
procedure `okio.HashingSource` `md5`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.md5:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251628.  v0:= new `okio.HashingSource`;
  #L25162c.  v1:= "MD5" @kind object;
  #L251630.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L251636.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha1`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha1:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251648.  v0:= new `okio.HashingSource`;
  #L25164c.  v1:= "SHA-1" @kind object;
  #L251650.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L251656.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha256`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha256:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251668.  v0:= new `okio.HashingSource`;
  #L25166c.  v1:= "SHA-256" @kind object;
  #L251670.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L251676.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSource` v1 @kind this) @signature `Lokio/HashingSource;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2515b0.  v0:= v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L2515b4.  if v0 == 0 then goto L2515c2;
  #L2515b8.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L2515be.  v0:= temp @kind object;
  #L2515c0.  goto L2515ce;
  #L2515c2.  v0:= v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2515c6.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L2515cc.  v0:= temp @kind object;
  #L2515ce.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2515d4.  v0:= temp @kind object;
  #L2515d6.  return v0 @kind object;
}
procedure `long` `read`(`okio.HashingSource` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/HashingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L251504.  call temp:= `read`(v8, v9, v10) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L25150a.  v10:= temp @kind wide;
  #L25150c.  v0:= -1L;
  #L251510.  v2:= lcmp(v10, v0);
  #L251514.  if v2 == 0 then goto L25159e;
  #L251518.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L25151c.  v0:= v0 - v10 @kind long;
  #L25151e.  v2:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251522.  v4:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L251526.  v5:= lcmp(v2, v0);
  #L25152a.  if v5 <= 0 then goto L251542;
  #L25152e.  v4:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L251532.  v5:= v4.`okio.Segment.limit` @type ^`int`;
  #L251536.  v6:= v4.`okio.Segment.pos` @type ^`int`;
  #L25153a.  v5:= v5 - v6 @kind int;
  #L25153c.  v5:= (`long`) v5 @kind i2l;
  #L25153e.  v2:= v2 - v5 @kind long;
  #L251540.  goto L251526;
  #L251542.  v5:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251546.  v7:= lcmp(v2, v5);
  #L25154a.  if v7 >= 0 then goto L25159e;
  #L25154e.  v5:= v4.`okio.Segment.pos` @type ^`int`;
  #L251552.  v5:= (`long`) v5 @kind i2l;
  #L251554.  v5:= v5 + v0 @kind long;
  #L251556.  v5:= v5 - v2 @kind long;
  #L251558.  v0:= (`int`) v5 @kind l2i;
  #L25155a.  v1:= v8.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L25155e.  if v1 == 0 then goto L251574;
  #L251562.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L251566.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L25156a.  v6:= v6 - v0 @kind int;
  #L25156c.  call `update`(v1, v5, v0, v6) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L251572.  goto L251588;
  #L251574.  v1:= v8.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L251578.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L25157c.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L251580.  v6:= v6 - v0 @kind int;
  #L251582.  call `update`(v1, v5, v0, v6) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L251588.  v0:= v4.`okio.Segment.limit` @type ^`int`;
  #L25158c.  v1:= v4.`okio.Segment.pos` @type ^`int`;
  #L251590.  v0:= v0 - v1 @kind int;
  #L251592.  v0:= (`long`) v0 @kind i2l;
  #L251594.  v0:= v0 + v2 @kind long;
  #L251596.  v4:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L25159a.  v2:= v0 @kind wide;
  #L25159c.  goto L251542;
  #L25159e.  return v10 @kind wide;
}
