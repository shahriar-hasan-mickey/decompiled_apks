record `okio.HashingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `javax.crypto.Mac` `okio.HashingSink.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSink.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSink` v0 @kind this, `okio.Sink` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2513c4.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L2513ca.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L2513d0.  v1:= temp @kind object;
  #L2513d2.  v0.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L2513d6.  v1:= 0I;
  #L2513d8.  v0.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L2513dc.  return @kind void;
  #L2513de.  v1:= new `java.lang.AssertionError`;
  #L2513e2.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2513e8.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L2513ca..L2513dc] goto L2513de;
}
procedure `void` `<init>`(`okio.HashingSink` v1 @kind this, `okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L25140c.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L251412.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L251418.  v2:= temp @kind object;
  #L25141a.  v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L25141e.  v2:= v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L251422.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L251426.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L25142c.  v3:= temp @kind object;
  #L25142e.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L251434.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L25143a.  v2:= 0I;
  #L25143c.  v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L251440.  return @kind void;
  #L251442.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L251444.  v3:= new `java.lang.IllegalArgumentException`;
  #L251448.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L25144e.  throw v3;
  #L251450.  v2:= new `java.lang.AssertionError`;
  #L251454.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L25145a.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L251412..L251440] goto L251450;
  catch `java.security.InvalidKeyException` @[L251412..L251440] goto L251442;
}
procedure `okio.HashingSink` `hmacSha1`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha1:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2512e4.  v0:= new `okio.HashingSink`;
  #L2512e8.  v1:= "HmacSHA1" @kind object;
  #L2512ec.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2512f2.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha256`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha256:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251304.  v0:= new `okio.HashingSink`;
  #L251308.  v1:= "HmacSHA256" @kind object;
  #L25130c.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L251312.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha512`(`okio.Sink` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSink;.hmacSha512:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251324.  v0:= new `okio.HashingSink`;
  #L251328.  v1:= "HmacSHA512" @kind object;
  #L25132c.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L251332.  return v0 @kind object;
}
procedure `okio.HashingSink` `md5`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.md5:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251344.  v0:= new `okio.HashingSink`;
  #L251348.  v1:= "MD5" @kind object;
  #L25134c.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L251352.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha1`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha1:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251364.  v0:= new `okio.HashingSink`;
  #L251368.  v1:= "SHA-1" @kind object;
  #L25136c.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L251372.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha256`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha256:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L251384.  v0:= new `okio.HashingSink`;
  #L251388.  v1:= "SHA-256" @kind object;
  #L25138c.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L251392.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha512`(`okio.Sink` v2 @kind object) @signature `Lokio/HashingSink;.sha512:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2513a4.  v0:= new `okio.HashingSink`;
  #L2513a8.  v1:= "SHA-512" @kind object;
  #L2513ac.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L2513b2.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSink` v1 @kind this) @signature `Lokio/HashingSink;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2512ac.  v0:= v1.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L2512b0.  if v0 == 0 then goto L2512be;
  #L2512b4.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L2512ba.  v0:= temp @kind object;
  #L2512bc.  goto L2512ca;
  #L2512be.  v0:= v1.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2512c2.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L2512c8.  v0:= temp @kind object;
  #L2512ca.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2512d0.  v0:= temp @kind object;
  #L2512d2.  return v0 @kind object;
}
procedure `void` `write`(`okio.HashingSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/HashingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L25147c.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251480.  v2:= 0L;
  #L251484.  v4:= v9 @kind wide;
  #L251486.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L25148c.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L251490.  v1:= 0L;
  #L251494.  v3:= lcmp(v1, v9);
  #L251498.  if v3 >= 0 then goto L2514ea;
  #L25149c.  v3:= v9 - v1 @kind long;
  #L2514a0.  v5:= v0.`okio.Segment.limit` @type ^`int`;
  #L2514a4.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L2514a8.  v5:= v5 - v6 @kind int;
  #L2514aa.  v5:= (`long`) v5 @kind i2l;
  #L2514ac.  call temp:= `min`(v3, v5) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2514b2.  v3:= temp @kind wide;
  #L2514b4.  v3:= (`int`) v3 @kind l2i;
  #L2514b6.  v4:= v7.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L2514ba.  if v4 == 0 then goto L2514ce;
  #L2514be.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2514c2.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L2514c6.  call `update`(v4, v5, v6, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L2514cc.  goto L2514e0;
  #L2514ce.  v4:= v7.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2514d2.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2514d6.  v6:= v0.`okio.Segment.pos` @type ^`int`;
  #L2514da.  call `update`(v4, v5, v6, v3) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L2514e0.  v3:= (`long`) v3 @kind i2l;
  #L2514e2.  v1:= v1 + v3 @kind long;
  #L2514e4.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2514e8.  goto L251494;
  #L2514ea.  call `write`(v7, v8, v9) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L2514f0.  return @kind void;
}
