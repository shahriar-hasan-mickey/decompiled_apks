record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L24f184.  v0:= 16I;
  #L24f188.  v0:= new `byte`[v0];
  #L24f18c.  goto L24f198;
  #L24f192.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L24f196.  return @kind void;
  #L24f198.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L24f1af.  goto L24f192;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L24f1c0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24f1c6.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v5 @kind this, `java.lang.String` v6 @kind object) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24ece0.  call temp:= `getInstance`(v6) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L24ece6.  v6:= temp @kind object;
  #L24ece8.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ecec.  if v0 == 0 then goto L24ed42;
  #L24ecf0.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ecf4.  v0:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24ecf8.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ecfc.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L24ed00.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ed04.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L24ed08.  v3:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ed0c.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L24ed10.  v2:= v2 - v3 @kind int;
  #L24ed12.  call `update`(v6, v0, v1, v2) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L24ed18.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ed1c.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24ed20.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ed24.  if v0 == v1 then goto L24ed42;
  #L24ed28.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24ed2c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24ed30.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24ed34.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L24ed38.  v3:= v3 - v4 @kind int;
  #L24ed3a.  call `update`(v6, v1, v2, v3) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L24ed40.  goto L24ed1c;
  #L24ed42.  call temp:= `digest`(v6) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L24ed48.  v6:= temp @kind object;
  #L24ed4a.  call temp:= `of`(v6) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L24ed50.  v6:= temp @kind object;
  #L24ed52.  return v6 @kind object;
  #L24ed54.  v6:= new `java.lang.AssertionError`;
  #L24ed58.  call `<init>`(v6) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24ed5e.  throw v6;
  #L24ed60.  return @kind void;
  catch `java.security.NoSuchAlgorithmException` @[L24ece0..L24ed52] goto L24ed54;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object, `okio.ByteString` v6 @kind object) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ed84.  call temp:= `getInstance`(v5) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L24ed8a.  v0:= temp @kind object;
  #L24ed8c.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L24ed90.  call temp:= `toByteArray`(v6) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L24ed96.  v6:= temp @kind object;
  #L24ed98.  call `<init>`(v1, v6, v5) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L24ed9e.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L24eda4.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24eda8.  if v5 == 0 then goto L24edfe;
  #L24edac.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24edb0.  v5:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24edb4.  v6:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24edb8.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L24edbc.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24edc0.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L24edc4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24edc8.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L24edcc.  v1:= v1 - v2 @kind int;
  #L24edce.  call `update`(v0, v5, v6, v1) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L24edd4.  v5:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24edd8.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24eddc.  v6:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ede0.  if v5 == v6 then goto L24edfe;
  #L24ede4.  v6:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24ede8.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L24edec.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L24edf0.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L24edf4.  v2:= v2 - v3 @kind int;
  #L24edf6.  call `update`(v0, v6, v1, v2) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L24edfc.  goto L24edd8;
  #L24edfe.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L24ee04.  v5:= temp @kind object;
  #L24ee06.  call temp:= `of`(v5) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L24ee0c.  v5:= temp @kind object;
  #L24ee0e.  return v5 @kind object;
  #L24ee10.  v5:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L24ee12.  v6:= new `java.lang.IllegalArgumentException`;
  #L24ee16.  call `<init>`(v6, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24ee1c.  throw v6;
  #L24ee1e.  v5:= new `java.lang.AssertionError`;
  #L24ee22.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24ee28.  throw v5;
  #L24ee2a.  return @kind void;
  catch `java.security.NoSuchAlgorithmException` @[L24ed84..L24ee0e] goto L24ee1e;
  catch `java.security.InvalidKeyException` @[L24ed84..L24ee0e] goto L24ee10;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object, `int` v7 , `okio.ByteString` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24c3bc.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L24c3c0.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c3c4.  if v9 >= v10 then goto L24c402;
  #L24c3c8.  if v7 != v0 then goto L24c3e4;
  #L24c3cc.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24c3d0.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c3d4.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24c3d8.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L24c3dc.  v4:= v1;
  #L24c3de.  v1:= v7 @kind object;
  #L24c3e0.  v7:= v0;
  #L24c3e2.  v0:= v4;
  #L24c3e4.  v2:= v1[v7] @kind byte;
  #L24c3e8.  call temp:= `getByte`(v8, v9) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24c3ee.  v3:= temp;
  #L24c3f0.  if v2 == v3 then goto L24c3f8;
  #L24c3f4.  v6:= 0I;
  #L24c3f6.  return v6;
  #L24c3f8.  v7:= v7 + 1;
  #L24c3fc.  v9:= v9 + 1;
  #L24c400.  goto L24c3c4;
  #L24c402.  v6:= 1I;
  #L24c404.  return v6;
}
procedure `void` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object, `long` v6 , `boolean` v8 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24f23c.  if v5 == 0 then goto L24f2b4;
  #L24f240.  v0:= 0L;
  #L24f244.  v2:= lcmp(v6, v0);
  #L24f248.  if v2 > 0 then goto L24f254;
  #L24f24c.  if v8 == 0 then goto L24f252;
  #L24f250.  goto L24f254;
  #L24f252.  return @kind void;
  #L24f254.  v0:= 1I;
  #L24f256.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24f25c.  v0:= temp @kind object;
  #L24f25e.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f262.  v1:= v1 - 8192;
  #L24f266.  v1:= (`long`) v1 @kind i2l;
  #L24f268.  call temp:= `min`(v6, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24f26e.  v1:= temp @kind wide;
  #L24f270.  v1:= (`int`) v1 @kind l2i;
  #L24f272.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24f276.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f27a.  call temp:= `read`(v5, v2, v3, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L24f280.  v1:= temp;
  #L24f282.  v2:= -1I;
  #L24f284.  if v1 != v2 then goto L24f29a;
  #L24f288.  if v8 == 0 then goto L24f28e;
  #L24f28c.  return @kind void;
  #L24f28e.  v5:= new `java.io.EOFException`;
  #L24f292.  call `<init>`(v5) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24f298.  throw v5;
  #L24f29a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f29e.  v2:= v2 + v1 @kind int;
  #L24f2a0.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L24f2a4.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f2a8.  v0:= (`long`) v1 @kind i2l;
  #L24f2aa.  v2:= v2 + v0 @kind long;
  #L24f2ac.  v4.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24f2b0.  v6:= v6 - v0 @kind long;
  #L24f2b2.  goto L24f240;
  #L24f2b4.  v5:= new `java.lang.IllegalArgumentException`;
  #L24f2b8.  v6:= "in == null" @kind object;
  #L24f2bc.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f2c2.  throw v5;
  #L24f2c4.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24db2c.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24f1d8.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f1dc.  call `skip`(v2, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24f1e2.  return @kind void;
  #L24f1e4.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L24f1e6.  v1:= new `java.lang.AssertionError`;
  #L24f1ea.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24f1f0.  throw v1;
  catch `java.io.EOFException` @[L24f1d8..L24f1e2] goto L24f1e4;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24cbd0.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L24cbd6.  v0:= temp @kind object;
  #L24cbd8.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24db40.  v0:= new `okio.Buffer`;
  #L24db44.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24db4a.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24db4e.  v3:= 0L;
  #L24db52.  v5:= lcmp(v1, v3);
  #L24db56.  if v5 != 0 then goto L24db5c;
  #L24db5a.  return v0 @kind object;
  #L24db5c.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24db60.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24db66.  v1:= temp @kind object;
  #L24db68.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L24db6c.  v1:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24db70.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L24db74.  v1.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L24db78.  v1:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24db7c.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24db80.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24db84.  if v1 == v2 then goto L24dba0;
  #L24db88.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24db8c.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24db90.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24db96.  v3:= temp @kind object;
  #L24db98.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24db9e.  goto L24db7c;
  #L24dba0.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dba4.  v0.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L24dba8.  return v0 @kind object;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L24f214.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24d050.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d054.  v2:= 0L;
  #L24d058.  v4:= lcmp(v0, v2);
  #L24d05c.  if v4 != 0 then goto L24d062;
  #L24d060.  return v2 @kind wide;
  #L24d062.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d066.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24d06a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d06e.  v4:= 8192I;
  #L24d072.  if v3 >= v4 then goto L24d08c;
  #L24d076.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24d07a.  if v3 == 0 then goto L24d08c;
  #L24d07e.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d082.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d086.  v3:= v3 - v2 @kind int;
  #L24d088.  v2:= (`long`) v3 @kind i2l;
  #L24d08a.  v0:= v0 - v2 @kind long;
  #L24d08c.  return v0 @kind wide;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24dbbc.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dbc0.  v2:= 0L;
  #L24dbc4.  v0:= v6 @kind object;
  #L24dbc6.  v1:= v7 @kind object;
  #L24dbc8.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L24dbce.  v7:= temp @kind object;
  #L24dbd0.  return v7 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object, `long` v8 , `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24dbe4.  if v7 == 0 then goto L24dc6c;
  #L24dbe8.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dbec.  v2:= v8 @kind wide;
  #L24dbee.  v4:= v10 @kind wide;
  #L24dbf0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24dbf6.  v0:= 0L;
  #L24dbfa.  v2:= lcmp(v10, v0);
  #L24dbfe.  if v2 != 0 then goto L24dc04;
  #L24dc02.  return v6 @kind object;
  #L24dc04.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24dc08.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24dc0c.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L24dc10.  v3:= v3 - v4 @kind int;
  #L24dc12.  v3:= (`long`) v3 @kind i2l;
  #L24dc14.  v5:= lcmp(v8, v3);
  #L24dc18.  if v5 < 0 then goto L24dc30;
  #L24dc1c.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24dc20.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L24dc24.  v3:= v3 - v4 @kind int;
  #L24dc26.  v3:= (`long`) v3 @kind i2l;
  #L24dc28.  v8:= v8 - v3 @kind long;
  #L24dc2a.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24dc2e.  goto L24dc08;
  #L24dc30.  v3:= lcmp(v10, v0);
  #L24dc34.  if v3 <= 0 then goto L24dc6a;
  #L24dc38.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L24dc3c.  v3:= (`long`) v3 @kind i2l;
  #L24dc3e.  v3:= v3 + v8 @kind long;
  #L24dc40.  v8:= (`int`) v3 @kind l2i;
  #L24dc42.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L24dc46.  v9:= v9 - v8 @kind int;
  #L24dc48.  v3:= (`long`) v9 @kind i2l;
  #L24dc4a.  call temp:= `min`(v3, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24dc50.  v3:= temp @kind wide;
  #L24dc52.  v9:= (`int`) v3 @kind l2i;
  #L24dc54.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24dc58.  call `write`(v7, v3, v8, v9) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L24dc5e.  v8:= (`long`) v9 @kind i2l;
  #L24dc60.  v10:= v10 - v8 @kind long;
  #L24dc62.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24dc66.  v8:= v0 @kind wide;
  #L24dc68.  goto L24dc30;
  #L24dc6a.  return v6 @kind object;
  #L24dc6c.  v7:= new `java.lang.IllegalArgumentException`;
  #L24dc70.  v8:= "out == null" @kind object;
  #L24dc74.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24dc7a.  throw v7;
  #L24dc7c.  return @kind void;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 , `long` v10 ) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24dc90.  if v7 == 0 then goto L24dd54;
  #L24dc94.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dc98.  v2:= v8 @kind wide;
  #L24dc9a.  v4:= v10 @kind wide;
  #L24dc9c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24dca2.  v0:= 0L;
  #L24dca6.  v2:= lcmp(v10, v0);
  #L24dcaa.  if v2 != 0 then goto L24dcb0;
  #L24dcae.  return v6 @kind object;
  #L24dcb0.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dcb4.  v2:= v2 + v10 @kind long;
  #L24dcb6.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24dcba.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24dcbe.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24dcc2.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L24dcc6.  v3:= v3 - v4 @kind int;
  #L24dcc8.  v3:= (`long`) v3 @kind i2l;
  #L24dcca.  v5:= lcmp(v8, v3);
  #L24dcce.  if v5 < 0 then goto L24dce6;
  #L24dcd2.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24dcd6.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L24dcda.  v3:= v3 - v4 @kind int;
  #L24dcdc.  v3:= (`long`) v3 @kind i2l;
  #L24dcde.  v8:= v8 - v3 @kind long;
  #L24dce0.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24dce4.  goto L24dcbe;
  #L24dce6.  v3:= lcmp(v10, v0);
  #L24dcea.  if v3 <= 0 then goto L24dd52;
  #L24dcee.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24dcf4.  v3:= temp @kind object;
  #L24dcf6.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L24dcfa.  v4:= (`long`) v4 @kind i2l;
  #L24dcfc.  v4:= v4 + v8 @kind long;
  #L24dcfe.  v8:= (`int`) v4 @kind l2i;
  #L24dd00.  v3.`okio.Segment.pos` @type ^`int` := v8;
  #L24dd04.  v8:= v3.`okio.Segment.pos` @type ^`int`;
  #L24dd08.  v9:= (`int`) v10 @kind l2i;
  #L24dd0a.  v8:= v8 + v9 @kind int;
  #L24dd0c.  v9:= v3.`okio.Segment.limit` @type ^`int`;
  #L24dd10.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24dd16.  v8:= temp;
  #L24dd18.  v3.`okio.Segment.limit` @type ^`int` := v8;
  #L24dd1c.  v8:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24dd20.  if v8 != 0 then goto L24dd32;
  #L24dd24.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L24dd28.  v3.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L24dd2c.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L24dd30.  goto L24dd3c;
  #L24dd32.  v8:= v8.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24dd36.  call temp:= `push`(v8, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24dd3c.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L24dd40.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L24dd44.  v8:= v8 - v9 @kind int;
  #L24dd46.  v8:= (`long`) v8 @kind i2l;
  #L24dd48.  v10:= v10 - v8 @kind long;
  #L24dd4a.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24dd4e.  v8:= v0 @kind wide;
  #L24dd50.  goto L24dce6;
  #L24dd52.  return v6 @kind object;
  #L24dd54.  v7:= new `java.lang.IllegalArgumentException`;
  #L24dd58.  v8:= "out == null" @kind object;
  #L24dd5c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24dd62.  throw v7;
  #L24dd64.  return @kind void;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L24ea90.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24dd78.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24eaa4.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L24eaaa.  v0:= temp @kind object;
  #L24eaac.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v13 @kind this, `java.lang.Object` v14 @kind object) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L24c1fc.  v0:= 1I;
  #L24c1fe.  if v13 != v14 then goto L24c204;
  #L24c202.  return v0;
  #L24c204.  v1:= instanceof @variable v14 @type ^`okio.Buffer` @kind boolean;
  #L24c208.  v2:= 0I;
  #L24c20a.  if v1 != 0 then goto L24c210;
  #L24c20e.  return v2;
  #L24c210.  v14:= (`okio.Buffer`) v14 @kind object;
  #L24c214.  v3:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c218.  v5:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c21c.  v1:= lcmp(v3, v5);
  #L24c220.  if v1 == 0 then goto L24c226;
  #L24c224.  return v2;
  #L24c226.  v5:= 0L;
  #L24c22a.  v1:= lcmp(v3, v5);
  #L24c22e.  if v1 != 0 then goto L24c234;
  #L24c232.  return v0;
  #L24c234.  v1:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c238.  v14:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c23c.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L24c240.  v4:= v14.`okio.Segment.pos` @type ^`int`;
  #L24c244.  v7:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c248.  v9:= lcmp(v5, v7);
  #L24c24c.  if v9 >= 0 then goto L24c2ca;
  #L24c250.  v7:= v1.`okio.Segment.limit` @type ^`int`;
  #L24c254.  v7:= v7 - v3 @kind int;
  #L24c256.  v8:= v14.`okio.Segment.limit` @type ^`int`;
  #L24c25a.  v8:= v8 - v4 @kind int;
  #L24c25c.  call temp:= `min`(v7, v8) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24c262.  v7:= temp;
  #L24c264.  v7:= (`long`) v7 @kind i2l;
  #L24c266.  v9:= v4;
  #L24c268.  v4:= v3;
  #L24c26a.  v3:= 0I;
  #L24c26c.  v10:= (`long`) v3 @kind i2l;
  #L24c26e.  v12:= lcmp(v10, v7);
  #L24c272.  if v12 >= 0 then goto L24c29e;
  #L24c276.  v10:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c27a.  v11:= v4 + 1;
  #L24c27e.  v4:= v10[v4] @kind byte;
  #L24c282.  v10:= v14.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c286.  v12:= v9 + 1;
  #L24c28a.  v9:= v10[v9] @kind byte;
  #L24c28e.  if v4 == v9 then goto L24c294;
  #L24c292.  return v2;
  #L24c294.  v3:= v3 + 1;
  #L24c298.  v4:= v11;
  #L24c29a.  v9:= v12;
  #L24c29c.  goto L24c26c;
  #L24c29e.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L24c2a2.  if v4 != v3 then goto L24c2b0;
  #L24c2a6.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24c2aa.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L24c2ae.  goto L24c2b2;
  #L24c2b0.  v3:= v4;
  #L24c2b2.  v4:= v14.`okio.Segment.limit` @type ^`int`;
  #L24c2b6.  if v9 != v4 then goto L24c2c4;
  #L24c2ba.  v14:= v14.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24c2be.  v4:= v14.`okio.Segment.pos` @type ^`int`;
  #L24c2c2.  goto L24c2c6;
  #L24c2c4.  v4:= v9;
  #L24c2c6.  v5:= v5 + v7 @kind long;
  #L24c2c8.  goto L24c244;
  #L24c2ca.  return v0;
}
procedure `boolean` `exhausted`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24c2dc.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c2e0.  v2:= 0L;
  #L24c2e4.  v4:= lcmp(v0, v2);
  #L24c2e8.  if v4 != 0 then goto L24c2f0;
  #L24c2ec.  v0:= 1I;
  #L24c2ee.  goto L24c2f2;
  #L24c2f0.  v0:= 0I;
  #L24c2f2.  return v0;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L24f228.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24c43c.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c440.  v4:= 1L;
  #L24c444.  v2:= v7 @kind wide;
  #L24c446.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24c44c.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c450.  v2:= v0 - v7 @kind long;
  #L24c454.  v4:= lcmp(v2, v7);
  #L24c458.  if v4 <= 0 then goto L24c48e;
  #L24c45c.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c460.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c464.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c468.  v1:= v1 - v2 @kind int;
  #L24c46a.  v1:= (`long`) v1 @kind i2l;
  #L24c46c.  v3:= lcmp(v7, v1);
  #L24c470.  if v3 >= 0 then goto L24c486;
  #L24c474.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c478.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c47c.  v7:= (`int`) v7 @kind l2i;
  #L24c47e.  v0:= v0 + v7 @kind int;
  #L24c480.  v7:= v1[v0] @kind byte;
  #L24c484.  return v7;
  #L24c486.  v7:= v7 - v1 @kind long;
  #L24c488.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24c48c.  goto L24c460;
  #L24c48e.  v7:= v7 - v0 @kind long;
  #L24c490.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c494.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24c498.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c49c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c4a0.  v1:= v1 - v2 @kind int;
  #L24c4a2.  v1:= (`long`) v1 @kind i2l;
  #L24c4a4.  v7:= v7 + v1 @kind long;
  #L24c4a6.  v1:= 0L;
  #L24c4aa.  v3:= lcmp(v7, v1);
  #L24c4ae.  if v3 < 0 then goto L24c494;
  #L24c4b2.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c4b6.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c4ba.  v7:= (`int`) v7 @kind l2i;
  #L24c4bc.  v0:= v0 + v7 @kind int;
  #L24c4be.  v7:= v1[v0] @kind byte;
  #L24c4c2.  return v7;
}
procedure `int` `hashCode`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24c5f0.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c5f4.  if v0 != 0 then goto L24c5fc;
  #L24c5f8.  v0:= 0I;
  #L24c5fa.  return v0;
  #L24c5fc.  v1:= 1I;
  #L24c5fe.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c602.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c606.  if v2 >= v3 then goto L24c61e;
  #L24c60a.  v1:= v1 * 31;
  #L24c60e.  v4:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c612.  v4:= v4[v2] @kind byte;
  #L24c616.  v1:= v1 + v4 @kind int;
  #L24c618.  v2:= v2 + 1;
  #L24c61c.  goto L24c606;
  #L24c61e.  v0:= v0.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24c622.  v2:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c626.  if v0 != v2 then goto L24c5fe;
  #L24c62a.  return v1;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ee4c.  v0:= "HmacSHA1" @kind object;
  #L24ee50.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24ee56.  v2:= temp @kind object;
  #L24ee58.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ee6c.  v0:= "HmacSHA256" @kind object;
  #L24ee70.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24ee76.  v2:= temp @kind object;
  #L24ee78.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ee8c.  v0:= "HmacSHA512" @kind object;
  #L24ee90.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24ee96.  v2:= temp @kind object;
  #L24ee98.  return v2 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 ) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24d0a0.  v2:= 0L;
  #L24d0a4.  v4:= 9223372036854775807L;
  #L24d0ae.  v0:= v6 @kind object;
  #L24d0b0.  v1:= v7;
  #L24d0b2.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L24d0b8.  v0:= temp @kind wide;
  #L24d0ba.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 , `long` v8 ) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24d0cc.  v4:= 9223372036854775807L;
  #L24d0d6.  v0:= v6 @kind object;
  #L24d0d8.  v1:= v7;
  #L24d0da.  v2:= v8 @kind wide;
  #L24d0dc.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L24d0e2.  v7:= temp @kind wide;
  #L24d0e4.  return v7 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v15 @kind this, `byte` v16 , `long` v17 , `long` v19 ) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L24d0f8.  v0:= v15 @kind object;
  #L24d0fa.  v1:= 0L;
  #L24d0fe.  v3:= lcmp(v17, v1);
  #L24d102.  if v3 < 0 then goto L24d1fe;
  #L24d106.  v3:= lcmp(v19, v17);
  #L24d10a.  if v3 < 0 then goto L24d1fe;
  #L24d10e.  v3:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d112.  v5:= lcmp(v19, v3);
  #L24d116.  if v5 <= 0 then goto L24d11c;
  #L24d11a.  goto L24d120;
  #L24d11c.  v3:= v19 @kind wide;
  #L24d120.  v5:= -1L;
  #L24d124.  v7:= lcmp(v17, v3);
  #L24d128.  if v7 != 0 then goto L24d12e;
  #L24d12c.  return v5 @kind wide;
  #L24d12e.  v7:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d132.  if v7 != 0 then goto L24d138;
  #L24d136.  return v5 @kind wide;
  #L24d138.  v8:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d13c.  v10:= v8 - v17 @kind long;
  #L24d140.  v12:= lcmp(v10, v17);
  #L24d144.  if v12 >= 0 then goto L24d16a;
  #L24d148.  v1:= lcmp(v8, v17);
  #L24d14c.  if v1 <= 0 then goto L24d164;
  #L24d150.  v7:= v7.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24d154.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24d158.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d15c.  v1:= v1 - v2 @kind int;
  #L24d15e.  v1:= (`long`) v1 @kind i2l;
  #L24d160.  v8:= v8 - v1 @kind long;
  #L24d162.  goto L24d148;
  #L24d164.  v1:= v17 @kind wide;
  #L24d168.  goto L24d18e;
  #L24d16a.  v8:= v1 @kind wide;
  #L24d16c.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24d170.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d174.  v1:= v1 - v2 @kind int;
  #L24d176.  v1:= (`long`) v1 @kind i2l;
  #L24d178.  v1:= v1 + v8 @kind long;
  #L24d17a.  v10:= lcmp(v1, v17);
  #L24d17e.  if v10 >= 0 then goto L24d18a;
  #L24d182.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d186.  v8:= v1 @kind wide;
  #L24d188.  goto L24d16c;
  #L24d18a.  v1:= v17 @kind wide;
  #L24d18e.  v10:= lcmp(v8, v3);
  #L24d192.  if v10 >= 0 then goto L24d1fc;
  #L24d196.  v10:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d19a.  v11:= v7.`okio.Segment.limit` @type ^`int`;
  #L24d19e.  v11:= (`long`) v11 @kind i2l;
  #L24d1a0.  v13:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d1a4.  v13:= (`long`) v13 @kind i2l;
  #L24d1a6.  v13:= v13 + v3 @kind long;
  #L24d1a8.  v13:= v13 - v8 @kind long;
  #L24d1aa.  call temp:= `min`(v11, v13) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24d1b0.  v11:= temp @kind wide;
  #L24d1b2.  v11:= (`int`) v11 @kind l2i;
  #L24d1b4.  v12:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d1b8.  v12:= (`long`) v12 @kind i2l;
  #L24d1ba.  v12:= v12 + v1 @kind long;
  #L24d1bc.  v12:= v12 - v8 @kind long;
  #L24d1be.  v1:= (`int`) v12 @kind l2i;
  #L24d1c0.  if v1 >= v11 then goto L24d1e2;
  #L24d1c4.  v2:= v10[v1] @kind byte;
  #L24d1c8.  v12:= v16;
  #L24d1cc.  if v2 != v12 then goto L24d1dc;
  #L24d1d0.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d1d4.  v1:= v1 - v2 @kind int;
  #L24d1d6.  v1:= (`long`) v1 @kind i2l;
  #L24d1d8.  v1:= v1 + v8 @kind long;
  #L24d1da.  return v1 @kind wide;
  #L24d1dc.  v1:= v1 + 1;
  #L24d1e0.  goto L24d1c0;
  #L24d1e2.  v12:= v16;
  #L24d1e6.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24d1ea.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L24d1ee.  v1:= v1 - v2 @kind int;
  #L24d1f0.  v1:= (`long`) v1 @kind i2l;
  #L24d1f2.  v1:= v1 + v8 @kind long;
  #L24d1f4.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d1f8.  v8:= v1 @kind wide;
  #L24d1fa.  goto L24d18e;
  #L24d1fc.  return v5 @kind wide;
  #L24d1fe.  v1:= new `java.lang.IllegalArgumentException`;
  #L24d202.  v2:= 3I;
  #L24d204.  v2:= new `java.lang.Object`[v2];
  #L24d208.  v3:= 0I;
  #L24d20a.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d20e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24d214.  v4:= temp @kind object;
  #L24d216.  v2[v3]:= v4 @kind object;
  #L24d21a.  call temp:= `valueOf`(v17) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24d220.  v3:= temp @kind object;
  #L24d222.  v4:= 1I;
  #L24d224.  v2[v4]:= v3 @kind object;
  #L24d228.  v3:= 2I;
  #L24d22a.  call temp:= `valueOf`(v19) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L24d230.  v4:= temp @kind object;
  #L24d232.  v2[v3]:= v4 @kind object;
  #L24d236.  v3:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L24d23a.  call temp:= `format`(v3, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24d240.  v2:= temp @kind object;
  #L24d242.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d248.  throw v1;
  #L24d24a.  return @kind void;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24d25c.  v0:= 0L;
  #L24d260.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L24d266.  v0:= temp @kind wide;
  #L24d268.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object, `long` v20 ) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L24d27c.  v6:= v18 @kind object;
  #L24d280.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24d286.  v0:= temp;
  #L24d288.  if v0 == 0 then goto L24d3de;
  #L24d28c.  v0:= 0L;
  #L24d290.  v2:= lcmp(v20, v0);
  #L24d294.  if v2 < 0 then goto L24d3ce;
  #L24d298.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d29c.  v7:= -1L;
  #L24d2a0.  if v2 != 0 then goto L24d2a6;
  #L24d2a4.  return v7 @kind wide;
  #L24d2a6.  v3:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d2aa.  v9:= v3 - v20 @kind long;
  #L24d2ae.  v5:= lcmp(v9, v20);
  #L24d2b2.  if v5 >= 0 then goto L24d2d2;
  #L24d2b6.  v0:= lcmp(v3, v20);
  #L24d2ba.  if v0 <= 0 then goto L24d2f2;
  #L24d2be.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24d2c2.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d2c6.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d2ca.  v0:= v0 - v1 @kind int;
  #L24d2cc.  v0:= (`long`) v0 @kind i2l;
  #L24d2ce.  v3:= v3 - v0 @kind long;
  #L24d2d0.  goto L24d2b6;
  #L24d2d2.  v3:= v0 @kind wide;
  #L24d2d4.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d2d8.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d2dc.  v0:= v0 - v1 @kind int;
  #L24d2de.  v0:= (`long`) v0 @kind i2l;
  #L24d2e0.  v0:= v0 + v3 @kind long;
  #L24d2e2.  v5:= lcmp(v0, v20);
  #L24d2e6.  if v5 >= 0 then goto L24d2f2;
  #L24d2ea.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d2ee.  v3:= v0 @kind wide;
  #L24d2f0.  goto L24d2d4;
  #L24d2f2.  v0:= 0I;
  #L24d2f4.  v9:= v19 @kind object;
  #L24d2f8.  call temp:= `getByte`(v9, v0) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24d2fe.  v10:= temp;
  #L24d300.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24d306.  v11:= temp;
  #L24d308.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d30c.  v12:= (`long`) v11 @kind i2l;
  #L24d30e.  v0:= v0 - v12 @kind long;
  #L24d310.  v12:= 1L;
  #L24d314.  v12:= v12 + v0 @kind long;
  #L24d316.  v0:= v20 @kind wide;
  #L24d31a.  v5:= v2 @kind object;
  #L24d31c.  v14:= v3 @kind wide;
  #L24d31e.  v2:= lcmp(v14, v12);
  #L24d322.  if v2 >= 0 then goto L24d3ca;
  #L24d326.  v4:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d32a.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L24d32e.  v2:= (`long`) v2 @kind i2l;
  #L24d330.  v7:= v5.`okio.Segment.pos` @type ^`int`;
  #L24d334.  v7:= (`long`) v7 @kind i2l;
  #L24d336.  v7:= v7 + v12 @kind long;
  #L24d338.  v7:= v7 - v14 @kind long;
  #L24d33a.  call temp:= `min`(v2, v7) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24d340.  v2:= temp @kind wide;
  #L24d342.  v7:= (`int`) v2 @kind l2i;
  #L24d344.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L24d348.  v2:= (`long`) v2 @kind i2l;
  #L24d34a.  v2:= v2 + v0 @kind long;
  #L24d34c.  v2:= v2 - v14 @kind long;
  #L24d34e.  v0:= (`int`) v2 @kind l2i;
  #L24d350.  v8:= v0;
  #L24d352.  if v8 >= v7 then goto L24d3aa;
  #L24d356.  v0:= v4[v8] @kind byte;
  #L24d35a.  if v0 != v10 then goto L24d394;
  #L24d35e.  v2:= v8 + 1;
  #L24d362.  v16:= 1I;
  #L24d366.  v0:= v18 @kind object;
  #L24d36a.  v1:= v5 @kind object;
  #L24d36c.  v3:= v19 @kind object;
  #L24d370.  v17:= v4 @kind object;
  #L24d374.  v4:= v16;
  #L24d378.  v6:= v5 @kind object;
  #L24d37a.  v5:= v11;
  #L24d37c.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L24d382.  v0:= temp;
  #L24d384.  if v0 == 0 then goto L24d39a;
  #L24d388.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24d38c.  v8:= v8 - v0 @kind int;
  #L24d38e.  v0:= (`long`) v8 @kind i2l;
  #L24d390.  v0:= v0 + v14 @kind long;
  #L24d392.  return v0 @kind wide;
  #L24d394.  v17:= v4 @kind object;
  #L24d398.  v6:= v5 @kind object;
  #L24d39a.  v8:= v8 + 1;
  #L24d39e.  v5:= v6 @kind object;
  #L24d3a0.  v4:= v17 @kind object;
  #L24d3a4.  v6:= v18 @kind object;
  #L24d3a8.  goto L24d352;
  #L24d3aa.  v6:= v5 @kind object;
  #L24d3ac.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L24d3b0.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24d3b4.  v0:= v0 - v1 @kind int;
  #L24d3b6.  v0:= (`long`) v0 @kind i2l;
  #L24d3b8.  v0:= v0 + v14 @kind long;
  #L24d3ba.  v5:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d3be.  v14:= v0 @kind wide;
  #L24d3c0.  v6:= v18 @kind object;
  #L24d3c4.  v7:= -1L;
  #L24d3c8.  goto L24d31e;
  #L24d3ca.  v0:= v7 @kind wide;
  #L24d3cc.  return v0 @kind wide;
  #L24d3ce.  v0:= new `java.lang.IllegalArgumentException`;
  #L24d3d2.  v1:= "fromIndex < 0" @kind object;
  #L24d3d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d3dc.  throw v0;
  #L24d3de.  v0:= new `java.lang.IllegalArgumentException`;
  #L24d3e2.  v1:= "bytes is empty" @kind object;
  #L24d3e6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d3ec.  throw v0;
  #L24d3ee.  return @kind void;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24d400.  v0:= 0L;
  #L24d404.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L24d40a.  v0:= temp @kind wide;
  #L24d40c.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v11 @kind this, `okio.ByteString` v12 @kind object, `long` v13 ) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L24d420.  v0:= 0L;
  #L24d424.  v2:= lcmp(v13, v0);
  #L24d428.  if v2 < 0 then goto L24d572;
  #L24d42c.  v2:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d430.  v3:= -1L;
  #L24d434.  if v2 != 0 then goto L24d43a;
  #L24d438.  return v3 @kind wide;
  #L24d43a.  v5:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d43e.  v7:= v5 - v13 @kind long;
  #L24d442.  v9:= lcmp(v7, v13);
  #L24d446.  if v9 >= 0 then goto L24d466;
  #L24d44a.  v0:= lcmp(v5, v13);
  #L24d44e.  if v0 <= 0 then goto L24d486;
  #L24d452.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24d456.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d45a.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d45e.  v0:= v0 - v1 @kind int;
  #L24d460.  v0:= (`long`) v0 @kind i2l;
  #L24d462.  v5:= v5 - v0 @kind long;
  #L24d464.  goto L24d44a;
  #L24d466.  v5:= v0 @kind wide;
  #L24d468.  v0:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d46c.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d470.  v0:= v0 - v1 @kind int;
  #L24d472.  v0:= (`long`) v0 @kind i2l;
  #L24d474.  v0:= v0 + v5 @kind long;
  #L24d476.  v7:= lcmp(v0, v13);
  #L24d47a.  if v7 >= 0 then goto L24d486;
  #L24d47e.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d482.  v5:= v0 @kind wide;
  #L24d484.  goto L24d468;
  #L24d486.  call temp:= `size`(v12) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24d48c.  v0:= temp;
  #L24d48e.  v1:= 2I;
  #L24d490.  v7:= 0I;
  #L24d492.  if v0 != v1 then goto L24d502;
  #L24d496.  call temp:= `getByte`(v12, v7) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24d49c.  v0:= temp;
  #L24d49e.  v1:= 1I;
  #L24d4a0.  call temp:= `getByte`(v12, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24d4a6.  v12:= temp;
  #L24d4a8.  v7:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d4ac.  v1:= lcmp(v5, v7);
  #L24d4b0.  if v1 >= 0 then goto L24d570;
  #L24d4b4.  v1:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d4b8.  v7:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d4bc.  v7:= (`long`) v7 @kind i2l;
  #L24d4be.  v7:= v7 + v13 @kind long;
  #L24d4c0.  v7:= v7 - v5 @kind long;
  #L24d4c2.  v13:= (`int`) v7 @kind l2i;
  #L24d4c4.  v14:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d4c8.  if v13 >= v14 then goto L24d4ec;
  #L24d4cc.  v7:= v1[v13] @kind byte;
  #L24d4d0.  if v7 == v0 then goto L24d4e0;
  #L24d4d4.  if v7 != v12 then goto L24d4da;
  #L24d4d8.  goto L24d4e0;
  #L24d4da.  v13:= v13 + 1;
  #L24d4de.  goto L24d4c8;
  #L24d4e0.  v12:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d4e4.  v13:= v13 - v12 @kind int;
  #L24d4e6.  v12:= (`long`) v13 @kind i2l;
  #L24d4e8.  v12:= v12 + v5 @kind long;
  #L24d4ea.  return v12 @kind wide;
  #L24d4ec.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d4f0.  v14:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d4f4.  v13:= v13 - v14 @kind int;
  #L24d4f6.  v13:= (`long`) v13 @kind i2l;
  #L24d4f8.  v13:= v13 + v5 @kind long;
  #L24d4fa.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d4fe.  v5:= v13 @kind wide;
  #L24d500.  goto L24d4a8;
  #L24d502.  call temp:= `internalArray`(v12) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L24d508.  v12:= temp @kind object;
  #L24d50a.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d50e.  v8:= lcmp(v5, v0);
  #L24d512.  if v8 >= 0 then goto L24d570;
  #L24d516.  v0:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d51a.  v1:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d51e.  v8:= (`long`) v1 @kind i2l;
  #L24d520.  v8:= v8 + v13 @kind long;
  #L24d522.  v8:= v8 - v5 @kind long;
  #L24d524.  v13:= (`int`) v8 @kind l2i;
  #L24d526.  v14:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d52a.  if v13 >= v14 then goto L24d55a;
  #L24d52e.  v1:= v0[v13] @kind byte;
  #L24d532.  v8:= length @variable v12;
  #L24d534.  v9:= 0I;
  #L24d536.  if v9 >= v8 then goto L24d554;
  #L24d53a.  v10:= v12[v9] @kind byte;
  #L24d53e.  if v1 != v10 then goto L24d54e;
  #L24d542.  v12:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d546.  v13:= v13 - v12 @kind int;
  #L24d548.  v12:= (`long`) v13 @kind i2l;
  #L24d54a.  v12:= v12 + v5 @kind long;
  #L24d54c.  return v12 @kind wide;
  #L24d54e.  v9:= v9 + 1;
  #L24d552.  goto L24d536;
  #L24d554.  v13:= v13 + 1;
  #L24d558.  goto L24d52a;
  #L24d55a.  v13:= v2.`okio.Segment.limit` @type ^`int`;
  #L24d55e.  v14:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d562.  v13:= v13 - v14 @kind int;
  #L24d564.  v13:= (`long`) v13 @kind i2l;
  #L24d566.  v13:= v13 + v5 @kind long;
  #L24d568.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d56c.  v5:= v13 @kind wide;
  #L24d56e.  goto L24d50a;
  #L24d570.  return v3 @kind wide;
  #L24d572.  v12:= new `java.lang.IllegalArgumentException`;
  #L24d576.  v13:= "fromIndex < 0" @kind object;
  #L24d57a.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d580.  throw v12;
  #L24d582.  return @kind void;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cb98.  v0:= new `okio.Buffer$2`;
  #L24cb9c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L24cba2.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c304.  v0:= 1I;
  #L24c306.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24eeac.  v0:= "MD5" @kind object;
  #L24eeb0.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24eeb6.  v0:= temp @kind object;
  #L24eeb8.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cbb4.  v0:= new `okio.Buffer$1`;
  #L24cbb8.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L24cbbe.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24c318.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24c31e.  v5:= temp;
  #L24c320.  v4:= 0I;
  #L24c322.  v0:= v6 @kind object;
  #L24c324.  v1:= v7 @kind wide;
  #L24c326.  v3:= v9 @kind object;
  #L24c328.  call temp:= `rangeEquals`(v0, v1, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L24c32e.  v7:= temp;
  #L24c330.  return v7;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v6 @kind this, `long` v7 , `okio.ByteString` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24c344.  v0:= 0I;
  #L24c346.  v1:= 0L;
  #L24c34a.  v3:= lcmp(v7, v1);
  #L24c34e.  if v3 < 0 then goto L24c3a8;
  #L24c352.  if v10 < 0 then goto L24c3a8;
  #L24c356.  if v11 < 0 then goto L24c3a8;
  #L24c35a.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c35e.  v1:= v1 - v7 @kind long;
  #L24c360.  v3:= (`long`) v11 @kind i2l;
  #L24c362.  v5:= lcmp(v1, v3);
  #L24c366.  if v5 < 0 then goto L24c3a8;
  #L24c36a.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24c370.  v1:= temp;
  #L24c372.  v1:= v1 - v10 @kind int;
  #L24c374.  if v1 >= v11 then goto L24c37a;
  #L24c378.  goto L24c3a8;
  #L24c37a.  v1:= 0I;
  #L24c37c.  if v1 >= v11 then goto L24c3a4;
  #L24c380.  v2:= (`long`) v1 @kind i2l;
  #L24c382.  v2:= v2 + v7 @kind long;
  #L24c384.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24c38a.  v2:= temp;
  #L24c38c.  v3:= v10 + v1 @kind int;
  #L24c390.  call temp:= `getByte`(v9, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24c396.  v3:= temp;
  #L24c398.  if v2 == v3 then goto L24c39e;
  #L24c39c.  return v0;
  #L24c39e.  v1:= v1 + 1;
  #L24c3a2.  goto L24c37c;
  #L24c3a4.  v7:= 1I;
  #L24c3a6.  return v7;
  #L24c3a8.  return v0;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24c6dc.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c6e0.  if v0 != 0 then goto L24c6e8;
  #L24c6e4.  v7:= -1I;
  #L24c6e6.  return v7;
  #L24c6e8.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L24c6ee.  v1:= temp;
  #L24c6f0.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c6f4.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c6f8.  v2:= v2 - v3 @kind int;
  #L24c6fa.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24c700.  v1:= temp;
  #L24c702.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c706.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c70a.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L24c710.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c714.  v7:= v7 + v1 @kind int;
  #L24c716.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L24c71a.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c71e.  v4:= (`long`) v1 @kind i2l;
  #L24c720.  v2:= v2 - v4 @kind long;
  #L24c722.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24c726.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c72a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c72e.  if v7 != v2 then goto L24c744;
  #L24c732.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24c738.  v7:= temp @kind object;
  #L24c73a.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L24c73e.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24c744.  return v1;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24c63c.  v0:= length @variable v3;
  #L24c63e.  v1:= 0I;
  #L24c640.  call temp:= `read`(v2, v3, v1, v0) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L24c646.  v3:= temp;
  #L24c648.  return v3;
}
procedure `int` `read`(`okio.Buffer` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24c65c.  v0:= length @variable v8;
  #L24c65e.  v1:= (`long`) v0 @kind i2l;
  #L24c660.  v3:= (`long`) v9 @kind i2l;
  #L24c662.  v5:= (`long`) v10 @kind i2l;
  #L24c664.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24c66a.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c66e.  if v0 != 0 then goto L24c676;
  #L24c672.  v8:= -1I;
  #L24c674.  return v8;
  #L24c676.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c67a.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c67e.  v1:= v1 - v2 @kind int;
  #L24c680.  call temp:= `min`(v10, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24c686.  v10:= temp;
  #L24c688.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c68c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c690.  call `arraycopy`(v1, v2, v8, v9, v10) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L24c696.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c69a.  v8:= v8 + v10 @kind int;
  #L24c69c.  v0.`okio.Segment.pos` @type ^`int` := v8;
  #L24c6a0.  v8:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c6a4.  v1:= (`long`) v10 @kind i2l;
  #L24c6a6.  v8:= v8 - v1 @kind long;
  #L24c6a8.  v7.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L24c6ac.  v8:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c6b0.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c6b4.  if v8 != v9 then goto L24c6ca;
  #L24c6b8.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24c6be.  v8:= temp @kind object;
  #L24c6c0.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L24c6c4.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24c6ca.  return v10;
}
procedure `long` `read`(`okio.Buffer` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24d594.  if v6 == 0 then goto L24d5f6;
  #L24d598.  v0:= 0L;
  #L24d59c.  v2:= lcmp(v7, v0);
  #L24d5a0.  if v2 < 0 then goto L24d5c8;
  #L24d5a4.  v2:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d5a8.  v4:= lcmp(v2, v0);
  #L24d5ac.  if v4 != 0 then goto L24d5b6;
  #L24d5b0.  v6:= -1L;
  #L24d5b4.  return v6 @kind wide;
  #L24d5b6.  v0:= lcmp(v7, v2);
  #L24d5ba.  if v0 <= 0 then goto L24d5c0;
  #L24d5be.  v7:= v2 @kind wide;
  #L24d5c0.  call `write`(v6, v5, v7) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24d5c6.  return v7 @kind wide;
  #L24d5c8.  v6:= new `java.lang.IllegalArgumentException`;
  #L24d5cc.  v0:= new `java.lang.StringBuilder`;
  #L24d5d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24d5d6.  v1:= "byteCount < 0: " @kind object;
  #L24d5da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d5e0.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d5e6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24d5ec.  v7:= temp @kind object;
  #L24d5ee.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d5f4.  throw v6;
  #L24d5f6.  v6:= new `java.lang.IllegalArgumentException`;
  #L24d5fa.  v7:= "sink == null" @kind object;
  #L24d5fe.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d604.  throw v6;
}
procedure `long` `readAll`(`okio.Buffer` v5 @kind this, `okio.Sink` v6 @kind object) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24d618.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d61c.  v2:= 0L;
  #L24d620.  v4:= lcmp(v0, v2);
  #L24d624.  if v4 <= 0 then goto L24d62e;
  #L24d628.  call `write`(v6, v5, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24d62e.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e9e0.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L24e9e4.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L24e9ea.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L24e9f0.  v0:= temp @kind object;
  #L24e9f2.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ea04.  v0:= v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L24ea08.  if v0 != 0 then goto L24ea18;
  #L24ea0c.  v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v1 @kind object;
  #L24ea10.  v0:= 1I;
  #L24ea12.  v2.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L24ea16.  return v2 @kind object;
  #L24ea18.  v2:= new `java.lang.IllegalStateException`;
  #L24ea1c.  v0:= "already attached to a buffer" @kind object;
  #L24ea20.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ea26.  throw v2;
}
procedure `byte` `readByte`(`okio.Buffer` v9 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24c4d4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c4d8.  v2:= 0L;
  #L24c4dc.  v4:= lcmp(v0, v2);
  #L24c4e0.  if v4 == 0 then goto L24c528;
  #L24c4e4.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c4e8.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c4ec.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c4f0.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c4f4.  v4:= v1 + 1;
  #L24c4f8.  v1:= v3[v1] @kind byte;
  #L24c4fc.  v5:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c500.  v7:= 1L;
  #L24c504.  v5:= v5 - v7 @kind long;
  #L24c506.  v9.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L24c50a.  if v4 != v2 then goto L24c522;
  #L24c50e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24c514.  v2:= temp @kind object;
  #L24c516.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L24c51a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24c520.  goto L24c526;
  #L24c522.  v0.`okio.Segment.pos` @type ^`int` := v4;
  #L24c526.  return v1;
  #L24c528.  v0:= new `java.lang.IllegalStateException`;
  #L24c52c.  v1:= "size == 0" @kind object;
  #L24c530.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24c536.  throw v0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24c548.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c54c.  call temp:= `readByteArray`(v2, v0) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L24c552.  v0:= temp @kind object;
  #L24c554.  return v0 @kind object;
  #L24c556.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L24c558.  v1:= new `java.lang.AssertionError`;
  #L24c55c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24c562.  throw v1;
  catch `java.io.EOFException` @[L24c548..L24c554] goto L24c556;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24c584.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c588.  v2:= 0L;
  #L24c58c.  v4:= v7 @kind wide;
  #L24c58e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24c594.  v0:= 2147483647L;
  #L24c59a.  v2:= lcmp(v7, v0);
  #L24c59e.  if v2 > 0 then goto L24c5b0;
  #L24c5a2.  v7:= (`int`) v7 @kind l2i;
  #L24c5a4.  v7:= new `byte`[v7];
  #L24c5a8.  call `readFully`(v6, v7) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L24c5ae.  return v7 @kind object;
  #L24c5b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L24c5b4.  v1:= new `java.lang.StringBuilder`;
  #L24c5b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24c5be.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L24c5c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c5c8.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c5ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24c5d4.  v7:= temp @kind object;
  #L24c5d6.  call `<init>`(v0, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24c5dc.  throw v0;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24eecc.  v0:= new `okio.ByteString`;
  #L24eed0.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L24eed6.  v1:= temp @kind object;
  #L24eed8.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L24eede.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24eef0.  v0:= new `okio.ByteString`;
  #L24eef4.  call temp:= `readByteArray`(v1, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L24eefa.  v2:= temp @kind object;
  #L24eefc.  call `<init>`(v0, v2) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L24ef02.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v17 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L24d640.  v0:= v17 @kind object;
  #L24d644.  v1:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d648.  v3:= 0L;
  #L24d64c.  v5:= lcmp(v1, v3);
  #L24d650.  if v5 == 0 then goto L24d7b2;
  #L24d654.  v5:= -7L;
  #L24d658.  v7:= 0I;
  #L24d65a.  v8:= v5 @kind wide;
  #L24d65c.  v5:= 0I;
  #L24d65e.  v6:= 0I;
  #L24d660.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d664.  v11:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d668.  v12:= v10.`okio.Segment.pos` @type ^`int`;
  #L24d66c.  v13:= v10.`okio.Segment.limit` @type ^`int`;
  #L24d670.  if v12 >= v13 then goto L24d774;
  #L24d674.  v15:= v11[v12] @kind byte;
  #L24d678.  v14:= 48I;
  #L24d67c.  if v15 < v14 then goto L24d718;
  #L24d680.  v1:= 57I;
  #L24d684.  if v15 > v1 then goto L24d718;
  #L24d688.  v14:= v14 - v15 @kind int;
  #L24d68a.  v1:= -922337203685477580L;
  #L24d694.  v16:= lcmp(v3, v1);
  #L24d698.  if v16 < 0 then goto L24d6be;
  #L24d69c.  v16:= lcmp(v3, v1);
  #L24d6a0.  if v16 != 0 then goto L24d6b0;
  #L24d6a4.  v1:= (`long`) v14 @kind i2l;
  #L24d6a6.  v16:= lcmp(v1, v8);
  #L24d6aa.  if v16 >= 0 then goto L24d6b0;
  #L24d6ae.  goto L24d6be;
  #L24d6b0.  v1:= 10L;
  #L24d6b4.  v3:= v3 * v1 @kind long;
  #L24d6b8.  v1:= (`long`) v14 @kind i2l;
  #L24d6ba.  v3:= v3 + v1 @kind long;
  #L24d6bc.  goto L24d72c;
  #L24d6be.  v1:= new `okio.Buffer`;
  #L24d6c2.  call `<init>`(v1) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24d6c8.  call temp:= `writeDecimalLong`(v1, v3) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24d6ce.  v1:= temp @kind object;
  #L24d6d0.  call temp:= `writeByte`(v1, v15) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24d6d6.  v1:= temp @kind object;
  #L24d6d8.  if v5 != 0 then goto L24d6e2;
  #L24d6dc.  call temp:= `readByte`(v1) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24d6e2.  v2:= new `java.lang.NumberFormatException`;
  #L24d6e6.  v3:= new `java.lang.StringBuilder`;
  #L24d6ea.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24d6f0.  v4:= "Number too large: " @kind object;
  #L24d6f4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d6fa.  call temp:= `readUtf8`(v1) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L24d700.  v1:= temp @kind object;
  #L24d702.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d708.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24d70e.  v1:= temp @kind object;
  #L24d710.  call `<init>`(v2, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d716.  throw v2;
  #L24d718.  v1:= 45I;
  #L24d71c.  if v15 != v1 then goto L24d736;
  #L24d720.  if v7 != 0 then goto L24d736;
  #L24d724.  v1:= 1L;
  #L24d728.  v8:= v8 - v1 @kind long;
  #L24d72a.  v5:= 1I;
  #L24d72c.  v12:= v12 + 1;
  #L24d730.  v7:= v7 + 1;
  #L24d734.  goto L24d670;
  #L24d736.  if v7 == 0 then goto L24d73e;
  #L24d73a.  v6:= 1I;
  #L24d73c.  goto L24d774;
  #L24d73e.  v1:= new `java.lang.NumberFormatException`;
  #L24d742.  v2:= new `java.lang.StringBuilder`;
  #L24d746.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24d74c.  v3:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L24d750.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d756.  call temp:= `toHexString`(v15) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24d75c.  v3:= temp @kind object;
  #L24d75e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d764.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24d76a.  v2:= temp @kind object;
  #L24d76c.  call `<init>`(v1, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d772.  throw v1;
  #L24d774.  if v12 != v13 then goto L24d78c;
  #L24d778.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24d77e.  v1:= temp @kind object;
  #L24d780.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L24d784.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24d78a.  goto L24d790;
  #L24d78c.  v10.`okio.Segment.pos` @type ^`int` := v12;
  #L24d790.  if v6 != 0 then goto L24d79c;
  #L24d794.  v1:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d798.  if v1 != 0 then goto L24d660;
  #L24d79c.  v1:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d7a0.  v6:= (`long`) v7 @kind i2l;
  #L24d7a2.  v1:= v1 - v6 @kind long;
  #L24d7a4.  v0.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L24d7a8.  if v5 == 0 then goto L24d7ae;
  #L24d7ac.  goto L24d7b0;
  #L24d7ae.  v3:= -v3 @kind long;
  #L24d7b0.  return v3 @kind wide;
  #L24d7b2.  v1:= new `java.lang.IllegalStateException`;
  #L24d7b6.  v2:= "size == 0" @kind object;
  #L24d7ba.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d7c0.  throw v1;
  #L24d7c2.  return @kind void;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24dd8c.  v0:= 9223372036854775807L;
  #L24dd96.  v2:= 1I;
  #L24dd98.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L24dd9e.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24ddb0.  v0:= 0L;
  #L24ddb4.  v2:= lcmp(v5, v0);
  #L24ddb8.  if v2 < 0 then goto L24ddc6;
  #L24ddbc.  v0:= 0I;
  #L24ddbe.  call `readFrom`(v3, v4, v5, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L24ddc4.  return v3 @kind object;
  #L24ddc6.  v4:= new `java.lang.IllegalArgumentException`;
  #L24ddca.  v0:= new `java.lang.StringBuilder`;
  #L24ddce.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24ddd4.  v1:= "byteCount < 0: " @kind object;
  #L24ddd8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ddde.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24dde4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24ddea.  v5:= temp @kind object;
  #L24ddec.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ddf2.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24f314.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f318.  v2:= lcmp(v0, v5);
  #L24f31c.  if v2 < 0 then goto L24f328;
  #L24f320.  call `write`(v4, v3, v5) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24f326.  return @kind void;
  #L24f328.  call `write`(v4, v3, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24f32e.  v4:= new `java.io.EOFException`;
  #L24f332.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24f338.  throw v4;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24f2d8.  v0:= 0I;
  #L24f2da.  v1:= length @variable v4;
  #L24f2dc.  if v0 >= v1 then goto L24f302;
  #L24f2e0.  v1:= length @variable v4;
  #L24f2e2.  v1:= v1 - v0 @kind int;
  #L24f2e4.  call temp:= `read`(v3, v4, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L24f2ea.  v1:= temp;
  #L24f2ec.  v2:= -1I;
  #L24f2ee.  if v1 == v2 then goto L24f2f6;
  #L24f2f2.  v0:= v0 + v1 @kind int;
  #L24f2f4.  goto L24f2da;
  #L24f2f6.  v4:= new `java.io.EOFException`;
  #L24f2fa.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24f300.  throw v4;
  #L24f302.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L24d7d4.  v0:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d7d8.  v2:= 0L;
  #L24d7dc.  v4:= lcmp(v0, v2);
  #L24d7e0.  if v4 == 0 then goto L24d92e;
  #L24d7e4.  v0:= 0I;
  #L24d7e6.  v4:= v2 @kind wide;
  #L24d7e8.  v1:= 0I;
  #L24d7ea.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d7ee.  v7:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d7f2.  v8:= v6.`okio.Segment.pos` @type ^`int`;
  #L24d7f6.  v9:= v6.`okio.Segment.limit` @type ^`int`;
  #L24d7fa.  if v8 >= v9 then goto L24d8f8;
  #L24d7fe.  v10:= v7[v8] @kind byte;
  #L24d802.  v11:= 48I;
  #L24d806.  if v10 < v11 then goto L24d818;
  #L24d80a.  v11:= 57I;
  #L24d80e.  if v10 > v11 then goto L24d818;
  #L24d812.  v11:= v10 + -48;
  #L24d816.  goto L24d84a;
  #L24d818.  v11:= 97I;
  #L24d81c.  if v10 < v11 then goto L24d832;
  #L24d820.  v11:= 102I;
  #L24d824.  if v10 > v11 then goto L24d832;
  #L24d828.  v11:= v10 + -97;
  #L24d82c.  v11:= v11 + 10;
  #L24d830.  goto L24d84a;
  #L24d832.  v11:= 65I;
  #L24d836.  if v10 < v11 then goto L24d8ba;
  #L24d83a.  v11:= 70I;
  #L24d83e.  if v10 > v11 then goto L24d8ba;
  #L24d842.  v11:= v10 + -65;
  #L24d846.  v11:= v11 + 10;
  #L24d84a.  v12:= -3.105036184601418E231D;
  #L24d84e.  v12:= v12 ^& v4 @kind long;
  #L24d850.  v14:= lcmp(v12, v2);
  #L24d854.  if v14 != 0 then goto L24d86a;
  #L24d858.  v10:= 4I;
  #L24d85a.  v4:= v4 ^< v10 @kind long;
  #L24d85c.  v10:= (`long`) v11 @kind i2l;
  #L24d85e.  v4:= v4 ^| v10 @kind long;
  #L24d860.  v8:= v8 + 1;
  #L24d864.  v1:= v1 + 1;
  #L24d868.  goto L24d7fa;
  #L24d86a.  v0:= new `okio.Buffer`;
  #L24d86e.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24d874.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24d87a.  v0:= temp @kind object;
  #L24d87c.  call temp:= `writeByte`(v0, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24d882.  v0:= temp @kind object;
  #L24d884.  v1:= new `java.lang.NumberFormatException`;
  #L24d888.  v2:= new `java.lang.StringBuilder`;
  #L24d88c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24d892.  v3:= "Number too large: " @kind object;
  #L24d896.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d89c.  call temp:= `readUtf8`(v0) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L24d8a2.  v0:= temp @kind object;
  #L24d8a4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d8aa.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24d8b0.  v0:= temp @kind object;
  #L24d8b2.  call `<init>`(v1, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d8b8.  throw v1;
  #L24d8ba.  if v1 == 0 then goto L24d8c2;
  #L24d8be.  v0:= 1I;
  #L24d8c0.  goto L24d8f8;
  #L24d8c2.  v0:= new `java.lang.NumberFormatException`;
  #L24d8c6.  v1:= new `java.lang.StringBuilder`;
  #L24d8ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24d8d0.  v2:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L24d8d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d8da.  call temp:= `toHexString`(v10) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24d8e0.  v2:= temp @kind object;
  #L24d8e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24d8e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24d8ee.  v1:= temp @kind object;
  #L24d8f0.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d8f6.  throw v0;
  #L24d8f8.  if v8 != v9 then goto L24d910;
  #L24d8fc.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24d902.  v7:= temp @kind object;
  #L24d904.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L24d908.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24d90e.  goto L24d914;
  #L24d910.  v6.`okio.Segment.pos` @type ^`int` := v8;
  #L24d914.  if v0 != 0 then goto L24d920;
  #L24d918.  v6:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d91c.  if v6 != 0 then goto L24d7ea;
  #L24d920.  v2:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d924.  v0:= (`long`) v1 @kind i2l;
  #L24d926.  v2:= v2 - v0 @kind long;
  #L24d928.  v15.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24d92c.  return v4 @kind wide;
  #L24d92e.  v0:= new `java.lang.IllegalStateException`;
  #L24d932.  v1:= "size == 0" @kind object;
  #L24d936.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24d93c.  throw v0;
  #L24d93e.  return @kind void;
}
procedure `int` `readInt`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24c758.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c75c.  v2:= 4L;
  #L24c760.  v4:= lcmp(v0, v2);
  #L24c764.  if v4 < 0 then goto L24c830;
  #L24c768.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24c76c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24c770.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L24c774.  v5:= v4 - v1 @kind int;
  #L24c778.  v6:= 4I;
  #L24c77a.  if v5 >= v6 then goto L24c7c2;
  #L24c77e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24c784.  v0:= temp;
  #L24c786.  v0:= v0 ^& 255;
  #L24c78a.  v0:= v0 ^< 24;
  #L24c78e.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24c794.  v1:= temp;
  #L24c796.  v1:= v1 ^& 255;
  #L24c79a.  v1:= v1 ^< 16;
  #L24c79e.  v0:= v0 ^| v1 @kind int;
  #L24c7a0.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24c7a6.  v1:= temp;
  #L24c7a8.  v1:= v1 ^& 255;
  #L24c7ac.  v1:= v1 ^< 8;
  #L24c7b0.  v0:= v0 ^| v1 @kind int;
  #L24c7b2.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24c7b8.  v1:= temp;
  #L24c7ba.  v1:= v1 ^& 255;
  #L24c7be.  v0:= v0 ^| v1 @kind int;
  #L24c7c0.  return v0;
  #L24c7c2.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24c7c6.  v6:= v1 + 1;
  #L24c7ca.  v1:= v5[v1] @kind byte;
  #L24c7ce.  v1:= v1 ^& 255;
  #L24c7d2.  v1:= v1 ^< 24;
  #L24c7d6.  v7:= v6 + 1;
  #L24c7da.  v6:= v5[v6] @kind byte;
  #L24c7de.  v6:= v6 ^& 255;
  #L24c7e2.  v6:= v6 ^< 16;
  #L24c7e6.  v1:= v1 ^| v6 @kind int;
  #L24c7e8.  v6:= v7 + 1;
  #L24c7ec.  v7:= v5[v7] @kind byte;
  #L24c7f0.  v7:= v7 ^& 255;
  #L24c7f4.  v7:= v7 ^< 8;
  #L24c7f8.  v1:= v1 ^| v7 @kind int;
  #L24c7fa.  v7:= v6 + 1;
  #L24c7fe.  v5:= v5[v6] @kind byte;
  #L24c802.  v5:= v5 ^& 255;
  #L24c806.  v1:= v1 ^| v5 @kind int;
  #L24c808.  v5:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c80c.  v5:= v5 - v2 @kind long;
  #L24c80e.  v8.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L24c812.  if v7 != v4 then goto L24c82a;
  #L24c816.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24c81c.  v2:= temp @kind object;
  #L24c81e.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L24c822.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24c828.  goto L24c82e;
  #L24c82a.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L24c82e.  return v1;
  #L24c830.  v0:= new `java.lang.IllegalStateException`;
  #L24c834.  v1:= new `java.lang.StringBuilder`;
  #L24c838.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24c83e.  v2:= "size < 4: " @kind object;
  #L24c842.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c848.  v2:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c84c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c852.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24c858.  v1:= temp @kind object;
  #L24c85a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24c860.  throw v0;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24c874.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L24c87a.  v0:= temp;
  #L24c87c.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L24c882.  v0:= temp;
  #L24c884.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v15 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L24d950.  v0:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24d954.  v2:= 8L;
  #L24d958.  v4:= lcmp(v0, v2);
  #L24d95c.  if v4 < 0 then goto L24da66;
  #L24d960.  v0:= v15.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d964.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24d968.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L24d96c.  v5:= v4 - v1 @kind int;
  #L24d970.  v6:= 32I;
  #L24d974.  v7:= 8I;
  #L24d978.  if v5 >= v7 then goto L24d9a4;
  #L24d97c.  call temp:= `readInt`(v15) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L24d982.  v0:= temp;
  #L24d984.  v0:= (`long`) v0 @kind i2l;
  #L24d986.  v2:= 4294967295L;
  #L24d990.  v0:= v0 ^& v2 @kind long;
  #L24d992.  v0:= v0 ^< v6 @kind long;
  #L24d994.  call temp:= `readInt`(v15) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L24d99a.  v4:= temp;
  #L24d99c.  v4:= (`long`) v4 @kind i2l;
  #L24d99e.  v2:= v2 ^& v4 @kind long;
  #L24d9a0.  v0:= v0 ^| v2 @kind long;
  #L24d9a2.  return v0 @kind wide;
  #L24d9a4.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24d9a8.  v8:= v1 + 1;
  #L24d9ac.  v1:= v5[v1] @kind byte;
  #L24d9b0.  v9:= (`long`) v1 @kind i2l;
  #L24d9b2.  v11:= 255L;
  #L24d9b6.  v9:= v9 ^& v11 @kind long;
  #L24d9b8.  v1:= 56I;
  #L24d9bc.  v9:= v9 ^< v1 @kind long;
  #L24d9be.  v1:= v8 + 1;
  #L24d9c2.  v8:= v5[v8] @kind byte;
  #L24d9c6.  v13:= (`long`) v8 @kind i2l;
  #L24d9c8.  v13:= v13 ^& v11 @kind long;
  #L24d9ca.  v8:= 48I;
  #L24d9ce.  v13:= v13 ^< v8 @kind long;
  #L24d9d0.  v9:= v9 ^| v13 @kind long;
  #L24d9d2.  v8:= v1 + 1;
  #L24d9d6.  v1:= v5[v1] @kind byte;
  #L24d9da.  v13:= (`long`) v1 @kind i2l;
  #L24d9dc.  v13:= v13 ^& v11 @kind long;
  #L24d9de.  v1:= 40I;
  #L24d9e2.  v13:= v13 ^< v1 @kind long;
  #L24d9e4.  v9:= v9 ^| v13 @kind long;
  #L24d9e6.  v1:= v8 + 1;
  #L24d9ea.  v8:= v5[v8] @kind byte;
  #L24d9ee.  v13:= (`long`) v8 @kind i2l;
  #L24d9f0.  v13:= v13 ^& v11 @kind long;
  #L24d9f2.  v13:= v13 ^< v6 @kind long;
  #L24d9f4.  v9:= v9 ^| v13 @kind long;
  #L24d9f6.  v6:= v1 + 1;
  #L24d9fa.  v1:= v5[v1] @kind byte;
  #L24d9fe.  v13:= (`long`) v1 @kind i2l;
  #L24da00.  v13:= v13 ^& v11 @kind long;
  #L24da02.  v1:= 24I;
  #L24da06.  v13:= v13 ^< v1 @kind long;
  #L24da08.  v9:= v9 ^| v13 @kind long;
  #L24da0a.  v1:= v6 + 1;
  #L24da0e.  v6:= v5[v6] @kind byte;
  #L24da12.  v13:= (`long`) v6 @kind i2l;
  #L24da14.  v13:= v13 ^& v11 @kind long;
  #L24da16.  v6:= 16I;
  #L24da1a.  v13:= v13 ^< v6 @kind long;
  #L24da1c.  v9:= v9 ^| v13 @kind long;
  #L24da1e.  v6:= v1 + 1;
  #L24da22.  v1:= v5[v1] @kind byte;
  #L24da26.  v13:= (`long`) v1 @kind i2l;
  #L24da28.  v13:= v13 ^& v11 @kind long;
  #L24da2a.  v7:= v13 ^< v7 @kind long;
  #L24da2e.  v7:= v7 ^| v9 @kind long;
  #L24da30.  v1:= v6 + 1;
  #L24da34.  v5:= v5[v6] @kind byte;
  #L24da38.  v5:= (`long`) v5 @kind i2l;
  #L24da3a.  v5:= v5 ^& v11 @kind long;
  #L24da3c.  v5:= v5 ^| v7 @kind long;
  #L24da3e.  v7:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24da42.  v7:= v7 - v2 @kind long;
  #L24da44.  v15.`okio.Buffer.size` @type ^`long` := v7 @kind wide;
  #L24da48.  if v1 != v4 then goto L24da60;
  #L24da4c.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24da52.  v1:= temp @kind object;
  #L24da54.  v15.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L24da58.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24da5e.  goto L24da64;
  #L24da60.  v0.`okio.Segment.pos` @type ^`int` := v1;
  #L24da64.  return v5 @kind wide;
  #L24da66.  v0:= new `java.lang.IllegalStateException`;
  #L24da6a.  v1:= new `java.lang.StringBuilder`;
  #L24da6e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24da74.  v2:= "size < 8: " @kind object;
  #L24da78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24da7e.  v2:= v15.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24da82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24da88.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24da8e.  v1:= temp @kind object;
  #L24da90.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24da96.  throw v0;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24daa8.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L24daae.  v0:= temp @kind wide;
  #L24dab0.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L24dab6.  v0:= temp @kind wide;
  #L24dab8.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v8 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24f088.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f08c.  v2:= 2L;
  #L24f090.  v4:= lcmp(v0, v2);
  #L24f094.  if v4 < 0 then goto L24f11c;
  #L24f098.  v0:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f09c.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24f0a0.  v4:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f0a4.  v5:= v4 - v1 @kind int;
  #L24f0a8.  v6:= 2I;
  #L24f0aa.  if v5 >= v6 then goto L24f0d0;
  #L24f0ae.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24f0b4.  v0:= temp;
  #L24f0b6.  v0:= v0 ^& 255;
  #L24f0ba.  v0:= v0 ^< 8;
  #L24f0be.  call temp:= `readByte`(v8) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L24f0c4.  v1:= temp;
  #L24f0c6.  v1:= v1 ^& 255;
  #L24f0ca.  v0:= v0 ^| v1 @kind int;
  #L24f0cc.  v0:= (`short`) v0 @kind i2s;
  #L24f0ce.  return v0;
  #L24f0d0.  v5:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24f0d4.  v6:= v1 + 1;
  #L24f0d8.  v1:= v5[v1] @kind byte;
  #L24f0dc.  v1:= v1 ^& 255;
  #L24f0e0.  v1:= v1 ^< 8;
  #L24f0e4.  v7:= v6 + 1;
  #L24f0e8.  v5:= v5[v6] @kind byte;
  #L24f0ec.  v5:= v5 ^& 255;
  #L24f0f0.  v1:= v1 ^| v5 @kind int;
  #L24f0f2.  v5:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f0f6.  v5:= v5 - v2 @kind long;
  #L24f0f8.  v8.`okio.Buffer.size` @type ^`long` := v5 @kind wide;
  #L24f0fc.  if v7 != v4 then goto L24f114;
  #L24f100.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24f106.  v2:= temp @kind object;
  #L24f108.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L24f10c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24f112.  goto L24f118;
  #L24f114.  v0.`okio.Segment.pos` @type ^`int` := v7;
  #L24f118.  v0:= (`short`) v1 @kind i2s;
  #L24f11a.  return v0;
  #L24f11c.  v0:= new `java.lang.IllegalStateException`;
  #L24f120.  v1:= new `java.lang.StringBuilder`;
  #L24f124.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24f12a.  v2:= "size < 2: " @kind object;
  #L24f12e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f134.  v2:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f138.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24f13e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24f144.  v1:= temp @kind object;
  #L24f146.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f14c.  throw v0;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f160.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L24f166.  v0:= temp;
  #L24f168.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L24f16e.  v0:= temp;
  #L24f170.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v6 @kind this, `long` v7 , `java.nio.charset.Charset` v9 @kind object) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24cc28.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cc2c.  v2:= 0L;
  #L24cc30.  v4:= v7 @kind wide;
  #L24cc32.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24cc38.  if v9 == 0 then goto L24cd04;
  #L24cc3c.  v0:= 2147483647L;
  #L24cc42.  v2:= lcmp(v7, v0);
  #L24cc46.  if v2 > 0 then goto L24ccd6;
  #L24cc4a.  v0:= 0L;
  #L24cc4e.  v2:= lcmp(v7, v0);
  #L24cc52.  if v2 != 0 then goto L24cc5c;
  #L24cc56.  v7:= "" @kind object;
  #L24cc5a.  return v7 @kind object;
  #L24cc5c.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24cc60.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24cc64.  v1:= (`long`) v1 @kind i2l;
  #L24cc66.  v1:= v1 + v7 @kind long;
  #L24cc68.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24cc6c.  v3:= (`long`) v3 @kind i2l;
  #L24cc6e.  v5:= lcmp(v1, v3);
  #L24cc72.  if v5 <= 0 then goto L24cc8a;
  #L24cc76.  v0:= new `java.lang.String`;
  #L24cc7a.  call temp:= `readByteArray`(v6, v7) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L24cc80.  v7:= temp @kind object;
  #L24cc82.  call `<init>`(v0, v7, v9) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L24cc88.  return v0 @kind object;
  #L24cc8a.  v1:= new `java.lang.String`;
  #L24cc8e.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24cc92.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L24cc96.  v4:= (`int`) v7 @kind l2i;
  #L24cc98.  call `<init>`(v1, v2, v3, v4, v9) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L24cc9e.  v9:= v0.`okio.Segment.pos` @type ^`int`;
  #L24cca2.  v2:= (`long`) v9 @kind i2l;
  #L24cca4.  v2:= v2 + v7 @kind long;
  #L24cca6.  v9:= (`int`) v2 @kind l2i;
  #L24cca8.  v0.`okio.Segment.pos` @type ^`int` := v9;
  #L24ccac.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24ccb0.  v2:= v2 - v7 @kind long;
  #L24ccb2.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24ccb6.  v7:= v0.`okio.Segment.pos` @type ^`int`;
  #L24ccba.  v8:= v0.`okio.Segment.limit` @type ^`int`;
  #L24ccbe.  if v7 != v8 then goto L24ccd4;
  #L24ccc2.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24ccc8.  v7:= temp @kind object;
  #L24ccca.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v7 @kind object;
  #L24ccce.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24ccd4.  return v1 @kind object;
  #L24ccd6.  v9:= new `java.lang.IllegalArgumentException`;
  #L24ccda.  v0:= new `java.lang.StringBuilder`;
  #L24ccde.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24cce4.  v1:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L24cce8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ccee.  call temp:= `append`(v0, v7) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ccf4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24ccfa.  v7:= temp @kind object;
  #L24ccfc.  call `<init>`(v9, v7) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24cd02.  throw v9;
  #L24cd04.  v7:= new `java.lang.IllegalArgumentException`;
  #L24cd08.  v8:= "charset == null" @kind object;
  #L24cd0c.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24cd12.  throw v7;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24cbec.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cbf0.  call temp:= `readString`(v2, v0, v3) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L24cbf6.  v3:= temp @kind object;
  #L24cbf8.  return v3 @kind object;
  #L24cbfa.  v3:= Exception @type ^`java.io.EOFException` @kind object;
  #L24cbfc.  v0:= new `java.lang.AssertionError`;
  #L24cc00.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24cc06.  throw v0;
  catch `java.io.EOFException` @[L24cbec..L24cbf8] goto L24cbfa;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ea38.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L24ea3c.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L24ea42.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L24ea48.  v0:= temp @kind object;
  #L24ea4a.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this, `okio.Buffer$UnsafeCursor` v2 @kind object) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ea5c.  v0:= v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L24ea60.  if v0 != 0 then goto L24ea70;
  #L24ea64.  v2.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v1 @kind object;
  #L24ea68.  v0:= 0I;
  #L24ea6a.  v2.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L24ea6e.  return v2 @kind object;
  #L24ea70.  v2:= new `java.lang.IllegalStateException`;
  #L24ea74.  v0:= "already attached to a buffer" @kind object;
  #L24ea78.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ea7e.  throw v2;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v3 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24cd24.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cd28.  v2:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L24cd2c.  call temp:= `readString`(v3, v0, v2) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L24cd32.  v0:= temp @kind object;
  #L24cd34.  return v0 @kind object;
  #L24cd36.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L24cd38.  v1:= new `java.lang.AssertionError`;
  #L24cd3c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24cd42.  throw v1;
  catch `java.io.EOFException` @[L24cd24..L24cd34] goto L24cd36;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cd64.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L24cd68.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L24cd6e.  v2:= temp @kind object;
  #L24cd70.  return v2 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L24c898.  v0:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c89c.  v2:= 0L;
  #L24c8a0.  v4:= lcmp(v0, v2);
  #L24c8a4.  if v4 == 0 then goto L24c9f2;
  #L24c8a8.  call temp:= `getByte`(v12, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24c8ae.  v0:= temp;
  #L24c8b0.  v1:= v0 ^& 128;
  #L24c8b4.  v2:= 1I;
  #L24c8b6.  v3:= 128I;
  #L24c8ba.  v4:= 65533I;
  #L24c8c0.  if v1 != 0 then goto L24c8d0;
  #L24c8c4.  v1:= v0 ^& 127;
  #L24c8c8.  v5:= 0I;
  #L24c8ca.  v5:= 1I;
  #L24c8cc.  v6:= 0I;
  #L24c8ce.  goto L24c916;
  #L24c8d0.  v1:= v0 ^& 224;
  #L24c8d4.  v5:= 192I;
  #L24c8d8.  if v1 != v5 then goto L24c8e8;
  #L24c8dc.  v1:= v0 ^& 31;
  #L24c8e0.  v5:= 2I;
  #L24c8e2.  v6:= 128I;
  #L24c8e6.  goto L24c916;
  #L24c8e8.  v1:= v0 ^& 240;
  #L24c8ec.  v5:= 224I;
  #L24c8f0.  if v1 != v5 then goto L24c900;
  #L24c8f4.  v1:= v0 ^& 15;
  #L24c8f8.  v5:= 3I;
  #L24c8fa.  v6:= 2048I;
  #L24c8fe.  goto L24c916;
  #L24c900.  v1:= v0 ^& 248;
  #L24c904.  v5:= 240I;
  #L24c908.  if v1 != v5 then goto L24c9e6;
  #L24c90c.  v1:= v0 ^& 7;
  #L24c910.  v5:= 4I;
  #L24c912.  v6:= 65536I;
  #L24c916.  v7:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c91a.  v9:= (`long`) v5 @kind i2l;
  #L24c91c.  v11:= lcmp(v7, v9);
  #L24c920.  if v11 < 0 then goto L24c982;
  #L24c924.  if v2 >= v5 then goto L24c952;
  #L24c928.  v7:= (`long`) v2 @kind i2l;
  #L24c92a.  call temp:= `getByte`(v12, v7) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24c930.  v0:= temp;
  #L24c932.  v11:= v0 ^& 192;
  #L24c936.  if v11 != v3 then goto L24c94a;
  #L24c93a.  v1:= v1 ^< 6;
  #L24c93e.  v0:= v0 ^& 63;
  #L24c942.  v1:= v1 ^| v0 @kind int;
  #L24c944.  v2:= v2 + 1;
  #L24c948.  goto L24c924;
  #L24c94a.  call `skip`(v12, v7) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24c950.  return v4;
  #L24c952.  call `skip`(v12, v9) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24c958.  v0:= 1114111I;
  #L24c95e.  if v1 <= v0 then goto L24c964;
  #L24c962.  return v4;
  #L24c964.  v0:= 55296I;
  #L24c96a.  if v1 < v0 then goto L24c97a;
  #L24c96e.  v0:= 57343I;
  #L24c974.  if v1 > v0 then goto L24c97a;
  #L24c978.  return v4;
  #L24c97a.  if v1 >= v6 then goto L24c980;
  #L24c97e.  return v4;
  #L24c980.  return v1;
  #L24c982.  v1:= new `java.io.EOFException`;
  #L24c986.  v2:= new `java.lang.StringBuilder`;
  #L24c98a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24c990.  v3:= "size < " @kind object;
  #L24c994.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c99a.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9a0.  v3:= ": " @kind object;
  #L24c9a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9aa.  v3:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c9ae.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9b4.  v3:= " (to read code point prefixed 0x" @kind object;
  #L24c9b8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9be.  call temp:= `toHexString`(v0) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24c9c4.  v0:= temp @kind object;
  #L24c9c6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9cc.  v0:= ")" @kind object;
  #L24c9d0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24c9d6.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24c9dc.  v0:= temp @kind object;
  #L24c9de.  call `<init>`(v1, v0) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24c9e4.  throw v1;
  #L24c9e6.  v0:= 1L;
  #L24c9ea.  call `skip`(v12, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24c9f0.  return v4;
  #L24c9f2.  v0:= new `java.io.EOFException`;
  #L24c9f6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24c9fc.  throw v0;
  #L24c9fe.  return @kind void;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24cd84.  v0:= 10I;
  #L24cd88.  call temp:= `indexOf`(v5, v0) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L24cd8e.  v0:= temp @kind wide;
  #L24cd90.  v2:= -1L;
  #L24cd94.  v4:= lcmp(v0, v2);
  #L24cd98.  if v4 != 0 then goto L24cdba;
  #L24cd9c.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cda0.  v2:= 0L;
  #L24cda4.  v4:= lcmp(v0, v2);
  #L24cda8.  if v4 == 0 then goto L24cdb6;
  #L24cdac.  call temp:= `readUtf8`(v5, v0) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L24cdb2.  v0:= temp @kind object;
  #L24cdb4.  goto L24cdb8;
  #L24cdb6.  v0:= 0I;
  #L24cdb8.  return v0 @kind object;
  #L24cdba.  call temp:= `readUtf8Line`(v5, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L24cdc0.  v0:= temp @kind object;
  #L24cdc2.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this, `long` v7 ) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24cdd4.  v0:= 1L;
  #L24cdd8.  v2:= 0L;
  #L24cddc.  v4:= lcmp(v7, v2);
  #L24cde0.  if v4 <= 0 then goto L24ce0c;
  #L24cde4.  v2:= v7 - v0 @kind long;
  #L24cde8.  call temp:= `getByte`(v6, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24cdee.  v4:= temp;
  #L24cdf0.  v5:= 13I;
  #L24cdf4.  if v4 != v5 then goto L24ce0c;
  #L24cdf8.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L24cdfe.  v7:= temp @kind object;
  #L24ce00.  v0:= 2L;
  #L24ce04.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24ce0a.  return v7 @kind object;
  #L24ce0c.  call temp:= `readUtf8`(v6, v7) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L24ce12.  v7:= temp @kind object;
  #L24ce14.  call `skip`(v6, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24ce1a.  return v7 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ce2c.  v0:= 9223372036854775807L;
  #L24ce36.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L24ce3c.  v0:= temp @kind object;
  #L24ce3e.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v10 @kind this, `long` v11 ) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24ce50.  v0:= 0L;
  #L24ce54.  v2:= lcmp(v11, v0);
  #L24ce58.  if v2 < 0 then goto L24cf74;
  #L24ce5c.  v0:= 1L;
  #L24ce60.  v2:= 9223372036854775807L;
  #L24ce6a.  v4:= lcmp(v11, v2);
  #L24ce6e.  if v4 != 0 then goto L24ce74;
  #L24ce72.  goto L24ce78;
  #L24ce74.  v2:= v11 + v0 @kind long;
  #L24ce78.  v5:= 10I;
  #L24ce7c.  v6:= 0L;
  #L24ce80.  v4:= v10 @kind object;
  #L24ce82.  v8:= v2 @kind wide;
  #L24ce84.  call temp:= `indexOf`(v4, v5, v6, v8) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L24ce8a.  v4:= temp @kind wide;
  #L24ce8c.  v6:= -1L;
  #L24ce90.  v8:= lcmp(v4, v6);
  #L24ce94.  if v8 == 0 then goto L24cea2;
  #L24ce98.  call temp:= `readUtf8Line`(v10, v4) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L24ce9e.  v11:= temp @kind object;
  #L24cea0.  return v11 @kind object;
  #L24cea2.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24cea8.  v4:= temp @kind wide;
  #L24ceaa.  v6:= lcmp(v2, v4);
  #L24ceae.  if v6 >= 0 then goto L24cee0;
  #L24ceb2.  v0:= v2 - v0 @kind long;
  #L24ceb6.  call temp:= `getByte`(v10, v0) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24cebc.  v0:= temp;
  #L24cebe.  v1:= 13I;
  #L24cec2.  if v0 != v1 then goto L24cee0;
  #L24cec6.  call temp:= `getByte`(v10, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24cecc.  v0:= temp;
  #L24cece.  v1:= 10I;
  #L24ced2.  if v0 != v1 then goto L24cee0;
  #L24ced6.  call temp:= `readUtf8Line`(v10, v2) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L24cedc.  v11:= temp @kind object;
  #L24cede.  return v11 @kind object;
  #L24cee0.  v6:= new `okio.Buffer`;
  #L24cee4.  call `<init>`(v6) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24ceea.  v2:= 0L;
  #L24ceee.  v0:= 32L;
  #L24cef2.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24cef8.  v4:= temp @kind wide;
  #L24cefa.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24cf00.  v4:= temp @kind wide;
  #L24cf02.  v0:= v10 @kind object;
  #L24cf04.  v1:= v6 @kind object;
  #L24cf06.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L24cf0c.  v0:= new `java.io.EOFException`;
  #L24cf10.  v1:= new `java.lang.StringBuilder`;
  #L24cf14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24cf1a.  v2:= "\\n not found: limit=" @kind object;
  #L24cf1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf24.  call temp:= `size`(v10) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24cf2a.  v2:= temp @kind wide;
  #L24cf2c.  call temp:= `min`(v2, v11) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24cf32.  v11:= temp @kind wide;
  #L24cf34.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf3a.  v11:= " content=" @kind object;
  #L24cf3e.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf44.  call temp:= `readByteString`(v6) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L24cf4a.  v11:= temp @kind object;
  #L24cf4c.  call temp:= `hex`(v11) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L24cf52.  v11:= temp @kind object;
  #L24cf54.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf5a.  v11:= 8230I;
  #L24cf5e.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf64.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24cf6a.  v11:= temp @kind object;
  #L24cf6c.  call `<init>`(v0, v11) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24cf72.  throw v0;
  #L24cf74.  v0:= new `java.lang.IllegalArgumentException`;
  #L24cf78.  v1:= new `java.lang.StringBuilder`;
  #L24cf7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24cf82.  v2:= "limit < 0: " @kind object;
  #L24cf86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf8c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24cf92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24cf98.  v11:= temp @kind object;
  #L24cf9a.  call `<init>`(v0, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24cfa0.  throw v0;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24c418.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24c41c.  v2:= lcmp(v0, v4);
  #L24c420.  if v2 < 0 then goto L24c428;
  #L24c424.  v4:= 1I;
  #L24c426.  goto L24c42a;
  #L24c428.  v4:= 0I;
  #L24c42a.  return v4;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 ) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24f34c.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f350.  v2:= lcmp(v0, v4);
  #L24f354.  if v2 < 0 then goto L24f35a;
  #L24f358.  return @kind void;
  #L24f35a.  v4:= new `java.io.EOFException`;
  #L24f35e.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24f364.  throw v4;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24cfd8.  v0:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24cfdc.  if v0 != 0 then goto L24cfea;
  #L24cfe0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L24cfe6.  v0:= temp @kind object;
  #L24cfe8.  return v0 @kind object;
  #L24cfea.  v0:= new `java.util.ArrayList`;
  #L24cfee.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L24cff4.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24cff8.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L24cffc.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d000.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L24d004.  v1:= v1 - v2 @kind int;
  #L24d006.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L24d00c.  v1:= temp @kind object;
  #L24d00e.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24d014.  v1:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d018.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24d01c.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24d020.  if v1 == v2 then goto L24d03e;
  #L24d024.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L24d028.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L24d02c.  v2:= v2 - v3 @kind int;
  #L24d02e.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L24d034.  v2:= temp @kind object;
  #L24d036.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L24d03c.  goto L24d018;
  #L24d03e.  return v0 @kind object;
}
procedure `int` `select`(`okio.Buffer` v10 @kind this, `okio.Options` v11 @kind object) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24ca10.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24ca14.  if v6 != 0 then goto L24ca26;
  #L24ca18.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24ca1c.  call temp:= `indexOf`(v11, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L24ca22.  v11:= temp;
  #L24ca24.  return v11;
  #L24ca26.  v11:= v11.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24ca2a.  v0:= 0I;
  #L24ca2c.  v7:= length @variable v11;
  #L24ca2e.  v8:= 0I;
  #L24ca30.  if v8 >= v7 then goto L24ca94;
  #L24ca34.  v9:= v11[v8] @kind object;
  #L24ca38.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24ca3c.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24ca42.  v2:= temp;
  #L24ca44.  v2:= (`long`) v2 @kind i2l;
  #L24ca46.  v4:= lcmp(v0, v2);
  #L24ca4a.  if v4 < 0 then goto L24ca8e;
  #L24ca4e.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L24ca52.  v4:= 0I;
  #L24ca54.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24ca5a.  v5:= temp;
  #L24ca5c.  v0:= v10 @kind object;
  #L24ca5e.  v1:= v6 @kind object;
  #L24ca60.  v3:= v9 @kind object;
  #L24ca62.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L24ca68.  v0:= temp;
  #L24ca6a.  if v0 == 0 then goto L24ca8e;
  #L24ca6e.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24ca74.  v11:= temp;
  #L24ca76.  v0:= (`long`) v11 @kind i2l;
  #L24ca78.  call `skip`(v10, v0) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24ca7e.  return v8;
  #L24ca80.  v11:= Exception @type ^`java.io.EOFException` @kind object;
  #L24ca82.  v0:= new `java.lang.AssertionError`;
  #L24ca86.  call `<init>`(v0, v11) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24ca8c.  throw v0;
  #L24ca8e.  v8:= v8 + 1;
  #L24ca92.  goto L24ca30;
  #L24ca94.  v11:= -1I;
  #L24ca96.  return v11;
  catch `java.io.EOFException` @[L24ca6e..L24ca7e] goto L24ca80;
}
procedure `int` `selectPrefix`(`okio.Buffer` v9 @kind this, `okio.Options` v10 @kind object) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24cab8.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24cabc.  v10:= v10.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24cac0.  v7:= length @variable v10;
  #L24cac2.  v0:= 0I;
  #L24cac4.  v8:= 0I;
  #L24cac6.  if v8 >= v7 then goto L24cb0a;
  #L24caca.  v3:= v10[v8] @kind object;
  #L24cace.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cad2.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24cad8.  v2:= temp;
  #L24cada.  v4:= (`long`) v2 @kind i2l;
  #L24cadc.  call temp:= `min`(v0, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24cae2.  v0:= temp @kind wide;
  #L24cae4.  v5:= (`int`) v0 @kind l2i;
  #L24cae6.  if v5 == 0 then goto L24cb08;
  #L24caea.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L24caee.  v4:= 0I;
  #L24caf0.  v0:= v9 @kind object;
  #L24caf2.  v1:= v6 @kind object;
  #L24caf4.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L24cafa.  v0:= temp;
  #L24cafc.  if v0 == 0 then goto L24cb02;
  #L24cb00.  goto L24cb08;
  #L24cb02.  v8:= v8 + 1;
  #L24cb06.  goto L24cac6;
  #L24cb08.  return v8;
  #L24cb0a.  v10:= -1I;
  #L24cb0c.  return v10;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ef14.  v0:= "SHA-1" @kind object;
  #L24ef18.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24ef1e.  v0:= temp @kind object;
  #L24ef20.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ef34.  v0:= "SHA-256" @kind object;
  #L24ef38.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24ef3e.  v0:= temp @kind object;
  #L24ef40.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ef54.  v0:= "SHA-512" @kind object;
  #L24ef58.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24ef5e.  v0:= temp @kind object;
  #L24ef60.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24dacc.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24dad0.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v5 @kind this, `long` v6 ) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24f378.  v0:= 0L;
  #L24f37c.  v2:= lcmp(v6, v0);
  #L24f380.  if v2 <= 0 then goto L24f3fa;
  #L24f384.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f388.  if v0 == 0 then goto L24f3ee;
  #L24f38c.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f390.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f394.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L24f398.  v0:= v0 - v1 @kind int;
  #L24f39a.  v0:= (`long`) v0 @kind i2l;
  #L24f39c.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24f3a2.  v0:= temp @kind wide;
  #L24f3a4.  v0:= (`int`) v0 @kind l2i;
  #L24f3a6.  v1:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f3aa.  v3:= (`long`) v0 @kind i2l;
  #L24f3ac.  v1:= v1 - v3 @kind long;
  #L24f3ae.  v5.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L24f3b2.  v6:= v6 - v3 @kind long;
  #L24f3b4.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f3b8.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L24f3bc.  v2:= v2 + v0 @kind int;
  #L24f3be.  v1.`okio.Segment.pos` @type ^`int` := v2;
  #L24f3c2.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f3c6.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L24f3ca.  v1:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f3ce.  v1:= v1.`okio.Segment.limit` @type ^`int`;
  #L24f3d2.  if v0 != v1 then goto L24f378;
  #L24f3d6.  v0:= v5.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f3da.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24f3e0.  v1:= temp @kind object;
  #L24f3e2.  v5.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L24f3e6.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24f3ec.  goto L24f378;
  #L24f3ee.  v6:= new `java.io.EOFException`;
  #L24f3f2.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24f3f8.  throw v6;
  #L24f3fa.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v5 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24ef74.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24ef78.  v2:= 2147483647L;
  #L24ef7e.  v4:= lcmp(v0, v2);
  #L24ef82.  if v4 > 0 then goto L24ef92;
  #L24ef86.  v0:= (`int`) v0 @kind l2i;
  #L24ef88.  call temp:= `snapshot`(v5, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L24ef8e.  v0:= temp @kind object;
  #L24ef90.  return v0 @kind object;
  #L24ef92.  v0:= new `java.lang.IllegalArgumentException`;
  #L24ef96.  v1:= new `java.lang.StringBuilder`;
  #L24ef9a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24efa0.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L24efa4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24efaa.  v2:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24efae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24efb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24efba.  v1:= temp @kind object;
  #L24efbc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24efc2.  throw v0;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24efd4.  if v2 != 0 then goto L24efde;
  #L24efd8.  v2:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24efdc.  return v2 @kind object;
  #L24efde.  v0:= new `okio.SegmentedByteString`;
  #L24efe2.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L24efe8.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24f070.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L24f074.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24cfb4.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L24cfba.  v0:= temp @kind object;
  #L24cfbc.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L24cfc2.  v0:= temp @kind object;
  #L24cfc4.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L24effc.  v0:= 1I;
  #L24effe.  if v4 < v0 then goto L24f054;
  #L24f002.  v0:= 8192I;
  #L24f006.  if v4 > v0 then goto L24f054;
  #L24f00a.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f00e.  if v1 != 0 then goto L24f02c;
  #L24f012.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24f018.  v4:= temp @kind object;
  #L24f01a.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v4 @kind object;
  #L24f01e.  v4:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f022.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L24f026.  v4.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L24f02a.  return v4 @kind object;
  #L24f02c.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24f030.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L24f034.  v2:= v2 + v4 @kind int;
  #L24f036.  if v2 > v0 then goto L24f042;
  #L24f03a.  v4:= v1.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24f03e.  if v4 != 0 then goto L24f052;
  #L24f042.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24f048.  v4:= temp @kind object;
  #L24f04a.  call temp:= `push`(v1, v4) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24f050.  v1:= temp @kind object;
  #L24f052.  return v1 @kind object;
  #L24f054.  v4:= new `java.lang.IllegalArgumentException`;
  #L24f058.  call `<init>`(v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24f05e.  throw v4;
}
procedure `int` `write`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24cb20.  if v7 == 0 then goto L24cb76;
  #L24cb24.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L24cb2a.  v0:= temp;
  #L24cb2c.  v1:= v0;
  #L24cb2e.  if v1 <= 0 then goto L24cb68;
  #L24cb32.  v2:= 1I;
  #L24cb34.  call temp:= `writableSegment`(v6, v2) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24cb3a.  v2:= temp @kind object;
  #L24cb3c.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24cb40.  v3:= v3 - 8192;
  #L24cb44.  call temp:= `min`(v1, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24cb4a.  v3:= temp;
  #L24cb4c.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24cb50.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L24cb54.  call temp:= `get`(v7, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L24cb5a.  v1:= v1 - v3 @kind int;
  #L24cb5c.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L24cb60.  v4:= v4 + v3 @kind int;
  #L24cb62.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L24cb66.  goto L24cb2e;
  #L24cb68.  v1:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24cb6c.  v3:= (`long`) v0 @kind i2l;
  #L24cb6e.  v1:= v1 + v3 @kind long;
  #L24cb70.  v6.`okio.Buffer.size` @type ^`long` := v1 @kind wide;
  #L24cb74.  return v0;
  #L24cb76.  v7:= new `java.lang.IllegalArgumentException`;
  #L24cb7a.  v0:= "source == null" @kind object;
  #L24cb7e.  call `<init>`(v7, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24cb84.  throw v7;
  #L24cb86.  return @kind void;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24debc.  if v2 == 0 then goto L24dec8;
  #L24dec0.  call `write`(v2, v1) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L24dec6.  return v1 @kind object;
  #L24dec8.  v2:= new `java.lang.IllegalArgumentException`;
  #L24decc.  v0:= "byteString == null" @kind object;
  #L24ded0.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ded6.  throw v2;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24de04.  if v3 == 0 then goto L24de16;
  #L24de08.  v0:= 0I;
  #L24de0a.  v1:= length @variable v3;
  #L24de0c.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24de12.  v3:= temp @kind object;
  #L24de14.  return v3 @kind object;
  #L24de16.  v3:= new `java.lang.IllegalArgumentException`;
  #L24de1a.  v0:= "source == null" @kind object;
  #L24de1e.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24de24.  throw v3;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 ) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24de38.  if v10 == 0 then goto L24de98;
  #L24de3c.  v0:= length @variable v10;
  #L24de3e.  v1:= (`long`) v0 @kind i2l;
  #L24de40.  v3:= (`long`) v11 @kind i2l;
  #L24de42.  v7:= (`long`) v12 @kind i2l;
  #L24de44.  v5:= v7 @kind wide;
  #L24de46.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24de4c.  v12:= v12 + v11 @kind int;
  #L24de4e.  if v11 >= v12 then goto L24de8c;
  #L24de52.  v0:= 1I;
  #L24de54.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24de5a.  v0:= temp @kind object;
  #L24de5c.  v1:= v12 - v11 @kind int;
  #L24de60.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24de64.  v2:= v2 - 8192;
  #L24de68.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24de6e.  v1:= temp;
  #L24de70.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24de74.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24de78.  call `arraycopy`(v10, v11, v2, v3, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L24de7e.  v11:= v11 + v1 @kind int;
  #L24de80.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24de84.  v2:= v2 + v1 @kind int;
  #L24de86.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L24de8a.  goto L24de4e;
  #L24de8c.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24de90.  v10:= v10 + v7 @kind long;
  #L24de92.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L24de96.  return v9 @kind object;
  #L24de98.  v10:= new `java.lang.IllegalArgumentException`;
  #L24de9c.  v11:= "source == null" @kind object;
  #L24dea0.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24dea6.  throw v10;
  #L24dea8.  return @kind void;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `okio.ByteString` v1 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eaf8.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L24eafe.  v1:= temp @kind object;
  #L24eb00.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v5 @kind this, `okio.Source` v6 @kind object, `long` v7 ) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24eb14.  v0:= 0L;
  #L24eb18.  v2:= lcmp(v7, v0);
  #L24eb1c.  if v2 <= 0 then goto L24eb44;
  #L24eb20.  call temp:= `read`(v6, v5, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24eb26.  v0:= temp @kind wide;
  #L24eb28.  v2:= -1L;
  #L24eb2c.  v4:= lcmp(v0, v2);
  #L24eb30.  if v4 == 0 then goto L24eb38;
  #L24eb34.  v7:= v7 - v0 @kind long;
  #L24eb36.  goto L24eb14;
  #L24eb38.  v6:= new `java.io.EOFException`;
  #L24eb3c.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24eb42.  throw v6;
  #L24eb44.  return v5 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eac0.  call temp:= `write`(v0, v1) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24eac6.  v1:= temp @kind object;
  #L24eac8.  return v1 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eadc.  call temp:= `write`(v0, v1, v2, v3) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24eae2.  v1:= temp @kind object;
  #L24eae4.  return v1 @kind object;
}
procedure `void` `write`(`okio.Buffer` v6 @kind this, `okio.Buffer` v7 @kind object, `long` v8 ) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24f40c.  if v7 == 0 then goto L24f536;
  #L24f410.  if v7 == v6 then goto L24f526;
  #L24f414.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f418.  v2:= 0L;
  #L24f41c.  v4:= v8 @kind wide;
  #L24f41e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24f424.  v0:= 0L;
  #L24f428.  v2:= lcmp(v8, v0);
  #L24f42c.  if v2 <= 0 then goto L24f524;
  #L24f430.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f434.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f438.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f43c.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L24f440.  v0:= v0 - v1 @kind int;
  #L24f442.  v0:= (`long`) v0 @kind i2l;
  #L24f444.  v2:= lcmp(v8, v0);
  #L24f448.  if v2 >= 0 then goto L24f4c4;
  #L24f44c.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f450.  if v0 == 0 then goto L24f45a;
  #L24f454.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24f458.  goto L24f45c;
  #L24f45a.  v0:= 0I;
  #L24f45c.  if v0 == 0 then goto L24f4b2;
  #L24f460.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24f464.  if v1 == 0 then goto L24f4b2;
  #L24f468.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f46c.  v1:= (`long`) v1 @kind i2l;
  #L24f46e.  v1:= v1 + v8 @kind long;
  #L24f470.  v3:= v0.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L24f474.  if v3 == 0 then goto L24f47c;
  #L24f478.  v3:= 0I;
  #L24f47a.  goto L24f480;
  #L24f47c.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L24f480.  v3:= (`long`) v3 @kind i2l;
  #L24f482.  v1:= v1 - v3 @kind long;
  #L24f484.  v3:= 8192L;
  #L24f488.  v5:= lcmp(v1, v3);
  #L24f48c.  if v5 > 0 then goto L24f4b2;
  #L24f490.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f494.  v2:= (`int`) v8 @kind l2i;
  #L24f496.  call `writeTo`(v1, v0, v2) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L24f49c.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f4a0.  v0:= v0 - v8 @kind long;
  #L24f4a2.  v7.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24f4a6.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f4aa.  v0:= v0 + v8 @kind long;
  #L24f4ac.  v6.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24f4b0.  return @kind void;
  #L24f4b2.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f4b6.  v1:= (`int`) v8 @kind l2i;
  #L24f4b8.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L24f4be.  v0:= temp @kind object;
  #L24f4c0.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24f4c4.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f4c8.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24f4cc.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24f4d0.  v1:= v1 - v2 @kind int;
  #L24f4d2.  v1:= (`long`) v1 @kind i2l;
  #L24f4d4.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24f4da.  v3:= temp @kind object;
  #L24f4dc.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L24f4e0.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f4e4.  if v3 != 0 then goto L24f4fa;
  #L24f4e8.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24f4ec.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24f4f0.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L24f4f4.  v0.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L24f4f8.  goto L24f50c;
  #L24f4fa.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24f4fe.  call temp:= `push`(v3, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24f504.  v0:= temp @kind object;
  #L24f506.  call `compact`(v0) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L24f50c.  v3:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f510.  v3:= v3 - v1 @kind long;
  #L24f512.  v7.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L24f516.  v3:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24f51a.  v3:= v3 + v1 @kind long;
  #L24f51c.  v6.`okio.Buffer.size` @type ^`long` := v3 @kind wide;
  #L24f520.  v8:= v8 - v1 @kind long;
  #L24f522.  goto L24f424;
  #L24f524.  return @kind void;
  #L24f526.  v7:= new `java.lang.IllegalArgumentException`;
  #L24f52a.  v8:= "source == this" @kind object;
  #L24f52e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f534.  throw v7;
  #L24f536.  v7:= new `java.lang.IllegalArgumentException`;
  #L24f53a.  v8:= "source == null" @kind object;
  #L24f53e.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24f544.  throw v7;
  #L24f546.  return @kind void;
}
procedure `long` `writeAll`(`okio.Buffer` v7 @kind this, `okio.Source` v8 @kind object) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24dae4.  if v8 == 0 then goto L24db0a;
  #L24dae8.  v0:= 0L;
  #L24daec.  v2:= 8192L;
  #L24daf0.  call temp:= `read`(v8, v7, v2) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24daf6.  v2:= temp @kind wide;
  #L24daf8.  v4:= -1L;
  #L24dafc.  v6:= lcmp(v2, v4);
  #L24db00.  if v6 == 0 then goto L24db08;
  #L24db04.  v0:= v0 + v2 @kind long;
  #L24db06.  goto L24daec;
  #L24db08.  return v0 @kind wide;
  #L24db0a.  v8:= new `java.lang.IllegalArgumentException`;
  #L24db0e.  v0:= "source == null" @kind object;
  #L24db12.  call `<init>`(v8, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24db18.  throw v8;
  #L24db1a.  return @kind void;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v4 @kind this, `int` v5 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24dee8.  v0:= 1I;
  #L24deea.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24def0.  v0:= temp @kind object;
  #L24def2.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24def6.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24defa.  v3:= v2 + 1;
  #L24defe.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L24df02.  v5:= (`byte`) v5 @kind i2b;
  #L24df04.  v1[v2]:= v5 @kind byte;
  #L24df08.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24df0c.  v2:= 1L;
  #L24df10.  v0:= v0 + v2 @kind long;
  #L24df12.  v4.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24df16.  return v4 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eb58.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24eb5e.  v1:= temp @kind object;
  #L24eb60.  return v1 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v11 @kind this, `long` v12 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L24df28.  v0:= 0L;
  #L24df2c.  v2:= lcmp(v12, v0);
  #L24df30.  if v2 != 0 then goto L24df42;
  #L24df34.  v12:= 48I;
  #L24df38.  call temp:= `writeByte`(v11, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24df3e.  v12:= temp @kind object;
  #L24df40.  return v12 @kind object;
  #L24df42.  v2:= 0I;
  #L24df44.  v3:= 1I;
  #L24df46.  v4:= lcmp(v12, v0);
  #L24df4a.  if v4 >= 0 then goto L24df68;
  #L24df4e.  v12:= -v12 @kind long;
  #L24df50.  v2:= lcmp(v12, v0);
  #L24df54.  if v2 >= 0 then goto L24df66;
  #L24df58.  v12:= "-9223372036854775808" @kind object;
  #L24df5c.  call temp:= `writeUtf8`(v11, v12) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24df62.  v12:= temp @kind object;
  #L24df64.  return v12 @kind object;
  #L24df66.  v2:= 1I;
  #L24df68.  v4:= 100000000L;
  #L24df6e.  v6:= 10L;
  #L24df72.  v8:= lcmp(v12, v4);
  #L24df76.  if v8 >= 0 then goto L24e000;
  #L24df7a.  v4:= 10000L;
  #L24df7e.  v8:= lcmp(v12, v4);
  #L24df82.  if v8 >= 0 then goto L24dfbc;
  #L24df86.  v4:= 100L;
  #L24df8a.  v8:= lcmp(v12, v4);
  #L24df8e.  if v8 >= 0 then goto L24dfa4;
  #L24df92.  v4:= lcmp(v12, v6);
  #L24df96.  if v4 >= 0 then goto L24df9e;
  #L24df9a.  goto L24e0f0;
  #L24df9e.  v3:= 2I;
  #L24dfa0.  goto L24e0f0;
  #L24dfa4.  v3:= 1000L;
  #L24dfa8.  v5:= lcmp(v12, v3);
  #L24dfac.  if v5 >= 0 then goto L24dfb6;
  #L24dfb0.  v3:= 3I;
  #L24dfb2.  goto L24e0f0;
  #L24dfb6.  v3:= 4I;
  #L24dfb8.  goto L24e0f0;
  #L24dfbc.  v3:= 1000000L;
  #L24dfc2.  v5:= lcmp(v12, v3);
  #L24dfc6.  if v5 >= 0 then goto L24dfe4;
  #L24dfca.  v3:= 100000L;
  #L24dfd0.  v5:= lcmp(v12, v3);
  #L24dfd4.  if v5 >= 0 then goto L24dfde;
  #L24dfd8.  v3:= 5I;
  #L24dfda.  goto L24e0f0;
  #L24dfde.  v3:= 6I;
  #L24dfe0.  goto L24e0f0;
  #L24dfe4.  v3:= 10000000L;
  #L24dfea.  v5:= lcmp(v12, v3);
  #L24dfee.  if v5 >= 0 then goto L24dff8;
  #L24dff2.  v3:= 7I;
  #L24dff4.  goto L24e0f0;
  #L24dff8.  v3:= 8I;
  #L24dffc.  goto L24e0f0;
  #L24e000.  v3:= 1000000000000L;
  #L24e00a.  v5:= lcmp(v12, v3);
  #L24e00e.  if v5 >= 0 then goto L24e05c;
  #L24e012.  v3:= 10000000000L;
  #L24e01c.  v5:= lcmp(v12, v3);
  #L24e020.  if v5 >= 0 then goto L24e03e;
  #L24e024.  v3:= 1000000000L;
  #L24e02a.  v5:= lcmp(v12, v3);
  #L24e02e.  if v5 >= 0 then goto L24e038;
  #L24e032.  v3:= 9I;
  #L24e036.  goto L24e0f0;
  #L24e038.  v3:= 10I;
  #L24e03c.  goto L24e0f0;
  #L24e03e.  v3:= 100000000000L;
  #L24e048.  v5:= lcmp(v12, v3);
  #L24e04c.  if v5 >= 0 then goto L24e056;
  #L24e050.  v3:= 11I;
  #L24e054.  goto L24e0f0;
  #L24e056.  v3:= 12I;
  #L24e05a.  goto L24e0f0;
  #L24e05c.  v3:= 1000000000000000L;
  #L24e066.  v5:= lcmp(v12, v3);
  #L24e06a.  if v5 >= 0 then goto L24e0a4;
  #L24e06e.  v3:= 10000000000000L;
  #L24e078.  v5:= lcmp(v12, v3);
  #L24e07c.  if v5 >= 0 then goto L24e086;
  #L24e080.  v3:= 13I;
  #L24e084.  goto L24e0f0;
  #L24e086.  v3:= 100000000000000L;
  #L24e090.  v5:= lcmp(v12, v3);
  #L24e094.  if v5 >= 0 then goto L24e09e;
  #L24e098.  v3:= 14I;
  #L24e09c.  goto L24e0f0;
  #L24e09e.  v3:= 15I;
  #L24e0a2.  goto L24e0f0;
  #L24e0a4.  v3:= 100000000000000000L;
  #L24e0ae.  v5:= lcmp(v12, v3);
  #L24e0b2.  if v5 >= 0 then goto L24e0d4;
  #L24e0b6.  v3:= 10000000000000000L;
  #L24e0c0.  v5:= lcmp(v12, v3);
  #L24e0c4.  if v5 >= 0 then goto L24e0ce;
  #L24e0c8.  v3:= 16I;
  #L24e0cc.  goto L24e0f0;
  #L24e0ce.  v3:= 17I;
  #L24e0d2.  goto L24e0f0;
  #L24e0d4.  v3:= 1000000000000000000L;
  #L24e0de.  v5:= lcmp(v12, v3);
  #L24e0e2.  if v5 >= 0 then goto L24e0ec;
  #L24e0e6.  v3:= 18I;
  #L24e0ea.  goto L24e0f0;
  #L24e0ec.  v3:= 19I;
  #L24e0f0.  if v2 == 0 then goto L24e0f8;
  #L24e0f4.  v3:= v3 + 1;
  #L24e0f8.  call temp:= `writableSegment`(v11, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e0fe.  v4:= temp @kind object;
  #L24e100.  v5:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e104.  v8:= v4.`okio.Segment.limit` @type ^`int`;
  #L24e108.  v8:= v8 + v3 @kind int;
  #L24e10a.  v9:= lcmp(v12, v0);
  #L24e10e.  if v9 == 0 then goto L24e12c;
  #L24e112.  v9:= v12 %% v6 @kind long;
  #L24e116.  v9:= (`int`) v9 @kind l2i;
  #L24e118.  v8:= v8 + -1;
  #L24e11c.  v10:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L24e120.  v9:= v10[v9] @kind byte;
  #L24e124.  v5[v8]:= v9 @kind byte;
  #L24e128.  v12:= v12 / v6 @kind long;
  #L24e12a.  goto L24e10a;
  #L24e12c.  if v2 == 0 then goto L24e13c;
  #L24e130.  v8:= v8 + -1;
  #L24e134.  v12:= 45I;
  #L24e138.  v5[v8]:= v12 @kind byte;
  #L24e13c.  v12:= v4.`okio.Segment.limit` @type ^`int`;
  #L24e140.  v12:= v12 + v3 @kind int;
  #L24e142.  v4.`okio.Segment.limit` @type ^`int` := v12;
  #L24e146.  v12:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e14a.  v0:= (`long`) v3 @kind i2l;
  #L24e14c.  v12:= v12 + v0 @kind long;
  #L24e14e.  v11.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L24e152.  return v11 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eb74.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24eb7a.  v1:= temp @kind object;
  #L24eb7c.  return v1 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24e164.  v0:= 0L;
  #L24e168.  v2:= lcmp(v10, v0);
  #L24e16c.  if v2 != 0 then goto L24e17e;
  #L24e170.  v10:= 48I;
  #L24e174.  call temp:= `writeByte`(v9, v10) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e17a.  v10:= temp @kind object;
  #L24e17c.  return v10 @kind object;
  #L24e17e.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L24e184.  v0:= temp @kind wide;
  #L24e186.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L24e18c.  v0:= temp;
  #L24e18e.  v1:= 4I;
  #L24e190.  v0:= v0 / v1 @kind int;
  #L24e192.  v0:= v0 + 1;
  #L24e196.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e19c.  v2:= temp @kind object;
  #L24e19e.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e1a2.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e1a6.  v4:= v4 + v0 @kind int;
  #L24e1a8.  v4:= v4 + -1;
  #L24e1ac.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e1b0.  if v4 < v5 then goto L24e1d0;
  #L24e1b4.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L24e1b8.  v7:= 15L;
  #L24e1bc.  v7:= v7 ^& v10 @kind long;
  #L24e1be.  v7:= (`int`) v7 @kind l2i;
  #L24e1c0.  v6:= v6[v7] @kind byte;
  #L24e1c4.  v3[v4]:= v6 @kind byte;
  #L24e1c8.  v10:= v10 ^>> v1 @kind long;
  #L24e1ca.  v4:= v4 + -1;
  #L24e1ce.  goto L24e1b0;
  #L24e1d0.  v10:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e1d4.  v10:= v10 + v0 @kind int;
  #L24e1d6.  v2.`okio.Segment.limit` @type ^`int` := v10;
  #L24e1da.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e1de.  v0:= (`long`) v0 @kind i2l;
  #L24e1e0.  v10:= v10 + v0 @kind long;
  #L24e1e2.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L24e1e6.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eb90.  call temp:= `writeHexadecimalUnsignedLong`(v0, v1) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24eb96.  v1:= temp @kind object;
  #L24eb98.  return v1 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24e1f8.  v0:= 4I;
  #L24e1fa.  call temp:= `writableSegment`(v5, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e200.  v0:= temp @kind object;
  #L24e202.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e206.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24e20a.  v3:= v2 + 1;
  #L24e20e.  v4:= v6 ^>> 24;
  #L24e212.  v4:= v4 ^& 255;
  #L24e216.  v4:= (`byte`) v4 @kind i2b;
  #L24e218.  v1[v2]:= v4 @kind byte;
  #L24e21c.  v2:= v3 + 1;
  #L24e220.  v4:= v6 ^>> 16;
  #L24e224.  v4:= v4 ^& 255;
  #L24e228.  v4:= (`byte`) v4 @kind i2b;
  #L24e22a.  v1[v3]:= v4 @kind byte;
  #L24e22e.  v3:= v2 + 1;
  #L24e232.  v4:= v6 ^>> 8;
  #L24e236.  v4:= v4 ^& 255;
  #L24e23a.  v4:= (`byte`) v4 @kind i2b;
  #L24e23c.  v1[v2]:= v4 @kind byte;
  #L24e240.  v2:= v3 + 1;
  #L24e244.  v6:= v6 ^& 255;
  #L24e248.  v6:= (`byte`) v6 @kind i2b;
  #L24e24a.  v1[v3]:= v6 @kind byte;
  #L24e24e.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L24e252.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e256.  v2:= 4L;
  #L24e25a.  v0:= v0 + v2 @kind long;
  #L24e25c.  v5.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24e260.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ebac.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L24ebb2.  v1:= temp @kind object;
  #L24ebb4.  return v1 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24e274.  call temp:= `reverseBytesInt`(v1) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L24e27a.  v1:= temp;
  #L24e27c.  call temp:= `writeInt`(v0, v1) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L24e282.  v1:= temp @kind object;
  #L24e284.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ebc8.  call temp:= `writeIntLe`(v0, v1) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L24ebce.  v1:= temp @kind object;
  #L24ebd0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24e298.  v0:= 8I;
  #L24e29c.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e2a2.  v1:= temp @kind object;
  #L24e2a4.  v2:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e2a8.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L24e2ac.  v4:= v3 + 1;
  #L24e2b0.  v5:= 56I;
  #L24e2b4.  v5:= v10 ^>> v5 @kind long;
  #L24e2b8.  v7:= 255L;
  #L24e2bc.  v5:= v5 ^& v7 @kind long;
  #L24e2be.  v5:= (`int`) v5 @kind l2i;
  #L24e2c0.  v5:= (`byte`) v5 @kind i2b;
  #L24e2c2.  v2[v3]:= v5 @kind byte;
  #L24e2c6.  v3:= v4 + 1;
  #L24e2ca.  v5:= 48I;
  #L24e2ce.  v5:= v10 ^>> v5 @kind long;
  #L24e2d2.  v5:= v5 ^& v7 @kind long;
  #L24e2d4.  v5:= (`int`) v5 @kind l2i;
  #L24e2d6.  v5:= (`byte`) v5 @kind i2b;
  #L24e2d8.  v2[v4]:= v5 @kind byte;
  #L24e2dc.  v4:= v3 + 1;
  #L24e2e0.  v5:= 40I;
  #L24e2e4.  v5:= v10 ^>> v5 @kind long;
  #L24e2e8.  v5:= v5 ^& v7 @kind long;
  #L24e2ea.  v5:= (`int`) v5 @kind l2i;
  #L24e2ec.  v5:= (`byte`) v5 @kind i2b;
  #L24e2ee.  v2[v3]:= v5 @kind byte;
  #L24e2f2.  v3:= v4 + 1;
  #L24e2f6.  v5:= 32I;
  #L24e2fa.  v5:= v10 ^>> v5 @kind long;
  #L24e2fe.  v5:= v5 ^& v7 @kind long;
  #L24e300.  v5:= (`int`) v5 @kind l2i;
  #L24e302.  v5:= (`byte`) v5 @kind i2b;
  #L24e304.  v2[v4]:= v5 @kind byte;
  #L24e308.  v4:= v3 + 1;
  #L24e30c.  v5:= 24I;
  #L24e310.  v5:= v10 ^>> v5 @kind long;
  #L24e314.  v5:= v5 ^& v7 @kind long;
  #L24e316.  v5:= (`int`) v5 @kind l2i;
  #L24e318.  v5:= (`byte`) v5 @kind i2b;
  #L24e31a.  v2[v3]:= v5 @kind byte;
  #L24e31e.  v3:= v4 + 1;
  #L24e322.  v5:= 16I;
  #L24e326.  v5:= v10 ^>> v5 @kind long;
  #L24e32a.  v5:= v5 ^& v7 @kind long;
  #L24e32c.  v5:= (`int`) v5 @kind l2i;
  #L24e32e.  v5:= (`byte`) v5 @kind i2b;
  #L24e330.  v2[v4]:= v5 @kind byte;
  #L24e334.  v4:= v3 + 1;
  #L24e338.  v5:= v10 ^>> v0 @kind long;
  #L24e33c.  v5:= v5 ^& v7 @kind long;
  #L24e33e.  v0:= (`int`) v5 @kind l2i;
  #L24e340.  v0:= (`byte`) v0 @kind i2b;
  #L24e342.  v2[v3]:= v0 @kind byte;
  #L24e346.  v0:= v4 + 1;
  #L24e34a.  v10:= v10 ^& v7 @kind long;
  #L24e34c.  v10:= (`int`) v10 @kind l2i;
  #L24e34e.  v10:= (`byte`) v10 @kind i2b;
  #L24e350.  v2[v4]:= v10 @kind byte;
  #L24e354.  v1.`okio.Segment.limit` @type ^`int` := v0;
  #L24e358.  v10:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e35c.  v0:= 8L;
  #L24e360.  v10:= v10 + v0 @kind long;
  #L24e362.  v9.`okio.Buffer.size` @type ^`long` := v10 @kind wide;
  #L24e366.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ebe4.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24ebea.  v1:= temp @kind object;
  #L24ebec.  return v1 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24e378.  call temp:= `reverseBytesLong`(v1) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L24e37e.  v1:= temp @kind wide;
  #L24e380.  call temp:= `writeLong`(v0, v1) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24e386.  v1:= temp @kind object;
  #L24e388.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v0 @kind this, `long` v1 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec00.  call temp:= `writeLongLe`(v0, v1) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L24ec06.  v1:= temp @kind object;
  #L24ec08.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v5 @kind this, `int` v6 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24e39c.  v0:= 2I;
  #L24e39e.  call temp:= `writableSegment`(v5, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e3a4.  v0:= temp @kind object;
  #L24e3a6.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e3aa.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24e3ae.  v3:= v2 + 1;
  #L24e3b2.  v4:= v6 ^>> 8;
  #L24e3b6.  v4:= v4 ^& 255;
  #L24e3ba.  v4:= (`byte`) v4 @kind i2b;
  #L24e3bc.  v1[v2]:= v4 @kind byte;
  #L24e3c0.  v2:= v3 + 1;
  #L24e3c4.  v6:= v6 ^& 255;
  #L24e3c8.  v6:= (`byte`) v6 @kind i2b;
  #L24e3ca.  v1[v3]:= v6 @kind byte;
  #L24e3ce.  v0.`okio.Segment.limit` @type ^`int` := v2;
  #L24e3d2.  v0:= v5.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e3d6.  v2:= 2L;
  #L24e3da.  v0:= v0 + v2 @kind long;
  #L24e3dc.  v5.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24e3e0.  return v5 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec1c.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L24ec22.  v1:= temp @kind object;
  #L24ec24.  return v1 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24e3f4.  v1:= (`short`) v1 @kind i2s;
  #L24e3f6.  call temp:= `reverseBytesShort`(v1) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L24e3fc.  v1:= temp;
  #L24e3fe.  call temp:= `writeShort`(v0, v1) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L24e404.  v1:= temp @kind object;
  #L24e406.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec38.  call temp:= `writeShortLe`(v0, v1) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L24ec3e.  v1:= temp @kind object;
  #L24ec40.  return v1 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24e418.  if v2 == 0 then goto L24e52e;
  #L24e41c.  if v3 < 0 then goto L24e500;
  #L24e420.  if v4 < v3 then goto L24e4c2;
  #L24e424.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e42a.  v0:= temp;
  #L24e42c.  if v4 > v0 then goto L24e47c;
  #L24e430.  if v5 == 0 then goto L24e46c;
  #L24e434.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L24e438.  call temp:= `equals`(v5, v0) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L24e43e.  v0:= temp;
  #L24e440.  if v0 == 0 then goto L24e44e;
  #L24e444.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24e44a.  v2:= temp @kind object;
  #L24e44c.  return v2 @kind object;
  #L24e44e.  call temp:= `substring`(v2, v3, v4) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L24e454.  v2:= temp @kind object;
  #L24e456.  call temp:= `getBytes`(v2, v5) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L24e45c.  v2:= temp @kind object;
  #L24e45e.  v3:= 0I;
  #L24e460.  v4:= length @variable v2;
  #L24e462.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24e468.  v2:= temp @kind object;
  #L24e46a.  return v2 @kind object;
  #L24e46c.  v2:= new `java.lang.IllegalArgumentException`;
  #L24e470.  v3:= "charset == null" @kind object;
  #L24e474.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e47a.  throw v2;
  #L24e47c.  v3:= new `java.lang.IllegalArgumentException`;
  #L24e480.  v5:= new `java.lang.StringBuilder`;
  #L24e484.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e48a.  v0:= "endIndex > string.length: " @kind object;
  #L24e48e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e494.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e49a.  v4:= " > " @kind object;
  #L24e49e.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4a4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e4aa.  v2:= temp;
  #L24e4ac.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4b2.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e4b8.  v2:= temp @kind object;
  #L24e4ba.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e4c0.  throw v3;
  #L24e4c2.  v2:= new `java.lang.IllegalArgumentException`;
  #L24e4c6.  v5:= new `java.lang.StringBuilder`;
  #L24e4ca.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e4d0.  v0:= "endIndex < beginIndex: " @kind object;
  #L24e4d4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4da.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4e0.  v4:= " < " @kind object;
  #L24e4e4.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4ea.  call temp:= `append`(v5, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e4f0.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e4f6.  v3:= temp @kind object;
  #L24e4f8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e4fe.  throw v2;
  #L24e500.  v2:= new `java.lang.IllegalAccessError`;
  #L24e504.  v4:= new `java.lang.StringBuilder`;
  #L24e508.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e50e.  v5:= "beginIndex < 0: " @kind object;
  #L24e512.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e518.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e51e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e524.  v3:= temp @kind object;
  #L24e526.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e52c.  throw v2;
  #L24e52e.  v2:= new `java.lang.IllegalArgumentException`;
  #L24e532.  v3:= "string == null" @kind object;
  #L24e536.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e53c.  throw v2;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object, `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e550.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e556.  v0:= temp;
  #L24e558.  v1:= 0I;
  #L24e55a.  call temp:= `writeString`(v2, v3, v1, v0, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24e560.  v3:= temp @kind object;
  #L24e562.  return v3 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `java.nio.charset.Charset` v4 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec54.  call temp:= `writeString`(v0, v1, v2, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24ec5a.  v1:= temp @kind object;
  #L24ec5c.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec70.  call temp:= `writeString`(v0, v1, v2) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24ec76.  v1:= temp @kind object;
  #L24ec78.  return v1 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e574.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e578.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L24e57e.  v3:= temp @kind object;
  #L24e580.  return v3 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object, `long` v8 ) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24e594.  if v7 == 0 then goto L24e618;
  #L24e598.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e59c.  v2:= 0L;
  #L24e5a0.  v4:= v8 @kind wide;
  #L24e5a2.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24e5a8.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24e5ac.  v1:= 0L;
  #L24e5b0.  v3:= lcmp(v8, v1);
  #L24e5b4.  if v3 <= 0 then goto L24e616;
  #L24e5b8.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L24e5bc.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24e5c0.  v1:= v1 - v2 @kind int;
  #L24e5c2.  v1:= (`long`) v1 @kind i2l;
  #L24e5c4.  call temp:= `min`(v8, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24e5ca.  v1:= temp @kind wide;
  #L24e5cc.  v1:= (`int`) v1 @kind l2i;
  #L24e5ce.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e5d2.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L24e5d6.  call `write`(v7, v2, v3, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L24e5dc.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L24e5e0.  v2:= v2 + v1 @kind int;
  #L24e5e2.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L24e5e6.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e5ea.  v4:= (`long`) v1 @kind i2l;
  #L24e5ec.  v2:= v2 - v4 @kind long;
  #L24e5ee.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24e5f2.  v8:= v8 - v4 @kind long;
  #L24e5f4.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L24e5f8.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24e5fc.  if v1 != v2 then goto L24e5ac;
  #L24e600.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24e606.  v1:= temp @kind object;
  #L24e608.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L24e60c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24e612.  v0:= v1 @kind object;
  #L24e614.  goto L24e5ac;
  #L24e616.  return v6 @kind object;
  #L24e618.  v7:= new `java.lang.IllegalArgumentException`;
  #L24e61c.  v8:= "out == null" @kind object;
  #L24e620.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e626.  throw v7;
  #L24e628.  return @kind void;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24e63c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e642.  v0:= temp;
  #L24e644.  v1:= 0I;
  #L24e646.  call temp:= `writeUtf8`(v2, v3, v1, v0) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24e64c.  v3:= temp @kind object;
  #L24e64e.  return v3 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24e660.  if v8 == 0 then goto L24e8b4;
  #L24e664.  if v9 < 0 then goto L24e886;
  #L24e668.  if v10 < v9 then goto L24e848;
  #L24e66c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e672.  v0:= temp;
  #L24e674.  if v10 > v0 then goto L24e802;
  #L24e678.  if v9 >= v10 then goto L24e800;
  #L24e67c.  call temp:= `charAt`(v8, v9) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24e682.  v0:= temp;
  #L24e684.  v1:= 128I;
  #L24e688.  if v0 >= v1 then goto L24e6fc;
  #L24e68c.  v2:= 1I;
  #L24e68e.  call temp:= `writableSegment`(v7, v2) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24e694.  v2:= temp @kind object;
  #L24e696.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24e69a.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e69e.  v4:= v4 - v9 @kind int;
  #L24e6a0.  v5:= v4 - 8192;
  #L24e6a4.  call temp:= `min`(v10, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24e6aa.  v5:= temp;
  #L24e6ac.  v6:= v9 + 1;
  #L24e6b0.  v9:= v9 + v4 @kind int;
  #L24e6b2.  v0:= (`byte`) v0 @kind i2b;
  #L24e6b4.  v3[v9]:= v0 @kind byte;
  #L24e6b8.  if v6 >= v5 then goto L24e6da;
  #L24e6bc.  call temp:= `charAt`(v8, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24e6c2.  v9:= temp;
  #L24e6c4.  if v9 < v1 then goto L24e6ca;
  #L24e6c8.  goto L24e6da;
  #L24e6ca.  v0:= v6 + 1;
  #L24e6ce.  v6:= v6 + v4 @kind int;
  #L24e6d0.  v9:= (`byte`) v9 @kind i2b;
  #L24e6d2.  v3[v6]:= v9 @kind byte;
  #L24e6d6.  v6:= v0;
  #L24e6d8.  goto L24e6b8;
  #L24e6da.  v4:= v4 + v6 @kind int;
  #L24e6dc.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e6e0.  v4:= v4 - v9 @kind int;
  #L24e6e2.  v9:= v2.`okio.Segment.limit` @type ^`int`;
  #L24e6e6.  v9:= v9 + v4 @kind int;
  #L24e6e8.  v2.`okio.Segment.limit` @type ^`int` := v9;
  #L24e6ec.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24e6f0.  v2:= (`long`) v4 @kind i2l;
  #L24e6f2.  v0:= v0 + v2 @kind long;
  #L24e6f4.  v7.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24e6f8.  v9:= v6;
  #L24e6fa.  goto L24e678;
  #L24e6fc.  v2:= 2048I;
  #L24e700.  if v0 >= v2 then goto L24e724;
  #L24e704.  v2:= v0 ^> 6;
  #L24e708.  v2:= v2 ^| 192;
  #L24e70c.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e712.  v0:= v0 ^& 63;
  #L24e716.  v0:= v0 ^| v1 @kind int;
  #L24e718.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e71e.  v9:= v9 + 1;
  #L24e722.  goto L24e678;
  #L24e724.  v2:= 55296I;
  #L24e72a.  v3:= 63I;
  #L24e72e.  if v0 < v2 then goto L24e7d0;
  #L24e732.  v2:= 57343I;
  #L24e738.  if v0 <= v2 then goto L24e73e;
  #L24e73c.  goto L24e7d0;
  #L24e73e.  v4:= v9 + 1;
  #L24e742.  if v4 >= v10 then goto L24e750;
  #L24e746.  call temp:= `charAt`(v8, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24e74c.  v5:= temp;
  #L24e74e.  goto L24e752;
  #L24e750.  v5:= 0I;
  #L24e752.  v6:= 56319I;
  #L24e758.  if v0 > v6 then goto L24e7c4;
  #L24e75c.  v6:= 56320I;
  #L24e762.  if v5 < v6 then goto L24e7c4;
  #L24e766.  if v5 <= v2 then goto L24e76c;
  #L24e76a.  goto L24e7c4;
  #L24e76c.  v2:= 65536I;
  #L24e770.  v4:= -55297I;
  #L24e776.  v0:= v0 ^& v4 @kind int;
  #L24e778.  v0:= v0 ^< 10;
  #L24e77c.  v4:= -56321I;
  #L24e782.  v4:= v4 ^& v5 @kind int;
  #L24e784.  v0:= v0 ^| v4 @kind int;
  #L24e786.  v0:= v0 + v2 @kind int;
  #L24e788.  v2:= v0 ^> 18;
  #L24e78c.  v2:= v2 ^| 240;
  #L24e790.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e796.  v2:= v0 ^> 12;
  #L24e79a.  v2:= v2 ^& v3 @kind int;
  #L24e79c.  v2:= v2 ^| v1 @kind int;
  #L24e79e.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7a4.  v2:= v0 ^> 6;
  #L24e7a8.  v2:= v2 ^& v3 @kind int;
  #L24e7aa.  v2:= v2 ^| v1 @kind int;
  #L24e7ac.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7b2.  v0:= v0 ^& v3 @kind int;
  #L24e7b4.  v0:= v0 ^| v1 @kind int;
  #L24e7b6.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7bc.  v9:= v9 + 2;
  #L24e7c0.  goto L24e678;
  #L24e7c4.  call temp:= `writeByte`(v7, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7ca.  v9:= v4;
  #L24e7cc.  goto L24e678;
  #L24e7d0.  v2:= v0 ^> 12;
  #L24e7d4.  v2:= v2 ^| 224;
  #L24e7d8.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7de.  v2:= v0 ^> 6;
  #L24e7e2.  v2:= v2 ^& v3 @kind int;
  #L24e7e4.  v2:= v2 ^| v1 @kind int;
  #L24e7e6.  call temp:= `writeByte`(v7, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7ec.  v0:= v0 ^& 63;
  #L24e7f0.  v0:= v0 ^| v1 @kind int;
  #L24e7f2.  call temp:= `writeByte`(v7, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e7f8.  v9:= v9 + 1;
  #L24e7fc.  goto L24e678;
  #L24e800.  return v7 @kind object;
  #L24e802.  v9:= new `java.lang.IllegalArgumentException`;
  #L24e806.  v0:= new `java.lang.StringBuilder`;
  #L24e80a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e810.  v1:= "endIndex > string.length: " @kind object;
  #L24e814.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e81a.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e820.  v10:= " > " @kind object;
  #L24e824.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e82a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24e830.  v8:= temp;
  #L24e832.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e838.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e83e.  v8:= temp @kind object;
  #L24e840.  call `<init>`(v9, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e846.  throw v9;
  #L24e848.  v8:= new `java.lang.IllegalArgumentException`;
  #L24e84c.  v0:= new `java.lang.StringBuilder`;
  #L24e850.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e856.  v1:= "endIndex < beginIndex: " @kind object;
  #L24e85a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e860.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e866.  v10:= " < " @kind object;
  #L24e86a.  call temp:= `append`(v0, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e870.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e876.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e87c.  v9:= temp @kind object;
  #L24e87e.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e884.  throw v8;
  #L24e886.  v8:= new `java.lang.IllegalArgumentException`;
  #L24e88a.  v10:= new `java.lang.StringBuilder`;
  #L24e88e.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e894.  v0:= "beginIndex < 0: " @kind object;
  #L24e898.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e89e.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e8a4.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e8aa.  v9:= temp @kind object;
  #L24e8ac.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e8b2.  throw v8;
  #L24e8b4.  v8:= new `java.lang.IllegalArgumentException`;
  #L24e8b8.  v9:= "string == null" @kind object;
  #L24e8bc.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e8c2.  throw v8;
  #L24e8c4.  return @kind void;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ec8c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24ec92.  v1:= temp @kind object;
  #L24ec94.  return v1 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24eca8.  call temp:= `writeUtf8`(v0, v1, v2, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24ecae.  v1:= temp @kind object;
  #L24ecb0.  return v1 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24e8d8.  v0:= 128I;
  #L24e8dc.  if v4 >= v0 then goto L24e8e8;
  #L24e8e0.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e8e6.  goto L24e998;
  #L24e8e8.  v1:= 2048I;
  #L24e8ec.  v2:= 63I;
  #L24e8f0.  if v4 >= v1 then goto L24e90e;
  #L24e8f4.  v1:= v4 ^> 6;
  #L24e8f8.  v1:= v1 ^| 192;
  #L24e8fc.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e902.  v4:= v4 ^& v2 @kind int;
  #L24e904.  v4:= v4 ^| v0 @kind int;
  #L24e906.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e90c.  goto L24e998;
  #L24e90e.  v1:= 65536I;
  #L24e912.  if v4 >= v1 then goto L24e95a;
  #L24e916.  v1:= 55296I;
  #L24e91c.  if v4 < v1 then goto L24e932;
  #L24e920.  v1:= 57343I;
  #L24e926.  if v4 > v1 then goto L24e932;
  #L24e92a.  call temp:= `writeByte`(v3, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e930.  goto L24e998;
  #L24e932.  v1:= v4 ^> 12;
  #L24e936.  v1:= v1 ^| 224;
  #L24e93a.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e940.  v1:= v4 ^> 6;
  #L24e944.  v1:= v1 ^& v2 @kind int;
  #L24e946.  v1:= v1 ^| v0 @kind int;
  #L24e948.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e94e.  v4:= v4 ^& v2 @kind int;
  #L24e950.  v4:= v4 ^| v0 @kind int;
  #L24e952.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e958.  goto L24e998;
  #L24e95a.  v1:= 1114111I;
  #L24e960.  if v4 > v1 then goto L24e99a;
  #L24e964.  v1:= v4 ^> 18;
  #L24e968.  v1:= v1 ^| 240;
  #L24e96c.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e972.  v1:= v4 ^> 12;
  #L24e976.  v1:= v1 ^& v2 @kind int;
  #L24e978.  v1:= v1 ^| v0 @kind int;
  #L24e97a.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e980.  v1:= v4 ^> 6;
  #L24e984.  v1:= v1 ^& v2 @kind int;
  #L24e986.  v1:= v1 ^| v0 @kind int;
  #L24e988.  call temp:= `writeByte`(v3, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e98e.  v4:= v4 ^& v2 @kind int;
  #L24e990.  v4:= v4 ^| v0 @kind int;
  #L24e992.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24e998.  return v3 @kind object;
  #L24e99a.  v0:= new `java.lang.IllegalArgumentException`;
  #L24e99e.  v1:= new `java.lang.StringBuilder`;
  #L24e9a2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24e9a8.  v2:= "Unexpected code point: " @kind object;
  #L24e9ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e9b2.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24e9b8.  v4:= temp @kind object;
  #L24e9ba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24e9c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24e9c6.  v4:= temp @kind object;
  #L24e9c8.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24e9ce.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v0 @kind this, `int` v1 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L24ecc4.  call temp:= `writeUtf8CodePoint`(v0, v1) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24ecca.  v1:= temp @kind object;
  #L24eccc.  return v1 @kind object;
}
