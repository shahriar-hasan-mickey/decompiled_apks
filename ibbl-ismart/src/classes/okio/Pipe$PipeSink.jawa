record `okio.Pipe$PipeSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Pipe` `okio.Pipe$PipeSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Pipe$PipeSink.timeout` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okio.Pipe$PipeSink` v0 @kind this, `okio.Pipe` v1 @kind object) @signature `Lokio/Pipe$PipeSink;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2522a0.  v0.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` := v1 @kind object;
  #L2522a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2522aa.  v1:= new `okio.Timeout`;
  #L2522ae.  call `<init>`(v1) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L2522b4.  v0.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L2522b8.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2522cc.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2522d0.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L2522d4.  @monitorenter v0
  #L2522d6.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2522da.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L2522de.  if v1 == 0 then goto L2522e6;
  #L2522e2.  @monitorexit v0
  #L2522e4.  return @kind void;
  #L2522e6.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2522ea.  v1:= v1.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L2522ee.  if v1 == 0 then goto L252320;
  #L2522f2.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2522f6.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L2522fa.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L252300.  v1:= temp @kind wide;
  #L252302.  v3:= 0L;
  #L252306.  v5:= lcmp(v1, v3);
  #L25230a.  if v5 > 0 then goto L252310;
  #L25230e.  goto L252320;
  #L252310.  v1:= new `java.io.IOException`;
  #L252314.  v2:= "source is closed" @kind object;
  #L252318.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25231e.  throw v1;
  #L252320.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252324.  v2:= 1I;
  #L252326.  v1.`okio.Pipe.sinkClosed` @type ^`boolean` := v2 @kind boolean;
  #L25232a.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L25232e.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L252332.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L252338.  @monitorexit v0
  #L25233a.  return @kind void;
  #L25233c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25233e.  @monitorexit v0
  #L252340.  throw v1;
  catch `java.lang.Throwable` @[L2522d6..L252340] goto L25233c;
}
procedure `void` `flush`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L252360.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252364.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L252368.  @monitorenter v0
  #L25236a.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L25236e.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L252372.  if v1 != 0 then goto L2523b4;
  #L252376.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L25237a.  v1:= v1.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L25237e.  if v1 == 0 then goto L2523b0;
  #L252382.  v1:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252386.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L25238a.  call temp:= `size`(v1) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L252390.  v1:= temp @kind wide;
  #L252392.  v3:= 0L;
  #L252396.  v5:= lcmp(v1, v3);
  #L25239a.  if v5 > 0 then goto L2523a0;
  #L25239e.  goto L2523b0;
  #L2523a0.  v1:= new `java.io.IOException`;
  #L2523a4.  v2:= "source is closed" @kind object;
  #L2523a8.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2523ae.  throw v1;
  #L2523b0.  @monitorexit v0
  #L2523b2.  return @kind void;
  #L2523b4.  v1:= new `java.lang.IllegalStateException`;
  #L2523b8.  v2:= "closed" @kind object;
  #L2523bc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2523c2.  throw v1;
  #L2523c4.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2523c6.  @monitorexit v0
  #L2523c8.  throw v1;
  catch `java.lang.Throwable` @[L25236a..L2523c8] goto L2523c4;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$PipeSink` v1 @kind this) @signature `Lokio/Pipe$PipeSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L252288.  v0:= v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L25228c.  return v0 @kind object;
}
procedure `void` `write`(`okio.Pipe$PipeSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/Pipe$PipeSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2523e8.  v0:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2523ec.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L2523f0.  @monitorenter v0
  #L2523f2.  v1:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L2523f6.  v1:= v1.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L2523fa.  if v1 != 0 then goto L252488;
  #L2523fe.  v1:= 0L;
  #L252402.  v3:= lcmp(v9, v1);
  #L252406.  if v3 <= 0 then goto L252484;
  #L25240a.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L25240e.  v3:= v3.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L252412.  if v3 != 0 then goto L252474;
  #L252416.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L25241a.  v3:= v3.`okio.Pipe.maxBufferSize` @type ^`long` @kind wide;
  #L25241e.  v5:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252422.  v5:= v5.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L252426.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L25242c.  v5:= temp @kind wide;
  #L25242e.  v3:= v3 - v5 @kind long;
  #L252430.  v5:= lcmp(v3, v1);
  #L252434.  if v5 != 0 then goto L25244c;
  #L252438.  v1:= v7.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L25243c.  v2:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252440.  v2:= v2.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L252444.  call `waitUntilNotified`(v1, v2) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L25244a.  goto L2523fe;
  #L25244c.  call temp:= `min`(v3, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L252452.  v1:= temp @kind wide;
  #L252454.  v3:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252458.  v3:= v3.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L25245c.  call `write`(v3, v8, v1) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L252462.  v9:= v9 - v1 @kind long;
  #L252464.  v1:= v7.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L252468.  v1:= v1.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L25246c.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L252472.  goto L2523fe;
  #L252474.  v8:= new `java.io.IOException`;
  #L252478.  v9:= "source is closed" @kind object;
  #L25247c.  call `<init>`(v8, v9) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252482.  throw v8;
  #L252484.  @monitorexit v0
  #L252486.  return @kind void;
  #L252488.  v8:= new `java.lang.IllegalStateException`;
  #L25248c.  v9:= "closed" @kind object;
  #L252490.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L252496.  throw v8;
  #L252498.  v8:= Exception @type ^`java.lang.Throwable` @kind object;
  #L25249a.  @monitorexit v0
  #L25249c.  throw v8;
  #L25249e.  return @kind void;
  catch `java.lang.Throwable` @[L2523f2..L25249c] goto L252498;
}
