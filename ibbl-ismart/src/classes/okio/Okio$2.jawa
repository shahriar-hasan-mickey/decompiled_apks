record `okio.Okio$2` @kind class @AccessFlag FINAL extends `okio.Source` @kind interface {
  `java.io.InputStream` `okio.Okio$2.val$in` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$2.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$2` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lokio/Okio$2;.<init>:(Lokio/Timeout;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L251ca4.  v0.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L251ca8.  v0.`okio.Okio$2.val$in` @type ^`java.io.InputStream` := v2 @kind object;
  #L251cac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L251cb2.  return @kind void;
}
procedure `void` `close`(`okio.Okio$2` v1 @kind this) @signature `Lokio/Okio$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251cc4.  v0:= v1.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L251cc8.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L251cce.  return @kind void;
}
procedure `long` `read`(`okio.Okio$2` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokio/Okio$2;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L251bac.  v0:= 0L;
  #L251bb0.  v2:= lcmp(v5, v0);
  #L251bb4.  if v2 < 0 then goto L251c3e;
  #L251bb8.  v2:= lcmp(v5, v0);
  #L251bbc.  if v2 != 0 then goto L251bc2;
  #L251bc0.  return v0 @kind wide;
  #L251bc2.  v0:= v3.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` @kind object;
  #L251bc6.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L251bcc.  v0:= 1I;
  #L251bce.  call temp:= `writableSegment`(v4, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L251bd4.  v0:= temp @kind object;
  #L251bd6.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L251bda.  v1:= v1 - 8192;
  #L251bde.  v1:= (`long`) v1 @kind i2l;
  #L251be0.  call temp:= `min`(v5, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L251be6.  v5:= temp @kind wide;
  #L251be8.  v5:= (`int`) v5 @kind l2i;
  #L251bea.  v6:= v3.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L251bee.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L251bf2.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L251bf6.  call temp:= `read`(v6, v1, v2, v5) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L251bfc.  v5:= temp;
  #L251bfe.  v6:= -1I;
  #L251c00.  if v5 != v6 then goto L251c0a;
  #L251c04.  v4:= -1L;
  #L251c08.  return v4 @kind wide;
  #L251c0a.  v6:= v0.`okio.Segment.limit` @type ^`int`;
  #L251c0e.  v6:= v6 + v5 @kind int;
  #L251c10.  v0.`okio.Segment.limit` @type ^`int` := v6;
  #L251c14.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L251c18.  v5:= (`long`) v5 @kind i2l;
  #L251c1a.  v0:= v0 + v5 @kind long;
  #L251c1c.  v4.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L251c20.  return v5 @kind wide;
  #L251c22.  v4:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L251c24.  call temp:= `isAndroidGetsocknameError`(v4) @signature `Lokio/Okio;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L251c2a.  v5:= temp;
  #L251c2c.  if v5 == 0 then goto L251c3c;
  #L251c30.  v5:= new `java.io.IOException`;
  #L251c34.  call `<init>`(v5, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L251c3a.  throw v5;
  #L251c3c.  throw v4;
  #L251c3e.  v4:= new `java.lang.IllegalArgumentException`;
  #L251c42.  v0:= new `java.lang.StringBuilder`;
  #L251c46.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L251c4c.  v1:= "byteCount < 0: " @kind object;
  #L251c50.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251c56.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L251c5c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L251c62.  v5:= temp @kind object;
  #L251c64.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L251c6a.  throw v4;
  catch `java.lang.AssertionError` @[L251bc2..L251c20] goto L251c22;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$2` v1 @kind this) @signature `Lokio/Okio$2;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L251c8c.  v0:= v1.`okio.Okio$2.val$timeout` @type ^`okio.Timeout` @kind object;
  #L251c90.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$2` v2 @kind this) @signature `Lokio/Okio$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L251b68.  v0:= new `java.lang.StringBuilder`;
  #L251b6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L251b72.  v1:= "source(" @kind object;
  #L251b76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251b7c.  v1:= v2.`okio.Okio$2.val$in` @type ^`java.io.InputStream` @kind object;
  #L251b80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251b86.  v1:= ")" @kind object;
  #L251b8a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L251b90.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L251b96.  v0:= temp @kind object;
  #L251b98.  return v0 @kind object;
}
