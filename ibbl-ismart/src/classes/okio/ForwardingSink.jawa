record `okio.ForwardingSink` @kind class @AccessFlag PUBLIC_ABSTRACT extends `okio.Sink` @kind interface {
  `okio.Sink` `okio.ForwardingSink.delegate` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.ForwardingSink` v1 @kind this, `okio.Sink` v2 @kind object) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L250840.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L250846.  if v2 == 0 then goto L250850;
  #L25084a.  v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` := v2 @kind object;
  #L25084e.  return @kind void;
  #L250850.  v2:= new `java.lang.IllegalArgumentException`;
  #L250854.  v0:= "delegate == null" @kind object;
  #L250858.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L25085e.  throw v2;
}
procedure `void` `close`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250870.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L250874.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L25087a.  return @kind void;
}
procedure `okio.Sink` `delegate`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.delegate:()Lokio/Sink;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L250808.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L25080c.  return v0 @kind object;
}
procedure `void` `flush`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L25088c.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L250890.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L250896.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.ForwardingSink` v1 @kind this) @signature `Lokio/ForwardingSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L250820.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L250824.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L25082a.  v0:= temp @kind object;
  #L25082c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.ForwardingSink` v2 @kind this) @signature `Lokio/ForwardingSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2507a8.  v0:= new `java.lang.StringBuilder`;
  #L2507ac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2507b2.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L2507b8.  v1:= temp @kind object;
  #L2507ba.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L2507c0.  v1:= temp @kind object;
  #L2507c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2507c8.  v1:= "(" @kind object;
  #L2507cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2507d2.  v1:= v2.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L2507d6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L2507dc.  v1:= temp @kind object;
  #L2507de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2507e4.  v1:= ")" @kind object;
  #L2507e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2507ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2507f4.  v0:= temp @kind object;
  #L2507f6.  return v0 @kind object;
}
procedure `void` `write`(`okio.ForwardingSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2508a8.  v0:= v1.`okio.ForwardingSink.delegate` @type ^`okio.Sink` @kind object;
  #L2508ac.  call `write`(v0, v2, v3) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2508b2.  return @kind void;
}
