record `com.github.kevinsawicki.http.HttpRequest$Base64` @kind class @AccessFlag PUBLIC {
}
global `byte` `@@com.github.kevinsawicki.http.HttpRequest$Base64.EQUALS_SIGN` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.github.kevinsawicki.http.HttpRequest$Base64.PREFERRED_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.github.kevinsawicki.http.HttpRequest$Base64._STANDARD_ALPHABET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L19016c.  v0:= 64I;
  #L190170.  v0:= new `byte`[v0];
  #L190174.  goto L190180;
  #L19017a.  `@@com.github.kevinsawicki.http.HttpRequest$Base64._STANDARD_ALPHABET` @type ^`byte`[] := v0 @kind object;
  #L19017e.  return @kind void;
  #L190180.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L1901c7.  goto L19017a;
}
procedure `void` `<init>`(`com.github.kevinsawicki.http.HttpRequest$Base64` v0 @kind this) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1901d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1901de.  return @kind void;
}
procedure `java.lang.String` `encode`(`java.lang.String` v1 @kind object) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encode:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1900c8.  v0:= "US-ASCII" @kind object;
  #L1900cc.  call temp:= `getBytes`(v1, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #L1900d2.  v1:= temp @kind object;
  #L1900d4.  goto L1900de;
  #L1900d6.  call temp:= `getBytes`(v1) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L1900dc.  v1:= temp @kind object;
  #L1900de.  call temp:= `encodeBytes`(v1) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytes:([B)Ljava/lang/String;` @kind static;
  #L1900e4.  v1:= temp @kind object;
  #L1900e6.  return v1 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L1900c8..L1900d4] goto L1900d6;
}
procedure `byte`[] `encode3to4`(`byte`[] v4 @kind object, `int` v5 , `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encode3to4:([BII[BI)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18fe50.  v0:= `@@com.github.kevinsawicki.http.HttpRequest$Base64._STANDARD_ALPHABET` @type ^`byte`[] @kind object;
  #L18fe54.  v1:= 0I;
  #L18fe56.  if v6 <= 0 then goto L18fe68;
  #L18fe5a.  v2:= v4[v5] @kind byte;
  #L18fe5e.  v2:= v2 ^< 24;
  #L18fe62.  v2:= v2 ^>> 8;
  #L18fe66.  goto L18fe6a;
  #L18fe68.  v2:= 0I;
  #L18fe6a.  v3:= 1I;
  #L18fe6c.  if v6 <= v3 then goto L18fe82;
  #L18fe70.  v3:= v5 + 1;
  #L18fe74.  v3:= v4[v3] @kind byte;
  #L18fe78.  v3:= v3 ^< 24;
  #L18fe7c.  v3:= v3 ^>> 16;
  #L18fe80.  goto L18fe84;
  #L18fe82.  v3:= 0I;
  #L18fe84.  v2:= v2 ^| v3 @kind int;
  #L18fe86.  v3:= 2I;
  #L18fe88.  if v6 <= v3 then goto L18fe9a;
  #L18fe8c.  v5:= v5 + v3 @kind int;
  #L18fe8e.  v4:= v4[v5] @kind byte;
  #L18fe92.  v4:= v4 ^< 24;
  #L18fe96.  v1:= v4 ^>> 24;
  #L18fe9a.  v4:= v2 ^| v1 @kind int;
  #L18fe9e.  v5:= 61I;
  #L18fea2.  goto L18ff60;
  #L18fea8.  return v7 @kind object;
  #L18feaa.  v5:= v4 ^>> 18;
  #L18feae.  v5:= v0[v5] @kind byte;
  #L18feb2.  v7[v8]:= v5 @kind byte;
  #L18feb6.  v5:= v8 + 1;
  #L18feba.  v6:= v4 ^>> 12;
  #L18febe.  v6:= v6 ^& 63;
  #L18fec2.  v6:= v0[v6] @kind byte;
  #L18fec6.  v7[v5]:= v6 @kind byte;
  #L18feca.  v5:= v8 + 2;
  #L18fece.  v6:= v4 ^>> 6;
  #L18fed2.  v6:= v6 ^& 63;
  #L18fed6.  v6:= v0[v6] @kind byte;
  #L18feda.  v7[v5]:= v6 @kind byte;
  #L18fede.  v8:= v8 + 3;
  #L18fee2.  v4:= v4 ^& 63;
  #L18fee6.  v4:= v0[v4] @kind byte;
  #L18feea.  v7[v8]:= v4 @kind byte;
  #L18feee.  return v7 @kind object;
  #L18fef0.  v6:= v4 ^>> 18;
  #L18fef4.  v6:= v0[v6] @kind byte;
  #L18fef8.  v7[v8]:= v6 @kind byte;
  #L18fefc.  v6:= v8 + 1;
  #L18ff00.  v1:= v4 ^>> 12;
  #L18ff04.  v1:= v1 ^& 63;
  #L18ff08.  v1:= v0[v1] @kind byte;
  #L18ff0c.  v7[v6]:= v1 @kind byte;
  #L18ff10.  v6:= v8 + 2;
  #L18ff14.  v4:= v4 ^>> 6;
  #L18ff18.  v4:= v4 ^& 63;
  #L18ff1c.  v4:= v0[v4] @kind byte;
  #L18ff20.  v7[v6]:= v4 @kind byte;
  #L18ff24.  v8:= v8 + 3;
  #L18ff28.  v7[v8]:= v5 @kind byte;
  #L18ff2c.  return v7 @kind object;
  #L18ff2e.  v6:= v4 ^>> 18;
  #L18ff32.  v6:= v0[v6] @kind byte;
  #L18ff36.  v7[v8]:= v6 @kind byte;
  #L18ff3a.  v6:= v8 + 1;
  #L18ff3e.  v4:= v4 ^>> 12;
  #L18ff42.  v4:= v4 ^& 63;
  #L18ff46.  v4:= v0[v4] @kind byte;
  #L18ff4a.  v7[v6]:= v4 @kind byte;
  #L18ff4e.  v4:= v8 + 2;
  #L18ff52.  v7[v4]:= v5 @kind byte;
  #L18ff56.  v8:= v8 + 3;
  #L18ff5a.  v7[v8]:= v5 @kind byte;
  #L18ff5e.  return v7 @kind object;
  #L18ff60.  switch v6
                  | 1 => goto L18ff2e
                  | 2 => goto L18fef0
                  | 3 => goto L18feaa
                  | else => goto L18fea8;
}
procedure `java.lang.String` `encodeBytes`(`byte`[] v2 @kind object) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytes:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L190108.  v0:= length @variable v2;
  #L19010a.  v1:= 0I;
  #L19010c.  call temp:= `encodeBytes`(v2, v1, v0) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytes:([BII)Ljava/lang/String;` @kind static;
  #L190112.  v2:= temp @kind object;
  #L190114.  return v2 @kind object;
}
procedure `java.lang.String` `encodeBytes`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytes:([BII)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L190128.  call temp:= `encodeBytesToBytes`(v0, v1, v2) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytesToBytes:([BII)[B` @kind static;
  #L19012e.  v0:= temp @kind object;
  #L190130.  v1:= new `java.lang.String`;
  #L190134.  v2:= "US-ASCII" @kind object;
  #L190138.  call `<init>`(v1, v0, v2) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L19013e.  return v1 @kind object;
  #L190140.  v1:= new `java.lang.String`;
  #L190144.  call `<init>`(v1, v0) @signature `Ljava/lang/String;.<init>:([B)V` @kind direct;
  #L19014a.  return v1 @kind object;
  catch `java.io.UnsupportedEncodingException` @[L190130..L19013e] goto L190140;
}
procedure `byte`[] `encodeBytesToBytes`(`byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encodeBytesToBytes:([BII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L18ff84.  if v8 == 0 then goto L1900a4;
  #L18ff88.  if v9 < 0 then goto L190076;
  #L18ff8c.  if v10 < 0 then goto L190048;
  #L18ff90.  v0:= v9 + v10 @kind int;
  #L18ff94.  v1:= length @variable v8;
  #L18ff96.  v2:= 1I;
  #L18ff98.  v3:= 3I;
  #L18ff9a.  v4:= 0I;
  #L18ff9c.  if v0 > v1 then goto L190004;
  #L18ffa0.  v0:= v10 / 3;
  #L18ffa4.  v1:= 4I;
  #L18ffa6.  v0:= v0 * 4;
  #L18ffaa.  v5:= v10 %% 3;
  #L18ffae.  if v5 <= 0 then goto L18ffb4;
  #L18ffb2.  goto L18ffb6;
  #L18ffb4.  v1:= 0I;
  #L18ffb6.  v0:= v0 + v1 @kind int;
  #L18ffb8.  v0:= new `byte`[v0];
  #L18ffbc.  v1:= v10 + -2;
  #L18ffc0.  v5:= 0I;
  #L18ffc2.  v6:= 0I;
  #L18ffc4.  if v5 >= v1 then goto L18ffdc;
  #L18ffc8.  v7:= v5 + v9 @kind int;
  #L18ffcc.  call temp:= `encode3to4`(v8, v7, v3, v0, v6) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encode3to4:([BII[BI)[B` @kind static;
  #L18ffd2.  v5:= v5 + 3;
  #L18ffd6.  v6:= v6 + 4;
  #L18ffda.  goto L18ffc4;
  #L18ffdc.  if v5 >= v10 then goto L18ffee;
  #L18ffe0.  v9:= v9 + v5 @kind int;
  #L18ffe2.  v10:= v10 - v5 @kind int;
  #L18ffe4.  call temp:= `encode3to4`(v8, v9, v10, v0, v6) @signature `Lcom/github/kevinsawicki/http/HttpRequest$Base64;.encode3to4:([BII[BI)[B` @kind static;
  #L18ffea.  v6:= v6 + 4;
  #L18ffee.  v8:= length @variable v0;
  #L18fff0.  v8:= v8 - v2 @kind int;
  #L18fff2.  if v6 > v8 then goto L190002;
  #L18fff6.  v8:= new `byte`[v6];
  #L18fffa.  call `arraycopy`(v0, v4, v8, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L190000.  return v8 @kind object;
  #L190002.  return v0 @kind object;
  #L190004.  v0:= new `java.lang.IllegalArgumentException`;
  #L190008.  v1:= new `java.lang.Object`[v3];
  #L19000c.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L190012.  v9:= temp @kind object;
  #L190014.  v1[v4]:= v9 @kind object;
  #L190018.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L19001e.  v9:= temp @kind object;
  #L190020.  v1[v2]:= v9 @kind object;
  #L190024.  v8:= length @variable v8;
  #L190026.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L19002c.  v8:= temp @kind object;
  #L19002e.  v9:= 2I;
  #L190030.  v1[v9]:= v8 @kind object;
  #L190034.  v8:= "Cannot have offset of %d and length of %d with array of length %d" @kind object;
  #L190038.  call temp:= `format`(v8, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L19003e.  v8:= temp @kind object;
  #L190040.  call `<init>`(v0, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190046.  throw v0;
  #L190048.  v8:= new `java.lang.IllegalArgumentException`;
  #L19004c.  v9:= new `java.lang.StringBuilder`;
  #L190050.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L190056.  v0:= "Cannot have length offset: " @kind object;
  #L19005a.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L190060.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L190066.  call temp:= `toString`(v9) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19006c.  v9:= temp @kind object;
  #L19006e.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L190074.  throw v8;
  #L190076.  v8:= new `java.lang.IllegalArgumentException`;
  #L19007a.  v10:= new `java.lang.StringBuilder`;
  #L19007e.  call `<init>`(v10) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L190084.  v0:= "Cannot have negative offset: " @kind object;
  #L190088.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19008e.  call temp:= `append`(v10, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L190094.  call temp:= `toString`(v10) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19009a.  v9:= temp @kind object;
  #L19009c.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1900a2.  throw v8;
  #L1900a4.  v8:= new `java.lang.NullPointerException`;
  #L1900a8.  v9:= "Cannot serialize a null array." @kind object;
  #L1900ac.  call `<init>`(v8, v9) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1900b2.  throw v8;
  #L1900b4.  return @kind void;
}
