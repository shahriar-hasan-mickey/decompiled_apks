record `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` @kind class @AccessFlag  extends `android.graphics.drawable.Drawable$ConstantState` @kind class {
  `boolean` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mAutoMirrored` @AccessFlag ;
  `boolean` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCacheDirty` @AccessFlag ;
  `boolean` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedAutoMirrored` @AccessFlag ;
  `android.graphics.Bitmap` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedBitmap` @AccessFlag ;
  `int` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedRootAlpha` @AccessFlag ;
  `int`[] `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedThemeAttrs` @AccessFlag ;
  `android.content.res.ColorStateList` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedTint` @AccessFlag ;
  `android.graphics.PorterDuff$Mode` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mCachedTintMode` @AccessFlag ;
  `int` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mChangingConfigurations` @AccessFlag ;
  `android.graphics.Paint` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mTempPaint` @AccessFlag ;
  `android.content.res.ColorStateList` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mTint` @AccessFlag ;
  `android.graphics.PorterDuff$Mode` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mTintMode` @AccessFlag ;
  `android.support.graphics.drawable.VectorDrawableCompat$VPathRenderer` `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState.mVPathRenderer` @AccessFlag ;
}
procedure `void` `<init>`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v3 @kind this, `android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v4 @kind object) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.<init>:(Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `canReuseBitmap`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this, `int` v2 , `int` v3 ) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.canReuseBitmap:(II)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `canReuseCache`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v2 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.canReuseCache:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `createCachedBitmapIfNeeded`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this, `int` v2 , `int` v3 ) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.createCachedBitmapIfNeeded:(II)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `drawCachedBitmapWithRootAlpha`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v2 @kind this, `android.graphics.Canvas` v3 @kind object, `android.graphics.ColorFilter` v4 @kind object, `android.graphics.Rect` v5 @kind object) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.drawCachedBitmapWithRootAlpha:(Landroid/graphics/Canvas;Landroid/graphics/ColorFilter;Landroid/graphics/Rect;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getChangingConfigurations`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.getChangingConfigurations:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `android.graphics.Paint` `getPaint`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v2 @kind this, `android.graphics.ColorFilter` v3 @kind object) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.getPaint:(Landroid/graphics/ColorFilter;)Landroid/graphics/Paint;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `hasTranslucentRoot`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v2 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.hasTranslucentRoot:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `android.graphics.drawable.Drawable` `newDrawable`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.newDrawable:()Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC {

  # return;
}
procedure `android.graphics.drawable.Drawable` `newDrawable`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v0 @kind this, `android.content.res.Resources` v1 @kind object) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.newDrawable:(Landroid/content/res/Resources;)Landroid/graphics/drawable/Drawable;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateCacheStates`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v1 @kind this) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.updateCacheStates:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `updateCachedBitmap`(`android.support.graphics.drawable.VectorDrawableCompat$VectorDrawableCompatState` v3 @kind this, `int` v4 , `int` v5 ) @signature `Landroid/support/graphics/drawable/VectorDrawableCompat$VectorDrawableCompatState;.updateCachedBitmap:(II)V` @AccessFlag PUBLIC {

  # return;
}
