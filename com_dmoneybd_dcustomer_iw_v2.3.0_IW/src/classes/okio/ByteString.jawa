record `okio.ByteString` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `okio.ByteString.b` @AccessFlag FINAL;
  `int` `okio.ByteString.c` @AccessFlag TRANSIENT;
  `java.lang.String` `okio.ByteString.d` @AccessFlag TRANSIENT;
}
global `okio.ByteString` `@@okio.ByteString.EMPTY` @AccessFlag PUBLIC_STATIC_FINAL;
global `char`[] `@@okio.ByteString.a` @AccessFlag STATIC_FINAL;
global `long` `@@okio.ByteString.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/ByteString;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L50bc04.  v0:= 16I;
  #L50bc08.  v0:= new `char`[v0];
  #L50bc0c.  goto L50bc2c;
  #L50bc12.  `@@okio.ByteString.a` @type ^`char`[] := v0 @kind object;
  #L50bc16.  v0:= 0I;
  #L50bc18.  v0:= new `byte`[v0];
  #L50bc1c.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50bc22.  v0:= temp @kind object;
  #L50bc24.  `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` := v0 @kind object;
  #L50bc28.  return @kind void;
  #L50bc2a.  
  #L50bc2c.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L50bc53.  goto L50bc12;
}
procedure `void` `<init>`(`okio.ByteString` v0 @kind this, `byte`[] v1 @kind object) @signature `Lokio/ByteString;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L50bc64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L50bc6a.  v0.`okio.ByteString.b` @type ^`byte`[] := v1 @kind object;
  #L50bc6e.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lokio/ByteString;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50afd4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50afda.  v0:= temp;
  #L50afdc.  v1:= 0I;
  #L50afde.  v2:= 0I;
  #L50afe0.  if v1 >= v0 then goto L50b02c;
  #L50afe4.  if v2 != v6 then goto L50afea;
  #L50afe8.  return v1;
  #L50afea.  call temp:= `codePointAt`(v5, v1) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L50aff0.  v3:= temp;
  #L50aff2.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L50aff8.  v4:= temp;
  #L50affa.  if v4 == 0 then goto L50b00e;
  #L50affe.  v4:= 10I;
  #L50b002.  if v3 == v4 then goto L50b00e;
  #L50b006.  v4:= 13I;
  #L50b00a.  if v3 != v4 then goto L50b018;
  #L50b00e.  v4:= 65533I;
  #L50b014.  if v3 != v4 then goto L50b01c;
  #L50b018.  v5:= -1I;
  #L50b01a.  return v5;
  #L50b01c.  v2:= v2 + 1;
  #L50b020.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L50b026.  v3:= temp;
  #L50b028.  v1:= v1 + v3 @kind int;
  #L50b02a.  goto L50afe0;
  #L50b02c.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50b032.  v5:= temp;
  #L50b034.  return v5;
}
procedure `okio.ByteString` `decodeBase64`(`java.lang.String` v1 @kind object) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50b5a8.  if v1 == 0 then goto L50b5c8;
  #L50b5ac.  call temp:= `decode`(v1) @signature `Lokio/Base64;.decode:(Ljava/lang/String;)[B` @kind static;
  #L50b5b2.  v1:= temp @kind object;
  #L50b5b4.  if v1 == 0 then goto L50b5c4;
  #L50b5b8.  v0:= new `okio.ByteString`;
  #L50b5bc.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b5c2.  goto L50b5c6;
  #L50b5c4.  v0:= 0I;
  #L50b5c6.  return v0 @kind object;
  #L50b5c8.  v1:= new `java.lang.IllegalArgumentException`;
  #L50b5cc.  v0:= "base64 == null" @kind object;
  #L50b5d0.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b5d6.  throw v1;
}
procedure `okio.ByteString` `decodeHex`(`java.lang.String` v5 @kind object) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50b5e8.  if v5 == 0 then goto L50b684;
  #L50b5ec.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50b5f2.  v0:= temp;
  #L50b5f4.  v0:= v0 %% 2;
  #L50b5f8.  if v0 != 0 then goto L50b656;
  #L50b5fc.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50b602.  v0:= temp;
  #L50b604.  v0:= v0 / 2;
  #L50b608.  v1:= new `byte`[v0];
  #L50b60c.  v2:= 0I;
  #L50b60e.  if v2 >= v0 then goto L50b64c;
  #L50b612.  v3:= v2 * 2;
  #L50b616.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50b61c.  v4:= temp;
  #L50b61e.  call temp:= `decodeHexDigit`(v4) @signature `Lokio/ByteString;.decodeHexDigit:(C)I` @kind static;
  #L50b624.  v4:= temp;
  #L50b626.  v4:= v4 ^< 4;
  #L50b62a.  v3:= v3 + 1;
  #L50b62e.  call temp:= `charAt`(v5, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50b634.  v3:= temp;
  #L50b636.  call temp:= `decodeHexDigit`(v3) @signature `Lokio/ByteString;.decodeHexDigit:(C)I` @kind static;
  #L50b63c.  v3:= temp;
  #L50b63e.  v4:= v4 + v3 @kind int;
  #L50b640.  v3:= (`byte`) v4 @kind i2b;
  #L50b642.  v1[v2]:= v3 @kind byte;
  #L50b646.  v2:= v2 + 1;
  #L50b64a.  goto L50b60e;
  #L50b64c.  call temp:= `of`(v1) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50b652.  v5:= temp @kind object;
  #L50b654.  return v5 @kind object;
  #L50b656.  v0:= new `java.lang.IllegalArgumentException`;
  #L50b65a.  v1:= new `java.lang.StringBuilder`;
  #L50b65e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b664.  v2:= "Unexpected hex string: " @kind object;
  #L50b668.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b66e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b674.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50b67a.  v5:= temp @kind object;
  #L50b67c.  call `<init>`(v0, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b682.  throw v0;
  #L50b684.  v5:= new `java.lang.IllegalArgumentException`;
  #L50b688.  v0:= "hex == null" @kind object;
  #L50b68c.  call `<init>`(v5, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b692.  goto L50b696;
  #L50b694.  throw v5;
  #L50b696.  goto L50b694;
}
procedure `int` `decodeHexDigit`(`char` v3 ) @signature `Lokio/ByteString;.decodeHexDigit:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L50b0d8.  v0:= 48I;
  #L50b0dc.  if v3 < v0 then goto L50b0ec;
  #L50b0e0.  v1:= 57I;
  #L50b0e4.  if v3 > v1 then goto L50b0ec;
  #L50b0e8.  v3:= v3 - v0 @kind int;
  #L50b0ea.  return v3;
  #L50b0ec.  v0:= 97I;
  #L50b0f0.  if v3 < v0 then goto L50b104;
  #L50b0f4.  v1:= 102I;
  #L50b0f8.  if v3 > v1 then goto L50b104;
  #L50b0fc.  v3:= v3 - v0 @kind int;
  #L50b0fe.  v3:= v3 + 10;
  #L50b102.  return v3;
  #L50b104.  v0:= 65I;
  #L50b108.  if v3 < v0 then goto L50b116;
  #L50b10c.  v1:= 70I;
  #L50b110.  if v3 > v1 then goto L50b116;
  #L50b114.  goto L50b0fc;
  #L50b116.  v0:= new `java.lang.IllegalArgumentException`;
  #L50b11a.  v1:= new `java.lang.StringBuilder`;
  #L50b11e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b124.  v2:= "Unexpected hex digit: " @kind object;
  #L50b128.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b12e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b134.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50b13a.  v3:= temp @kind object;
  #L50b13c.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b142.  goto L50b146;
  #L50b144.  throw v0;
  #L50b146.  goto L50b144;
}
procedure `okio.ByteString` `digest`(`okio.ByteString` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/ByteString;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L50b6a8.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L50b6ae.  v2:= temp @kind object;
  #L50b6b0.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b6b4.  call temp:= `digest`(v2, v0) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L50b6ba.  v2:= temp @kind object;
  #L50b6bc.  call temp:= `of`(v2) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50b6c2.  v2:= temp @kind object;
  #L50b6c4.  return v2 @kind object;
  #L50b6c6.  v2:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L50b6c8.  v0:= new `java.lang.AssertionError`;
  #L50b6cc.  call `<init>`(v0, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50b6d2.  throw v0;
  catch `java.security.NoSuchAlgorithmException` @[L50b6a8..L50b6c4] goto L50b6c6;
}
procedure `okio.ByteString` `encodeString`(`java.lang.String` v1 @kind object, `java.nio.charset.Charset` v2 @kind object) @signature `Lokio/ByteString;.encodeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50b6f4.  if v1 == 0 then goto L50b720;
  #L50b6f8.  if v2 == 0 then goto L50b710;
  #L50b6fc.  v0:= new `okio.ByteString`;
  #L50b700.  call temp:= `getBytes`(v1, v2) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L50b706.  v1:= temp @kind object;
  #L50b708.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b70e.  return v0 @kind object;
  #L50b710.  v1:= new `java.lang.IllegalArgumentException`;
  #L50b714.  v2:= "charset == null" @kind object;
  #L50b718.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b71e.  throw v1;
  #L50b720.  v1:= new `java.lang.IllegalArgumentException`;
  #L50b724.  v2:= "s == null" @kind object;
  #L50b728.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b72e.  throw v1;
}
procedure `okio.ByteString` `encodeUtf8`(`java.lang.String` v2 @kind object) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50b740.  if v2 == 0 then goto L50b760;
  #L50b744.  v0:= new `okio.ByteString`;
  #L50b748.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L50b74c.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L50b752.  v1:= temp @kind object;
  #L50b754.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b75a.  v0.`okio.ByteString.d` @type ^`java.lang.String` := v2 @kind object;
  #L50b75e.  return v0 @kind object;
  #L50b760.  v2:= new `java.lang.IllegalArgumentException`;
  #L50b764.  v0:= "s == null" @kind object;
  #L50b768.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b76e.  throw v2;
}
procedure `okio.ByteString` `hmac`(`okio.ByteString` v2 @kind this, `java.lang.String` v3 @kind object, `okio.ByteString` v4 @kind object) @signature `Lokio/ByteString;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L50b780.  call temp:= `getInstance`(v3) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L50b786.  v0:= temp @kind object;
  #L50b788.  v1:= new `javax.crypto.spec.SecretKeySpec`;
  #L50b78c.  call temp:= `toByteArray`(v4) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L50b792.  v4:= temp @kind object;
  #L50b794.  call `<init>`(v1, v4, v3) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L50b79a.  call `init`(v0, v1) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L50b7a0.  v3:= v2.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b7a4.  call temp:= `doFinal`(v0, v3) @signature `Ljavax/crypto/Mac;.doFinal:([B)[B` @kind virtual;
  #L50b7aa.  v3:= temp @kind object;
  #L50b7ac.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L50b7b2.  v3:= temp @kind object;
  #L50b7b4.  return v3 @kind object;
  #L50b7b6.  v3:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L50b7b8.  v4:= new `java.lang.IllegalArgumentException`;
  #L50b7bc.  call `<init>`(v4, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L50b7c2.  throw v4;
  #L50b7c4.  v3:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L50b7c6.  v4:= new `java.lang.AssertionError`;
  #L50b7ca.  call `<init>`(v4, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50b7d0.  throw v4;
  catch `java.security.NoSuchAlgorithmException` @[L50b780..L50b7b4] goto L50b7c4;
  catch `java.security.InvalidKeyException` @[L50b780..L50b7b4] goto L50b7b6;
}
procedure `okio.ByteString` `of`(`java.nio.ByteBuffer` v1 @kind object) @signature `Lokio/ByteString;.of:(Ljava/nio/ByteBuffer;)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50b8fc.  if v1 == 0 then goto L50b91e;
  #L50b900.  call temp:= `remaining`(v1) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L50b906.  v0:= temp;
  #L50b908.  v0:= new `byte`[v0];
  #L50b90c.  call temp:= `get`(v1, v0) @signature `Ljava/nio/ByteBuffer;.get:([B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L50b912.  v1:= new `okio.ByteString`;
  #L50b916.  call `<init>`(v1, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b91c.  return v1 @kind object;
  #L50b91e.  v1:= new `java.lang.IllegalArgumentException`;
  #L50b922.  v0:= "data == null" @kind object;
  #L50b926.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b92c.  throw v1;
}
procedure `okio.ByteString` `of`(`byte`[] v1 @kind object) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L50b874.  if v1 == 0 then goto L50b890;
  #L50b878.  v0:= new `okio.ByteString`;
  #L50b87c.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L50b882.  v1:= temp @kind object;
  #L50b884.  v1:= (`byte`[]) v1 @kind object;
  #L50b888.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b88e.  return v0 @kind object;
  #L50b890.  v1:= new `java.lang.IllegalArgumentException`;
  #L50b894.  v0:= "data == null" @kind object;
  #L50b898.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b89e.  throw v1;
}
procedure `okio.ByteString` `of`(`byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lokio/ByteString;.of:([BII)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50b8b0.  if v7 == 0 then goto L50b8da;
  #L50b8b4.  v0:= length @variable v7;
  #L50b8b6.  v1:= (`long`) v0 @kind i2l;
  #L50b8b8.  v3:= (`long`) v8 @kind i2l;
  #L50b8ba.  v5:= (`long`) v9 @kind i2l;
  #L50b8bc.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L50b8c2.  v0:= new `byte`[v9];
  #L50b8c6.  v1:= 0I;
  #L50b8c8.  call `arraycopy`(v7, v8, v0, v1, v9) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L50b8ce.  v7:= new `okio.ByteString`;
  #L50b8d2.  call `<init>`(v7, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b8d8.  return v7 @kind object;
  #L50b8da.  v7:= new `java.lang.IllegalArgumentException`;
  #L50b8de.  v8:= "data == null" @kind object;
  #L50b8e2.  call `<init>`(v7, v8) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b8e8.  throw v7;
}
procedure `okio.ByteString` `read`(`java.io.InputStream` v4 @kind object, `int` v5 ) @signature `Lokio/ByteString;.read:(Ljava/io/InputStream;I)Lokio/ByteString;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50b940.  if v4 == 0 then goto L50b9ae;
  #L50b944.  if v5 < 0 then goto L50b980;
  #L50b948.  v0:= new `byte`[v5];
  #L50b94c.  v1:= 0I;
  #L50b94e.  if v1 >= v5 then goto L50b974;
  #L50b952.  v2:= v5 - v1 @kind int;
  #L50b956.  call temp:= `read`(v4, v0, v1, v2) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L50b95c.  v2:= temp;
  #L50b95e.  v3:= -1I;
  #L50b960.  if v2 == v3 then goto L50b968;
  #L50b964.  v1:= v1 + v2 @kind int;
  #L50b966.  goto L50b94e;
  #L50b968.  v4:= new `java.io.EOFException`;
  #L50b96c.  call `<init>`(v4) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L50b972.  throw v4;
  #L50b974.  v4:= new `okio.ByteString`;
  #L50b978.  call `<init>`(v4, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50b97e.  return v4 @kind object;
  #L50b980.  v4:= new `java.lang.IllegalArgumentException`;
  #L50b984.  v0:= new `java.lang.StringBuilder`;
  #L50b988.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b98e.  v1:= "byteCount < 0: " @kind object;
  #L50b992.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b998.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b99e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50b9a4.  v5:= temp @kind object;
  #L50b9a6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b9ac.  throw v4;
  #L50b9ae.  v4:= new `java.lang.IllegalArgumentException`;
  #L50b9b2.  v5:= "in == null" @kind object;
  #L50b9b6.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b9bc.  goto L50b9c0;
  #L50b9be.  throw v4;
  #L50b9c0.  goto L50b9be;
}
procedure `void` `readObject`(`okio.ByteString` v2 @kind this, `java.io.ObjectInputStream` v3 @kind object) @signature `Lokio/ByteString;.readObject:(Ljava/io/ObjectInputStream;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L50bc80.  call temp:= `readInt`(v3) @signature `Ljava/io/ObjectInputStream;.readInt:()I` @kind virtual;
  #L50bc86.  v0:= temp;
  #L50bc88.  call temp:= `read`(v3, v0) @signature `Lokio/ByteString;.read:(Ljava/io/InputStream;I)Lokio/ByteString;` @kind static;
  #L50bc8e.  v3:= temp @kind object;
  #L50bc90.  v0:= constclass @type ^`okio.ByteString` @kind object;
  #L50bc94.  v1:= "b" @kind object;
  #L50bc98.  call temp:= `getDeclaredField`(v0, v1) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L50bc9e.  v0:= temp @kind object;
  #L50bca0.  v1:= 1I;
  #L50bca2.  call `setAccessible`(v0, v1) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L50bca8.  v3:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bcac.  call `set`(v0, v2, v3) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L50bcb2.  return @kind void;
  #L50bcb4.  v3:= new `java.lang.AssertionError`;
  #L50bcb8.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50bcbe.  throw v3;
  #L50bcc0.  v3:= new `java.lang.AssertionError`;
  #L50bcc4.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50bcca.  throw v3;
  catch `java.lang.NoSuchFieldException` @[L50bc90..L50bcb2] goto L50bcc0;
  catch `java.lang.IllegalAccessException` @[L50bc90..L50bcb2] goto L50bcb4;
}
procedure `void` `writeObject`(`okio.ByteString` v1 @kind this, `java.io.ObjectOutputStream` v2 @kind object) @signature `Lokio/ByteString;.writeObject:(Ljava/io/ObjectOutputStream;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L50bd3c.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bd40.  v0:= length @variable v0;
  #L50bd42.  call `writeInt`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.writeInt:(I)V` @kind virtual;
  #L50bd48.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bd4c.  call `write`(v2, v0) @signature `Ljava/io/ObjectOutputStream;.write:([B)V` @kind virtual;
  #L50bd52.  return @kind void;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b580.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b584.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L50b58a.  v0:= temp @kind object;
  #L50b58c.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L50b592.  v0:= temp @kind object;
  #L50b594.  return v0 @kind object;
}
procedure `byte`[] `b`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.b:()[B` @AccessFlag  {
    temp;
    v0;

  #L50af98.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50af9c.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b304.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b308.  call temp:= `encode`(v0) @signature `Lokio/Base64;.encode:([B)Ljava/lang/String;` @kind static;
  #L50b30e.  v0:= temp @kind object;
  #L50b310.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b324.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b328.  call temp:= `encodeUrl`(v0) @signature `Lokio/Base64;.encodeUrl:([B)Ljava/lang/String;` @kind static;
  #L50b32e.  v0:= temp @kind object;
  #L50b330.  return v0 @kind object;
}
procedure `void` `c`(`okio.ByteString` v3 @kind this, `okio.Buffer` v4 @kind object) @signature `Lokio/ByteString;.c:(Lokio/Buffer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L50bd1c.  v0:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bd20.  v1:= length @variable v0;
  #L50bd22.  v2:= 0I;
  #L50bd24.  call temp:= `write`(v4, v0, v2, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L50bd2a.  return @kind void;
}
procedure `int` `compareTo`(`okio.ByteString` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokio/ByteString;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L50b048.  v1:= (`okio.ByteString`) v1 @kind object;
  #L50b04c.  call temp:= `compareTo`(v0, v1) @signature `Lokio/ByteString;.compareTo:(Lokio/ByteString;)I` @kind virtual;
  #L50b052.  v1:= temp;
  #L50b054.  return v1;
}
procedure `int` `compareTo`(`okio.ByteString` v9 @kind this, `okio.ByteString` v10 @kind object) @signature `Lokio/ByteString;.compareTo:(Lokio/ByteString;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50b068.  call temp:= `size`(v9) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50b06e.  v0:= temp;
  #L50b070.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50b076.  v1:= temp;
  #L50b078.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50b07e.  v2:= temp;
  #L50b080.  v3:= 0I;
  #L50b082.  v4:= 0I;
  #L50b084.  v5:= -1I;
  #L50b086.  v6:= 1I;
  #L50b088.  if v4 >= v2 then goto L50b0b8;
  #L50b08c.  call temp:= `getByte`(v9, v4) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L50b092.  v7:= temp;
  #L50b094.  v7:= v7 ^& 255;
  #L50b098.  call temp:= `getByte`(v10, v4) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L50b09e.  v8:= temp;
  #L50b0a0.  v8:= v8 ^& 255;
  #L50b0a4.  if v7 != v8 then goto L50b0ae;
  #L50b0a8.  v4:= v4 + 1;
  #L50b0ac.  goto L50b084;
  #L50b0ae.  if v7 >= v8 then goto L50b0b4;
  #L50b0b2.  goto L50b0b6;
  #L50b0b4.  v5:= 1I;
  #L50b0b6.  return v5;
  #L50b0b8.  if v0 != v1 then goto L50b0be;
  #L50b0bc.  return v3;
  #L50b0be.  if v0 >= v1 then goto L50b0c4;
  #L50b0c2.  goto L50b0c6;
  #L50b0c4.  v5:= 1I;
  #L50b0c6.  return v5;
}
procedure `boolean` `endsWith`(`okio.ByteString` v3 @kind this, `okio.ByteString` v4 @kind object) @signature `Lokio/ByteString;.endsWith:(Lokio/ByteString;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50ae54.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50ae5a.  v0:= temp;
  #L50ae5c.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50ae62.  v1:= temp;
  #L50ae64.  v0:= v0 - v1 @kind int;
  #L50ae66.  call temp:= `size`(v4) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50ae6c.  v1:= temp;
  #L50ae6e.  v2:= 0I;
  #L50ae70.  call temp:= `rangeEquals`(v3, v0, v4, v2, v1) @signature `Lokio/ByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L50ae76.  v4:= temp;
  #L50ae78.  return v4;
}
procedure `boolean` `endsWith`(`okio.ByteString` v3 @kind this, `byte`[] v4 @kind object) @signature `Lokio/ByteString;.endsWith:([B)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L50ae28.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50ae2e.  v0:= temp;
  #L50ae30.  v1:= length @variable v4;
  #L50ae32.  v0:= v0 - v1 @kind int;
  #L50ae34.  v1:= length @variable v4;
  #L50ae36.  v2:= 0I;
  #L50ae38.  call temp:= `rangeEquals`(v3, v0, v4, v2, v1) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L50ae3e.  v4:= temp;
  #L50ae40.  return v4;
}
procedure `boolean` `equals`(`okio.ByteString` v5 @kind this, `java.lang.Object` v6 @kind object) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L50ae8c.  v0:= 1I;
  #L50ae8e.  if v6 != v5 then goto L50ae94;
  #L50ae92.  return v0;
  #L50ae94.  v1:= instanceof @variable v6 @type ^`okio.ByteString` @kind boolean;
  #L50ae98.  v2:= 0I;
  #L50ae9a.  if v1 == 0 then goto L50aec4;
  #L50ae9e.  v6:= (`okio.ByteString`) v6 @kind object;
  #L50aea2.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50aea8.  v1:= temp;
  #L50aeaa.  v3:= v5.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50aeae.  v4:= length @variable v3;
  #L50aeb0.  if v1 != v4 then goto L50aec4;
  #L50aeb4.  v1:= length @variable v3;
  #L50aeb6.  call temp:= `rangeEquals`(v6, v2, v3, v2, v1) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L50aebc.  v6:= temp;
  #L50aebe.  if v6 == 0 then goto L50aec4;
  #L50aec2.  goto L50aec6;
  #L50aec4.  v0:= 0I;
  #L50aec6.  return v0;
}
procedure `byte` `getByte`(`okio.ByteString` v1 @kind this, `int` v2 ) @signature `Lokio/ByteString;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50af7c.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50af80.  v2:= v0[v2] @kind byte;
  #L50af84.  return v2;
}
procedure `int` `hashCode`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b158.  v0:= v1.`okio.ByteString.c` @type ^`int`;
  #L50b15c.  if v0 == 0 then goto L50b162;
  #L50b160.  goto L50b172;
  #L50b162.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b166.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L50b16c.  v0:= temp;
  #L50b16e.  v1.`okio.ByteString.c` @type ^`int` := v0;
  #L50b172.  return v0;
}
procedure `java.lang.String` `hex`(`okio.ByteString` v9 @kind this) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L50b344.  v0:= v9.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b348.  v1:= length @variable v0;
  #L50b34a.  v1:= v1 * 2;
  #L50b34e.  v1:= new `char`[v1];
  #L50b352.  v2:= length @variable v0;
  #L50b354.  v3:= 0I;
  #L50b356.  v4:= 0I;
  #L50b358.  if v3 >= v2 then goto L50b38e;
  #L50b35c.  v5:= v0[v3] @kind byte;
  #L50b360.  v6:= v4 + 1;
  #L50b364.  v7:= `@@okio.ByteString.a` @type ^`char`[] @kind object;
  #L50b368.  v8:= v5 ^> 4;
  #L50b36c.  v8:= v8 ^& 15;
  #L50b370.  v8:= v7[v8] @kind char;
  #L50b374.  v1[v4]:= v8 @kind char;
  #L50b378.  v4:= v6 + 1;
  #L50b37c.  v5:= v5 ^& 15;
  #L50b380.  v5:= v7[v5] @kind char;
  #L50b384.  v1[v6]:= v5 @kind char;
  #L50b388.  v3:= v3 + 1;
  #L50b38c.  goto L50b358;
  #L50b38e.  v0:= new `java.lang.String`;
  #L50b392.  call `<init>`(v0, v1) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L50b398.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha1`(`okio.ByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/ByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b7f4.  v0:= "HmacSHA1" @kind object;
  #L50b7f8.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/ByteString;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50b7fe.  v2:= temp @kind object;
  #L50b800.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.ByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/ByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b814.  v0:= "HmacSHA256" @kind object;
  #L50b818.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/ByteString;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50b81e.  v2:= temp @kind object;
  #L50b820.  return v2 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.ByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/ByteString;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b834.  v0:= "HmacSHA512" @kind object;
  #L50b838.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/ByteString;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L50b83e.  v2:= temp @kind object;
  #L50b840.  return v2 @kind object;
}
procedure `int` `indexOf`(`okio.ByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/ByteString;.indexOf:(Lokio/ByteString;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50b1e8.  call temp:= `b`(v2) @signature `Lokio/ByteString;.b:()[B` @kind virtual;
  #L50b1ee.  v2:= temp @kind object;
  #L50b1f0.  v0:= 0I;
  #L50b1f2.  call temp:= `indexOf`(v1, v2, v0) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L50b1f8.  v2:= temp;
  #L50b1fa.  return v2;
}
procedure `int` `indexOf`(`okio.ByteString` v0 @kind this, `okio.ByteString` v1 @kind object, `int` v2 ) @signature `Lokio/ByteString;.indexOf:(Lokio/ByteString;I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L50b20c.  call temp:= `b`(v1) @signature `Lokio/ByteString;.b:()[B` @kind virtual;
  #L50b212.  v1:= temp @kind object;
  #L50b214.  call temp:= `indexOf`(v0, v1, v2) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L50b21a.  v1:= temp;
  #L50b21c.  return v1;
}
procedure `int` `indexOf`(`okio.ByteString` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/ByteString;.indexOf:([B)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50b184.  v0:= 0I;
  #L50b186.  call temp:= `indexOf`(v1, v2, v0) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L50b18c.  v2:= temp;
  #L50b18e.  return v2;
}
procedure `int` `indexOf`(`okio.ByteString` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lokio/ByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L50b1a0.  v0:= 0I;
  #L50b1a2.  call temp:= `max`(v6, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L50b1a8.  v6:= temp;
  #L50b1aa.  v1:= v4.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b1ae.  v1:= length @variable v1;
  #L50b1b0.  v2:= length @variable v5;
  #L50b1b2.  v1:= v1 - v2 @kind int;
  #L50b1b4.  if v6 > v1 then goto L50b1d2;
  #L50b1b8.  v2:= v4.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b1bc.  v3:= length @variable v5;
  #L50b1be.  call temp:= `arrayRangeEquals`(v2, v6, v5, v0, v3) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L50b1c4.  v2:= temp;
  #L50b1c6.  if v2 == 0 then goto L50b1cc;
  #L50b1ca.  return v6;
  #L50b1cc.  v6:= v6 + 1;
  #L50b1d0.  goto L50b1b4;
  #L50b1d2.  v5:= -1I;
  #L50b1d4.  return v5;
}
procedure `int` `lastIndexOf`(`okio.ByteString` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/ByteString;.lastIndexOf:(Lokio/ByteString;)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50b29c.  call temp:= `b`(v2) @signature `Lokio/ByteString;.b:()[B` @kind virtual;
  #L50b2a2.  v2:= temp @kind object;
  #L50b2a4.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50b2aa.  v0:= temp;
  #L50b2ac.  call temp:= `lastIndexOf`(v1, v2, v0) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L50b2b2.  v2:= temp;
  #L50b2b4.  return v2;
}
procedure `int` `lastIndexOf`(`okio.ByteString` v0 @kind this, `okio.ByteString` v1 @kind object, `int` v2 ) @signature `Lokio/ByteString;.lastIndexOf:(Lokio/ByteString;I)I` @AccessFlag PUBLIC_FINAL {
    temp;

  #L50b2c8.  call temp:= `b`(v1) @signature `Lokio/ByteString;.b:()[B` @kind virtual;
  #L50b2ce.  v1:= temp @kind object;
  #L50b2d0.  call temp:= `lastIndexOf`(v0, v1, v2) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L50b2d6.  v1:= temp;
  #L50b2d8.  return v1;
}
procedure `int` `lastIndexOf`(`okio.ByteString` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/ByteString;.lastIndexOf:([B)I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L50b230.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50b236.  v0:= temp;
  #L50b238.  call temp:= `lastIndexOf`(v1, v2, v0) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L50b23e.  v2:= temp;
  #L50b240.  return v2;
}
procedure `int` `lastIndexOf`(`okio.ByteString` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50b254.  v0:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b258.  v0:= length @variable v0;
  #L50b25a.  v1:= length @variable v4;
  #L50b25c.  v0:= v0 - v1 @kind int;
  #L50b25e.  call temp:= `min`(v5, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L50b264.  v5:= temp;
  #L50b266.  if v5 < 0 then goto L50b286;
  #L50b26a.  v0:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b26e.  v1:= 0I;
  #L50b270.  v2:= length @variable v4;
  #L50b272.  call temp:= `arrayRangeEquals`(v0, v5, v4, v1, v2) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L50b278.  v0:= temp;
  #L50b27a.  if v0 == 0 then goto L50b280;
  #L50b27e.  return v5;
  #L50b280.  v5:= v5 + -1;
  #L50b284.  goto L50b266;
  #L50b286.  v4:= -1I;
  #L50b288.  return v4;
}
procedure `okio.ByteString` `md5`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b854.  v0:= "MD5" @kind object;
  #L50b858.  call temp:= `digest`(v1, v0) @signature `Lokio/ByteString;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50b85e.  v0:= temp @kind object;
  #L50b860.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.ByteString` v1 @kind this, `int` v2 , `okio.ByteString` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lokio/ByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50af18.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50af1c.  call temp:= `rangeEquals`(v3, v4, v0, v2, v5) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L50af22.  v2:= temp;
  #L50af24.  return v2;
}
procedure `boolean` `rangeEquals`(`okio.ByteString` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50aed8.  if v3 < 0 then goto L50af04;
  #L50aedc.  v0:= v2.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50aee0.  v1:= length @variable v0;
  #L50aee2.  v1:= v1 - v6 @kind int;
  #L50aee4.  if v3 > v1 then goto L50af04;
  #L50aee8.  if v5 < 0 then goto L50af04;
  #L50aeec.  v1:= length @variable v4;
  #L50aeee.  v1:= v1 - v6 @kind int;
  #L50aef0.  if v5 > v1 then goto L50af04;
  #L50aef4.  call temp:= `arrayRangeEquals`(v0, v3, v4, v5, v6) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L50aefa.  v3:= temp;
  #L50aefc.  if v3 == 0 then goto L50af04;
  #L50af00.  v3:= 1I;
  #L50af02.  goto L50af06;
  #L50af04.  v3:= 0I;
  #L50af06.  return v3;
}
procedure `okio.ByteString` `sha1`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b9d4.  v0:= "SHA-1" @kind object;
  #L50b9d8.  call temp:= `digest`(v1, v0) @signature `Lokio/ByteString;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50b9de.  v0:= temp @kind object;
  #L50b9e0.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b9f4.  v0:= "SHA-256" @kind object;
  #L50b9f8.  call temp:= `digest`(v1, v0) @signature `Lokio/ByteString;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50b9fe.  v0:= temp @kind object;
  #L50ba00.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ba14.  v0:= "SHA-512" @kind object;
  #L50ba18.  call temp:= `digest`(v1, v0) @signature `Lokio/ByteString;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L50ba1e.  v0:= temp @kind object;
  #L50ba20.  return v0 @kind object;
}
procedure `int` `size`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50b2ec.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b2f0.  v0:= length @variable v0;
  #L50b2f2.  return v0;
}
procedure `boolean` `startsWith`(`okio.ByteString` v2 @kind this, `okio.ByteString` v3 @kind object) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50af58.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50af5e.  v0:= temp;
  #L50af60.  v1:= 0I;
  #L50af62.  call temp:= `rangeEquals`(v2, v1, v3, v1, v0) @signature `Lokio/ByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L50af68.  v3:= temp;
  #L50af6a.  return v3;
}
procedure `boolean` `startsWith`(`okio.ByteString` v2 @kind this, `byte`[] v3 @kind object) @signature `Lokio/ByteString;.startsWith:([B)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L50af38.  v0:= length @variable v3;
  #L50af3a.  v1:= 0I;
  #L50af3c.  call temp:= `rangeEquals`(v2, v1, v3, v1, v0) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L50af42.  v3:= temp;
  #L50af44.  return v3;
}
procedure `java.lang.String` `string`(`okio.ByteString` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L50b3ac.  if v3 == 0 then goto L50b3c0;
  #L50b3b0.  v0:= new `java.lang.String`;
  #L50b3b4.  v1:= v2.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b3b8.  call `<init>`(v0, v1, v3) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L50b3be.  return v0 @kind object;
  #L50b3c0.  v3:= new `java.lang.IllegalArgumentException`;
  #L50b3c4.  v0:= "charset == null" @kind object;
  #L50b3c8.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50b3ce.  throw v3;
}
procedure `okio.ByteString` `substring`(`okio.ByteString` v1 @kind this, `int` v2 ) @signature `Lokio/ByteString;.substring:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50ba34.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50ba38.  v0:= length @variable v0;
  #L50ba3a.  call temp:= `substring`(v1, v2, v0) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @kind virtual;
  #L50ba40.  v2:= temp @kind object;
  #L50ba42.  return v2 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.ByteString` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50ba54.  if v4 < 0 then goto L50badc;
  #L50ba58.  v0:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50ba5c.  v1:= length @variable v0;
  #L50ba5e.  if v5 > v1 then goto L50ba9e;
  #L50ba62.  v1:= v5 - v4 @kind int;
  #L50ba66.  if v1 < 0 then goto L50ba8e;
  #L50ba6a.  if v4 != 0 then goto L50ba76;
  #L50ba6e.  v2:= length @variable v0;
  #L50ba70.  if v5 != v2 then goto L50ba76;
  #L50ba74.  return v3 @kind object;
  #L50ba76.  v5:= new `byte`[v1];
  #L50ba7a.  v2:= 0I;
  #L50ba7c.  call `arraycopy`(v0, v4, v5, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L50ba82.  v4:= new `okio.ByteString`;
  #L50ba86.  call `<init>`(v4, v5) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50ba8c.  return v4 @kind object;
  #L50ba8e.  v4:= new `java.lang.IllegalArgumentException`;
  #L50ba92.  v5:= "endIndex < beginIndex" @kind object;
  #L50ba96.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50ba9c.  throw v4;
  #L50ba9e.  v4:= new `java.lang.IllegalArgumentException`;
  #L50baa2.  v5:= new `java.lang.StringBuilder`;
  #L50baa6.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50baac.  v0:= "endIndex > length(" @kind object;
  #L50bab0.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50bab6.  v0:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50baba.  v0:= length @variable v0;
  #L50babc.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50bac2.  v0:= ")" @kind object;
  #L50bac6.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50bacc.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50bad2.  v5:= temp @kind object;
  #L50bad4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50bada.  throw v4;
  #L50badc.  v4:= new `java.lang.IllegalArgumentException`;
  #L50bae0.  v5:= "beginIndex < 0" @kind object;
  #L50bae4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50baea.  throw v4;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.ByteString` v6 @kind this) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50bafc.  v0:= 0I;
  #L50bafe.  v1:= v6.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bb02.  v2:= length @variable v1;
  #L50bb04.  if v0 >= v2 then goto L50bb6e;
  #L50bb08.  v2:= v1[v0] @kind byte;
  #L50bb0c.  v3:= 65I;
  #L50bb10.  if v2 < v3 then goto L50bb68;
  #L50bb14.  v4:= 90I;
  #L50bb18.  if v2 <= v4 then goto L50bb1e;
  #L50bb1c.  goto L50bb68;
  #L50bb1e.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L50bb24.  v1:= temp @kind object;
  #L50bb26.  v1:= (`byte`[]) v1 @kind object;
  #L50bb2a.  v5:= v0 + 1;
  #L50bb2e.  v2:= v2 + 32;
  #L50bb32.  v2:= (`byte`) v2 @kind i2b;
  #L50bb34.  v1[v0]:= v2 @kind byte;
  #L50bb38.  v0:= length @variable v1;
  #L50bb3a.  if v5 >= v0 then goto L50bb5c;
  #L50bb3e.  v0:= v1[v5] @kind byte;
  #L50bb42.  if v0 < v3 then goto L50bb56;
  #L50bb46.  if v0 <= v4 then goto L50bb4c;
  #L50bb4a.  goto L50bb56;
  #L50bb4c.  v0:= v0 + 32;
  #L50bb50.  v0:= (`byte`) v0 @kind i2b;
  #L50bb52.  v1[v5]:= v0 @kind byte;
  #L50bb56.  v5:= v5 + 1;
  #L50bb5a.  goto L50bb38;
  #L50bb5c.  v0:= new `okio.ByteString`;
  #L50bb60.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50bb66.  return v0 @kind object;
  #L50bb68.  v0:= v0 + 1;
  #L50bb6c.  goto L50bafe;
  #L50bb6e.  return v6 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.ByteString` v6 @kind this) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L50bb80.  v0:= 0I;
  #L50bb82.  v1:= v6.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bb86.  v2:= length @variable v1;
  #L50bb88.  if v0 >= v2 then goto L50bbf2;
  #L50bb8c.  v2:= v1[v0] @kind byte;
  #L50bb90.  v3:= 97I;
  #L50bb94.  if v2 < v3 then goto L50bbec;
  #L50bb98.  v4:= 122I;
  #L50bb9c.  if v2 <= v4 then goto L50bba2;
  #L50bba0.  goto L50bbec;
  #L50bba2.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L50bba8.  v1:= temp @kind object;
  #L50bbaa.  v1:= (`byte`[]) v1 @kind object;
  #L50bbae.  v5:= v0 + 1;
  #L50bbb2.  v2:= v2 + -32;
  #L50bbb6.  v2:= (`byte`) v2 @kind i2b;
  #L50bbb8.  v1[v0]:= v2 @kind byte;
  #L50bbbc.  v0:= length @variable v1;
  #L50bbbe.  if v5 >= v0 then goto L50bbe0;
  #L50bbc2.  v0:= v1[v5] @kind byte;
  #L50bbc6.  if v0 < v3 then goto L50bbda;
  #L50bbca.  if v0 <= v4 then goto L50bbd0;
  #L50bbce.  goto L50bbda;
  #L50bbd0.  v0:= v0 + -32;
  #L50bbd4.  v0:= (`byte`) v0 @kind i2b;
  #L50bbd6.  v1[v5]:= v0 @kind byte;
  #L50bbda.  v5:= v5 + 1;
  #L50bbde.  goto L50bbbc;
  #L50bbe0.  v0:= new `okio.ByteString`;
  #L50bbe4.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L50bbea.  return v0 @kind object;
  #L50bbec.  v0:= v0 + 1;
  #L50bbf0.  goto L50bb82;
  #L50bbf2.  return v6 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.ByteString` v1 @kind this) @signature `Lokio/ByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50afb0.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50afb4.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L50afba.  v0:= temp @kind object;
  #L50afbc.  v0:= (`byte`[]) v0 @kind object;
  #L50afc0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.ByteString` v8 @kind this) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L50b3e0.  v0:= v8.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b3e4.  v0:= length @variable v0;
  #L50b3e6.  if v0 != 0 then goto L50b3f0;
  #L50b3ea.  v0:= "[size=0]" @kind object;
  #L50b3ee.  return v0 @kind object;
  #L50b3f0.  call temp:= `utf8`(v8) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L50b3f6.  v0:= temp @kind object;
  #L50b3f8.  v1:= 64I;
  #L50b3fc.  call temp:= `a`(v0, v1) @signature `Lokio/ByteString;.a:(Ljava/lang/String;I)I` @kind static;
  #L50b402.  v2:= temp;
  #L50b404.  v3:= -1I;
  #L50b406.  v4:= "…]" @kind object;
  #L50b40a.  v5:= "[size=" @kind object;
  #L50b40e.  v6:= "]" @kind object;
  #L50b412.  v7:= 0I;
  #L50b414.  if v2 != v3 then goto L50b498;
  #L50b418.  v0:= v8.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b41c.  v0:= length @variable v0;
  #L50b41e.  if v0 > v1 then goto L50b44c;
  #L50b422.  v0:= new `java.lang.StringBuilder`;
  #L50b426.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b42c.  v1:= "[hex=" @kind object;
  #L50b430.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b436.  call temp:= `hex`(v8) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L50b43c.  v1:= temp @kind object;
  #L50b43e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b444.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b44a.  goto L50b48e;
  #L50b44c.  v0:= new `java.lang.StringBuilder`;
  #L50b450.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b456.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b45c.  v2:= v8.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b460.  v2:= length @variable v2;
  #L50b462.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b468.  v2:= " hex=" @kind object;
  #L50b46c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b472.  call temp:= `substring`(v8, v7, v1) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @kind virtual;
  #L50b478.  v1:= temp @kind object;
  #L50b47a.  call temp:= `hex`(v1) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L50b480.  v1:= temp @kind object;
  #L50b482.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b488.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b48e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50b494.  v0:= temp @kind object;
  #L50b496.  return v0 @kind object;
  #L50b498.  call temp:= `substring`(v0, v7, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L50b49e.  v1:= temp @kind object;
  #L50b4a0.  v3:= "\\" @kind object;
  #L50b4a4.  v7:= "\\\\" @kind object;
  #L50b4a8.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L50b4ae.  v1:= temp @kind object;
  #L50b4b0.  v3:= "\n" @kind object;
  #L50b4b4.  v7:= "\\n" @kind object;
  #L50b4b8.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L50b4be.  v1:= temp @kind object;
  #L50b4c0.  v3:= "\r" @kind object;
  #L50b4c4.  v7:= "\\r" @kind object;
  #L50b4c8.  call temp:= `replace`(v1, v3, v7) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L50b4ce.  v1:= temp @kind object;
  #L50b4d0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L50b4d6.  v0:= temp;
  #L50b4d8.  if v2 >= v0 then goto L50b510;
  #L50b4dc.  v0:= new `java.lang.StringBuilder`;
  #L50b4e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b4e6.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b4ec.  v2:= v8.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b4f0.  v2:= length @variable v2;
  #L50b4f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b4f8.  v2:= " text=" @kind object;
  #L50b4fc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b502.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b508.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b50e.  goto L50b530;
  #L50b510.  v0:= new `java.lang.StringBuilder`;
  #L50b514.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L50b51a.  v2:= "[text=" @kind object;
  #L50b51e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b524.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b52a.  call temp:= `append`(v0, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50b530.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50b536.  v0:= temp @kind object;
  #L50b538.  return v0 @kind object;
}
procedure `java.lang.String` `utf8`(`okio.ByteString` v3 @kind this) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L50b54c.  v0:= v3.`okio.ByteString.d` @type ^`java.lang.String` @kind object;
  #L50b550.  if v0 == 0 then goto L50b556;
  #L50b554.  goto L50b56c;
  #L50b556.  v0:= new `java.lang.String`;
  #L50b55a.  v1:= v3.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50b55e.  v2:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L50b562.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L50b568.  v3.`okio.ByteString.d` @type ^`java.lang.String` := v0 @kind object;
  #L50b56c.  return v0 @kind object;
}
procedure `void` `write`(`okio.ByteString` v1 @kind this, `java.io.OutputStream` v2 @kind object) @signature `Lokio/ByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L50bcec.  if v2 == 0 then goto L50bcfc;
  #L50bcf0.  v0:= v1.`okio.ByteString.b` @type ^`byte`[] @kind object;
  #L50bcf4.  call `write`(v2, v0) @signature `Ljava/io/OutputStream;.write:([B)V` @kind virtual;
  #L50bcfa.  return @kind void;
  #L50bcfc.  v2:= new `java.lang.IllegalArgumentException`;
  #L50bd00.  v0:= "out == null" @kind object;
  #L50bd04.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50bd0a.  throw v2;
}
