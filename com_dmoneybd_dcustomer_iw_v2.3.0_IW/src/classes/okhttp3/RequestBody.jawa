record `okhttp3.RequestBody` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`okhttp3.RequestBody` v0 @kind this) @signature `Lokhttp3/RequestBody;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L500a5c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L500a62.  return @kind void;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v1 @kind object, `java.io.File` v2 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5009ac.  if v2 == 0 then goto L5009bc;
  #L5009b0.  v0:= new `okhttp3.RequestBody$3`;
  #L5009b4.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RequestBody$3;.<init>:(Lokhttp3/MediaType;Ljava/io/File;)V` @kind direct;
  #L5009ba.  return v0 @kind object;
  #L5009bc.  v1:= new `java.lang.NullPointerException`;
  #L5009c0.  v2:= "file == null" @kind object;
  #L5009c4.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L5009ca.  throw v1;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5009dc.  v0:= `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L5009e0.  if v2 == 0 then goto L500a1e;
  #L5009e4.  call temp:= `charset`(v2) @signature `Lokhttp3/MediaType;.charset:()Ljava/nio/charset/Charset;` @kind virtual;
  #L5009ea.  v1:= temp @kind object;
  #L5009ec.  if v1 != 0 then goto L500a1c;
  #L5009f0.  v1:= new `java.lang.StringBuilder`;
  #L5009f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L5009fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500a00.  v2:= "; charset=utf-8" @kind object;
  #L500a04.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500a0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L500a10.  v2:= temp @kind object;
  #L500a12.  call temp:= `parse`(v2) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L500a18.  v2:= temp @kind object;
  #L500a1a.  goto L500a1e;
  #L500a1c.  v0:= v1 @kind object;
  #L500a1e.  call temp:= `getBytes`(v3, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L500a24.  v3:= temp @kind object;
  #L500a26.  call temp:= `create`(v2, v3) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L500a2c.  v2:= temp @kind object;
  #L500a2e.  return v2 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v1 @kind object, `okio.ByteString` v2 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L500a40.  v0:= new `okhttp3.RequestBody$1`;
  #L500a44.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RequestBody$1;.<init>:(Lokhttp3/MediaType;Lokio/ByteString;)V` @kind direct;
  #L500a4a.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object, `byte`[] v3 @kind object) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50094c.  v0:= length @variable v3;
  #L50094e.  v1:= 0I;
  #L500950.  call temp:= `create`(v2, v3, v1, v0) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @kind static;
  #L500956.  v2:= temp @kind object;
  #L500958.  return v2 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v7 @kind object, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L50096c.  if v8 == 0 then goto L50098a;
  #L500970.  v0:= length @variable v8;
  #L500972.  v1:= (`long`) v0 @kind i2l;
  #L500974.  v3:= (`long`) v9 @kind i2l;
  #L500976.  v5:= (`long`) v10 @kind i2l;
  #L500978.  call `checkOffsetAndCount`(v1, v3, v5) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L50097e.  v0:= new `okhttp3.RequestBody$2`;
  #L500982.  call `<init>`(v0, v7, v10, v8, v9) @signature `Lokhttp3/RequestBody$2;.<init>:(Lokhttp3/MediaType;I[BI)V` @kind direct;
  #L500988.  return v0 @kind object;
  #L50098a.  v7:= new `java.lang.NullPointerException`;
  #L50098e.  v8:= "content == null" @kind object;
  #L500992.  call `<init>`(v7, v8) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500998.  throw v7;
}
procedure `long` `contentLength`(`okhttp3.RequestBody` v2 @kind this) @signature `Lokhttp3/RequestBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L500934.  v0:= -1L;
  #L500938.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`() @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `writeTo`(`okio.BufferedSink` v0 @kind object) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
