record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.Request` `okhttp3.Response$Builder.a` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.b` @AccessFlag ;
  `int` `okhttp3.Response$Builder.c` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.d` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.e` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.f` @AccessFlag ;
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.g` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.h` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.i` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.j` @AccessFlag ;
  `long` `okhttp3.Response$Builder.k` @AccessFlag ;
  `long` `okhttp3.Response$Builder.l` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L500ebc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L500ec2.  v0:= -1I;
  #L500ec4.  v1.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L500ec8.  v0:= new `okhttp3.Headers$Builder`;
  #L500ecc.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L500ed2.  v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L500ed6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L500ee8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L500eee.  v0:= -1I;
  #L500ef0.  v2.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L500ef4.  v0:= v3.`okhttp3.Response.a` @type ^`okhttp3.Request` @kind object;
  #L500ef8.  v2.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` := v0 @kind object;
  #L500efc.  v0:= v3.`okhttp3.Response.b` @type ^`okhttp3.Protocol` @kind object;
  #L500f00.  v2.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L500f04.  v0:= v3.`okhttp3.Response.c` @type ^`int`;
  #L500f08.  v2.`okhttp3.Response$Builder.c` @type ^`int` := v0;
  #L500f0c.  v0:= v3.`okhttp3.Response.d` @type ^`java.lang.String` @kind object;
  #L500f10.  v2.`okhttp3.Response$Builder.d` @type ^`java.lang.String` := v0 @kind object;
  #L500f14.  v0:= v3.`okhttp3.Response.e` @type ^`okhttp3.Handshake` @kind object;
  #L500f18.  v2.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L500f1c.  v0:= v3.`okhttp3.Response.f` @type ^`okhttp3.Headers` @kind object;
  #L500f20.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L500f26.  v0:= temp @kind object;
  #L500f28.  v2.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L500f2c.  v0:= v3.`okhttp3.Response.g` @type ^`okhttp3.ResponseBody` @kind object;
  #L500f30.  v2.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L500f34.  v0:= v3.`okhttp3.Response.h` @type ^`okhttp3.Response` @kind object;
  #L500f38.  v2.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` := v0 @kind object;
  #L500f3c.  v0:= v3.`okhttp3.Response.i` @type ^`okhttp3.Response` @kind object;
  #L500f40.  v2.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` := v0 @kind object;
  #L500f44.  v0:= v3.`okhttp3.Response.j` @type ^`okhttp3.Response` @kind object;
  #L500f48.  v2.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` := v0 @kind object;
  #L500f4c.  v0:= v3.`okhttp3.Response.k` @type ^`long` @kind wide;
  #L500f50.  v2.`okhttp3.Response$Builder.k` @type ^`long` := v0 @kind wide;
  #L500f54.  v0:= v3.`okhttp3.Response.l` @type ^`long` @kind wide;
  #L500f58.  v2.`okhttp3.Response$Builder.l` @type ^`long` := v0 @kind wide;
  #L500f5c.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L500f70.  v2:= v2.`okhttp3.Response.g` @type ^`okhttp3.ResponseBody` @kind object;
  #L500f74.  if v2 != 0 then goto L500f7a;
  #L500f78.  return @kind void;
  #L500f7a.  v2:= new `java.lang.IllegalArgumentException`;
  #L500f7e.  v0:= "priorResponse.body != null" @kind object;
  #L500f82.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500f88.  throw v2;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L500f9c.  v0:= v3.`okhttp3.Response.g` @type ^`okhttp3.ResponseBody` @kind object;
  #L500fa0.  if v0 != 0 then goto L501048;
  #L500fa4.  v0:= v3.`okhttp3.Response.h` @type ^`okhttp3.Response` @kind object;
  #L500fa8.  if v0 != 0 then goto L50101a;
  #L500fac.  v0:= v3.`okhttp3.Response.i` @type ^`okhttp3.Response` @kind object;
  #L500fb0.  if v0 != 0 then goto L500fec;
  #L500fb4.  v3:= v3.`okhttp3.Response.j` @type ^`okhttp3.Response` @kind object;
  #L500fb8.  if v3 != 0 then goto L500fbe;
  #L500fbc.  return @kind void;
  #L500fbe.  v3:= new `java.lang.IllegalArgumentException`;
  #L500fc2.  v0:= new `java.lang.StringBuilder`;
  #L500fc6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500fcc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500fd2.  v2:= ".priorResponse != null" @kind object;
  #L500fd6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500fdc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L500fe2.  v2:= temp @kind object;
  #L500fe4.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500fea.  throw v3;
  #L500fec.  v3:= new `java.lang.IllegalArgumentException`;
  #L500ff0.  v0:= new `java.lang.StringBuilder`;
  #L500ff4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500ffa.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501000.  v2:= ".cacheResponse != null" @kind object;
  #L501004.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50100a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L501010.  v2:= temp @kind object;
  #L501012.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501018.  throw v3;
  #L50101a.  v3:= new `java.lang.IllegalArgumentException`;
  #L50101e.  v0:= new `java.lang.StringBuilder`;
  #L501022.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L501028.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50102e.  v2:= ".networkResponse != null" @kind object;
  #L501032.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501038.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50103e.  v2:= temp @kind object;
  #L501040.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501046.  throw v3;
  #L501048.  v3:= new `java.lang.IllegalArgumentException`;
  #L50104c.  v0:= new `java.lang.StringBuilder`;
  #L501050.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L501056.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50105c.  v2:= ".body != null" @kind object;
  #L501060.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501066.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50106c.  v2:= temp @kind object;
  #L50106e.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501074.  throw v3;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500d20.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L500d24.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L500d2a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500d3c.  v0.`okhttp3.Response$Builder.g` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L500d40.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L500c80.  v0:= v3.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` @kind object;
  #L500c84.  if v0 == 0 then goto L500cfe;
  #L500c88.  v0:= v3.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` @kind object;
  #L500c8c.  if v0 == 0 then goto L500cee;
  #L500c90.  v0:= v3.`okhttp3.Response$Builder.c` @type ^`int`;
  #L500c94.  if v0 < 0 then goto L500cbc;
  #L500c98.  v0:= v3.`okhttp3.Response$Builder.d` @type ^`java.lang.String` @kind object;
  #L500c9c.  if v0 == 0 then goto L500cac;
  #L500ca0.  v0:= new `okhttp3.Response`;
  #L500ca4.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L500caa.  return v0 @kind object;
  #L500cac.  v0:= new `java.lang.IllegalStateException`;
  #L500cb0.  v1:= "message == null" @kind object;
  #L500cb4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500cba.  throw v0;
  #L500cbc.  v0:= new `java.lang.IllegalStateException`;
  #L500cc0.  v1:= new `java.lang.StringBuilder`;
  #L500cc4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L500cca.  v2:= "code < 0: " @kind object;
  #L500cce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L500cd4.  v2:= v3.`okhttp3.Response$Builder.c` @type ^`int`;
  #L500cd8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L500cde.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L500ce4.  v1:= temp @kind object;
  #L500ce6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500cec.  throw v0;
  #L500cee.  v0:= new `java.lang.IllegalStateException`;
  #L500cf2.  v1:= "protocol == null" @kind object;
  #L500cf6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500cfc.  throw v0;
  #L500cfe.  v0:= new `java.lang.IllegalStateException`;
  #L500d02.  v1:= "request == null" @kind object;
  #L500d06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L500d0c.  throw v0;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500d54.  if v2 == 0 then goto L500d62;
  #L500d58.  v0:= "cacheResponse" @kind object;
  #L500d5c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L500d62.  v1.`okhttp3.Response$Builder.i` @type ^`okhttp3.Response` := v2 @kind object;
  #L500d66.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 ) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500d78.  v0.`okhttp3.Response$Builder.c` @type ^`int` := v1;
  #L500d7c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500d90.  v0.`okhttp3.Response$Builder.e` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L500d94.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500da8.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L500dac.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L500db2.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Headers` v1 @kind object) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500dc4.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L500dca.  v1:= temp @kind object;
  #L500dcc.  v0.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` := v1 @kind object;
  #L500dd0.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500de4.  v0.`okhttp3.Response$Builder.d` @type ^`java.lang.String` := v1 @kind object;
  #L500de8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500dfc.  if v2 == 0 then goto L500e0a;
  #L500e00.  v0:= "networkResponse" @kind object;
  #L500e04.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L500e0a.  v1.`okhttp3.Response$Builder.h` @type ^`okhttp3.Response` := v2 @kind object;
  #L500e0e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500e20.  if v1 == 0 then goto L500e2a;
  #L500e24.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L500e2a.  v0.`okhttp3.Response$Builder.j` @type ^`okhttp3.Response` := v1 @kind object;
  #L500e2e.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500e40.  v0.`okhttp3.Response$Builder.b` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L500e44.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500e58.  v0.`okhttp3.Response$Builder.l` @type ^`long` := v1 @kind wide;
  #L500e5c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500e70.  v0:= v1.`okhttp3.Response$Builder.f` @type ^`okhttp3.Headers$Builder` @kind object;
  #L500e74.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L500e7a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500e8c.  v0.`okhttp3.Response$Builder.a` @type ^`okhttp3.Request` := v1 @kind object;
  #L500e90.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v0 @kind this, `long` v1 ) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L500ea4.  v0.`okhttp3.Response$Builder.k` @type ^`long` := v1 @kind wide;
  #L500ea8.  return v0 @kind object;
}
