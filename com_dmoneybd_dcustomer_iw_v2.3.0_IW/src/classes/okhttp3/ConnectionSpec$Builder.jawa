record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `okhttp3.ConnectionSpec$Builder.a` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.b` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.c` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.d` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L4f959c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f95a2.  v0:= v2.`okhttp3.ConnectionSpec.a` @type ^`boolean` @kind boolean;
  #L4f95a6.  v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v0 @kind boolean;
  #L4f95aa.  v0:= v2.`okhttp3.ConnectionSpec.c` @type ^`java.lang.String`[] @kind object;
  #L4f95ae.  v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L4f95b2.  v0:= v2.`okhttp3.ConnectionSpec.d` @type ^`java.lang.String`[] @kind object;
  #L4f95b6.  v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L4f95ba.  v2:= v2.`okhttp3.ConnectionSpec.b` @type ^`boolean` @kind boolean;
  #L4f95be.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L4f95c2.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 ) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L4f9580.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L4f9586.  v0.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` := v1 @kind boolean;
  #L4f958a.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f93a0.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f93a4.  if v0 == 0 then goto L4f93b0;
  #L4f93a8.  v0:= 0I;
  #L4f93aa.  v2.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L4f93ae.  return v2 @kind object;
  #L4f93b0.  v0:= new `java.lang.IllegalStateException`;
  #L4f93b4.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L4f93b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f93be.  throw v0;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4f93d0.  v0:= v2.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f93d4.  if v0 == 0 then goto L4f93e0;
  #L4f93d8.  v0:= 0I;
  #L4f93da.  v2.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L4f93de.  return v2 @kind object;
  #L4f93e0.  v0:= new `java.lang.IllegalStateException`;
  #L4f93e4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L4f93e8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f93ee.  throw v0;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9384.  v0:= new `okhttp3.ConnectionSpec`;
  #L4f9388.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L4f938e.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f9400.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f9404.  if v0 == 0 then goto L4f9430;
  #L4f9408.  v0:= length @variable v2;
  #L4f940a.  if v0 == 0 then goto L4f9420;
  #L4f940e.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4f9414.  v2:= temp @kind object;
  #L4f9416.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L4f941a.  v1.`okhttp3.ConnectionSpec$Builder.b` @type ^`java.lang.String`[] := v2 @kind object;
  #L4f941e.  return v1 @kind object;
  #L4f9420.  v2:= new `java.lang.IllegalArgumentException`;
  #L4f9424.  v0:= "At least one cipher suite is required" @kind object;
  #L4f9428.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f942e.  throw v2;
  #L4f9430.  v2:= new `java.lang.IllegalStateException`;
  #L4f9434.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L4f9438.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f943e.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.CipherSuite`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f9450.  v0:= v3.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f9454.  if v0 == 0 then goto L4f9482;
  #L4f9458.  v0:= length @variable v4;
  #L4f945a.  v0:= new `java.lang.String`[v0];
  #L4f945e.  v1:= 0I;
  #L4f9460.  v2:= length @variable v4;
  #L4f9462.  if v1 >= v2 then goto L4f9478;
  #L4f9466.  v2:= v4[v1] @kind object;
  #L4f946a.  v2:= v2.`okhttp3.CipherSuite.b` @type ^`java.lang.String` @kind object;
  #L4f946e.  v0[v1]:= v2 @kind object;
  #L4f9472.  v1:= v1 + 1;
  #L4f9476.  goto L4f9460;
  #L4f9478.  call temp:= `cipherSuites`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L4f947e.  v4:= temp @kind object;
  #L4f9480.  return v4 @kind object;
  #L4f9482.  v4:= new `java.lang.IllegalStateException`;
  #L4f9486.  v0:= "no cipher suites for cleartext connections" @kind object;
  #L4f948a.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9490.  goto L4f9494;
  #L4f9492.  throw v4;
  #L4f9494.  goto L4f9492;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `boolean` v2 ) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f94a8.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f94ac.  if v0 == 0 then goto L4f94b6;
  #L4f94b0.  v1.`okhttp3.ConnectionSpec$Builder.d` @type ^`boolean` := v2 @kind boolean;
  #L4f94b4.  return v1 @kind object;
  #L4f94b6.  v2:= new `java.lang.IllegalStateException`;
  #L4f94ba.  v0:= "no TLS extensions for cleartext connections" @kind object;
  #L4f94be.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f94c4.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `java.lang.String`[] v2 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4f94d8.  v0:= v1.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f94dc.  if v0 == 0 then goto L4f9508;
  #L4f94e0.  v0:= length @variable v2;
  #L4f94e2.  if v0 == 0 then goto L4f94f8;
  #L4f94e6.  call temp:= `clone`(v2) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L4f94ec.  v2:= temp @kind object;
  #L4f94ee.  v2:= (`java.lang.String`[]) v2 @kind object;
  #L4f94f2.  v1.`okhttp3.ConnectionSpec$Builder.c` @type ^`java.lang.String`[] := v2 @kind object;
  #L4f94f6.  return v1 @kind object;
  #L4f94f8.  v2:= new `java.lang.IllegalArgumentException`;
  #L4f94fc.  v0:= "At least one TLS version is required" @kind object;
  #L4f9500.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9506.  throw v2;
  #L4f9508.  v2:= new `java.lang.IllegalStateException`;
  #L4f950c.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L4f9510.  call `<init>`(v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9516.  throw v2;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v3 @kind this, `okhttp3.TlsVersion`[] v4 @kind object) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4f9528.  v0:= v3.`okhttp3.ConnectionSpec$Builder.a` @type ^`boolean` @kind boolean;
  #L4f952c.  if v0 == 0 then goto L4f955a;
  #L4f9530.  v0:= length @variable v4;
  #L4f9532.  v0:= new `java.lang.String`[v0];
  #L4f9536.  v1:= 0I;
  #L4f9538.  v2:= length @variable v4;
  #L4f953a.  if v1 >= v2 then goto L4f9550;
  #L4f953e.  v2:= v4[v1] @kind object;
  #L4f9542.  v2:= v2.`okhttp3.TlsVersion.a` @type ^`java.lang.String` @kind object;
  #L4f9546.  v0[v1]:= v2 @kind object;
  #L4f954a.  v1:= v1 + 1;
  #L4f954e.  goto L4f9538;
  #L4f9550.  call temp:= `tlsVersions`(v3, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L4f9556.  v4:= temp @kind object;
  #L4f9558.  return v4 @kind object;
  #L4f955a.  v4:= new `java.lang.IllegalStateException`;
  #L4f955e.  v0:= "no TLS versions for cleartext connections" @kind object;
  #L4f9562.  call `<init>`(v4, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4f9568.  goto L4f956c;
  #L4f956a.  throw v4;
  #L4f956c.  goto L4f956a;
}
