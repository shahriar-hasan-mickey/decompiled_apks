record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.a` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.b` @AccessFlag FINAL;
  `okio.AsyncTimeout` `okhttp3.RealCall.c` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.d` @AccessFlag FINAL;
  `boolean` `okhttp3.RealCall.e` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.RealCall` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object, `okhttp3.Request` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L500190.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L500196.  v2.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L50019a.  v2.`okhttp3.RealCall.d` @type ^`okhttp3.Request` := v4 @kind object;
  #L50019e.  v2.`okhttp3.RealCall.e` @type ^`boolean` := v5 @kind boolean;
  #L5001a2.  v4:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L5001a6.  call `<init>`(v4, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L5001ac.  v2.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v4 @kind object;
  #L5001b0.  v4:= new `okhttp3.RealCall$1`;
  #L5001b4.  call `<init>`(v4, v2) @signature `Lokhttp3/RealCall$1;.<init>:(Lokhttp3/RealCall;)V` @kind direct;
  #L5001ba.  v2.`okhttp3.RealCall.c` @type ^`okio.AsyncTimeout` := v4 @kind object;
  #L5001be.  call temp:= `callTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.callTimeoutMillis:()I` @kind virtual;
  #L5001c4.  v3:= temp;
  #L5001c6.  v0:= (`long`) v3 @kind i2l;
  #L5001c8.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L5001cc.  call temp:= `timeout`(v4, v0, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L5001d2.  return @kind void;
}
procedure `okhttp3.EventListener` `a`(`okhttp3.RealCall` v0 @kind object) @signature `Lokhttp3/RealCall;.a:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L4ffed8.  v0:= v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L4ffedc.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `c`(`okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Request` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/RealCall;.c:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;

  #L4fff18.  v0:= new `okhttp3.RealCall`;
  #L4fff1c.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L4fff22.  call temp:= `eventListenerFactory`(v1) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L4fff28.  v1:= temp @kind object;
  #L4fff2a.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L4fff30.  v1:= temp @kind object;
  #L4fff32.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L4fff36.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L500200.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L500206.  v0:= temp @kind object;
  #L500208.  v1:= "response.body().close()" @kind object;
  #L50020c.  call temp:= `getStackTraceForCloseable`(v0, v1) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L500212.  v0:= temp @kind object;
  #L500214.  v1:= v2.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L500218.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L50021e.  return @kind void;
}
procedure `okhttp3.Response` `b`(`okhttp3.RealCall` v13 @kind this) @signature `Lokhttp3/RealCall;.b:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L500058.  v1:= new `java.util.ArrayList`;
  #L50005c.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L500062.  v0:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L500066.  call temp:= `interceptors`(v0) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L50006c.  v0:= temp @kind object;
  #L50006e.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L500074.  v0:= v13.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L500078.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50007e.  v0:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L500082.  v2:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L500086.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L50008c.  v2:= temp @kind object;
  #L50008e.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L500094.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L50009a.  v0:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L50009e.  v2:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L5000a2.  call temp:= `a`(v2) @signature `Lokhttp3/OkHttpClient;.a:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L5000a8.  v2:= temp @kind object;
  #L5000aa.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L5000b0.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5000b6.  v0:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L5000ba.  v2:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L5000be.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L5000c4.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5000ca.  v0:= v13.`okhttp3.RealCall.e` @type ^`boolean` @kind boolean;
  #L5000ce.  if v0 != 0 then goto L5000e4;
  #L5000d2.  v0:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L5000d6.  call temp:= `networkInterceptors`(v0) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L5000dc.  v0:= temp @kind object;
  #L5000de.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L5000e4.  v0:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L5000e8.  v2:= v13.`okhttp3.RealCall.e` @type ^`boolean` @kind boolean;
  #L5000ec.  call `<init>`(v0, v2) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L5000f2.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5000f8.  v12:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L5000fc.  v2:= 0I;
  #L5000fe.  v3:= 0I;
  #L500100.  v4:= 0I;
  #L500102.  v5:= 0I;
  #L500104.  v6:= v13.`okhttp3.RealCall.d` @type ^`okhttp3.Request` @kind object;
  #L500108.  v8:= v13.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L50010c.  v0:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L500110.  call temp:= `connectTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L500116.  v9:= temp;
  #L500118.  v0:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L50011c.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L500122.  v10:= temp;
  #L500124.  v0:= v13.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L500128.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L50012e.  v11:= temp;
  #L500130.  v0:= v12 @kind object;
  #L500132.  v7:= v13 @kind object;
  #L500134.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L50013a.  v0:= v13.`okhttp3.RealCall.d` @type ^`okhttp3.Request` @kind object;
  #L50013e.  call temp:= `proceed`(v12, v0) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L500144.  v0:= temp @kind object;
  #L500146.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L5001e4.  v0:= v1.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L5001e8.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L5001ee.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4ffe08.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L4ffe0e.  v0:= temp @kind object;
  #L4ffe10.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L4ffebc.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L4ffec2.  v0:= temp @kind object;
  #L4ffec4.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L4ffef0.  v0:= v3.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4ffef4.  v1:= v3.`okhttp3.RealCall.d` @type ^`okhttp3.Request` @kind object;
  #L4ffef8.  v2:= v3.`okhttp3.RealCall.e` @type ^`boolean` @kind boolean;
  #L4ffefc.  call temp:= `c`(v0, v1, v2) @signature `Lokhttp3/RealCall;.c:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L4fff02.  v0:= temp @kind object;
  #L4fff04.  return v0 @kind object;
}
procedure `java.lang.String` `d`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.d:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L4ffe24.  v0:= v1.`okhttp3.RealCall.d` @type ^`okhttp3.Request` @kind object;
  #L4ffe28.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L4ffe2e.  v0:= temp @kind object;
  #L4ffe30.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L4ffe36.  v0:= temp @kind object;
  #L4ffe38.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `e`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.e:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L500158.  v0:= v1.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L50015c.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L500162.  v0:= temp @kind object;
  #L500164.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L500230.  @monitorenter v2
  #L500232.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L500236.  if v0 != 0 then goto L500270;
  #L50023a.  v0:= 1I;
  #L50023c.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L500240.  @monitorexit v2
  #L500242.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L500248.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L50024c.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L500252.  v0:= v2.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L500256.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L50025c.  v0:= temp @kind object;
  #L50025e.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L500262.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L500268.  call `a`(v0, v1) @signature `Lokhttp3/Dispatcher;.a:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L50026e.  return @kind void;
  #L500270.  v3:= new `java.lang.IllegalStateException`;
  #L500274.  v0:= "Already Executed" @kind object;
  #L500278.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50027e.  throw v3;
  #L500280.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L500282.  @monitorexit v2
  #L500284.  throw v3;
  catch `java.lang.Throwable` @[L500232..L500242] goto L500280;
  catch `java.lang.Throwable` @[L500270..L500284] goto L500280;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L4fff60.  @monitorenter v2
  #L4fff62.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L4fff66.  if v0 != 0 then goto L4ffffc;
  #L4fff6a.  v0:= 1I;
  #L4fff6c.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L4fff70.  @monitorexit v2
  #L4fff72.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L4fff78.  v0:= v2.`okhttp3.RealCall.c` @type ^`okio.AsyncTimeout` @kind object;
  #L4fff7c.  call `enter`(v0) @signature `Lokio/AsyncTimeout;.enter:()V` @kind virtual;
  #L4fff82.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L4fff86.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L4fff8c.  v0:= v2.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4fff90.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L4fff96.  v0:= temp @kind object;
  #L4fff98.  call `b`(v0, v2) @signature `Lokhttp3/Dispatcher;.b:(Lokhttp3/RealCall;)V` @kind virtual;
  #L4fff9e.  call temp:= `b`(v2) @signature `Lokhttp3/RealCall;.b:()Lokhttp3/Response;` @kind virtual;
  #L4fffa4.  v0:= temp @kind object;
  #L4fffa6.  if v0 == 0 then goto L4fffbe;
  #L4fffaa.  v1:= v2.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4fffae.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L4fffb4.  v1:= temp @kind object;
  #L4fffb6.  call `d`(v1, v2) @signature `Lokhttp3/Dispatcher;.d:(Lokhttp3/RealCall;)V` @kind virtual;
  #L4fffbc.  return v0 @kind object;
  #L4fffbe.  v0:= new `java.io.IOException`;
  #L4fffc2.  v1:= "Canceled" @kind object;
  #L4fffc6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4fffcc.  throw v0;
  #L4fffce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4fffd0.  goto L4fffe8;
  #L4fffd2.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L4fffd4.  call temp:= `f`(v2, v0) @signature `Lokhttp3/RealCall;.f:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L4fffda.  v0:= temp @kind object;
  #L4fffdc.  v1:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L4fffe0.  call `callFailed`(v1, v2, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L4fffe6.  throw v0;
  #L4fffe8.  v1:= v2.`okhttp3.RealCall.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L4fffec.  call temp:= `dispatcher`(v1) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L4ffff2.  v1:= temp @kind object;
  #L4ffff4.  call `d`(v1, v2) @signature `Lokhttp3/Dispatcher;.d:(Lokhttp3/RealCall;)V` @kind virtual;
  #L4ffffa.  throw v0;
  #L4ffffc.  v0:= new `java.lang.IllegalStateException`;
  #L500000.  v1:= "Already Executed" @kind object;
  #L500004.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L50000a.  throw v0;
  #L50000c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L50000e.  @monitorexit v2
  #L500010.  throw v0;
  catch `java.lang.Throwable` @[L4fff62..L4fff72] goto L50000c;
  catch `java.io.IOException` @[L4fff8c..L4fffa6] goto L4fffd2;
  catch `java.lang.Throwable` @[L4fff8c..L4fffa6] goto L4fffce;
  catch `java.io.IOException` @[L4fffbe..L4fffce] goto L4fffd2;
  catch `java.lang.Throwable` @[L4fffbe..L4fffce] goto L4fffce;
  catch `java.lang.Throwable` @[L4fffd4..L4fffe8] goto L4fffce;
  catch `java.lang.Throwable` @[L4ffffc..L500010] goto L50000c;
}
procedure `java.io.IOException` `f`(`okhttp3.RealCall` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lokhttp3/RealCall;.f:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ffdcc.  v0:= v2.`okhttp3.RealCall.c` @type ^`okio.AsyncTimeout` @kind object;
  #L4ffdd0.  call temp:= `exit`(v0) @signature `Lokio/AsyncTimeout;.exit:()Z` @kind virtual;
  #L4ffdd6.  v0:= temp;
  #L4ffdd8.  if v0 != 0 then goto L4ffdde;
  #L4ffddc.  return v3 @kind object;
  #L4ffdde.  v0:= new `java.io.InterruptedIOException`;
  #L4ffde2.  v1:= "timeout" @kind object;
  #L4ffde6.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L4ffdec.  if v3 == 0 then goto L4ffdf6;
  #L4ffdf0.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L4ffdf6.  return v0 @kind object;
}
procedure `java.lang.String` `g`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.g:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L4ffe4c.  v0:= new `java.lang.StringBuilder`;
  #L4ffe50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L4ffe56.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L4ffe5c.  v1:= temp;
  #L4ffe5e.  if v1 == 0 then goto L4ffe68;
  #L4ffe62.  v1:= "canceled " @kind object;
  #L4ffe66.  goto L4ffe6c;
  #L4ffe68.  v1:= "" @kind object;
  #L4ffe6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffe72.  v1:= v2.`okhttp3.RealCall.e` @type ^`boolean` @kind boolean;
  #L4ffe76.  if v1 == 0 then goto L4ffe80;
  #L4ffe7a.  v1:= "web socket" @kind object;
  #L4ffe7e.  goto L4ffe84;
  #L4ffe80.  v1:= "call" @kind object;
  #L4ffe84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffe8a.  v1:= " to " @kind object;
  #L4ffe8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffe94.  call temp:= `d`(v2) @signature `Lokhttp3/RealCall;.d:()Ljava/lang/String;` @kind virtual;
  #L4ffe9a.  v1:= temp @kind object;
  #L4ffe9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L4ffea2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L4ffea8.  v0:= temp @kind object;
  #L4ffeaa.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffd80.  v0:= v1.`okhttp3.RealCall.b` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L4ffd84.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L4ffd8a.  v0:= temp;
  #L4ffd8c.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4ffda0.  @monitorenter v1
  #L4ffda2.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L4ffda6.  @monitorexit v1
  #L4ffda8.  return v0;
  #L4ffdaa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L4ffdac.  @monitorexit v1
  #L4ffdae.  throw v0;
  catch `java.lang.Throwable` @[L4ffda2..L4ffda6] goto L4ffdaa;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L4fff48.  v0:= v1.`okhttp3.RealCall.d` @type ^`okhttp3.Request` @kind object;
  #L4fff4c.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L500178.  v0:= v1.`okhttp3.RealCall.c` @type ^`okio.AsyncTimeout` @kind object;
  #L50017c.  return v0 @kind object;
}
