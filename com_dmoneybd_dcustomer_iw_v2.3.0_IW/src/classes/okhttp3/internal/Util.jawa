record `okhttp3.internal.Util` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.RequestBody` `@@okhttp3.internal.Util.EMPTY_REQUEST` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ResponseBody` `@@okhttp3.internal.Util.EMPTY_RESPONSE` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.ISO_8859_1` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.Comparator` `@@okhttp3.internal.Util.NATURAL_ORDER` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.TimeZone` `@@okhttp3.internal.Util.UTC` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_16_BE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.Util.UTF_16_BE_BOM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_16_LE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.Util.UTF_16_LE_BOM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_32_BE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.Util.UTF_32_BE_BOM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_32_LE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.Util.UTF_32_LE_BOM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@okhttp3.internal.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.Util.UTF_8_BOM` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.reflect.Method` `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L502914.  v0:= 0I;
  #L502916.  v1:= new `byte`[v0];
  #L50291a.  `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @type ^`byte`[] := v1 @kind object;
  #L50291e.  v2:= new `java.lang.String`[v0];
  #L502922.  `@@okhttp3.internal.Util.EMPTY_STRING_ARRAY` @type ^`java.lang.String`[] := v2 @kind object;
  #L502926.  v2:= 0I;
  #L502928.  call temp:= `create`(v2, v1) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/ResponseBody;` @kind static;
  #L50292e.  v3:= temp @kind object;
  #L502930.  `@@okhttp3.internal.Util.EMPTY_RESPONSE` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L502934.  call temp:= `create`(v2, v1) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L50293a.  v1:= temp @kind object;
  #L50293c.  `@@okhttp3.internal.Util.EMPTY_REQUEST` @type ^`okhttp3.RequestBody` := v1 @kind object;
  #L502940.  v1:= "efbbbf" @kind object;
  #L502944.  call temp:= `decodeHex`(v1) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L50294a.  v1:= temp @kind object;
  #L50294c.  `@@okhttp3.internal.Util.UTF_8_BOM` @type ^`okio.ByteString` := v1 @kind object;
  #L502950.  v1:= "feff" @kind object;
  #L502954.  call temp:= `decodeHex`(v1) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L50295a.  v1:= temp @kind object;
  #L50295c.  `@@okhttp3.internal.Util.UTF_16_BE_BOM` @type ^`okio.ByteString` := v1 @kind object;
  #L502960.  v1:= "fffe" @kind object;
  #L502964.  call temp:= `decodeHex`(v1) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L50296a.  v1:= temp @kind object;
  #L50296c.  `@@okhttp3.internal.Util.UTF_16_LE_BOM` @type ^`okio.ByteString` := v1 @kind object;
  #L502970.  v1:= "0000ffff" @kind object;
  #L502974.  call temp:= `decodeHex`(v1) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L50297a.  v1:= temp @kind object;
  #L50297c.  `@@okhttp3.internal.Util.UTF_32_BE_BOM` @type ^`okio.ByteString` := v1 @kind object;
  #L502980.  v1:= "ffff0000" @kind object;
  #L502984.  call temp:= `decodeHex`(v1) @signature `Lokio/ByteString;.decodeHex:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L50298a.  v1:= temp @kind object;
  #L50298c.  `@@okhttp3.internal.Util.UTF_32_LE_BOM` @type ^`okio.ByteString` := v1 @kind object;
  #L502990.  v1:= "UTF-8" @kind object;
  #L502994.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L50299a.  v1:= temp @kind object;
  #L50299c.  `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029a0.  v1:= "ISO-8859-1" @kind object;
  #L5029a4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L5029aa.  v1:= temp @kind object;
  #L5029ac.  `@@okhttp3.internal.Util.ISO_8859_1` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029b0.  v1:= "UTF-16BE" @kind object;
  #L5029b4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L5029ba.  v1:= temp @kind object;
  #L5029bc.  `@@okhttp3.internal.Util.UTF_16_BE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029c0.  v1:= "UTF-16LE" @kind object;
  #L5029c4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L5029ca.  v1:= temp @kind object;
  #L5029cc.  `@@okhttp3.internal.Util.UTF_16_LE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029d0.  v1:= "UTF-32BE" @kind object;
  #L5029d4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L5029da.  v1:= temp @kind object;
  #L5029dc.  `@@okhttp3.internal.Util.UTF_32_BE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029e0.  v1:= "UTF-32LE" @kind object;
  #L5029e4.  call temp:= `forName`(v1) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L5029ea.  v1:= temp @kind object;
  #L5029ec.  `@@okhttp3.internal.Util.UTF_32_LE` @type ^`java.nio.charset.Charset` := v1 @kind object;
  #L5029f0.  v1:= "GMT" @kind object;
  #L5029f4.  call temp:= `getTimeZone`(v1) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L5029fa.  v1:= temp @kind object;
  #L5029fc.  `@@okhttp3.internal.Util.UTC` @type ^`java.util.TimeZone` := v1 @kind object;
  #L502a00.  v1:= new `okhttp3.internal.Util$1`;
  #L502a04.  call `<init>`(v1) @signature `Lokhttp3/internal/Util$1;.<init>:()V` @kind direct;
  #L502a0a.  `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` := v1 @kind object;
  #L502a0e.  v1:= constclass @type ^`java.lang.Throwable` @kind object;
  #L502a12.  v3:= "addSuppressed" @kind object;
  #L502a16.  v4:= 1I;
  #L502a18.  v4:= new `java.lang.Class`[v4];
  #L502a1c.  v5:= constclass @type ^`java.lang.Throwable` @kind object;
  #L502a20.  v4[v0]:= v5 @kind object;
  #L502a24.  call temp:= `getDeclaredMethod`(v1, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L502a2a.  v2:= temp @kind object;
  #L502a2c.  `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L502a30.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L502a34.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L502a3a.  v0:= temp @kind object;
  #L502a3c.  `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L502a40.  return @kind void;
  catch `java.lang.Exception` @[L502a0e..L502a2c] goto L502a2c;
}
procedure `void` `<init>`(`okhttp3.internal.Util` v0 @kind this) @signature `Lokhttp3/internal/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L502a64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L502a6a.  return @kind void;
}
procedure `void` `addSuppressedIfPossible`(`java.lang.Throwable` v3 @kind object, `java.lang.Throwable` v4 @kind object) @signature `Lokhttp3/internal/Util;.addSuppressedIfPossible:(Ljava/lang/Throwable;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L502a7c.  v0:= `@@okhttp3.internal.Util.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L502a80.  if v0 == 0 then goto L502a96;
  #L502a84.  v1:= 1I;
  #L502a86.  v1:= new `java.lang.Object`[v1];
  #L502a8a.  v2:= 0I;
  #L502a8c.  v1[v2]:= v4 @kind object;
  #L502a90.  call temp:= `invoke`(v0, v3, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L502a96.  return @kind void;
  catch `java.lang.reflect.InvocationTargetException` @[L502a86..L502a96] goto L502a96;
  catch `java.lang.IllegalAccessException` @[L502a86..L502a96] goto L502a96;
}
procedure `java.lang.AssertionError` `assertionError`(`java.lang.String` v1 @kind object, `java.lang.Exception` v2 @kind object) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L502194.  v0:= new `java.lang.AssertionError`;
  #L502198.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50219e.  call temp:= `initCause`(v0, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L5021a4.  return v0 @kind object;
  catch `java.lang.IllegalStateException` @[L50219e..L5021a4] goto L5021a4;
}
procedure `java.nio.charset.Charset` `bomAwareCharset`(`okio.BufferedSource` v4 @kind object, `java.nio.charset.Charset` v5 @kind object) @signature `Lokhttp3/internal/Util;.bomAwareCharset:(Lokio/BufferedSource;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502684.  v0:= `@@okhttp3.internal.Util.UTF_8_BOM` @type ^`okio.ByteString` @kind object;
  #L502688.  v1:= 0L;
  #L50268c.  call temp:= `rangeEquals`(v4, v1, v0) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L502692.  v3:= temp;
  #L502694.  if v3 == 0 then goto L5026ae;
  #L502698.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L50269e.  v5:= temp;
  #L5026a0.  v0:= (`long`) v5 @kind i2l;
  #L5026a2.  call `skip`(v4, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L5026a8.  v4:= `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L5026ac.  return v4 @kind object;
  #L5026ae.  v0:= `@@okhttp3.internal.Util.UTF_16_BE_BOM` @type ^`okio.ByteString` @kind object;
  #L5026b2.  call temp:= `rangeEquals`(v4, v1, v0) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L5026b8.  v3:= temp;
  #L5026ba.  if v3 == 0 then goto L5026d4;
  #L5026be.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L5026c4.  v5:= temp;
  #L5026c6.  v0:= (`long`) v5 @kind i2l;
  #L5026c8.  call `skip`(v4, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L5026ce.  v4:= `@@okhttp3.internal.Util.UTF_16_BE` @type ^`java.nio.charset.Charset` @kind object;
  #L5026d2.  return v4 @kind object;
  #L5026d4.  v0:= `@@okhttp3.internal.Util.UTF_16_LE_BOM` @type ^`okio.ByteString` @kind object;
  #L5026d8.  call temp:= `rangeEquals`(v4, v1, v0) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L5026de.  v3:= temp;
  #L5026e0.  if v3 == 0 then goto L5026fa;
  #L5026e4.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L5026ea.  v5:= temp;
  #L5026ec.  v0:= (`long`) v5 @kind i2l;
  #L5026ee.  call `skip`(v4, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L5026f4.  v4:= `@@okhttp3.internal.Util.UTF_16_LE` @type ^`java.nio.charset.Charset` @kind object;
  #L5026f8.  return v4 @kind object;
  #L5026fa.  v0:= `@@okhttp3.internal.Util.UTF_32_BE_BOM` @type ^`okio.ByteString` @kind object;
  #L5026fe.  call temp:= `rangeEquals`(v4, v1, v0) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L502704.  v3:= temp;
  #L502706.  if v3 == 0 then goto L502720;
  #L50270a.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L502710.  v5:= temp;
  #L502712.  v0:= (`long`) v5 @kind i2l;
  #L502714.  call `skip`(v4, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L50271a.  v4:= `@@okhttp3.internal.Util.UTF_32_BE` @type ^`java.nio.charset.Charset` @kind object;
  #L50271e.  return v4 @kind object;
  #L502720.  v0:= `@@okhttp3.internal.Util.UTF_32_LE_BOM` @type ^`okio.ByteString` @kind object;
  #L502724.  call temp:= `rangeEquals`(v4, v1, v0) @signature `Lokio/BufferedSource;.rangeEquals:(JLokio/ByteString;)Z` @kind interface;
  #L50272a.  v1:= temp;
  #L50272c.  if v1 == 0 then goto L502746;
  #L502730.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L502736.  v5:= temp;
  #L502738.  v0:= (`long`) v5 @kind i2l;
  #L50273a.  call `skip`(v4, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L502740.  v4:= `@@okhttp3.internal.Util.UTF_32_LE` @type ^`java.nio.charset.Charset` @kind object;
  #L502744.  return v4 @kind object;
  #L502746.  return v5 @kind object;
}
procedure `java.lang.String` `canonicalizeHost`(`java.lang.String` v3 @kind object) @signature `Lokhttp3/internal/Util;.canonicalizeHost:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L5021c8.  v0:= ":" @kind object;
  #L5021cc.  call temp:= `contains`(v3, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L5021d2.  v0:= temp;
  #L5021d4.  v1:= 0I;
  #L5021d6.  if v0 == 0 then goto L50227c;
  #L5021da.  v0:= "[" @kind object;
  #L5021de.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L5021e4.  v0:= temp;
  #L5021e6.  if v0 == 0 then goto L502210;
  #L5021ea.  v0:= "]" @kind object;
  #L5021ee.  call temp:= `endsWith`(v3, v0) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L5021f4.  v0:= temp;
  #L5021f6.  if v0 == 0 then goto L502210;
  #L5021fa.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L502200.  v0:= temp;
  #L502202.  v2:= 1I;
  #L502204.  v0:= v0 - v2 @kind int;
  #L502206.  call temp:= `decodeIpv6`(v3, v2, v0) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L50220c.  v0:= temp @kind object;
  #L50220e.  goto L502222;
  #L502210.  v0:= 0I;
  #L502212.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L502218.  v2:= temp;
  #L50221a.  call temp:= `decodeIpv6`(v3, v0, v2) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @kind static;
  #L502220.  v0:= temp @kind object;
  #L502222.  if v0 != 0 then goto L502228;
  #L502226.  return v1 @kind object;
  #L502228.  call temp:= `getAddress`(v0) @signature `Ljava/net/InetAddress;.getAddress:()[B` @kind virtual;
  #L50222e.  v0:= temp @kind object;
  #L502230.  v1:= length @variable v0;
  #L502232.  v2:= 16I;
  #L502236.  if v1 != v2 then goto L502244;
  #L50223a.  call temp:= `inet6AddressToAscii`(v0) @signature `Lokhttp3/internal/Util;.inet6AddressToAscii:([B)Ljava/lang/String;` @kind static;
  #L502240.  v3:= temp @kind object;
  #L502242.  return v3 @kind object;
  #L502244.  v0:= new `java.lang.AssertionError`;
  #L502248.  v1:= new `java.lang.StringBuilder`;
  #L50224c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L502252.  v2:= "Invalid IPv6 address: '" @kind object;
  #L502256.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50225c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L502262.  v3:= "'" @kind object;
  #L502266.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50226c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L502272.  v3:= temp @kind object;
  #L502274.  call `<init>`(v0, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L50227a.  throw v0;
  #L50227c.  call temp:= `toASCII`(v3) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L502282.  v3:= temp @kind object;
  #L502284.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L502288.  call temp:= `toLowerCase`(v3, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L50228e.  v3:= temp @kind object;
  #L502290.  call temp:= `isEmpty`(v3) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L502296.  v0:= temp;
  #L502298.  if v0 == 0 then goto L50229e;
  #L50229c.  return v1 @kind object;
  #L50229e.  call temp:= `containsInvalidHostnameAsciiCodes`(v3) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @kind static;
  #L5022a4.  v0:= temp;
  #L5022a6.  if v0 == 0 then goto L5022ac;
  #L5022aa.  return v1 @kind object;
  #L5022ac.  return v3 @kind object;
  #L5022ae.  return v1 @kind object;
  catch `java.lang.IllegalArgumentException` @[L50227c..L5022a6] goto L5022ae;
}
procedure `int` `checkDuration`(`java.lang.String` v6 @kind object, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L501ed8.  v0:= 0L;
  #L501edc.  v2:= lcmp(v7, v0);
  #L501ee0.  if v2 < 0 then goto L501f80;
  #L501ee4.  if v9 == 0 then goto L501f70;
  #L501ee8.  call temp:= `toMillis`(v9, v7) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L501eee.  v2:= temp @kind wide;
  #L501ef0.  v4:= 2147483647L;
  #L501ef6.  v9:= lcmp(v2, v4);
  #L501efa.  if v9 > 0 then goto L501f42;
  #L501efe.  v9:= lcmp(v2, v0);
  #L501f02.  if v9 != 0 then goto L501f3e;
  #L501f06.  v9:= lcmp(v7, v0);
  #L501f0a.  if v9 > 0 then goto L501f10;
  #L501f0e.  goto L501f3e;
  #L501f10.  v7:= new `java.lang.IllegalArgumentException`;
  #L501f14.  v8:= new `java.lang.StringBuilder`;
  #L501f18.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L501f1e.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f24.  v6:= " too small." @kind object;
  #L501f28.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f2e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L501f34.  v6:= temp @kind object;
  #L501f36.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501f3c.  throw v7;
  #L501f3e.  v6:= (`int`) v2 @kind l2i;
  #L501f40.  return v6;
  #L501f42.  v7:= new `java.lang.IllegalArgumentException`;
  #L501f46.  v8:= new `java.lang.StringBuilder`;
  #L501f4a.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L501f50.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f56.  v6:= " too large." @kind object;
  #L501f5a.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f60.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L501f66.  v6:= temp @kind object;
  #L501f68.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501f6e.  throw v7;
  #L501f70.  v6:= new `java.lang.NullPointerException`;
  #L501f74.  v7:= "unit == null" @kind object;
  #L501f78.  call `<init>`(v6, v7) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501f7e.  throw v6;
  #L501f80.  v7:= new `java.lang.IllegalArgumentException`;
  #L501f84.  v8:= new `java.lang.StringBuilder`;
  #L501f88.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L501f8e.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f94.  v6:= " < 0" @kind object;
  #L501f98.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L501f9e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L501fa4.  v6:= temp @kind object;
  #L501fa6.  call `<init>`(v7, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L501fac.  throw v7;
}
procedure `void` `checkOffsetAndCount`(`long` v5 , `long` v7 , `long` v9 ) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L502ab8.  v0:= v7 ^| v9 @kind long;
  #L502abc.  v2:= 0L;
  #L502ac0.  v4:= lcmp(v0, v2);
  #L502ac4.  if v4 < 0 then goto L502adc;
  #L502ac8.  v0:= lcmp(v7, v5);
  #L502acc.  if v0 > 0 then goto L502adc;
  #L502ad0.  v5:= v5 - v7 @kind long;
  #L502ad2.  v7:= lcmp(v5, v9);
  #L502ad6.  if v7 < 0 then goto L502adc;
  #L502ada.  return @kind void;
  #L502adc.  v5:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L502ae0.  call `<init>`(v5) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L502ae6.  throw v5;
}
procedure `void` `closeQuietly`(`java.io.Closeable` v0 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L502af8.  if v0 == 0 then goto L502b08;
  #L502afc.  call `close`(v0) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #L502b02.  goto L502b08;
  #L502b04.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L502b06.  throw v0;
  #L502b08.  return @kind void;
  catch `java.lang.RuntimeException` @[L502afc..L502b02] goto L502b04;
  catch `java.lang.Exception` @[L502afc..L502b02] goto L502b08;
}
procedure `void` `closeQuietly`(`java.net.ServerSocket` v0 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/ServerSocket;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L502b2c.  if v0 == 0 then goto L502b3c;
  #L502b30.  call `close`(v0) @signature `Ljava/net/ServerSocket;.close:()V` @kind virtual;
  #L502b36.  goto L502b3c;
  #L502b38.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L502b3a.  throw v0;
  #L502b3c.  return @kind void;
  catch `java.lang.RuntimeException` @[L502b30..L502b36] goto L502b38;
  catch `java.lang.Exception` @[L502b30..L502b36] goto L502b3c;
}
procedure `void` `closeQuietly`(`java.net.Socket` v1 @kind object) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L502b60.  if v1 == 0 then goto L502b82;
  #L502b64.  call `close`(v1) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #L502b6a.  goto L502b82;
  #L502b6c.  v1:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L502b6e.  throw v1;
  #L502b70.  v1:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L502b72.  call temp:= `isAndroidGetsocknameError`(v1) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @kind static;
  #L502b78.  v0:= temp;
  #L502b7a.  if v0 == 0 then goto L502b80;
  #L502b7e.  goto L502b82;
  #L502b80.  throw v1;
  #L502b82.  return @kind void;
  catch `java.lang.AssertionError` @[L502b64..L502b6a] goto L502b70;
  catch `java.lang.RuntimeException` @[L502b64..L502b6a] goto L502b6c;
  catch `java.lang.Exception` @[L502b64..L502b6a] goto L502b82;
}
procedure `java.lang.String`[] `concat`(`java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502494.  v0:= length @variable v4;
  #L502496.  v0:= v0 + 1;
  #L50249a.  v1:= new `java.lang.String`[v0];
  #L50249e.  v2:= length @variable v4;
  #L5024a0.  v3:= 0I;
  #L5024a2.  call `arraycopy`(v4, v3, v1, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L5024a8.  v0:= v0 + -1;
  #L5024ac.  v1[v0]:= v5 @kind object;
  #L5024b0.  return v1 @kind object;
}
procedure `boolean` `containsInvalidHostnameAsciiCodes`(`java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.containsInvalidHostnameAsciiCodes:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L501b8c.  v0:= 0I;
  #L501b8e.  v1:= 0I;
  #L501b90.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L501b96.  v2:= temp;
  #L501b98.  if v1 >= v2 then goto L501bd4;
  #L501b9c.  call temp:= `charAt`(v5, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L501ba2.  v2:= temp;
  #L501ba4.  v3:= 31I;
  #L501ba8.  v4:= 1I;
  #L501baa.  if v2 <= v3 then goto L501bd2;
  #L501bae.  v3:= 127I;
  #L501bb2.  if v2 < v3 then goto L501bb8;
  #L501bb6.  goto L501bd2;
  #L501bb8.  v3:= " #%/:?@[\\]" @kind object;
  #L501bbc.  call temp:= `indexOf`(v3, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L501bc2.  v2:= temp;
  #L501bc4.  v3:= -1I;
  #L501bc6.  if v2 == v3 then goto L501bcc;
  #L501bca.  return v4;
  #L501bcc.  v1:= v1 + 1;
  #L501bd0.  goto L501b90;
  #L501bd2.  return v4;
  #L501bd4.  return v0;
}
procedure `int` `decodeHexDigit`(`char` v2 ) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L501fc0.  v0:= 48I;
  #L501fc4.  if v2 < v0 then goto L501fd4;
  #L501fc8.  v1:= 57I;
  #L501fcc.  if v2 > v1 then goto L501fd4;
  #L501fd0.  v2:= v2 - v0 @kind int;
  #L501fd2.  return v2;
  #L501fd4.  v0:= 97I;
  #L501fd8.  if v2 < v0 then goto L501fec;
  #L501fdc.  v1:= 102I;
  #L501fe0.  if v2 > v1 then goto L501fec;
  #L501fe4.  v2:= v2 - v0 @kind int;
  #L501fe6.  v2:= v2 + 10;
  #L501fea.  return v2;
  #L501fec.  v0:= 65I;
  #L501ff0.  if v2 < v0 then goto L501ffe;
  #L501ff4.  v1:= 70I;
  #L501ff8.  if v2 > v1 then goto L501ffe;
  #L501ffc.  goto L501fe4;
  #L501ffe.  v2:= -1I;
  #L502000.  return v2;
}
procedure `boolean` `decodeIpv4Suffix`(`java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lokhttp3/internal/Util;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L501be8.  v0:= v11;
  #L501bea.  v1:= 0I;
  #L501bec.  if v8 >= v9 then goto L501c70;
  #L501bf0.  v2:= length @variable v10;
  #L501bf2.  if v0 != v2 then goto L501bf8;
  #L501bf6.  return v1;
  #L501bf8.  if v0 == v11 then goto L501c12;
  #L501bfc.  call temp:= `charAt`(v7, v8) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L501c02.  v2:= temp;
  #L501c04.  v3:= 46I;
  #L501c08.  if v2 == v3 then goto L501c0e;
  #L501c0c.  return v1;
  #L501c0e.  v8:= v8 + 1;
  #L501c12.  v2:= v8;
  #L501c14.  v3:= 0I;
  #L501c16.  if v2 >= v9 then goto L501c56;
  #L501c1a.  call temp:= `charAt`(v7, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L501c20.  v4:= temp;
  #L501c22.  v5:= 48I;
  #L501c26.  if v4 < v5 then goto L501c56;
  #L501c2a.  v6:= 57I;
  #L501c2e.  if v4 <= v6 then goto L501c34;
  #L501c32.  goto L501c56;
  #L501c34.  if v3 != 0 then goto L501c3e;
  #L501c38.  if v8 == v2 then goto L501c3e;
  #L501c3c.  return v1;
  #L501c3e.  v3:= v3 * 10;
  #L501c42.  v3:= v3 + v4 @kind int;
  #L501c44.  v3:= v3 - v5 @kind int;
  #L501c46.  v4:= 255I;
  #L501c4a.  if v3 <= v4 then goto L501c50;
  #L501c4e.  return v1;
  #L501c50.  v2:= v2 + 1;
  #L501c54.  goto L501c16;
  #L501c56.  v8:= v2 - v8 @kind int;
  #L501c5a.  if v8 != 0 then goto L501c60;
  #L501c5e.  return v1;
  #L501c60.  v8:= v0 + 1;
  #L501c64.  v1:= (`byte`) v3 @kind i2b;
  #L501c66.  v10[v0]:= v1 @kind byte;
  #L501c6a.  v0:= v8;
  #L501c6c.  v8:= v2;
  #L501c6e.  goto L501bea;
  #L501c70.  v11:= v11 + 4;
  #L501c74.  if v0 == v11 then goto L501c7a;
  #L501c78.  return v1;
  #L501c7a.  v7:= 1I;
  #L501c7c.  return v7;
}
procedure `java.net.InetAddress` `decodeIpv6`(`java.lang.String` v11 @kind object, `int` v12 , `int` v13 ) @signature `Lokhttp3/internal/Util;.decodeIpv6:(Ljava/lang/String;II)Ljava/net/InetAddress;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L502534.  v0:= 16I;
  #L502538.  v1:= new `byte`[v0];
  #L50253c.  v2:= -1I;
  #L50253e.  v3:= 0I;
  #L502540.  v4:= 0I;
  #L502542.  v5:= -1I;
  #L502544.  v6:= -1I;
  #L502546.  v7:= 0I;
  #L502548.  if v12 >= v13 then goto L502628;
  #L50254c.  if v4 != v0 then goto L502552;
  #L502550.  return v7 @kind object;
  #L502552.  v8:= v12 + 2;
  #L502556.  if v8 > v13 then goto L502582;
  #L50255a.  v9:= "::" @kind object;
  #L50255e.  v10:= 2I;
  #L502560.  call temp:= `regionMatches`(v11, v12, v9, v3, v10) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L502566.  v9:= temp;
  #L502568.  if v9 == 0 then goto L502582;
  #L50256c.  if v5 == v2 then goto L502572;
  #L502570.  return v7 @kind object;
  #L502572.  v4:= v4 + 2;
  #L502576.  v5:= v4;
  #L502578.  if v8 != v13 then goto L50257e;
  #L50257c.  goto L502628;
  #L50257e.  v6:= v8;
  #L502580.  goto L5025ca;
  #L502582.  if v4 == 0 then goto L5025c8;
  #L502586.  v8:= ":" @kind object;
  #L50258a.  v9:= 1I;
  #L50258c.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L502592.  v8:= temp;
  #L502594.  if v8 == 0 then goto L50259e;
  #L502598.  v12:= v12 + 1;
  #L50259c.  goto L5025c8;
  #L50259e.  v8:= "." @kind object;
  #L5025a2.  call temp:= `regionMatches`(v11, v12, v8, v3, v9) @signature `Ljava/lang/String;.regionMatches:(ILjava/lang/String;II)Z` @kind virtual;
  #L5025a8.  v12:= temp;
  #L5025aa.  if v12 == 0 then goto L5025c6;
  #L5025ae.  v12:= v4 + -2;
  #L5025b2.  call temp:= `decodeIpv4Suffix`(v11, v6, v13, v1, v12) @signature `Lokhttp3/internal/Util;.decodeIpv4Suffix:(Ljava/lang/String;II[BI)Z` @kind static;
  #L5025b8.  v11:= temp;
  #L5025ba.  if v11 != 0 then goto L5025c0;
  #L5025be.  return v7 @kind object;
  #L5025c0.  v4:= v4 + 2;
  #L5025c4.  goto L502628;
  #L5025c6.  return v7 @kind object;
  #L5025c8.  v6:= v12;
  #L5025ca.  v12:= v6;
  #L5025cc.  v8:= 0I;
  #L5025ce.  if v12 >= v13 then goto L5025f4;
  #L5025d2.  call temp:= `charAt`(v11, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5025d8.  v9:= temp;
  #L5025da.  call temp:= `decodeHexDigit`(v9) @signature `Lokhttp3/internal/Util;.decodeHexDigit:(C)I` @kind static;
  #L5025e0.  v9:= temp;
  #L5025e2.  if v9 != v2 then goto L5025e8;
  #L5025e6.  goto L5025f4;
  #L5025e8.  v8:= v8 ^< 4;
  #L5025ec.  v8:= v8 + v9 @kind int;
  #L5025ee.  v12:= v12 + 1;
  #L5025f2.  goto L5025ce;
  #L5025f4.  v9:= v12 - v6 @kind int;
  #L5025f8.  if v9 == 0 then goto L502626;
  #L5025fc.  v10:= 4I;
  #L5025fe.  if v9 <= v10 then goto L502604;
  #L502602.  goto L502626;
  #L502604.  v7:= v4 + 1;
  #L502608.  v9:= v8 ^>> 8;
  #L50260c.  v9:= v9 ^& 255;
  #L502610.  v9:= (`byte`) v9 @kind i2b;
  #L502612.  v1[v4]:= v9 @kind byte;
  #L502616.  v4:= v7 + 1;
  #L50261a.  v8:= v8 ^& 255;
  #L50261e.  v8:= (`byte`) v8 @kind i2b;
  #L502620.  v1[v7]:= v8 @kind byte;
  #L502624.  goto L502546;
  #L502626.  return v7 @kind object;
  #L502628.  if v4 == v0 then goto L50264a;
  #L50262c.  if v5 != v2 then goto L502632;
  #L502630.  return v7 @kind object;
  #L502632.  v11:= v4 - v5 @kind int;
  #L502636.  v12:= v11 - 16;
  #L50263a.  call `arraycopy`(v1, v5, v1, v12, v11) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L502640.  v0:= v0 - v4 @kind int;
  #L502642.  v0:= v0 + v5 @kind int;
  #L502644.  call `fill`(v1, v5, v0, v3) @signature `Ljava/util/Arrays;.fill:([BIIB)V` @kind static;
  #L50264a.  call temp:= `getByAddress`(v1) @signature `Ljava/net/InetAddress;.getByAddress:([B)Ljava/net/InetAddress;` @kind static;
  #L502650.  v11:= temp @kind object;
  #L502652.  return v11 @kind object;
  #L502654.  v11:= new `java.lang.AssertionError`;
  #L502658.  call `<init>`(v11) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L50265e.  goto L502662;
  #L502660.  throw v11;
  #L502662.  goto L502660;
  catch `java.net.UnknownHostException` @[L50264a..L502652] goto L502654;
}
procedure `int` `delimiterOffset`(`java.lang.String` v1 @kind object, `int` v2 , `int` v3 , `char` v4 ) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L502014.  if v2 >= v3 then goto L50202c;
  #L502018.  call temp:= `charAt`(v1, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50201e.  v0:= temp;
  #L502020.  if v0 != v4 then goto L502026;
  #L502024.  return v2;
  #L502026.  v2:= v2 + 1;
  #L50202a.  goto L502014;
  #L50202c.  return v3;
}
procedure `int` `delimiterOffset`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.delimiterOffset:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L502040.  if v3 >= v4 then goto L502062;
  #L502044.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50204a.  v0:= temp;
  #L50204c.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L502052.  v0:= temp;
  #L502054.  v1:= -1I;
  #L502056.  if v0 == v1 then goto L50205c;
  #L50205a.  return v3;
  #L50205c.  v3:= v3 + 1;
  #L502060.  goto L502040;
  #L502062.  return v4;
}
procedure `boolean` `discard`(`okio.Source` v0 @kind object, `int` v1 , `java.util.concurrent.TimeUnit` v2 @kind object) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L501c90.  call temp:= `skipAll`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L501c96.  v0:= temp;
  #L501c98.  return v0;
  #L501c9a.  v0:= 0I;
  #L501c9c.  return v0;
  catch `java.io.IOException` @[L501c90..L501c98] goto L501c9a;
}
procedure `boolean` `equal`(`java.lang.Object` v0 @kind object, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;

  #L501cc0.  if v0 == v1 then goto L501cda;
  #L501cc4.  if v0 == 0 then goto L501cd6;
  #L501cc8.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L501cce.  v0:= temp;
  #L501cd0.  if v0 == 0 then goto L501cd6;
  #L501cd4.  goto L501cda;
  #L501cd6.  v0:= 0I;
  #L501cd8.  goto L501cdc;
  #L501cda.  v0:= 1I;
  #L501cdc.  return v0;
}
procedure `java.lang.String` `format`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5022d0.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L5022d4.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L5022da.  v1:= temp @kind object;
  #L5022dc.  return v1 @kind object;
}
procedure `java.lang.String` `hostHeader`(`okhttp3.HttpUrl` v3 @kind object, `boolean` v4 ) @signature `Lokhttp3/internal/Util;.hostHeader:(Lokhttp3/HttpUrl;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L5022f0.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L5022f6.  v0:= temp @kind object;
  #L5022f8.  v1:= ":" @kind object;
  #L5022fc.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L502302.  v0:= temp;
  #L502304.  if v0 == 0 then goto L50233e;
  #L502308.  v0:= new `java.lang.StringBuilder`;
  #L50230c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L502312.  v2:= "[" @kind object;
  #L502316.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50231c.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L502322.  v2:= temp @kind object;
  #L502324.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50232a.  v2:= "]" @kind object;
  #L50232e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L502334.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L50233a.  v0:= temp @kind object;
  #L50233c.  goto L502346;
  #L50233e.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L502344.  v0:= temp @kind object;
  #L502346.  if v4 != 0 then goto L502366;
  #L50234a.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L502350.  v4:= temp;
  #L502352.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L502358.  v2:= temp @kind object;
  #L50235a.  call temp:= `defaultPort`(v2) @signature `Lokhttp3/HttpUrl;.defaultPort:(Ljava/lang/String;)I` @kind static;
  #L502360.  v2:= temp;
  #L502362.  if v4 == v2 then goto L502392;
  #L502366.  v4:= new `java.lang.StringBuilder`;
  #L50236a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L502370.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L502376.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50237c.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L502382.  v3:= temp;
  #L502384.  call temp:= `append`(v4, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L50238a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L502390.  v0:= temp @kind object;
  #L502392.  return v0 @kind object;
}
procedure `java.util.List` `immutableList`(`java.util.List` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L502788.  v0:= new `java.util.ArrayList`;
  #L50278c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L502792.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L502798.  v1:= temp @kind object;
  #L50279a.  return v1 @kind object;
}
procedure `java.util.List` `immutableList`(`java.lang.Object`[] v0 @kind object) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L502758.  call temp:= `clone`(v0) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L50275e.  v0:= temp @kind object;
  #L502760.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L502764.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L50276a.  v0:= temp @kind object;
  #L50276c.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L502772.  v0:= temp @kind object;
  #L502774.  return v0 @kind object;
}
procedure `java.util.Map` `immutableMap`(`java.util.Map` v1 @kind object) @signature `Lokhttp3/internal/Util;.immutableMap:(Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5027ac.  call temp:= `isEmpty`(v1) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L5027b2.  v0:= temp;
  #L5027b4.  if v0 == 0 then goto L5027c2;
  #L5027b8.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L5027be.  v1:= temp @kind object;
  #L5027c0.  goto L5027d4;
  #L5027c2.  v0:= new `java.util.LinkedHashMap`;
  #L5027c6.  call `<init>`(v0, v1) @signature `Ljava/util/LinkedHashMap;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L5027cc.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L5027d2.  v1:= temp @kind object;
  #L5027d4.  return v1 @kind object;
}
procedure `int` `indexOf`(`java.util.Comparator` v3 @kind object, `java.lang.String`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L502074.  v0:= length @variable v4;
  #L502076.  v1:= 0I;
  #L502078.  if v1 >= v0 then goto L502094;
  #L50207c.  v2:= v4[v1] @kind object;
  #L502080.  call temp:= `compare`(v3, v2, v5) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L502086.  v2:= temp;
  #L502088.  if v2 != 0 then goto L50208e;
  #L50208c.  return v1;
  #L50208e.  v1:= v1 + 1;
  #L502092.  goto L502078;
  #L502094.  v3:= -1I;
  #L502096.  return v3;
}
procedure `int` `indexOfControlOrNonAscii`(`java.lang.String` v4 @kind object) @signature `Lokhttp3/internal/Util;.indexOfControlOrNonAscii:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5020a8.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L5020ae.  v0:= temp;
  #L5020b0.  v1:= 0I;
  #L5020b2.  if v1 >= v0 then goto L5020d8;
  #L5020b6.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5020bc.  v2:= temp;
  #L5020be.  v3:= 31I;
  #L5020c2.  if v2 <= v3 then goto L5020d6;
  #L5020c6.  v3:= 127I;
  #L5020ca.  if v2 < v3 then goto L5020d0;
  #L5020ce.  goto L5020d6;
  #L5020d0.  v1:= v1 + 1;
  #L5020d4.  goto L5020b2;
  #L5020d6.  return v1;
  #L5020d8.  v4:= -1I;
  #L5020da.  return v4;
}
procedure `java.lang.String` `inet6AddressToAscii`(`byte`[] v8 @kind object) @signature `Lokhttp3/internal/Util;.inet6AddressToAscii:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5023a4.  v0:= 0I;
  #L5023a6.  v1:= -1I;
  #L5023a8.  v2:= 0I;
  #L5023aa.  v3:= 0I;
  #L5023ac.  v4:= length @variable v8;
  #L5023ae.  v5:= 16I;
  #L5023b2.  if v2 >= v4 then goto L5023ee;
  #L5023b6.  v4:= v2;
  #L5023b8.  if v4 >= v5 then goto L5023d6;
  #L5023bc.  v6:= v8[v4] @kind byte;
  #L5023c0.  if v6 != 0 then goto L5023d6;
  #L5023c4.  v6:= v4 + 1;
  #L5023c8.  v6:= v8[v6] @kind byte;
  #L5023cc.  if v6 != 0 then goto L5023d6;
  #L5023d0.  v4:= v4 + 2;
  #L5023d4.  goto L5023b8;
  #L5023d6.  v5:= v4 - v2 @kind int;
  #L5023da.  if v5 <= v3 then goto L5023e8;
  #L5023de.  v6:= 4I;
  #L5023e0.  if v5 < v6 then goto L5023e8;
  #L5023e4.  v1:= v2;
  #L5023e6.  v3:= v5;
  #L5023e8.  v2:= v4 + 2;
  #L5023ec.  goto L5023ac;
  #L5023ee.  v2:= new `okio.Buffer`;
  #L5023f2.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L5023f8.  v4:= length @variable v8;
  #L5023fa.  if v0 >= v4 then goto L50244c;
  #L5023fe.  v4:= 58I;
  #L502402.  if v0 != v1 then goto L50241a;
  #L502406.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L50240c.  v0:= v0 + v3 @kind int;
  #L50240e.  if v0 != v5 then goto L5023f8;
  #L502412.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L502418.  goto L5023f8;
  #L50241a.  if v0 <= 0 then goto L502424;
  #L50241e.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L502424.  v4:= v8[v0] @kind byte;
  #L502428.  v4:= v4 ^& 255;
  #L50242c.  v4:= v4 ^< 8;
  #L502430.  v6:= v0 + 1;
  #L502434.  v6:= v8[v6] @kind byte;
  #L502438.  v6:= v6 ^& 255;
  #L50243c.  v4:= v4 ^| v6 @kind int;
  #L50243e.  v6:= (`long`) v4 @kind i2l;
  #L502440.  call temp:= `writeHexadecimalUnsignedLong`(v2, v6) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L502446.  v0:= v0 + 2;
  #L50244a.  goto L5023f8;
  #L50244c.  call temp:= `readUtf8`(v2) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L502452.  v8:= temp @kind object;
  #L502454.  return v8 @kind object;
}
procedure `java.lang.String`[] `intersect`(`java.util.Comparator` v8 @kind object, `java.lang.String`[] v9 @kind object, `java.lang.String`[] v10 @kind object) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L5024c4.  v0:= new `java.util.ArrayList`;
  #L5024c8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L5024ce.  v1:= length @variable v9;
  #L5024d0.  v2:= 0I;
  #L5024d2.  v3:= 0I;
  #L5024d4.  if v3 >= v1 then goto L502508;
  #L5024d8.  v4:= v9[v3] @kind object;
  #L5024dc.  v5:= length @variable v10;
  #L5024de.  v6:= 0I;
  #L5024e0.  if v6 >= v5 then goto L502502;
  #L5024e4.  v7:= v10[v6] @kind object;
  #L5024e8.  call temp:= `compare`(v8, v4, v7) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L5024ee.  v7:= temp;
  #L5024f0.  if v7 != 0 then goto L5024fc;
  #L5024f4.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L5024fa.  goto L502502;
  #L5024fc.  v6:= v6 + 1;
  #L502500.  goto L5024e0;
  #L502502.  v3:= v3 + 1;
  #L502506.  goto L5024d4;
  #L502508.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L50250e.  v8:= temp;
  #L502510.  v8:= new `java.lang.String`[v8];
  #L502514.  call temp:= `toArray`(v0, v8) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L50251a.  v8:= temp @kind object;
  #L50251c.  v8:= (`java.lang.String`[]) v8 @kind object;
  #L502520.  return v8 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v1 @kind object) @signature `Lokhttp3/internal/Util;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L501cf0.  call temp:= `getCause`(v1) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L501cf6.  v0:= temp @kind object;
  #L501cf8.  if v0 == 0 then goto L501d24;
  #L501cfc.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L501d02.  v0:= temp @kind object;
  #L501d04.  if v0 == 0 then goto L501d24;
  #L501d08.  call temp:= `getMessage`(v1) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L501d0e.  v1:= temp @kind object;
  #L501d10.  v0:= "getsockname failed" @kind object;
  #L501d14.  call temp:= `contains`(v1, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L501d1a.  v1:= temp;
  #L501d1c.  if v1 == 0 then goto L501d24;
  #L501d20.  v1:= 1I;
  #L501d22.  goto L501d26;
  #L501d24.  v1:= 0I;
  #L501d26.  return v1;
}
procedure `boolean` `nonEmptyIntersection`(`java.util.Comparator` v7 @kind object, `java.lang.String`[] v8 @kind object, `java.lang.String`[] v9 @kind object) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L501d38.  v0:= 0I;
  #L501d3a.  if v8 == 0 then goto L501d84;
  #L501d3e.  if v9 == 0 then goto L501d84;
  #L501d42.  v1:= length @variable v8;
  #L501d44.  if v1 == 0 then goto L501d84;
  #L501d48.  v1:= length @variable v9;
  #L501d4a.  if v1 != 0 then goto L501d50;
  #L501d4e.  goto L501d84;
  #L501d50.  v1:= length @variable v8;
  #L501d52.  v2:= 0I;
  #L501d54.  if v2 >= v1 then goto L501d84;
  #L501d58.  v3:= v8[v2] @kind object;
  #L501d5c.  v4:= length @variable v9;
  #L501d5e.  v5:= 0I;
  #L501d60.  if v5 >= v4 then goto L501d7e;
  #L501d64.  v6:= v9[v5] @kind object;
  #L501d68.  call temp:= `compare`(v7, v3, v6) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L501d6e.  v6:= temp;
  #L501d70.  if v6 != 0 then goto L501d78;
  #L501d74.  v7:= 1I;
  #L501d76.  return v7;
  #L501d78.  v5:= v5 + 1;
  #L501d7c.  goto L501d60;
  #L501d7e.  v2:= v2 + 1;
  #L501d82.  goto L501d54;
  #L501d84.  return v0;
}
procedure `javax.net.ssl.X509TrustManager` `platformTrustManager`() @signature `Lokhttp3/internal/Util;.platformTrustManager:()Ljavax/net/ssl/X509TrustManager;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L502804.  call temp:= `getDefaultAlgorithm`() @signature `Ljavax/net/ssl/TrustManagerFactory;.getDefaultAlgorithm:()Ljava/lang/String;` @kind static;
  #L50280a.  v0:= temp @kind object;
  #L50280c.  call temp:= `getInstance`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/TrustManagerFactory;` @kind static;
  #L502812.  v0:= temp @kind object;
  #L502814.  v1:= 0I;
  #L502816.  call `init`(v0, v1) @signature `Ljavax/net/ssl/TrustManagerFactory;.init:(Ljava/security/KeyStore;)V` @kind virtual;
  #L50281c.  call temp:= `getTrustManagers`(v0) @signature `Ljavax/net/ssl/TrustManagerFactory;.getTrustManagers:()[Ljavax/net/ssl/TrustManager;` @kind virtual;
  #L502822.  v0:= temp @kind object;
  #L502824.  v1:= length @variable v0;
  #L502826.  v2:= 1I;
  #L502828.  if v1 != v2 then goto L502844;
  #L50282c.  v1:= 0I;
  #L50282e.  v2:= v0[v1] @kind object;
  #L502832.  v2:= instanceof @variable v2 @type ^`javax.net.ssl.X509TrustManager` @kind boolean;
  #L502836.  if v2 == 0 then goto L502844;
  #L50283a.  v0:= v0[v1] @kind object;
  #L50283e.  v0:= (`javax.net.ssl.X509TrustManager`) v0 @kind object;
  #L502842.  return v0 @kind object;
  #L502844.  v1:= new `java.lang.IllegalStateException`;
  #L502848.  v2:= new `java.lang.StringBuilder`;
  #L50284c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L502852.  v3:= "Unexpected default trust managers:" @kind object;
  #L502856.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50285c.  call temp:= `toString`(v0) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L502862.  v0:= temp @kind object;
  #L502864.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L50286a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L502870.  v0:= temp @kind object;
  #L502872.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L502878.  throw v1;
  #L50287a.  v0:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L50287c.  v1:= "No System TLS" @kind object;
  #L502880.  call temp:= `assertionError`(v1, v0) @signature `Lokhttp3/internal/Util;.assertionError:(Ljava/lang/String;Ljava/lang/Exception;)Ljava/lang/AssertionError;` @kind static;
  #L502886.  v0:= temp @kind object;
  #L502888.  throw v0;
  catch `java.security.GeneralSecurityException` @[L502804..L50287a] goto L50287a;
}
procedure `boolean` `skipAll`(`okio.Source` v11 @kind object, `int` v12 , `java.util.concurrent.TimeUnit` v13 @kind object) @signature `Lokhttp3/internal/Util;.skipAll:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L501d98.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L501d9e.  v0:= temp @kind wide;
  #L501da0.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501da6.  v2:= temp @kind object;
  #L501da8.  call temp:= `hasDeadline`(v2) @signature `Lokio/Timeout;.hasDeadline:()Z` @kind virtual;
  #L501dae.  v2:= temp;
  #L501db0.  v3:= 9223372036854775807L;
  #L501dba.  if v2 == 0 then goto L501dd2;
  #L501dbe.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501dc4.  v2:= temp @kind object;
  #L501dc6.  call temp:= `deadlineNanoTime`(v2) @signature `Lokio/Timeout;.deadlineNanoTime:()J` @kind virtual;
  #L501dcc.  v5:= temp @kind wide;
  #L501dce.  v5:= v5 - v0 @kind long;
  #L501dd0.  goto L501dd4;
  #L501dd2.  v5:= v3 @kind wide;
  #L501dd4.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501dda.  v2:= temp @kind object;
  #L501ddc.  v7:= (`long`) v12 @kind i2l;
  #L501dde.  call temp:= `toNanos`(v13, v7) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L501de4.  v12:= temp @kind wide;
  #L501de6.  call temp:= `min`(v5, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L501dec.  v12:= temp @kind wide;
  #L501dee.  v12:= v12 + v0 @kind long;
  #L501df0.  call temp:= `deadlineNanoTime`(v2, v12) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L501df6.  v12:= new `okio.Buffer`;
  #L501dfa.  call `<init>`(v12) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L501e00.  v7:= 8192L;
  #L501e04.  call temp:= `read`(v11, v12, v7) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L501e0a.  v7:= temp @kind wide;
  #L501e0c.  v9:= -1L;
  #L501e10.  v13:= lcmp(v7, v9);
  #L501e14.  if v13 == 0 then goto L501e20;
  #L501e18.  call `clear`(v12) @signature `Lokio/Buffer;.clear:()V` @kind virtual;
  #L501e1e.  goto L501e00;
  #L501e20.  v12:= 1I;
  #L501e22.  v13:= lcmp(v5, v3);
  #L501e26.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501e2c.  v11:= temp @kind object;
  #L501e2e.  if v13 != 0 then goto L501e3a;
  #L501e32.  call temp:= `clearDeadline`(v11) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L501e38.  goto L501e42;
  #L501e3a.  v0:= v0 + v5 @kind long;
  #L501e3c.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L501e42.  return v12;
  #L501e44.  v12:= Exception @type ^`java.lang.Throwable` @kind object;
  #L501e46.  v13:= lcmp(v5, v3);
  #L501e4a.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501e50.  v11:= temp @kind object;
  #L501e52.  if v13 != 0 then goto L501e5e;
  #L501e56.  call temp:= `clearDeadline`(v11) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L501e5c.  goto L501e66;
  #L501e5e.  v0:= v0 + v5 @kind long;
  #L501e60.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L501e66.  throw v12;
  #L501e68.  
  #L501e6a.  v12:= 0I;
  #L501e6c.  v13:= lcmp(v5, v3);
  #L501e70.  call temp:= `timeout`(v11) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L501e76.  v11:= temp @kind object;
  #L501e78.  if v13 != 0 then goto L501e84;
  #L501e7c.  call temp:= `clearDeadline`(v11) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L501e82.  goto L501e8c;
  #L501e84.  v0:= v0 + v5 @kind long;
  #L501e86.  call temp:= `deadlineNanoTime`(v11, v0) @signature `Lokio/Timeout;.deadlineNanoTime:(J)Lokio/Timeout;` @kind virtual;
  #L501e8c.  return v12;
  catch `java.io.InterruptedIOException` @[L501df6..L501e1e] goto L501e68;
  catch `java.lang.Throwable` @[L501df6..L501e1e] goto L501e44;
}
procedure `int` `skipLeadingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L5020ec.  if v3 >= v4 then goto L502128;
  #L5020f0.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L5020f6.  v0:= temp;
  #L5020f8.  v1:= 9I;
  #L5020fc.  if v0 == v1 then goto L502122;
  #L502100.  v1:= 10I;
  #L502104.  if v0 == v1 then goto L502122;
  #L502108.  v1:= 12I;
  #L50210c.  if v0 == v1 then goto L502122;
  #L502110.  v1:= 13I;
  #L502114.  if v0 == v1 then goto L502122;
  #L502118.  v1:= 32I;
  #L50211c.  if v0 == v1 then goto L502122;
  #L502120.  return v3;
  #L502122.  v3:= v3 + 1;
  #L502126.  goto L5020ec;
  #L502128.  return v4;
}
procedure `int` `skipTrailingAsciiWhitespace`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L50213c.  v4:= v4 + -1;
  #L502140.  if v4 < v3 then goto L502180;
  #L502144.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L50214a.  v0:= temp;
  #L50214c.  v1:= 9I;
  #L502150.  if v0 == v1 then goto L50217a;
  #L502154.  v1:= 10I;
  #L502158.  if v0 == v1 then goto L50217a;
  #L50215c.  v1:= 12I;
  #L502160.  if v0 == v1 then goto L50217a;
  #L502164.  v1:= 13I;
  #L502168.  if v0 == v1 then goto L50217a;
  #L50216c.  v1:= 32I;
  #L502170.  if v0 == v1 then goto L50217a;
  #L502174.  v4:= v4 + 1;
  #L502178.  return v4;
  #L50217a.  v4:= v4 + -1;
  #L50217e.  goto L502140;
  #L502180.  return v3;
}
procedure `java.util.concurrent.ThreadFactory` `threadFactory`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L5027e8.  v0:= new `okhttp3.internal.Util$2`;
  #L5027ec.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/Util$2;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L5027f2.  return v0 @kind object;
}
procedure `okhttp3.Headers` `toHeaders`(`java.util.List` v4 @kind object) @signature `Lokhttp3/internal/Util;.toHeaders:(Ljava/util/List;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L5028ac.  v0:= new `okhttp3.Headers$Builder`;
  #L5028b0.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L5028b6.  call temp:= `iterator`(v4) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L5028bc.  v4:= temp @kind object;
  #L5028be.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L5028c4.  v1:= temp;
  #L5028c6.  if v1 == 0 then goto L5028fa;
  #L5028ca.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L5028d0.  v1:= temp @kind object;
  #L5028d2.  v1:= (`okhttp3.internal.http2.Header`) v1 @kind object;
  #L5028d6.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L5028da.  v3:= v1.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L5028de.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L5028e4.  v3:= temp @kind object;
  #L5028e6.  v1:= v1.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L5028ea.  call temp:= `utf8`(v1) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L5028f0.  v1:= temp @kind object;
  #L5028f2.  call `addLenient`(v2, v0, v3, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L5028f8.  goto L5028be;
  #L5028fa.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L502900.  v4:= temp @kind object;
  #L502902.  return v4 @kind object;
}
procedure `java.lang.String` `trimSubstring`(`java.lang.String` v0 @kind object, `int` v1 , `int` v2 ) @signature `Lokhttp3/internal/Util;.trimSubstring:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;

  #L502468.  call temp:= `skipLeadingAsciiWhitespace`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipLeadingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L50246e.  v1:= temp;
  #L502470.  call temp:= `skipTrailingAsciiWhitespace`(v0, v1, v2) @signature `Lokhttp3/internal/Util;.skipTrailingAsciiWhitespace:(Ljava/lang/String;II)I` @kind static;
  #L502476.  v2:= temp;
  #L502478.  call temp:= `substring`(v0, v1, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L50247e.  v0:= temp @kind object;
  #L502480.  return v0 @kind object;
}
procedure `boolean` `verifyAsIpAddress`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L501eb0.  v0:= `@@okhttp3.internal.Util.VERIFY_AS_IP_ADDRESS` @type ^`java.util.regex.Pattern` @kind object;
  #L501eb4.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L501eba.  v1:= temp @kind object;
  #L501ebc.  call temp:= `matches`(v1) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L501ec2.  v1:= temp;
  #L501ec4.  return v1;
}
