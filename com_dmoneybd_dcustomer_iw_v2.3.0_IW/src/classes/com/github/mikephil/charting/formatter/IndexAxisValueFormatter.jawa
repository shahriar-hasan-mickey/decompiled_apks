record `com.github.mikephil.charting.formatter.IndexAxisValueFormatter` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.formatter.ValueFormatter` @kind class {
  `int` `com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v2 @kind this) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L394348.  call `<init>`(v2) @signature `Lcom/github/mikephil/charting/formatter/ValueFormatter;.<init>:()V` @kind direct;
  #L39434e.  v0:= 0I;
  #L394350.  v1:= new `java.lang.String`[v0];
  #L394354.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L394358.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @type ^`int` := v0;
  #L39435c.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v2 @kind this, `java.util.Collection` v3 @kind object) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.<init>:(Ljava/util/Collection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3943a0.  call `<init>`(v2) @signature `Lcom/github/mikephil/charting/formatter/ValueFormatter;.<init>:()V` @kind direct;
  #L3943a6.  v0:= 0I;
  #L3943a8.  v1:= new `java.lang.String`[v0];
  #L3943ac.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L3943b0.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @type ^`int` := v0;
  #L3943b4.  if v3 == 0 then goto L3943d6;
  #L3943b8.  call temp:= `size`(v3) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L3943be.  v0:= temp;
  #L3943c0.  v0:= new `java.lang.String`[v0];
  #L3943c4.  call temp:= `toArray`(v3, v0) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L3943ca.  v3:= temp @kind object;
  #L3943cc.  v3:= (`java.lang.String`[]) v3 @kind object;
  #L3943d0.  call `setValues`(v2, v3) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.setValues:([Ljava/lang/String;)V` @kind virtual;
  #L3943d6.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.<init>:([Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L394370.  call `<init>`(v2) @signature `Lcom/github/mikephil/charting/formatter/ValueFormatter;.<init>:()V` @kind direct;
  #L394376.  v0:= 0I;
  #L394378.  v1:= new `java.lang.String`[v0];
  #L39437c.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L394380.  v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @type ^`int` := v0;
  #L394384.  if v3 == 0 then goto L39438e;
  #L394388.  call `setValues`(v2, v3) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.setValues:([Ljava/lang/String;)V` @kind virtual;
  #L39438e.  return @kind void;
}
procedure `java.lang.String` `getFormattedValue`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v2 @kind this, `float` v3 ) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.getFormattedValue:(F)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3942f4.  call temp:= `round`(v3) @signature `Ljava/lang/Math;.round:(F)I` @kind static;
  #L3942fa.  v0:= temp;
  #L3942fc.  if v0 < 0 then goto L39431a;
  #L394300.  v1:= v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @type ^`int`;
  #L394304.  if v0 >= v1 then goto L39431a;
  #L394308.  v3:= (`int`) v3 @kind f2i;
  #L39430a.  if v0 == v3 then goto L394310;
  #L39430e.  goto L39431a;
  #L394310.  v3:= v2.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] @kind object;
  #L394314.  v3:= v3[v0] @kind object;
  #L394318.  return v3 @kind object;
  #L39431a.  v3:= "" @kind object;
  #L39431e.  return v3 @kind object;
}
procedure `java.lang.String`[] `getValues`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v1 @kind this) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.getValues:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L394330.  v0:= v1.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] @kind object;
  #L394334.  return v0 @kind object;
}
procedure `void` `setValues`(`com.github.mikephil.charting.formatter.IndexAxisValueFormatter` v0 @kind this, `java.lang.String`[] v1 @kind object) @signature `Lcom/github/mikephil/charting/formatter/IndexAxisValueFormatter;.setValues:([Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L3943e8.  if v1 != 0 then goto L3943f2;
  #L3943ec.  v1:= 0I;
  #L3943ee.  v1:= new `java.lang.String`[v1];
  #L3943f2.  v0.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L3943f6.  v1:= length @variable v1;
  #L3943f8.  v0.`com.github.mikephil.charting.formatter.IndexAxisValueFormatter.mValueCount` @type ^`int` := v1;
  #L3943fc.  return @kind void;
}
