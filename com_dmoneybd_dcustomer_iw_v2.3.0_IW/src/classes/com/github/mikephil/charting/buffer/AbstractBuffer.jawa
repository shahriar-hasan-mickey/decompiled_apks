record `com.github.mikephil.charting.buffer.AbstractBuffer` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `float`[] `com.github.mikephil.charting.buffer.AbstractBuffer.buffer` @AccessFlag PUBLIC_FINAL;
  `int` `com.github.mikephil.charting.buffer.AbstractBuffer.index` @AccessFlag PROTECTED;
  `int` `com.github.mikephil.charting.buffer.AbstractBuffer.mFrom` @AccessFlag PROTECTED;
  `int` `com.github.mikephil.charting.buffer.AbstractBuffer.mTo` @AccessFlag PROTECTED;
  `float` `com.github.mikephil.charting.buffer.AbstractBuffer.phaseX` @AccessFlag PROTECTED;
  `float` `com.github.mikephil.charting.buffer.AbstractBuffer.phaseY` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`com.github.mikephil.charting.buffer.AbstractBuffer` v2 @kind this, `int` v3 ) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L38450c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L384512.  v0:= 0I;
  #L384514.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.index` @type ^`int` := v0;
  #L384518.  v1:= 1.0F;
  #L38451c.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.phaseX` @type ^`float` := v1;
  #L384520.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.phaseY` @type ^`float` := v1;
  #L384524.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.mFrom` @type ^`int` := v0;
  #L384528.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.mTo` @type ^`int` := v0;
  #L38452c.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.index` @type ^`int` := v0;
  #L384530.  v3:= new `float`[v3];
  #L384534.  v2.`com.github.mikephil.charting.buffer.AbstractBuffer.buffer` @type ^`float`[] := v3 @kind object;
  #L384538.  return @kind void;
}
procedure `void` `feed`(`java.lang.Object` v0 @kind object) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.feed:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `limitFrom`(`com.github.mikephil.charting.buffer.AbstractBuffer` v0 @kind this, `int` v1 ) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.limitFrom:(I)V` @AccessFlag PUBLIC {
    temp;

  #L38454c.  if v1 >= 0 then goto L384552;
  #L384550.  v1:= 0I;
  #L384552.  v0.`com.github.mikephil.charting.buffer.AbstractBuffer.mFrom` @type ^`int` := v1;
  #L384556.  return @kind void;
}
procedure `void` `limitTo`(`com.github.mikephil.charting.buffer.AbstractBuffer` v0 @kind this, `int` v1 ) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.limitTo:(I)V` @AccessFlag PUBLIC {
    temp;

  #L384568.  if v1 >= 0 then goto L38456e;
  #L38456c.  v1:= 0I;
  #L38456e.  v0.`com.github.mikephil.charting.buffer.AbstractBuffer.mTo` @type ^`int` := v1;
  #L384572.  return @kind void;
}
procedure `void` `reset`(`com.github.mikephil.charting.buffer.AbstractBuffer` v1 @kind this) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L384584.  v0:= 0I;
  #L384586.  v1.`com.github.mikephil.charting.buffer.AbstractBuffer.index` @type ^`int` := v0;
  #L38458a.  return @kind void;
}
procedure `void` `setPhases`(`com.github.mikephil.charting.buffer.AbstractBuffer` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.setPhases:(FF)V` @AccessFlag PUBLIC {
    temp;

  #L38459c.  v0.`com.github.mikephil.charting.buffer.AbstractBuffer.phaseX` @type ^`float` := v1;
  #L3845a0.  v0.`com.github.mikephil.charting.buffer.AbstractBuffer.phaseY` @type ^`float` := v2;
  #L3845a4.  return @kind void;
}
procedure `int` `size`(`com.github.mikephil.charting.buffer.AbstractBuffer` v1 @kind this) @signature `Lcom/github/mikephil/charting/buffer/AbstractBuffer;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3844f4.  v0:= v1.`com.github.mikephil.charting.buffer.AbstractBuffer.buffer` @type ^`float`[] @kind object;
  #L3844f8.  v0:= length @variable v0;
  #L3844fa.  return v0;
}
