record `com.github.mikephil.charting.utils.MPPointF` @kind class @AccessFlag PUBLIC extends `com.github.mikephil.charting.utils.ObjectPool$Poolable` @kind class {
  `float` `com.github.mikephil.charting.utils.MPPointF.x` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.utils.MPPointF.y` @AccessFlag PUBLIC;
}
global `android.os.Parcelable$Creator` `@@com.github.mikephil.charting.utils.MPPointF.CREATOR` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.utils.MPPointF.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a4e60.  v0:= new `com.github.mikephil.charting.utils.MPPointF`;
  #L3a4e64.  v1:= 0I;
  #L3a4e66.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @kind direct;
  #L3a4e6c.  v1:= 32I;
  #L3a4e70.  call temp:= `create`(v1, v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L3a4e76.  v0:= temp @kind object;
  #L3a4e78.  `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L3a4e7c.  v1:= 0.5F;
  #L3a4e80.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L3a4e86.  v0:= new `com.github.mikephil.charting.utils.MPPointF$1`;
  #L3a4e8a.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/MPPointF$1;.<init>:()V` @kind direct;
  #L3a4e90.  `@@com.github.mikephil.charting.utils.MPPointF.CREATOR` @type ^`android.os.Parcelable$Creator` := v0 @kind object;
  #L3a4e94.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.MPPointF` v0 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a4ea8.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L3a4eae.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.MPPointF` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a4ec0.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L3a4ec6.  v0.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v1;
  #L3a4eca.  v0.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v2;
  #L3a4ece.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.MPPointF` `getInstance`() @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getInstance:()Lcom/github/mikephil/charting/utils/MPPointF;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a4d8c.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4d90.  call temp:= `get`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L3a4d96.  v0:= temp @kind object;
  #L3a4d98.  v0:= (`com.github.mikephil.charting.utils.MPPointF`) v0 @kind object;
  #L3a4d9c.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointF` `getInstance`(`float` v1 , `float` v2 ) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getInstance:(FF)Lcom/github/mikephil/charting/utils/MPPointF;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a4de4.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4de8.  call temp:= `get`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L3a4dee.  v0:= temp @kind object;
  #L3a4df0.  v0:= (`com.github.mikephil.charting.utils.MPPointF`) v0 @kind object;
  #L3a4df4.  v0.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v1;
  #L3a4df8.  v0.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v2;
  #L3a4dfc.  return v0 @kind object;
}
procedure `com.github.mikephil.charting.utils.MPPointF` `getInstance`(`com.github.mikephil.charting.utils.MPPointF` v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getInstance:(Lcom/github/mikephil/charting/utils/MPPointF;)Lcom/github/mikephil/charting/utils/MPPointF;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L3a4db0.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4db4.  call temp:= `get`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L3a4dba.  v0:= temp @kind object;
  #L3a4dbc.  v0:= (`com.github.mikephil.charting.utils.MPPointF`) v0 @kind object;
  #L3a4dc0.  v1:= v2.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float`;
  #L3a4dc4.  v0.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v1;
  #L3a4dc8.  v2:= v2.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float`;
  #L3a4dcc.  v0.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v2;
  #L3a4dd0.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.recycleInstance:(Lcom/github/mikephil/charting/utils/MPPointF;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a4f0c.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4f10.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L3a4f16.  return @kind void;
}
procedure `void` `recycleInstances`(`java.util.List` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.recycleInstances:(Ljava/util/List;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a4f28.  v0:= `@@com.github.mikephil.charting.utils.MPPointF.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4f2c.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Ljava/util/List;)V` @kind virtual;
  #L3a4f32.  return @kind void;
}
procedure `float` `getX`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getX:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4e30.  v0:= v1.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float`;
  #L3a4e34.  return v0;
}
procedure `float` `getY`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.getY:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4e48.  v0:= v1.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float`;
  #L3a4e4c.  return v0;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.utils.MPPointF` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3a4e10.  v0:= new `com.github.mikephil.charting.utils.MPPointF`;
  #L3a4e14.  v1:= 0I;
  #L3a4e16.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.<init>:(FF)V` @kind direct;
  #L3a4e1c.  return v0 @kind object;
}
procedure `void` `my_readFromParcel`(`com.github.mikephil.charting.utils.MPPointF` v1 @kind this, `android.os.Parcel` v2 @kind object) @signature `Lcom/github/mikephil/charting/utils/MPPointF;.my_readFromParcel:(Landroid/os/Parcel;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L3a4ee0.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3a4ee6.  v0:= temp;
  #L3a4ee8.  v1.`com.github.mikephil.charting.utils.MPPointF.x` @type ^`float` := v0;
  #L3a4eec.  call temp:= `readFloat`(v2) @signature `Landroid/os/Parcel;.readFloat:()F` @kind virtual;
  #L3a4ef2.  v2:= temp;
  #L3a4ef4.  v1.`com.github.mikephil.charting.utils.MPPointF.y` @type ^`float` := v2;
  #L3a4ef8.  return @kind void;
}
