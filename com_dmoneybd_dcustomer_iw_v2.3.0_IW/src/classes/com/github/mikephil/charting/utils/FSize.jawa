record `com.github.mikephil.charting.utils.FSize` @kind class @AccessFlag PUBLIC_FINAL extends `com.github.mikephil.charting.utils.ObjectPool$Poolable` @kind class {
  `float` `com.github.mikephil.charting.utils.FSize.height` @AccessFlag PUBLIC;
  `float` `com.github.mikephil.charting.utils.FSize.width` @AccessFlag PUBLIC;
}
global `com.github.mikephil.charting.utils.ObjectPool` `@@com.github.mikephil.charting.utils.FSize.pool` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/github/mikephil/charting/utils/FSize;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L3a4650.  v0:= new `com.github.mikephil.charting.utils.FSize`;
  #L3a4654.  v1:= 0I;
  #L3a4656.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @kind direct;
  #L3a465c.  v1:= 256I;
  #L3a4660.  call temp:= `create`(v1, v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.create:(ILcom/github/mikephil/charting/utils/ObjectPool$Poolable;)Lcom/github/mikephil/charting/utils/ObjectPool;` @kind static;
  #L3a4666.  v0:= temp @kind object;
  #L3a4668.  `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` := v0 @kind object;
  #L3a466c.  v1:= 0.5F;
  #L3a4670.  call `setReplenishPercentage`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.setReplenishPercentage:(F)V` @kind virtual;
  #L3a4676.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.FSize` v0 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a4688.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L3a468e.  return @kind void;
}
procedure `void` `<init>`(`com.github.mikephil.charting.utils.FSize` v0 @kind this, `float` v1 , `float` v2 ) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L3a46a0.  call `<init>`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;.<init>:()V` @kind direct;
  #L3a46a6.  v0.`com.github.mikephil.charting.utils.FSize.width` @type ^`float` := v1;
  #L3a46aa.  v0.`com.github.mikephil.charting.utils.FSize.height` @type ^`float` := v2;
  #L3a46ae.  return @kind void;
}
procedure `com.github.mikephil.charting.utils.FSize` `getInstance`(`float` v1 , `float` v2 ) @signature `Lcom/github/mikephil/charting/utils/FSize;.getInstance:(FF)Lcom/github/mikephil/charting/utils/FSize;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a4594.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a4598.  call temp:= `get`(v0) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.get:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @kind virtual;
  #L3a459e.  v0:= temp @kind object;
  #L3a45a0.  v0:= (`com.github.mikephil.charting.utils.FSize`) v0 @kind object;
  #L3a45a4.  v0.`com.github.mikephil.charting.utils.FSize.width` @type ^`float` := v1;
  #L3a45a8.  v0.`com.github.mikephil.charting.utils.FSize.height` @type ^`float` := v2;
  #L3a45ac.  return v0 @kind object;
}
procedure `void` `recycleInstance`(`com.github.mikephil.charting.utils.FSize` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/FSize;.recycleInstance:(Lcom/github/mikephil/charting/utils/FSize;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a46c0.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a46c4.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;)V` @kind virtual;
  #L3a46ca.  return @kind void;
}
procedure `void` `recycleInstances`(`java.util.List` v1 @kind object) @signature `Lcom/github/mikephil/charting/utils/FSize;.recycleInstances:(Ljava/util/List;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L3a46dc.  v0:= `@@com.github.mikephil.charting.utils.FSize.pool` @type ^`com.github.mikephil.charting.utils.ObjectPool` @kind object;
  #L3a46e0.  call `recycle`(v0, v1) @signature `Lcom/github/mikephil/charting/utils/ObjectPool;.recycle:(Ljava/util/List;)V` @kind virtual;
  #L3a46e6.  return @kind void;
}
procedure `boolean` `equals`(`com.github.mikephil.charting.utils.FSize` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/github/mikephil/charting/utils/FSize;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L3a4544.  v0:= 0I;
  #L3a4546.  if v5 != 0 then goto L3a454c;
  #L3a454a.  return v0;
  #L3a454c.  v1:= 1I;
  #L3a454e.  if v4 != v5 then goto L3a4554;
  #L3a4552.  return v1;
  #L3a4554.  v2:= instanceof @variable v5 @type ^`com.github.mikephil.charting.utils.FSize` @kind boolean;
  #L3a4558.  if v2 == 0 then goto L3a4582;
  #L3a455c.  v5:= (`com.github.mikephil.charting.utils.FSize`) v5 @kind object;
  #L3a4560.  v2:= v4.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L3a4564.  v3:= v5.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L3a4568.  v2:= fcmpl(v2, v3);
  #L3a456c.  if v2 != 0 then goto L3a4582;
  #L3a4570.  v2:= v4.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L3a4574.  v5:= v5.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L3a4578.  v5:= fcmpl(v2, v5);
  #L3a457c.  if v5 != 0 then goto L3a4582;
  #L3a4580.  v0:= 1I;
  #L3a4582.  return v0;
}
procedure `int` `hashCode`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a45e0.  v0:= v2.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L3a45e4.  call temp:= `floatToIntBits`(v0) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3a45ea.  v0:= temp;
  #L3a45ec.  v1:= v2.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L3a45f0.  call temp:= `floatToIntBits`(v1) @signature `Ljava/lang/Float;.floatToIntBits:(F)I` @kind static;
  #L3a45f6.  v1:= temp;
  #L3a45f8.  v0:= v0 ^~ v1 @kind int;
  #L3a45fa.  return v0;
}
procedure `com.github.mikephil.charting.utils.ObjectPool$Poolable` `instantiate`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.instantiate:()Lcom/github/mikephil/charting/utils/ObjectPool$Poolable;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L3a45c0.  v0:= new `com.github.mikephil.charting.utils.FSize`;
  #L3a45c4.  v1:= 0I;
  #L3a45c6.  call `<init>`(v0, v1, v1) @signature `Lcom/github/mikephil/charting/utils/FSize;.<init>:(FF)V` @kind direct;
  #L3a45cc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.github.mikephil.charting.utils.FSize` v2 @kind this) @signature `Lcom/github/mikephil/charting/utils/FSize;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L3a460c.  v0:= new `java.lang.StringBuilder`;
  #L3a4610.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L3a4616.  v1:= v2.`com.github.mikephil.charting.utils.FSize.width` @type ^`float`;
  #L3a461a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4620.  v1:= "x" @kind object;
  #L3a4624.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a462a.  v1:= v2.`com.github.mikephil.charting.utils.FSize.height` @type ^`float`;
  #L3a462e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(F)Ljava/lang/StringBuilder;` @kind virtual;
  #L3a4634.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L3a463a.  v0:= temp @kind object;
  #L3a463c.  return v0 @kind object;
}
