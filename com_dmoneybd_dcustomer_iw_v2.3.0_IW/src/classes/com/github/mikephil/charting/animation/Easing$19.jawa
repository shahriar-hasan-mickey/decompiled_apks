record `com.github.mikephil.charting.animation.Easing$19` @kind class @AccessFlag FINAL extends `com.github.mikephil.charting.animation.Easing$EasingFunction` @kind interface {
}
procedure `void` `<init>`(`com.github.mikephil.charting.animation.Easing$19` v0 @kind this) @signature `Lcom/github/mikephil/charting/animation/Easing$19;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L383c40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L383c46.  return @kind void;
}
procedure `float` `getInterpolation`(`com.github.mikephil.charting.animation.Easing$19` v5 @kind this, `float` v6 ) @signature `Lcom/github/mikephil/charting/animation/Easing$19;.getInterpolation:(F)F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L383bd8.  v0:= 2.0F;
  #L383bdc.  v6:= v6 * v0 @kind float;
  #L383be0.  v1:= 1.0F;
  #L383be4.  v2:= fcmpg(v6, v1);
  #L383be8.  if v2 >= 0 then goto L383c0c;
  #L383bec.  v0:= -0.5F;
  #L383bf0.  v6:= v6 * v6 @kind float;
  #L383bf4.  v6:= v1 - v6 @kind float;
  #L383bf8.  v2:= (`double`) v6 @kind f2d;
  #L383bfa.  call temp:= `sqrt`(v2) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L383c00.  v2:= temp @kind wide;
  #L383c02.  v6:= (`float`) v2 @kind d2f;
  #L383c04.  v6:= v6 - v1 @kind float;
  #L383c06.  v6:= v6 * v0 @kind float;
  #L383c0a.  return v6;
  #L383c0c.  v2:= 0.5F;
  #L383c10.  v6:= v6 - v0 @kind float;
  #L383c12.  v6:= v6 * v6 @kind float;
  #L383c16.  v6:= v1 - v6 @kind float;
  #L383c1a.  v3:= (`double`) v6 @kind f2d;
  #L383c1c.  call temp:= `sqrt`(v3) @signature `Ljava/lang/Math;.sqrt:(D)D` @kind static;
  #L383c22.  v3:= temp @kind wide;
  #L383c24.  v6:= (`float`) v3 @kind d2f;
  #L383c26.  v6:= v6 + v1 @kind float;
  #L383c28.  v6:= v6 * v2 @kind float;
  #L383c2c.  return v6;
}
