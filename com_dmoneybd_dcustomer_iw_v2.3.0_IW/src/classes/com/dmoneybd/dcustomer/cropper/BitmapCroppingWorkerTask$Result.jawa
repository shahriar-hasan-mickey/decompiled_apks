record `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result` @kind class @AccessFlag FINAL {
  `java.lang.Exception` `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.a` @AccessFlag FINAL;
  `boolean` `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.b` @AccessFlag FINAL;
  `android.graphics.Bitmap` `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.bitmap` @AccessFlag PUBLIC_FINAL;
  `int` `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.c` @AccessFlag FINAL;
  `android.net.Uri` `com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.uri` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result` v0 @kind this, `android.graphics.Bitmap` v1 @kind object, `int` v2 ) @signature `Lcom/dmoneybd/dcustomer/cropper/BitmapCroppingWorkerTask$Result;.<init>:(Landroid/graphics/Bitmap;I)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2dd4c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dd4ca.  v0.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.bitmap` @type ^`android.graphics.Bitmap` := v1 @kind object;
  #L2dd4ce.  v1:= 0I;
  #L2dd4d0.  v0.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.uri` @type ^`android.net.Uri` := v1 @kind object;
  #L2dd4d4.  v0.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.a` @type ^`java.lang.Exception` := v1 @kind object;
  #L2dd4d8.  v1:= 0I;
  #L2dd4da.  v0.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.b` @type ^`boolean` := v1 @kind boolean;
  #L2dd4de.  v0.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.c` @type ^`int` := v2;
  #L2dd4e2.  return @kind void;
}
procedure `void` `<init>`(`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result` v1 @kind this, `android.net.Uri` v2 @kind object, `int` v3 ) @signature `Lcom/dmoneybd/dcustomer/cropper/BitmapCroppingWorkerTask$Result;.<init>:(Landroid/net/Uri;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2dd4f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dd4fa.  v0:= 0I;
  #L2dd4fc.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.bitmap` @type ^`android.graphics.Bitmap` := v0 @kind object;
  #L2dd500.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.uri` @type ^`android.net.Uri` := v2 @kind object;
  #L2dd504.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.a` @type ^`java.lang.Exception` := v0 @kind object;
  #L2dd508.  v2:= 1I;
  #L2dd50a.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.b` @type ^`boolean` := v2 @kind boolean;
  #L2dd50e.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.c` @type ^`int` := v3;
  #L2dd512.  return @kind void;
}
procedure `void` `<init>`(`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result` v1 @kind this, `java.lang.Exception` v2 @kind object, `boolean` v3 ) @signature `Lcom/dmoneybd/dcustomer/cropper/BitmapCroppingWorkerTask$Result;.<init>:(Ljava/lang/Exception;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2dd524.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2dd52a.  v0:= 0I;
  #L2dd52c.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.bitmap` @type ^`android.graphics.Bitmap` := v0 @kind object;
  #L2dd530.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.uri` @type ^`android.net.Uri` := v0 @kind object;
  #L2dd534.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.a` @type ^`java.lang.Exception` := v2 @kind object;
  #L2dd538.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.b` @type ^`boolean` := v3 @kind boolean;
  #L2dd53c.  v2:= 1I;
  #L2dd53e.  v1.`com.dmoneybd.dcustomer.cropper.BitmapCroppingWorkerTask$Result.c` @type ^`int` := v2;
  #L2dd542.  return @kind void;
}
