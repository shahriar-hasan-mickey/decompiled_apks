record `com.dmoney.security.model.utils.ByteArrayUtils` @kind class @AccessFlag PUBLIC {
}
global `char`[] `@@com.dmoney.security.model.utils.ByteArrayUtils.hexCode` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c8be8.  v0:= "0123456789ABCDEF" @kind object;
  #L2c8bec.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L2c8bf2.  v0:= temp @kind object;
  #L2c8bf4.  `@@com.dmoney.security.model.utils.ByteArrayUtils.hexCode` @type ^`char`[] := v0 @kind object;
  #L2c8bf8.  return @kind void;
}
procedure `void` `<init>`(`com.dmoney.security.model.utils.ByteArrayUtils` v0 @kind this) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c8c0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c8c12.  return @kind void;
}
procedure `byte`[] `ToByteArray`(`java.lang.String` v1 @kind object, `com.dmoney.security.model.servicemodels.enums.ByteArrayStringFormat` v2 @kind object) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.ToByteArray:(Ljava/lang/String;Lcom/dmoney/security/model/servicemodels/enums/ByteArrayStringFormat;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c89b4.  v0:= `@@com.dmoney.security.model.utils.ByteArrayUtils$1.a` @type ^`int`[] @kind object;
  #L2c89b8.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2c89be.  v2:= temp;
  #L2c89c0.  v2:= v0[v2];
  #L2c89c4.  v0:= 1I;
  #L2c89c6.  if v2 == v0 then goto L2c89ee;
  #L2c89ca.  v0:= 2I;
  #L2c89cc.  if v2 == v0 then goto L2c89e4;
  #L2c89d0.  v0:= 3I;
  #L2c89d2.  if v2 == v0 then goto L2c89da;
  #L2c89d6.  v1:= 0I;
  #L2c89d8.  return v1 @kind object;
  #L2c89da.  call temp:= `parseHexBinary`(v1) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.parseHexBinary:(Ljava/lang/String;)[B` @kind static;
  #L2c89e0.  v1:= temp @kind object;
  #L2c89e2.  return v1 @kind object;
  #L2c89e4.  call temp:= `decode`(v1, v0) @signature `Landroid/util/Base64;.decode:(Ljava/lang/String;I)[B` @kind static;
  #L2c89ea.  v1:= temp @kind object;
  #L2c89ec.  return v1 @kind object;
  #L2c89ee.  call temp:= `getBytes`(v1) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L2c89f4.  v1:= temp @kind object;
  #L2c89f6.  return v1 @kind object;
}
procedure `java.lang.String` `ToFormattedString`(`byte`[] v1 @kind object, `com.dmoney.security.model.servicemodels.enums.ByteArrayStringFormat` v2 @kind object) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.ToFormattedString:([BLcom/dmoney/security/model/servicemodels/enums/ByteArrayStringFormat;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2c8b30.  v0:= `@@com.dmoney.security.model.utils.ByteArrayUtils$1.a` @type ^`int`[] @kind object;
  #L2c8b34.  call temp:= `ordinal`(v2) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L2c8b3a.  v2:= temp;
  #L2c8b3c.  v2:= v0[v2];
  #L2c8b40.  v0:= 1I;
  #L2c8b42.  if v2 == v0 then goto L2c8b6a;
  #L2c8b46.  v0:= 2I;
  #L2c8b48.  if v2 == v0 then goto L2c8b60;
  #L2c8b4c.  v0:= 3I;
  #L2c8b4e.  if v2 == v0 then goto L2c8b56;
  #L2c8b52.  v1:= 0I;
  #L2c8b54.  return v1 @kind object;
  #L2c8b56.  call temp:= `printHexBinary`(v1) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.printHexBinary:([B)Ljava/lang/String;` @kind static;
  #L2c8b5c.  v1:= temp @kind object;
  #L2c8b5e.  return v1 @kind object;
  #L2c8b60.  call temp:= `encodeToString`(v1, v0) @signature `Landroid/util/Base64;.encodeToString:([BI)Ljava/lang/String;` @kind static;
  #L2c8b66.  v1:= temp @kind object;
  #L2c8b68.  return v1 @kind object;
  #L2c8b6a.  v2:= new `java.lang.String`;
  #L2c8b6e.  call `<init>`(v2, v1) @signature `Ljava/lang/String;.<init>:([B)V` @kind direct;
  #L2c8b74.  return v2 @kind object;
}
procedure `int` `hexToBin`(`char` v2 ) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.hexToBin:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L2c8adc.  v0:= 48I;
  #L2c8ae0.  if v0 > v2 then goto L2c8af0;
  #L2c8ae4.  v1:= 57I;
  #L2c8ae8.  if v2 > v1 then goto L2c8af0;
  #L2c8aec.  v2:= v2 - v0 @kind int;
  #L2c8aee.  return v2;
  #L2c8af0.  v0:= 65I;
  #L2c8af4.  if v0 > v2 then goto L2c8b08;
  #L2c8af8.  v1:= 70I;
  #L2c8afc.  if v2 > v1 then goto L2c8b08;
  #L2c8b00.  v2:= v2 - v0 @kind int;
  #L2c8b02.  v2:= v2 + 10;
  #L2c8b06.  return v2;
  #L2c8b08.  v0:= 97I;
  #L2c8b0c.  if v0 > v2 then goto L2c8b1a;
  #L2c8b10.  v1:= 102I;
  #L2c8b14.  if v2 > v1 then goto L2c8b1a;
  #L2c8b18.  goto L2c8b00;
  #L2c8b1a.  v2:= -1I;
  #L2c8b1c.  return v2;
}
procedure `byte`[] `parseHexBinary`(`java.lang.String` v6 @kind object) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.parseHexBinary:(Ljava/lang/String;)[B` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c8a08.  call temp:= `length`(v6) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2c8a0e.  v0:= temp;
  #L2c8a10.  v1:= v0 %% 2;
  #L2c8a14.  if v1 != 0 then goto L2c8a9a;
  #L2c8a18.  v1:= v0 / 2;
  #L2c8a1c.  v1:= new `byte`[v1];
  #L2c8a20.  v2:= 0I;
  #L2c8a22.  if v2 >= v0 then goto L2c8a98;
  #L2c8a26.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2c8a2c.  v3:= temp;
  #L2c8a2e.  call temp:= `hexToBin`(v3) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.hexToBin:(C)I` @kind static;
  #L2c8a34.  v3:= temp;
  #L2c8a36.  v4:= v2 + 1;
  #L2c8a3a.  call temp:= `charAt`(v6, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2c8a40.  v4:= temp;
  #L2c8a42.  call temp:= `hexToBin`(v4) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.hexToBin:(C)I` @kind static;
  #L2c8a48.  v4:= temp;
  #L2c8a4a.  v5:= -1I;
  #L2c8a4c.  if v3 == v5 then goto L2c8a6a;
  #L2c8a50.  if v4 == v5 then goto L2c8a6a;
  #L2c8a54.  v5:= v2 / 2;
  #L2c8a58.  v3:= v3 * 16;
  #L2c8a5c.  v3:= v3 + v4 @kind int;
  #L2c8a5e.  v3:= (`byte`) v3 @kind i2b;
  #L2c8a60.  v1[v5]:= v3 @kind byte;
  #L2c8a64.  v2:= v2 + 2;
  #L2c8a68.  goto L2c8a22;
  #L2c8a6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c8a6e.  v1:= new `java.lang.StringBuilder`;
  #L2c8a72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c8a78.  v2:= "contains illegal character for hexBinary: " @kind object;
  #L2c8a7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8a82.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8a88.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c8a8e.  v6:= temp @kind object;
  #L2c8a90.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c8a96.  throw v0;
  #L2c8a98.  return v1 @kind object;
  #L2c8a9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2c8a9e.  v1:= new `java.lang.StringBuilder`;
  #L2c8aa2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c8aa8.  v2:= "hexBinary needs to be even-length: " @kind object;
  #L2c8aac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8ab2.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8ab8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c8abe.  v6:= temp @kind object;
  #L2c8ac0.  call `<init>`(v0, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2c8ac6.  goto L2c8aca;
  #L2c8ac8.  throw v0;
  #L2c8aca.  goto L2c8ac8;
}
procedure `java.lang.String` `printHexBinary`(`byte`[] v6 @kind object) @signature `Lcom/dmoney/security/model/utils/ByteArrayUtils;.printHexBinary:([B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2c8b88.  v0:= new `java.lang.StringBuilder`;
  #L2c8b8c.  v1:= length @variable v6;
  #L2c8b8e.  v1:= v1 * 2;
  #L2c8b92.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L2c8b98.  v1:= length @variable v6;
  #L2c8b9a.  v2:= 0I;
  #L2c8b9c.  if v2 >= v1 then goto L2c8bce;
  #L2c8ba0.  v3:= v6[v2] @kind byte;
  #L2c8ba4.  v4:= `@@com.dmoney.security.model.utils.ByteArrayUtils.hexCode` @type ^`char`[] @kind object;
  #L2c8ba8.  v5:= v3 ^> 4;
  #L2c8bac.  v5:= v5 ^& 15;
  #L2c8bb0.  v5:= v4[v5] @kind char;
  #L2c8bb4.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8bba.  v3:= v3 ^& 15;
  #L2c8bbe.  v3:= v4[v3] @kind char;
  #L2c8bc2.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c8bc8.  v2:= v2 + 1;
  #L2c8bcc.  goto L2c8b9c;
  #L2c8bce.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c8bd4.  v6:= temp @kind object;
  #L2c8bd6.  return v6 @kind object;
}
