record `com.dmoney.security.operation.softHsm.BCRndGenerator` @kind class @AccessFlag PUBLIC extends `com.dmoney.security.operation.interfaces.IRandGenerator` @kind interface {
  `org.spongycastle.crypto.prng.VMPCRandomGenerator` `com.dmoney.security.operation.softHsm.BCRndGenerator.localRandGenerator` @AccessFlag PRIVATE;
}
global `com.dmoney.security.operation.softHsm.BCRndGenerator` `@@com.dmoney.security.operation.softHsm.BCRndGenerator._Instance` @AccessFlag PRIVATE_STATIC;
global `java.lang.Object` `@@com.dmoney.security.operation.softHsm.BCRndGenerator._lockObject` @AccessFlag PRIVATE_STATIC;
global `java.util.Random` `@@com.dmoney.security.operation.softHsm.BCRndGenerator.random` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2c968c.  v0:= new `java.lang.Object`;
  #L2c9690.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c9696.  `@@com.dmoney.security.operation.softHsm.BCRndGenerator._lockObject` @type ^`java.lang.Object` := v0 @kind object;
  #L2c969a.  return @kind void;
}
procedure `void` `<init>`(`com.dmoney.security.operation.softHsm.BCRndGenerator` v3 @kind this) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L2c96ac.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c96b2.  v0:= new `org.spongycastle.crypto.prng.VMPCRandomGenerator`;
  #L2c96b6.  call `<init>`(v0) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.<init>:()V` @kind direct;
  #L2c96bc.  v3.`com.dmoney.security.operation.softHsm.BCRndGenerator.localRandGenerator` @type ^`org.spongycastle.crypto.prng.VMPCRandomGenerator` := v0 @kind object;
  #L2c96c0.  v1:= new `java.util.Date`;
  #L2c96c4.  call `<init>`(v1) @signature `Ljava/util/Date;.<init>:()V` @kind direct;
  #L2c96ca.  call temp:= `getTime`(v1) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2c96d0.  v1:= temp @kind wide;
  #L2c96d2.  call `addSeedMaterial`(v0, v1) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.addSeedMaterial:(J)V` @kind virtual;
  #L2c96d8.  v0:= new `java.util.Random`;
  #L2c96dc.  call `<init>`(v0) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L2c96e2.  `@@com.dmoney.security.operation.softHsm.BCRndGenerator.random` @type ^`java.util.Random` := v0 @kind object;
  #L2c96e6.  return @kind void;
}
procedure `com.dmoney.security.operation.softHsm.BCRndGenerator` `GetInstance`() @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.GetInstance:()Lcom/dmoney/security/operation/softHsm/BCRndGenerator;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2c95c0.  v0:= `@@com.dmoney.security.operation.softHsm.BCRndGenerator._Instance` @type ^`com.dmoney.security.operation.softHsm.BCRndGenerator` @kind object;
  #L2c95c4.  if v0 != 0 then goto L2c95ee;
  #L2c95c8.  v0:= `@@com.dmoney.security.operation.softHsm.BCRndGenerator._lockObject` @type ^`java.lang.Object` @kind object;
  #L2c95cc.  @monitorenter v0
  #L2c95ce.  v1:= `@@com.dmoney.security.operation.softHsm.BCRndGenerator._Instance` @type ^`com.dmoney.security.operation.softHsm.BCRndGenerator` @kind object;
  #L2c95d2.  if v1 != 0 then goto L2c95e4;
  #L2c95d6.  v1:= new `com.dmoney.security.operation.softHsm.BCRndGenerator`;
  #L2c95da.  call `<init>`(v1) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.<init>:()V` @kind direct;
  #L2c95e0.  `@@com.dmoney.security.operation.softHsm.BCRndGenerator._Instance` @type ^`com.dmoney.security.operation.softHsm.BCRndGenerator` := v1 @kind object;
  #L2c95e4.  @monitorexit v0
  #L2c95e6.  goto L2c95ee;
  #L2c95e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2c95ea.  @monitorexit v0
  #L2c95ec.  throw v1;
  #L2c95ee.  v0:= `@@com.dmoney.security.operation.softHsm.BCRndGenerator._Instance` @type ^`com.dmoney.security.operation.softHsm.BCRndGenerator` @kind object;
  #L2c95f2.  return v0 @kind object;
  catch `java.lang.Throwable` @[L2c95ce..L2c95ec] goto L2c95e8;
}
procedure `void` `getTimeStampBytes`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.getTimeStampBytes:([BII)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2c96f8.  v0:= 8I;
  #L2c96fc.  call temp:= `allocate`(v0) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L2c9702.  v0:= temp @kind object;
  #L2c9704.  v1:= new `java.util.Date`;
  #L2c9708.  call `<init>`(v1) @signature `Ljava/util/Date;.<init>:()V` @kind direct;
  #L2c970e.  call temp:= `getTime`(v1) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L2c9714.  v1:= temp @kind wide;
  #L2c9716.  call temp:= `putLong`(v0, v1) @signature `Ljava/nio/ByteBuffer;.putLong:(J)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2c971c.  v1:= temp @kind object;
  #L2c971e.  v2:= v5 - 8;
  #L2c9722.  call temp:= `position`(v1, v2) @signature `Ljava/nio/ByteBuffer;.position:(I)Ljava/nio/Buffer;` @kind virtual;
  #L2c9728.  call temp:= `get`(v0, v3, v4, v5) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2c972e.  return @kind void;
}
procedure `java.lang.String` `GeneratePIN`(`com.dmoney.security.operation.softHsm.BCRndGenerator` v7 @kind this, `int` v8 ) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.GeneratePIN:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2c9610.  v0:= new `java.lang.StringBuilder`;
  #L2c9614.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2c961a.  v1:= "%0" @kind object;
  #L2c961e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c9624.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c962a.  v1:= "d" @kind object;
  #L2c962e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2c9634.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2c963a.  v0:= temp @kind object;
  #L2c963c.  v1:= 1I;
  #L2c963e.  v1:= new `java.lang.Object`[v1];
  #L2c9642.  v2:= new `java.util.Random`;
  #L2c9646.  call `<init>`(v2) @signature `Ljava/util/Random;.<init>:()V` @kind direct;
  #L2c964c.  v3:= (`double`) v8 @kind i2d;
  #L2c964e.  v5:= 10.0D;
  #L2c9652.  call temp:= `pow`(v5, v3) @signature `Ljava/lang/Math;.pow:(DD)D` @kind static;
  #L2c9658.  v3:= temp @kind wide;
  #L2c965a.  v8:= (`int`) v3 @kind d2i;
  #L2c965c.  call temp:= `nextInt`(v2, v8) @signature `Ljava/util/Random;.nextInt:(I)I` @kind virtual;
  #L2c9662.  v8:= temp;
  #L2c9664.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2c966a.  v8:= temp @kind object;
  #L2c966c.  v2:= 0I;
  #L2c966e.  v1[v2]:= v8 @kind object;
  #L2c9672.  call temp:= `format`(v0, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2c9678.  v8:= temp @kind object;
  #L2c967a.  return v8 @kind object;
}
procedure `byte`[] `GenerateRand`(`com.dmoney.security.operation.softHsm.BCRndGenerator` v1 @kind this, `int` v2 ) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.GenerateRand:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2c9558.  v2:= new `byte`[v2];
  #L2c955c.  v0:= v1.`com.dmoney.security.operation.softHsm.BCRndGenerator.localRandGenerator` @type ^`org.spongycastle.crypto.prng.VMPCRandomGenerator` @kind object;
  #L2c9560.  call `nextBytes`(v0, v2) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.nextBytes:([B)V` @kind virtual;
  #L2c9566.  return v2 @kind object;
}
procedure `byte`[] `GenerateToken`(`com.dmoney.security.operation.softHsm.BCRndGenerator` v3 @kind this, `int` v4 ) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.GenerateToken:(I)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2c9578.  if v4 >= 0 then goto L2c9584;
  #L2c957c.  call temp:= `abs`(v4) @signature `Ljava/lang/Math;.abs:(I)I` @kind static;
  #L2c9582.  v4:= temp;
  #L2c9584.  v0:= 16I;
  #L2c9588.  if v4 >= v0 then goto L2c9592;
  #L2c958c.  v0:= v4 / 2;
  #L2c9590.  goto L2c9596;
  #L2c9592.  v0:= 8I;
  #L2c9596.  v1:= new `byte`[v4];
  #L2c959a.  v2:= 0I;
  #L2c959c.  call `getTimeStampBytes`(v1, v2, v0) @signature `Lcom/dmoney/security/operation/softHsm/BCRndGenerator;.getTimeStampBytes:([BII)V` @kind static;
  #L2c95a2.  v2:= v3.`com.dmoney.security.operation.softHsm.BCRndGenerator.localRandGenerator` @type ^`org.spongycastle.crypto.prng.VMPCRandomGenerator` @kind object;
  #L2c95a6.  v4:= v4 - v0 @kind int;
  #L2c95a8.  call `nextBytes`(v2, v1, v0, v4) @signature `Lorg/spongycastle/crypto/prng/VMPCRandomGenerator;.nextBytes:([BII)V` @kind virtual;
  #L2c95ae.  return v1 @kind object;
}
