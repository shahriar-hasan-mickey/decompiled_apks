record `okhttp3.Cache$1` @kind class @AccessFlag  extends `okhttp3.internal.cache.InternalCache` @kind interface {
  `okhttp3.Cache` `okhttp3.Cache$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.Cache$1` v0 @kind this, `okhttp3.Cache` v1 @kind object) @signature `Lokhttp3/Cache$1;.<init>:(Lokhttp3/Cache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2cf70c.  v0.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` := v1 @kind object;
  #L2cf710.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cf716.  return @kind void;
}
procedure `okhttp3.Response` `get`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/Cache$1;.get:(Lokhttp3/Request;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf6cc.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf6d0.  call temp:= `a`(v0, v2) @signature `Lokhttp3/Cache;.a:(Lokhttp3/Request;)Lokhttp3/Response;` @kind virtual;
  #L2cf6d6.  v2:= temp @kind object;
  #L2cf6d8.  return v2 @kind object;
}
procedure `okhttp3.internal.cache.CacheRequest` `put`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Response` v2 @kind object) @signature `Lokhttp3/Cache$1;.put:(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf6ec.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf6f0.  call temp:= `b`(v0, v2) @signature `Lokhttp3/Cache;.b:(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest;` @kind virtual;
  #L2cf6f6.  v2:= temp @kind object;
  #L2cf6f8.  return v2 @kind object;
}
procedure `void` `remove`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Request` v2 @kind object) @signature `Lokhttp3/Cache$1;.remove:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf728.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf72c.  call `d`(v0, v2) @signature `Lokhttp3/Cache;.d:(Lokhttp3/Request;)V` @kind virtual;
  #L2cf732.  return @kind void;
}
procedure `void` `trackConditionalCacheHit`(`okhttp3.Cache$1` v1 @kind this) @signature `Lokhttp3/Cache$1;.trackConditionalCacheHit:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf744.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf748.  call `e`(v0) @signature `Lokhttp3/Cache;.e:()V` @kind virtual;
  #L2cf74e.  return @kind void;
}
procedure `void` `trackResponse`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.internal.cache.CacheStrategy` v2 @kind object) @signature `Lokhttp3/Cache$1;.trackResponse:(Lokhttp3/internal/cache/CacheStrategy;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf760.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf764.  call `f`(v0, v2) @signature `Lokhttp3/Cache;.f:(Lokhttp3/internal/cache/CacheStrategy;)V` @kind virtual;
  #L2cf76a.  return @kind void;
}
procedure `void` `update`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Response` v2 @kind object, `okhttp3.Response` v3 @kind object) @signature `Lokhttp3/Cache$1;.update:(Lokhttp3/Response;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2cf77c.  v0:= v1.`okhttp3.Cache$1.a` @type ^`okhttp3.Cache` @kind object;
  #L2cf780.  call `g`(v0, v2, v3) @signature `Lokhttp3/Cache;.g:(Lokhttp3/Response;Lokhttp3/Response;)V` @kind virtual;
  #L2cf786.  return @kind void;
}
