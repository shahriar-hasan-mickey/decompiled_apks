record `okhttp3.CipherSuite$1` @kind class @AccessFlag  extends `java.util.Comparator` @kind interface {
}
procedure `void` `<init>`(`okhttp3.CipherSuite$1` v0 @kind this) @signature `Lokhttp3/CipherSuite$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2cff0c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cff12.  return @kind void;
}
procedure `int` `compare`(`okhttp3.CipherSuite$1` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/CipherSuite$1;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L2cfe70.  v1:= (`java.lang.String`) v1 @kind object;
  #L2cfe74.  v2:= (`java.lang.String`) v2 @kind object;
  #L2cfe78.  call temp:= `compare`(v0, v1, v2) @signature `Lokhttp3/CipherSuite$1;.compare:(Ljava/lang/String;Ljava/lang/String;)I` @kind virtual;
  #L2cfe7e.  v1:= temp;
  #L2cfe80.  return v1;
}
procedure `int` `compare`(`okhttp3.CipherSuite$1` v6 @kind this, `java.lang.String` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lokhttp3/CipherSuite$1;.compare:(Ljava/lang/String;Ljava/lang/String;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2cfe94.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfe9a.  v0:= temp;
  #L2cfe9c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfea2.  v1:= temp;
  #L2cfea4.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2cfeaa.  v0:= temp;
  #L2cfeac.  v1:= 4I;
  #L2cfeae.  v2:= -1I;
  #L2cfeb0.  v3:= 1I;
  #L2cfeb2.  if v1 >= v0 then goto L2cfeda;
  #L2cfeb6.  call temp:= `charAt`(v7, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2cfebc.  v4:= temp;
  #L2cfebe.  call temp:= `charAt`(v8, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2cfec4.  v5:= temp;
  #L2cfec6.  if v4 == v5 then goto L2cfed4;
  #L2cfeca.  if v4 >= v5 then goto L2cfed0;
  #L2cfece.  goto L2cfed2;
  #L2cfed0.  v2:= 1I;
  #L2cfed2.  return v2;
  #L2cfed4.  v1:= v1 + 1;
  #L2cfed8.  goto L2cfeae;
  #L2cfeda.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfee0.  v7:= temp;
  #L2cfee2.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfee8.  v8:= temp;
  #L2cfeea.  if v7 == v8 then goto L2cfef8;
  #L2cfeee.  if v7 >= v8 then goto L2cfef4;
  #L2cfef2.  goto L2cfef6;
  #L2cfef4.  v2:= 1I;
  #L2cfef6.  return v2;
  #L2cfef8.  v7:= 0I;
  #L2cfefa.  return v7;
}
