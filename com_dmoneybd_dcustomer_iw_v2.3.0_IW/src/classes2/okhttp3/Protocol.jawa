record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.QUIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2d137c.  v0:= new `okhttp3.Protocol`;
  #L2d1380.  v1:= "HTTP_1_0" @kind object;
  #L2d1384.  v2:= 0I;
  #L2d1386.  v3:= "http/1.0" @kind object;
  #L2d138a.  call `<init>`(v0, v1, v2, v3) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d1390.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L2d1394.  v1:= new `okhttp3.Protocol`;
  #L2d1398.  v3:= "HTTP_1_1" @kind object;
  #L2d139c.  v4:= 1I;
  #L2d139e.  v5:= "http/1.1" @kind object;
  #L2d13a2.  call `<init>`(v1, v3, v4, v5) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d13a8.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L2d13ac.  v3:= new `okhttp3.Protocol`;
  #L2d13b0.  v5:= "SPDY_3" @kind object;
  #L2d13b4.  v6:= 2I;
  #L2d13b6.  v7:= "spdy/3.1" @kind object;
  #L2d13ba.  call `<init>`(v3, v5, v6, v7) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d13c0.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v3 @kind object;
  #L2d13c4.  v5:= new `okhttp3.Protocol`;
  #L2d13c8.  v7:= "HTTP_2" @kind object;
  #L2d13cc.  v8:= 3I;
  #L2d13ce.  v9:= "h2" @kind object;
  #L2d13d2.  call `<init>`(v5, v7, v8, v9) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d13d8.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v5 @kind object;
  #L2d13dc.  v7:= new `okhttp3.Protocol`;
  #L2d13e0.  v9:= "H2_PRIOR_KNOWLEDGE" @kind object;
  #L2d13e4.  v10:= 4I;
  #L2d13e6.  v11:= "h2_prior_knowledge" @kind object;
  #L2d13ea.  call `<init>`(v7, v9, v10, v11) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d13f0.  `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` := v7 @kind object;
  #L2d13f4.  v9:= new `okhttp3.Protocol`;
  #L2d13f8.  v11:= "QUIC" @kind object;
  #L2d13fc.  v12:= 5I;
  #L2d13fe.  v13:= "quic" @kind object;
  #L2d1402.  call `<init>`(v9, v11, v12, v13) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L2d1408.  `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` := v9 @kind object;
  #L2d140c.  v11:= 6I;
  #L2d140e.  v11:= new `okhttp3.Protocol`[v11];
  #L2d1412.  v11[v2]:= v0 @kind object;
  #L2d1416.  v11[v4]:= v1 @kind object;
  #L2d141a.  v11[v6]:= v3 @kind object;
  #L2d141e.  v11[v8]:= v5 @kind object;
  #L2d1422.  v11[v10]:= v7 @kind object;
  #L2d1426.  v11[v12]:= v9 @kind object;
  #L2d142a.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v11 @kind object;
  #L2d142e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2d1440.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2d1446.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L2d144a.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2d1270.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L2d1274.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d1278.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d127e.  v1:= temp;
  #L2d1280.  if v1 == 0 then goto L2d1286;
  #L2d1284.  return v0 @kind object;
  #L2d1286.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L2d128a.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d128e.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d1294.  v1:= temp;
  #L2d1296.  if v1 == 0 then goto L2d129c;
  #L2d129a.  return v0 @kind object;
  #L2d129c.  v0:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L2d12a0.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d12a4.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d12aa.  v1:= temp;
  #L2d12ac.  if v1 == 0 then goto L2d12b2;
  #L2d12b0.  return v0 @kind object;
  #L2d12b2.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L2d12b6.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d12ba.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d12c0.  v1:= temp;
  #L2d12c2.  if v1 == 0 then goto L2d12c8;
  #L2d12c6.  return v0 @kind object;
  #L2d12c8.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L2d12cc.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d12d0.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d12d6.  v1:= temp;
  #L2d12d8.  if v1 == 0 then goto L2d12de;
  #L2d12dc.  return v0 @kind object;
  #L2d12de.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L2d12e2.  v1:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d12e6.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d12ec.  v1:= temp;
  #L2d12ee.  if v1 == 0 then goto L2d12f4;
  #L2d12f2.  return v0 @kind object;
  #L2d12f4.  v0:= new `java.io.IOException`;
  #L2d12f8.  v1:= new `java.lang.StringBuilder`;
  #L2d12fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d1302.  v2:= "Unexpected protocol: " @kind object;
  #L2d1306.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d130c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1312.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d1318.  v3:= temp @kind object;
  #L2d131a.  call `<init>`(v0, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d1320.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d1334.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L2d1338.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L2d133e.  v1:= temp @kind object;
  #L2d1340.  v1:= (`okhttp3.Protocol`) v1 @kind object;
  #L2d1344.  return v1 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2d1358.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L2d135c.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L2d1362.  v0:= temp @kind object;
  #L2d1364.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L2d1368.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d1258.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L2d125c.  return v0 @kind object;
}
