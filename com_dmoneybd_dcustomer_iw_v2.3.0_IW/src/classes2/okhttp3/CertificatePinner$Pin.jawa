record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.a` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.b` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.c` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.d` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2cfd44.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cfd4a.  v2.`okhttp3.CertificatePinner$Pin.a` @type ^`java.lang.String` := v3 @kind object;
  #L2cfd4e.  v0:= "*." @kind object;
  #L2cfd52.  call temp:= `startsWith`(v3, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2cfd58.  v0:= temp;
  #L2cfd5a.  v1:= "http://" @kind object;
  #L2cfd5e.  if v0 == 0 then goto L2cfd7e;
  #L2cfd62.  v0:= new `java.lang.StringBuilder`;
  #L2cfd66.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cfd6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfd72.  v1:= 2I;
  #L2cfd74.  call temp:= `substring`(v3, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2cfd7a.  v3:= temp @kind object;
  #L2cfd7c.  goto L2cfd8e;
  #L2cfd7e.  v0:= new `java.lang.StringBuilder`;
  #L2cfd82.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cfd88.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfd8e.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfd94.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cfd9a.  v3:= temp @kind object;
  #L2cfd9c.  call temp:= `get`(v3) @signature `Lokhttp3/HttpUrl;.get:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L2cfda2.  v3:= temp @kind object;
  #L2cfda4.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2cfdaa.  v3:= temp @kind object;
  #L2cfdac.  v2.`okhttp3.CertificatePinner$Pin.b` @type ^`java.lang.String` := v3 @kind object;
  #L2cfdb0.  v3:= "sha1/" @kind object;
  #L2cfdb4.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2cfdba.  v0:= temp;
  #L2cfdbc.  if v0 == 0 then goto L2cfddc;
  #L2cfdc0.  v2.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` := v3 @kind object;
  #L2cfdc4.  v3:= 5I;
  #L2cfdc6.  call temp:= `substring`(v4, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2cfdcc.  v3:= temp @kind object;
  #L2cfdce.  call temp:= `decodeBase64`(v3) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2cfdd4.  v3:= temp @kind object;
  #L2cfdd6.  v2.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` := v3 @kind object;
  #L2cfdda.  goto L2cfdf4;
  #L2cfddc.  v3:= "sha256/" @kind object;
  #L2cfde0.  call temp:= `startsWith`(v4, v3) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2cfde6.  v0:= temp;
  #L2cfde8.  if v0 == 0 then goto L2cfe2c;
  #L2cfdec.  v2.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` := v3 @kind object;
  #L2cfdf0.  v3:= 7I;
  #L2cfdf2.  goto L2cfdc6;
  #L2cfdf4.  v3:= v2.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` @kind object;
  #L2cfdf8.  if v3 == 0 then goto L2cfdfe;
  #L2cfdfc.  return @kind void;
  #L2cfdfe.  v3:= new `java.lang.IllegalArgumentException`;
  #L2cfe02.  v0:= new `java.lang.StringBuilder`;
  #L2cfe06.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cfe0c.  v1:= "pins must be base64: " @kind object;
  #L2cfe10.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfe16.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfe1c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cfe22.  v4:= temp @kind object;
  #L2cfe24.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cfe2a.  throw v3;
  #L2cfe2c.  v3:= new `java.lang.IllegalArgumentException`;
  #L2cfe30.  v0:= new `java.lang.StringBuilder`;
  #L2cfe34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cfe3a.  v1:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L2cfe3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfe44.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfe4a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cfe50.  v4:= temp @kind object;
  #L2cfe52.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cfe58.  goto L2cfe5c;
  #L2cfe5a.  throw v3;
  #L2cfe5c.  goto L2cfe5a;
}
procedure `boolean` `a`(`okhttp3.CertificatePinner$Pin` v10 @kind this, `java.lang.String` v11 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2cfc38.  v0:= v10.`okhttp3.CertificatePinner$Pin.a` @type ^`java.lang.String` @kind object;
  #L2cfc3c.  v1:= "*." @kind object;
  #L2cfc40.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2cfc46.  v0:= temp;
  #L2cfc48.  if v0 == 0 then goto L2cfc9e;
  #L2cfc4c.  v0:= 46I;
  #L2cfc50.  call temp:= `indexOf`(v11, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L2cfc56.  v0:= temp;
  #L2cfc58.  call temp:= `length`(v11) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfc5e.  v1:= temp;
  #L2cfc60.  v1:= v1 - v0 @kind int;
  #L2cfc62.  v2:= 1I;
  #L2cfc64.  v1:= v1 - v2 @kind int;
  #L2cfc66.  v3:= v10.`okhttp3.CertificatePinner$Pin.b` @type ^`java.lang.String` @kind object;
  #L2cfc6a.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfc70.  v3:= temp;
  #L2cfc72.  if v1 != v3 then goto L2cfc9a;
  #L2cfc76.  v5:= 0I;
  #L2cfc78.  v6:= v0 + 1;
  #L2cfc7c.  v7:= v10.`okhttp3.CertificatePinner$Pin.b` @type ^`java.lang.String` @kind object;
  #L2cfc80.  v8:= 0I;
  #L2cfc82.  call temp:= `length`(v7) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2cfc88.  v9:= temp;
  #L2cfc8a.  v4:= v11 @kind object;
  #L2cfc8c.  call temp:= `regionMatches`(v4, v5, v6, v7, v8, v9) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L2cfc92.  v11:= temp;
  #L2cfc94.  if v11 == 0 then goto L2cfc9a;
  #L2cfc98.  goto L2cfc9c;
  #L2cfc9a.  v2:= 0I;
  #L2cfc9c.  return v2;
  #L2cfc9e.  v0:= v10.`okhttp3.CertificatePinner$Pin.b` @type ^`java.lang.String` @kind object;
  #L2cfca2.  call temp:= `equals`(v11, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cfca8.  v11:= temp;
  #L2cfcaa.  return v11;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cfbd8.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L2cfbdc.  if v0 == 0 then goto L2cfc24;
  #L2cfbe0.  v0:= v2.`okhttp3.CertificatePinner$Pin.a` @type ^`java.lang.String` @kind object;
  #L2cfbe4.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L2cfbe8.  v1:= v3.`okhttp3.CertificatePinner$Pin.a` @type ^`java.lang.String` @kind object;
  #L2cfbec.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cfbf2.  v0:= temp;
  #L2cfbf4.  if v0 == 0 then goto L2cfc24;
  #L2cfbf8.  v0:= v2.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` @kind object;
  #L2cfbfc.  v1:= v3.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` @kind object;
  #L2cfc00.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cfc06.  v0:= temp;
  #L2cfc08.  if v0 == 0 then goto L2cfc24;
  #L2cfc0c.  v0:= v2.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` @kind object;
  #L2cfc10.  v3:= v3.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` @kind object;
  #L2cfc14.  call temp:= `equals`(v0, v3) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2cfc1a.  v3:= temp;
  #L2cfc1c.  if v3 == 0 then goto L2cfc24;
  #L2cfc20.  v3:= 1I;
  #L2cfc22.  goto L2cfc26;
  #L2cfc24.  v3:= 0I;
  #L2cfc26.  return v3;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cfcbc.  v0:= v2.`okhttp3.CertificatePinner$Pin.a` @type ^`java.lang.String` @kind object;
  #L2cfcc0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2cfcc6.  v0:= temp;
  #L2cfcc8.  v1:= 527I;
  #L2cfccc.  v1:= v1 + v0 @kind int;
  #L2cfcce.  v1:= v1 * 31;
  #L2cfcd2.  v0:= v2.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` @kind object;
  #L2cfcd6.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L2cfcdc.  v0:= temp;
  #L2cfcde.  v1:= v1 + v0 @kind int;
  #L2cfce0.  v1:= v1 * 31;
  #L2cfce4.  v0:= v2.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` @kind object;
  #L2cfce8.  call temp:= `hashCode`(v0) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L2cfcee.  v0:= temp;
  #L2cfcf0.  v1:= v1 + v0 @kind int;
  #L2cfcf2.  return v1;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cfd04.  v0:= new `java.lang.StringBuilder`;
  #L2cfd08.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cfd0e.  v1:= v2.`okhttp3.CertificatePinner$Pin.c` @type ^`java.lang.String` @kind object;
  #L2cfd12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfd18.  v1:= v2.`okhttp3.CertificatePinner$Pin.d` @type ^`okio.ByteString` @kind object;
  #L2cfd1c.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2cfd22.  v1:= temp @kind object;
  #L2cfd24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cfd2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cfd30.  v0:= temp @kind object;
  #L2cfd32.  return v0 @kind object;
}
