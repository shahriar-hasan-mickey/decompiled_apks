record `okhttp3.Headers$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.Headers$Builder.a` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d122c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d1232.  v0:= new `java.util.ArrayList`;
  #L2d1236.  v1:= 20I;
  #L2d123a.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2d1240.  v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` := v0 @kind object;
  #L2d1244.  return @kind void;
}
procedure `okhttp3.Headers$Builder` `a`(`okhttp3.Headers$Builder` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lokhttp3/Headers$Builder;.a:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d1084.  v0:= ":" @kind object;
  #L2d1088.  v1:= 1I;
  #L2d108a.  call temp:= `indexOf`(v5, v0, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L2d1090.  v2:= temp;
  #L2d1092.  v3:= -1I;
  #L2d1094.  if v2 == v3 then goto L2d10b6;
  #L2d1098.  v0:= 0I;
  #L2d109a.  call temp:= `substring`(v5, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2d10a0.  v0:= temp @kind object;
  #L2d10a2.  v2:= v2 + v1 @kind int;
  #L2d10a4.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2d10aa.  v5:= temp @kind object;
  #L2d10ac.  call temp:= `b`(v4, v0, v5) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d10b2.  v5:= temp @kind object;
  #L2d10b4.  return v5 @kind object;
  #L2d10b6.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2d10bc.  v0:= temp;
  #L2d10be.  v2:= "" @kind object;
  #L2d10c2.  if v0 == 0 then goto L2d10d8;
  #L2d10c6.  call temp:= `substring`(v5, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2d10cc.  v5:= temp @kind object;
  #L2d10ce.  call temp:= `b`(v4, v2, v5) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d10d4.  v5:= temp @kind object;
  #L2d10d6.  return v5 @kind object;
  #L2d10d8.  call temp:= `b`(v4, v2, v5) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d10de.  v5:= temp @kind object;
  #L2d10e0.  return v5 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d0f4c.  v0:= ":" @kind object;
  #L2d0f50.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L2d0f56.  v0:= temp;
  #L2d0f58.  v1:= -1I;
  #L2d0f5a.  if v0 == v1 then goto L2d0f86;
  #L2d0f5e.  v1:= 0I;
  #L2d0f60.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L2d0f66.  v1:= temp @kind object;
  #L2d0f68.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2d0f6e.  v1:= temp @kind object;
  #L2d0f70.  v0:= v0 + 1;
  #L2d0f74.  call temp:= `substring`(v4, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2d0f7a.  v4:= temp @kind object;
  #L2d0f7c.  call temp:= `add`(v3, v1, v4) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d0f82.  v4:= temp @kind object;
  #L2d0f84.  return v4 @kind object;
  #L2d0f86.  v0:= new `java.lang.IllegalArgumentException`;
  #L2d0f8a.  v1:= new `java.lang.StringBuilder`;
  #L2d0f8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d0f94.  v2:= "Unexpected header: " @kind object;
  #L2d0f98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d0f9e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d0fa4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d0faa.  v4:= temp @kind object;
  #L2d0fac.  call `<init>`(v0, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d0fb2.  throw v0;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2d0fc4.  call `a`(v1) @signature `Lokhttp3/Headers;.a:(Ljava/lang/String;)V` @kind static;
  #L2d0fca.  call `b`(v2, v1) @signature `Lokhttp3/Headers;.b:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2d0fd0.  call temp:= `b`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d0fd6.  v1:= temp @kind object;
  #L2d0fd8.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `java.util.Date` v4 @kind object) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d0fec.  if v4 == 0 then goto L2d1000;
  #L2d0ff0.  call temp:= `format`(v4) @signature `Lokhttp3/internal/http/HttpDate;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind static;
  #L2d0ff6.  v4:= temp @kind object;
  #L2d0ff8.  call temp:= `add`(v2, v3, v4) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d0ffe.  return v2 @kind object;
  #L2d1000.  v4:= new `java.lang.NullPointerException`;
  #L2d1004.  v0:= new `java.lang.StringBuilder`;
  #L2d1008.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d100e.  v1:= "value for name " @kind object;
  #L2d1012.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1018.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d101e.  v3:= " == null" @kind object;
  #L2d1022.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1028.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d102e.  v3:= temp @kind object;
  #L2d1030.  call `<init>`(v4, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d1036.  throw v4;
}
procedure `okhttp3.Headers$Builder` `addAll`(`okhttp3.Headers$Builder` v4 @kind this, `okhttp3.Headers` v5 @kind object) @signature `Lokhttp3/Headers$Builder;.addAll:(Lokhttp3/Headers;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d1048.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2d104e.  v0:= temp;
  #L2d1050.  v1:= 0I;
  #L2d1052.  if v1 >= v0 then goto L2d1072;
  #L2d1056.  call temp:= `name`(v5, v1) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2d105c.  v2:= temp @kind object;
  #L2d105e.  call temp:= `value`(v5, v1) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2d1064.  v3:= temp @kind object;
  #L2d1066.  call temp:= `b`(v4, v2, v3) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d106c.  v1:= v1 + 1;
  #L2d1070.  goto L2d1052;
  #L2d1072.  return v4 @kind object;
}
procedure `okhttp3.Headers$Builder` `addUnsafeNonAscii`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers$Builder;.addUnsafeNonAscii:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2d1124.  call `a`(v1) @signature `Lokhttp3/Headers;.a:(Ljava/lang/String;)V` @kind static;
  #L2d112a.  call temp:= `b`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d1130.  v1:= temp @kind object;
  #L2d1132.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `b`(`okhttp3.Headers$Builder` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;

  #L2d10f4.  v0:= v1.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d10f8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d10fe.  v2:= v1.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d1102.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2d1108.  v3:= temp @kind object;
  #L2d110a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d1110.  return v1 @kind object;
}
procedure `okhttp3.Headers` `build`(`okhttp3.Headers$Builder` v1 @kind this) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d0f30.  v0:= new `okhttp3.Headers`;
  #L2d0f34.  call `<init>`(v0, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @kind direct;
  #L2d0f3a.  return v0 @kind object;
}
procedure `java.lang.String` `get`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers$Builder;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d0ed0.  v0:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d0ed4.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d0eda.  v0:= temp;
  #L2d0edc.  v0:= v0 + -2;
  #L2d0ee0.  if v0 < 0 then goto L2d0f1c;
  #L2d0ee4.  v1:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d0ee8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d0eee.  v1:= temp @kind object;
  #L2d0ef0.  v1:= (`java.lang.String`) v1 @kind object;
  #L2d0ef4.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d0efa.  v1:= temp;
  #L2d0efc.  if v1 == 0 then goto L2d0f16;
  #L2d0f00.  v3:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d0f04.  v0:= v0 + 1;
  #L2d0f08.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d0f0e.  v3:= temp @kind object;
  #L2d0f10.  v3:= (`java.lang.String`) v3 @kind object;
  #L2d0f14.  return v3 @kind object;
  #L2d0f16.  v0:= v0 + -2;
  #L2d0f1a.  goto L2d0ee0;
  #L2d0f1c.  v3:= 0I;
  #L2d0f1e.  return v3 @kind object;
}
procedure `okhttp3.Headers$Builder` `removeAll`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d1144.  v0:= 0I;
  #L2d1146.  v1:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d114a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d1150.  v1:= temp;
  #L2d1152.  if v0 >= v1 then goto L2d1190;
  #L2d1156.  v1:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d115a.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d1160.  v1:= temp @kind object;
  #L2d1162.  v1:= (`java.lang.String`) v1 @kind object;
  #L2d1166.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d116c.  v1:= temp;
  #L2d116e.  if v1 == 0 then goto L2d118a;
  #L2d1172.  v1:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d1176.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2d117c.  v1:= v2.`okhttp3.Headers$Builder.a` @type ^`java.util.List` @kind object;
  #L2d1180.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L2d1186.  v0:= v0 + -2;
  #L2d118a.  v0:= v0 + 2;
  #L2d118e.  goto L2d1146;
  #L2d1190.  return v2 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L2d11a4.  call `a`(v1) @signature `Lokhttp3/Headers;.a:(Ljava/lang/String;)V` @kind static;
  #L2d11aa.  call `b`(v2, v1) @signature `Lokhttp3/Headers;.b:(Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L2d11b0.  call temp:= `removeAll`(v0, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d11b6.  call temp:= `b`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.b:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d11bc.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object, `java.util.Date` v4 @kind object) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/util/Date;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d11d0.  if v4 == 0 then goto L2d11e4;
  #L2d11d4.  call temp:= `format`(v4) @signature `Lokhttp3/internal/http/HttpDate;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind static;
  #L2d11da.  v4:= temp @kind object;
  #L2d11dc.  call temp:= `set`(v2, v3, v4) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d11e2.  return v2 @kind object;
  #L2d11e4.  v4:= new `java.lang.NullPointerException`;
  #L2d11e8.  v0:= new `java.lang.StringBuilder`;
  #L2d11ec.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d11f2.  v1:= "value for name " @kind object;
  #L2d11f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d11fc.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d1202.  v3:= " == null" @kind object;
  #L2d1206.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d120c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d1212.  v3:= temp @kind object;
  #L2d1214.  call `<init>`(v4, v3) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d121a.  throw v4;
}
