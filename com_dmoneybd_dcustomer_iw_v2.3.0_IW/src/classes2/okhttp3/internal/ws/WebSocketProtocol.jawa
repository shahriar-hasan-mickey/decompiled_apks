record `okhttp3.internal.ws.WebSocketProtocol` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`okhttp3.internal.ws.WebSocketProtocol` v2 @kind this) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2e05e4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e05ea.  v0:= new `java.lang.AssertionError`;
  #L2e05ee.  v1:= "No instances." @kind object;
  #L2e05f2.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2e05f8.  throw v0;
}
procedure `java.lang.String` `a`(`int` v2 ) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.a:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2e0554.  v0:= 1000I;
  #L2e0558.  if v2 < v0 then goto L2e05b8;
  #L2e055c.  v0:= 5000I;
  #L2e0560.  if v2 < v0 then goto L2e0566;
  #L2e0564.  goto L2e05b8;
  #L2e0566.  v0:= 1004I;
  #L2e056a.  if v2 < v0 then goto L2e0576;
  #L2e056e.  v0:= 1006I;
  #L2e0572.  if v2 <= v0 then goto L2e0586;
  #L2e0576.  v0:= 1012I;
  #L2e057a.  if v2 < v0 then goto L2e05b4;
  #L2e057e.  v0:= 2999I;
  #L2e0582.  if v2 > v0 then goto L2e05b4;
  #L2e0586.  v0:= new `java.lang.StringBuilder`;
  #L2e058a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e0590.  v1:= "Code " @kind object;
  #L2e0594.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e059a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e05a0.  v2:= " is reserved and may not be used." @kind object;
  #L2e05a4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e05aa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e05b0.  v2:= temp @kind object;
  #L2e05b2.  return v2 @kind object;
  #L2e05b4.  v2:= 0I;
  #L2e05b6.  return v2 @kind object;
  #L2e05b8.  v0:= new `java.lang.StringBuilder`;
  #L2e05bc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e05c2.  v1:= "Code must be in range [1000,5000): " @kind object;
  #L2e05c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e05cc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e05d2.  goto L2e05aa;
}
procedure `java.lang.String` `acceptHeader`(`java.lang.String` v1 @kind object) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.acceptHeader:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2e0508.  v0:= new `java.lang.StringBuilder`;
  #L2e050c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e0512.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e0518.  v1:= "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" @kind object;
  #L2e051c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e0522.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e0528.  v1:= temp @kind object;
  #L2e052a.  call temp:= `encodeUtf8`(v1) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2e0530.  v1:= temp @kind object;
  #L2e0532.  call temp:= `sha1`(v1) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L2e0538.  v1:= temp @kind object;
  #L2e053a.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L2e0540.  v1:= temp @kind object;
  #L2e0542.  return v1 @kind object;
}
procedure `void` `b`(`okio.Buffer$UnsafeCursor` v7 @kind object, `byte`[] v8 @kind object) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.b:(Lokio/Buffer$UnsafeCursor;[B)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e060c.  v0:= length @variable v8;
  #L2e060e.  v1:= 0I;
  #L2e0610.  v2:= v7.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] @kind object;
  #L2e0614.  v3:= v7.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L2e0618.  v4:= v7.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L2e061c.  if v3 >= v4 then goto L2e063c;
  #L2e0620.  v1:= v1 %% v0 @kind int;
  #L2e0622.  v5:= v2[v3] @kind byte;
  #L2e0626.  v6:= v8[v1] @kind byte;
  #L2e062a.  v5:= v5 ^~ v6 @kind int;
  #L2e062c.  v5:= (`byte`) v5 @kind i2b;
  #L2e062e.  v2[v3]:= v5 @kind byte;
  #L2e0632.  v3:= v3 + 1;
  #L2e0636.  v1:= v1 + 1;
  #L2e063a.  goto L2e061c;
  #L2e063c.  call temp:= `next`(v7) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @kind virtual;
  #L2e0642.  v2:= temp;
  #L2e0644.  v3:= -1I;
  #L2e0646.  if v2 != v3 then goto L2e0610;
  #L2e064a.  return @kind void;
}
procedure `void` `c`(`int` v1 ) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.c:(I)V` @AccessFlag STATIC {
    temp;
    v0;

  #L2e065c.  call temp:= `a`(v1) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.a:(I)Ljava/lang/String;` @kind static;
  #L2e0662.  v1:= temp @kind object;
  #L2e0664.  if v1 != 0 then goto L2e066a;
  #L2e0668.  return @kind void;
  #L2e066a.  v0:= new `java.lang.IllegalArgumentException`;
  #L2e066e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e0674.  throw v0;
}
