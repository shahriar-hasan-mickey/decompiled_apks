record `okhttp3.internal.tls.OkHostnameVerifier` @kind class @AccessFlag PUBLIC_FINAL extends `javax.net.ssl.HostnameVerifier` @kind interface {
}
global `int` `@@okhttp3.internal.tls.OkHostnameVerifier.ALT_DNS_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.tls.OkHostnameVerifier.ALT_IPA_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.internal.tls.OkHostnameVerifier` `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2e0268.  v0:= new `okhttp3.internal.tls.OkHostnameVerifier`;
  #L2e026c.  call `<init>`(v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<init>:()V` @kind direct;
  #L2e0272.  `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` := v0 @kind object;
  #L2e0276.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.tls.OkHostnameVerifier` v0 @kind this) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2e0288.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e028e.  return @kind void;
}
procedure `java.util.List` `allSubjectAltNames`(`java.security.cert.X509Certificate` v4 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.allSubjectAltNames:(Ljava/security/cert/X509Certificate;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e015c.  v0:= 7I;
  #L2e015e.  call temp:= `getSubjectAltNames`(v4, v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L2e0164.  v0:= temp @kind object;
  #L2e0166.  v1:= 2I;
  #L2e0168.  call temp:= `getSubjectAltNames`(v4, v1) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L2e016e.  v4:= temp @kind object;
  #L2e0170.  v1:= new `java.util.ArrayList`;
  #L2e0174.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2e017a.  v2:= temp;
  #L2e017c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2e0182.  v3:= temp;
  #L2e0184.  v2:= v2 + v3 @kind int;
  #L2e0186.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2e018c.  call temp:= `addAll`(v1, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2e0192.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2e0198.  return v1 @kind object;
}
procedure `java.util.List` `getSubjectAltNames`(`java.security.cert.X509Certificate` v4 @kind object, `int` v5 ) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e01ac.  v0:= new `java.util.ArrayList`;
  #L2e01b0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2e01b6.  call temp:= `getSubjectAlternativeNames`(v4) @signature `Ljava/security/cert/X509Certificate;.getSubjectAlternativeNames:()Ljava/util/Collection;` @kind virtual;
  #L2e01bc.  v4:= temp @kind object;
  #L2e01be.  if v4 != 0 then goto L2e01cc;
  #L2e01c2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2e01c8.  v4:= temp @kind object;
  #L2e01ca.  return v4 @kind object;
  #L2e01cc.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e01d2.  v4:= temp @kind object;
  #L2e01d4.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e01da.  v1:= temp;
  #L2e01dc.  if v1 == 0 then goto L2e023a;
  #L2e01e0.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e01e6.  v1:= temp @kind object;
  #L2e01e8.  v1:= (`java.util.List`) v1 @kind object;
  #L2e01ec.  if v1 == 0 then goto L2e01d4;
  #L2e01f0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2e01f6.  v2:= temp;
  #L2e01f8.  v3:= 2I;
  #L2e01fa.  if v2 >= v3 then goto L2e0200;
  #L2e01fe.  goto L2e01d4;
  #L2e0200.  v2:= 0I;
  #L2e0202.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2e0208.  v2:= temp @kind object;
  #L2e020a.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L2e020e.  if v2 != 0 then goto L2e0214;
  #L2e0212.  goto L2e01d4;
  #L2e0214.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2e021a.  v2:= temp;
  #L2e021c.  if v2 != v5 then goto L2e01d4;
  #L2e0220.  v2:= 1I;
  #L2e0222.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2e0228.  v1:= temp @kind object;
  #L2e022a.  v1:= (`java.lang.String`) v1 @kind object;
  #L2e022e.  if v1 == 0 then goto L2e01d4;
  #L2e0232.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2e0238.  goto L2e01d4;
  #L2e023a.  return v0 @kind object;
  #L2e023c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2e0242.  v4:= temp @kind object;
  #L2e0244.  return v4 @kind object;
  catch `java.security.cert.CertificateParsingException` @[L2e01b6..L2e0238] goto L2e023c;
}
procedure `boolean` `verifyHostname`(`okhttp3.internal.tls.OkHostnameVerifier` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2e00b0.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L2e00b4.  call temp:= `toLowerCase`(v2, v0) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L2e00ba.  v2:= temp @kind object;
  #L2e00bc.  v0:= 2I;
  #L2e00be.  call temp:= `getSubjectAltNames`(v3, v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L2e00c4.  v3:= temp @kind object;
  #L2e00c6.  call temp:= `iterator`(v3) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2e00cc.  v3:= temp @kind object;
  #L2e00ce.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2e00d4.  v0:= temp;
  #L2e00d6.  if v0 == 0 then goto L2e00f6;
  #L2e00da.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2e00e0.  v0:= temp @kind object;
  #L2e00e2.  v0:= (`java.lang.String`) v0 @kind object;
  #L2e00e6.  call temp:= `verifyHostname`(v1, v2, v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L2e00ec.  v0:= temp;
  #L2e00ee.  if v0 == 0 then goto L2e00ce;
  #L2e00f2.  v2:= 1I;
  #L2e00f4.  return v2;
  #L2e00f6.  v2:= 0I;
  #L2e00f8.  return v2;
}
procedure `boolean` `verifyIpAddress`(`okhttp3.internal.tls.OkHostnameVerifier` v4 @kind this, `java.lang.String` v5 @kind object, `java.security.cert.X509Certificate` v6 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyIpAddress:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2e010c.  v0:= 7I;
  #L2e010e.  call temp:= `getSubjectAltNames`(v6, v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L2e0114.  v6:= temp @kind object;
  #L2e0116.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2e011c.  v0:= temp;
  #L2e011e.  v1:= 0I;
  #L2e0120.  v2:= 0I;
  #L2e0122.  if v2 >= v0 then goto L2e0148;
  #L2e0126.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2e012c.  v3:= temp @kind object;
  #L2e012e.  v3:= (`java.lang.String`) v3 @kind object;
  #L2e0132.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2e0138.  v3:= temp;
  #L2e013a.  if v3 == 0 then goto L2e0142;
  #L2e013e.  v5:= 1I;
  #L2e0140.  return v5;
  #L2e0142.  v2:= v2 + 1;
  #L2e0146.  goto L2e0122;
  #L2e0148.  return v1;
}
procedure `boolean` `verify`(`okhttp3.internal.tls.OkHostnameVerifier` v1 @kind this, `java.lang.String` v2 @kind object, `java.security.cert.X509Certificate` v3 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2dfec4.  call temp:= `verifyAsIpAddress`(v2) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @kind static;
  #L2dfeca.  v0:= temp;
  #L2dfecc.  if v0 == 0 then goto L2dfeda;
  #L2dfed0.  call temp:= `verifyIpAddress`(v1, v2, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyIpAddress:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L2dfed6.  v2:= temp;
  #L2dfed8.  goto L2dfee2;
  #L2dfeda.  call temp:= `verifyHostname`(v1, v2, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L2dfee0.  v2:= temp;
  #L2dfee2.  return v2;
}
procedure `boolean` `verify`(`okhttp3.internal.tls.OkHostnameVerifier` v1 @kind this, `java.lang.String` v2 @kind object, `javax.net.ssl.SSLSession` v3 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2dfef4.  v0:= 0I;
  #L2dfef6.  call temp:= `getPeerCertificates`(v3) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L2dfefc.  v3:= temp @kind object;
  #L2dfefe.  v3:= v3[v0] @kind object;
  #L2dff02.  v3:= (`java.security.cert.X509Certificate`) v3 @kind object;
  #L2dff06.  call temp:= `verify`(v1, v2, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind virtual;
  #L2dff0c.  v2:= temp;
  #L2dff0e.  return v2;
  #L2dff10.  return v0;
  catch `javax.net.ssl.SSLException` @[L2dfef6..L2dff0e] goto L2dff10;
}
procedure `boolean` `verifyHostname`(`okhttp3.internal.tls.OkHostnameVerifier` v7 @kind this, `java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2dff34.  v0:= 0I;
  #L2dff36.  if v8 == 0 then goto L2e009c;
  #L2dff3a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2dff40.  v1:= temp;
  #L2dff42.  if v1 == 0 then goto L2e009c;
  #L2dff46.  v1:= "." @kind object;
  #L2dff4a.  call temp:= `startsWith`(v8, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dff50.  v2:= temp;
  #L2dff52.  if v2 != 0 then goto L2e009c;
  #L2dff56.  v2:= ".." @kind object;
  #L2dff5a.  call temp:= `endsWith`(v8, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dff60.  v3:= temp;
  #L2dff62.  if v3 == 0 then goto L2dff6a;
  #L2dff66.  goto L2e009c;
  #L2dff6a.  if v9 == 0 then goto L2e009c;
  #L2dff6e.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2dff74.  v3:= temp;
  #L2dff76.  if v3 == 0 then goto L2e009c;
  #L2dff7a.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dff80.  v3:= temp;
  #L2dff82.  if v3 != 0 then goto L2e009c;
  #L2dff86.  call temp:= `endsWith`(v9, v2) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dff8c.  v2:= temp;
  #L2dff8e.  if v2 == 0 then goto L2dff96;
  #L2dff92.  goto L2e009c;
  #L2dff96.  call temp:= `endsWith`(v8, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dff9c.  v2:= temp;
  #L2dff9e.  v3:= 46I;
  #L2dffa2.  if v2 != 0 then goto L2dffc4;
  #L2dffa6.  v2:= new `java.lang.StringBuilder`;
  #L2dffaa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2dffb0.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2dffb6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2dffbc.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2dffc2.  v8:= temp @kind object;
  #L2dffc4.  call temp:= `endsWith`(v9, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2dffca.  v1:= temp;
  #L2dffcc.  if v1 != 0 then goto L2dffee;
  #L2dffd0.  v1:= new `java.lang.StringBuilder`;
  #L2dffd4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2dffda.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2dffe0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2dffe6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2dffec.  v9:= temp @kind object;
  #L2dffee.  v1:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L2dfff2.  call temp:= `toLowerCase`(v9, v1) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L2dfff8.  v9:= temp @kind object;
  #L2dfffa.  v1:= "*" @kind object;
  #L2dfffe.  call temp:= `contains`(v9, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L2e0004.  v1:= temp;
  #L2e0006.  if v1 != 0 then goto L2e0014;
  #L2e000a.  call temp:= `equals`(v8, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e0010.  v8:= temp;
  #L2e0012.  return v8;
  #L2e0014.  v1:= "*." @kind object;
  #L2e0018.  call temp:= `startsWith`(v9, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2e001e.  v2:= temp;
  #L2e0020.  if v2 == 0 then goto L2e009c;
  #L2e0024.  v2:= 42I;
  #L2e0028.  v4:= 1I;
  #L2e002a.  call temp:= `indexOf`(v9, v2, v4) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L2e0030.  v2:= temp;
  #L2e0032.  v5:= -1I;
  #L2e0034.  if v2 == v5 then goto L2e003a;
  #L2e0038.  goto L2e009c;
  #L2e003a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2e0040.  v2:= temp;
  #L2e0042.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2e0048.  v6:= temp;
  #L2e004a.  if v2 >= v6 then goto L2e0050;
  #L2e004e.  return v0;
  #L2e0050.  call temp:= `equals`(v1, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2e0056.  v1:= temp;
  #L2e0058.  if v1 == 0 then goto L2e005e;
  #L2e005c.  return v0;
  #L2e005e.  call temp:= `substring`(v9, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L2e0064.  v9:= temp @kind object;
  #L2e0066.  call temp:= `endsWith`(v8, v9) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2e006c.  v1:= temp;
  #L2e006e.  if v1 != 0 then goto L2e0074;
  #L2e0072.  return v0;
  #L2e0074.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2e007a.  v1:= temp;
  #L2e007c.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2e0082.  v9:= temp;
  #L2e0084.  v1:= v1 - v9 @kind int;
  #L2e0086.  if v1 <= 0 then goto L2e009a;
  #L2e008a.  v1:= v1 - v4 @kind int;
  #L2e008c.  call temp:= `lastIndexOf`(v8, v3, v1) @signature `Ljava/lang/String;.lastIndexOf:(II)I` @kind virtual;
  #L2e0092.  v8:= temp;
  #L2e0094.  if v8 == v5 then goto L2e009a;
  #L2e0098.  return v0;
  #L2e009a.  return v4;
  #L2e009c.  return v0;
}
