record `okhttp3.internal.http1.Http1Codec$UnknownLengthSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.b` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d7820.  v1.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.b` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L2d7824.  v0:= 0I;
  #L2d7826.  call `<init>`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L2d782c.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d7840.  v0:= v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L2d7844.  if v0 == 0 then goto L2d784a;
  #L2d7848.  return @kind void;
  #L2d784a.  v0:= v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L2d784e.  if v0 != 0 then goto L2d785c;
  #L2d7852.  v0:= 0I;
  #L2d7854.  v1:= 0I;
  #L2d7856.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2d785c.  v0:= 1I;
  #L2d785e.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L2d7862.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v3 @kind this, `okio.Buffer` v4 @kind object, `long` v5 ) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d778c.  v0:= 0L;
  #L2d7790.  v2:= lcmp(v5, v0);
  #L2d7794.  if v2 < 0 then goto L2d77e0;
  #L2d7798.  v0:= v3.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L2d779c.  if v0 != 0 then goto L2d77d0;
  #L2d77a0.  v0:= v3.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L2d77a4.  v1:= -1L;
  #L2d77a8.  if v0 == 0 then goto L2d77ae;
  #L2d77ac.  return v1 @kind wide;
  #L2d77ae.  call temp:= `read`(v3, v4, v5) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2d77b4.  v4:= temp @kind wide;
  #L2d77b6.  v6:= lcmp(v4, v1);
  #L2d77ba.  if v6 != 0 then goto L2d77ce;
  #L2d77be.  v4:= 1I;
  #L2d77c0.  v3.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` := v4 @kind boolean;
  #L2d77c4.  v5:= 0I;
  #L2d77c6.  call `endOfInput`(v3, v4, v5) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2d77cc.  return v1 @kind wide;
  #L2d77ce.  return v4 @kind wide;
  #L2d77d0.  v4:= new `java.lang.IllegalStateException`;
  #L2d77d4.  v5:= "closed" @kind object;
  #L2d77d8.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d77de.  throw v4;
  #L2d77e0.  v4:= new `java.lang.IllegalArgumentException`;
  #L2d77e4.  v0:= new `java.lang.StringBuilder`;
  #L2d77e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d77ee.  v1:= "byteCount < 0: " @kind object;
  #L2d77f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d77f8.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d77fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d7804.  v5:= temp @kind object;
  #L2d7806.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d780c.  throw v4;
}
