record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @AccessFlag FINAL_SYNTHETIC;
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2d730c.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L2d7310.  v0:= 0I;
  #L2d7312.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L2d7318.  v0:= -1L;
  #L2d731c.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L2d7320.  v3:= 1I;
  #L2d7322.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v3 @kind boolean;
  #L2d7326.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L2d732a.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v6 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d7384.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d7388.  v2:= -1L;
  #L2d738c.  v4:= lcmp(v0, v2);
  #L2d7390.  if v4 == 0 then goto L2d73a2;
  #L2d7394.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d7398.  v0:= v0.`okhttp3.internal.http1.Http1Codec.c` @type ^`okio.BufferedSource` @kind object;
  #L2d739c.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L2d73a2.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d73a6.  v0:= v0.`okhttp3.internal.http1.Http1Codec.c` @type ^`okio.BufferedSource` @kind object;
  #L2d73aa.  call temp:= `readHexadecimalUnsignedLong`(v0) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L2d73b0.  v0:= temp @kind wide;
  #L2d73b2.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L2d73b6.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d73ba.  v0:= v0.`okhttp3.internal.http1.Http1Codec.c` @type ^`okio.BufferedSource` @kind object;
  #L2d73be.  call temp:= `readUtf8LineStrict`(v0) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L2d73c4.  v0:= temp @kind object;
  #L2d73c6.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2d73cc.  v0:= temp @kind object;
  #L2d73ce.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d73d2.  v3:= 0L;
  #L2d73d6.  v5:= lcmp(v1, v3);
  #L2d73da.  if v5 < 0 then goto L2d743e;
  #L2d73de.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2d73e4.  v1:= temp;
  #L2d73e6.  if v1 != 0 then goto L2d73fa;
  #L2d73ea.  v1:= ";" @kind object;
  #L2d73ee.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2d73f4.  v1:= temp;
  #L2d73f6.  if v1 == 0 then goto L2d743e;
  #L2d73fa.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d73fe.  v2:= lcmp(v0, v3);
  #L2d7402.  if v2 != 0 then goto L2d743c;
  #L2d7406.  v0:= 0I;
  #L2d7408.  v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L2d740c.  v0:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d7410.  v0:= v0.`okhttp3.internal.http1.Http1Codec.a` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d7414.  call temp:= `cookieJar`(v0) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L2d741a.  v0:= temp @kind object;
  #L2d741c.  v1:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2d7420.  v2:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.b` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2d7424.  call temp:= `readHeaders`(v2) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L2d742a.  v2:= temp @kind object;
  #L2d742c.  call `receiveHeaders`(v0, v1, v2) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L2d7432.  v0:= 1I;
  #L2d7434.  v1:= 0I;
  #L2d7436.  call `endOfInput`(v6, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2d743c.  return @kind void;
  #L2d743e.  v1:= new `java.net.ProtocolException`;
  #L2d7442.  v2:= new `java.lang.StringBuilder`;
  #L2d7446.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d744c.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L2d7450.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7456.  v3:= v6.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d745a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7460.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7466.  v0:= "\"" @kind object;
  #L2d746a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d7470.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d7476.  v0:= temp @kind object;
  #L2d7478.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d747e.  throw v1;
  #L2d7480.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L2d7482.  v1:= new `java.net.ProtocolException`;
  #L2d7486.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L2d748c.  v0:= temp @kind object;
  #L2d748e.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d7494.  throw v1;
  catch `java.lang.NumberFormatException` @[L2d73a2..L2d73f6] goto L2d7480;
  catch `java.lang.NumberFormatException` @[L2d743e..L2d7480] goto L2d7480;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d733c.  v0:= v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L2d7340.  if v0 == 0 then goto L2d7346;
  #L2d7344.  return @kind void;
  #L2d7346.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2d734a.  if v0 == 0 then goto L2d736c;
  #L2d734e.  v0:= 100I;
  #L2d7352.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d7356.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2d735c.  v0:= temp;
  #L2d735e.  if v0 != 0 then goto L2d736c;
  #L2d7362.  v0:= 0I;
  #L2d7364.  v1:= 0I;
  #L2d7366.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2d736c.  v0:= 1I;
  #L2d736e.  v2.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L2d7372.  return @kind void;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d7238.  v0:= 0L;
  #L2d723c.  v2:= lcmp(v9, v0);
  #L2d7240.  if v2 < 0 then goto L2d72ce;
  #L2d7244.  v2:= v7.`okhttp3.internal.http1.Http1Codec$AbstractSource.closed` @type ^`boolean` @kind boolean;
  #L2d7248.  if v2 != 0 then goto L2d72be;
  #L2d724c.  v2:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2d7250.  v3:= -1L;
  #L2d7254.  if v2 != 0 then goto L2d725a;
  #L2d7258.  return v3 @kind wide;
  #L2d725a.  v5:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d725e.  v2:= lcmp(v5, v0);
  #L2d7262.  if v2 == 0 then goto L2d726e;
  #L2d7266.  v0:= lcmp(v5, v3);
  #L2d726a.  if v0 != 0 then goto L2d727e;
  #L2d726e.  call `readChunkSize`(v7) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L2d7274.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2d7278.  if v0 != 0 then goto L2d727e;
  #L2d727c.  return v3 @kind wide;
  #L2d727e.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d7282.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2d7288.  v9:= temp @kind wide;
  #L2d728a.  call temp:= `read`(v7, v8, v9) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2d7290.  v8:= temp @kind wide;
  #L2d7292.  v10:= lcmp(v8, v3);
  #L2d7296.  if v10 == 0 then goto L2d72a6;
  #L2d729a.  v0:= v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2d729e.  v0:= v0 - v8 @kind long;
  #L2d72a0.  v7.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L2d72a4.  return v8 @kind wide;
  #L2d72a6.  v8:= new `java.net.ProtocolException`;
  #L2d72aa.  v9:= "unexpected end of stream" @kind object;
  #L2d72ae.  call `<init>`(v8, v9) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d72b4.  v9:= 0I;
  #L2d72b6.  call `endOfInput`(v7, v9, v8) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2d72bc.  throw v8;
  #L2d72be.  v8:= new `java.lang.IllegalStateException`;
  #L2d72c2.  v9:= "closed" @kind object;
  #L2d72c6.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d72cc.  throw v8;
  #L2d72ce.  v8:= new `java.lang.IllegalArgumentException`;
  #L2d72d2.  v0:= new `java.lang.StringBuilder`;
  #L2d72d6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d72dc.  v1:= "byteCount < 0: " @kind object;
  #L2d72e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d72e6.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d72ec.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d72f2.  v9:= temp @kind object;
  #L2d72f4.  call `<init>`(v8, v9) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d72fa.  throw v8;
}
