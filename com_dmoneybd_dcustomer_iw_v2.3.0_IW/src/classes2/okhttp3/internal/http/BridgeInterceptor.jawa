record `okhttp3.internal.http.BridgeInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `okhttp3.CookieJar` `okhttp3.internal.http.BridgeInterceptor.cookieJar` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http.BridgeInterceptor` v0 @kind this, `okhttp3.CookieJar` v1 @kind object) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d4f20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d4f26.  v0.`okhttp3.internal.http.BridgeInterceptor.cookieJar` @type ^`okhttp3.CookieJar` := v1 @kind object;
  #L2d4f2a.  return @kind void;
}
procedure `java.lang.String` `cookieHeader`(`okhttp3.internal.http.BridgeInterceptor` v5 @kind this, `java.util.List` v6 @kind object) @signature `Lokhttp3/internal/http/BridgeInterceptor;.cookieHeader:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d4c88.  v0:= new `java.lang.StringBuilder`;
  #L2d4c8c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d4c92.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2d4c98.  v1:= temp;
  #L2d4c9a.  v2:= 0I;
  #L2d4c9c.  if v2 >= v1 then goto L2d4ce6;
  #L2d4ca0.  if v2 <= 0 then goto L2d4cae;
  #L2d4ca4.  v3:= "; " @kind object;
  #L2d4ca8.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4cae.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2d4cb4.  v3:= temp @kind object;
  #L2d4cb6.  v3:= (`okhttp3.Cookie`) v3 @kind object;
  #L2d4cba.  call temp:= `name`(v3) @signature `Lokhttp3/Cookie;.name:()Ljava/lang/String;` @kind virtual;
  #L2d4cc0.  v4:= temp @kind object;
  #L2d4cc2.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4cc8.  v4:= 61I;
  #L2d4ccc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4cd2.  call temp:= `value`(v3) @signature `Lokhttp3/Cookie;.value:()Ljava/lang/String;` @kind virtual;
  #L2d4cd8.  v3:= temp @kind object;
  #L2d4cda.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d4ce0.  v2:= v2 + 1;
  #L2d4ce4.  goto L2d4c9c;
  #L2d4ce6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d4cec.  v6:= temp @kind object;
  #L2d4cee.  return v6 @kind object;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.BridgeInterceptor` v10 @kind this, `okhttp3.Interceptor$Chain` v11 @kind object) @signature `Lokhttp3/internal/http/BridgeInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2d4d00.  call temp:= `request`(v11) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L2d4d06.  v0:= temp @kind object;
  #L2d4d08.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d0e.  v1:= temp @kind object;
  #L2d4d10.  call temp:= `body`(v0) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d4d16.  v2:= temp @kind object;
  #L2d4d18.  v3:= "Content-Type" @kind object;
  #L2d4d1c.  v4:= -1L;
  #L2d4d20.  v6:= "Content-Length" @kind object;
  #L2d4d24.  if v2 == 0 then goto L2d4d7c;
  #L2d4d28.  call temp:= `contentType`(v2) @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L2d4d2e.  v7:= temp @kind object;
  #L2d4d30.  if v7 == 0 then goto L2d4d42;
  #L2d4d34.  call temp:= `toString`(v7) @signature `Lokhttp3/MediaType;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d4d3a.  v7:= temp @kind object;
  #L2d4d3c.  call temp:= `header`(v1, v3, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d42.  call temp:= `contentLength`(v2) @signature `Lokhttp3/RequestBody;.contentLength:()J` @kind virtual;
  #L2d4d48.  v7:= temp @kind wide;
  #L2d4d4a.  v2:= "Transfer-Encoding" @kind object;
  #L2d4d4e.  v9:= lcmp(v7, v4);
  #L2d4d52.  if v9 == 0 then goto L2d4d6c;
  #L2d4d56.  call temp:= `toString`(v7) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L2d4d5c.  v7:= temp @kind object;
  #L2d4d5e.  call temp:= `header`(v1, v6, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d64.  call temp:= `removeHeader`(v1, v2) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d6a.  goto L2d4d7c;
  #L2d4d6c.  v7:= "chunked" @kind object;
  #L2d4d70.  call temp:= `header`(v1, v2, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d76.  call temp:= `removeHeader`(v1, v6) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4d7c.  v2:= "Host" @kind object;
  #L2d4d80.  call temp:= `header`(v0, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4d86.  v7:= temp @kind object;
  #L2d4d88.  v8:= 0I;
  #L2d4d8a.  if v7 != 0 then goto L2d4da4;
  #L2d4d8e.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d4d94.  v7:= temp @kind object;
  #L2d4d96.  call temp:= `hostHeader`(v7, v8) @signature `Lokhttp3/internal/Util;.hostHeader:(Lokhttp3/HttpUrl;Z)Ljava/lang/String;` @kind static;
  #L2d4d9c.  v7:= temp @kind object;
  #L2d4d9e.  call temp:= `header`(v1, v2, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4da4.  v2:= "Connection" @kind object;
  #L2d4da8.  call temp:= `header`(v0, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4dae.  v7:= temp @kind object;
  #L2d4db0.  if v7 != 0 then goto L2d4dbe;
  #L2d4db4.  v7:= "Keep-Alive" @kind object;
  #L2d4db8.  call temp:= `header`(v1, v2, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4dbe.  v2:= "Accept-Encoding" @kind object;
  #L2d4dc2.  call temp:= `header`(v0, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4dc8.  v7:= temp @kind object;
  #L2d4dca.  v9:= "gzip" @kind object;
  #L2d4dce.  if v7 != 0 then goto L2d4dea;
  #L2d4dd2.  v7:= "Range" @kind object;
  #L2d4dd6.  call temp:= `header`(v0, v7) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4ddc.  v7:= temp @kind object;
  #L2d4dde.  if v7 != 0 then goto L2d4dea;
  #L2d4de2.  v8:= 1I;
  #L2d4de4.  call temp:= `header`(v1, v2, v9) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4dea.  v2:= v10.`okhttp3.internal.http.BridgeInterceptor.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L2d4dee.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d4df4.  v7:= temp @kind object;
  #L2d4df6.  call temp:= `loadForRequest`(v2, v7) @signature `Lokhttp3/CookieJar;.loadForRequest:(Lokhttp3/HttpUrl;)Ljava/util/List;` @kind interface;
  #L2d4dfc.  v2:= temp @kind object;
  #L2d4dfe.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L2d4e04.  v7:= temp;
  #L2d4e06.  if v7 != 0 then goto L2d4e1c;
  #L2d4e0a.  call temp:= `cookieHeader`(v10, v2) @signature `Lokhttp3/internal/http/BridgeInterceptor;.cookieHeader:(Ljava/util/List;)Ljava/lang/String;` @kind direct;
  #L2d4e10.  v2:= temp @kind object;
  #L2d4e12.  v7:= "Cookie" @kind object;
  #L2d4e16.  call temp:= `header`(v1, v7, v2) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4e1c.  v2:= "User-Agent" @kind object;
  #L2d4e20.  call temp:= `header`(v0, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4e26.  v7:= temp @kind object;
  #L2d4e28.  if v7 != 0 then goto L2d4e3a;
  #L2d4e2c.  call temp:= `userAgent`() @signature `Lokhttp3/internal/Version;.userAgent:()Ljava/lang/String;` @kind static;
  #L2d4e32.  v7:= temp @kind object;
  #L2d4e34.  call temp:= `header`(v1, v2, v7) @signature `Lokhttp3/Request$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d4e3a.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2d4e40.  v1:= temp @kind object;
  #L2d4e42.  call temp:= `proceed`(v11, v1) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2d4e48.  v11:= temp @kind object;
  #L2d4e4a.  v1:= v10.`okhttp3.internal.http.BridgeInterceptor.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L2d4e4e.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d4e54.  v2:= temp @kind object;
  #L2d4e56.  call temp:= `headers`(v11) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2d4e5c.  v7:= temp @kind object;
  #L2d4e5e.  call `receiveHeaders`(v1, v2, v7) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L2d4e64.  call temp:= `newBuilder`(v11) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2d4e6a.  v1:= temp @kind object;
  #L2d4e6c.  call temp:= `request`(v1, v0) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d4e72.  v0:= temp @kind object;
  #L2d4e74.  if v8 == 0 then goto L2d4f04;
  #L2d4e78.  v1:= "Content-Encoding" @kind object;
  #L2d4e7c.  call temp:= `header`(v11, v1) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4e82.  v2:= temp @kind object;
  #L2d4e84.  call temp:= `equalsIgnoreCase`(v9, v2) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L2d4e8a.  v2:= temp;
  #L2d4e8c.  if v2 == 0 then goto L2d4f04;
  #L2d4e90.  call temp:= `hasBody`(v11) @signature `Lokhttp3/internal/http/HttpHeaders;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L2d4e96.  v2:= temp;
  #L2d4e98.  if v2 == 0 then goto L2d4f04;
  #L2d4e9c.  v2:= new `okio.GzipSource`;
  #L2d4ea0.  call temp:= `body`(v11) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2d4ea6.  v7:= temp @kind object;
  #L2d4ea8.  call temp:= `source`(v7) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L2d4eae.  v7:= temp @kind object;
  #L2d4eb0.  call `<init>`(v2, v7) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L2d4eb6.  call temp:= `headers`(v11) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2d4ebc.  v7:= temp @kind object;
  #L2d4ebe.  call temp:= `newBuilder`(v7) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d4ec4.  v7:= temp @kind object;
  #L2d4ec6.  call temp:= `removeAll`(v7, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d4ecc.  v1:= temp @kind object;
  #L2d4ece.  call temp:= `removeAll`(v1, v6) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L2d4ed4.  v1:= temp @kind object;
  #L2d4ed6.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L2d4edc.  v1:= temp @kind object;
  #L2d4ede.  call temp:= `headers`(v0, v1) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d4ee4.  call temp:= `header`(v11, v3) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d4eea.  v11:= temp @kind object;
  #L2d4eec.  v1:= new `okhttp3.internal.http.RealResponseBody`;
  #L2d4ef0.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2d4ef6.  v2:= temp @kind object;
  #L2d4ef8.  call `<init>`(v1, v11, v4, v2) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L2d4efe.  call temp:= `body`(v0, v1) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d4f04.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L2d4f0a.  v11:= temp @kind object;
  #L2d4f0c.  return v11 @kind object;
}
