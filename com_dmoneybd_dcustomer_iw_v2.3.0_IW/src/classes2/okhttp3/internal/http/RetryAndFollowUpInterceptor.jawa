record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE_VOLATILE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `boolean` v2 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d6c68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d6c6e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L2d6c72.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L2d6c76.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v17 @kind this, `okhttp3.HttpUrl` v18 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L2d6628.  v0:= v17 @kind object;
  #L2d662c.  call temp:= `isHttps`(v18) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L2d6632.  v1:= temp;
  #L2d6634.  v2:= 0I;
  #L2d6636.  if v1 == 0 then goto L2d6666;
  #L2d663a.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d663e.  call temp:= `sslSocketFactory`(v1) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L2d6644.  v2:= temp @kind object;
  #L2d6646.  v1:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d664a.  call temp:= `hostnameVerifier`(v1) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L2d6650.  v1:= temp @kind object;
  #L2d6652.  v3:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6656.  call temp:= `certificatePinner`(v3) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L2d665c.  v3:= temp @kind object;
  #L2d665e.  v10:= v1 @kind object;
  #L2d6660.  v9:= v2 @kind object;
  #L2d6662.  v11:= v3 @kind object;
  #L2d6664.  goto L2d666c;
  #L2d6666.  v9:= v2 @kind object;
  #L2d6668.  v10:= v9 @kind object;
  #L2d666a.  v11:= v10 @kind object;
  #L2d666c.  v1:= new `okhttp3.Address`;
  #L2d6670.  call temp:= `host`(v18) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2d6676.  v5:= temp @kind object;
  #L2d6678.  call temp:= `port`(v18) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2d667e.  v6:= temp;
  #L2d6680.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6684.  call temp:= `dns`(v2) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L2d668a.  v7:= temp @kind object;
  #L2d668c.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6690.  call temp:= `socketFactory`(v2) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L2d6696.  v8:= temp @kind object;
  #L2d6698.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d669c.  call temp:= `proxyAuthenticator`(v2) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2d66a2.  v12:= temp @kind object;
  #L2d66a4.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d66a8.  call temp:= `proxy`(v2) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2d66ae.  v13:= temp @kind object;
  #L2d66b0.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d66b4.  call temp:= `protocols`(v2) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L2d66ba.  v14:= temp @kind object;
  #L2d66bc.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d66c0.  call temp:= `connectionSpecs`(v2) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L2d66c6.  v15:= temp @kind object;
  #L2d66c8.  v2:= v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d66cc.  call temp:= `proxySelector`(v2) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L2d66d2.  v16:= temp @kind object;
  #L2d66d4.  v4:= v1 @kind object;
  #L2d66d6.  call `<init>`(v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L2d66dc.  return v1 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v6 @kind this, `okhttp3.Response` v7 @kind object, `okhttp3.Route` v8 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d66f0.  if v7 == 0 then goto L2d6992;
  #L2d66f4.  call temp:= `code`(v7) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L2d66fa.  v0:= temp;
  #L2d66fc.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d6702.  v1:= temp @kind object;
  #L2d6704.  call temp:= `method`(v1) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L2d670a.  v1:= temp @kind object;
  #L2d670c.  v2:= 307I;
  #L2d6710.  v3:= "GET" @kind object;
  #L2d6714.  v4:= 0I;
  #L2d6716.  if v0 == v2 then goto L2d6858;
  #L2d671a.  v2:= 308I;
  #L2d671e.  if v0 == v2 then goto L2d6858;
  #L2d6722.  v2:= 401I;
  #L2d6726.  if v0 == v2 then goto L2d6842;
  #L2d672a.  v2:= 503I;
  #L2d672e.  if v0 == v2 then goto L2d6802;
  #L2d6732.  v2:= 407I;
  #L2d6736.  if v0 == v2 then goto L2d67b2;
  #L2d673a.  v8:= 408I;
  #L2d673e.  if v0 == v8 then goto L2d674a;
  #L2d6742.  goto L2d69a0;
  #L2d6748.  return v4 @kind object;
  #L2d674a.  v0:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d674e.  call temp:= `retryOnConnectionFailure`(v0) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2d6754.  v0:= temp;
  #L2d6756.  if v0 != 0 then goto L2d675c;
  #L2d675a.  return v4 @kind object;
  #L2d675c.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d6762.  v0:= temp @kind object;
  #L2d6764.  call temp:= `body`(v0) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d676a.  v0:= temp @kind object;
  #L2d676c.  v0:= instanceof @variable v0 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2d6770.  if v0 == 0 then goto L2d6776;
  #L2d6774.  return v4 @kind object;
  #L2d6776.  call temp:= `priorResponse`(v7) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2d677c.  v0:= temp @kind object;
  #L2d677e.  if v0 == 0 then goto L2d6798;
  #L2d6782.  call temp:= `priorResponse`(v7) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2d6788.  v0:= temp @kind object;
  #L2d678a.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L2d6790.  v0:= temp;
  #L2d6792.  if v0 != v8 then goto L2d6798;
  #L2d6796.  return v4 @kind object;
  #L2d6798.  v8:= 0I;
  #L2d679a.  call temp:= `retryAfter`(v6, v7, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L2d67a0.  v8:= temp;
  #L2d67a2.  if v8 <= 0 then goto L2d67a8;
  #L2d67a6.  return v4 @kind object;
  #L2d67a8.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d67ae.  v7:= temp @kind object;
  #L2d67b0.  return v7 @kind object;
  #L2d67b2.  if v8 == 0 then goto L2d67c0;
  #L2d67b6.  call temp:= `proxy`(v8) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2d67bc.  v0:= temp @kind object;
  #L2d67be.  goto L2d67cc;
  #L2d67c0.  v0:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d67c4.  call temp:= `proxy`(v0) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2d67ca.  v0:= temp @kind object;
  #L2d67cc.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L2d67d2.  v0:= temp @kind object;
  #L2d67d4.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L2d67d8.  if v0 != v1 then goto L2d67f2;
  #L2d67dc.  v0:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d67e0.  call temp:= `proxyAuthenticator`(v0) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2d67e6.  v0:= temp @kind object;
  #L2d67e8.  call temp:= `authenticate`(v0, v8, v7) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L2d67ee.  v7:= temp @kind object;
  #L2d67f0.  return v7 @kind object;
  #L2d67f2.  v7:= new `java.net.ProtocolException`;
  #L2d67f6.  v8:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L2d67fa.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d6800.  throw v7;
  #L2d6802.  call temp:= `priorResponse`(v7) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2d6808.  v8:= temp @kind object;
  #L2d680a.  if v8 == 0 then goto L2d6824;
  #L2d680e.  call temp:= `priorResponse`(v7) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2d6814.  v8:= temp @kind object;
  #L2d6816.  call temp:= `code`(v8) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L2d681c.  v8:= temp;
  #L2d681e.  if v8 != v2 then goto L2d6824;
  #L2d6822.  return v4 @kind object;
  #L2d6824.  v8:= 2147483647I;
  #L2d682a.  call temp:= `retryAfter`(v6, v7, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L2d6830.  v8:= temp;
  #L2d6832.  if v8 != 0 then goto L2d6840;
  #L2d6836.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d683c.  v7:= temp @kind object;
  #L2d683e.  return v7 @kind object;
  #L2d6840.  return v4 @kind object;
  #L2d6842.  v0:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6846.  call temp:= `authenticator`(v0) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2d684c.  v0:= temp @kind object;
  #L2d684e.  call temp:= `authenticate`(v0, v8, v7) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L2d6854.  v7:= temp @kind object;
  #L2d6856.  return v7 @kind object;
  #L2d6858.  call temp:= `equals`(v1, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d685e.  v8:= temp;
  #L2d6860.  if v8 != 0 then goto L2d6876;
  #L2d6864.  v8:= "HEAD" @kind object;
  #L2d6868.  call temp:= `equals`(v1, v8) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d686e.  v8:= temp;
  #L2d6870.  if v8 != 0 then goto L2d6876;
  #L2d6874.  return v4 @kind object;
  #L2d6876.  v8:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d687a.  call temp:= `followRedirects`(v8) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L2d6880.  v8:= temp;
  #L2d6882.  if v8 != 0 then goto L2d6888;
  #L2d6886.  return v4 @kind object;
  #L2d6888.  v8:= "Location" @kind object;
  #L2d688c.  call temp:= `header`(v7, v8) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d6892.  v8:= temp @kind object;
  #L2d6894.  if v8 != 0 then goto L2d689a;
  #L2d6898.  return v4 @kind object;
  #L2d689a.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d68a0.  v0:= temp @kind object;
  #L2d68a2.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d68a8.  v0:= temp @kind object;
  #L2d68aa.  call temp:= `resolve`(v0, v8) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L2d68b0.  v8:= temp @kind object;
  #L2d68b2.  if v8 != 0 then goto L2d68b8;
  #L2d68b6.  return v4 @kind object;
  #L2d68b8.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2d68be.  v0:= temp @kind object;
  #L2d68c0.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d68c6.  v2:= temp @kind object;
  #L2d68c8.  call temp:= `url`(v2) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d68ce.  v2:= temp @kind object;
  #L2d68d0.  call temp:= `scheme`(v2) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2d68d6.  v2:= temp @kind object;
  #L2d68d8.  call temp:= `equals`(v0, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d68de.  v0:= temp;
  #L2d68e0.  if v0 != 0 then goto L2d68f6;
  #L2d68e4.  v0:= v6.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d68e8.  call temp:= `followSslRedirects`(v0) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L2d68ee.  v0:= temp;
  #L2d68f0.  if v0 != 0 then goto L2d68f6;
  #L2d68f4.  return v4 @kind object;
  #L2d68f6.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d68fc.  v0:= temp @kind object;
  #L2d68fe.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6904.  v0:= temp @kind object;
  #L2d6906.  call temp:= `permitsRequestBody`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L2d690c.  v2:= temp;
  #L2d690e.  if v2 == 0 then goto L2d696a;
  #L2d6912.  call temp:= `redirectsWithBody`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L2d6918.  v2:= temp;
  #L2d691a.  call temp:= `redirectsToGet`(v1) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L2d6920.  v5:= temp;
  #L2d6922.  if v5 == 0 then goto L2d692e;
  #L2d6926.  call temp:= `method`(v0, v3, v4) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d692c.  goto L2d6948;
  #L2d692e.  if v2 == 0 then goto L2d6942;
  #L2d6932.  call temp:= `request`(v7) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d6938.  v3:= temp @kind object;
  #L2d693a.  call temp:= `body`(v3) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d6940.  v4:= temp @kind object;
  #L2d6942.  call temp:= `method`(v0, v1, v4) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6948.  if v2 != 0 then goto L2d696a;
  #L2d694c.  v1:= "Transfer-Encoding" @kind object;
  #L2d6950.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6956.  v1:= "Content-Length" @kind object;
  #L2d695a.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6960.  v1:= "Content-Type" @kind object;
  #L2d6964.  call temp:= `removeHeader`(v0, v1) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d696a.  call temp:= `sameConnection`(v6, v7, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L2d6970.  v7:= temp;
  #L2d6972.  if v7 != 0 then goto L2d6980;
  #L2d6976.  v7:= "Authorization" @kind object;
  #L2d697a.  call temp:= `removeHeader`(v0, v7) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6980.  call temp:= `url`(v0, v8) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2d6986.  v7:= temp @kind object;
  #L2d6988.  call temp:= `build`(v7) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2d698e.  v7:= temp @kind object;
  #L2d6990.  return v7 @kind object;
  #L2d6992.  v7:= new `java.lang.IllegalStateException`;
  #L2d6996.  call `<init>`(v7) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2d699c.  throw v7;
  #L2d699e.  
  #L2d69a0.  switch v0
                  | 300 => goto L2d6876
                  | 301 => goto L2d6876
                  | 302 => goto L2d6876
                  | 303 => goto L2d6876
                  | else => goto L2d6748;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object, `boolean` v5 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2d64ac.  v0:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L2d64b0.  v1:= 0I;
  #L2d64b2.  if v0 == 0 then goto L2d64b8;
  #L2d64b6.  return v1;
  #L2d64b8.  v0:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L2d64bc.  v2:= 1I;
  #L2d64be.  if v0 == 0 then goto L2d64d2;
  #L2d64c2.  v4:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L2d64c6.  if v4 == 0 then goto L2d64d0;
  #L2d64ca.  if v5 != 0 then goto L2d64d0;
  #L2d64ce.  v1:= 1I;
  #L2d64d0.  return v1;
  #L2d64d2.  v5:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L2d64d6.  if v5 == 0 then goto L2d64ec;
  #L2d64da.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L2d64e0.  v5:= temp @kind object;
  #L2d64e2.  v5:= instanceof @variable v5 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L2d64e6.  if v5 == 0 then goto L2d64ec;
  #L2d64ea.  return v1;
  #L2d64ec.  v4:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L2d64f0.  if v4 == 0 then goto L2d64f6;
  #L2d64f4.  return v1;
  #L2d64f6.  return v2;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object, `okhttp3.internal.connection.StreamAllocation` v4 @kind object, `boolean` v5 , `okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d6508.  call `streamFailed`(v4, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2d650e.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6512.  call temp:= `retryOnConnectionFailure`(v0) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2d6518.  v0:= temp;
  #L2d651a.  v1:= 0I;
  #L2d651c.  if v0 != 0 then goto L2d6522;
  #L2d6520.  return v1;
  #L2d6522.  if v5 == 0 then goto L2d6538;
  #L2d6526.  call temp:= `body`(v6) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d652c.  v6:= temp @kind object;
  #L2d652e.  v6:= instanceof @variable v6 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2d6532.  if v6 == 0 then goto L2d6538;
  #L2d6536.  return v1;
  #L2d6538.  call temp:= `isRecoverable`(v2, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L2d653e.  v3:= temp;
  #L2d6540.  if v3 != 0 then goto L2d6546;
  #L2d6544.  return v1;
  #L2d6546.  call temp:= `hasMoreRoutes`(v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L2d654c.  v3:= temp;
  #L2d654e.  if v3 != 0 then goto L2d6554;
  #L2d6552.  return v1;
  #L2d6554.  v3:= 1I;
  #L2d6556.  return v3;
}
procedure `int` `retryAfter`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this, `okhttp3.Response` v2 @kind object, `int` v3 ) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2d65dc.  v0:= "Retry-After" @kind object;
  #L2d65e0.  call temp:= `header`(v2, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d65e6.  v2:= temp @kind object;
  #L2d65e8.  if v2 != 0 then goto L2d65ee;
  #L2d65ec.  return v3;
  #L2d65ee.  v3:= "\\d+" @kind object;
  #L2d65f2.  call temp:= `matches`(v2, v3) @signature `Ljava/lang/String;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L2d65f8.  v3:= temp;
  #L2d65fa.  if v3 == 0 then goto L2d6610;
  #L2d65fe.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L2d6604.  v2:= temp @kind object;
  #L2d6606.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2d660c.  v2:= temp;
  #L2d660e.  return v2;
  #L2d6610.  v2:= 2147483647I;
  #L2d6616.  return v2;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d6568.  call temp:= `request`(v3) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2d656e.  v3:= temp @kind object;
  #L2d6570.  call temp:= `url`(v3) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d6576.  v3:= temp @kind object;
  #L2d6578.  call temp:= `host`(v3) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2d657e.  v0:= temp @kind object;
  #L2d6580.  call temp:= `host`(v4) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2d6586.  v1:= temp @kind object;
  #L2d6588.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d658e.  v0:= temp;
  #L2d6590.  if v0 == 0 then goto L2d65c8;
  #L2d6594.  call temp:= `port`(v3) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2d659a.  v0:= temp;
  #L2d659c.  call temp:= `port`(v4) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L2d65a2.  v1:= temp;
  #L2d65a4.  if v0 != v1 then goto L2d65c8;
  #L2d65a8.  call temp:= `scheme`(v3) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2d65ae.  v3:= temp @kind object;
  #L2d65b0.  call temp:= `scheme`(v4) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2d65b6.  v4:= temp @kind object;
  #L2d65b8.  call temp:= `equals`(v3, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d65be.  v3:= temp;
  #L2d65c0.  if v3 == 0 then goto L2d65c8;
  #L2d65c4.  v3:= 1I;
  #L2d65c6.  goto L2d65ca;
  #L2d65c8.  v3:= 0I;
  #L2d65ca.  return v3;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d6c88.  v0:= 1I;
  #L2d6c8a.  v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v0 @kind boolean;
  #L2d6c8e.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2d6c92.  if v0 == 0 then goto L2d6c9c;
  #L2d6c96.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L2d6c9c.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v14 @kind this, `okhttp3.Interceptor$Chain` v15 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2d69c8.  call temp:= `request`(v15) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L2d69ce.  v0:= temp @kind object;
  #L2d69d0.  v15:= (`okhttp3.internal.http.RealInterceptorChain`) v15 @kind object;
  #L2d69d4.  call temp:= `call`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L2d69da.  v7:= temp @kind object;
  #L2d69dc.  call temp:= `eventListener`(v15) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L2d69e2.  v8:= temp @kind object;
  #L2d69e4.  v9:= new `okhttp3.internal.connection.StreamAllocation`;
  #L2d69e8.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d69ec.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L2d69f2.  v2:= temp @kind object;
  #L2d69f4.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d69fa.  v1:= temp @kind object;
  #L2d69fc.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L2d6a02.  v3:= temp @kind object;
  #L2d6a04.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2d6a08.  v1:= v9 @kind object;
  #L2d6a0a.  v4:= v7 @kind object;
  #L2d6a0c.  v5:= v8 @kind object;
  #L2d6a0e.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2d6a14.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v9 @kind object;
  #L2d6a18.  v10:= 0I;
  #L2d6a1a.  v11:= 0I;
  #L2d6a1c.  v1:= v11 @kind object;
  #L2d6a1e.  v2:= 0I;
  #L2d6a20.  v3:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L2d6a24.  if v3 != 0 then goto L2d6bfa;
  #L2d6a28.  call temp:= `proceed`(v15, v0, v9, v11, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #L2d6a2e.  v0:= temp @kind object;
  #L2d6a30.  if v1 == 0 then goto L2d6a64;
  #L2d6a34.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2d6a3a.  v0:= temp @kind object;
  #L2d6a3c.  call temp:= `newBuilder`(v1) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L2d6a42.  v1:= temp @kind object;
  #L2d6a44.  call temp:= `body`(v1, v11) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d6a4a.  v1:= temp @kind object;
  #L2d6a4c.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L2d6a52.  v1:= temp @kind object;
  #L2d6a54.  call temp:= `priorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d6a5a.  v0:= temp @kind object;
  #L2d6a5c.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L2d6a62.  v0:= temp @kind object;
  #L2d6a64.  call temp:= `route`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.route:()Lokhttp3/Route;` @kind virtual;
  #L2d6a6a.  v1:= temp @kind object;
  #L2d6a6c.  call temp:= `followUpRequest`(v14, v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @kind direct;
  #L2d6a72.  v12:= temp @kind object;
  #L2d6a74.  if v12 != 0 then goto L2d6a80;
  #L2d6a78.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6a7e.  return v0 @kind object;
  #L2d6a80.  call temp:= `body`(v0) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2d6a86.  v1:= temp @kind object;
  #L2d6a88.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L2d6a8e.  v13:= v2 + 1;
  #L2d6a92.  v1:= 20I;
  #L2d6a96.  if v13 > v1 then goto L2d6b64;
  #L2d6a9a.  call temp:= `body`(v12) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d6aa0.  v1:= temp @kind object;
  #L2d6aa2.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2d6aa6.  if v1 != 0 then goto L2d6b46;
  #L2d6aaa.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d6ab0.  v1:= temp @kind object;
  #L2d6ab2.  call temp:= `sameConnection`(v14, v0, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L2d6ab8.  v1:= temp;
  #L2d6aba.  if v1 != 0 then goto L2d6afa;
  #L2d6abe.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6ac4.  v9:= new `okhttp3.internal.connection.StreamAllocation`;
  #L2d6ac8.  v1:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2d6acc.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L2d6ad2.  v2:= temp @kind object;
  #L2d6ad4.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d6ada.  v1:= temp @kind object;
  #L2d6adc.  call temp:= `createAddress`(v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L2d6ae2.  v3:= temp @kind object;
  #L2d6ae4.  v6:= v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2d6ae8.  v1:= v9 @kind object;
  #L2d6aea.  v4:= v7 @kind object;
  #L2d6aec.  v5:= v8 @kind object;
  #L2d6aee.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2d6af4.  v14.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v9 @kind object;
  #L2d6af8.  goto L2d6b06;
  #L2d6afa.  call temp:= `codec`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L2d6b00.  v1:= temp @kind object;
  #L2d6b02.  if v1 != 0 then goto L2d6b0e;
  #L2d6b06.  v1:= v0 @kind object;
  #L2d6b08.  v0:= v12 @kind object;
  #L2d6b0a.  v2:= v13;
  #L2d6b0c.  goto L2d6a20;
  #L2d6b0e.  v15:= new `java.lang.IllegalStateException`;
  #L2d6b12.  v1:= new `java.lang.StringBuilder`;
  #L2d6b16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d6b1c.  v2:= "Closing the body of " @kind object;
  #L2d6b20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d6b26.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d6b2c.  v0:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L2d6b30.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d6b36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d6b3c.  v0:= temp @kind object;
  #L2d6b3e.  call `<init>`(v15, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d6b44.  throw v15;
  #L2d6b46.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6b4c.  v15:= new `java.net.HttpRetryException`;
  #L2d6b50.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L2d6b56.  v0:= temp;
  #L2d6b58.  v1:= "Cannot retry streamed HTTP body" @kind object;
  #L2d6b5c.  call `<init>`(v15, v1, v0) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L2d6b62.  throw v15;
  #L2d6b64.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6b6a.  v15:= new `java.net.ProtocolException`;
  #L2d6b6e.  v0:= new `java.lang.StringBuilder`;
  #L2d6b72.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d6b78.  v1:= "Too many follow-up requests: " @kind object;
  #L2d6b7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d6b82.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d6b88.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d6b8e.  v0:= temp @kind object;
  #L2d6b90.  call `<init>`(v15, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d6b96.  throw v15;
  #L2d6b98.  v15:= Exception @type ^`java.io.IOException` @kind object;
  #L2d6b9a.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6ba0.  throw v15;
  #L2d6ba2.  v15:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d6ba4.  goto L2d6bec;
  #L2d6ba6.  v3:= Exception @type ^`java.io.IOException` @kind object;
  #L2d6ba8.  v4:= instanceof @variable v3 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L2d6bac.  if v4 != 0 then goto L2d6bb4;
  #L2d6bb0.  v4:= 1I;
  #L2d6bb2.  goto L2d6bb6;
  #L2d6bb4.  v4:= 0I;
  #L2d6bb6.  call temp:= `recover`(v14, v3, v9, v4, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L2d6bbc.  v4:= temp;
  #L2d6bbe.  if v4 == 0 then goto L2d6bc6;
  #L2d6bc2.  goto L2d6a20;
  #L2d6bc6.  throw v3;
  #L2d6bc8.  v3:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #L2d6bca.  call temp:= `getLastConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L2d6bd0.  v4:= temp @kind object;
  #L2d6bd2.  call temp:= `recover`(v14, v4, v9, v10, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L2d6bd8.  v4:= temp;
  #L2d6bda.  if v4 == 0 then goto L2d6be2;
  #L2d6bde.  goto L2d6a20;
  #L2d6be2.  call temp:= `getFirstConnectException`(v3) @signature `Lokhttp3/internal/connection/RouteException;.getFirstConnectException:()Ljava/io/IOException;` @kind virtual;
  #L2d6be8.  v15:= temp @kind object;
  #L2d6bea.  throw v15;
  #L2d6bec.  call `streamFailed`(v9, v11) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2d6bf2.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6bf8.  throw v15;
  #L2d6bfa.  call `release`(v9) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2d6c00.  v15:= new `java.io.IOException`;
  #L2d6c04.  v0:= "Canceled" @kind object;
  #L2d6c08.  call `<init>`(v15, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d6c0e.  goto L2d6c12;
  #L2d6c10.  throw v15;
  #L2d6c12.  goto L2d6c10;
  catch `okhttp3.internal.connection.RouteException` @[L2d6a28..L2d6a30] goto L2d6bc8;
  catch `java.io.IOException` @[L2d6a28..L2d6a30] goto L2d6ba6;
  catch `java.lang.Throwable` @[L2d6a28..L2d6a30] goto L2d6ba2;
  catch `java.io.IOException` @[L2d6a64..L2d6a74] goto L2d6b98;
  catch `java.lang.Throwable` @[L2d6ba8..L2d6bec] goto L2d6ba2;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d6494.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L2d6498.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L2d6cb0.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L2d6cb4.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d6c50.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2d6c54.  return v0 @kind object;
}
