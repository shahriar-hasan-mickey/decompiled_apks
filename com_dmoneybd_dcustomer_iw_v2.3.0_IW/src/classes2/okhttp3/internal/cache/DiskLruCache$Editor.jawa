record `okhttp3.internal.cache.DiskLruCache$Editor` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.internal.cache.DiskLruCache$Entry` `okhttp3.internal.cache.DiskLruCache$Editor.a` @AccessFlag FINAL;
  `boolean`[] `okhttp3.internal.cache.DiskLruCache$Editor.b` @AccessFlag FINAL;
  `okhttp3.internal.cache.DiskLruCache` `okhttp3.internal.cache.DiskLruCache$Editor.c` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `okhttp3.internal.cache.DiskLruCache$Editor.done` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.DiskLruCache$Editor` v0 @kind this, `okhttp3.internal.cache.DiskLruCache` v1 @kind object, `okhttp3.internal.cache.DiskLruCache$Entry` v2 @kind object) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.<init>:(Lokhttp3/internal/cache/DiskLruCache;Lokhttp3/internal/cache/DiskLruCache$Entry;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d2b38.  v0.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` := v1 @kind object;
  #L2d2b3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d2b42.  v0.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` := v2 @kind object;
  #L2d2b46.  v2:= v2.`okhttp3.internal.cache.DiskLruCache$Entry.e` @type ^`boolean` @kind boolean;
  #L2d2b4a.  if v2 == 0 then goto L2d2b52;
  #L2d2b4e.  v1:= 0I;
  #L2d2b50.  goto L2d2b5a;
  #L2d2b52.  v1:= v1.`okhttp3.internal.cache.DiskLruCache.d` @type ^`int`;
  #L2d2b56.  v1:= new `boolean`[v1];
  #L2d2b5a.  v0.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean`[] := v1 @kind object;
  #L2d2b5e.  return @kind void;
}
procedure `void` `a`(`okhttp3.internal.cache.DiskLruCache$Editor` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2d2c8c.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2c90.  v0:= v0.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2c94.  if v0 != v3 then goto L2d2ccc;
  #L2d2c98.  v0:= 0I;
  #L2d2c9a.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2c9e.  v2:= v1.`okhttp3.internal.cache.DiskLruCache.d` @type ^`int`;
  #L2d2ca2.  if v0 >= v2 then goto L2d2cc2;
  #L2d2ca6.  v1:= v1.`okhttp3.internal.cache.DiskLruCache.b` @type ^`okhttp3.internal.io.FileSystem` @kind object;
  #L2d2caa.  v2:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2cae.  v2:= v2.`okhttp3.internal.cache.DiskLruCache$Entry.d` @type ^`java.io.File`[] @kind object;
  #L2d2cb2.  v2:= v2[v0] @kind object;
  #L2d2cb6.  call `delete`(v1, v2) @signature `Lokhttp3/internal/io/FileSystem;.delete:(Ljava/io/File;)V` @kind interface;
  #L2d2cbc.  v0:= v0 + 1;
  #L2d2cc0.  goto L2d2c9a;
  #L2d2cc2.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2cc6.  v1:= 0I;
  #L2d2cc8.  v0.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` := v1 @kind object;
  #L2d2ccc.  return @kind void;
  catch `java.io.IOException` @[L2d2ca6..L2d2cbc] goto L2d2cbc;
}
procedure `void` `abort`(`okhttp3.internal.cache.DiskLruCache$Editor` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.abort:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d2b70.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2b74.  @monitorenter v0
  #L2d2b76.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` @kind boolean;
  #L2d2b7a.  if v1 != 0 then goto L2d2ba0;
  #L2d2b7e.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2b82.  v1:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2b86.  if v1 != v3 then goto L2d2b96;
  #L2d2b8a.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2b8e.  v2:= 0I;
  #L2d2b90.  call `a`(v1, v3, v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.a:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L2d2b96.  v1:= 1I;
  #L2d2b98.  v3.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` := v1 @kind boolean;
  #L2d2b9c.  @monitorexit v0
  #L2d2b9e.  return @kind void;
  #L2d2ba0.  v1:= new `java.lang.IllegalStateException`;
  #L2d2ba4.  call `<init>`(v1) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2d2baa.  throw v1;
  #L2d2bac.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d2bae.  @monitorexit v0
  #L2d2bb0.  throw v1;
  catch `java.lang.Throwable` @[L2d2b76..L2d2bb0] goto L2d2bac;
}
procedure `void` `abortUnlessCommitted`(`okhttp3.internal.cache.DiskLruCache$Editor` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.abortUnlessCommitted:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d2bd0.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2bd4.  @monitorenter v0
  #L2d2bd6.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` @kind boolean;
  #L2d2bda.  if v1 != 0 then goto L2d2bf6;
  #L2d2bde.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2be2.  v1:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2be6.  if v1 != v3 then goto L2d2bf6;
  #L2d2bea.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2bee.  v2:= 0I;
  #L2d2bf0.  call `a`(v1, v3, v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.a:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L2d2bf6.  @monitorexit v0
  #L2d2bf8.  return @kind void;
  #L2d2bfa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d2bfc.  @monitorexit v0
  #L2d2bfe.  throw v1;
  catch `java.lang.Throwable` @[L2d2bd6..L2d2be6] goto L2d2bfa;
  catch `java.io.IOException` @[L2d2bea..L2d2bf6] goto L2d2bf6;
  catch `java.lang.Throwable` @[L2d2bea..L2d2bf6] goto L2d2bfa;
  catch `java.lang.Throwable` @[L2d2bf6..L2d2bfe] goto L2d2bfa;
}
procedure `void` `commit`(`okhttp3.internal.cache.DiskLruCache$Editor` v3 @kind this) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.commit:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d2c30.  v0:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2c34.  @monitorenter v0
  #L2d2c36.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` @kind boolean;
  #L2d2c3a.  if v1 != 0 then goto L2d2c5e;
  #L2d2c3e.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2c42.  v1:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2c46.  v2:= 1I;
  #L2d2c48.  if v1 != v3 then goto L2d2c56;
  #L2d2c4c.  v1:= v3.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2c50.  call `a`(v1, v3, v2) @signature `Lokhttp3/internal/cache/DiskLruCache;.a:(Lokhttp3/internal/cache/DiskLruCache$Editor;Z)V` @kind virtual;
  #L2d2c56.  v3.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` := v2 @kind boolean;
  #L2d2c5a.  @monitorexit v0
  #L2d2c5c.  return @kind void;
  #L2d2c5e.  v1:= new `java.lang.IllegalStateException`;
  #L2d2c62.  call `<init>`(v1) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2d2c68.  throw v1;
  #L2d2c6a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d2c6c.  @monitorexit v0
  #L2d2c6e.  throw v1;
  catch `java.lang.Throwable` @[L2d2c36..L2d2c6e] goto L2d2c6a;
}
procedure `okio.Sink` `newSink`(`okhttp3.internal.cache.DiskLruCache$Editor` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.newSink:(I)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d2a00.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2a04.  @monitorenter v0
  #L2d2a06.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` @kind boolean;
  #L2d2a0a.  if v1 != 0 then goto L2d2a6a;
  #L2d2a0e.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2a12.  v2:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2a16.  if v2 == v4 then goto L2d2a26;
  #L2d2a1a.  call temp:= `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @kind static;
  #L2d2a20.  v5:= temp @kind object;
  #L2d2a22.  @monitorexit v0
  #L2d2a24.  return v5 @kind object;
  #L2d2a26.  v2:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.e` @type ^`boolean` @kind boolean;
  #L2d2a2a.  if v2 != 0 then goto L2d2a38;
  #L2d2a2e.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.b` @type ^`boolean`[] @kind object;
  #L2d2a32.  v3:= 1I;
  #L2d2a34.  v2[v5]:= v3 @kind boolean;
  #L2d2a38.  v1:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.d` @type ^`java.io.File`[] @kind object;
  #L2d2a3c.  v5:= v1[v5] @kind object;
  #L2d2a40.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2a44.  v1:= v1.`okhttp3.internal.cache.DiskLruCache.b` @type ^`okhttp3.internal.io.FileSystem` @kind object;
  #L2d2a48.  call temp:= `sink`(v1, v5) @signature `Lokhttp3/internal/io/FileSystem;.sink:(Ljava/io/File;)Lokio/Sink;` @kind interface;
  #L2d2a4e.  v5:= temp @kind object;
  #L2d2a50.  v1:= new `okhttp3.internal.cache.DiskLruCache$Editor$1`;
  #L2d2a54.  call `<init>`(v1, v4, v5) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor$1;.<init>:(Lokhttp3/internal/cache/DiskLruCache$Editor;Lokio/Sink;)V` @kind direct;
  #L2d2a5a.  @monitorexit v0
  #L2d2a5c.  return v1 @kind object;
  #L2d2a5e.  call temp:= `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @kind static;
  #L2d2a64.  v5:= temp @kind object;
  #L2d2a66.  @monitorexit v0
  #L2d2a68.  return v5 @kind object;
  #L2d2a6a.  v5:= new `java.lang.IllegalStateException`;
  #L2d2a6e.  call `<init>`(v5) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2d2a74.  throw v5;
  #L2d2a76.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d2a78.  @monitorexit v0
  #L2d2a7a.  throw v5;
  catch `java.lang.Throwable` @[L2d2a06..L2d2a40] goto L2d2a76;
  catch `java.io.FileNotFoundException` @[L2d2a40..L2d2a50] goto L2d2a5e;
  catch `java.lang.Throwable` @[L2d2a40..L2d2a50] goto L2d2a76;
  catch `java.lang.Throwable` @[L2d2a50..L2d2a7a] goto L2d2a76;
}
procedure `okio.Source` `newSource`(`okhttp3.internal.cache.DiskLruCache$Editor` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/cache/DiskLruCache$Editor;.newSource:(I)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d2aac.  v0:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2ab0.  @monitorenter v0
  #L2d2ab2.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.done` @type ^`boolean` @kind boolean;
  #L2d2ab6.  if v1 != 0 then goto L2d2af6;
  #L2d2aba.  v1:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.a` @type ^`okhttp3.internal.cache.DiskLruCache$Entry` @kind object;
  #L2d2abe.  v2:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.e` @type ^`boolean` @kind boolean;
  #L2d2ac2.  v3:= 0I;
  #L2d2ac4.  if v2 == 0 then goto L2d2af2;
  #L2d2ac8.  v2:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.f` @type ^`okhttp3.internal.cache.DiskLruCache$Editor` @kind object;
  #L2d2acc.  if v2 == v4 then goto L2d2ad2;
  #L2d2ad0.  goto L2d2af2;
  #L2d2ad2.  v2:= v4.`okhttp3.internal.cache.DiskLruCache$Editor.c` @type ^`okhttp3.internal.cache.DiskLruCache` @kind object;
  #L2d2ad6.  v2:= v2.`okhttp3.internal.cache.DiskLruCache.b` @type ^`okhttp3.internal.io.FileSystem` @kind object;
  #L2d2ada.  v1:= v1.`okhttp3.internal.cache.DiskLruCache$Entry.c` @type ^`java.io.File`[] @kind object;
  #L2d2ade.  v5:= v1[v5] @kind object;
  #L2d2ae2.  call temp:= `source`(v2, v5) @signature `Lokhttp3/internal/io/FileSystem;.source:(Ljava/io/File;)Lokio/Source;` @kind interface;
  #L2d2ae8.  v5:= temp @kind object;
  #L2d2aea.  @monitorexit v0
  #L2d2aec.  return v5 @kind object;
  #L2d2aee.  @monitorexit v0
  #L2d2af0.  return v3 @kind object;
  #L2d2af2.  @monitorexit v0
  #L2d2af4.  return v3 @kind object;
  #L2d2af6.  v5:= new `java.lang.IllegalStateException`;
  #L2d2afa.  call `<init>`(v5) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L2d2b00.  throw v5;
  #L2d2b02.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2d2b04.  @monitorexit v0
  #L2d2b06.  throw v5;
  catch `java.lang.Throwable` @[L2d2ab2..L2d2acc] goto L2d2b02;
  catch `java.io.FileNotFoundException` @[L2d2ad2..L2d2aea] goto L2d2aee;
  catch `java.lang.Throwable` @[L2d2ad2..L2d2aea] goto L2d2b02;
  catch `java.lang.Throwable` @[L2d2aea..L2d2b06] goto L2d2b02;
}
