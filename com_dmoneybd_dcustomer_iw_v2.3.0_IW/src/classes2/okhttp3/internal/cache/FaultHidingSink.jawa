record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d2f7c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L2d2f82.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d2f94.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L2d2f98.  if v0 == 0 then goto L2d2f9e;
  #L2d2f9c.  return @kind void;
  #L2d2f9e.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #L2d2fa4.  goto L2d2fb4;
  #L2d2fa6.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2d2fa8.  v1:= 1I;
  #L2d2faa.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L2d2fae.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L2d2fb4.  return @kind void;
  catch `java.io.IOException` @[L2d2f9e..L2d2fa4] goto L2d2fa6;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d2fd8.  v0:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L2d2fdc.  if v0 == 0 then goto L2d2fe2;
  #L2d2fe0.  return @kind void;
  #L2d2fe2.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #L2d2fe8.  goto L2d2ff8;
  #L2d2fea.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2d2fec.  v1:= 1I;
  #L2d2fee.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L2d2ff2.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L2d2ff8.  return @kind void;
  catch `java.io.IOException` @[L2d2fe2..L2d2fe8] goto L2d2fea;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L2d301c.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v1 @kind this, `okio.Buffer` v2 @kind object, `long` v3 ) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d3030.  v0:= v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L2d3034.  if v0 == 0 then goto L2d3040;
  #L2d3038.  call `skip`(v2, v3) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L2d303e.  return @kind void;
  #L2d3040.  call `write`(v1, v2, v3) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L2d3046.  goto L2d3056;
  #L2d3048.  v2:= Exception @type ^`java.io.IOException` @kind object;
  #L2d304a.  v3:= 1I;
  #L2d304c.  v1.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v3 @kind boolean;
  #L2d3050.  call `onException`(v1, v2) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L2d3056.  return @kind void;
  catch `java.io.IOException` @[L2d3040..L2d3046] goto L2d3048;
}
