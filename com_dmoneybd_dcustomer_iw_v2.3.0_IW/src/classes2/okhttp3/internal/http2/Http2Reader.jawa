record `okhttp3.internal.http2.Http2Reader` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `okhttp3.internal.http2.Hpack$Reader` `okhttp3.internal.http2.Http2Reader.b` @AccessFlag FINAL;
  `boolean` `okhttp3.internal.http2.Http2Reader.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Reader$ContinuationSource` `okhttp3.internal.http2.Http2Reader.continuation` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okhttp3.internal.http2.Http2Reader.source` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Reader.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Reader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2db988.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L2db98c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L2db992.  v0:= temp @kind object;
  #L2db994.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L2db99a.  v0:= temp @kind object;
  #L2db99c.  `@@okhttp3.internal.http2.Http2Reader.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L2db9a0.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okio.BufferedSource` v2 @kind object, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2db9b4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2db9ba.  v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` := v2 @kind object;
  #L2db9be.  v1.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` := v3 @kind boolean;
  #L2db9c2.  v3:= new `okhttp3.internal.http2.Http2Reader$ContinuationSource`;
  #L2db9c6.  call `<init>`(v3, v2) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L2db9cc.  v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` := v3 @kind object;
  #L2db9d0.  v2:= new `okhttp3.internal.http2.Hpack$Reader`;
  #L2db9d4.  v0:= 4096I;
  #L2db9d8.  call `<init>`(v2, v0, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @kind direct;
  #L2db9de.  v1.`okhttp3.internal.http2.Http2Reader.b` @type ^`okhttp3.internal.http2.Hpack$Reader` := v2 @kind object;
  #L2db9e2.  return @kind void;
}
procedure `int` `a`(`int` v1 , `byte` v2 , `short` v3 ) @signature `Lokhttp3/internal/http2/Http2Reader;.a:(IBS)I` @AccessFlag STATIC {
    temp;
    v0;

  #L2db8ac.  v2:= v2 ^& 8;
  #L2db8b0.  if v2 == 0 then goto L2db8b8;
  #L2db8b4.  v1:= v1 + -1;
  #L2db8b8.  if v3 > v1 then goto L2db8c2;
  #L2db8bc.  v1:= v1 - v3 @kind int;
  #L2db8be.  v1:= (`short`) v1 @kind i2s;
  #L2db8c0.  return v1;
  #L2db8c2.  v2:= 2I;
  #L2db8c4.  v2:= new `java.lang.Object`[v2];
  #L2db8c8.  v0:= 0I;
  #L2db8ca.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L2db8d0.  v3:= temp @kind object;
  #L2db8d2.  v2[v0]:= v3 @kind object;
  #L2db8d6.  v3:= 1I;
  #L2db8d8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2db8de.  v1:= temp @kind object;
  #L2db8e0.  v2[v3]:= v1 @kind object;
  #L2db8e4.  v1:= "PROTOCOL_ERROR padding %s > remaining length %s" @kind object;
  #L2db8e8.  call temp:= `d`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2db8ee.  v1:= temp @kind object;
  #L2db8f0.  throw v1;
}
procedure `int` `b`(`okio.BufferedSource` v2 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.b:(Lokio/BufferedSource;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2db904.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2db90a.  v0:= temp;
  #L2db90c.  v0:= v0 ^& 255;
  #L2db910.  v0:= v0 ^< 16;
  #L2db914.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2db91a.  v1:= temp;
  #L2db91c.  v1:= v1 ^& 255;
  #L2db920.  v1:= v1 ^< 8;
  #L2db924.  v0:= v0 ^| v1 @kind int;
  #L2db926.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2db92c.  v2:= temp;
  #L2db92e.  v2:= v2 ^& 255;
  #L2db932.  v2:= v2 ^| v0 @kind int;
  #L2db934.  return v2;
}
procedure `void` `readData`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 , `byte` v7 , `int` v8 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dbac8.  v0:= 0I;
  #L2dbaca.  if v8 == 0 then goto L2dbb3a;
  #L2dbace.  v1:= v7 ^& 1;
  #L2dbad2.  v2:= 1I;
  #L2dbad4.  if v1 == 0 then goto L2dbadc;
  #L2dbad8.  v1:= 1I;
  #L2dbada.  goto L2dbade;
  #L2dbadc.  v1:= 0I;
  #L2dbade.  v3:= v7 ^& 32;
  #L2dbae2.  if v3 == 0 then goto L2dbae8;
  #L2dbae6.  goto L2dbaea;
  #L2dbae8.  v2:= 0I;
  #L2dbaea.  if v2 != 0 then goto L2dbb28;
  #L2dbaee.  v2:= v7 ^& 8;
  #L2dbaf2.  if v2 == 0 then goto L2dbb08;
  #L2dbaf6.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbafa.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2dbb00.  v0:= temp;
  #L2dbb02.  v0:= v0 ^& 255;
  #L2dbb06.  v0:= (`short`) v0 @kind i2s;
  #L2dbb08.  call temp:= `a`(v6, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.a:(IBS)I` @kind static;
  #L2dbb0e.  v6:= temp;
  #L2dbb10.  v7:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbb14.  call `data`(v5, v1, v8, v7, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.data:(ZILokio/BufferedSource;I)V` @kind interface;
  #L2dbb1a.  v5:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbb1e.  v6:= (`long`) v0 @kind i2l;
  #L2dbb20.  call `skip`(v5, v6) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2dbb26.  return @kind void;
  #L2dbb28.  v5:= new `java.lang.Object`[v0];
  #L2dbb2c.  v6:= "PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA" @kind object;
  #L2dbb30.  call temp:= `d`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbb36.  v5:= temp @kind object;
  #L2dbb38.  throw v5;
  #L2dbb3a.  v5:= new `java.lang.Object`[v0];
  #L2dbb3e.  v6:= "PROTOCOL_ERROR: TYPE_DATA streamId == 0" @kind object;
  #L2dbb42.  call temp:= `d`(v6, v5) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbb48.  v5:= temp @kind object;
  #L2dbb4a.  throw v5;
}
procedure `void` `readGoAway`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dbb5c.  v6:= 1I;
  #L2dbb5e.  v0:= 8I;
  #L2dbb62.  v1:= 0I;
  #L2dbb64.  if v5 < v0 then goto L2dbbe0;
  #L2dbb68.  if v7 != 0 then goto L2dbbce;
  #L2dbb6c.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbb70.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbb76.  v7:= temp;
  #L2dbb78.  v2:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbb7c.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbb82.  v2:= temp;
  #L2dbb84.  v5:= v5 - v0 @kind int;
  #L2dbb86.  call temp:= `fromHttp2`(v2) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L2dbb8c.  v0:= temp @kind object;
  #L2dbb8e.  if v0 == 0 then goto L2dbbb0;
  #L2dbb92.  v6:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L2dbb96.  if v5 <= 0 then goto L2dbba8;
  #L2dbb9a.  v6:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbb9e.  v1:= (`long`) v5 @kind i2l;
  #L2dbba0.  call temp:= `readByteString`(v6, v1) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L2dbba6.  v6:= temp @kind object;
  #L2dbba8.  call `goAway`(v4, v7, v0, v6) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @kind interface;
  #L2dbbae.  return @kind void;
  #L2dbbb0.  v4:= new `java.lang.Object`[v6];
  #L2dbbb4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbbba.  v5:= temp @kind object;
  #L2dbbbc.  v4[v1]:= v5 @kind object;
  #L2dbbc0.  v5:= "TYPE_GOAWAY unexpected error code: %d" @kind object;
  #L2dbbc4.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbbca.  v4:= temp @kind object;
  #L2dbbcc.  throw v4;
  #L2dbbce.  v4:= new `java.lang.Object`[v1];
  #L2dbbd2.  v5:= "TYPE_GOAWAY streamId != 0" @kind object;
  #L2dbbd6.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbbdc.  v4:= temp @kind object;
  #L2dbbde.  throw v4;
  #L2dbbe0.  v4:= new `java.lang.Object`[v6];
  #L2dbbe4.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbbea.  v5:= temp @kind object;
  #L2dbbec.  v4[v1]:= v5 @kind object;
  #L2dbbf0.  v5:= "TYPE_GOAWAY length < 8: %s" @kind object;
  #L2dbbf4.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbbfa.  v4:= temp @kind object;
  #L2dbbfc.  throw v4;
}
procedure `java.util.List` `readHeaderBlock`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `int` v2 , `short` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2db948.  v0:= v1.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L2db94c.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.d` @type ^`int` := v2;
  #L2db950.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.a` @type ^`int` := v2;
  #L2db954.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.e` @type ^`short` := v3 @kind char;
  #L2db958.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.b` @type ^`byte` := v4 @kind byte;
  #L2db95c.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.c` @type ^`int` := v5;
  #L2db960.  v2:= v1.`okhttp3.internal.http2.Http2Reader.b` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L2db964.  call `b`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.b:()V` @kind virtual;
  #L2db96a.  v2:= v1.`okhttp3.internal.http2.Http2Reader.b` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L2db96e.  call temp:= `getAndResetHeaderList`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @kind virtual;
  #L2db974.  v2:= temp @kind object;
  #L2db976.  return v2 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dbc10.  v0:= 0I;
  #L2dbc12.  if v7 == 0 then goto L2dbc6a;
  #L2dbc16.  v1:= v6 ^& 1;
  #L2dbc1a.  if v1 == 0 then goto L2dbc22;
  #L2dbc1e.  v1:= 1I;
  #L2dbc20.  goto L2dbc24;
  #L2dbc22.  v1:= 0I;
  #L2dbc24.  v2:= v6 ^& 8;
  #L2dbc28.  if v2 == 0 then goto L2dbc3e;
  #L2dbc2c.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbc30.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2dbc36.  v0:= temp;
  #L2dbc38.  v0:= v0 ^& 255;
  #L2dbc3c.  v0:= (`short`) v0 @kind i2s;
  #L2dbc3e.  v2:= v6 ^& 32;
  #L2dbc42.  if v2 == 0 then goto L2dbc50;
  #L2dbc46.  call `readPriority`(v3, v4, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L2dbc4c.  v5:= v5 + -5;
  #L2dbc50.  call temp:= `a`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.a:(IBS)I` @kind static;
  #L2dbc56.  v5:= temp;
  #L2dbc58.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L2dbc5e.  v5:= temp @kind object;
  #L2dbc60.  v6:= -1I;
  #L2dbc62.  call `headers`(v4, v1, v7, v6, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.headers:(ZIILjava/util/List;)V` @kind interface;
  #L2dbc68.  return @kind void;
  #L2dbc6a.  v4:= new `java.lang.Object`[v0];
  #L2dbc6e.  v5:= "PROTOCOL_ERROR: TYPE_HEADERS streamId == 0" @kind object;
  #L2dbc72.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbc78.  v4:= temp @kind object;
  #L2dbc7a.  throw v4;
}
procedure `void` `readPing`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dbc8c.  v0:= 0I;
  #L2dbc8e.  v1:= 1I;
  #L2dbc90.  v2:= 8I;
  #L2dbc94.  if v5 != v2 then goto L2dbcd6;
  #L2dbc98.  if v7 != 0 then goto L2dbcc4;
  #L2dbc9c.  v5:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbca0.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbca6.  v5:= temp;
  #L2dbca8.  v7:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbcac.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbcb2.  v7:= temp;
  #L2dbcb4.  v6:= v6 ^& v1 @kind int;
  #L2dbcb6.  if v6 == 0 then goto L2dbcbc;
  #L2dbcba.  v0:= 1I;
  #L2dbcbc.  call `ping`(v4, v0, v5, v7) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ping:(ZII)V` @kind interface;
  #L2dbcc2.  return @kind void;
  #L2dbcc4.  v4:= new `java.lang.Object`[v0];
  #L2dbcc8.  v5:= "TYPE_PING streamId != 0" @kind object;
  #L2dbccc.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbcd2.  v4:= temp @kind object;
  #L2dbcd4.  throw v4;
  #L2dbcd6.  v4:= new `java.lang.Object`[v1];
  #L2dbcda.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbce0.  v5:= temp @kind object;
  #L2dbce2.  v4[v0]:= v5 @kind object;
  #L2dbce6.  v5:= "TYPE_PING length != 8: %s" @kind object;
  #L2dbcea.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbcf0.  v4:= temp @kind object;
  #L2dbcf2.  throw v4;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object, `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2dbd04.  v0:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbd08.  call temp:= `readInt`(v0) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbd0e.  v0:= temp;
  #L2dbd10.  v1:= -2147483648I;
  #L2dbd14.  v1:= v1 ^& v0 @kind int;
  #L2dbd16.  v2:= 1I;
  #L2dbd18.  if v1 == 0 then goto L2dbd20;
  #L2dbd1c.  v1:= 1I;
  #L2dbd1e.  goto L2dbd22;
  #L2dbd20.  v1:= 0I;
  #L2dbd22.  v3:= 2147483647I;
  #L2dbd28.  v0:= v0 ^& v3 @kind int;
  #L2dbd2a.  v3:= v4.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbd2e.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2dbd34.  v3:= temp;
  #L2dbd36.  v3:= v3 ^& 255;
  #L2dbd3a.  v3:= v3 + v2 @kind int;
  #L2dbd3c.  call `priority`(v5, v6, v0, v3, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.priority:(IIIZ)V` @kind interface;
  #L2dbd42.  return @kind void;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v1 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v2 @kind object, `int` v3 , `byte` v4 , `int` v5 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2dbd54.  v4:= 0I;
  #L2dbd56.  v0:= 5I;
  #L2dbd58.  if v3 != v0 then goto L2dbd7a;
  #L2dbd5c.  if v5 == 0 then goto L2dbd68;
  #L2dbd60.  call `readPriority`(v1, v2, v5) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L2dbd66.  return @kind void;
  #L2dbd68.  v2:= new `java.lang.Object`[v4];
  #L2dbd6c.  v3:= "TYPE_PRIORITY streamId == 0" @kind object;
  #L2dbd70.  call temp:= `d`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbd76.  v2:= temp @kind object;
  #L2dbd78.  throw v2;
  #L2dbd7a.  v2:= 1I;
  #L2dbd7c.  v2:= new `java.lang.Object`[v2];
  #L2dbd80.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbd86.  v3:= temp @kind object;
  #L2dbd88.  v2[v4]:= v3 @kind object;
  #L2dbd8c.  v3:= "TYPE_PRIORITY length: %d != 5" @kind object;
  #L2dbd90.  call temp:= `d`(v3, v2) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbd96.  v2:= temp @kind object;
  #L2dbd98.  throw v2;
}
procedure `void` `readPushPromise`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v4 @kind object, `int` v5 , `byte` v6 , `int` v7 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2dbdac.  v0:= 0I;
  #L2dbdae.  if v7 == 0 then goto L2dbdfc;
  #L2dbdb2.  v1:= v6 ^& 8;
  #L2dbdb6.  if v1 == 0 then goto L2dbdcc;
  #L2dbdba.  v0:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbdbe.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2dbdc4.  v0:= temp;
  #L2dbdc6.  v0:= v0 ^& 255;
  #L2dbdca.  v0:= (`short`) v0 @kind i2s;
  #L2dbdcc.  v1:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbdd0.  call temp:= `readInt`(v1) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbdd6.  v1:= temp;
  #L2dbdd8.  v2:= 2147483647I;
  #L2dbdde.  v1:= v1 ^& v2 @kind int;
  #L2dbde0.  v5:= v5 + -4;
  #L2dbde4.  call temp:= `a`(v5, v6, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.a:(IBS)I` @kind static;
  #L2dbdea.  v5:= temp;
  #L2dbdec.  call temp:= `readHeaderBlock`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L2dbdf2.  v5:= temp @kind object;
  #L2dbdf4.  call `pushPromise`(v4, v7, v1, v5) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.pushPromise:(IILjava/util/List;)V` @kind interface;
  #L2dbdfa.  return @kind void;
  #L2dbdfc.  v4:= new `java.lang.Object`[v0];
  #L2dbe00.  v5:= "PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0" @kind object;
  #L2dbe04.  call temp:= `d`(v5, v4) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbe0a.  v4:= temp @kind object;
  #L2dbe0c.  throw v4;
}
procedure `void` `readRstStream`(`okhttp3.internal.http2.Http2Reader` v2 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v3 @kind object, `int` v4 , `byte` v5 , `int` v6 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2dbe20.  v5:= 1I;
  #L2dbe22.  v0:= 0I;
  #L2dbe24.  v1:= 4I;
  #L2dbe26.  if v4 != v1 then goto L2dbe7e;
  #L2dbe2a.  if v6 == 0 then goto L2dbe6c;
  #L2dbe2e.  v4:= v2.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbe32.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbe38.  v4:= temp;
  #L2dbe3a.  call temp:= `fromHttp2`(v4) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L2dbe40.  v1:= temp @kind object;
  #L2dbe42.  if v1 == 0 then goto L2dbe4e;
  #L2dbe46.  call `rstStream`(v3, v6, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind interface;
  #L2dbe4c.  return @kind void;
  #L2dbe4e.  v3:= new `java.lang.Object`[v5];
  #L2dbe52.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbe58.  v4:= temp @kind object;
  #L2dbe5a.  v3[v0]:= v4 @kind object;
  #L2dbe5e.  v4:= "TYPE_RST_STREAM unexpected error code: %d" @kind object;
  #L2dbe62.  call temp:= `d`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbe68.  v3:= temp @kind object;
  #L2dbe6a.  throw v3;
  #L2dbe6c.  v3:= new `java.lang.Object`[v0];
  #L2dbe70.  v4:= "TYPE_RST_STREAM streamId == 0" @kind object;
  #L2dbe74.  call temp:= `d`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbe7a.  v3:= temp @kind object;
  #L2dbe7c.  throw v3;
  #L2dbe7e.  v3:= new `java.lang.Object`[v5];
  #L2dbe82.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbe88.  v4:= temp @kind object;
  #L2dbe8a.  v3[v0]:= v4 @kind object;
  #L2dbe8e.  v4:= "TYPE_RST_STREAM length: %d != 4" @kind object;
  #L2dbe92.  call temp:= `d`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbe98.  v3:= temp @kind object;
  #L2dbe9a.  throw v3;
}
procedure `void` `readSettings`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object, `int` v8 , `byte` v9 , `int` v10 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2dbeac.  v0:= 0I;
  #L2dbeae.  if v10 != 0 then goto L2dbfc8;
  #L2dbeb2.  v10:= 1I;
  #L2dbeb4.  v9:= v9 ^& v10 @kind int;
  #L2dbeb6.  if v9 == 0 then goto L2dbed8;
  #L2dbeba.  if v8 != 0 then goto L2dbec6;
  #L2dbebe.  call `ackSettings`(v7) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ackSettings:()V` @kind interface;
  #L2dbec4.  return @kind void;
  #L2dbec6.  v7:= new `java.lang.Object`[v0];
  #L2dbeca.  v8:= "FRAME_SIZE_ERROR ack frame should be empty!" @kind object;
  #L2dbece.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbed4.  v7:= temp @kind object;
  #L2dbed6.  throw v7;
  #L2dbed8.  v9:= v8 %% 6;
  #L2dbedc.  if v9 != 0 then goto L2dbfaa;
  #L2dbee0.  v9:= new `okhttp3.internal.http2.Settings`;
  #L2dbee4.  call `<init>`(v9) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L2dbeea.  v1:= 0I;
  #L2dbeec.  if v1 >= v8 then goto L2dbfa2;
  #L2dbef0.  v2:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbef4.  call temp:= `readShort`(v2) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L2dbefa.  v2:= temp;
  #L2dbefc.  v3:= 65535I;
  #L2dbf02.  v2:= v2 ^& v3 @kind int;
  #L2dbf04.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbf08.  call temp:= `readInt`(v3) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dbf0e.  v3:= temp;
  #L2dbf10.  v4:= 2I;
  #L2dbf12.  v5:= 4I;
  #L2dbf14.  if v2 == v4 then goto L2dbf7a;
  #L2dbf18.  v4:= 3I;
  #L2dbf1a.  if v2 == v4 then goto L2dbf76;
  #L2dbf1e.  if v2 == v5 then goto L2dbf5c;
  #L2dbf22.  v4:= 5I;
  #L2dbf24.  if v2 == v4 then goto L2dbf2a;
  #L2dbf28.  goto L2dbf96;
  #L2dbf2a.  v4:= 16384I;
  #L2dbf2e.  if v3 < v4 then goto L2dbf3e;
  #L2dbf32.  v4:= 16777215I;
  #L2dbf38.  if v3 > v4 then goto L2dbf3e;
  #L2dbf3c.  goto L2dbf96;
  #L2dbf3e.  v7:= new `java.lang.Object`[v10];
  #L2dbf42.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbf48.  v8:= temp @kind object;
  #L2dbf4a.  v7[v0]:= v8 @kind object;
  #L2dbf4e.  v8:= "PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s" @kind object;
  #L2dbf52.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbf58.  v7:= temp @kind object;
  #L2dbf5a.  throw v7;
  #L2dbf5c.  v2:= 7I;
  #L2dbf5e.  if v3 < 0 then goto L2dbf64;
  #L2dbf62.  goto L2dbf96;
  #L2dbf64.  v7:= new `java.lang.Object`[v0];
  #L2dbf68.  v8:= "PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1" @kind object;
  #L2dbf6c.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbf72.  v7:= temp @kind object;
  #L2dbf74.  throw v7;
  #L2dbf76.  v2:= 4I;
  #L2dbf78.  goto L2dbf96;
  #L2dbf7a.  if v3 == 0 then goto L2dbf96;
  #L2dbf7e.  if v3 != v10 then goto L2dbf84;
  #L2dbf82.  goto L2dbf96;
  #L2dbf84.  v7:= new `java.lang.Object`[v0];
  #L2dbf88.  v8:= "PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1" @kind object;
  #L2dbf8c.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbf92.  v7:= temp @kind object;
  #L2dbf94.  throw v7;
  #L2dbf96.  call temp:= `i`(v9, v2, v3) @signature `Lokhttp3/internal/http2/Settings;.i:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L2dbf9c.  v1:= v1 + 6;
  #L2dbfa0.  goto L2dbeec;
  #L2dbfa2.  call `settings`(v7, v0, v9) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.settings:(ZLokhttp3/internal/http2/Settings;)V` @kind interface;
  #L2dbfa8.  return @kind void;
  #L2dbfaa.  v7:= new `java.lang.Object`[v10];
  #L2dbfae.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dbfb4.  v8:= temp @kind object;
  #L2dbfb6.  v7[v0]:= v8 @kind object;
  #L2dbfba.  v8:= "TYPE_SETTINGS length %% 6 != 0: %s" @kind object;
  #L2dbfbe.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbfc4.  v7:= temp @kind object;
  #L2dbfc6.  throw v7;
  #L2dbfc8.  v7:= new `java.lang.Object`[v0];
  #L2dbfcc.  v8:= "TYPE_SETTINGS streamId != 0" @kind object;
  #L2dbfd0.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbfd6.  v7:= temp @kind object;
  #L2dbfd8.  goto L2dbfdc;
  #L2dbfda.  throw v7;
  #L2dbfdc.  goto L2dbfda;
}
procedure `void` `readWindowUpdate`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object, `int` v7 , `byte` v8 , `int` v9 ) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2dbff0.  v8:= 0I;
  #L2dbff2.  v0:= 1I;
  #L2dbff4.  v1:= 4I;
  #L2dbff6.  if v7 != v1 then goto L2dc042;
  #L2dbffa.  v7:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dbffe.  call temp:= `readInt`(v7) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2dc004.  v7:= temp;
  #L2dc006.  v1:= (`long`) v7 @kind i2l;
  #L2dc008.  v3:= 2147483647L;
  #L2dc00e.  v1:= v1 ^& v3 @kind long;
  #L2dc010.  v3:= 0L;
  #L2dc014.  v7:= lcmp(v1, v3);
  #L2dc018.  if v7 == 0 then goto L2dc024;
  #L2dc01c.  call `windowUpdate`(v6, v9, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.windowUpdate:(IJ)V` @kind interface;
  #L2dc022.  return @kind void;
  #L2dc024.  v6:= new `java.lang.Object`[v0];
  #L2dc028.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2dc02e.  v7:= temp @kind object;
  #L2dc030.  v6[v8]:= v7 @kind object;
  #L2dc034.  v7:= "windowSizeIncrement was 0" @kind object;
  #L2dc038.  call temp:= `d`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dc03e.  v6:= temp @kind object;
  #L2dc040.  throw v6;
  #L2dc042.  v6:= new `java.lang.Object`[v0];
  #L2dc046.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2dc04c.  v7:= temp @kind object;
  #L2dc04e.  v6[v8]:= v7 @kind object;
  #L2dc052.  v7:= "TYPE_WINDOW_UPDATE length !=4: %s" @kind object;
  #L2dc056.  call temp:= `d`(v7, v6) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dc05c.  v6:= temp @kind object;
  #L2dc05e.  throw v6;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2db9f4.  v0:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db9f8.  call `close`(v0) @signature `Lokio/Source;.close:()V` @kind interface;
  #L2db9fe.  return @kind void;
}
procedure `boolean` `nextFrame`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `boolean` v7 , `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2db734.  v0:= 0I;
  #L2db736.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db73a.  v2:= 9L;
  #L2db73e.  call `require`(v1, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L2db744.  v1:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db748.  call temp:= `b`(v1) @signature `Lokhttp3/internal/http2/Http2Reader;.b:(Lokio/BufferedSource;)I` @kind static;
  #L2db74e.  v1:= temp;
  #L2db750.  v2:= 1I;
  #L2db752.  if v1 < 0 then goto L2db83e;
  #L2db756.  v3:= 16384I;
  #L2db75a.  if v1 > v3 then goto L2db83e;
  #L2db75e.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db762.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2db768.  v3:= temp;
  #L2db76a.  v3:= v3 ^& 255;
  #L2db76e.  v3:= (`byte`) v3 @kind i2b;
  #L2db770.  if v7 == 0 then goto L2db79a;
  #L2db774.  v7:= 4I;
  #L2db776.  if v3 != v7 then goto L2db77c;
  #L2db77a.  goto L2db79a;
  #L2db77c.  v7:= new `java.lang.Object`[v2];
  #L2db780.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L2db786.  v8:= temp @kind object;
  #L2db788.  v7[v0]:= v8 @kind object;
  #L2db78c.  v8:= "Expected a SETTINGS frame but was %s" @kind object;
  #L2db790.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2db796.  v7:= temp @kind object;
  #L2db798.  throw v7;
  #L2db79a.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db79e.  call temp:= `readByte`(v7) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2db7a4.  v7:= temp;
  #L2db7a6.  v7:= v7 ^& 255;
  #L2db7aa.  v7:= (`byte`) v7 @kind i2b;
  #L2db7ac.  v0:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db7b0.  call temp:= `readInt`(v0) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L2db7b6.  v0:= temp;
  #L2db7b8.  v4:= 2147483647I;
  #L2db7be.  v0:= v0 ^& v4 @kind int;
  #L2db7c0.  v4:= `@@okhttp3.internal.http2.Http2Reader.a` @type ^`java.util.logging.Logger` @kind object;
  #L2db7c4.  v5:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2db7c8.  call temp:= `isLoggable`(v4, v5) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2db7ce.  v5:= temp;
  #L2db7d0.  if v5 == 0 then goto L2db7e2;
  #L2db7d4.  call temp:= `b`(v2, v0, v1, v3, v7) @signature `Lokhttp3/internal/http2/Http2;.b:(ZIIBB)Ljava/lang/String;` @kind static;
  #L2db7da.  v5:= temp @kind object;
  #L2db7dc.  call `fine`(v4, v5) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2db7e2.  goto L2db860;
  #L2db7e8.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2db7ec.  v0:= (`long`) v1 @kind i2l;
  #L2db7ee.  call `skip`(v7, v0) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2db7f4.  goto L2db83c;
  #L2db7f6.  call `readWindowUpdate`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db7fc.  goto L2db83c;
  #L2db7fe.  call `readGoAway`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db804.  goto L2db83c;
  #L2db806.  call `readPing`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db80c.  goto L2db83c;
  #L2db80e.  call `readPushPromise`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db814.  goto L2db83c;
  #L2db816.  call `readSettings`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db81c.  goto L2db83c;
  #L2db81e.  call `readRstStream`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db824.  goto L2db83c;
  #L2db826.  call `readPriority`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db82c.  goto L2db83c;
  #L2db82e.  call `readHeaders`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db834.  goto L2db83c;
  #L2db836.  call `readData`(v6, v8, v1, v7, v0) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L2db83c.  return v2;
  #L2db83e.  v7:= new `java.lang.Object`[v2];
  #L2db842.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2db848.  v8:= temp @kind object;
  #L2db84a.  v7[v0]:= v8 @kind object;
  #L2db84e.  v8:= "FRAME_SIZE_ERROR: %s" @kind object;
  #L2db852.  call temp:= `d`(v8, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2db858.  v7:= temp @kind object;
  #L2db85a.  throw v7;
  #L2db85c.  return v0;
  #L2db85e.  
  #L2db860.  switch v3
                  | 0 => goto L2db836
                  | 1 => goto L2db82e
                  | 2 => goto L2db826
                  | 3 => goto L2db81e
                  | 4 => goto L2db816
                  | 5 => goto L2db80e
                  | 6 => goto L2db806
                  | 7 => goto L2db7fe
                  | 8 => goto L2db7f6
                  | else => goto L2db7e8;
  catch `java.io.IOException` @[L2db736..L2db744] goto L2db85c;
}
procedure `void` `readConnectionPreface`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2dba10.  v0:= v6.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` @kind boolean;
  #L2dba14.  v1:= 0I;
  #L2dba16.  v2:= 1I;
  #L2dba18.  if v0 == 0 then goto L2dba3c;
  #L2dba1c.  call temp:= `nextFrame`(v6, v2, v7) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L2dba22.  v7:= temp;
  #L2dba24.  if v7 == 0 then goto L2dba2a;
  #L2dba28.  goto L2dba98;
  #L2dba2a.  v7:= new `java.lang.Object`[v1];
  #L2dba2e.  v0:= "Required SETTINGS preface not received" @kind object;
  #L2dba32.  call temp:= `d`(v0, v7) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dba38.  v7:= temp @kind object;
  #L2dba3a.  throw v7;
  #L2dba3c.  v7:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2dba40.  v0:= `@@okhttp3.internal.http2.Http2.a` @type ^`okio.ByteString` @kind object;
  #L2dba44.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2dba4a.  v3:= temp;
  #L2dba4c.  v3:= (`long`) v3 @kind i2l;
  #L2dba4e.  call temp:= `readByteString`(v7, v3) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L2dba54.  v7:= temp @kind object;
  #L2dba56.  v3:= `@@okhttp3.internal.http2.Http2Reader.a` @type ^`java.util.logging.Logger` @kind object;
  #L2dba5a.  v4:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L2dba5e.  call temp:= `isLoggable`(v3, v4) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L2dba64.  v4:= temp;
  #L2dba66.  if v4 == 0 then goto L2dba8c;
  #L2dba6a.  v4:= new `java.lang.Object`[v2];
  #L2dba6e.  call temp:= `hex`(v7) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L2dba74.  v5:= temp @kind object;
  #L2dba76.  v4[v1]:= v5 @kind object;
  #L2dba7a.  v5:= "<< CONNECTION %s" @kind object;
  #L2dba7e.  call temp:= `format`(v5, v4) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2dba84.  v4:= temp @kind object;
  #L2dba86.  call `fine`(v3, v4) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L2dba8c.  call temp:= `equals`(v0, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2dba92.  v0:= temp;
  #L2dba94.  if v0 == 0 then goto L2dba9a;
  #L2dba98.  return @kind void;
  #L2dba9a.  v0:= new `java.lang.Object`[v2];
  #L2dba9e.  call temp:= `utf8`(v7) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2dbaa4.  v7:= temp @kind object;
  #L2dbaa6.  v0[v1]:= v7 @kind object;
  #L2dbaaa.  v7:= "Expected a connection header but was %s" @kind object;
  #L2dbaae.  call temp:= `d`(v7, v0) @signature `Lokhttp3/internal/http2/Http2;.d:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L2dbab4.  v7:= temp @kind object;
  #L2dbab6.  throw v7;
}
