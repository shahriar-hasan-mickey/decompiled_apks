record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.a` @AccessFlag FINAL;
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Protocol` `okhttp3.internal.http2.Http2Codec.protocol` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;

  #L2d98f4.  v0:= 12I;
  #L2d98f8.  v0:= new `java.lang.String`[v0];
  #L2d98fc.  v1:= 0I;
  #L2d98fe.  v2:= "connection" @kind object;
  #L2d9902.  v0[v1]:= v2 @kind object;
  #L2d9906.  v3:= 1I;
  #L2d9908.  v4:= "host" @kind object;
  #L2d990c.  v0[v3]:= v4 @kind object;
  #L2d9910.  v5:= 2I;
  #L2d9912.  v6:= "keep-alive" @kind object;
  #L2d9916.  v0[v5]:= v6 @kind object;
  #L2d991a.  v7:= 3I;
  #L2d991c.  v8:= "proxy-connection" @kind object;
  #L2d9920.  v0[v7]:= v8 @kind object;
  #L2d9924.  v9:= 4I;
  #L2d9926.  v10:= "te" @kind object;
  #L2d992a.  v0[v9]:= v10 @kind object;
  #L2d992e.  v11:= 5I;
  #L2d9930.  v12:= "transfer-encoding" @kind object;
  #L2d9934.  v0[v11]:= v12 @kind object;
  #L2d9938.  v13:= 6I;
  #L2d993a.  v14:= "encoding" @kind object;
  #L2d993e.  v0[v13]:= v14 @kind object;
  #L2d9942.  v15:= 7I;
  #L2d9944.  v16:= "upgrade" @kind object;
  #L2d9948.  v0[v15]:= v16 @kind object;
  #L2d994c.  v17:= ":method" @kind object;
  #L2d9950.  v15:= 8I;
  #L2d9954.  v0[v15]:= v17 @kind object;
  #L2d9958.  v17:= 9I;
  #L2d995c.  v18:= ":path" @kind object;
  #L2d9960.  v0[v17]:= v18 @kind object;
  #L2d9964.  v17:= 10I;
  #L2d9968.  v18:= ":scheme" @kind object;
  #L2d996c.  v0[v17]:= v18 @kind object;
  #L2d9970.  v17:= 11I;
  #L2d9974.  v18:= ":authority" @kind object;
  #L2d9978.  v0[v17]:= v18 @kind object;
  #L2d997c.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2d9982.  v0:= temp @kind object;
  #L2d9984.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L2d9988.  v0:= new `java.lang.String`[v15];
  #L2d998c.  v0[v1]:= v2 @kind object;
  #L2d9990.  v0[v3]:= v4 @kind object;
  #L2d9994.  v0[v5]:= v6 @kind object;
  #L2d9998.  v0[v7]:= v8 @kind object;
  #L2d999c.  v0[v9]:= v10 @kind object;
  #L2d99a0.  v0[v11]:= v12 @kind object;
  #L2d99a4.  v0[v13]:= v14 @kind object;
  #L2d99a8.  v1:= 7I;
  #L2d99aa.  v0[v1]:= v16 @kind object;
  #L2d99ae.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L2d99b4.  v0:= temp @kind object;
  #L2d99b6.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L2d99ba.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object, `okhttp3.Interceptor$Chain` v2 @kind object, `okhttp3.internal.connection.StreamAllocation` v3 @kind object, `okhttp3.internal.http2.Http2Connection` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2d99cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d99d2.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L2d99d6.  v0.`okhttp3.internal.http2.Http2Codec.a` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L2d99da.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L2d99de.  call temp:= `protocols`(v1) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L2d99e4.  v1:= temp @kind object;
  #L2d99e6.  v2:= `@@okhttp3.Protocol.H2_PRIOR_KNOWLEDGE` @type ^`okhttp3.Protocol` @kind object;
  #L2d99ea.  call temp:= `contains`(v1, v2) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2d99f0.  v1:= temp;
  #L2d99f2.  if v1 == 0 then goto L2d99f8;
  #L2d99f6.  goto L2d99fc;
  #L2d99f8.  v2:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L2d99fc.  v0.`okhttp3.internal.http2.Http2Codec.protocol` @type ^`okhttp3.Protocol` := v2 @kind object;
  #L2d9a00.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2d9628.  call temp:= `headers`(v6) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L2d962e.  v0:= temp @kind object;
  #L2d9630.  v1:= new `java.util.ArrayList`;
  #L2d9634.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2d963a.  v2:= temp;
  #L2d963c.  v2:= v2 + 4;
  #L2d9640.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2d9646.  v2:= new `okhttp3.internal.http2.Header`;
  #L2d964a.  v3:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L2d964e.  call temp:= `method`(v6) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L2d9654.  v4:= temp @kind object;
  #L2d9656.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2d965c.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d9662.  v2:= new `okhttp3.internal.http2.Header`;
  #L2d9666.  v3:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L2d966a.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d9670.  v4:= temp @kind object;
  #L2d9672.  call temp:= `requestPath`(v4) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L2d9678.  v4:= temp @kind object;
  #L2d967a.  call `<init>`(v2, v3, v4) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2d9680.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d9686.  v2:= "Host" @kind object;
  #L2d968a.  call temp:= `header`(v6, v2) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d9690.  v2:= temp @kind object;
  #L2d9692.  if v2 == 0 then goto L2d96aa;
  #L2d9696.  v3:= new `okhttp3.internal.http2.Header`;
  #L2d969a.  v4:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L2d969e.  call `<init>`(v3, v4, v2) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2d96a4.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d96aa.  v2:= new `okhttp3.internal.http2.Header`;
  #L2d96ae.  v3:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L2d96b2.  call temp:= `url`(v6) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2d96b8.  v6:= temp @kind object;
  #L2d96ba.  call temp:= `scheme`(v6) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2d96c0.  v6:= temp @kind object;
  #L2d96c2.  call `<init>`(v2, v3, v6) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2d96c8.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d96ce.  v6:= 0I;
  #L2d96d0.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2d96d6.  v2:= temp;
  #L2d96d8.  if v6 >= v2 then goto L2d972e;
  #L2d96dc.  call temp:= `name`(v0, v6) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2d96e2.  v3:= temp @kind object;
  #L2d96e4.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L2d96e8.  call temp:= `toLowerCase`(v3, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L2d96ee.  v3:= temp @kind object;
  #L2d96f0.  call temp:= `encodeUtf8`(v3) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L2d96f6.  v3:= temp @kind object;
  #L2d96f8.  v4:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L2d96fc.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L2d9702.  v5:= temp @kind object;
  #L2d9704.  call temp:= `contains`(v4, v5) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2d970a.  v4:= temp;
  #L2d970c.  if v4 != 0 then goto L2d9728;
  #L2d9710.  v4:= new `okhttp3.internal.http2.Header`;
  #L2d9714.  call temp:= `value`(v0, v6) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2d971a.  v5:= temp @kind object;
  #L2d971c.  call `<init>`(v4, v3, v5) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2d9722.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d9728.  v6:= v6 + 1;
  #L2d972c.  goto L2d96d8;
  #L2d972e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`okhttp3.Headers` v7 @kind object, `okhttp3.Protocol` v8 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2d9740.  v0:= new `okhttp3.Headers$Builder`;
  #L2d9744.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2d974a.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L2d9750.  v1:= temp;
  #L2d9752.  v2:= 0I;
  #L2d9754.  v3:= 0I;
  #L2d9756.  if v3 >= v1 then goto L2d97c6;
  #L2d975a.  call temp:= `name`(v7, v3) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L2d9760.  v4:= temp @kind object;
  #L2d9762.  call temp:= `value`(v7, v3) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2d9768.  v5:= temp @kind object;
  #L2d976a.  v6:= ":status" @kind object;
  #L2d976e.  call temp:= `equals`(v4, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2d9774.  v6:= temp;
  #L2d9776.  if v6 == 0 then goto L2d97a6;
  #L2d977a.  v2:= new `java.lang.StringBuilder`;
  #L2d977e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d9784.  v4:= "HTTP/1.1 " @kind object;
  #L2d9788.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d978e.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d9794.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d979a.  v2:= temp @kind object;
  #L2d979c.  call temp:= `parse`(v2) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L2d97a2.  v2:= temp @kind object;
  #L2d97a4.  goto L2d97c0;
  #L2d97a6.  v6:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L2d97aa.  call temp:= `contains`(v6, v4) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L2d97b0.  v6:= temp;
  #L2d97b2.  if v6 != 0 then goto L2d97c0;
  #L2d97b6.  v6:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L2d97ba.  call `addLenient`(v6, v0, v4, v5) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L2d97c0.  v3:= v3 + 1;
  #L2d97c4.  goto L2d9756;
  #L2d97c6.  if v2 == 0 then goto L2d9806;
  #L2d97ca.  v7:= new `okhttp3.Response$Builder`;
  #L2d97ce.  call `<init>`(v7) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L2d97d4.  call temp:= `protocol`(v7, v8) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d97da.  v7:= temp @kind object;
  #L2d97dc.  v8:= v2.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L2d97e0.  call temp:= `code`(v7, v8) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d97e6.  v7:= temp @kind object;
  #L2d97e8.  v8:= v2.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L2d97ec.  call temp:= `message`(v7, v8) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d97f2.  v7:= temp @kind object;
  #L2d97f4.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L2d97fa.  v8:= temp @kind object;
  #L2d97fc.  call temp:= `headers`(v7, v8) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L2d9802.  v7:= temp @kind object;
  #L2d9804.  return v7 @kind object;
  #L2d9806.  v7:= new `java.net.ProtocolException`;
  #L2d980a.  v8:= "Expected ':status' header not present" @kind object;
  #L2d980e.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d9814.  goto L2d9818;
  #L2d9816.  throw v7;
  #L2d9818.  goto L2d9816;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d9a14.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d9a18.  if v0 == 0 then goto L2d9a26;
  #L2d9a1c.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L2d9a20.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L2d9a26.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.Request` v1 @kind object, `long` v2 ) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;

  #L2d98d4.  v1:= v0.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d98d8.  call temp:= `getSink`(v1) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L2d98de.  v1:= temp @kind object;
  #L2d98e0.  return v1 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d9a38.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d9a3c.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L2d9a42.  v0:= temp @kind object;
  #L2d9a44.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L2d9a4a.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2d9a5c.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L2d9a60.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L2d9a66.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `okhttp3.Response` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d9874.  v0:= v4.`okhttp3.internal.http2.Http2Codec.a` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2d9878.  v1:= v0.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2d987c.  v0:= v0.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L2d9880.  call `responseBodyStart`(v1, v0) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2d9886.  v0:= "Content-Type" @kind object;
  #L2d988a.  call temp:= `header`(v5, v0) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2d9890.  v0:= temp @kind object;
  #L2d9892.  call temp:= `contentLength`(v5) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L2d9898.  v1:= temp @kind wide;
  #L2d989a.  v5:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L2d989e.  v3:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d98a2.  call temp:= `getSource`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L2d98a8.  v3:= temp @kind object;
  #L2d98aa.  call `<init>`(v5, v4, v3) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L2d98b0.  v3:= new `okhttp3.internal.http.RealResponseBody`;
  #L2d98b4.  call temp:= `buffer`(v5) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2d98ba.  v5:= temp @kind object;
  #L2d98bc.  call `<init>`(v3, v0, v1, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L2d98c2.  return v3 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v2 @kind this, `boolean` v3 ) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d982c.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d9830.  call temp:= `takeHeaders`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.takeHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L2d9836.  v0:= temp @kind object;
  #L2d9838.  v1:= v2.`okhttp3.internal.http2.Http2Codec.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L2d983c.  call temp:= `readHttp2HeadersList`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Lokhttp3/Headers;Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind static;
  #L2d9842.  v0:= temp @kind object;
  #L2d9844.  if v3 == 0 then goto L2d9860;
  #L2d9848.  v3:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L2d984c.  call temp:= `code`(v3, v0) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L2d9852.  v3:= temp;
  #L2d9854.  v1:= 100I;
  #L2d9858.  if v3 != v1 then goto L2d9860;
  #L2d985c.  v3:= 0I;
  #L2d985e.  return v3 @kind object;
  #L2d9860.  return v0 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v3 @kind this, `okhttp3.Request` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2d9a78.  v0:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d9a7c.  if v0 == 0 then goto L2d9a82;
  #L2d9a80.  return @kind void;
  #L2d9a82.  call temp:= `body`(v4) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2d9a88.  v0:= temp @kind object;
  #L2d9a8a.  if v0 == 0 then goto L2d9a92;
  #L2d9a8e.  v0:= 1I;
  #L2d9a90.  goto L2d9a94;
  #L2d9a92.  v0:= 0I;
  #L2d9a94.  call temp:= `http2HeadersList`(v4) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L2d9a9a.  v4:= temp @kind object;
  #L2d9a9c.  v1:= v3.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L2d9aa0.  call temp:= `newStream`(v1, v4, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L2d9aa6.  v4:= temp @kind object;
  #L2d9aa8.  v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v4 @kind object;
  #L2d9aac.  call temp:= `readTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L2d9ab2.  v4:= temp @kind object;
  #L2d9ab4.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L2d9ab8.  call temp:= `readTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L2d9abe.  v0:= temp;
  #L2d9ac0.  v0:= (`long`) v0 @kind i2l;
  #L2d9ac2.  v2:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2d9ac6.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L2d9acc.  v4:= v3.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L2d9ad0.  call temp:= `writeTimeout`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L2d9ad6.  v4:= temp @kind object;
  #L2d9ad8.  v0:= v3.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L2d9adc.  call temp:= `writeTimeoutMillis`(v0) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L2d9ae2.  v0:= temp;
  #L2d9ae4.  v0:= (`long`) v0 @kind i2l;
  #L2d9ae6.  call temp:= `timeout`(v4, v0, v2) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L2d9aec.  return @kind void;
}
