record `okhttp3.internal.http2.Hpack$Reader` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Reader.a` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.b` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.c` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.d` @AccessFlag ;
  `java.util.List` `okhttp3.internal.http2.Hpack$Reader.headerList` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okhttp3.internal.http2.Hpack$Reader.source` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 , `int` v3 , `okio.Source` v4 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L2d8564.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2d856a.  v0:= new `java.util.ArrayList`;
  #L2d856e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2d8574.  v1.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` := v0 @kind object;
  #L2d8578.  v0:= 8I;
  #L2d857c.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L2d8580.  v1.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L2d8584.  v0:= length @variable v0;
  #L2d8586.  v0:= v0 + -1;
  #L2d858a.  v1.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int` := v0;
  #L2d858e.  v0:= 0I;
  #L2d8590.  v1.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v0;
  #L2d8594.  v1.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int` := v0;
  #L2d8598.  v1.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int` := v2;
  #L2d859c.  v1.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v3;
  #L2d85a0.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2d85a6.  v2:= temp @kind object;
  #L2d85a8.  v1.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` := v2 @kind object;
  #L2d85ac.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v0 @kind this, `int` v1 , `okio.Source` v2 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2d85c0.  call `<init>`(v0, v1, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @kind direct;
  #L2d85c6.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d85d8.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L2d85dc.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int`;
  #L2d85e0.  if v0 >= v1 then goto L2d85f8;
  #L2d85e4.  if v0 != 0 then goto L2d85f0;
  #L2d85e8.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L2d85ee.  goto L2d85f8;
  #L2d85f0.  v1:= v1 - v0 @kind int;
  #L2d85f2.  call temp:= `evictToRecoverBytes`(v2, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L2d85f8.  return @kind void;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d860c.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8610.  v1:= 0I;
  #L2d8612.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L2d8618.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d861c.  v0:= length @variable v0;
  #L2d861e.  v0:= v0 + -1;
  #L2d8622.  v2.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int` := v0;
  #L2d8626.  v0:= 0I;
  #L2d8628.  v2.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v0;
  #L2d862c.  v2.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int` := v0;
  #L2d8630.  return @kind void;
}
procedure `int` `dynamicTableIndex`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2d8334.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int`;
  #L2d8338.  v0:= v0 + 1;
  #L2d833c.  v0:= v0 + v2 @kind int;
  #L2d833e.  return v0;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d8350.  v0:= 0I;
  #L2d8352.  if v5 <= 0 then goto L2d83c4;
  #L2d8356.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d835a.  v1:= length @variable v1;
  #L2d835c.  v1:= v1 + -1;
  #L2d8360.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int`;
  #L2d8364.  if v1 < v2 then goto L2d83a2;
  #L2d8368.  if v5 <= 0 then goto L2d83a2;
  #L2d836c.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8370.  v3:= v2[v1] @kind object;
  #L2d8374.  v3:= v3.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d8378.  v5:= v5 - v3 @kind int;
  #L2d837a.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int`;
  #L2d837e.  v2:= v2[v1] @kind object;
  #L2d8382.  v2:= v2.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d8386.  v3:= v3 - v2 @kind int;
  #L2d8388.  v4.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int` := v3;
  #L2d838c.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L2d8390.  v2:= v2 + -1;
  #L2d8394.  v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v2;
  #L2d8398.  v0:= v0 + 1;
  #L2d839c.  v1:= v1 + -1;
  #L2d83a0.  goto L2d8360;
  #L2d83a2.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d83a6.  v1:= v2 + 1;
  #L2d83aa.  v2:= v2 + 1;
  #L2d83ae.  v2:= v2 + v0 @kind int;
  #L2d83b0.  v3:= v4.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L2d83b4.  call `arraycopy`(v5, v1, v5, v2, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d83ba.  v5:= v4.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int`;
  #L2d83be.  v5:= v5 + v0 @kind int;
  #L2d83c0.  v4.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int` := v5;
  #L2d83c4.  return v0;
}
procedure `okio.ByteString` `getName`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2d8468.  call temp:= `isStaticHeader`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L2d846e.  v0:= temp;
  #L2d8470.  if v0 == 0 then goto L2d8482;
  #L2d8474.  v0:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8478.  v4:= v0[v4] @kind object;
  #L2d847c.  v4:= v4.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L2d8480.  return v4 @kind object;
  #L2d8482.  v0:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8486.  v0:= length @variable v0;
  #L2d8488.  v0:= v4 - v0 @kind int;
  #L2d848c.  call temp:= `dynamicTableIndex`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L2d8492.  v0:= temp;
  #L2d8494.  if v0 < 0 then goto L2d84a8;
  #L2d8498.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d849c.  v2:= length @variable v1;
  #L2d849e.  if v0 >= v2 then goto L2d84a8;
  #L2d84a2.  v4:= v1[v0] @kind object;
  #L2d84a6.  goto L2d847c;
  #L2d84a8.  v0:= new `java.io.IOException`;
  #L2d84ac.  v1:= new `java.lang.StringBuilder`;
  #L2d84b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d84b6.  v2:= "Header index too large " @kind object;
  #L2d84ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d84c0.  v4:= v4 + 1;
  #L2d84c4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d84ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d84d0.  v4:= temp @kind object;
  #L2d84d2.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d84d8.  goto L2d84dc;
  #L2d84da.  throw v0;
  #L2d84dc.  goto L2d84da;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this, `int` v6 , `okhttp3.internal.http2.Header` v7 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d8644.  v0:= v5.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d8648.  call temp:= `add`(v0, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d864e.  v0:= v7.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d8652.  v1:= -1I;
  #L2d8654.  if v6 == v1 then goto L2d866e;
  #L2d8658.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d865c.  call temp:= `dynamicTableIndex`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L2d8662.  v3:= temp;
  #L2d8664.  v2:= v2[v3] @kind object;
  #L2d8668.  v2:= v2.`okhttp3.internal.http2.Header.a` @type ^`int`;
  #L2d866c.  v0:= v0 - v2 @kind int;
  #L2d866e.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L2d8672.  if v0 <= v2 then goto L2d867e;
  #L2d8676.  call `clearDynamicTable`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L2d867c.  return @kind void;
  #L2d867e.  v3:= v5.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int`;
  #L2d8682.  v3:= v3 + v0 @kind int;
  #L2d8684.  v3:= v3 - v2 @kind int;
  #L2d8686.  call temp:= `evictToRecoverBytes`(v5, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L2d868c.  v2:= temp;
  #L2d868e.  if v6 != v1 then goto L2d86ee;
  #L2d8692.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L2d8696.  v6:= v6 + 1;
  #L2d869a.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d869e.  v2:= length @variable v1;
  #L2d86a0.  if v6 <= v2 then goto L2d86cc;
  #L2d86a4.  v6:= length @variable v1;
  #L2d86a6.  v6:= v6 * 2;
  #L2d86aa.  v6:= new `okhttp3.internal.http2.Header`[v6];
  #L2d86ae.  v2:= 0I;
  #L2d86b0.  v3:= length @variable v1;
  #L2d86b2.  v4:= length @variable v1;
  #L2d86b4.  call `arraycopy`(v1, v2, v6, v3, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2d86ba.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d86be.  v1:= length @variable v1;
  #L2d86c0.  v1:= v1 + -1;
  #L2d86c4.  v5.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int` := v1;
  #L2d86c8.  v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] := v6 @kind object;
  #L2d86cc.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int`;
  #L2d86d0.  v1:= v6 + -1;
  #L2d86d4.  v5.`okhttp3.internal.http2.Hpack$Reader.b` @type ^`int` := v1;
  #L2d86d8.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d86dc.  v1[v6]:= v7 @kind object;
  #L2d86e0.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int`;
  #L2d86e4.  v6:= v6 + 1;
  #L2d86e8.  v5.`okhttp3.internal.http2.Hpack$Reader.c` @type ^`int` := v6;
  #L2d86ec.  goto L2d8702;
  #L2d86ee.  call temp:= `dynamicTableIndex`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L2d86f4.  v1:= temp;
  #L2d86f6.  v1:= v1 + v2 @kind int;
  #L2d86f8.  v6:= v6 + v1 @kind int;
  #L2d86fa.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d86fe.  v1[v6]:= v7 @kind object;
  #L2d8702.  v6:= v5.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int`;
  #L2d8706.  v6:= v6 + v0 @kind int;
  #L2d8708.  v5.`okhttp3.internal.http2.Hpack$Reader.d` @type ^`int` := v6;
  #L2d870c.  return @kind void;
}
procedure `boolean` `isStaticHeader`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d830c.  v0:= 1I;
  #L2d830e.  if v3 < 0 then goto L2d8320;
  #L2d8312.  v1:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8316.  v1:= length @variable v1;
  #L2d8318.  v1:= v1 - v0 @kind int;
  #L2d831a.  if v3 > v1 then goto L2d8320;
  #L2d831e.  goto L2d8322;
  #L2d8320.  v0:= 0I;
  #L2d8322.  return v0;
}
procedure `int` `readByte`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L2d83d8.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2d83dc.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2d83e2.  v0:= temp;
  #L2d83e4.  v0:= v0 ^& 255;
  #L2d83e8.  return v0;
}
procedure `void` `readIndexedHeader`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2d884c.  call temp:= `isStaticHeader`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L2d8852.  v0:= temp;
  #L2d8854.  if v0 == 0 then goto L2d886c;
  #L2d8858.  v0:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d885c.  v4:= v0[v4] @kind object;
  #L2d8860.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d8864.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d886a.  goto L2d889a;
  #L2d886c.  v0:= `@@okhttp3.internal.http2.Hpack.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8870.  v0:= length @variable v0;
  #L2d8872.  v0:= v4 - v0 @kind int;
  #L2d8876.  call temp:= `dynamicTableIndex`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L2d887c.  v0:= temp;
  #L2d887e.  if v0 < 0 then goto L2d889c;
  #L2d8882.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.a` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L2d8886.  v2:= length @variable v1;
  #L2d8888.  if v0 >= v2 then goto L2d889c;
  #L2d888c.  v4:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d8890.  v0:= v1[v0] @kind object;
  #L2d8894.  call temp:= `add`(v4, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d889a.  return @kind void;
  #L2d889c.  v0:= new `java.io.IOException`;
  #L2d88a0.  v1:= new `java.lang.StringBuilder`;
  #L2d88a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d88aa.  v2:= "Header index too large " @kind object;
  #L2d88ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d88b4.  v4:= v4 + 1;
  #L2d88b8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d88be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d88c4.  v4:= temp @kind object;
  #L2d88c6.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d88cc.  throw v0;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L2d88e0.  call temp:= `getName`(v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L2d88e6.  v3:= temp @kind object;
  #L2d88e8.  call temp:= `a`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d88ee.  v0:= temp @kind object;
  #L2d88f0.  v1:= new `okhttp3.internal.http2.Header`;
  #L2d88f4.  call `<init>`(v1, v3, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L2d88fa.  v3:= -1I;
  #L2d88fc.  call `insertIntoDynamicTable`(v2, v3, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L2d8902.  return @kind void;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2d8914.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d891a.  v0:= temp @kind object;
  #L2d891c.  call temp:= `a`(v0) @signature `Lokhttp3/internal/http2/Hpack;.a:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L2d8922.  v0:= temp @kind object;
  #L2d8924.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d892a.  v1:= temp @kind object;
  #L2d892c.  v2:= new `okhttp3.internal.http2.Header`;
  #L2d8930.  call `<init>`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L2d8936.  v0:= -1I;
  #L2d8938.  call `insertIntoDynamicTable`(v3, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L2d893e.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this, `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2d8950.  call temp:= `getName`(v3, v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L2d8956.  v4:= temp @kind object;
  #L2d8958.  call temp:= `a`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d895e.  v0:= temp @kind object;
  #L2d8960.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d8964.  v2:= new `okhttp3.internal.http2.Header`;
  #L2d8968.  call `<init>`(v2, v4, v0) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L2d896e.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d8974.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2d8988.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d898e.  v0:= temp @kind object;
  #L2d8990.  call temp:= `a`(v0) @signature `Lokhttp3/internal/http2/Hpack;.a:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L2d8996.  v0:= temp @kind object;
  #L2d8998.  call temp:= `a`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @kind virtual;
  #L2d899e.  v1:= temp @kind object;
  #L2d89a0.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d89a4.  v3:= new `okhttp3.internal.http2.Header`;
  #L2d89a8.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L2d89ae.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2d89b4.  return @kind void;
}
procedure `okio.ByteString` `a`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.a:()Lokio/ByteString;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2d84f0.  call temp:= `readByte`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L2d84f6.  v0:= temp;
  #L2d84f8.  v1:= v0 ^& 128;
  #L2d84fc.  v2:= 128I;
  #L2d8500.  if v1 != v2 then goto L2d8508;
  #L2d8504.  v1:= 1I;
  #L2d8506.  goto L2d850a;
  #L2d8508.  v1:= 0I;
  #L2d850a.  v2:= 127I;
  #L2d850e.  call temp:= `c`(v5, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @kind virtual;
  #L2d8514.  v0:= temp;
  #L2d8516.  if v1 == 0 then goto L2d8542;
  #L2d851a.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L2d8520.  v1:= temp @kind object;
  #L2d8522.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2d8526.  v3:= (`long`) v0 @kind i2l;
  #L2d8528.  call temp:= `readByteArray`(v2, v3) @signature `Lokio/BufferedSource;.readByteArray:(J)[B` @kind interface;
  #L2d852e.  v0:= temp @kind object;
  #L2d8530.  call temp:= `a`(v1, v0) @signature `Lokhttp3/internal/http2/Huffman;.a:([B)[B` @kind virtual;
  #L2d8536.  v0:= temp @kind object;
  #L2d8538.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2d853e.  v0:= temp @kind object;
  #L2d8540.  return v0 @kind object;
  #L2d8542.  v1:= v5.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2d8546.  v2:= (`long`) v0 @kind i2l;
  #L2d8548.  call temp:= `readByteString`(v1, v2) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L2d854e.  v0:= temp @kind object;
  #L2d8550.  return v0 @kind object;
}
procedure `void` `b`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2d8720.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2d8724.  call temp:= `exhausted`(v0) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L2d872a.  v0:= temp;
  #L2d872c.  if v0 != 0 then goto L2d883a;
  #L2d8730.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L2d8734.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L2d873a.  v0:= temp;
  #L2d873c.  v0:= v0 ^& 255;
  #L2d8740.  v1:= 128I;
  #L2d8744.  if v0 == v1 then goto L2d882a;
  #L2d8748.  v2:= v0 ^& 128;
  #L2d874c.  if v2 != v1 then goto L2d8768;
  #L2d8750.  v1:= 127I;
  #L2d8754.  call temp:= `c`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @kind virtual;
  #L2d875a.  v0:= temp;
  #L2d875c.  v0:= v0 + -1;
  #L2d8760.  call `readIndexedHeader`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @kind direct;
  #L2d8766.  goto L2d8720;
  #L2d8768.  v1:= 64I;
  #L2d876c.  if v0 != v1 then goto L2d8778;
  #L2d8770.  call `readLiteralHeaderWithIncrementalIndexingNewName`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @kind direct;
  #L2d8776.  goto L2d8720;
  #L2d8778.  v2:= v0 ^& 64;
  #L2d877c.  if v2 != v1 then goto L2d8798;
  #L2d8780.  v1:= 63I;
  #L2d8784.  call temp:= `c`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @kind virtual;
  #L2d878a.  v0:= temp;
  #L2d878c.  v0:= v0 + -1;
  #L2d8790.  call `readLiteralHeaderWithIncrementalIndexingIndexedName`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @kind direct;
  #L2d8796.  goto L2d8720;
  #L2d8798.  v1:= v0 ^& 32;
  #L2d879c.  v2:= 32I;
  #L2d87a0.  if v1 != v2 then goto L2d87fa;
  #L2d87a4.  v1:= 31I;
  #L2d87a8.  call temp:= `c`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @kind virtual;
  #L2d87ae.  v0:= temp;
  #L2d87b0.  v3.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v0;
  #L2d87b4.  if v0 < 0 then goto L2d87c8;
  #L2d87b8.  v1:= v3.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int`;
  #L2d87bc.  if v0 > v1 then goto L2d87c8;
  #L2d87c0.  call `adjustDynamicTableByteCount`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @kind direct;
  #L2d87c6.  goto L2d8720;
  #L2d87c8.  v0:= new `java.io.IOException`;
  #L2d87cc.  v1:= new `java.lang.StringBuilder`;
  #L2d87d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2d87d6.  v2:= "Invalid dynamic table size update " @kind object;
  #L2d87da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d87e0.  v2:= v3.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L2d87e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2d87ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2d87f0.  v1:= temp @kind object;
  #L2d87f2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d87f8.  throw v0;
  #L2d87fa.  v1:= 16I;
  #L2d87fe.  if v0 == v1 then goto L2d8820;
  #L2d8802.  if v0 != 0 then goto L2d8808;
  #L2d8806.  goto L2d8820;
  #L2d8808.  v1:= 15I;
  #L2d880c.  call temp:= `c`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @kind virtual;
  #L2d8812.  v0:= temp;
  #L2d8814.  v0:= v0 + -1;
  #L2d8818.  call `readLiteralHeaderWithoutIndexingIndexedName`(v3, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @kind direct;
  #L2d881e.  goto L2d8720;
  #L2d8820.  call `readLiteralHeaderWithoutIndexingNewName`(v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @kind direct;
  #L2d8826.  goto L2d8720;
  #L2d882a.  v0:= new `java.io.IOException`;
  #L2d882e.  v1:= "index == 0" @kind object;
  #L2d8832.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2d8838.  throw v0;
  #L2d883a.  return @kind void;
}
procedure `int` `c`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lokhttp3/internal/http2/Hpack$Reader;.c:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2d83fc.  v3:= v3 ^& v4 @kind int;
  #L2d83fe.  if v3 >= v4 then goto L2d8404;
  #L2d8402.  return v3;
  #L2d8404.  v3:= 0I;
  #L2d8406.  call temp:= `readByte`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L2d840c.  v0:= temp;
  #L2d840e.  v1:= v0 ^& 128;
  #L2d8412.  if v1 == 0 then goto L2d8424;
  #L2d8416.  v0:= v0 ^& 127;
  #L2d841a.  v0:= v0 ^< v3 @kind int;
  #L2d841c.  v4:= v4 + v0 @kind int;
  #L2d841e.  v3:= v3 + 7;
  #L2d8422.  goto L2d8406;
  #L2d8424.  v3:= v0 ^< v3 @kind int;
  #L2d8428.  v4:= v4 + v3 @kind int;
  #L2d842a.  return v4;
}
procedure `java.util.List` `getAndResetHeaderList`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2d843c.  v0:= new `java.util.ArrayList`;
  #L2d8440.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d8444.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L2d844a.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L2d844e.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L2d8454.  return v0 @kind object;
}
