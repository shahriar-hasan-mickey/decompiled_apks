record `dagger.internal.MapFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.AbstractMapFactory` @kind class {
}
global `javax.inject.Provider` `@@dagger.internal.MapFactory.EMPTY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/MapFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2cb220.  call temp:= `emptyMap`() @signature `Ljava/util/Collections;.emptyMap:()Ljava/util/Map;` @kind static;
  #L2cb226.  v0:= temp @kind object;
  #L2cb228.  call temp:= `create`(v0) @signature `Ldagger/internal/InstanceFactory;.create:(Ljava/lang/Object;)Ldagger/internal/Factory;` @kind static;
  #L2cb22e.  v0:= temp @kind object;
  #L2cb230.  `@@dagger.internal.MapFactory.EMPTY` @type ^`javax.inject.Provider` := v0 @kind object;
  #L2cb234.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.MapFactory` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Ldagger/internal/MapFactory;.<init>:(Ljava/util/Map;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cb248.  call `<init>`(v0, v1) @signature `Ldagger/internal/AbstractMapFactory;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2cb24e.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.MapFactory` v0 @kind this, `java.util.Map` v1 @kind object, `dagger.internal.MapFactory$1` v2 @kind object) @signature `Ldagger/internal/MapFactory;.<init>:(Ljava/util/Map;Ldagger/internal/MapFactory$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2cb260.  call `<init>`(v0, v1) @signature `Ldagger/internal/MapFactory;.<init>:(Ljava/util/Map;)V` @kind direct;
  #L2cb266.  return @kind void;
}
procedure `dagger.internal.MapFactory$Builder` `builder`(`int` v2 ) @signature `Ldagger/internal/MapFactory;.builder:(I)Ldagger/internal/MapFactory$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb144.  v0:= new `dagger.internal.MapFactory$Builder`;
  #L2cb148.  v1:= 0I;
  #L2cb14a.  call `<init>`(v0, v2, v1) @signature `Ldagger/internal/MapFactory$Builder;.<init>:(ILdagger/internal/MapFactory$1;)V` @kind direct;
  #L2cb150.  return v0 @kind object;
}
procedure `javax.inject.Provider` `emptyMapProvider`() @signature `Ldagger/internal/MapFactory;.emptyMapProvider:()Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb208.  v0:= `@@dagger.internal.MapFactory.EMPTY` @type ^`javax.inject.Provider` @kind object;
  #L2cb20c.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.MapFactory` v1 @kind this) @signature `Ldagger/internal/MapFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2cb164.  call temp:= `get`(v1) @signature `Ldagger/internal/MapFactory;.get:()Ljava/util/Map;` @kind virtual;
  #L2cb16a.  v0:= temp @kind object;
  #L2cb16c.  return v0 @kind object;
}
procedure `java.util.Map` `get`(`dagger.internal.MapFactory` v4 @kind this) @signature `Ldagger/internal/MapFactory;.get:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2cb180.  call temp:= `b`(v4) @signature `Ldagger/internal/AbstractMapFactory;.b:()Ljava/util/Map;` @kind virtual;
  #L2cb186.  v0:= temp @kind object;
  #L2cb188.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L2cb18e.  v0:= temp;
  #L2cb190.  call temp:= `newLinkedHashMapWithExpectedSize`(v0) @signature `Ldagger/internal/DaggerCollections;.newLinkedHashMapWithExpectedSize:(I)Ljava/util/LinkedHashMap;` @kind static;
  #L2cb196.  v0:= temp @kind object;
  #L2cb198.  call temp:= `b`(v4) @signature `Ldagger/internal/AbstractMapFactory;.b:()Ljava/util/Map;` @kind virtual;
  #L2cb19e.  v1:= temp @kind object;
  #L2cb1a0.  call temp:= `entrySet`(v1) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L2cb1a6.  v1:= temp @kind object;
  #L2cb1a8.  call temp:= `iterator`(v1) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2cb1ae.  v1:= temp @kind object;
  #L2cb1b0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2cb1b6.  v2:= temp;
  #L2cb1b8.  if v2 == 0 then goto L2cb1ec;
  #L2cb1bc.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2cb1c2.  v2:= temp @kind object;
  #L2cb1c4.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L2cb1c8.  call temp:= `getKey`(v2) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L2cb1ce.  v3:= temp @kind object;
  #L2cb1d0.  call temp:= `getValue`(v2) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L2cb1d6.  v2:= temp @kind object;
  #L2cb1d8.  v2:= (`javax.inject.Provider`) v2 @kind object;
  #L2cb1dc.  call temp:= `get`(v2) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2cb1e2.  v2:= temp @kind object;
  #L2cb1e4.  call temp:= `put`(v0, v3, v2) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L2cb1ea.  goto L2cb1b0;
  #L2cb1ec.  call temp:= `unmodifiableMap`(v0) @signature `Ljava/util/Collections;.unmodifiableMap:(Ljava/util/Map;)Ljava/util/Map;` @kind static;
  #L2cb1f2.  v0:= temp @kind object;
  #L2cb1f4.  return v0 @kind object;
}
