record `dagger.internal.SetFactory` @kind class @AccessFlag PUBLIC_FINAL extends `dagger.internal.Factory` @kind interface {
  `java.util.List` `dagger.internal.SetFactory.collectionProviders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `dagger.internal.SetFactory.individualProviders` @AccessFlag PRIVATE_FINAL;
}
global `dagger.internal.Factory` `@@dagger.internal.SetFactory.EMPTY_FACTORY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/SetFactory;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2cb9a8.  call temp:= `emptySet`() @signature `Ljava/util/Collections;.emptySet:()Ljava/util/Set;` @kind static;
  #L2cb9ae.  v0:= temp @kind object;
  #L2cb9b0.  call temp:= `create`(v0) @signature `Ldagger/internal/InstanceFactory;.create:(Ljava/lang/Object;)Ldagger/internal/Factory;` @kind static;
  #L2cb9b6.  v0:= temp @kind object;
  #L2cb9b8.  `@@dagger.internal.SetFactory.EMPTY_FACTORY` @type ^`dagger.internal.Factory` := v0 @kind object;
  #L2cb9bc.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2cb9d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2cb9d6.  v0.`dagger.internal.SetFactory.individualProviders` @type ^`java.util.List` := v1 @kind object;
  #L2cb9da.  v0.`dagger.internal.SetFactory.collectionProviders` @type ^`java.util.List` := v2 @kind object;
  #L2cb9de.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.SetFactory` v0 @kind this, `java.util.List` v1 @kind object, `java.util.List` v2 @kind object, `dagger.internal.SetFactory$1` v3 @kind object) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;Ldagger/internal/SetFactory$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L2cb9f0.  call `<init>`(v0, v1, v2) @signature `Ldagger/internal/SetFactory;.<init>:(Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L2cb9f6.  return @kind void;
}
procedure `dagger.internal.SetFactory$Builder` `builder`(`int` v2 , `int` v3 ) @signature `Ldagger/internal/SetFactory;.builder:(II)Ldagger/internal/SetFactory$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2cb858.  v0:= new `dagger.internal.SetFactory$Builder`;
  #L2cb85c.  v1:= 0I;
  #L2cb85e.  call `<init>`(v0, v2, v3, v1) @signature `Ldagger/internal/SetFactory$Builder;.<init>:(IILdagger/internal/SetFactory$1;)V` @kind direct;
  #L2cb864.  return v0 @kind object;
}
procedure `dagger.internal.Factory` `empty`() @signature `Ldagger/internal/SetFactory;.empty:()Ldagger/internal/Factory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cb840.  v0:= `@@dagger.internal.SetFactory.EMPTY_FACTORY` @type ^`dagger.internal.Factory` @kind object;
  #L2cb844.  return v0 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.SetFactory` v1 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2cb878.  call temp:= `get`(v1) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @kind virtual;
  #L2cb87e.  v0:= temp @kind object;
  #L2cb880.  return v0 @kind object;
}
procedure `java.util.Set` `get`(`dagger.internal.SetFactory` v7 @kind this) @signature `Ldagger/internal/SetFactory;.get:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2cb894.  v0:= v7.`dagger.internal.SetFactory.individualProviders` @type ^`java.util.List` @kind object;
  #L2cb898.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cb89e.  v0:= temp;
  #L2cb8a0.  v1:= new `java.util.ArrayList`;
  #L2cb8a4.  v2:= v7.`dagger.internal.SetFactory.collectionProviders` @type ^`java.util.List` @kind object;
  #L2cb8a8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cb8ae.  v2:= temp;
  #L2cb8b0.  call `<init>`(v1, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L2cb8b6.  v2:= v7.`dagger.internal.SetFactory.collectionProviders` @type ^`java.util.List` @kind object;
  #L2cb8ba.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cb8c0.  v2:= temp;
  #L2cb8c2.  v3:= 0I;
  #L2cb8c4.  v4:= 0I;
  #L2cb8c6.  if v4 >= v2 then goto L2cb8fc;
  #L2cb8ca.  v5:= v7.`dagger.internal.SetFactory.collectionProviders` @type ^`java.util.List` @kind object;
  #L2cb8ce.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2cb8d4.  v5:= temp @kind object;
  #L2cb8d6.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L2cb8da.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2cb8e0.  v5:= temp @kind object;
  #L2cb8e2.  v5:= (`java.util.Collection`) v5 @kind object;
  #L2cb8e6.  call temp:= `size`(v5) @signature `Ljava/util/Collection;.size:()I` @kind interface;
  #L2cb8ec.  v6:= temp;
  #L2cb8ee.  v0:= v0 + v6 @kind int;
  #L2cb8f0.  call temp:= `add`(v1, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cb8f6.  v4:= v4 + 1;
  #L2cb8fa.  goto L2cb8c6;
  #L2cb8fc.  call temp:= `a`(v0) @signature `Ldagger/internal/DaggerCollections;.a:(I)Ljava/util/HashSet;` @kind static;
  #L2cb902.  v0:= temp @kind object;
  #L2cb904.  v2:= v7.`dagger.internal.SetFactory.individualProviders` @type ^`java.util.List` @kind object;
  #L2cb908.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cb90e.  v2:= temp;
  #L2cb910.  v4:= 0I;
  #L2cb912.  if v4 >= v2 then goto L2cb942;
  #L2cb916.  v5:= v7.`dagger.internal.SetFactory.individualProviders` @type ^`java.util.List` @kind object;
  #L2cb91a.  call temp:= `get`(v5, v4) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2cb920.  v5:= temp @kind object;
  #L2cb922.  v5:= (`javax.inject.Provider`) v5 @kind object;
  #L2cb926.  call temp:= `get`(v5) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2cb92c.  v5:= temp @kind object;
  #L2cb92e.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2cb934.  v5:= temp @kind object;
  #L2cb936.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cb93c.  v4:= v4 + 1;
  #L2cb940.  goto L2cb912;
  #L2cb942.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L2cb948.  v2:= temp;
  #L2cb94a.  if v3 >= v2 then goto L2cb98c;
  #L2cb94e.  call temp:= `get`(v1, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L2cb954.  v4:= temp @kind object;
  #L2cb956.  v4:= (`java.util.Collection`) v4 @kind object;
  #L2cb95a.  call temp:= `iterator`(v4) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L2cb960.  v4:= temp @kind object;
  #L2cb962.  call temp:= `hasNext`(v4) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L2cb968.  v5:= temp;
  #L2cb96a.  if v5 == 0 then goto L2cb986;
  #L2cb96e.  call temp:= `next`(v4) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L2cb974.  v5:= temp @kind object;
  #L2cb976.  call temp:= `checkNotNull`(v5) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2cb97c.  v5:= temp @kind object;
  #L2cb97e.  call temp:= `add`(v0, v5) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2cb984.  goto L2cb962;
  #L2cb986.  v3:= v3 + 1;
  #L2cb98a.  goto L2cb94a;
  #L2cb98c.  call temp:= `unmodifiableSet`(v0) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L2cb992.  v0:= temp @kind object;
  #L2cb994.  return v0 @kind object;
}
