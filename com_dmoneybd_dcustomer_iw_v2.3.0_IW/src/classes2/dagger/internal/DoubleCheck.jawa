record `dagger.internal.DoubleCheck` @kind class @AccessFlag PUBLIC_FINAL extends `javax.inject.Provider` @kind interface, `dagger.Lazy` @kind interface {
  `java.lang.Object` `dagger.internal.DoubleCheck.instance` @AccessFlag PRIVATE_VOLATILE;
  `javax.inject.Provider` `dagger.internal.DoubleCheck.provider` @AccessFlag PRIVATE_VOLATILE;
}
global `java.lang.Object` `@@dagger.internal.DoubleCheck.UNINITIALIZED` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Ldagger/internal/DoubleCheck;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2caed0.  v0:= new `java.lang.Object`;
  #L2caed4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2caeda.  `@@dagger.internal.DoubleCheck.UNINITIALIZED` @type ^`java.lang.Object` := v0 @kind object;
  #L2caede.  return @kind void;
}
procedure `void` `<init>`(`dagger.internal.DoubleCheck` v1 @kind this, `javax.inject.Provider` v2 @kind object) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2caef0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2caef6.  v0:= `@@dagger.internal.DoubleCheck.UNINITIALIZED` @type ^`java.lang.Object` @kind object;
  #L2caefa.  v1.`dagger.internal.DoubleCheck.instance` @type ^`java.lang.Object` := v0 @kind object;
  #L2caefe.  v1.`dagger.internal.DoubleCheck.provider` @type ^`javax.inject.Provider` := v2 @kind object;
  #L2caf02.  return @kind void;
}
procedure `dagger.Lazy` `lazy`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.lazy:(Ljavax/inject/Provider;)Ldagger/Lazy;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2cad90.  v0:= instanceof @variable v1 @type ^`dagger.Lazy` @kind boolean;
  #L2cad94.  if v0 == 0 then goto L2cad9e;
  #L2cad98.  v1:= (`dagger.Lazy`) v1 @kind object;
  #L2cad9c.  return v1 @kind object;
  #L2cad9e.  v0:= new `dagger.internal.DoubleCheck`;
  #L2cada2.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2cada8.  v1:= temp @kind object;
  #L2cadaa.  v1:= (`javax.inject.Provider`) v1 @kind object;
  #L2cadae.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L2cadb4.  return v0 @kind object;
}
procedure `javax.inject.Provider` `provider`(`javax.inject.Provider` v1 @kind object) @signature `Ldagger/internal/DoubleCheck;.provider:(Ljavax/inject/Provider;)Ljavax/inject/Provider;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L2caea4.  call temp:= `checkNotNull`(v1) @signature `Ldagger/internal/Preconditions;.checkNotNull:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2caeaa.  v0:= instanceof @variable v1 @type ^`dagger.internal.DoubleCheck` @kind boolean;
  #L2caeae.  if v0 == 0 then goto L2caeb4;
  #L2caeb2.  return v1 @kind object;
  #L2caeb4.  v0:= new `dagger.internal.DoubleCheck`;
  #L2caeb8.  call `<init>`(v0, v1) @signature `Ldagger/internal/DoubleCheck;.<init>:(Ljavax/inject/Provider;)V` @kind direct;
  #L2caebe.  return v0 @kind object;
}
procedure `java.lang.Object` `reentrantCheck`(`java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Ldagger/internal/DoubleCheck;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L2cae28.  v0:= `@@dagger.internal.DoubleCheck.UNINITIALIZED` @type ^`java.lang.Object` @kind object;
  #L2cae2c.  if v3 == v0 then goto L2cae3c;
  #L2cae30.  v0:= instanceof @variable v3 @type ^`dagger.internal.MemoizedSentinel` @kind boolean;
  #L2cae34.  if v0 != 0 then goto L2cae3c;
  #L2cae38.  v0:= 1I;
  #L2cae3a.  goto L2cae3e;
  #L2cae3c.  v0:= 0I;
  #L2cae3e.  if v0 == 0 then goto L2cae90;
  #L2cae42.  if v3 != v4 then goto L2cae48;
  #L2cae46.  goto L2cae90;
  #L2cae48.  v0:= new `java.lang.IllegalStateException`;
  #L2cae4c.  v1:= new `java.lang.StringBuilder`;
  #L2cae50.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2cae56.  v2:= "Scoped provider was invoked recursively returning different results: " @kind object;
  #L2cae5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cae60.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cae66.  v3:= " & " @kind object;
  #L2cae6a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cae70.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cae76.  v3:= ". This is likely due to a circular dependency." @kind object;
  #L2cae7a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2cae80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2cae86.  v3:= temp @kind object;
  #L2cae88.  call `<init>`(v0, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2cae8e.  throw v0;
  #L2cae90.  return v4 @kind object;
}
procedure `java.lang.Object` `get`(`dagger.internal.DoubleCheck` v2 @kind this) @signature `Ldagger/internal/DoubleCheck;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2cadc8.  v0:= v2.`dagger.internal.DoubleCheck.instance` @type ^`java.lang.Object` @kind object;
  #L2cadcc.  v1:= `@@dagger.internal.DoubleCheck.UNINITIALIZED` @type ^`java.lang.Object` @kind object;
  #L2cadd0.  if v0 != v1 then goto L2cae0a;
  #L2cadd4.  @monitorenter v2
  #L2cadd6.  v0:= v2.`dagger.internal.DoubleCheck.instance` @type ^`java.lang.Object` @kind object;
  #L2cadda.  if v0 != v1 then goto L2cae00;
  #L2cadde.  v0:= v2.`dagger.internal.DoubleCheck.provider` @type ^`javax.inject.Provider` @kind object;
  #L2cade2.  call temp:= `get`(v0) @signature `Ljavax/inject/Provider;.get:()Ljava/lang/Object;` @kind interface;
  #L2cade8.  v0:= temp @kind object;
  #L2cadea.  v1:= v2.`dagger.internal.DoubleCheck.instance` @type ^`java.lang.Object` @kind object;
  #L2cadee.  call temp:= `reentrantCheck`(v1, v0) @signature `Ldagger/internal/DoubleCheck;.reentrantCheck:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L2cadf4.  v1:= temp @kind object;
  #L2cadf6.  v2.`dagger.internal.DoubleCheck.instance` @type ^`java.lang.Object` := v1 @kind object;
  #L2cadfa.  v1:= 0I;
  #L2cadfc.  v2.`dagger.internal.DoubleCheck.provider` @type ^`javax.inject.Provider` := v1 @kind object;
  #L2cae00.  @monitorexit v2
  #L2cae02.  goto L2cae0a;
  #L2cae04.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2cae06.  @monitorexit v2
  #L2cae08.  throw v0;
  #L2cae0a.  return v0 @kind object;
  catch `java.lang.Throwable` @[L2cadd6..L2cae08] goto L2cae04;
}
