record `dagger.android.AndroidInjector$Builder` @kind class @AccessFlag PUBLIC_ABSTRACT extends `dagger.android.AndroidInjector$Factory` @kind interface {
}
procedure `void` `<init>`(`dagger.android.AndroidInjector$Builder` v0 @kind this) @signature `Ldagger/android/AndroidInjector$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2c92c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2c92ce.  return @kind void;
}
procedure `dagger.android.AndroidInjector` `build`() @signature `Ldagger/android/AndroidInjector$Builder;.build:()Ldagger/android/AndroidInjector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `dagger.android.AndroidInjector` `create`(`dagger.android.AndroidInjector$Builder` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Ldagger/android/AndroidInjector$Builder;.create:(Ljava/lang/Object;)Ldagger/android/AndroidInjector;` @AccessFlag PUBLIC_FINAL {
    temp;

  #L2c92a8.  call `seedInstance`(v0, v1) @signature `Ldagger/android/AndroidInjector$Builder;.seedInstance:(Ljava/lang/Object;)V` @kind virtual;
  #L2c92ae.  call temp:= `build`(v0) @signature `Ldagger/android/AndroidInjector$Builder;.build:()Ldagger/android/AndroidInjector;` @kind virtual;
  #L2c92b4.  v1:= temp @kind object;
  #L2c92b6.  return v1 @kind object;
}
procedure `void` `seedInstance`(`java.lang.Object` v0 @kind object) @signature `Ldagger/android/AndroidInjector$Builder;.seedInstance:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
