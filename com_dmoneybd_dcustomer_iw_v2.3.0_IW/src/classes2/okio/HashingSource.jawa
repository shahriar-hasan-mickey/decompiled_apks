record `okio.HashingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `javax.crypto.Mac` `okio.HashingSource.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSource.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSource` v0 @kind this, `okio.Source` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L2e2f00.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L2e2f06.  call temp:= `getInstance`(v2) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L2e2f0c.  v1:= temp @kind object;
  #L2e2f0e.  v0.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L2e2f12.  v1:= 0I;
  #L2e2f14.  v0.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L2e2f18.  return @kind void;
  #L2e2f1a.  v1:= new `java.lang.AssertionError`;
  #L2e2f1e.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2f24.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[L2e2f06..L2e2f18] goto L2e2f1a;
}
procedure `void` `<init>`(`okio.HashingSource` v1 @kind this, `okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L2e2f48.  call `<init>`(v1, v2) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L2e2f4e.  call temp:= `getInstance`(v4) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L2e2f54.  v2:= temp @kind object;
  #L2e2f56.  v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v2 @kind object;
  #L2e2f5a.  v0:= new `javax.crypto.spec.SecretKeySpec`;
  #L2e2f5e.  call temp:= `toByteArray`(v3) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L2e2f64.  v3:= temp @kind object;
  #L2e2f66.  call `<init>`(v0, v3, v4) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2e2f6c.  call `init`(v2, v0) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L2e2f72.  v2:= 0I;
  #L2e2f74.  v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v2 @kind object;
  #L2e2f78.  return @kind void;
  #L2e2f7a.  v2:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L2e2f7c.  v3:= new `java.lang.IllegalArgumentException`;
  #L2e2f80.  call `<init>`(v3, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L2e2f86.  throw v3;
  #L2e2f88.  v2:= new `java.lang.AssertionError`;
  #L2e2f8c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L2e2f92.  throw v2;
  catch `java.security.NoSuchAlgorithmException` @[L2e2f4e..L2e2f78] goto L2e2f88;
  catch `java.security.InvalidKeyException` @[L2e2f4e..L2e2f78] goto L2e2f7a;
}
procedure `okio.HashingSource` `hmacSha1`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha1:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2e2e60.  v0:= new `okio.HashingSource`;
  #L2e2e64.  v1:= "HmacSHA1" @kind object;
  #L2e2e68.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2e2e6e.  return v0 @kind object;
}
procedure `okio.HashingSource` `hmacSha256`(`okio.Source` v2 @kind object, `okio.ByteString` v3 @kind object) @signature `Lokio/HashingSource;.hmacSha256:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2e2e80.  v0:= new `okio.HashingSource`;
  #L2e2e84.  v1:= "HmacSHA256" @kind object;
  #L2e2e88.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L2e2e8e.  return v0 @kind object;
}
procedure `okio.HashingSource` `md5`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.md5:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2e2ea0.  v0:= new `okio.HashingSource`;
  #L2e2ea4.  v1:= "MD5" @kind object;
  #L2e2ea8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L2e2eae.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha1`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha1:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2e2ec0.  v0:= new `okio.HashingSource`;
  #L2e2ec4.  v1:= "SHA-1" @kind object;
  #L2e2ec8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L2e2ece.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha256`(`okio.Source` v2 @kind object) @signature `Lokio/HashingSource;.sha256:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L2e2ee0.  v0:= new `okio.HashingSource`;
  #L2e2ee4.  v1:= "SHA-256" @kind object;
  #L2e2ee8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L2e2eee.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSource` v1 @kind this) @signature `Lokio/HashingSource;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L2e2e28.  v0:= v1.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L2e2e2c.  if v0 == 0 then goto L2e2e3a;
  #L2e2e30.  call temp:= `digest`(v0) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L2e2e36.  v0:= temp @kind object;
  #L2e2e38.  goto L2e2e46;
  #L2e2e3a.  v0:= v1.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2e2e3e.  call temp:= `doFinal`(v0) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L2e2e44.  v0:= temp @kind object;
  #L2e2e46.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L2e2e4c.  v0:= temp @kind object;
  #L2e2e4e.  return v0 @kind object;
}
procedure `long` `read`(`okio.HashingSource` v8 @kind this, `okio.Buffer` v9 @kind object, `long` v10 ) @signature `Lokio/HashingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2e2d7c.  call temp:= `read`(v8, v9, v10) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2e2d82.  v10:= temp @kind wide;
  #L2e2d84.  v0:= -1L;
  #L2e2d88.  v2:= lcmp(v10, v0);
  #L2e2d8c.  if v2 == 0 then goto L2e2e14;
  #L2e2d90.  v0:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e2d94.  v2:= v0 - v10 @kind long;
  #L2e2d98.  v4:= v9.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e2d9c.  v5:= lcmp(v0, v2);
  #L2e2da0.  if v5 <= 0 then goto L2e2db8;
  #L2e2da4.  v4:= v4.`okio.Segment.g` @type ^`okio.Segment` @kind object;
  #L2e2da8.  v5:= v4.`okio.Segment.c` @type ^`int`;
  #L2e2dac.  v6:= v4.`okio.Segment.b` @type ^`int`;
  #L2e2db0.  v5:= v5 - v6 @kind int;
  #L2e2db2.  v5:= (`long`) v5 @kind i2l;
  #L2e2db4.  v0:= v0 - v5 @kind long;
  #L2e2db6.  goto L2e2d9c;
  #L2e2db8.  v5:= v9.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e2dbc.  v7:= lcmp(v0, v5);
  #L2e2dc0.  if v7 >= 0 then goto L2e2e14;
  #L2e2dc4.  v5:= v4.`okio.Segment.b` @type ^`int`;
  #L2e2dc8.  v5:= (`long`) v5 @kind i2l;
  #L2e2dca.  v5:= v5 + v2 @kind long;
  #L2e2dcc.  v5:= v5 - v0 @kind long;
  #L2e2dce.  v2:= (`int`) v5 @kind l2i;
  #L2e2dd0.  v3:= v8.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L2e2dd4.  if v3 == 0 then goto L2e2dea;
  #L2e2dd8.  v5:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e2ddc.  v6:= v4.`okio.Segment.c` @type ^`int`;
  #L2e2de0.  v6:= v6 - v2 @kind int;
  #L2e2de2.  call `update`(v3, v5, v2, v6) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L2e2de8.  goto L2e2dfe;
  #L2e2dea.  v3:= v8.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L2e2dee.  v5:= v4.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e2df2.  v6:= v4.`okio.Segment.c` @type ^`int`;
  #L2e2df6.  v6:= v6 - v2 @kind int;
  #L2e2df8.  call `update`(v3, v5, v2, v6) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L2e2dfe.  v2:= v4.`okio.Segment.c` @type ^`int`;
  #L2e2e02.  v3:= v4.`okio.Segment.b` @type ^`int`;
  #L2e2e06.  v2:= v2 - v3 @kind int;
  #L2e2e08.  v2:= (`long`) v2 @kind i2l;
  #L2e2e0a.  v2:= v2 + v0 @kind long;
  #L2e2e0c.  v4:= v4.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e2e10.  v0:= v2 @kind wide;
  #L2e2e12.  goto L2e2db8;
  #L2e2e14.  return v10 @kind wide;
}
