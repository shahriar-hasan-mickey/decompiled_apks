record `okio.DeflaterSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.DeflaterSink.closed` @AccessFlag PRIVATE;
  `java.util.zip.Deflater` `okio.DeflaterSink.deflater` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okio.DeflaterSink.sink` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.DeflaterSink` v0 @kind this, `okio.BufferedSink` v1 @kind object, `java.util.zip.Deflater` v2 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2e2144.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e214a.  if v1 == 0 then goto L2e216c;
  #L2e214e.  if v2 == 0 then goto L2e215c;
  #L2e2152.  v0.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` := v1 @kind object;
  #L2e2156.  v0.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` := v2 @kind object;
  #L2e215a.  return @kind void;
  #L2e215c.  v1:= new `java.lang.IllegalArgumentException`;
  #L2e2160.  v2:= "inflater == null" @kind object;
  #L2e2164.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e216a.  throw v1;
  #L2e216c.  v1:= new `java.lang.IllegalArgumentException`;
  #L2e2170.  v2:= "source == null" @kind object;
  #L2e2174.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e217a.  throw v1;
}
procedure `void` `<init>`(`okio.DeflaterSink` v0 @kind this, `okio.Sink` v1 @kind object, `java.util.zip.Deflater` v2 @kind object) @signature `Lokio/DeflaterSink;.<init>:(Lokio/Sink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2e218c.  call temp:= `buffer`(v1) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L2e2192.  v1:= temp @kind object;
  #L2e2194.  call `<init>`(v0, v1, v2) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L2e219a.  return @kind void;
}
procedure `void` `deflate`(`okio.DeflaterSink` v7 @kind this, `boolean` v8 ) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e222c.  v0:= v7.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2230.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2236.  v0:= temp @kind object;
  #L2e2238.  v1:= 1I;
  #L2e223a.  call temp:= `c`(v0, v1) @signature `Lokio/Buffer;.c:(I)Lokio/Segment;` @kind virtual;
  #L2e2240.  v1:= temp @kind object;
  #L2e2242.  v2:= v7.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e2246.  v3:= v1.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e224a.  v4:= v1.`okio.Segment.c` @type ^`int`;
  #L2e224e.  v5:= v4 - 8192;
  #L2e2252.  if v8 == 0 then goto L2e2262;
  #L2e2256.  v6:= 2I;
  #L2e2258.  call temp:= `deflate`(v2, v3, v4, v5, v6) @signature `Ljava/util/zip/Deflater;.deflate:([BIII)I` @kind virtual;
  #L2e225e.  v2:= temp;
  #L2e2260.  goto L2e226a;
  #L2e2262.  call temp:= `deflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Deflater;.deflate:([BII)I` @kind virtual;
  #L2e2268.  v2:= temp;
  #L2e226a.  if v2 <= 0 then goto L2e2290;
  #L2e226e.  v3:= v1.`okio.Segment.c` @type ^`int`;
  #L2e2272.  v3:= v3 + v2 @kind int;
  #L2e2274.  v1.`okio.Segment.c` @type ^`int` := v3;
  #L2e2278.  v3:= v0.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e227c.  v1:= (`long`) v2 @kind i2l;
  #L2e227e.  v3:= v3 + v1 @kind long;
  #L2e2280.  v0.`okio.Buffer.b` @type ^`long` := v3 @kind wide;
  #L2e2284.  v1:= v7.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2288.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/BufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind interface;
  #L2e228e.  goto L2e2238;
  #L2e2290.  v2:= v7.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e2294.  call temp:= `needsInput`(v2) @signature `Ljava/util/zip/Deflater;.needsInput:()Z` @kind virtual;
  #L2e229a.  v2:= temp;
  #L2e229c.  if v2 == 0 then goto L2e2238;
  #L2e22a0.  v8:= v1.`okio.Segment.b` @type ^`int`;
  #L2e22a4.  v2:= v1.`okio.Segment.c` @type ^`int`;
  #L2e22a8.  if v8 != v2 then goto L2e22be;
  #L2e22ac.  call temp:= `pop`(v1) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2e22b2.  v8:= temp @kind object;
  #L2e22b4.  v0.`okio.Buffer.a` @type ^`okio.Segment` := v8 @kind object;
  #L2e22b8.  call `a`(v1) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L2e22be.  return @kind void;
}
procedure `void` `a`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.a:()V` @AccessFlag  {
    temp;
    v0;

  #L2e22d0.  v0:= v1.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e22d4.  call `finish`(v0) @signature `Ljava/util/zip/Deflater;.finish:()V` @kind virtual;
  #L2e22da.  v0:= 0I;
  #L2e22dc.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L2e22e2.  return @kind void;
}
procedure `void` `close`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e21ac.  v0:= v2.`okio.DeflaterSink.closed` @type ^`boolean` @kind boolean;
  #L2e21b0.  if v0 == 0 then goto L2e21b6;
  #L2e21b4.  return @kind void;
  #L2e21b6.  v0:= 0I;
  #L2e21b8.  call `a`(v2) @signature `Lokio/DeflaterSink;.a:()V` @kind virtual;
  #L2e21be.  goto L2e21c2;
  #L2e21c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e21c2.  v1:= v2.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e21c6.  call `end`(v1) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #L2e21cc.  goto L2e21d6;
  #L2e21ce.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e21d0.  if v0 != 0 then goto L2e21d6;
  #L2e21d4.  v0:= v1 @kind object;
  #L2e21d6.  v1:= v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e21da.  call `close`(v1) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L2e21e0.  goto L2e21ea;
  #L2e21e2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2e21e4.  if v0 != 0 then goto L2e21ea;
  #L2e21e8.  v0:= v1 @kind object;
  #L2e21ea.  v1:= 1I;
  #L2e21ec.  v2.`okio.DeflaterSink.closed` @type ^`boolean` := v1 @kind boolean;
  #L2e21f0.  if v0 == 0 then goto L2e21fa;
  #L2e21f4.  call `sneakyRethrow`(v0) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L2e21fa.  return @kind void;
  catch `java.lang.Throwable` @[L2e21b8..L2e21be] goto L2e21c0;
  catch `java.lang.Throwable` @[L2e21c2..L2e21cc] goto L2e21ce;
  catch `java.lang.Throwable` @[L2e21d6..L2e21e0] goto L2e21e2;
}
procedure `void` `flush`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e22f4.  v0:= 1I;
  #L2e22f6.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L2e22fc.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2300.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L2e2306.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e2124.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e2128.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L2e212e.  v0:= temp @kind object;
  #L2e2130.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2e20e0.  v0:= new `java.lang.StringBuilder`;
  #L2e20e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e20ea.  v1:= "DeflaterSink(" @kind object;
  #L2e20ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e20f4.  v1:= v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L2e20f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e20fe.  v1:= ")" @kind object;
  #L2e2102.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e2108.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e210e.  v0:= temp @kind object;
  #L2e2110.  return v0 @kind object;
}
procedure `void` `write`(`okio.DeflaterSink` v7 @kind this, `okio.Buffer` v8 @kind object, `long` v9 ) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2e2318.  v0:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e231c.  v2:= 0L;
  #L2e2320.  v4:= v9 @kind wide;
  #L2e2322.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2e2328.  v0:= 0L;
  #L2e232c.  v2:= lcmp(v9, v0);
  #L2e2330.  if v2 <= 0 then goto L2e239c;
  #L2e2334.  v0:= v8.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e2338.  v1:= v0.`okio.Segment.c` @type ^`int`;
  #L2e233c.  v2:= v0.`okio.Segment.b` @type ^`int`;
  #L2e2340.  v1:= v1 - v2 @kind int;
  #L2e2342.  v1:= (`long`) v1 @kind i2l;
  #L2e2344.  call temp:= `min`(v9, v1) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e234a.  v1:= temp @kind wide;
  #L2e234c.  v2:= (`int`) v1 @kind l2i;
  #L2e234e.  v1:= v7.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L2e2352.  v3:= v0.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e2356.  v4:= v0.`okio.Segment.b` @type ^`int`;
  #L2e235a.  call `setInput`(v1, v3, v4, v2) @signature `Ljava/util/zip/Deflater;.setInput:([BII)V` @kind virtual;
  #L2e2360.  v1:= 0I;
  #L2e2362.  call `deflate`(v7, v1) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L2e2368.  v3:= v8.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e236c.  v5:= (`long`) v2 @kind i2l;
  #L2e236e.  v3:= v3 - v5 @kind long;
  #L2e2370.  v8.`okio.Buffer.b` @type ^`long` := v3 @kind wide;
  #L2e2374.  v1:= v0.`okio.Segment.b` @type ^`int`;
  #L2e2378.  v1:= v1 + v2 @kind int;
  #L2e237a.  v0.`okio.Segment.b` @type ^`int` := v1;
  #L2e237e.  v2:= v0.`okio.Segment.c` @type ^`int`;
  #L2e2382.  if v1 != v2 then goto L2e2398;
  #L2e2386.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2e238c.  v1:= temp @kind object;
  #L2e238e.  v8.`okio.Buffer.a` @type ^`okio.Segment` := v1 @kind object;
  #L2e2392.  call `a`(v0) @signature `Lokio/SegmentPool;.a:(Lokio/Segment;)V` @kind static;
  #L2e2398.  v9:= v9 - v5 @kind long;
  #L2e239a.  goto L2e2328;
  #L2e239c.  return @kind void;
}
