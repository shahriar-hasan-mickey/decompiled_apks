record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v2 @kind this, `okio.Source` v3 @kind object) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2e29b4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2e29ba.  v0:= 0I;
  #L2e29bc.  v2.`okio.GzipSource.section` @type ^`int` := v0;
  #L2e29c0.  v0:= new `java.util.zip.CRC32`;
  #L2e29c4.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L2e29ca.  v2.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L2e29ce.  if v3 == 0 then goto L2e29fe;
  #L2e29d2.  v0:= new `java.util.zip.Inflater`;
  #L2e29d6.  v1:= 1I;
  #L2e29d8.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L2e29de.  v2.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L2e29e2.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2e29e8.  v3:= temp @kind object;
  #L2e29ea.  v2.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v3 @kind object;
  #L2e29ee.  v1:= new `okio.InflaterSource`;
  #L2e29f2.  call `<init>`(v1, v3, v0) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L2e29f8.  v2.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v1 @kind object;
  #L2e29fc.  return @kind void;
  #L2e29fe.  v3:= new `java.lang.IllegalArgumentException`;
  #L2e2a02.  v0:= "source == null" @kind object;
  #L2e2a06.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2a0c.  throw v3;
}
procedure `void` `checkEqual`(`okio.GzipSource` v3 @kind this, `java.lang.String` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2e2a20.  if v6 != v5 then goto L2e2a26;
  #L2e2a24.  return @kind void;
  #L2e2a26.  v0:= new `java.io.IOException`;
  #L2e2a2a.  v1:= 3I;
  #L2e2a2c.  v1:= new `java.lang.Object`[v1];
  #L2e2a30.  v2:= 0I;
  #L2e2a32.  v1[v2]:= v4 @kind object;
  #L2e2a36.  v4:= 1I;
  #L2e2a38.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2e2a3e.  v6:= temp @kind object;
  #L2e2a40.  v1[v4]:= v6 @kind object;
  #L2e2a44.  v4:= 2I;
  #L2e2a46.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2e2a4c.  v5:= temp @kind object;
  #L2e2a4e.  v1[v4]:= v5 @kind object;
  #L2e2a52.  v4:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L2e2a56.  call temp:= `format`(v4, v1) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L2e2a5c.  v4:= temp @kind object;
  #L2e2a5e.  call `<init>`(v0, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2a64.  throw v0;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v17 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L2e2a94.  v6:= v17 @kind object;
  #L2e2a98.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2a9c.  v1:= 10L;
  #L2e2aa0.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L2e2aa6.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2aaa.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2ab0.  v0:= temp @kind object;
  #L2e2ab2.  v1:= 3L;
  #L2e2ab6.  call temp:= `getByte`(v0, v1) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L2e2abc.  v7:= temp;
  #L2e2abe.  v0:= v7 ^> 1;
  #L2e2ac2.  v8:= 1I;
  #L2e2ac4.  v0:= v0 ^& v8 @kind int;
  #L2e2ac6.  v9:= 0I;
  #L2e2ac8.  if v0 != v8 then goto L2e2ad0;
  #L2e2acc.  v10:= 1I;
  #L2e2ace.  goto L2e2ad2;
  #L2e2ad0.  v10:= 0I;
  #L2e2ad2.  if v10 == 0 then goto L2e2af4;
  #L2e2ad6.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2ada.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2ae0.  v1:= temp @kind object;
  #L2e2ae2.  v2:= 0L;
  #L2e2ae6.  v4:= 10L;
  #L2e2aea.  v0:= v17 @kind object;
  #L2e2aee.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2af4.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2af8.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L2e2afe.  v0:= temp;
  #L2e2b00.  v1:= 8075I;
  #L2e2b04.  v2:= "ID1ID2" @kind object;
  #L2e2b08.  call `checkEqual`(v6, v2, v1, v0) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2e2b0e.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b12.  v1:= 8L;
  #L2e2b16.  call `skip`(v0, v1) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2e2b1c.  v0:= v7 ^> 2;
  #L2e2b20.  v0:= v0 ^& v8 @kind int;
  #L2e2b22.  if v0 != v8 then goto L2e2ba0;
  #L2e2b26.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b2a.  v1:= 2L;
  #L2e2b2e.  call `require`(v0, v1) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L2e2b34.  if v10 == 0 then goto L2e2b56;
  #L2e2b38.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b3c.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2b42.  v1:= temp @kind object;
  #L2e2b44.  v2:= 0L;
  #L2e2b48.  v4:= 2L;
  #L2e2b4c.  v0:= v17 @kind object;
  #L2e2b50.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2b56.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b5a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2b60.  v0:= temp @kind object;
  #L2e2b62.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L2e2b68.  v0:= temp;
  #L2e2b6a.  v1:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b6e.  v11:= (`long`) v0 @kind i2l;
  #L2e2b70.  call `require`(v1, v11) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L2e2b76.  if v10 == 0 then goto L2e2b96;
  #L2e2b7a.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b7e.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2b84.  v1:= temp @kind object;
  #L2e2b86.  v2:= 0L;
  #L2e2b8a.  v0:= v17 @kind object;
  #L2e2b8e.  v4:= v11 @kind wide;
  #L2e2b90.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2b96.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2b9a.  call `skip`(v0, v11) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2e2ba0.  v0:= v7 ^> 3;
  #L2e2ba4.  v0:= v0 ^& v8 @kind int;
  #L2e2ba6.  v11:= -1L;
  #L2e2baa.  v13:= 1L;
  #L2e2bae.  if v0 != v8 then goto L2e2c04;
  #L2e2bb2.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2bb6.  call temp:= `indexOf`(v0, v9) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L2e2bbc.  v15:= temp @kind wide;
  #L2e2bbe.  v0:= lcmp(v15, v11);
  #L2e2bc2.  if v0 == 0 then goto L2e2bf8;
  #L2e2bc6.  if v10 == 0 then goto L2e2be8;
  #L2e2bca.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2bce.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2bd4.  v1:= temp @kind object;
  #L2e2bd6.  v2:= 0L;
  #L2e2bda.  v4:= v15 + v13 @kind long;
  #L2e2bde.  v0:= v17 @kind object;
  #L2e2be2.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2be8.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2bec.  v1:= v15 + v13 @kind long;
  #L2e2bf0.  call `skip`(v0, v1) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2e2bf6.  goto L2e2c04;
  #L2e2bf8.  v0:= new `java.io.EOFException`;
  #L2e2bfc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2e2c02.  throw v0;
  #L2e2c04.  v0:= v7 ^> 4;
  #L2e2c08.  v0:= v0 ^& v8 @kind int;
  #L2e2c0a.  if v0 != v8 then goto L2e2c5e;
  #L2e2c0e.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2c12.  call temp:= `indexOf`(v0, v9) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L2e2c18.  v7:= temp @kind wide;
  #L2e2c1a.  v0:= lcmp(v7, v11);
  #L2e2c1e.  if v0 == 0 then goto L2e2c52;
  #L2e2c22.  if v10 == 0 then goto L2e2c44;
  #L2e2c26.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2c2a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L2e2c30.  v1:= temp @kind object;
  #L2e2c32.  v2:= 0L;
  #L2e2c36.  v4:= v7 + v13 @kind long;
  #L2e2c3a.  v0:= v17 @kind object;
  #L2e2c3e.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2c44.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2c48.  v7:= v7 + v13 @kind long;
  #L2e2c4a.  call `skip`(v0, v7) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L2e2c50.  goto L2e2c5e;
  #L2e2c52.  v0:= new `java.io.EOFException`;
  #L2e2c56.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2e2c5c.  throw v0;
  #L2e2c5e.  if v10 == 0 then goto L2e2c92;
  #L2e2c62.  v0:= v6.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2c66.  call temp:= `readShortLe`(v0) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L2e2c6c.  v0:= temp;
  #L2e2c6e.  v1:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e2c72.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L2e2c78.  v1:= temp @kind wide;
  #L2e2c7a.  v2:= (`int`) v1 @kind l2i;
  #L2e2c7c.  v1:= (`short`) v2 @kind i2s;
  #L2e2c7e.  v2:= "FHCRC" @kind object;
  #L2e2c82.  call `checkEqual`(v6, v2, v0, v1) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2e2c88.  v0:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e2c8c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L2e2c92.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v3 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2e2ca4.  v0:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2ca8.  call temp:= `readIntLe`(v0) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L2e2cae.  v0:= temp;
  #L2e2cb0.  v1:= v3.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e2cb4.  call temp:= `getValue`(v1) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L2e2cba.  v1:= temp @kind wide;
  #L2e2cbc.  v2:= (`int`) v1 @kind l2i;
  #L2e2cbe.  v1:= "CRC" @kind object;
  #L2e2cc2.  call `checkEqual`(v3, v1, v0, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2e2cc8.  v0:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2ccc.  call temp:= `readIntLe`(v0) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L2e2cd2.  v0:= temp;
  #L2e2cd4.  v1:= v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L2e2cd8.  call temp:= `getBytesWritten`(v1) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L2e2cde.  v1:= temp @kind wide;
  #L2e2ce0.  v2:= (`int`) v1 @kind l2i;
  #L2e2ce2.  v1:= "ISIZE" @kind object;
  #L2e2ce6.  call `checkEqual`(v3, v1, v0, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L2e2cec.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v5 @kind this, `okio.Buffer` v6 @kind object, `long` v7 , `long` v9 ) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2e2d00.  v6:= v6.`okio.Buffer.a` @type ^`okio.Segment` @kind object;
  #L2e2d04.  v0:= v6.`okio.Segment.c` @type ^`int`;
  #L2e2d08.  v1:= v6.`okio.Segment.b` @type ^`int`;
  #L2e2d0c.  v2:= v0 - v1 @kind int;
  #L2e2d10.  v2:= (`long`) v2 @kind i2l;
  #L2e2d12.  v4:= lcmp(v7, v2);
  #L2e2d16.  if v4 < 0 then goto L2e2d26;
  #L2e2d1a.  v0:= v0 - v1 @kind int;
  #L2e2d1c.  v0:= (`long`) v0 @kind i2l;
  #L2e2d1e.  v7:= v7 - v0 @kind long;
  #L2e2d20.  v6:= v6.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e2d24.  goto L2e2d04;
  #L2e2d26.  v0:= 0L;
  #L2e2d2a.  v2:= lcmp(v9, v0);
  #L2e2d2e.  if v2 <= 0 then goto L2e2d68;
  #L2e2d32.  v2:= v6.`okio.Segment.b` @type ^`int`;
  #L2e2d36.  v2:= (`long`) v2 @kind i2l;
  #L2e2d38.  v2:= v2 + v7 @kind long;
  #L2e2d3a.  v7:= (`int`) v2 @kind l2i;
  #L2e2d3c.  v8:= v6.`okio.Segment.c` @type ^`int`;
  #L2e2d40.  v8:= v8 - v7 @kind int;
  #L2e2d42.  v2:= (`long`) v8 @kind i2l;
  #L2e2d44.  call temp:= `min`(v2, v9) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2e2d4a.  v2:= temp @kind wide;
  #L2e2d4c.  v8:= (`int`) v2 @kind l2i;
  #L2e2d4e.  v2:= v5.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L2e2d52.  v3:= v6.`okio.Segment.a` @type ^`byte`[] @kind object;
  #L2e2d56.  call `update`(v2, v3, v7, v8) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L2e2d5c.  v7:= (`long`) v8 @kind i2l;
  #L2e2d5e.  v9:= v9 - v7 @kind long;
  #L2e2d60.  v6:= v6.`okio.Segment.f` @type ^`okio.Segment` @kind object;
  #L2e2d64.  v7:= v0 @kind wide;
  #L2e2d66.  goto L2e2d2a;
  #L2e2d68.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e2a78.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L2e2a7c.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L2e2a82.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v11 @kind this, `okio.Buffer` v12 @kind object, `long` v13 ) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2e28bc.  v0:= 0L;
  #L2e28c0.  v2:= lcmp(v13, v0);
  #L2e28c4.  if v2 < 0 then goto L2e2956;
  #L2e28c8.  v2:= lcmp(v13, v0);
  #L2e28cc.  if v2 != 0 then goto L2e28d2;
  #L2e28d0.  return v0 @kind wide;
  #L2e28d2.  v0:= v11.`okio.GzipSource.section` @type ^`int`;
  #L2e28d6.  v1:= 1I;
  #L2e28d8.  if v0 != 0 then goto L2e28e6;
  #L2e28dc.  call `consumeHeader`(v11) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L2e28e2.  v11.`okio.GzipSource.section` @type ^`int` := v1;
  #L2e28e6.  v0:= v11.`okio.GzipSource.section` @type ^`int`;
  #L2e28ea.  v2:= -1L;
  #L2e28ee.  v4:= 2I;
  #L2e28f0.  if v0 != v1 then goto L2e291e;
  #L2e28f4.  v7:= v12.`okio.Buffer.b` @type ^`long` @kind wide;
  #L2e28f8.  v0:= v11.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L2e28fc.  call temp:= `read`(v0, v12, v13) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L2e2902.  v13:= temp @kind wide;
  #L2e2904.  v0:= lcmp(v13, v2);
  #L2e2908.  if v0 == 0 then goto L2e291a;
  #L2e290c.  v5:= v11 @kind object;
  #L2e290e.  v6:= v12 @kind object;
  #L2e2910.  v9:= v13 @kind wide;
  #L2e2912.  call `updateCrc`(v5, v6, v7, v9) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L2e2918.  return v13 @kind wide;
  #L2e291a.  v11.`okio.GzipSource.section` @type ^`int` := v4;
  #L2e291e.  v12:= v11.`okio.GzipSource.section` @type ^`int`;
  #L2e2922.  if v12 != v4 then goto L2e2954;
  #L2e2926.  call `consumeTrailer`(v11) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L2e292c.  v12:= 3I;
  #L2e292e.  v11.`okio.GzipSource.section` @type ^`int` := v12;
  #L2e2932.  v12:= v11.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2936.  call temp:= `exhausted`(v12) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L2e293c.  v12:= temp;
  #L2e293e.  if v12 == 0 then goto L2e2944;
  #L2e2942.  goto L2e2954;
  #L2e2944.  v12:= new `java.io.IOException`;
  #L2e2948.  v13:= "gzip finished without exhausting source" @kind object;
  #L2e294c.  call `<init>`(v12, v13) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2952.  throw v12;
  #L2e2954.  return v2 @kind wide;
  #L2e2956.  v12:= new `java.lang.IllegalArgumentException`;
  #L2e295a.  v0:= new `java.lang.StringBuilder`;
  #L2e295e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2e2964.  v1:= "byteCount < 0: " @kind object;
  #L2e2968.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e296e.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2e2974.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2e297a.  v13:= temp @kind object;
  #L2e297c.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2e2982.  throw v12;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2e2994.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L2e2998.  call temp:= `timeout`(v0) @signature `Lokio/Source;.timeout:()Lokio/Timeout;` @kind interface;
  #L2e299e.  v0:= temp @kind object;
  #L2e29a0.  return v0 @kind object;
}
