record `org.apache.commons.lang3.math.Fraction` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class, `java.lang.Comparable` @kind interface {
  `int` `org.apache.commons.lang3.math.Fraction.denominator` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.math.Fraction.hashCode` @AccessFlag PRIVATE_TRANSIENT;
  `int` `org.apache.commons.lang3.math.Fraction.numerator` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.apache.commons.lang3.math.Fraction.toProperString` @AccessFlag PRIVATE_TRANSIENT;
  `java.lang.String` `org.apache.commons.lang3.math.Fraction.toString` @AccessFlag PRIVATE_TRANSIENT;
}
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.FOUR_FIFTHS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ONE` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ONE_FIFTH` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ONE_HALF` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ONE_QUARTER` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ONE_THIRD` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.THREE_FIFTHS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.THREE_QUARTERS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.TWO_FIFTHS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.TWO_QUARTERS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.TWO_THIRDS` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.apache.commons.lang3.math.Fraction` `@@org.apache.commons.lang3.math.Fraction.ZERO` @AccessFlag PUBLIC_STATIC_FINAL;
global `long` `@@org.apache.commons.lang3.math.Fraction.serialVersionUID` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/math/Fraction;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.math.Fraction` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.<init>:(II)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `int` `addAndCheck`(`int` v3 , `int` v4 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.addAndCheck:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `addSub`(`org.apache.commons.lang3.math.Fraction` v5 @kind this, `org.apache.commons.lang3.math.Fraction` v6 @kind object, `boolean` v7 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.addSub:(Lorg/apache/commons/lang3/math/Fraction;Z)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PRIVATE {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `getFraction`(`double` v23 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.getFraction:(D)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `getFraction`(`int` v1 , `int` v2 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.getFraction:(II)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `getFraction`(`int` v4 , `int` v5 , `int` v6 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.getFraction:(III)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `getFraction`(`java.lang.String` v5 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.getFraction:(Ljava/lang/String;)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `getReducedFraction`(`int` v2 , `int` v3 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.getReducedFraction:(II)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `greatestCommonDivisor`(`int` v6 , `int` v7 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.greatestCommonDivisor:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `mulAndCheck`(`int` v3 , `int` v4 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.mulAndCheck:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `mulPosAndCheck`(`int` v3 , `int` v4 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.mulPosAndCheck:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `subAndCheck`(`int` v3 , `int` v4 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.subAndCheck:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `abs`(`org.apache.commons.lang3.math.Fraction` v1 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.abs:()Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `add`(`org.apache.commons.lang3.math.Fraction` v1 @kind this, `org.apache.commons.lang3.math.Fraction` v2 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.add:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `compareTo`(`org.apache.commons.lang3.math.Fraction` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `int` `compareTo`(`org.apache.commons.lang3.math.Fraction` v7 @kind this, `org.apache.commons.lang3.math.Fraction` v8 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.compareTo:(Lorg/apache/commons/lang3/math/Fraction;)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `divideBy`(`org.apache.commons.lang3.math.Fraction` v3 @kind this, `org.apache.commons.lang3.math.Fraction` v4 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.divideBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `doubleValue`(`org.apache.commons.lang3.math.Fraction` v4 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.doubleValue:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.apache.commons.lang3.math.Fraction` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `float` `floatValue`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.floatValue:()F` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDenominator`(`org.apache.commons.lang3.math.Fraction` v1 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.getDenominator:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getNumerator`(`org.apache.commons.lang3.math.Fraction` v1 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.getNumerator:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getProperNumerator`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.getProperNumerator:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getProperWhole`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.getProperWhole:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `intValue`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.intValue:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `invert`(`org.apache.commons.lang3.math.Fraction` v3 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.invert:()Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `longValue`(`org.apache.commons.lang3.math.Fraction` v4 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.longValue:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `multiplyBy`(`org.apache.commons.lang3.math.Fraction` v4 @kind this, `org.apache.commons.lang3.math.Fraction` v5 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.multiplyBy:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `negate`(`org.apache.commons.lang3.math.Fraction` v3 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.negate:()Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `pow`(`org.apache.commons.lang3.math.Fraction` v3 @kind this, `int` v4 ) @signature `Lorg/apache/commons/lang3/math/Fraction;.pow:(I)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `reduce`(`org.apache.commons.lang3.math.Fraction` v3 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.reduce:()Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.apache.commons.lang3.math.Fraction` `subtract`(`org.apache.commons.lang3.math.Fraction` v1 @kind this, `org.apache.commons.lang3.math.Fraction` v2 @kind object) @signature `Lorg/apache/commons/lang3/math/Fraction;.subtract:(Lorg/apache/commons/lang3/math/Fraction;)Lorg/apache/commons/lang3/math/Fraction;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toProperString`(`org.apache.commons.lang3.math.Fraction` v4 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.toProperString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.apache.commons.lang3.math.Fraction` v2 @kind this) @signature `Lorg/apache/commons/lang3/math/Fraction;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
