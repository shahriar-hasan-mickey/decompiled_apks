record `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy` @kind class @AccessFlag ABSTRACT {
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy` v0 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy` v0 @kind this, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$1` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;.<init>:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `long` `fetchCheckInterval`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v0 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;.fetchCheckInterval:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;)J` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isCheckIntervalFinished`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$StateStrategy` v2 @kind this, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v3 @kind object, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v4 @kind object, `long` v5 ) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;.isCheckIntervalFinished:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;J)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isStateTransition`(`org.apache.commons.lang3.concurrent.EventCountCircuitBreaker` v0 @kind object, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v1 @kind object, `org.apache.commons.lang3.concurrent.EventCountCircuitBreaker$CheckIntervalData` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$StateStrategy;.isStateTransition:(Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;Lorg/apache/commons/lang3/concurrent/EventCountCircuitBreaker$CheckIntervalData;)Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
