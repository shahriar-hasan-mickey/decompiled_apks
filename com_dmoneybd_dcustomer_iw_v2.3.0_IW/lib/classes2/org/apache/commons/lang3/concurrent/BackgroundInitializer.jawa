record `org.apache.commons.lang3.concurrent.BackgroundInitializer` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.apache.commons.lang3.concurrent.ConcurrentInitializer` @kind interface {
  `java.util.concurrent.ExecutorService` `org.apache.commons.lang3.concurrent.BackgroundInitializer.executor` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `org.apache.commons.lang3.concurrent.BackgroundInitializer.externalExecutor` @AccessFlag PRIVATE;
  `java.util.concurrent.Future` `org.apache.commons.lang3.concurrent.BackgroundInitializer.future` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v0 @kind this, `java.util.concurrent.ExecutorService` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.<init>:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `java.util.concurrent.ExecutorService` `createExecutor`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.createExecutor:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.util.concurrent.Callable` `createTask`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.createTask:(Ljava/util/concurrent/ExecutorService;)Ljava/util/concurrent/Callable;` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Object` `get`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.ExecutorService` `getActiveExecutor`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.getActiveExecutor:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PROTECTED_FINAL {

  # return;
}
procedure `java.util.concurrent.ExecutorService` `getExternalExecutor`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.getExternalExecutor:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.util.concurrent.Future` `getFuture`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.getFuture:()Ljava/util/concurrent/Future;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getTaskCount`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.getTaskCount:()I` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.Object` `initialize`() @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.initialize:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isStarted`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.isStarted:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setExternalExecutor`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v1 @kind this, `java.util.concurrent.ExecutorService` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.setExternalExecutor:(Ljava/util/concurrent/ExecutorService;)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `boolean` `start`(`org.apache.commons.lang3.concurrent.BackgroundInitializer` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BackgroundInitializer;.start:()Z` @AccessFlag PUBLIC {

  # return;
}
