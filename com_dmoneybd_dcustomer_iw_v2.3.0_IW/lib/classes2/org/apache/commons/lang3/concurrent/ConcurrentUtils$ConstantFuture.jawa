record `org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` @kind class @AccessFlag FINAL extends `java.util.concurrent.Future` @kind interface {
  `java.lang.Object` `org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture.value` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v0 @kind this, `java.lang.Object` v1 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.<init>:(Ljava/lang/Object;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `cancel`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v0 @kind this, `boolean` v1 ) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.cancel:(Z)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.get:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `get`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v0 @kind this, `long` v1 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.get:(JLjava/util/concurrent/TimeUnit;)Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isCancelled`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.isCancelled:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDone`(`org.apache.commons.lang3.concurrent.ConcurrentUtils$ConstantFuture` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/ConcurrentUtils$ConstantFuture;.isDone:()Z` @AccessFlag PUBLIC {

  # return;
}
