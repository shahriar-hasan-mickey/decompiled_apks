record `org.apache.commons.lang3.concurrent.BasicThreadFactory` @kind class @AccessFlag PUBLIC extends `java.util.concurrent.ThreadFactory` @kind interface {
  `java.lang.Boolean` `org.apache.commons.lang3.concurrent.BasicThreadFactory.daemonFlag` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `org.apache.commons.lang3.concurrent.BasicThreadFactory.namingPattern` @AccessFlag PRIVATE_FINAL;
  `java.lang.Integer` `org.apache.commons.lang3.concurrent.BasicThreadFactory.priority` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.atomic.AtomicLong` `org.apache.commons.lang3.concurrent.BasicThreadFactory.threadCounter` @AccessFlag PRIVATE_FINAL;
  `java.lang.Thread$UncaughtExceptionHandler` `org.apache.commons.lang3.concurrent.BasicThreadFactory.uncaughtExceptionHandler` @AccessFlag PRIVATE_FINAL;
  `java.util.concurrent.ThreadFactory` `org.apache.commons.lang3.concurrent.BasicThreadFactory.wrappedFactory` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this, `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.<init>:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v0 @kind this, `org.apache.commons.lang3.concurrent.BasicThreadFactory$Builder` v1 @kind object, `org.apache.commons.lang3.concurrent.BasicThreadFactory$1` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.<init>:(Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$Builder;Lorg/apache/commons/lang3/concurrent/BasicThreadFactory$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `void` `initializeThread`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v4 @kind this, `java.lang.Thread` v5 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.initializeThread:(Ljava/lang/Thread;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Boolean` `getDaemonFlag`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getDaemonFlag:()Ljava/lang/Boolean;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.String` `getNamingPattern`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getNamingPattern:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.Integer` `getPriority`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getPriority:()Ljava/lang/Integer;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `long` `getThreadCount`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getThreadCount:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Thread$UncaughtExceptionHandler` `getUncaughtExceptionHandler`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getUncaughtExceptionHandler:()Ljava/lang/Thread$UncaughtExceptionHandler;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.util.concurrent.ThreadFactory` `getWrappedFactory`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.getWrappedFactory:()Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `java.lang.Thread` `newThread`(`org.apache.commons.lang3.concurrent.BasicThreadFactory` v1 @kind this, `java.lang.Runnable` v2 @kind object) @signature `Lorg/apache/commons/lang3/concurrent/BasicThreadFactory;.newThread:(Ljava/lang/Runnable;)Ljava/lang/Thread;` @AccessFlag PUBLIC {

  # return;
}
