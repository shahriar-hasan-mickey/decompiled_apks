record `org.apache.commons.lang3.concurrent.TimedSemaphore` @kind class @AccessFlag PUBLIC {
  `int` `org.apache.commons.lang3.concurrent.TimedSemaphore.acquireCount` @AccessFlag PRIVATE;
  `java.util.concurrent.ScheduledExecutorService` `org.apache.commons.lang3.concurrent.TimedSemaphore.executorService` @AccessFlag PRIVATE_FINAL;
  `int` `org.apache.commons.lang3.concurrent.TimedSemaphore.lastCallsPerPeriod` @AccessFlag PRIVATE;
  `int` `org.apache.commons.lang3.concurrent.TimedSemaphore.limit` @AccessFlag PRIVATE;
  `boolean` `org.apache.commons.lang3.concurrent.TimedSemaphore.ownExecutor` @AccessFlag PRIVATE_FINAL;
  `long` `org.apache.commons.lang3.concurrent.TimedSemaphore.period` @AccessFlag PRIVATE_FINAL;
  `long` `org.apache.commons.lang3.concurrent.TimedSemaphore.periodCount` @AccessFlag PRIVATE;
  `boolean` `org.apache.commons.lang3.concurrent.TimedSemaphore.shutdown` @AccessFlag PRIVATE;
  `java.util.concurrent.ScheduledFuture` `org.apache.commons.lang3.concurrent.TimedSemaphore.task` @AccessFlag PRIVATE;
  `long` `org.apache.commons.lang3.concurrent.TimedSemaphore.totalAcquireCount` @AccessFlag PRIVATE;
  `java.util.concurrent.TimeUnit` `org.apache.commons.lang3.concurrent.TimedSemaphore.unit` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@org.apache.commons.lang3.concurrent.TimedSemaphore.NO_LIMIT` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.apache.commons.lang3.concurrent.TimedSemaphore.THREAD_POOL_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v6 @kind this, `long` v7 , `java.util.concurrent.TimeUnit` v9 @kind object, `int` v10 ) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.<init>:(JLjava/util/concurrent/TimeUnit;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v7 @kind this, `java.util.concurrent.ScheduledExecutorService` v8 @kind object, `long` v9 , `java.util.concurrent.TimeUnit` v11 @kind object, `int` v12 ) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.<init>:(Ljava/util/concurrent/ScheduledExecutorService;JLjava/util/concurrent/TimeUnit;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `acquirePermit`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.acquirePermit:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `prepareAcquire`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.prepareAcquire:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `a`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v5 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.a:()V` @AccessFlag  {

  # return;
}
procedure `void` `acquire`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.acquire:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getAcquireCount`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getAcquireCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getAvailablePermits`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getAvailablePermits:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `double` `getAverageCallsPerPeriod`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v5 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getAverageCallsPerPeriod:()D` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.ScheduledExecutorService` `getExecutorService`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getExecutorService:()Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `getLastAcquiresPerPeriod`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getLastAcquiresPerPeriod:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getLimit`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getLimit:()I` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `long` `getPeriod`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getPeriod:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.TimeUnit` `getUnit`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.getUnit:()Ljava/util/concurrent/TimeUnit;` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isShutdown`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.isShutdown:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setLimit`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v0 @kind this, `int` v1 ) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.setLimit:(I)V` @AccessFlag PUBLIC_FINAL {

  # return;
}
procedure `void` `shutdown`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v2 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.shutdown:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.util.concurrent.ScheduledFuture` `startTimer`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v7 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.startTimer:()Ljava/util/concurrent/ScheduledFuture;` @AccessFlag PROTECTED {

  # return;
}
procedure `boolean` `tryAcquire`(`org.apache.commons.lang3.concurrent.TimedSemaphore` v1 @kind this) @signature `Lorg/apache/commons/lang3/concurrent/TimedSemaphore;.tryAcquire:()Z` @AccessFlag PUBLIC {

  # return;
}
