record `org.apache.commons.lang3.reflect.TypeUtils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.reflect.WildcardType` `@@org.apache.commons.lang3.reflect.TypeUtils.WILDCARD_ALL` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.apache.commons.lang3.reflect.TypeUtils` v0 @kind this) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `boolean` `a`(`java.lang.reflect.GenericArrayType` v0 @kind object, `java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.a:(Ljava/lang/reflect/GenericArrayType;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.StringBuilder` `appendAllTo`(`java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.reflect.Type`[] v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.appendAllTo:(Ljava/lang/StringBuilder;Ljava/lang/String;[Ljava/lang/reflect/Type;)Ljava/lang/StringBuilder;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `b`(`java.lang.reflect.ParameterizedType` v0 @kind object, `java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.b:(Ljava/lang/reflect/ParameterizedType;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `c`(`java.lang.reflect.WildcardType` v0 @kind object, `java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.c:(Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `java.lang.String` `classToString`(`java.lang.Class` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.classToString:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `containsTypeVariables`(`java.lang.reflect.Type` v5 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.containsTypeVariables:(Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `determineTypeArguments`(`java.lang.Class` v3 @kind object, `java.lang.reflect.ParameterizedType` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.determineTypeArguments:(Ljava/lang/Class;Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.reflect.GenericArrayType` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.equals:(Ljava/lang/reflect/GenericArrayType;Ljava/lang/reflect/Type;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.reflect.ParameterizedType` v2 @kind object, `java.lang.reflect.Type` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.equals:(Ljava/lang/reflect/ParameterizedType;Ljava/lang/reflect/Type;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.reflect.WildcardType` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.equals:(Ljava/lang/reflect/WildcardType;Ljava/lang/reflect/Type;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `equals`(`java.lang.reflect.Type`[] v4 @kind object, `java.lang.reflect.Type`[] v5 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.equals:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `extractTypeArgumentsFrom`(`java.util.Map` v9 @kind object, `java.lang.reflect.TypeVariable`[] v10 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.extractTypeArgumentsFrom:(Ljava/util/Map;[Ljava/lang/reflect/TypeVariable;)[Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.GenericArrayType` `genericArrayType`(`java.lang.reflect.Type` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.genericArrayType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `genericArrayTypeToString`(`java.lang.reflect.GenericArrayType` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.genericArrayTypeToString:(Ljava/lang/reflect/GenericArrayType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `getArrayComponentType`(`java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getArrayComponentType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `getClosestParentType`(`java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getClosestParentType:(Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitBounds`(`java.lang.reflect.TypeVariable` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitBounds:(Ljava/lang/reflect/TypeVariable;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitLowerBounds`(`java.lang.reflect.WildcardType` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitLowerBounds:(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `getImplicitUpperBounds`(`java.lang.reflect.WildcardType` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getImplicitUpperBounds:(Ljava/lang/reflect/WildcardType;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.ParameterizedType` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getRawType:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getRawType:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.Class` v1 @kind object, `java.lang.Class` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/Class;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.ParameterizedType` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/ParameterizedType;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.ParameterizedType` v6 @kind object, `java.lang.Class` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/ParameterizedType;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.util.Map` `getTypeArguments`(`java.lang.reflect.Type` v5 @kind object, `java.lang.Class` v6 @kind object, `java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.getTypeArguments:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/util/Map;)Ljava/util/Map;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isArrayType`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isArrayType:(Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.GenericArrayType` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/GenericArrayType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.ParameterizedType` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.TypeVariable` v7 @kind object, `java.util.Map` v8 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/TypeVariable;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isAssignable`(`java.lang.reflect.Type` v10 @kind object, `java.lang.reflect.WildcardType` v11 @kind object, `java.util.Map` v12 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isAssignable:(Ljava/lang/reflect/Type;Ljava/lang/reflect/WildcardType;Ljava/util/Map;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isInstance`(`java.lang.Object` v1 @kind object, `java.lang.reflect.Type` v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.isInstance:(Ljava/lang/Object;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `mapTypeVariablesToArguments`(`java.lang.Class` v5 @kind object, `java.lang.reflect.ParameterizedType` v6 @kind object, `java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.mapTypeVariablesToArguments:(Ljava/lang/Class;Ljava/lang/reflect/ParameterizedType;Ljava/util/Map;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `normalizeUpperBounds`(`java.lang.reflect.Type`[] v9 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.normalizeUpperBounds:([Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `parameterize`(`java.lang.Class` v3 @kind object, `java.util.Map` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.parameterize:(Ljava/lang/Class;Ljava/util/Map;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC_FINAL {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `parameterize`(`java.lang.Class` v1 @kind object, `java.lang.reflect.Type`[] v2 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.parameterize:(Ljava/lang/Class;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC_FINAL {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `parameterizeWithOwner`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.util.Map` v5 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.parameterizeWithOwner:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/util/Map;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC_FINAL {

  # return;
}
procedure `java.lang.reflect.ParameterizedType` `parameterizeWithOwner`(`java.lang.reflect.Type` v7 @kind object, `java.lang.Class` v8 @kind object, `java.lang.reflect.Type`[] v9 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.parameterizeWithOwner:(Ljava/lang/reflect/Type;Ljava/lang/Class;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC_FINAL {

  # return;
}
procedure `java.lang.String` `parameterizedTypeToString`(`java.lang.reflect.ParameterizedType` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.parameterizedTypeToString:(Ljava/lang/reflect/ParameterizedType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `substituteTypeVariables`(`java.lang.reflect.Type` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.substituteTypeVariables:(Ljava/lang/reflect/Type;Ljava/util/Map;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.String` `toLongString`(`java.lang.reflect.TypeVariable` v5 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.toLongString:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `toString`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.toString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `typeVariableToString`(`java.lang.reflect.TypeVariable` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.typeVariableToString:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `typesSatisfyVariables`(`java.util.Map` v7 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.typesSatisfyVariables:(Ljava/util/Map;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.reflect.Type`[] `unrollBounds`(`java.util.Map` v2 @kind object, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.unrollBounds:(Ljava/util/Map;[Ljava/lang/reflect/Type;)[Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `unrollVariableAssignments`(`java.lang.reflect.TypeVariable` v2 @kind object, `java.util.Map` v3 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.unrollVariableAssignments:(Ljava/lang/reflect/TypeVariable;Ljava/util/Map;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.lang.reflect.Type` `unrollVariables`(`java.util.Map` v3 @kind object, `java.lang.reflect.Type` v4 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.unrollVariables:(Ljava/util/Map;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.reflect.TypeUtils$WildcardTypeBuilder` `wildcardType`() @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.wildcardType:()Lorg/apache/commons/lang3/reflect/TypeUtils$WildcardTypeBuilder;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.lang.String` `wildcardTypeToString`(`java.lang.reflect.WildcardType` v6 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.wildcardTypeToString:(Ljava/lang/reflect/WildcardType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.reflect.Typed` `wrap`(`java.lang.Class` v0 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.wrap:(Ljava/lang/Class;)Lorg/apache/commons/lang3/reflect/Typed;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.apache.commons.lang3.reflect.Typed` `wrap`(`java.lang.reflect.Type` v1 @kind object) @signature `Lorg/apache/commons/lang3/reflect/TypeUtils;.wrap:(Ljava/lang/reflect/Type;)Lorg/apache/commons/lang3/reflect/Typed;` @AccessFlag PUBLIC_STATIC {

  # return;
}
