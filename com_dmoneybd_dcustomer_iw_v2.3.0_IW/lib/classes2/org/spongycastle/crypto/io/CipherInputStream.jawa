record `org.spongycastle.crypto.io.CipherInputStream` @kind class @AccessFlag PUBLIC extends `java.io.FilterInputStream` @kind class {
  `org.spongycastle.crypto.modes.AEADBlockCipher` `org.spongycastle.crypto.io.CipherInputStream.aeadBlockCipher` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.io.CipherInputStream.buf` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.io.CipherInputStream.bufOff` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BufferedBlockCipher` `org.spongycastle.crypto.io.CipherInputStream.bufferedBlockCipher` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.io.CipherInputStream.finalized` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.io.CipherInputStream.inBuf` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.io.CipherInputStream.markBuf` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.io.CipherInputStream.markBufOff` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.io.CipherInputStream.markPosition` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.io.CipherInputStream.maxBuf` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.SkippingCipher` `org.spongycastle.crypto.io.CipherInputStream.skippingCipher` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.StreamCipher` `org.spongycastle.crypto.io.CipherInputStream.streamCipher` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.io.CipherInputStream.INPUT_BUF_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v1 @kind this, `java.io.InputStream` v2 @kind object, `org.spongycastle.crypto.BufferedBlockCipher` v3 @kind object) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/BufferedBlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `org.spongycastle.crypto.BufferedBlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/BufferedBlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v1 @kind this, `java.io.InputStream` v2 @kind object, `org.spongycastle.crypto.StreamCipher` v3 @kind object) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/StreamCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `org.spongycastle.crypto.StreamCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/StreamCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v1 @kind this, `java.io.InputStream` v2 @kind object, `org.spongycastle.crypto.modes.AEADBlockCipher` v3 @kind object) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/modes/AEADBlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.io.CipherInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `org.spongycastle.crypto.modes.AEADBlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.<init>:(Ljava/io/InputStream;Lorg/spongycastle/crypto/modes/AEADBlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `ensureCapacity`(`org.spongycastle.crypto.io.CipherInputStream` v0 @kind this, `int` v1 , `boolean` v2 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.ensureCapacity:(IZ)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `finaliseCipher`(`org.spongycastle.crypto.io.CipherInputStream` v4 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.finaliseCipher:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `nextChunk`(`org.spongycastle.crypto.io.CipherInputStream` v10 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.nextChunk:()I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `available`(`org.spongycastle.crypto.io.CipherInputStream` v2 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.available:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `close`(`org.spongycastle.crypto.io.CipherInputStream` v3 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.close:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mark`(`org.spongycastle.crypto.io.CipherInputStream` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.mark:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `markSupported`(`org.spongycastle.crypto.io.CipherInputStream` v1 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.markSupported:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.io.CipherInputStream` v3 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.read:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.io.CipherInputStream` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.read:([B)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.crypto.io.CipherInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.read:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.io.CipherInputStream` v3 @kind this) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `skip`(`org.spongycastle.crypto.io.CipherInputStream` v5 @kind this, `long` v6 ) @signature `Lorg/spongycastle/crypto/io/CipherInputStream;.skip:(J)J` @AccessFlag PUBLIC {

  # return;
}
