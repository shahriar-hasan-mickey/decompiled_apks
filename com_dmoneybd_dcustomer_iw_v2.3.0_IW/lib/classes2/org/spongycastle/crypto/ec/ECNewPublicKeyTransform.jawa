record `org.spongycastle.crypto.ec.ECNewPublicKeyTransform` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.ec.ECPairTransform` @kind interface {
  `org.spongycastle.crypto.params.ECPublicKeyParameters` `org.spongycastle.crypto.ec.ECNewPublicKeyTransform.key` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.spongycastle.crypto.ec.ECNewPublicKeyTransform.random` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.ec.ECNewPublicKeyTransform` v0 @kind this) @signature `Lorg/spongycastle/crypto/ec/ECNewPublicKeyTransform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.math.ec.ECMultiplier` `createBasePointMultiplier`(`org.spongycastle.crypto.ec.ECNewPublicKeyTransform` v1 @kind this) @signature `Lorg/spongycastle/crypto/ec/ECNewPublicKeyTransform;.createBasePointMultiplier:()Lorg/spongycastle/math/ec/ECMultiplier;` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.ec.ECNewPublicKeyTransform` v2 @kind this, `org.spongycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/ec/ECNewPublicKeyTransform;.init:(Lorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.ec.ECPair` `transform`(`org.spongycastle.crypto.ec.ECNewPublicKeyTransform` v5 @kind this, `org.spongycastle.crypto.ec.ECPair` v6 @kind object) @signature `Lorg/spongycastle/crypto/ec/ECNewPublicKeyTransform;.transform:(Lorg/spongycastle/crypto/ec/ECPair;)Lorg/spongycastle/crypto/ec/ECPair;` @AccessFlag PUBLIC {

  # return;
}
