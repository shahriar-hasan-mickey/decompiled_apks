record `org.spongycastle.crypto.digests.SkeinEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.util.Memoable` @kind interface {
  `org.spongycastle.crypto.engines.ThreefishEngine` `org.spongycastle.crypto.digests.SkeinEngine.a` @AccessFlag FINAL;
  `long`[] `org.spongycastle.crypto.digests.SkeinEngine.b` @AccessFlag ;
  `long`[] `org.spongycastle.crypto.digests.SkeinEngine.initialState` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.digests.SkeinEngine.key` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SkeinEngine.outputSizeBytes` @AccessFlag PRIVATE_FINAL;
  `org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] `org.spongycastle.crypto.digests.SkeinEngine.postMessageParameters` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] `org.spongycastle.crypto.digests.SkeinEngine.preMessageParameters` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.digests.SkeinEngine.singleByte` @AccessFlag PRIVATE_FINAL;
  `org.spongycastle.crypto.digests.SkeinEngine$UBI` `org.spongycastle.crypto.digests.SkeinEngine.ubi` @AccessFlag PRIVATE_FINAL;
}
global `java.util.Hashtable` `@@org.spongycastle.crypto.digests.SkeinEngine.INITIAL_STATES` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.PARAM_TYPE_CONFIG` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.PARAM_TYPE_KEY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.PARAM_TYPE_MESSAGE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.PARAM_TYPE_OUTPUT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.SKEIN_1024` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.SKEIN_256` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinEngine.SKEIN_512` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `org.spongycastle.crypto.digests.SkeinEngine` v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.<init>:(Lorg/spongycastle/crypto/digests/SkeinEngine;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `checkInitialised`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.checkInitialised:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] `clone`(`org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] v2 @kind object, `org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.clone:([Lorg/spongycastle/crypto/digests/SkeinEngine$Parameter;[Lorg/spongycastle/crypto/digests/SkeinEngine$Parameter;)[Lorg/spongycastle/crypto/digests/SkeinEngine$Parameter;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `copyIn`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `org.spongycastle.crypto.digests.SkeinEngine` v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.copyIn:(Lorg/spongycastle/crypto/digests/SkeinEngine;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `createInitialState`(`org.spongycastle.crypto.digests.SkeinEngine` v5 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.createInitialState:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initParams`(`org.spongycastle.crypto.digests.SkeinEngine` v7 @kind this, `java.util.Hashtable` v8 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.initParams:(Ljava/util/Hashtable;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initialState`(`int` v1 , `int` v2 , `long`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.initialState:(II[J)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `output`(`org.spongycastle.crypto.digests.SkeinEngine` v8 @kind this, `long` v9 , `byte`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.output:(J[BII)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `sort`(`org.spongycastle.crypto.digests.SkeinEngine$Parameter`[] v6 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.sort:([Lorg/spongycastle/crypto/digests/SkeinEngine$Parameter;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `ubiComplete`(`org.spongycastle.crypto.digests.SkeinEngine` v3 @kind this, `int` v4 , `byte`[] v5 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.ubiComplete:(I[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `ubiFinal`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.ubiFinal:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `ubiInit`(`org.spongycastle.crypto.digests.SkeinEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.ubiInit:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.Integer` `variantIdentifier`(`int` v1 , `int` v2 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.variantIdentifier:(II)Ljava/lang/Integer;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.util.Memoable` `copy`(`org.spongycastle.crypto.digests.SkeinEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.copy:()Lorg/spongycastle/util/Memoable;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SkeinEngine` v11 @kind this, `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.digests.SkeinEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.digests.SkeinEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.getOutputSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `org.spongycastle.crypto.params.SkeinParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.init:(Lorg/spongycastle/crypto/params/SkeinParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SkeinEngine` v4 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `org.spongycastle.util.Memoable` v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.reset:(Lorg/spongycastle/util/Memoable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `byte` v3 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.SkeinEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/digests/SkeinEngine;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
