record `org.spongycastle.crypto.digests.SHAKEDigest` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.digests.KeccakDigest` @kind class, `org.spongycastle.crypto.Xof` @kind interface {
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHAKEDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHAKEDigest` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHAKEDigest` v0 @kind this, `org.spongycastle.crypto.digests.SHAKEDigest` v1 @kind object) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.<init>:(Lorg/spongycastle/crypto/digests/SHAKEDigest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `checkBitLength`(`int` v3 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.checkBitLength:(I)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SHAKEDigest` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SHAKEDigest` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte` v9 , `int` v10 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.doFinal:([BIBI)I` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SHAKEDigest` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.doFinal:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SHAKEDigest` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte` v9 , `int` v10 ) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.doFinal:([BIIBI)I` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.digests.SHAKEDigest` v2 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHAKEDigest;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
