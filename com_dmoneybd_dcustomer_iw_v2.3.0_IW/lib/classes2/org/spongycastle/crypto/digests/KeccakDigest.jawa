record `org.spongycastle.crypto.digests.KeccakDigest` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.ExtendedDigest` @kind interface {
  `long`[] `org.spongycastle.crypto.digests.KeccakDigest.a` @AccessFlag ;
  `long`[] `org.spongycastle.crypto.digests.KeccakDigest.b` @AccessFlag ;
  `int` `org.spongycastle.crypto.digests.KeccakDigest.bitsAvailableForSqueezing` @AccessFlag PROTECTED;
  `int` `org.spongycastle.crypto.digests.KeccakDigest.bitsInQueue` @AccessFlag PROTECTED;
  `long`[] `org.spongycastle.crypto.digests.KeccakDigest.c` @AccessFlag ;
  `byte`[] `org.spongycastle.crypto.digests.KeccakDigest.chunk` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.digests.KeccakDigest.dataQueue` @AccessFlag PROTECTED;
  `int` `org.spongycastle.crypto.digests.KeccakDigest.fixedOutputLength` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.digests.KeccakDigest.oneByte` @AccessFlag PROTECTED;
  `int` `org.spongycastle.crypto.digests.KeccakDigest.rate` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.digests.KeccakDigest.squeezing` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.digests.KeccakDigest.state` @AccessFlag PROTECTED;
}
global `int`[] `@@org.spongycastle.crypto.digests.KeccakDigest.KeccakRhoOffsets` @AccessFlag PRIVATE_STATIC;
global `long`[] `@@org.spongycastle.crypto.digests.KeccakDigest.KeccakRoundConstants` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.KeccakDigest` v4 @kind this, `org.spongycastle.crypto.digests.KeccakDigest` v5 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.<init>:(Lorg/spongycastle/crypto/digests/KeccakDigest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `KeccakAbsorb`(`org.spongycastle.crypto.digests.KeccakDigest` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.KeccakAbsorb:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `KeccakExtract`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this, `byte`[] v2 @kind object, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.KeccakExtract:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `KeccakExtract1024bits`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.KeccakExtract1024bits:([B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `LFSR86540`(`byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.LFSR86540:([B)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `absorbQueue`(`org.spongycastle.crypto.digests.KeccakDigest` v3 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.absorbQueue:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `chi`(`org.spongycastle.crypto.digests.KeccakDigest` v13 @kind this, `long`[] v14 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.chi:([J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `clearDataQueueSection`(`org.spongycastle.crypto.digests.KeccakDigest` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.clearDataQueueSection:(II)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `fromBytesToWords`(`org.spongycastle.crypto.digests.KeccakDigest` v10 @kind this, `long`[] v11 @kind object, `byte`[] v12 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.fromBytesToWords:([J[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `fromWordsToBytes`(`org.spongycastle.crypto.digests.KeccakDigest` v9 @kind this, `byte`[] v10 @kind object, `long`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.fromWordsToBytes:([B[J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.digests.KeccakDigest` v4 @kind this, `int` v5 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.init:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `initSponge`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.initSponge:(II)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `iota`(`org.spongycastle.crypto.digests.KeccakDigest` v6 @kind this, `long`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.iota:([JI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `keccakInitializeRhoOffsets`() @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.keccakInitializeRhoOffsets:()[I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `long`[] `keccakInitializeRoundConstants`() @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.keccakInitializeRoundConstants:()[J` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `keccakPermutation`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.keccakPermutation:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `keccakPermutationAfterXor`(`org.spongycastle.crypto.digests.KeccakDigest` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.keccakPermutationAfterXor:([B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `keccakPermutationOnWords`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `long`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.keccakPermutationOnWords:([J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `padAndSwitchToSqueezingPhase`(`org.spongycastle.crypto.digests.KeccakDigest` v5 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.padAndSwitchToSqueezingPhase:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `pi`(`org.spongycastle.crypto.digests.KeccakDigest` v8 @kind this, `long`[] v9 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.pi:([J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `rho`(`org.spongycastle.crypto.digests.KeccakDigest` v10 @kind this, `long`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.rho:([J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `theta`(`org.spongycastle.crypto.digests.KeccakDigest` v10 @kind this, `long`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.theta:([J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `absorb`(`org.spongycastle.crypto.digests.KeccakDigest` v17 @kind this, `byte`[] v18 @kind object, `int` v19 , `long` v20 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.absorb:([BIJ)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte` v5 , `int` v6 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.doFinal:([BIBI)I` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.digests.KeccakDigest` v2 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getByteLength`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.getByteLength:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestSize`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.getDigestSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.KeccakDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `squeeze`(`org.spongycastle.crypto.digests.KeccakDigest` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `long` v13 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.squeeze:([BIJ)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.KeccakDigest` v4 @kind this, `byte` v5 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.KeccakDigest` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/digests/KeccakDigest;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
