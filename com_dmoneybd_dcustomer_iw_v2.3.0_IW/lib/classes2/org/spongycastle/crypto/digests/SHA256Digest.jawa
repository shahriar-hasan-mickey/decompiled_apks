record `org.spongycastle.crypto.digests.SHA256Digest` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.digests.GeneralDigest` @kind class, `org.spongycastle.crypto.digests.EncodableDigest` @kind interface {
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H1` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H2` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H3` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H4` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H5` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H6` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H7` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.H8` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.digests.SHA256Digest.X` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.SHA256Digest.xOff` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.digests.SHA256Digest.DIGEST_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.digests.SHA256Digest.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this, `org.spongycastle.crypto.digests.SHA256Digest` v2 @kind object) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.<init>:(Lorg/spongycastle/crypto/digests/SHA256Digest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.<init>:([B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `Ch`(`org.spongycastle.crypto.digests.SHA256Digest` v0 @kind this, `int` v1 , `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Ch:(III)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Maj`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this, `int` v2 , `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Maj:(III)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Sum0`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Sum0:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Sum1`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Sum1:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Theta0`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Theta0:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Theta1`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.Theta1:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `copyIn`(`org.spongycastle.crypto.digests.SHA256Digest` v4 @kind this, `org.spongycastle.crypto.digests.SHA256Digest` v5 @kind object) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.copyIn:(Lorg/spongycastle/crypto/digests/SHA256Digest;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.util.Memoable` `copy`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.copy:()Lorg/spongycastle/util/Memoable;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SHA256Digest` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestSize`(`org.spongycastle.crypto.digests.SHA256Digest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.getDigestSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getEncodedState`(`org.spongycastle.crypto.digests.SHA256Digest` v4 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.getEncodedState:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processBlock`(`org.spongycastle.crypto.digests.SHA256Digest` v15 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.processBlock:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `processLength`(`org.spongycastle.crypto.digests.SHA256Digest` v4 @kind this, `long` v5 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.processLength:(J)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `processWord`(`org.spongycastle.crypto.digests.SHA256Digest` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.processWord:([BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SHA256Digest` v4 @kind this) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SHA256Digest` v0 @kind this, `org.spongycastle.util.Memoable` v1 @kind object) @signature `Lorg/spongycastle/crypto/digests/SHA256Digest;.reset:(Lorg/spongycastle/util/Memoable;)V` @AccessFlag PUBLIC {

  # return;
}
