record `org.spongycastle.crypto.digests.WhirlpoolDigest` @kind class @AccessFlag PUBLIC_FINAL extends `org.spongycastle.crypto.ExtendedDigest` @kind interface, `org.spongycastle.util.Memoable` @kind interface {
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._K` @AccessFlag PRIVATE;
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._L` @AccessFlag PRIVATE;
  `short`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._bitCount` @AccessFlag PRIVATE;
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._block` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._buffer` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.digests.WhirlpoolDigest._bufferPos` @AccessFlag PRIVATE;
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._hash` @AccessFlag PRIVATE;
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._rc` @AccessFlag PRIVATE_FINAL;
  `long`[] `org.spongycastle.crypto.digests.WhirlpoolDigest._state` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.digests.WhirlpoolDigest.BITCOUNT_ARRAY_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.WhirlpoolDigest.BYTE_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C0` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C1` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C2` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C3` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C4` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C5` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C6` @AccessFlag PRIVATE_STATIC_FINAL;
global `long`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.C7` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.WhirlpoolDigest.DIGEST_LENGTH_BYTES` @AccessFlag PRIVATE_STATIC_FINAL;
global `short`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.EIGHT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.WhirlpoolDigest.REDUCTION_POLYNOMIAL` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.WhirlpoolDigest.ROUNDS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.digests.WhirlpoolDigest.SBOX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v20 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v2 @kind this, `org.spongycastle.crypto.digests.WhirlpoolDigest` v3 @kind object) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.<init>:(Lorg/spongycastle/crypto/digests/WhirlpoolDigest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `long` `bytesToLongFromBuffer`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v7 @kind this, `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.bytesToLongFromBuffer:([BI)J` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `convertLongToByteArray`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v6 @kind this, `long` v7 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.convertLongToByteArray:(J[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `copyBitLength`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v4 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.copyBitLength:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `finish`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v5 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.finish:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `increment`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v5 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.increment:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `maskWithReductionPolynomial`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v5 @kind this, `int` v6 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.maskWithReductionPolynomial:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `long` `packIntoLong`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `int` v7 , `int` v8 , `int` v9 , `int` v10 , `int` v11 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.packIntoLong:(IIIIIIII)J` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `processFilledBuffer`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.processFilledBuffer:([BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.util.Memoable` `copy`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.copy:()Lorg/spongycastle/util/Memoable;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v4 @kind this, `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getByteLength`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.getByteLength:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestSize`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.getDigestSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processBlock`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v19 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.processBlock:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v3 @kind this) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v4 @kind this, `org.spongycastle.util.Memoable` v5 @kind object) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.reset:(Lorg/spongycastle/util/Memoable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v2 @kind this, `byte` v3 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.WhirlpoolDigest` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/WhirlpoolDigest;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
