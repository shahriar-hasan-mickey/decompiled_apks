record `org.spongycastle.crypto.digests.SkeinDigest` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.ExtendedDigest` @kind interface, `org.spongycastle.util.Memoable` @kind interface {
  `org.spongycastle.crypto.digests.SkeinEngine` `org.spongycastle.crypto.digests.SkeinDigest.engine` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.digests.SkeinDigest.SKEIN_1024` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinDigest.SKEIN_256` @AccessFlag PUBLIC_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.digests.SkeinDigest.SKEIN_512` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.<init>:(II)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `org.spongycastle.crypto.digests.SkeinDigest` v2 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.<init>:(Lorg/spongycastle/crypto/digests/SkeinDigest;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.util.Memoable` `copy`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.copy:()Lorg/spongycastle/util/Memoable;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.digests.SkeinDigest` v2 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getByteLength`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.getByteLength:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getDigestSize`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.getDigestSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `org.spongycastle.crypto.params.SkeinParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.init:(Lorg/spongycastle/crypto/params/SkeinParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `org.spongycastle.util.Memoable` v2 @kind object) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.reset:(Lorg/spongycastle/util/Memoable;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `byte` v2 ) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.crypto.digests.SkeinDigest` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/digests/SkeinDigest;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
