record `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.prng.drbg.SP80090DRBG` @kind interface {
  `byte`[] `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._Key` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._V` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._engine` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.prng.EntropySource` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._entropySource` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._isTDEA` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._keySizeInBits` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._reseedCounter` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._securityStrength` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.CTRSP800DRBG._seedLength` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.prng.drbg.CTRSP800DRBG.AES_MAX_BITS_REQUEST` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.crypto.prng.drbg.CTRSP800DRBG.AES_RESEED_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.spongycastle.crypto.prng.drbg.CTRSP800DRBG.K_BITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.prng.drbg.CTRSP800DRBG.TDEA_MAX_BITS_REQUEST` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.crypto.prng.drbg.CTRSP800DRBG.TDEA_RESEED_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object, `int` v4 , `int` v5 , `org.spongycastle.crypto.prng.EntropySource` v6 @kind object, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.<init>:(Lorg/spongycastle/crypto/BlockCipher;IILorg/spongycastle/crypto/prng/EntropySource;[B[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `BCC`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v6 @kind this, `byte`[] v7 @kind object, `byte`[] v8 @kind object, `byte`[] v9 @kind object, `byte`[] v10 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.BCC:([B[B[B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `Block_Cipher_df`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v16 @kind this, `byte`[] v17 @kind object, `int` v18 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.Block_Cipher_df:([BI)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `CTR_DRBG_Instantiate_algorithm`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.CTR_DRBG_Instantiate_algorithm:([B[B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `CTR_DRBG_Reseed_algorithm`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.CTR_DRBG_Reseed_algorithm:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `CTR_DRBG_Update`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v8 @kind this, `byte`[] v9 @kind object, `byte`[] v10 @kind object, `byte`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.CTR_DRBG_Update:([B[B[B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `XOR`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.XOR:([B[B[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `addOneTo`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v5 @kind this, `byte`[] v6 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.addOneTo:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `copyIntToByteArray`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.copyIntToByteArray:([BII)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `getEntropy`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v3 @kind this) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.getEntropy:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `getMaxSecurityStrength`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.getMaxSecurityStrength:(Lorg/spongycastle/crypto/BlockCipher;I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `isTDEA`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.isTDEA:(Lorg/spongycastle/crypto/BlockCipher;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `padKey`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.padKey:([BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `a`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.a:([B)[B` @AccessFlag  {

  # return;
}
procedure `int` `generate`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v7 @kind this, `byte`[] v8 @kind object, `byte`[] v9 @kind object, `boolean` v10 ) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.generate:([B[BZ)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reseed`(`org.spongycastle.crypto.prng.drbg.CTRSP800DRBG` v0 @kind this, `byte`[] v1 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/CTRSP800DRBG;.reseed:([B)V` @AccessFlag PUBLIC {

  # return;
}
