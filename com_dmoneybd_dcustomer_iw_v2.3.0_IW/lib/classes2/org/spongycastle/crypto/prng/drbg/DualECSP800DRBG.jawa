record `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.prng.drbg.SP80090DRBG` @kind interface {
  `org.spongycastle.math.ec.ECPoint` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._P` @AccessFlag PRIVATE;
  `org.spongycastle.math.ec.ECPoint` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._Q` @AccessFlag PRIVATE;
  `org.spongycastle.math.ec.ECCurve$Fp` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._curve` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Digest` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._digest` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.prng.EntropySource` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._entropySource` @AccessFlag PRIVATE;
  `org.spongycastle.math.ec.ECMultiplier` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._fixedPointMultiplier` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._outlen` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._reseedCounter` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._s` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._sLength` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._securityStrength` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.prng.drbg.DualECSP800DRBG._seedlen` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.MAX_ADDITIONAL_INPUT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.MAX_ENTROPY_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.MAX_PERSONALIZATION_STRING` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.RESEED_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
global `org.spongycastle.crypto.prng.drbg.DualECPoints`[] `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.nistPoints` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p256_Px` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p256_Py` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p256_Qx` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p256_Qy` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p384_Px` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p384_Py` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p384_Qx` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p384_Qy` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p521_Px` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p521_Py` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p521_Qx` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.prng.drbg.DualECSP800DRBG.p521_Qy` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v7 @kind this, `org.spongycastle.crypto.Digest` v8 @kind object, `int` v9 , `org.spongycastle.crypto.prng.EntropySource` v10 @kind object, `byte`[] v11 @kind object, `byte`[] v12 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.<init>:(Lorg/spongycastle/crypto/Digest;ILorg/spongycastle/crypto/prng/EntropySource;[B[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v2 @kind this, `org.spongycastle.crypto.prng.drbg.DualECPoints`[] v3 @kind object, `org.spongycastle.crypto.Digest` v4 @kind object, `int` v5 , `org.spongycastle.crypto.prng.EntropySource` v6 @kind object, `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.<init>:([Lorg/spongycastle/crypto/prng/drbg/DualECPoints;Lorg/spongycastle/crypto/Digest;ILorg/spongycastle/crypto/prng/EntropySource;[B[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `getEntropy`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v3 @kind this) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.getEntropy:()[B` @AccessFlag PRIVATE {

  # return;
}
procedure `java.math.BigInteger` `getScalarMultipleXCoord`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v1 @kind this, `org.spongycastle.math.ec.ECPoint` v2 @kind object, `java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.getScalarMultipleXCoord:(Lorg/spongycastle/math/ec/ECPoint;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `pad8`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v5 @kind this, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.pad8:([BI)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `xor`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v5 @kind this, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.xor:([B[B)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `generate`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v9 @kind this, `byte`[] v10 @kind object, `byte`[] v11 @kind object, `boolean` v12 ) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.generate:([B[BZ)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v1 @kind this) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reseed`(`org.spongycastle.crypto.prng.drbg.DualECSP800DRBG` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/prng/drbg/DualECSP800DRBG;.reseed:([B)V` @AccessFlag PUBLIC {

  # return;
}
