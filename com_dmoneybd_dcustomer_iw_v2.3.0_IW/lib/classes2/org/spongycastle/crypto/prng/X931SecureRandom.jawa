record `org.spongycastle.crypto.prng.X931SecureRandom` @kind class @AccessFlag PUBLIC extends `java.security.SecureRandom` @kind class {
  `org.spongycastle.crypto.prng.X931RNG` `org.spongycastle.crypto.prng.X931SecureRandom.drbg` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.prng.X931SecureRandom.predictionResistant` @AccessFlag PRIVATE_FINAL;
  `java.security.SecureRandom` `org.spongycastle.crypto.prng.X931SecureRandom.randomSource` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.spongycastle.crypto.prng.X931SecureRandom` v0 @kind this, `java.security.SecureRandom` v1 @kind object, `org.spongycastle.crypto.prng.X931RNG` v2 @kind object, `boolean` v3 ) @signature `Lorg/spongycastle/crypto/prng/X931SecureRandom;.<init>:(Ljava/security/SecureRandom;Lorg/spongycastle/crypto/prng/X931RNG;Z)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `byte`[] `generateSeed`(`org.spongycastle.crypto.prng.X931SecureRandom` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/prng/X931SecureRandom;.generateSeed:(I)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `nextBytes`(`org.spongycastle.crypto.prng.X931SecureRandom` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/prng/X931SecureRandom;.nextBytes:([B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setSeed`(`org.spongycastle.crypto.prng.X931SecureRandom` v1 @kind this, `long` v2 ) @signature `Lorg/spongycastle/crypto/prng/X931SecureRandom;.setSeed:(J)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `setSeed`(`org.spongycastle.crypto.prng.X931SecureRandom` v1 @kind this, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/prng/X931SecureRandom;.setSeed:([B)V` @AccessFlag PUBLIC {

  # return;
}
