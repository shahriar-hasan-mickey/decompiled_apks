record `org.spongycastle.crypto.StreamBlockCipher` @kind class @AccessFlag PUBLIC_ABSTRACT extends `org.spongycastle.crypto.BlockCipher` @kind interface, `org.spongycastle.crypto.StreamCipher` @kind interface {
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.StreamBlockCipher.cipher` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.spongycastle.crypto.StreamBlockCipher` v0 @kind this, `org.spongycastle.crypto.BlockCipher` v1 @kind object) @signature `Lorg/spongycastle/crypto/StreamBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `byte` `calculateByte`(`byte` v0 ) @signature `Lorg/spongycastle/crypto/StreamBlockCipher;.calculateByte:(B)B` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.StreamBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/StreamBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.StreamBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/StreamBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte` `returnByte`(`org.spongycastle.crypto.StreamBlockCipher` v0 @kind this, `byte` v1 ) @signature `Lorg/spongycastle/crypto/StreamBlockCipher;.returnByte:(B)B` @AccessFlag PUBLIC_FINAL {

  # return;
}
