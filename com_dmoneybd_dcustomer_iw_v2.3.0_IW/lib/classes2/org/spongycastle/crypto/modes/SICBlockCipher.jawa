record `org.spongycastle.crypto.modes.SICBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.StreamBlockCipher` @kind class, `org.spongycastle.crypto.SkippingStreamCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.SICBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.SICBlockCipher.blockSize` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.modes.SICBlockCipher.byteCount` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.SICBlockCipher.cipher` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.modes.SICBlockCipher.counter` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.SICBlockCipher.counterOut` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.SICBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `adjustCounter`(`org.spongycastle.crypto.modes.SICBlockCipher` v13 @kind this, `long` v14 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.adjustCounter:(J)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `checkCounter`(`org.spongycastle.crypto.modes.SICBlockCipher` v3 @kind this) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.checkCounter:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `decrementCounterAt`(`org.spongycastle.crypto.modes.SICBlockCipher` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.decrementCounterAt:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `incrementCounter`(`org.spongycastle.crypto.modes.SICBlockCipher` v5 @kind this, `int` v6 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.incrementCounter:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `incrementCounterAt`(`org.spongycastle.crypto.modes.SICBlockCipher` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.incrementCounterAt:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `byte` `calculateByte`(`org.spongycastle.crypto.modes.SICBlockCipher` v4 @kind this, `byte` v5 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.calculateByte:(B)B` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.SICBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.SICBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `getPosition`(`org.spongycastle.crypto.modes.SICBlockCipher` v7 @kind this) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.getPosition:()J` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.SICBlockCipher` v4 @kind this, `boolean` v5 , `org.spongycastle.crypto.CipherParameters` v6 @kind object) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.modes.SICBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.SICBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `seekTo`(`org.spongycastle.crypto.modes.SICBlockCipher` v0 @kind this, `long` v1 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.seekTo:(J)J` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `skip`(`org.spongycastle.crypto.modes.SICBlockCipher` v4 @kind this, `long` v5 ) @signature `Lorg/spongycastle/crypto/modes/SICBlockCipher;.skip:(J)J` @AccessFlag PUBLIC {

  # return;
}
