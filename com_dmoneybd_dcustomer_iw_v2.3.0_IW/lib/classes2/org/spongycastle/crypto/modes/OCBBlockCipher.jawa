record `org.spongycastle.crypto.modes.OCBBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.Checksum` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.KtopInput` @AccessFlag PRIVATE;
  `java.util.Vector` `org.spongycastle.crypto.modes.OCBBlockCipher.L` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.L_Asterisk` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.L_Dollar` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.OffsetHASH` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.OffsetMAIN` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.OffsetMAIN_0` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.Stretch` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.Sum` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.OCBBlockCipher.forEncryption` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.hashBlock` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.modes.OCBBlockCipher.hashBlockCount` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OCBBlockCipher.hashBlockPos` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.OCBBlockCipher.hashCipher` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.initialAssociatedText` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.macBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OCBBlockCipher.macSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.OCBBlockCipher.mainBlock` @AccessFlag PRIVATE;
  `long` `org.spongycastle.crypto.modes.OCBBlockCipher.mainBlockCount` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.OCBBlockCipher.mainBlockPos` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.OCBBlockCipher.mainCipher` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.modes.OCBBlockCipher.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this, `org.spongycastle.crypto.BlockCipher` v3 @kind object, `org.spongycastle.crypto.BlockCipher` v4 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `OCB_double`(`byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.OCB_double:([B)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `OCB_extend`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.OCB_extend:([BI)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `int` `OCB_ntz`(`long` v6 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.OCB_ntz:(J)I` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `int` `shiftLeft`(`byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.shiftLeft:([B[B)I` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `xor`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.xor:([B[B)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `clear`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this, `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.clear:([B)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.modes.OCBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getLSub`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getLSub:(I)[B` @AccessFlag PROTECTED {

  # return;
}
procedure `byte`[] `getMac`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.OCBBlockCipher` v8 @kind this, `boolean` v9 , `org.spongycastle.crypto.CipherParameters` v10 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this, `byte` v3 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.spongycastle.crypto.modes.OCBBlockCipher` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this, `byte` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.modes.OCBBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processHashBlock`(`org.spongycastle.crypto.modes.OCBBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processHashBlock:()V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `processMainBlock`(`org.spongycastle.crypto.modes.OCBBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processMainBlock:([BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `processNonce`(`org.spongycastle.crypto.modes.OCBBlockCipher` v6 @kind this, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.processNonce:([B)I` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.OCBBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.OCBBlockCipher` v4 @kind this, `boolean` v5 ) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.reset:(Z)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `updateHASH`(`org.spongycastle.crypto.modes.OCBBlockCipher` v2 @kind this, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/modes/OCBBlockCipher;.updateHASH:([B)V` @AccessFlag PROTECTED {

  # return;
}
