record `org.spongycastle.crypto.modes.CBCBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `byte`[] `org.spongycastle.crypto.modes.CBCBlockCipher.IV` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.CBCBlockCipher.blockSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CBCBlockCipher.cbcNextV` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CBCBlockCipher.cbcV` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.CBCBlockCipher.cipher` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.CBCBlockCipher.encrypting` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.CBCBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.modes.CBCBlockCipher` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.decryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.modes.CBCBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.encryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.CBCBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.modes.CBCBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.CBCBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.CBCBlockCipher` v6 @kind this, `boolean` v7 , `org.spongycastle.crypto.CipherParameters` v8 @kind object) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.modes.CBCBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.CBCBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/CBCBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
