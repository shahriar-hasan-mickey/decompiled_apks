record `org.spongycastle.crypto.modes.PaddedBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BufferedBlockCipher` @kind class {
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v0 @kind this, `org.spongycastle.crypto.BlockCipher` v1 @kind object) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v6 @kind this, `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v2 @kind this, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v4 @kind this, `byte` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.modes.PaddedBlockCipher` v5 @kind this, `byte`[] v6 @kind object, `int` v7 , `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/PaddedBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
