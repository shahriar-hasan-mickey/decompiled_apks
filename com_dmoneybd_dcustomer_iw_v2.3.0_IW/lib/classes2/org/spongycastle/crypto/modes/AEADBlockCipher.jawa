record `org.spongycastle.crypto.modes.AEADBlockCipher` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `int` `doFinal`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`() @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `getMac`() @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.getMac:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getOutputSize`(`int` v0 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`() @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getUpdateOutputSize`(`int` v0 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`boolean` v0 , `org.spongycastle.crypto.CipherParameters` v1 @kind object) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `processAADByte`(`byte` v0 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `processAADBytes`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `processByte`(`byte` v0 , `byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `processBytes`(`byte`[] v0 @kind object, `int` v1 , `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `reset`() @signature `Lorg/spongycastle/crypto/modes/AEADBlockCipher;.reset:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
