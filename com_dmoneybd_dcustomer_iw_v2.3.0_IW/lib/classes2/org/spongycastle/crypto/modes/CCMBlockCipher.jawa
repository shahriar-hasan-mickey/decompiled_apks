record `org.spongycastle.crypto.modes.CCMBlockCipher` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.modes.AEADBlockCipher` @kind interface {
  `org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream` `org.spongycastle.crypto.modes.CCMBlockCipher.associatedText` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.CCMBlockCipher.blockSize` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BlockCipher` `org.spongycastle.crypto.modes.CCMBlockCipher.cipher` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.modes.CCMBlockCipher$ExposedByteArrayOutputStream` `org.spongycastle.crypto.modes.CCMBlockCipher.data` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.modes.CCMBlockCipher.forEncryption` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CCMBlockCipher.initialAssociatedText` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.CipherParameters` `org.spongycastle.crypto.modes.CCMBlockCipher.keyParam` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CCMBlockCipher.macBlock` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.modes.CCMBlockCipher.macSize` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.modes.CCMBlockCipher.nonce` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `org.spongycastle.crypto.BlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.<init>:(Lorg/spongycastle/crypto/BlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `calculateMac`(`org.spongycastle.crypto.modes.CCMBlockCipher` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 , `byte`[] v14 @kind object) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.calculateMac:([BII[B)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `getAssociatedTextLength`(`org.spongycastle.crypto.modes.CCMBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getAssociatedTextLength:()I` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `hasAssociatedText`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.hasAssociatedText:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `doFinal`(`org.spongycastle.crypto.modes.CCMBlockCipher` v7 @kind this, `byte`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.doFinal:([BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.modes.CCMBlockCipher` v2 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getMac`(`org.spongycastle.crypto.modes.CCMBlockCipher` v4 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getMac:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputSize`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.BlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getUnderlyingCipher:()Lorg/spongycastle/crypto/BlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getUpdateOutputSize`(`org.spongycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.getUpdateOutputSize:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.modes.CCMBlockCipher` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADByte`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `byte` v2 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processAADByte:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `processAADBytes`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processAADBytes:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processByte`(`org.spongycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `byte` v1 , `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processByte:(B[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBytes`(`org.spongycastle.crypto.modes.CCMBlockCipher` v0 @kind this, `byte`[] v1 @kind object, `int` v2 , `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processBytes:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processPacket`(`org.spongycastle.crypto.modes.CCMBlockCipher` v9 @kind this, `byte`[] v10 @kind object, `int` v11 , `int` v12 , `byte`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processPacket:([BII[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processPacket`(`org.spongycastle.crypto.modes.CCMBlockCipher` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.processPacket:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.modes.CCMBlockCipher` v1 @kind this) @signature `Lorg/spongycastle/crypto/modes/CCMBlockCipher;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
