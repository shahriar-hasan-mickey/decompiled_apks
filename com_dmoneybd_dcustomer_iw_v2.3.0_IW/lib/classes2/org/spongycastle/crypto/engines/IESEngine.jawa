record `org.spongycastle.crypto.engines.IESEngine` @kind class @AccessFlag PUBLIC {
  `byte`[] `org.spongycastle.crypto.engines.IESEngine.IV` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.BasicAgreement` `org.spongycastle.crypto.engines.IESEngine.a` @AccessFlag ;
  `org.spongycastle.crypto.DerivationFunction` `org.spongycastle.crypto.engines.IESEngine.b` @AccessFlag ;
  `org.spongycastle.crypto.Mac` `org.spongycastle.crypto.engines.IESEngine.c` @AccessFlag ;
  `org.spongycastle.crypto.BufferedBlockCipher` `org.spongycastle.crypto.engines.IESEngine.d` @AccessFlag ;
  `byte`[] `org.spongycastle.crypto.engines.IESEngine.e` @AccessFlag ;
  `boolean` `org.spongycastle.crypto.engines.IESEngine.f` @AccessFlag ;
  `org.spongycastle.crypto.CipherParameters` `org.spongycastle.crypto.engines.IESEngine.g` @AccessFlag ;
  `org.spongycastle.crypto.CipherParameters` `org.spongycastle.crypto.engines.IESEngine.h` @AccessFlag ;
  `org.spongycastle.crypto.params.IESParameters` `org.spongycastle.crypto.engines.IESEngine.i` @AccessFlag ;
  `byte`[] `org.spongycastle.crypto.engines.IESEngine.j` @AccessFlag ;
  `org.spongycastle.crypto.generators.EphemeralKeyPairGenerator` `org.spongycastle.crypto.engines.IESEngine.keyPairGenerator` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.KeyParser` `org.spongycastle.crypto.engines.IESEngine.keyParser` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.IESEngine` v0 @kind this, `org.spongycastle.crypto.BasicAgreement` v1 @kind object, `org.spongycastle.crypto.DerivationFunction` v2 @kind object, `org.spongycastle.crypto.Mac` v3 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.<init>:(Lorg/spongycastle/crypto/BasicAgreement;Lorg/spongycastle/crypto/DerivationFunction;Lorg/spongycastle/crypto/Mac;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.IESEngine` v0 @kind this, `org.spongycastle.crypto.BasicAgreement` v1 @kind object, `org.spongycastle.crypto.DerivationFunction` v2 @kind object, `org.spongycastle.crypto.Mac` v3 @kind object, `org.spongycastle.crypto.BufferedBlockCipher` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.<init>:(Lorg/spongycastle/crypto/BasicAgreement;Lorg/spongycastle/crypto/DerivationFunction;Lorg/spongycastle/crypto/Mac;Lorg/spongycastle/crypto/BufferedBlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `decryptBlock`(`org.spongycastle.crypto.engines.IESEngine` v11 @kind this, `byte`[] v12 @kind object, `int` v13 , `int` v14 ) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.decryptBlock:([BII)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `encryptBlock`(`org.spongycastle.crypto.engines.IESEngine` v11 @kind this, `byte`[] v12 @kind object, `int` v13 , `int` v14 ) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.encryptBlock:([BII)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `extractParams`(`org.spongycastle.crypto.engines.IESEngine` v1 @kind this, `org.spongycastle.crypto.CipherParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.extractParams:(Lorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.crypto.BufferedBlockCipher` `getCipher`(`org.spongycastle.crypto.engines.IESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.getCipher:()Lorg/spongycastle/crypto/BufferedBlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getLengthTag`(`org.spongycastle.crypto.engines.IESEngine` v5 @kind this, `byte`[] v6 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.getLengthTag:([B)[B` @AccessFlag PROTECTED {

  # return;
}
procedure `org.spongycastle.crypto.Mac` `getMac`(`org.spongycastle.crypto.engines.IESEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.getMac:()Lorg/spongycastle/crypto/Mac;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.IESEngine` v1 @kind this, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v2 @kind object, `org.spongycastle.crypto.CipherParameters` v3 @kind object, `org.spongycastle.crypto.KeyParser` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.init:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;Lorg/spongycastle/crypto/CipherParameters;Lorg/spongycastle/crypto/KeyParser;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.IESEngine` v1 @kind this, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v2 @kind object, `org.spongycastle.crypto.CipherParameters` v3 @kind object, `org.spongycastle.crypto.generators.EphemeralKeyPairGenerator` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.init:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;Lorg/spongycastle/crypto/CipherParameters;Lorg/spongycastle/crypto/generators/EphemeralKeyPairGenerator;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.IESEngine` v0 @kind this, `boolean` v1 , `org.spongycastle.crypto.CipherParameters` v2 @kind object, `org.spongycastle.crypto.CipherParameters` v3 @kind object, `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;Lorg/spongycastle/crypto/CipherParameters;Lorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processBlock`(`org.spongycastle.crypto.engines.IESEngine` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/IESEngine;.processBlock:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
