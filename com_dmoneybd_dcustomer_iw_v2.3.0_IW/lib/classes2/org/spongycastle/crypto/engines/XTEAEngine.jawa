record `org.spongycastle.crypto.engines.XTEAEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.spongycastle.crypto.engines.XTEAEngine._S` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.engines.XTEAEngine._forEncryption` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.engines.XTEAEngine._initialised` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.XTEAEngine._sum0` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.XTEAEngine._sum1` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.XTEAEngine.block_size` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.XTEAEngine.delta` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.XTEAEngine.rounds` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.engines.XTEAEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `bytesToInt`(`org.spongycastle.crypto.engines.XTEAEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.bytesToInt:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.engines.XTEAEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.decryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.engines.XTEAEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.encryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setKey`(`org.spongycastle.crypto.engines.XTEAEngine` v6 @kind this, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.setKey:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `unpackInt`(`org.spongycastle.crypto.engines.XTEAEngine` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.unpackInt:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.XTEAEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.XTEAEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.XTEAEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.XTEAEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.XTEAEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/XTEAEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
