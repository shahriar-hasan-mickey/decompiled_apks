record `org.spongycastle.crypto.engines.NoekeonEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `boolean` `org.spongycastle.crypto.engines.NoekeonEngine._forEncryption` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.engines.NoekeonEngine._initialised` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.NoekeonEngine.decryptKeys` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.NoekeonEngine.state` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.NoekeonEngine.subKeys` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.NoekeonEngine.genericSize` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.NoekeonEngine.nullVector` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.crypto.engines.NoekeonEngine.roundConstants` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.NoekeonEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `bytesToIntBig`(`org.spongycastle.crypto.engines.NoekeonEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.bytesToIntBig:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `decryptBlock`(`org.spongycastle.crypto.engines.NoekeonEngine` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.decryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `encryptBlock`(`org.spongycastle.crypto.engines.NoekeonEngine` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `byte`[] v10 @kind object, `int` v11 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.encryptBlock:([BI[BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `gamma`(`org.spongycastle.crypto.engines.NoekeonEngine` v7 @kind this, `int`[] v8 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.gamma:([I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `intToBytesBig`(`org.spongycastle.crypto.engines.NoekeonEngine` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.intToBytesBig:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `pi1`(`org.spongycastle.crypto.engines.NoekeonEngine` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.pi1:([I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `pi2`(`org.spongycastle.crypto.engines.NoekeonEngine` v3 @kind this, `int`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.pi2:([I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `rotl`(`org.spongycastle.crypto.engines.NoekeonEngine` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.rotl:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setKey`(`org.spongycastle.crypto.engines.NoekeonEngine` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.setKey:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `theta`(`org.spongycastle.crypto.engines.NoekeonEngine` v9 @kind this, `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.theta:([I[I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.NoekeonEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.NoekeonEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.NoekeonEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.NoekeonEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.NoekeonEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/NoekeonEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
