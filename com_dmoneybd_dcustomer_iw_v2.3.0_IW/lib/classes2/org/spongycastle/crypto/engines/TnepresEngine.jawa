record `org.spongycastle.crypto.engines.TnepresEngine` @kind class @AccessFlag PUBLIC_FINAL extends `org.spongycastle.crypto.engines.SerpentEngineBase` @kind class {
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.TnepresEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/TnepresEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `decryptBlock`(`org.spongycastle.crypto.engines.TnepresEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/TnepresEngine;.decryptBlock:([BI[BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `void` `encryptBlock`(`org.spongycastle.crypto.engines.TnepresEngine` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/crypto/engines/TnepresEngine;.encryptBlock:([BI[BI)V` @AccessFlag PROTECTED {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.TnepresEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/TnepresEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int`[] `makeWorkingKey`(`org.spongycastle.crypto.engines.TnepresEngine` v13 @kind this, `byte`[] v14 @kind object) @signature `Lorg/spongycastle/crypto/engines/TnepresEngine;.makeWorkingKey:([B)[I` @AccessFlag PROTECTED {

  # return;
}
