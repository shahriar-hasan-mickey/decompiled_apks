record `org.spongycastle.crypto.engines.IDEAEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int`[] `org.spongycastle.crypto.engines.IDEAEngine.workingKey` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.IDEAEngine.BASE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.IDEAEngine.BLOCK_SIZE` @AccessFlag PROTECTED_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.IDEAEngine.MASK` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `bytesToWord`(`org.spongycastle.crypto.engines.IDEAEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.bytesToWord:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `expandKey`(`org.spongycastle.crypto.engines.IDEAEngine` v6 @kind this, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.expandKey:([B)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `generateWorkingKey`(`org.spongycastle.crypto.engines.IDEAEngine` v0 @kind this, `boolean` v1 , `byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.generateWorkingKey:(Z[B)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `ideaFunc`(`org.spongycastle.crypto.engines.IDEAEngine` v8 @kind this, `int`[] v9 @kind object, `byte`[] v10 @kind object, `int` v11 , `byte`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.ideaFunc:([I[BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `invertKey`(`org.spongycastle.crypto.engines.IDEAEngine` v8 @kind this, `int`[] v9 @kind object) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.invertKey:([I)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `mul`(`org.spongycastle.crypto.engines.IDEAEngine` v2 @kind this, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.mul:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `mulInv`(`org.spongycastle.crypto.engines.IDEAEngine` v6 @kind this, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.mulInv:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `wordToBytes`(`org.spongycastle.crypto.engines.IDEAEngine` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.wordToBytes:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `a`(`org.spongycastle.crypto.engines.IDEAEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.a:(I)I` @AccessFlag  {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.IDEAEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.IDEAEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.IDEAEngine` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.IDEAEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/IDEAEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
