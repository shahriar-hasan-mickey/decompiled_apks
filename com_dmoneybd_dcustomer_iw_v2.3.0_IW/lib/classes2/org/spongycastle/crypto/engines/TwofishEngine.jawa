record `org.spongycastle.crypto.engines.TwofishEngine` @kind class @AccessFlag PUBLIC_FINAL extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `boolean` `org.spongycastle.crypto.engines.TwofishEngine.encrypting` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gMDS0` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gMDS1` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gMDS2` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gMDS3` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gSBox` @AccessFlag PRIVATE;
  `int`[] `org.spongycastle.crypto.engines.TwofishEngine.gSubKeys` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.engines.TwofishEngine.k64Cnt` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.engines.TwofishEngine.workingKey` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.GF256_FDBK` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.GF256_FDBK_2` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.GF256_FDBK_4` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.INPUT_WHITEN` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.MAX_KEY_BITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.MAX_ROUNDS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.OUTPUT_WHITEN` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[][] `@@org.spongycastle.crypto.engines.TwofishEngine.P` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_00` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_01` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_02` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_03` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_04` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_10` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_11` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_12` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_13` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_14` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_20` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_21` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_22` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_23` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_24` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_30` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_31` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_32` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_33` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.P_34` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.ROUNDS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.ROUND_SUBKEYS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.RS_GF_FDBK` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.SK_BUMP` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.SK_ROTL` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.SK_STEP` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.crypto.engines.TwofishEngine.TOTAL_SUBKEYS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.TwofishEngine` v10 @kind this) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `Bits32ToBytes`(`org.spongycastle.crypto.engines.TwofishEngine` v2 @kind this, `int` v3 , `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.Bits32ToBytes:(I[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `BytesTo32Bits`(`org.spongycastle.crypto.engines.TwofishEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.BytesTo32Bits:([BI)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `F32`(`org.spongycastle.crypto.engines.TwofishEngine` v11 @kind this, `int` v12 , `int`[] v13 @kind object) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.F32:(I[I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Fe32_0`(`org.spongycastle.crypto.engines.TwofishEngine` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.Fe32_0:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Fe32_3`(`org.spongycastle.crypto.engines.TwofishEngine` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.Fe32_3:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `LFSR1`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.LFSR1:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `LFSR2`(`org.spongycastle.crypto.engines.TwofishEngine` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.LFSR2:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Mx_X`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.Mx_X:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `Mx_Y`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.Mx_Y:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `RS_MDS_Encode`(`org.spongycastle.crypto.engines.TwofishEngine` v3 @kind this, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.RS_MDS_Encode:(II)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `RS_rem`(`org.spongycastle.crypto.engines.TwofishEngine` v5 @kind this, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.RS_rem:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `b0`(`org.spongycastle.crypto.engines.TwofishEngine` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.b0:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `b1`(`org.spongycastle.crypto.engines.TwofishEngine` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.b1:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `b2`(`org.spongycastle.crypto.engines.TwofishEngine` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.b2:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `b3`(`org.spongycastle.crypto.engines.TwofishEngine` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.b3:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `decryptBlock`(`org.spongycastle.crypto.engines.TwofishEngine` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `byte`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.decryptBlock:([BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `encryptBlock`(`org.spongycastle.crypto.engines.TwofishEngine` v11 @kind this, `byte`[] v12 @kind object, `int` v13 , `byte`[] v14 @kind object, `int` v15 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.encryptBlock:([BI[BI)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `setKey`(`org.spongycastle.crypto.engines.TwofishEngine` v19 @kind this, `byte`[] v20 @kind object) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.setKey:([B)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.TwofishEngine` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.TwofishEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 ) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.TwofishEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/TwofishEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
