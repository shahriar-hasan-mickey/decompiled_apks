record `org.spongycastle.crypto.engines.NullEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.BlockCipher` @kind interface {
  `int` `org.spongycastle.crypto.engines.NullEngine.blockSize` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.engines.NullEngine.initialised` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.engines.NullEngine.DEFAULT_BLOCK_SIZE` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.engines.NullEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.NullEngine` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.String` `getAlgorithmName`(`org.spongycastle.crypto.engines.NullEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.getAlgorithmName:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getBlockSize`(`org.spongycastle.crypto.engines.NullEngine` v1 @kind this) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.getBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.NullEngine` v0 @kind this, `boolean` v1 , `org.spongycastle.crypto.CipherParameters` v2 @kind object) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `processBlock`(`org.spongycastle.crypto.engines.NullEngine` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.processBlock:([BI[BI)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `reset`(`org.spongycastle.crypto.engines.NullEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/NullEngine;.reset:()V` @AccessFlag PUBLIC {

  # return;
}
