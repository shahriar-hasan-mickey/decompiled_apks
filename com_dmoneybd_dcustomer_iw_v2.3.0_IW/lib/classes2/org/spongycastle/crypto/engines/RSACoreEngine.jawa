record `org.spongycastle.crypto.engines.RSACoreEngine` @kind class @AccessFlag  {
  `boolean` `org.spongycastle.crypto.engines.RSACoreEngine.forEncryption` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.params.RSAKeyParameters` `org.spongycastle.crypto.engines.RSACoreEngine.key` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.crypto.engines.RSACoreEngine` v0 @kind this) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.<init>:()V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `convertInput`(`org.spongycastle.crypto.engines.RSACoreEngine` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.convertInput:([BII)Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `convertOutput`(`org.spongycastle.crypto.engines.RSACoreEngine` v4 @kind this, `java.math.BigInteger` v5 @kind object) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.convertOutput:(Ljava/math/BigInteger;)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getInputBlockSize`(`org.spongycastle.crypto.engines.RSACoreEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.getInputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputBlockSize`(`org.spongycastle.crypto.engines.RSACoreEngine` v2 @kind this) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.getOutputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.engines.RSACoreEngine` v1 @kind this, `boolean` v2 , `org.spongycastle.crypto.CipherParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.math.BigInteger` `processBlock`(`org.spongycastle.crypto.engines.RSACoreEngine` v6 @kind this, `java.math.BigInteger` v7 @kind object) @signature `Lorg/spongycastle/crypto/engines/RSACoreEngine;.processBlock:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
