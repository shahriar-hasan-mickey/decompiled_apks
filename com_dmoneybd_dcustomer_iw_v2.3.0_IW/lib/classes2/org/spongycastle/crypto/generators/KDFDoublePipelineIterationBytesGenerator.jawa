record `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.MacDerivationFunction` @kind interface {
  `byte`[] `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.a` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.fixedInputData` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.generatedBytes` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.h` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.ios` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.k` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.maxSizeExcl` @AccessFlag PRIVATE;
  `org.spongycastle.crypto.Mac` `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.prf` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.useCounter` @AccessFlag PRIVATE;
}
global `java.math.BigInteger` `@@org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.INTEGER_MAX` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator.TWO` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` v1 @kind this, `org.spongycastle.crypto.Mac` v2 @kind object) @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.<init>:(Lorg/spongycastle/crypto/Mac;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `generateNext`(`org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` v8 @kind this) @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.generateNext:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `generateBytes`(`org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.generateBytes:([BII)I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.Mac` `getMac`(`org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.getMac:()Lorg/spongycastle/crypto/Mac;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.generators.KDFDoublePipelineIterationBytesGenerator` v5 @kind this, `org.spongycastle.crypto.DerivationParameters` v6 @kind object) @signature `Lorg/spongycastle/crypto/generators/KDFDoublePipelineIterationBytesGenerator;.init:(Lorg/spongycastle/crypto/DerivationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
