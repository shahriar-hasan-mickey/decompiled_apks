record `org.spongycastle.crypto.generators.Poly1305KeyGenerator` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.CipherKeyGenerator` @kind class {
}
global `byte` `@@org.spongycastle.crypto.generators.Poly1305KeyGenerator.R_MASK_HIGH_4` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@org.spongycastle.crypto.generators.Poly1305KeyGenerator.R_MASK_LOW_2` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.generators.Poly1305KeyGenerator` v0 @kind this) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `checkKey`(`byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.checkKey:([B)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `checkMask`(`byte` v0 , `byte` v1 ) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.checkMask:(BB)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `clamp`(`byte`[] v2 @kind object) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.clamp:([B)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `generateKey`(`org.spongycastle.crypto.generators.Poly1305KeyGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.generateKey:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.generators.Poly1305KeyGenerator` v2 @kind this, `org.spongycastle.crypto.KeyGenerationParameters` v3 @kind object) @signature `Lorg/spongycastle/crypto/generators/Poly1305KeyGenerator;.init:(Lorg/spongycastle/crypto/KeyGenerationParameters;)V` @AccessFlag PUBLIC {

  # return;
}
