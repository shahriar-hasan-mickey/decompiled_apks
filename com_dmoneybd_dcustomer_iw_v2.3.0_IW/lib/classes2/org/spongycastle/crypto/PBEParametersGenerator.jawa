record `org.spongycastle.crypto.PBEParametersGenerator` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `org.spongycastle.crypto.PBEParametersGenerator.iterationCount` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.PBEParametersGenerator.password` @AccessFlag PROTECTED;
  `byte`[] `org.spongycastle.crypto.PBEParametersGenerator.salt` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.spongycastle.crypto.PBEParametersGenerator` v0 @kind this) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `PKCS12PasswordToBytes`(`char`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.PKCS12PasswordToBytes:([C)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `PKCS5PasswordToBytes`(`char`[] v4 @kind object) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.PKCS5PasswordToBytes:([C)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `PKCS5PasswordToUTF8Bytes`(`char`[] v0 @kind object) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.PKCS5PasswordToUTF8Bytes:([C)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.crypto.CipherParameters` `generateDerivedMacParameters`(`int` v0 ) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.generateDerivedMacParameters:(I)Lorg/spongycastle/crypto/CipherParameters;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.CipherParameters` `generateDerivedParameters`(`int` v0 ) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.generateDerivedParameters:(I)Lorg/spongycastle/crypto/CipherParameters;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.CipherParameters` `generateDerivedParameters`(`int` v0 , `int` v1 ) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.generateDerivedParameters:(II)Lorg/spongycastle/crypto/CipherParameters;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getIterationCount`(`org.spongycastle.crypto.PBEParametersGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.getIterationCount:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getPassword`(`org.spongycastle.crypto.PBEParametersGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.getPassword:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getSalt`(`org.spongycastle.crypto.PBEParametersGenerator` v1 @kind this) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.getSalt:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.PBEParametersGenerator` v0 @kind this, `byte`[] v1 @kind object, `byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/PBEParametersGenerator;.init:([B[BI)V` @AccessFlag PUBLIC {

  # return;
}
