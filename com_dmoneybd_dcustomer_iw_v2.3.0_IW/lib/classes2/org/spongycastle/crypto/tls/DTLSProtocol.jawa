record `org.spongycastle.crypto.tls.DTLSProtocol` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `java.security.SecureRandom` `org.spongycastle.crypto.tls.DTLSProtocol.secureRandom` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DTLSProtocol` v1 @kind this, `java.security.SecureRandom` v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.<init>:(Ljava/security/SecureRandom;)V` @AccessFlag PROTECTED_CONSTRUCTOR {

  # return;
}
procedure `void` `applyMaxFragmentLengthExtension`(`org.spongycastle.crypto.tls.DTLSRecordLayer` v1 @kind object, `short` v2 ) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.applyMaxFragmentLengthExtension:(Lorg/spongycastle/crypto/tls/DTLSRecordLayer;S)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `short` `evaluateMaxFragmentLengthExtension`(`boolean` v1 , `java.util.Hashtable` v2 @kind object, `java.util.Hashtable` v3 @kind object, `short` v4 ) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.evaluateMaxFragmentLengthExtension:(ZLjava/util/Hashtable;Ljava/util/Hashtable;S)S` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `byte`[] `generateCertificate`(`org.spongycastle.crypto.tls.Certificate` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.generateCertificate:(Lorg/spongycastle/crypto/tls/Certificate;)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `byte`[] `generateSupplementalData`(`java.util.Vector` v1 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.generateSupplementalData:(Ljava/util/Vector;)[B` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `validateSelectedCipherSuite`(`int` v1 , `short` v2 ) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.validateSelectedCipherSuite:(IS)V` @AccessFlag PROTECTED_STATIC {

  # return;
}
procedure `void` `processFinished`(`org.spongycastle.crypto.tls.DTLSProtocol` v1 @kind this, `byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSProtocol;.processFinished:([B[B)V` @AccessFlag PROTECTED {

  # return;
}
