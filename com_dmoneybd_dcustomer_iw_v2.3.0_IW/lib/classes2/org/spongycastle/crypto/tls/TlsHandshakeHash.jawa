record `org.spongycastle.crypto.tls.TlsHandshakeHash` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE extends `org.spongycastle.crypto.Digest` @kind interface {
}
procedure `org.spongycastle.crypto.Digest` `forkPRFHash`() @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.forkPRFHash:()Lorg/spongycastle/crypto/Digest;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `getFinalHash`(`short` v0 ) @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.getFinalHash:(S)[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.tls.TlsContext` v0 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.init:(Lorg/spongycastle/crypto/tls/TlsContext;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `notifyPRFDetermined`() @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.notifyPRFDetermined:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `sealHashAlgorithms`() @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.sealHashAlgorithms:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.crypto.tls.TlsHandshakeHash` `stopTracking`() @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.stopTracking:()Lorg/spongycastle/crypto/tls/TlsHandshakeHash;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `trackHashAlgorithm`(`short` v0 ) @signature `Lorg/spongycastle/crypto/tls/TlsHandshakeHash;.trackHashAlgorithm:(S)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
