record `org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.tls.AbstractTlsAgreementCredentials` @kind class {
  `org.spongycastle.crypto.BasicAgreement` `org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials.basicAgreement` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.tls.Certificate` `org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials.certificate` @AccessFlag PROTECTED;
  `org.spongycastle.crypto.params.AsymmetricKeyParameter` `org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials.privateKey` @AccessFlag PROTECTED;
  `boolean` `org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials.truncateAgreement` @AccessFlag PROTECTED;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials` v2 @kind this, `org.spongycastle.crypto.tls.Certificate` v3 @kind object, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/DefaultTlsAgreementCredentials;.<init>:(Lorg/spongycastle/crypto/tls/Certificate;Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `generateAgreement`(`org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials` v2 @kind this, `org.spongycastle.crypto.params.AsymmetricKeyParameter` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DefaultTlsAgreementCredentials;.generateAgreement:(Lorg/spongycastle/crypto/params/AsymmetricKeyParameter;)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.Certificate` `getCertificate`(`org.spongycastle.crypto.tls.DefaultTlsAgreementCredentials` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DefaultTlsAgreementCredentials;.getCertificate:()Lorg/spongycastle/crypto/tls/Certificate;` @AccessFlag PUBLIC {

  # return;
}
