record `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` @kind class @AccessFlag  {
  `byte`[] `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message.body` @AccessFlag PRIVATE_FINAL;
  `int` `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message.message_seq` @AccessFlag PRIVATE_FINAL;
  `short` `org.spongycastle.crypto.tls.DTLSReliableHandshake$Message.msg_type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v0 @kind this, `int` v1 , `short` v2 , `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;.<init>:(IS[B)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v0 @kind this, `int` v1 , `short` v2 , `byte`[] v3 @kind object, `org.spongycastle.crypto.tls.DTLSReliableHandshake$1` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;.<init>:(IS[BLorg/spongycastle/crypto/tls/DTLSReliableHandshake$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `getBody`(`org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;.getBody:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getSeq`(`org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;.getSeq:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `short` `getType`(`org.spongycastle.crypto.tls.DTLSReliableHandshake$Message` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/DTLSReliableHandshake$Message;.getType:()S` @AccessFlag PUBLIC {

  # return;
}
