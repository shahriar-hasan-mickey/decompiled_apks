record `org.spongycastle.crypto.tls.ProtocolVersion` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `org.spongycastle.crypto.tls.ProtocolVersion.name` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.tls.ProtocolVersion.version` @AccessFlag PRIVATE;
}
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.DTLSv10` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.DTLSv12` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.SSLv3` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.TLSv10` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.TLSv11` @AccessFlag PUBLIC_STATIC_FINAL;
global `org.spongycastle.crypto.tls.ProtocolVersion` `@@org.spongycastle.crypto.tls.ProtocolVersion.TLSv12` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.<init>:(ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.crypto.tls.ProtocolVersion` `get`(`int` v2 , `int` v3 ) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.get:(II)Lorg/spongycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.ProtocolVersion` `getUnknownVersion`(`int` v2 , `int` v3 , `java.lang.String` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.getUnknownVersion:(IILjava/lang/String;)Lorg/spongycastle/crypto/tls/ProtocolVersion;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `equals`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this, `org.spongycastle.crypto.tls.ProtocolVersion` v2 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.equals:(Lorg/spongycastle/crypto/tls/ProtocolVersion;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.tls.ProtocolVersion` `getEquivalentTLSVersion`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.getEquivalentTLSVersion:()Lorg/spongycastle/crypto/tls/ProtocolVersion;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getFullVersion`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.getFullVersion:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMajorVersion`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.getMajorVersion:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getMinorVersion`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.getMinorVersion:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `hashCode`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.hashCode:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isDTLS`(`org.spongycastle.crypto.tls.ProtocolVersion` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.isDTLS:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isEqualOrEarlierVersionOf`(`org.spongycastle.crypto.tls.ProtocolVersion` v3 @kind this, `org.spongycastle.crypto.tls.ProtocolVersion` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.isEqualOrEarlierVersionOf:(Lorg/spongycastle/crypto/tls/ProtocolVersion;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isLaterVersionOf`(`org.spongycastle.crypto.tls.ProtocolVersion` v3 @kind this, `org.spongycastle.crypto.tls.ProtocolVersion` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.isLaterVersionOf:(Lorg/spongycastle/crypto/tls/ProtocolVersion;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isSSL`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.isSSL:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isTLS`(`org.spongycastle.crypto.tls.ProtocolVersion` v2 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.isTLS:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.String` `toString`(`org.spongycastle.crypto.tls.ProtocolVersion` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/ProtocolVersion;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {

  # return;
}
