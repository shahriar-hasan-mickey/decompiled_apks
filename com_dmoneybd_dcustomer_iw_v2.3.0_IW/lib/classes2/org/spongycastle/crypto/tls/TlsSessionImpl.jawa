record `org.spongycastle.crypto.tls.TlsSessionImpl` @kind class @AccessFlag  extends `org.spongycastle.crypto.tls.TlsSession` @kind interface {
  `byte`[] `org.spongycastle.crypto.tls.TlsSessionImpl.a` @AccessFlag FINAL;
  `org.spongycastle.crypto.tls.SessionParameters` `org.spongycastle.crypto.tls.TlsSessionImpl.b` @AccessFlag ;
}
procedure `void` `<init>`(`org.spongycastle.crypto.tls.TlsSessionImpl` v2 @kind this, `byte`[] v3 @kind object, `org.spongycastle.crypto.tls.SessionParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/tls/TlsSessionImpl;.<init>:([BLorg/spongycastle/crypto/tls/SessionParameters;)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.crypto.tls.SessionParameters` `exportSessionParameters`(`org.spongycastle.crypto.tls.TlsSessionImpl` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsSessionImpl;.exportSessionParameters:()Lorg/spongycastle/crypto/tls/SessionParameters;` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `getSessionID`(`org.spongycastle.crypto.tls.TlsSessionImpl` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsSessionImpl;.getSessionID:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `invalidate`(`org.spongycastle.crypto.tls.TlsSessionImpl` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsSessionImpl;.invalidate:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isResumable`(`org.spongycastle.crypto.tls.TlsSessionImpl` v1 @kind this) @signature `Lorg/spongycastle/crypto/tls/TlsSessionImpl;.isResumable:()Z` @AccessFlag PUBLIC {

  # return;
}
