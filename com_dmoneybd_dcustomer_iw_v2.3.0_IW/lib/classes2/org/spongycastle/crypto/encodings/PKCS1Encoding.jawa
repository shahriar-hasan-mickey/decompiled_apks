record `org.spongycastle.crypto.encodings.PKCS1Encoding` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricBlockCipher` @kind interface {
  `org.spongycastle.crypto.AsymmetricBlockCipher` `org.spongycastle.crypto.encodings.PKCS1Encoding.engine` @AccessFlag PRIVATE;
  `byte`[] `org.spongycastle.crypto.encodings.PKCS1Encoding.fallback` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.encodings.PKCS1Encoding.forEncryption` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.encodings.PKCS1Encoding.forPrivateKey` @AccessFlag PRIVATE;
  `int` `org.spongycastle.crypto.encodings.PKCS1Encoding.pLen` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.spongycastle.crypto.encodings.PKCS1Encoding.random` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.crypto.encodings.PKCS1Encoding.useStrictLength` @AccessFlag PRIVATE;
}
global `int` `@@org.spongycastle.crypto.encodings.PKCS1Encoding.HEADER_LENGTH` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@org.spongycastle.crypto.encodings.PKCS1Encoding.NOT_STRICT_LENGTH_ENABLED_PROPERTY` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String` `@@org.spongycastle.crypto.encodings.PKCS1Encoding.STRICT_LENGTH_ENABLED_PROPERTY` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v1 @kind this, `org.spongycastle.crypto.AsymmetricBlockCipher` v2 @kind object) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.<init>:(Lorg/spongycastle/crypto/AsymmetricBlockCipher;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v1 @kind this, `org.spongycastle.crypto.AsymmetricBlockCipher` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.<init>:(Lorg/spongycastle/crypto/AsymmetricBlockCipher;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v1 @kind this, `org.spongycastle.crypto.AsymmetricBlockCipher` v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.<init>:(Lorg/spongycastle/crypto/AsymmetricBlockCipher;[B)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `checkPkcs1Encoding`(`byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.checkPkcs1Encoding:([BI)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `byte`[] `decodeBlock`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.decodeBlock:([BII)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `decodeBlockOrRandom`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.decodeBlockOrRandom:([BII)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `encodeBlock`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.encodeBlock:([BII)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `useStrict`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v4 @kind this) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.useStrict:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `getInputBlockSize`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v2 @kind this) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.getInputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputBlockSize`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v2 @kind this) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.getOutputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.crypto.AsymmetricBlockCipher` `getUnderlyingCipher`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v1 @kind this) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.getUnderlyingCipher:()Lorg/spongycastle/crypto/AsymmetricBlockCipher;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v2 @kind this, `boolean` v3 , `org.spongycastle.crypto.CipherParameters` v4 @kind object) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processBlock`(`org.spongycastle.crypto.encodings.PKCS1Encoding` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/crypto/encodings/PKCS1Encoding;.processBlock:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
