record `org.spongycastle.util.Arrays` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`org.spongycastle.util.Arrays` v0 @kind this) @signature `Lorg/spongycastle/util/Arrays;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `byte`[] `append`(`byte`[] v3 @kind object, `byte` v4 ) @signature `Lorg/spongycastle/util/Arrays;.append:([BB)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `append`(`int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.append:([II)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `short`[] `append`(`short`[] v3 @kind object, `short` v4 ) @signature `Lorg/spongycastle/util/Arrays;.append:([SS)[S` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([B[B)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`char`[] v5 @kind object, `char`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([C[C)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`long`[] v8 @kind object, `long`[] v9 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([J[J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`java.lang.Object`[] v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `areEqual`(`boolean`[] v5 @kind object, `boolean`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.areEqual:([Z[Z)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `clone`(`byte`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `clone`(`byte`[] v2 @kind object, `byte`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `char`[] `clone`(`char`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([C)[C` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `clone`(`int`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `clone`(`long`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([J)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `clone`(`long`[] v2 @kind object, `long`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([J[J)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `clone`(`java.math.BigInteger`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `short`[] `clone`(`short`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([S)[S` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[][] `clone`(`byte`[][] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([[B)[[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[][][] `clone`(`byte`[][][] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.clone:([[[B)[[[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `concatenate`(`byte`[] v3 @kind object, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.concatenate:([B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `concatenate`(`byte`[] v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object) @signature `Lorg/spongycastle/util/Arrays;.concatenate:([B[B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `concatenate`(`byte`[] v4 @kind object, `byte`[] v5 @kind object, `byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/util/Arrays;.concatenate:([B[B[B[B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `concatenate`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.concatenate:([I[I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `constantTimeAreEqual`(`byte`[] v6 @kind object, `byte`[] v7 @kind object) @signature `Lorg/spongycastle/util/Arrays;.constantTimeAreEqual:([B[B)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.contains:([II)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `contains`(`short`[] v3 @kind object, `short` v4 ) @signature `Lorg/spongycastle/util/Arrays;.contains:([SS)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `copyOf`(`byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.copyOf:([BI)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `char`[] `copyOf`(`char`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.copyOf:([CI)[C` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `copyOf`(`int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.copyOf:([II)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `copyOf`(`long`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.copyOf:([JI)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `copyOf`(`java.math.BigInteger`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.copyOf:([Ljava/math/BigInteger;I)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `copyOfRange`(`byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/util/Arrays;.copyOfRange:([BII)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `copyOfRange`(`int`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/util/Arrays;.copyOfRange:([III)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `copyOfRange`(`long`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/util/Arrays;.copyOfRange:([JII)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `copyOfRange`(`java.math.BigInteger`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/util/Arrays;.copyOfRange:([Ljava/math/BigInteger;II)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`byte`[] v2 @kind object, `byte` v3 ) @signature `Lorg/spongycastle/util/Arrays;.fill:([BB)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`char`[] v2 @kind object, `char` v3 ) @signature `Lorg/spongycastle/util/Arrays;.fill:([CC)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`int`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/util/Arrays;.fill:([II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`long`[] v2 @kind object, `long` v3 ) @signature `Lorg/spongycastle/util/Arrays;.fill:([JJ)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`short`[] v2 @kind object, `short` v3 ) @signature `Lorg/spongycastle/util/Arrays;.fill:([SS)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `getLength`(`int` v1 , `int` v2 ) @signature `Lorg/spongycastle/util/Arrays;.getLength:(II)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `hashCode`(`byte`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([B)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([BII)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`char`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([C)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`int`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`int`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`long`[] v5 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([J)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`long`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([JII)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`java.lang.Object`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`short`[] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([S)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`int`[][] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`short`[][] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([[S)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `hashCode`(`short`[][][] v3 @kind object) @signature `Lorg/spongycastle/util/Arrays;.hashCode:([[[S)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `prepend`(`byte`[] v4 @kind object, `byte` v5 ) @signature `Lorg/spongycastle/util/Arrays;.prepend:([BB)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `prepend`(`int`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/util/Arrays;.prepend:([II)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `short`[] `prepend`(`short`[] v4 @kind object, `short` v5 ) @signature `Lorg/spongycastle/util/Arrays;.prepend:([SS)[S` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `reverse`(`byte`[] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.reverse:([B)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `reverse`(`int`[] v4 @kind object) @signature `Lorg/spongycastle/util/Arrays;.reverse:([I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
