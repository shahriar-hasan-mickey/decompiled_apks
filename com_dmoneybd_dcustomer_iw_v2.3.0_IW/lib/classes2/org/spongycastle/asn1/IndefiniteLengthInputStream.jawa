record `org.spongycastle.asn1.IndefiniteLengthInputStream` @kind class @AccessFlag  extends `org.spongycastle.asn1.LimitedInputStream` @kind class {
  `int` `org.spongycastle.asn1.IndefiniteLengthInputStream._b1` @AccessFlag PRIVATE;
  `int` `org.spongycastle.asn1.IndefiniteLengthInputStream._b2` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.asn1.IndefiniteLengthInputStream._eofOn00` @AccessFlag PRIVATE;
  `boolean` `org.spongycastle.asn1.IndefiniteLengthInputStream._eofReached` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.asn1.IndefiniteLengthInputStream` v0 @kind this, `java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/asn1/IndefiniteLengthInputStream;.<init>:(Ljava/io/InputStream;I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `boolean` `checkForEof`(`org.spongycastle.asn1.IndefiniteLengthInputStream` v1 @kind this) @signature `Lorg/spongycastle/asn1/IndefiniteLengthInputStream;.checkForEof:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `b`(`org.spongycastle.asn1.IndefiniteLengthInputStream` v0 @kind this, `boolean` v1 ) @signature `Lorg/spongycastle/asn1/IndefiniteLengthInputStream;.b:(Z)V` @AccessFlag  {

  # return;
}
procedure `int` `read`(`org.spongycastle.asn1.IndefiniteLengthInputStream` v3 @kind this) @signature `Lorg/spongycastle/asn1/IndefiniteLengthInputStream;.read:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `read`(`org.spongycastle.asn1.IndefiniteLengthInputStream` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/asn1/IndefiniteLengthInputStream;.read:([BII)I` @AccessFlag PUBLIC {

  # return;
}
