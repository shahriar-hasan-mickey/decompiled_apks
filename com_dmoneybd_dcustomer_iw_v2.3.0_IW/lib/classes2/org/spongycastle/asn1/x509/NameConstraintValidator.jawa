record `org.spongycastle.asn1.x509.NameConstraintValidator` @kind interface @AccessFlag PUBLIC_ABSTRACT_INTERFACE {
}
procedure `void` `addExcludedSubtree`(`org.spongycastle.asn1.x509.GeneralSubtree` v0 @kind object) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.addExcludedSubtree:(Lorg/spongycastle/asn1/x509/GeneralSubtree;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `checkExcluded`(`org.spongycastle.asn1.x509.GeneralName` v0 @kind object) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.checkExcluded:(Lorg/spongycastle/asn1/x509/GeneralName;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `checkPermitted`(`org.spongycastle.asn1.x509.GeneralName` v0 @kind object) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.checkPermitted:(Lorg/spongycastle/asn1/x509/GeneralName;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `intersectEmptyPermittedSubtree`(`int` v0 ) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.intersectEmptyPermittedSubtree:(I)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `intersectPermittedSubtree`(`org.spongycastle.asn1.x509.GeneralSubtree` v0 @kind object) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.intersectPermittedSubtree:(Lorg/spongycastle/asn1/x509/GeneralSubtree;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `intersectPermittedSubtree`(`org.spongycastle.asn1.x509.GeneralSubtree`[] v0 @kind object) @signature `Lorg/spongycastle/asn1/x509/NameConstraintValidator;.intersectPermittedSubtree:([Lorg/spongycastle/asn1/x509/GeneralSubtree;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
