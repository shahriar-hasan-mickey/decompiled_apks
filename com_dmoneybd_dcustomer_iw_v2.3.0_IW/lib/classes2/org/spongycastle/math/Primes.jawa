record `org.spongycastle.math.Primes` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `java.math.BigInteger` `@@org.spongycastle.math.Primes.ONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.math.Primes.SMALL_FACTOR_LIMIT` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.math.Primes.THREE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.math.Primes.TWO` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/math/Primes;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.math.Primes` v0 @kind this) @signature `Lorg/spongycastle/math/Primes;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `checkCandidate`(`java.math.BigInteger` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lorg/spongycastle/math/Primes;.checkCandidate:(Ljava/math/BigInteger;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.Primes$MROutput` `enhancedMRProbablePrimeTest`(`java.math.BigInteger` v11 @kind object, `java.security.SecureRandom` v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/Primes;.enhancedMRProbablePrimeTest:(Ljava/math/BigInteger;Ljava/security/SecureRandom;I)Lorg/spongycastle/math/Primes$MROutput;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `extract32`(`byte`[] v5 @kind object) @signature `Lorg/spongycastle/math/Primes;.extract32:([B)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.Primes$STOutput` `generateSTRandomPrime`(`org.spongycastle.crypto.Digest` v1 @kind object, `int` v2 , `byte`[] v3 @kind object) @signature `Lorg/spongycastle/math/Primes;.generateSTRandomPrime:(Lorg/spongycastle/crypto/Digest;I[B)Lorg/spongycastle/math/Primes$STOutput;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `hasAnySmallFactors`(`java.math.BigInteger` v1 @kind object) @signature `Lorg/spongycastle/math/Primes;.hasAnySmallFactors:(Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `hash`(`org.spongycastle.crypto.Digest` v2 @kind object, `byte`[] v3 @kind object, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/math/Primes;.hash:(Lorg/spongycastle/crypto/Digest;[B[BI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `java.math.BigInteger` `hashGen`(`org.spongycastle.crypto.Digest` v5 @kind object, `byte`[] v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/math/Primes;.hashGen:(Lorg/spongycastle/crypto/Digest;[BI)Ljava/math/BigInteger;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `implHasAnySmallFactors`(`java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/math/Primes;.implHasAnySmallFactors:(Ljava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `implMRProbablePrimeToBase`(`java.math.BigInteger` v3 @kind object, `java.math.BigInteger` v4 @kind object, `java.math.BigInteger` v5 @kind object, `int` v6 , `java.math.BigInteger` v7 @kind object) @signature `Lorg/spongycastle/math/Primes;.implMRProbablePrimeToBase:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;ILjava/math/BigInteger;)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `org.spongycastle.math.Primes$STOutput` `implSTRandomPrime`(`org.spongycastle.crypto.Digest` v16 @kind object, `int` v17 , `byte`[] v18 @kind object) @signature `Lorg/spongycastle/math/Primes;.implSTRandomPrime:(Lorg/spongycastle/crypto/Digest;I[B)Lorg/spongycastle/math/Primes$STOutput;` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `inc`(`byte`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/math/Primes;.inc:([BI)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `boolean` `isMRProbablePrime`(`java.math.BigInteger` v8 @kind object, `java.security.SecureRandom` v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/Primes;.isMRProbablePrime:(Ljava/math/BigInteger;Ljava/security/SecureRandom;I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isMRProbablePrimeToBase`(`java.math.BigInteger` v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/math/Primes;.isMRProbablePrimeToBase:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPrime32`(`long` v14 ) @signature `Lorg/spongycastle/math/Primes;.isPrime32:(J)Z` @AccessFlag PRIVATE_STATIC {

  # return;
}
