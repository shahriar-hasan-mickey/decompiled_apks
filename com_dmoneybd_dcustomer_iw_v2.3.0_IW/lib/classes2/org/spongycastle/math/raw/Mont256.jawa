record `org.spongycastle.math.raw.Mont256` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `long` `@@org.spongycastle.math.raw.Mont256.M` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.math.raw.Mont256` v0 @kind this) @signature `Lorg/spongycastle/math/raw/Mont256;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `inverse32`(`int` v2 ) @signature `Lorg/spongycastle/math/raw/Mont256;.inverse32:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `multAdd`(`int`[] v27 @kind object, `int`[] v28 @kind object, `int`[] v29 @kind object, `int`[] v30 @kind object, `int` v31 ) @signature `Lorg/spongycastle/math/raw/Mont256;.multAdd:([I[I[I[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `multAddXF`(`int`[] v26 @kind object, `int`[] v27 @kind object, `int`[] v28 @kind object, `int`[] v29 @kind object) @signature `Lorg/spongycastle/math/raw/Mont256;.multAddXF:([I[I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reduce`(`int`[] v17 @kind object, `int`[] v18 @kind object, `int` v19 ) @signature `Lorg/spongycastle/math/raw/Mont256;.reduce:([I[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `reduceXF`(`int`[] v14 @kind object, `int`[] v15 @kind object) @signature `Lorg/spongycastle/math/raw/Mont256;.reduceXF:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
