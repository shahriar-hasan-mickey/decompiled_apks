record `org.spongycastle.math.raw.Nat` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `long` `@@org.spongycastle.math.raw.Nat.M` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.math.raw.Nat` v0 @kind this) @signature `Lorg/spongycastle/math/raw/Nat;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `add`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.add:(I[I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `add33At`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.add33At:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `add33At`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/spongycastle/math/raw/Nat;.add33At:(II[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `add33To`(`int` v8 , `int` v9 , `int`[] v10 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.add33To:(II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `add33To`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.add33To:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addBothTo`(`int` v11 , `int`[] v12 @kind object, `int` v13 , `int`[] v14 @kind object, `int` v15 , `int`[] v16 @kind object, `int` v17 ) @signature `Lorg/spongycastle/math/raw/Nat;.addBothTo:(I[II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addBothTo`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.addBothTo:(I[I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addDWordAt`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/math/raw/Nat;.addDWordAt:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addDWordAt`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat;.addDWordAt:(IJ[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addDWordTo`(`int` v9 , `long` v10 , `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.addDWordTo:(IJ[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addDWordTo`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/math/raw/Nat;.addDWordTo:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addTo`(`int` v10 , `int`[] v11 @kind object, `int` v12 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat;.addTo:(I[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addTo`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.addTo:(I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addWordAt`(`int` v6 , `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/math/raw/Nat;.addWordAt:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addWordAt`(`int` v6 , `int` v7 , `int`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.addWordAt:(II[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addWordTo`(`int` v6 , `int` v7 , `int`[] v8 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.addWordTo:(II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addWordTo`(`int` v6 , `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/math/raw/Nat;.addWordTo:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `copy`(`int` v1 , `int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.copy:(I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `copy`(`int` v2 , `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.copy:(I[I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `create`(`int` v0 ) @signature `Lorg/spongycastle/math/raw/Nat;.create:(I)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `create64`(`int` v0 ) @signature `Lorg/spongycastle/math/raw/Nat;.create64:(I)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `dec`(`int` v4 , `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.dec:(I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `dec`(`int` v4 , `int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.dec:(I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `decAt`(`int` v2 , `int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/math/raw/Nat;.decAt:(I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `decAt`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/math/raw/Nat;.decAt:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `eq`(`int` v3 , `int`[] v4 @kind object, `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.eq:(I[I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `fromBigInteger`(`int` v3 , `java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.fromBigInteger:(ILjava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `getBit`(`int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/math/raw/Nat;.getBit:([II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `gte`(`int` v4 , `int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.gte:(I[I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `inc`(`int` v4 , `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.inc:(I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `inc`(`int` v4 , `int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.inc:(I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `incAt`(`int` v2 , `int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/math/raw/Nat;.incAt:(I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `incAt`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/math/raw/Nat;.incAt:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isOne`(`int` v4 , `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.isOne:(I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isZero`(`int` v3 , `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.isZero:(I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `mul`(`int` v8 , `int`[] v9 @kind object, `int` v10 , `int`[] v11 @kind object, `int` v12 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat;.mul:(I[II[II[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `mul`(`int` v8 , `int`[] v9 @kind object, `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.mul:(I[I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mul31BothAdd`(`int` v14 , `int` v15 , `int`[] v16 @kind object, `int` v17 , `int`[] v18 @kind object, `int`[] v19 @kind object, `int` v20 ) @signature `Lorg/spongycastle/math/raw/Nat;.mul31BothAdd:(II[II[I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulAddTo`(`int` v13 , `int`[] v14 @kind object, `int` v15 , `int`[] v16 @kind object, `int` v17 , `int`[] v18 @kind object, `int` v19 ) @signature `Lorg/spongycastle/math/raw/Nat;.mulAddTo:(I[II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulAddTo`(`int` v11 , `int`[] v12 @kind object, `int`[] v13 @kind object, `int`[] v14 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.mulAddTo:(I[I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWord`(`int` v8 , `int` v9 , `int`[] v10 @kind object, `int` v11 , `int`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat;.mulWord:(II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWord`(`int` v8 , `int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.mulWord:(II[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWordAddTo`(`int` v12 , `int` v13 , `int`[] v14 @kind object, `int` v15 , `int`[] v16 @kind object, `int` v17 ) @signature `Lorg/spongycastle/math/raw/Nat;.mulWordAddTo:(II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWordDwordAddAt`(`int` v10 , `int` v11 , `long` v12 , `int`[] v14 @kind object, `int` v15 ) @signature `Lorg/spongycastle/math/raw/Nat;.mulWordDwordAddAt:(IIJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBit`(`int` v2 , `int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBit:(I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBit`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBit:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBit`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 , `int`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBit:(I[III[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBit`(`int` v2 , `int`[] v3 @kind object, `int` v4 , `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBit:(I[II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBits`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBits:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBits`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBits:(I[IIII)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBits`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBits:(I[IIII[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownBits`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int` v6 , `int`[] v7 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownBits:(I[III[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftDownWord`(`int` v1 , `int`[] v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftDownWord:(I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBit`(`int` v3 , `int`[] v4 @kind object, `int` v5 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBit:(I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBit`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBit:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBit`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBit:(I[III[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBit`(`int` v3 , `int`[] v4 @kind object, `int` v5 , `int`[] v6 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBit:(I[II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `shiftUpBit64`(`int` v7 , `long`[] v8 @kind object, `int` v9 , `long` v10 , `long`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBit64:(I[JIJ[JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBits`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits:(I[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBits`(`int` v5 , `int`[] v6 @kind object, `int` v7 , `int` v8 , `int` v9 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits:(I[IIII)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBits`(`int` v5 , `int`[] v6 @kind object, `int` v7 , `int` v8 , `int` v9 , `int`[] v10 @kind object, `int` v11 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits:(I[IIII[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `shiftUpBits`(`int` v4 , `int`[] v5 @kind object, `int` v6 , `int` v7 , `int`[] v8 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits:(I[III[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `shiftUpBits64`(`int` v7 , `long`[] v8 @kind object, `int` v9 , `int` v10 , `long` v11 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits64:(I[JIIJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `shiftUpBits64`(`int` v7 , `long`[] v8 @kind object, `int` v9 , `int` v10 , `long` v11 , `long`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat;.shiftUpBits64:(I[JIIJ[JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `square`(`int` v9 , `int`[] v10 @kind object, `int` v11 , `int`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat;.square:(I[II[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `square`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.square:(I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `squareWordAdd`(`int`[] v14 @kind object, `int` v15 , `int` v16 , `int`[] v17 @kind object, `int` v18 ) @signature `Lorg/spongycastle/math/raw/Nat;.squareWordAdd:([III[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `squareWordAdd`(`int`[] v12 @kind object, `int` v13 , `int`[] v14 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.squareWordAdd:([II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub`(`int` v9 , `int`[] v10 @kind object, `int` v11 , `int`[] v12 @kind object, `int` v13 , `int`[] v14 @kind object, `int` v15 ) @signature `Lorg/spongycastle/math/raw/Nat;.sub:(I[II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.sub:(I[I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub33At`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.sub33At:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub33At`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/spongycastle/math/raw/Nat;.sub33At:(II[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub33From`(`int` v8 , `int` v9 , `int`[] v10 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.sub33From:(II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub33From`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.sub33From:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subBothFrom`(`int` v11 , `int`[] v12 @kind object, `int` v13 , `int`[] v14 @kind object, `int` v15 , `int`[] v16 @kind object, `int` v17 ) @signature `Lorg/spongycastle/math/raw/Nat;.subBothFrom:(I[II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subBothFrom`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.subBothFrom:(I[I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subDWordAt`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/math/raw/Nat;.subDWordAt:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subDWordAt`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat;.subDWordAt:(IJ[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subDWordFrom`(`int` v9 , `long` v10 , `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.subDWordFrom:(IJ[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subDWordFrom`(`int` v8 , `long` v9 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/math/raw/Nat;.subDWordFrom:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subFrom`(`int` v10 , `int`[] v11 @kind object, `int` v12 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat;.subFrom:(I[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subFrom`(`int` v9 , `int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.subFrom:(I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subWordAt`(`int` v6 , `int` v7 , `int`[] v8 @kind object, `int` v9 ) @signature `Lorg/spongycastle/math/raw/Nat;.subWordAt:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subWordAt`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/spongycastle/math/raw/Nat;.subWordAt:(II[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subWordFrom`(`int` v7 , `int` v8 , `int`[] v9 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.subWordFrom:(II[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subWordFrom`(`int` v7 , `int` v8 , `int`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/math/raw/Nat;.subWordFrom:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `toBigInteger`(`int` v4 , `int`[] v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.toBigInteger:(I[I)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `zero`(`int` v2 , `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/raw/Nat;.zero:(I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
