record `org.spongycastle.math.raw.Nat192` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
global `long` `@@org.spongycastle.math.raw.Nat192.M` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.math.raw.Nat192` v0 @kind this) @signature `Lorg/spongycastle/math/raw/Nat192;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int` `add`(`int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.add:([I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addBothTo`(`int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.addBothTo:([I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addTo`(`int`[] v9 @kind object, `int` v10 , `int`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat192;.addTo:([II[III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addTo`(`int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.addTo:([I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `addToEachOther`(`int`[] v11 @kind object, `int` v12 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat192;.addToEachOther:([II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `copy`(`int`[] v2 @kind object, `int`[] v3 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.copy:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `copy64`(`long`[] v3 @kind object, `long`[] v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.copy64:([J[J)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `create`() @signature `Lorg/spongycastle/math/raw/Nat192;.create:()[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `create64`() @signature `Lorg/spongycastle/math/raw/Nat192;.create64:()[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `createExt`() @signature `Lorg/spongycastle/math/raw/Nat192;.createExt:()[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `createExt64`() @signature `Lorg/spongycastle/math/raw/Nat192;.createExt64:()[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `diff`(`int`[] v7 @kind object, `int` v8 , `int`[] v9 @kind object, `int` v10 , `int`[] v11 @kind object, `int` v12 ) @signature `Lorg/spongycastle/math/raw/Nat192;.diff:([II[II[II)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `eq`(`int`[] v3 @kind object, `int`[] v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.eq:([I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `eq64`(`long`[] v6 @kind object, `long`[] v7 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.eq64:([J[J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `fromBigInteger`(`java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.fromBigInteger:(Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long`[] `fromBigInteger64`(`java.math.BigInteger` v5 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.fromBigInteger64:(Ljava/math/BigInteger;)[J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `getBit`(`int`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/math/raw/Nat192;.getBit:([II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `gte`(`int`[] v5 @kind object, `int` v6 , `int`[] v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/math/raw/Nat192;.gte:([II[II)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `gte`(`int`[] v5 @kind object, `int`[] v6 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.gte:([I[I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isOne`(`int`[] v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.isOne:([I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isOne64`(`long`[] v8 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.isOne64:([J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isZero`(`int`[] v3 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.isZero:([I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isZero64`(`long`[] v7 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.isZero64:([J)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `mul`(`int`[] v28 @kind object, `int` v29 , `int`[] v30 @kind object, `int` v31 , `int`[] v32 @kind object, `int` v33 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mul:([II[II[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `mul`(`int`[] v30 @kind object, `int`[] v31 @kind object, `int`[] v32 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.mul:([I[I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `mul33Add`(`int` v13 , `int`[] v14 @kind object, `int` v15 , `int`[] v16 @kind object, `int` v17 , `int`[] v18 @kind object, `int` v19 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mul33Add:(I[II[II[II)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mul33DWordAdd`(`int` v15 , `long` v16 , `int`[] v18 @kind object, `int` v19 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mul33DWordAdd:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mul33WordAdd`(`int` v10 , `int` v11 , `int`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mul33WordAdd:(II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulAddTo`(`int`[] v31 @kind object, `int` v32 , `int`[] v33 @kind object, `int` v34 , `int`[] v35 @kind object, `int` v36 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mulAddTo:([II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulAddTo`(`int`[] v30 @kind object, `int`[] v31 @kind object, `int`[] v32 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.mulAddTo:([I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWord`(`int` v8 , `int`[] v9 @kind object, `int`[] v10 @kind object, `int` v11 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mulWord:(I[I[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWordAddExt`(`int` v11 , `int`[] v12 @kind object, `int` v13 , `int`[] v14 @kind object, `int` v15 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mulWordAddExt:(I[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `mulWordDwordAdd`(`int` v10 , `long` v11 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat192;.mulWordDwordAdd:(IJ[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `square`(`int`[] v36 @kind object, `int` v37 , `int`[] v38 @kind object, `int` v39 ) @signature `Lorg/spongycastle/math/raw/Nat192;.square:([II[II)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `square`(`int`[] v36 @kind object, `int`[] v37 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.square:([I[I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub`(`int`[] v9 @kind object, `int` v10 , `int`[] v11 @kind object, `int` v12 , `int`[] v13 @kind object, `int` v14 ) @signature `Lorg/spongycastle/math/raw/Nat192;.sub:([II[II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `sub`(`int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.sub:([I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subBothFrom`(`int`[] v10 @kind object, `int`[] v11 @kind object, `int`[] v12 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.subBothFrom:([I[I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subFrom`(`int`[] v10 @kind object, `int` v11 , `int`[] v12 @kind object, `int` v13 ) @signature `Lorg/spongycastle/math/raw/Nat192;.subFrom:([II[II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `subFrom`(`int`[] v10 @kind object, `int`[] v11 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.subFrom:([I[I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `toBigInteger`(`int`[] v4 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.toBigInteger:([I)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `toBigInteger64`(`long`[] v8 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.toBigInteger64:([J)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `zero`(`int`[] v2 @kind object) @signature `Lorg/spongycastle/math/raw/Nat192;.zero:([I)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
