record `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` @kind class @AccessFlag PUBLIC extends `org.spongycastle.pqc.math.ntru.polynomial.Polynomial` @kind interface {
  `int`[] `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial.coeffs` @AccessFlag PUBLIC;
}
global `java.util.List` `@@org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial.BIGINT_PRIMES` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial.NUM_EQUAL_RESULTANTS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial.PRIMES` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.<init>:(I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` v4 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `int`[] v1 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.<init>:([I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `java.util.List` `a`() @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.a:()Ljava/util/List;` @AccessFlag STATIC_SYNTHETIC {

  # return;
}
procedure `boolean` `equalsAbsOne`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.equalsAbsOne:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `equalsZero`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.equalsZero:()Z` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `fromBinary`(`java.io.InputStream` v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.fromBinary:(Ljava/io/InputStream;II)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `fromBinary`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.fromBinary:([BII)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `fromBinary3Sves`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.fromBinary3Sves:([BI)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `fromBinary3Tight`(`java.io.InputStream` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.fromBinary3Tight:(Ljava/io/InputStream;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `fromBinary3Tight`(`byte`[] v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.fromBinary3Tight:([BI)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mod2ToModq`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mod2ToModq:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `mult2`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult2:(I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `multRecursive`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v11 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v12 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.multRecursive:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `multShiftSub`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v6 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v7 @kind object, `int` v8 , `int` v9 , `int` v10 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.multShiftSub:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;III)V` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `sort`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v6 @kind this, `int`[] v7 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.sort:([I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `java.math.BigInteger` `squareSum`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.squareSum:()Ljava/math/BigInteger;` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `add`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.add:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `add`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.add:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `b`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v2 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.b:()I` @AccessFlag  {

  # return;
}
procedure `void` `c`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this, `int` v5 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.c:(I)V` @AccessFlag  {

  # return;
}
procedure `void` `center0`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this, `int` v5 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.center0:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `long` `centeredNormSq`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v9 @kind this, `int` v10 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.centeredNormSq:(I)J` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `clear`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.clear:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `java.lang.Object` `clone`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v2 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `count`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this, `int` v5 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.count:(I)I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `d`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v8 @kind this, `int` v9 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.d:(I)V` @AccessFlag  {

  # return;
}
procedure `void` `div`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind this, `int` v6 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.div:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `e`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.e:(I)V` @AccessFlag  {

  # return;
}
procedure `void` `ensurePositive`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.ensurePositive:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equals`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `equalsOne`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.equalsOne:()Z` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `invertF3`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v18 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.invertF3:()Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `invertFq`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v18 @kind this, `int` v19 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.invertFq:(I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mod`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mod:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mod3`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mod3:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `modPositive`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.modPositive:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.BigIntPolynomial` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/BigIntPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v6 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v7 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `mult3`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v3 @kind this, `int` v4 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.mult3:(I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.ModularResultant` `resultant`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v14 @kind this, `int` v15 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.resultant:(I)Lorg/spongycastle/pqc/math/ntru/polynomial/ModularResultant;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.Resultant` `resultant`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v12 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.resultant:()Lorg/spongycastle/pqc/math/ntru/polynomial/Resultant;` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.Resultant` `resultantMultiThread`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v12 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.resultantMultiThread:()Lorg/spongycastle/pqc/math/ntru/polynomial/Resultant;` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `rotate1`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.rotate1:()V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `sub`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.sub:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `sub`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.sub:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)V` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `sumCoeffs`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.sumCoeffs:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `toBinary`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.toBinary:(I)[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `toBinary3Sves`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.toBinary3Sves:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `toBinary3Tight`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v5 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.toBinary3Tight:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `toIntegerPolynomial`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;.toIntegerPolynomial:()Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
