record `org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` @kind class @AccessFlag PUBLIC extends `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` @kind class, `org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial` @kind interface {
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v0 @kind this, `int` v1 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.<init>:(I)V` @AccessFlag CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v0 @kind this, `int`[] v1 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.<init>:([I)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `void` `checkTernarity`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v4 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.checkTernarity:()V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` `generateRandom`(`int` v0 , `int` v1 , `int` v2 , `java.security.SecureRandom` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.generateRandom:(IIILjava/security/SecureRandom;)Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` `generateRandom`(`int` v4 , `java.security.SecureRandom` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.generateRandom:(ILjava/security/SecureRandom;)Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `getNegOnes`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v6 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.getNegOnes:()[I` @AccessFlag PUBLIC {

  # return;
}
procedure `int`[] `getOnes`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v6 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.getOnes:()[I` @AccessFlag PUBLIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `mult`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v1 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.mult:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `size`(`org.spongycastle.pqc.math.ntru.polynomial.DenseTernaryPolynomial` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/DenseTernaryPolynomial;.size:()I` @AccessFlag PUBLIC {

  # return;
}
