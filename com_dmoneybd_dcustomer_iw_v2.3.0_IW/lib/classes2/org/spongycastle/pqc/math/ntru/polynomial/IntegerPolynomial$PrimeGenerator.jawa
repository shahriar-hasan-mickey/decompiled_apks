record `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator` @kind class @AccessFlag  {
  `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator.index` @AccessFlag PRIVATE;
  `java.math.BigInteger` `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator.prime` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$PrimeGenerator;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$PrimeGenerator;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `nextPrime`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$PrimeGenerator` v3 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$PrimeGenerator;.nextPrime:()Ljava/math/BigInteger;` @AccessFlag PUBLIC {

  # return;
}
