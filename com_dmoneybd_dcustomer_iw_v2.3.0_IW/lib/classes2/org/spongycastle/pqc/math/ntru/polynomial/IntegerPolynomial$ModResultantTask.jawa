record `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask` @kind class @AccessFlag  extends `java.util.concurrent.Callable` @kind interface {
  `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask.a` @AccessFlag FINAL_SYNTHETIC;
  `int` `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask.modulus` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 ) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$ModResultantTask;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask` v0 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v1 @kind object, `int` v2 , `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$1` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$ModResultantTask;.<init>:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;ILorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {

  # return;
}
procedure `java.lang.Object` `call`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$ModResultantTask;.call:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.ModularResultant` `call`(`org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial$ModResultantTask` v2 @kind this) @signature `Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial$ModResultantTask;.call:()Lorg/spongycastle/pqc/math/ntru/polynomial/ModularResultant;` @AccessFlag PUBLIC {

  # return;
}
