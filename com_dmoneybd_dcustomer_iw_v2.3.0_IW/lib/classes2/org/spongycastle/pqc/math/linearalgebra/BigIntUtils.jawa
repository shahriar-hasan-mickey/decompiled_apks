record `org.spongycastle.pqc.math.linearalgebra.BigIntUtils` @kind class @AccessFlag PUBLIC_FINAL {
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.linearalgebra.BigIntUtils` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `boolean` `equals`(`java.math.BigInteger`[] v5 @kind object, `java.math.BigInteger`[] v6 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.equals:([Ljava/math/BigInteger;[Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `void` `fill`(`java.math.BigInteger`[] v1 @kind object, `java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.fill:([Ljava/math/BigInteger;Ljava/math/BigInteger;)V` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `subArray`(`java.math.BigInteger`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.subArray:([Ljava/math/BigInteger;II)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `toIntArray`(`java.math.BigInteger`[] v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.toIntArray:([Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `toIntArrayModQ`(`int` v3 , `java.math.BigInteger`[] v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.toIntArrayModQ:(I[Ljava/math/BigInteger;)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `toMinimalByteArray`(`java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/BigIntUtils;.toMinimalByteArray:(Ljava/math/BigInteger;)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
