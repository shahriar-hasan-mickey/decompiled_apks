record `org.spongycastle.pqc.math.linearalgebra.IntegerFunctions` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.math.BigInteger` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.FOUR` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.ONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.SMALL_PRIMES` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.SMALL_PRIME_PRODUCT` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.TWO` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.math.BigInteger` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.ZERO` @AccessFlag PRIVATE_STATIC_FINAL;
global `int`[] `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.jacobiTable` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.security.SecureRandom` `@@org.spongycastle.pqc.math.linearalgebra.IntegerFunctions.sr` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {

  # return;
}
procedure `void` `<init>`(`org.spongycastle.pqc.math.linearalgebra.IntegerFunctions` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {

  # return;
}
procedure `java.math.BigInteger` `binomial`(`int` v4 , `int` v5 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.binomial:(II)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `bitCount`(`int` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.bitCount:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `ceilLog`(`int` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.ceilLog:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `ceilLog`(`java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.ceilLog:(Ljava/math/BigInteger;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `ceilLog256`(`int` v1 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.ceilLog256:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `ceilLog256`(`long` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.ceilLog256:(J)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `divideAndRound`(`java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.divideAndRound:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `divideAndRound`(`java.math.BigInteger`[] v3 @kind object, `java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.divideAndRound:([Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int`[] `extGCD`(`int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.extGCD:(II)[I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger`[] `extgcd`(`java.math.BigInteger` v9 @kind object, `java.math.BigInteger` v10 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.extgcd:(Ljava/math/BigInteger;Ljava/math/BigInteger;)[Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `floatPow`(`float` v1 , `int` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.floatPow:(FI)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `floorLog`(`int` v1 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.floorLog:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `floorLog`(`java.math.BigInteger` v3 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.floorLog:(Ljava/math/BigInteger;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `gcd`(`int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.gcd:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `float` `intRoot`(`int` v8 , `int` v9 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.intRoot:(II)F` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `byte`[] `integerToOctets`(`java.math.BigInteger` v4 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.integerToOctets:(Ljava/math/BigInteger;)[B` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isIncreasing`(`int`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.isIncreasing:([I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `isPower`(`int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.isPower:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `isPrime`(`int` v5 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.isPrime:(I)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `jacobi`(`java.math.BigInteger` v9 @kind object, `java.math.BigInteger` v10 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.jacobi:(Ljava/math/BigInteger;Ljava/math/BigInteger;)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `leastCommonMultiple`(`java.math.BigInteger`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.leastCommonMultiple:([Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `leastDiv`(`int` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.leastDiv:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `log`(`double` v8 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.log:(D)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `log`(`long` v3 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.log:(J)D` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `double` `logBKM`(`double` v11 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.logBKM:(D)D` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `maxPower`(`int` v3 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.maxPower:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `mod`(`long` v3 , `long` v5 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.mod:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `modInverse`(`int` v2 , `int` v3 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.modInverse:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `modInverse`(`long` v0 , `long` v2 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.modInverse:(JJ)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `modPow`(`int` v3 , `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.modPow:(III)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `nextPrime`(`long` v17 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.nextPrime:(J)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `nextProbablePrime`(`java.math.BigInteger` v1 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.nextProbablePrime:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `nextProbablePrime`(`java.math.BigInteger` v7 @kind object, `int` v8 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.nextProbablePrime:(Ljava/math/BigInteger;I)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `nextSmallerPrime`(`int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.nextSmallerPrime:(I)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `octetsToInteger`(`byte`[] v2 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.octetsToInteger:([B)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `octetsToInteger`(`byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.octetsToInteger:([BII)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `order`(`int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.order:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `boolean` `passesSmallPrimeTest`(`java.math.BigInteger` v6 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.passesSmallPrimeTest:(Ljava/math/BigInteger;)Z` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `int` `pow`(`int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.pow:(II)I` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `long` `pow`(`long` v4 , `int` v6 ) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.pow:(JI)J` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `randomize`(`java.math.BigInteger` v1 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.randomize:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `randomize`(`java.math.BigInteger` v4 @kind object, `java.security.SecureRandom` v5 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.randomize:(Ljava/math/BigInteger;Ljava/security/SecureRandom;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `reduceInto`(`java.math.BigInteger` v0 @kind object, `java.math.BigInteger` v1 @kind object, `java.math.BigInteger` v2 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.reduceInto:(Ljava/math/BigInteger;Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `ressol`(`java.math.BigInteger` v21 @kind object, `java.math.BigInteger` v22 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.ressol:(Ljava/math/BigInteger;Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
procedure `java.math.BigInteger` `squareRoot`(`java.math.BigInteger` v8 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/IntegerFunctions;.squareRoot:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @AccessFlag PUBLIC_STATIC {

  # return;
}
