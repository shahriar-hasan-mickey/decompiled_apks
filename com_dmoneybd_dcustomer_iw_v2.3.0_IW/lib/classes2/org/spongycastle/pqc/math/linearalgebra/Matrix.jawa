record `org.spongycastle.pqc.math.linearalgebra.Matrix` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int` `org.spongycastle.pqc.math.linearalgebra.Matrix.numColumns` @AccessFlag PROTECTED;
  `int` `org.spongycastle.pqc.math.linearalgebra.Matrix.numRows` @AccessFlag PROTECTED;
}
global `char` `@@org.spongycastle.pqc.math.linearalgebra.Matrix.MATRIX_TYPE_RANDOM_LT` @AccessFlag PUBLIC_STATIC_FINAL;
global `char` `@@org.spongycastle.pqc.math.linearalgebra.Matrix.MATRIX_TYPE_RANDOM_REGULAR` @AccessFlag PUBLIC_STATIC_FINAL;
global `char` `@@org.spongycastle.pqc.math.linearalgebra.Matrix.MATRIX_TYPE_RANDOM_UT` @AccessFlag PUBLIC_STATIC_FINAL;
global `char` `@@org.spongycastle.pqc.math.linearalgebra.Matrix.MATRIX_TYPE_UNIT` @AccessFlag PUBLIC_STATIC_FINAL;
global `char` `@@org.spongycastle.pqc.math.linearalgebra.Matrix.MATRIX_TYPE_ZERO` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<init>`(`org.spongycastle.pqc.math.linearalgebra.Matrix` v0 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.Matrix` `computeInverse`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.computeInverse:()Lorg/spongycastle/pqc/math/linearalgebra/Matrix;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `byte`[] `getEncoded`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.getEncoded:()[B` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `int` `getNumColumns`(`org.spongycastle.pqc.math.linearalgebra.Matrix` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.getNumColumns:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getNumRows`(`org.spongycastle.pqc.math.linearalgebra.Matrix` v1 @kind this) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.getNumRows:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `isZero`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.isZero:()Z` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.Vector` `leftMultiply`(`org.spongycastle.pqc.math.linearalgebra.Vector` v0 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.leftMultiply:(Lorg/spongycastle/pqc/math/linearalgebra/Vector;)Lorg/spongycastle/pqc/math/linearalgebra/Vector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.Matrix` `rightMultiply`(`org.spongycastle.pqc.math.linearalgebra.Matrix` v0 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.rightMultiply:(Lorg/spongycastle/pqc/math/linearalgebra/Matrix;)Lorg/spongycastle/pqc/math/linearalgebra/Matrix;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.Matrix` `rightMultiply`(`org.spongycastle.pqc.math.linearalgebra.Permutation` v0 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.rightMultiply:(Lorg/spongycastle/pqc/math/linearalgebra/Permutation;)Lorg/spongycastle/pqc/math/linearalgebra/Matrix;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.spongycastle.pqc.math.linearalgebra.Vector` `rightMultiply`(`org.spongycastle.pqc.math.linearalgebra.Vector` v0 @kind object) @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.rightMultiply:(Lorg/spongycastle/pqc/math/linearalgebra/Vector;)Lorg/spongycastle/pqc/math/linearalgebra/Vector;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`() @signature `Lorg/spongycastle/pqc/math/linearalgebra/Matrix;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
