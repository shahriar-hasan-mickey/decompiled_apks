record `org.spongycastle.pqc.crypto.ntru.NTRUSigner` @kind class @AccessFlag PUBLIC {
  `org.spongycastle.crypto.Digest` `org.spongycastle.pqc.crypto.ntru.NTRUSigner.hashAlg` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters` `org.spongycastle.pqc.crypto.ntru.NTRUSigner.params` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters` `org.spongycastle.pqc.crypto.ntru.NTRUSigner.signingKeyPair` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters` `org.spongycastle.pqc.crypto.ntru.NTRUSigner.verificationKey` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v0 @kind this, `org.spongycastle.pqc.crypto.ntru.NTRUSigningParameters` v1 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.<init>:(Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningParameters;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `sign`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v8 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v9 @kind object, `org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters` v10 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.sign:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `signHash`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v5 @kind this, `byte`[] v6 @kind object, `org.spongycastle.pqc.crypto.ntru.NTRUSigningPrivateKeyParameters` v7 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.signHash:([BLorg/spongycastle/pqc/crypto/ntru/NTRUSigningPrivateKeyParameters;)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `verify`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v6 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v7 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v8 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v9 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.verify:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `boolean` `verifyHash`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `org.spongycastle.pqc.crypto.ntru.NTRUSigningPublicKeyParameters` v6 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.verifyHash:([B[BLorg/spongycastle/pqc/crypto/ntru/NTRUSigningPublicKeyParameters;)Z` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `createMsgRep`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v8 @kind this, `byte`[] v9 @kind object, `int` v10 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.createMsgRep:([BI)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PROTECTED {

  # return;
}
procedure `byte`[] `generateSignature`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v3 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.generateSignature:()[B` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v0 @kind this, `boolean` v1 , `org.spongycastle.crypto.CipherParameters` v2 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v1 @kind this, `byte` v2 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.update:(B)V` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `update`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.update:([BII)V` @AccessFlag PUBLIC {

  # return;
}
procedure `boolean` `verifySignature`(`org.spongycastle.pqc.crypto.ntru.NTRUSigner` v3 @kind this, `byte`[] v4 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUSigner;.verifySignature:([B)Z` @AccessFlag PUBLIC {

  # return;
}
