record `org.spongycastle.pqc.crypto.ntru.NTRUEngine` @kind class @AccessFlag PUBLIC extends `org.spongycastle.crypto.AsymmetricBlockCipher` @kind interface {
  `boolean` `org.spongycastle.pqc.crypto.ntru.NTRUEngine.forEncryption` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUEncryptionParameters` `org.spongycastle.pqc.crypto.ntru.NTRUEngine.params` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters` `org.spongycastle.pqc.crypto.ntru.NTRUEngine.privKey` @AccessFlag PRIVATE;
  `org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters` `org.spongycastle.pqc.crypto.ntru.NTRUEngine.pubKey` @AccessFlag PRIVATE;
  `java.security.SecureRandom` `org.spongycastle.pqc.crypto.ntru.NTRUEngine.random` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v0 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `MGF`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 , `boolean` v14 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.MGF:([BIIZ)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `buildSData`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object, `byte`[] v8 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.buildSData:([B[BI[B[B)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `calcHash`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v2 @kind this, `org.spongycastle.crypto.Digest` v3 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.calcHash:(Lorg/spongycastle/crypto/Digest;)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `calcHash`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v3 @kind this, `org.spongycastle.crypto.Digest` v4 @kind object, `byte`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.calcHash:(Lorg/spongycastle/crypto/Digest;[B)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `copyOf`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.copyOf:([BI)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `decrypt`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v16 @kind this, `byte`[] v17 @kind object, `org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPrivateKeyParameters` v18 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.decrypt:([BLorg/spongycastle/pqc/crypto/ntru/NTRUEncryptionPrivateKeyParameters;)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `byte`[] `encrypt`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v22 @kind this, `byte`[] v23 @kind object, `org.spongycastle.pqc.crypto.ntru.NTRUEncryptionPublicKeyParameters` v24 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.encrypt:([BLorg/spongycastle/pqc/crypto/ntru/NTRUEncryptionPublicKeyParameters;)[B` @AccessFlag PRIVATE {

  # return;
}
procedure `int`[] `generateBlindingCoeffs`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v5 @kind this, `org.spongycastle.pqc.crypto.ntru.IndexGenerator` v6 @kind object, `int` v7 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.generateBlindingCoeffs:(Lorg/spongycastle/pqc/crypto/ntru/IndexGenerator;I)[I` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.Polynomial` `generateBlindingPoly`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v3 @kind this, `byte`[] v4 @kind object, `byte`[] v5 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.generateBlindingPoly:([B[B)Lorg/spongycastle/pqc/math/ntru/polynomial/Polynomial;` @AccessFlag PRIVATE {

  # return;
}
procedure `int` `log2`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v1 @kind this, `int` v2 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.log2:(I)I` @AccessFlag PRIVATE {

  # return;
}
procedure `void` `putInt`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v1 @kind this, `org.spongycastle.crypto.Digest` v2 @kind object, `int` v3 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.putInt:(Lorg/spongycastle/crypto/Digest;I)V` @AccessFlag PRIVATE {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `decrypt`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v3 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.Polynomial` v5 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v6 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.decrypt:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/Polynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PROTECTED {

  # return;
}
procedure `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` `encrypt`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v1 @kind this, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v2 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.TernaryPolynomial` v3 @kind object, `org.spongycastle.pqc.math.ntru.polynomial.IntegerPolynomial` v4 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.encrypt:(Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/TernaryPolynomial;Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;)Lorg/spongycastle/pqc/math/ntru/polynomial/IntegerPolynomial;` @AccessFlag PROTECTED {

  # return;
}
procedure `int` `getInputBlockSize`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v1 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.getInputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `int` `getOutputBlockSize`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v2 @kind this) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.getOutputBlockSize:()I` @AccessFlag PUBLIC {

  # return;
}
procedure `void` `init`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v0 @kind this, `boolean` v1 , `org.spongycastle.crypto.CipherParameters` v2 @kind object) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.init:(ZLorg/spongycastle/crypto/CipherParameters;)V` @AccessFlag PUBLIC {

  # return;
}
procedure `byte`[] `processBlock`(`org.spongycastle.pqc.crypto.ntru.NTRUEngine` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lorg/spongycastle/pqc/crypto/ntru/NTRUEngine;.processBlock:([BII)[B` @AccessFlag PUBLIC {

  # return;
}
