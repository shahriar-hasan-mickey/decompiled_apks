record `com.google.zxing.common.HybridBinarizer` @kind class @AccessFlag PUBLIC_FINAL extends `com.google.zxing.common.GlobalHistogramBinarizer` @kind class {
  `com.google.zxing.common.BitMatrix` `com.google.zxing.common.HybridBinarizer.matrix` @AccessFlag PRIVATE;
}
global `int` `@@com.google.zxing.common.HybridBinarizer.BLOCK_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.zxing.common.HybridBinarizer.BLOCK_SIZE_MASK` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.zxing.common.HybridBinarizer.BLOCK_SIZE_POWER` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.zxing.common.HybridBinarizer.MINIMUM_DIMENSION` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@com.google.zxing.common.HybridBinarizer.MIN_DYNAMIC_RANGE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.google.zxing.common.HybridBinarizer` v0 @kind this, `com.google.zxing.LuminanceSource` v1 @kind object) @signature `Lcom/google/zxing/common/HybridBinarizer;.<init>:(Lcom/google/zxing/LuminanceSource;)V` @AccessFlag PUBLIC_CONSTRUCTOR {

  # return;
}
procedure `int`[][] `calculateBlackPoints`(`byte`[] v17 @kind object, `int` v18 , `int` v19 , `int` v20 , `int` v21 ) @signature `Lcom/google/zxing/common/HybridBinarizer;.calculateBlackPoints:([BIIII)[[I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `calculateThresholdForBlock`(`byte`[] v15 @kind object, `int` v16 , `int` v17 , `int` v18 , `int` v19 , `int`[][] v20 @kind object, `com.google.zxing.common.BitMatrix` v21 @kind object) @signature `Lcom/google/zxing/common/HybridBinarizer;.calculateThresholdForBlock:([BIIII[[ILcom/google/zxing/common/BitMatrix;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `int` `cap`(`int` v0 , `int` v1 , `int` v2 ) @signature `Lcom/google/zxing/common/HybridBinarizer;.cap:(III)I` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `void` `thresholdBlock`(`byte`[] v7 @kind object, `int` v8 , `int` v9 , `int` v10 , `int` v11 , `com.google.zxing.common.BitMatrix` v12 @kind object) @signature `Lcom/google/zxing/common/HybridBinarizer;.thresholdBlock:([BIIIILcom/google/zxing/common/BitMatrix;)V` @AccessFlag PRIVATE_STATIC {

  # return;
}
procedure `com.google.zxing.Binarizer` `createBinarizer`(`com.google.zxing.common.HybridBinarizer` v1 @kind this, `com.google.zxing.LuminanceSource` v2 @kind object) @signature `Lcom/google/zxing/common/HybridBinarizer;.createBinarizer:(Lcom/google/zxing/LuminanceSource;)Lcom/google/zxing/Binarizer;` @AccessFlag PUBLIC {

  # return;
}
procedure `com.google.zxing.common.BitMatrix` `getBlackMatrix`(`com.google.zxing.common.HybridBinarizer` v8 @kind this) @signature `Lcom/google/zxing/common/HybridBinarizer;.getBlackMatrix:()Lcom/google/zxing/common/BitMatrix;` @AccessFlag PUBLIC {

  # return;
}
